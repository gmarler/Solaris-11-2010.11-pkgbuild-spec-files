--- build/bakefiles/wxpresets/sample/minimal.cpp-orig	2009-06-18 19:35:20.852187000 -0500
+++ build/bakefiles/wxpresets/sample/minimal.cpp	2009-06-18 19:35:31.187701000 -0500
@@ -115,7 +115,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("Minimal wxWindows App"));
+    MyFrame *frame = new MyFrame(wxT("Minimal wxWindows App"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -143,14 +143,14 @@ MyFrame::MyFrame(const wxString& title)
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Minimal_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Minimal_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -159,7 +159,7 @@ MyFrame::MyFrame(const wxString& title)
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWindows!"));
+    SetStatusText(wxT("Welcome to wxWindows!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -175,8 +175,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the minimal sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the minimal sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About Minimal"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About Minimal"), wxOK | wxICON_INFORMATION, this);
 }
--- contrib/samples/ogl/studio/studio.cpp-orig	2009-06-18 19:16:55.982065000 -0500
+++ contrib/samples/ogl/studio/studio.cpp	2009-06-18 19:17:00.735982000 -0500
@@ -92,9 +92,9 @@ csApp::~csApp()
 bool csApp::OnInit(void)
 {
 #if wxUSE_WX_RESOURCES
-    if (!wxResourceParseFile(_T("studio_resources.wxr")))
+    if (!wxResourceParseFile(wxT("studio_resources.wxr")))
     {
-        wxMessageBox(_T("Could not find or parse resource file: studio_resources.wxr"), _T("Studio"));
+        wxMessageBox(wxT("Could not find or parse resource file: studio_resources.wxr"), wxT("Studio"));
         return false;
     }
 #endif
@@ -105,7 +105,7 @@ bool csApp::OnInit(void)
     m_helpController = new wxHtmlHelpController;
 #endif
 
-    m_helpController->Initialize(_T("studio.hlp"));
+    m_helpController->Initialize(wxT("studio.hlp"));
 
     ReadOptions();
 
@@ -117,7 +117,7 @@ bool csApp::OnInit(void)
     m_docManager = new wxDocManager;
 
     //// Create a template relating drawing documents to their views
-    (void) new wxDocTemplate(m_docManager, _T("Diagram"), _T("*.dia"), wxEmptyString, _T("dia"), _T("Diagram Doc"), _T("Diagram View"),
+    (void) new wxDocTemplate(m_docManager, wxT("Diagram"), wxT("*.dia"), wxEmptyString, wxT("dia"), wxT("Diagram Doc"), wxT("Diagram View"),
             CLASSINFO(csDiagramDocument), CLASSINFO(csDiagramView));
 
     // Create the main frame window.
@@ -128,7 +128,7 @@ bool csApp::OnInit(void)
 #define wxDEFAULT_FRAME_STYLE_NO_CLIP \
     (wxDEFAULT_FRAME_STYLE & ~wxCLIP_CHILDREN)
 
-    csFrame* frame = new csFrame(m_docManager, NULL, wxID_ANY, _T("OGL Studio"), m_mainFramePos, m_mainFrameSize,
+    csFrame* frame = new csFrame(m_docManager, NULL, wxID_ANY, wxT("OGL Studio"), m_mainFramePos, m_mainFrameSize,
                      wxDEFAULT_FRAME_STYLE_NO_CLIP | wxHSCROLL | wxVSCROLL);
 
     // Give it an icon
@@ -137,38 +137,38 @@ bool csApp::OnInit(void)
     // Make a menubar
     wxMenu *fileMenu = new wxMenu;
 
-    fileMenu->Append(wxID_NEW, _T("&New...\tCtrl+N"));
-    fileMenu->Append(wxID_OPEN, _T("&Open...\tCtrl+O"));
+    fileMenu->Append(wxID_NEW, wxT("&New...\tCtrl+N"));
+    fileMenu->Append(wxID_OPEN, wxT("&Open...\tCtrl+O"));
 
     fileMenu->AppendSeparator();
 
-    fileMenu->Append(wxID_PRINT, _T("&Print...\tCtrl+P"));
-    fileMenu->Append(wxID_PRINT_SETUP, _T("Print &Setup..."));
-    fileMenu->Append(wxID_PREVIEW, _T("Print Pre&view"));
+    fileMenu->Append(wxID_PRINT, wxT("&Print...\tCtrl+P"));
+    fileMenu->Append(wxID_PRINT_SETUP, wxT("Print &Setup..."));
+    fileMenu->Append(wxID_PREVIEW, wxT("Print Pre&view"));
     fileMenu->AppendSeparator();
-    fileMenu->Append(wxID_EXIT, _T("E&xit"));
+    fileMenu->Append(wxID_EXIT, wxT("E&xit"));
 
     // A history of files visited. Use this menu.
     m_docManager->FileHistoryUseMenu(fileMenu);
 
     wxMenu *viewMenu = new wxMenu;
-    viewMenu->Append(ID_CS_SETTINGS, _T("&Settings..."));
+    viewMenu->Append(ID_CS_SETTINGS, wxT("&Settings..."));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_HELP, _T("&Help Contents\tF1"));
-    helpMenu->Append(ID_CS_ABOUT, _T("&About"));
+    helpMenu->Append(wxID_HELP, wxT("&Help Contents\tF1"));
+    helpMenu->Append(ID_CS_ABOUT, wxT("&About"));
 
     wxMenuBar *menuBar = new wxMenuBar;
 
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(viewMenu, _T("&View"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(viewMenu, wxT("&View"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // Associate the menu bar with the frame
     frame->SetMenuBar(menuBar);
 
     // Load the file history
-    wxConfig config(_T("OGL Studio"), _T("wxWidgets"));
+    wxConfig config(wxT("OGL Studio"), wxT("wxWidgets"));
     m_docManager->FileHistoryLoad(config);
 
 #if wxUSE_STATUSBAR
@@ -186,12 +186,12 @@ bool csApp::OnInit(void)
 
     // Create the shape editing menu
     m_shapeEditMenu = new ShapeEditMenu;
-    m_shapeEditMenu->Append(ID_CS_EDIT_PROPERTIES, _T("Edit properties"));
+    m_shapeEditMenu->Append(ID_CS_EDIT_PROPERTIES, wxT("Edit properties"));
     m_shapeEditMenu->AppendSeparator();
-    m_shapeEditMenu->Append(ID_CS_ROTATE_CLOCKWISE, _T("Rotate clockwise"));
-    m_shapeEditMenu->Append(ID_CS_ROTATE_ANTICLOCKWISE, _T("Rotate anticlockwise"));
+    m_shapeEditMenu->Append(ID_CS_ROTATE_CLOCKWISE, wxT("Rotate clockwise"));
+    m_shapeEditMenu->Append(ID_CS_ROTATE_ANTICLOCKWISE, wxT("Rotate anticlockwise"));
     m_shapeEditMenu->AppendSeparator();
-    m_shapeEditMenu->Append(ID_CS_CUT, _T("Cut"));
+    m_shapeEditMenu->Append(ID_CS_CUT, wxT("Cut"));
 
     frame->Show(true);
 
@@ -229,46 +229,46 @@ int csApp::OnExit(void)
 wxMDIChildFrame *csApp::CreateChildFrame(wxDocument *doc, wxView *view, wxMenu** editMenuRet)
 {
     //// Make a child frame
-    csMDIChildFrame *subframe = new csMDIChildFrame(doc, view, ((wxDocMDIParentFrame*)GetTopWindow()), wxID_ANY, _T("Child Frame"),
+    csMDIChildFrame *subframe = new csMDIChildFrame(doc, view, ((wxDocMDIParentFrame*)GetTopWindow()), wxID_ANY, wxT("Child Frame"),
                                                     wxPoint(10, 10), wxSize(300, 300), wxDEFAULT_FRAME_STYLE);
 
 #ifdef __WXMSW__
-    subframe->SetIcon(wxString(_T("chart")));
+    subframe->SetIcon(wxString(wxT("chart")));
 #endif
 #ifdef __X__
-    subframe->SetIcon(wxIcon(_T("doc.xbm")));
+    subframe->SetIcon(wxIcon(wxT("doc.xbm")));
 #endif
 
     //// Make a menubar
     wxMenu *fileMenu = new wxMenu;
 
-    fileMenu->Append(wxID_NEW, _T("&New...\tCtrl+N"));
-    fileMenu->Append(wxID_OPEN, _T("&Open...\tCtrl+O"));
-    fileMenu->Append(wxID_CLOSE, _T("&Close\tCtrl+W"));
-    fileMenu->Append(wxID_SAVE, _T("&Save\tCtrl+S"));
-    fileMenu->Append(wxID_SAVEAS, _T("Save &As...\tF12"));
+    fileMenu->Append(wxID_NEW, wxT("&New...\tCtrl+N"));
+    fileMenu->Append(wxID_OPEN, wxT("&Open...\tCtrl+O"));
+    fileMenu->Append(wxID_CLOSE, wxT("&Close\tCtrl+W"));
+    fileMenu->Append(wxID_SAVE, wxT("&Save\tCtrl+S"));
+    fileMenu->Append(wxID_SAVEAS, wxT("Save &As...\tF12"));
 
     fileMenu->AppendSeparator();
-    fileMenu->Append(wxID_PRINT, _T("&Print...\tCtrl+P"));
-    fileMenu->Append(wxID_PRINT_SETUP, _T("Print &Setup..."));
-    fileMenu->Append(wxID_PREVIEW, _T("Print Pre&view"));
+    fileMenu->Append(wxID_PRINT, wxT("&Print...\tCtrl+P"));
+    fileMenu->Append(wxID_PRINT_SETUP, wxT("Print &Setup..."));
+    fileMenu->Append(wxID_PREVIEW, wxT("Print Pre&view"));
 
     fileMenu->AppendSeparator();
-    fileMenu->Append(wxID_EXIT, _T("E&xit"));
+    fileMenu->Append(wxID_EXIT, wxT("E&xit"));
 
     wxMenu* editMenu = new wxMenu;
-    editMenu->Append(wxID_UNDO, _T("&Undo\tCtrl+Z"));
-    editMenu->Append(wxID_REDO, _T("&Redo\tCtrl+Y"));
+    editMenu->Append(wxID_UNDO, wxT("&Undo\tCtrl+Z"));
+    editMenu->Append(wxID_REDO, wxT("&Redo\tCtrl+Y"));
     editMenu->AppendSeparator();
-    editMenu->Append(wxID_CUT, _T("Cu&t\tCtrl+X"));
-    editMenu->Append(wxID_COPY, _T("&Copy\tCtrl+C"));
-    editMenu->Append(wxID_PASTE, _T("&Paste\tCtrl+V"));
-    editMenu->Append(wxID_DUPLICATE, _T("&Duplicate\tCtrl+D"));
+    editMenu->Append(wxID_CUT, wxT("Cu&t\tCtrl+X"));
+    editMenu->Append(wxID_COPY, wxT("&Copy\tCtrl+C"));
+    editMenu->Append(wxID_PASTE, wxT("&Paste\tCtrl+V"));
+    editMenu->Append(wxID_DUPLICATE, wxT("&Duplicate\tCtrl+D"));
     editMenu->AppendSeparator();
-    editMenu->Append(wxID_CLEAR, _T("Cle&ar\tDelete"));
-    editMenu->Append(ID_CS_SELECT_ALL, _T("Select A&ll\tCtrl+A"));
+    editMenu->Append(wxID_CLEAR, wxT("Cle&ar\tDelete"));
+    editMenu->Append(ID_CS_SELECT_ALL, wxT("Select A&ll\tCtrl+A"));
     editMenu->AppendSeparator();
-    editMenu->Append(ID_CS_EDIT_PROPERTIES, _T("Edit P&roperties..."));
+    editMenu->Append(ID_CS_EDIT_PROPERTIES, wxT("Edit P&roperties..."));
 
     *editMenuRet = editMenu;
 
@@ -278,18 +278,18 @@ wxMDIChildFrame *csApp::CreateChildFrame
     doc->GetCommandProcessor()->SetEditMenu(editMenu);
 
     wxMenu *viewMenu = new wxMenu;
-    viewMenu->Append(ID_CS_SETTINGS, _T("&Settings..."));
+    viewMenu->Append(ID_CS_SETTINGS, wxT("&Settings..."));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_HELP, _T("&Help Contents\tF1"));
-    helpMenu->Append(ID_CS_ABOUT, _T("&About"));
+    helpMenu->Append(wxID_HELP, wxT("&Help Contents\tF1"));
+    helpMenu->Append(ID_CS_ABOUT, wxT("&About"));
 
     wxMenuBar *menuBar = new wxMenuBar;
 
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(editMenu, _T("&Edit"));
-    menuBar->Append(viewMenu, _T("&View"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(editMenu, wxT("&Edit"));
+    menuBar->Append(viewMenu, wxT("&View"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     //// Associate the menu bar with the frame
     subframe->SetMenuBar(menuBar);
@@ -306,7 +306,7 @@ csCanvas *csApp::CreateCanvas(wxView *vi
     // Non-retained canvas
     csCanvas *canvas = new csCanvas((csDiagramView*) view, parent, 1000, wxPoint(0, 0), wxSize(width, height), wxSUNKEN_BORDER);
 
-    wxColour bgColour(_T("WHITE"));
+    wxColour bgColour(wxT("WHITE"));
     canvas->SetBackgroundColour(bgColour);
 
     wxCursor cursor(wxCURSOR_HAND);
@@ -333,20 +333,20 @@ void csApp::InitToolBar(wxToolBar* toolB
     bitmaps[8] = new wxBitmap( undo_xpm );
     bitmaps[9] = new wxBitmap( redo_xpm );
 
-    toolBar->AddTool(wxID_NEW, *bitmaps[0], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("New file"));
-    toolBar->AddTool(wxID_OPEN, *bitmaps[1], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Open file"));
-    toolBar->AddTool(wxID_SAVE, *bitmaps[2], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Save file"));
+    toolBar->AddTool(wxID_NEW, *bitmaps[0], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("New file"));
+    toolBar->AddTool(wxID_OPEN, *bitmaps[1], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Open file"));
+    toolBar->AddTool(wxID_SAVE, *bitmaps[2], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Save file"));
     toolBar->AddSeparator();
-    toolBar->AddTool(wxID_PRINT, *bitmaps[6], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Print"));
+    toolBar->AddTool(wxID_PRINT, *bitmaps[6], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Print"));
     toolBar->AddSeparator();
-    toolBar->AddTool(wxID_COPY, *bitmaps[3], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Copy"));
-    toolBar->AddTool(wxID_CUT, *bitmaps[4], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Cut"));
-    toolBar->AddTool(wxID_PASTE, *bitmaps[5], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Paste"));
+    toolBar->AddTool(wxID_COPY, *bitmaps[3], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Copy"));
+    toolBar->AddTool(wxID_CUT, *bitmaps[4], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Cut"));
+    toolBar->AddTool(wxID_PASTE, *bitmaps[5], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Paste"));
     toolBar->AddSeparator();
-    toolBar->AddTool(wxID_UNDO, *bitmaps[8], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Undo"));
-    toolBar->AddTool(wxID_REDO, *bitmaps[9], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Redo"));
+    toolBar->AddTool(wxID_UNDO, *bitmaps[8], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Undo"));
+    toolBar->AddTool(wxID_REDO, *bitmaps[9], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Redo"));
     toolBar->AddSeparator();
-    toolBar->AddTool(wxID_HELP, *bitmaps[7], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Help"));
+    toolBar->AddTool(wxID_HELP, *bitmaps[7], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Help"));
 
     toolBar->Realize();
 
@@ -391,18 +391,18 @@ void csApp::CreateDiagramToolBar(wxFrame
     bitmaps[9] = new wxBitmap( cutpoint_xpm );
     bitmaps[10] = new wxBitmap( straight_xpm );
 
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNL, *bitmaps[0], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Align left"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNR, *bitmaps[1], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Align right"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNT, *bitmaps[2], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Align top"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNB, *bitmaps[3], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Align bottom"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGN_HORIZ, *bitmaps[4], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Align horizontally"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGN_VERT, *bitmaps[5], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Align vertically"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_COPY_SIZE, *bitmaps[6], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Copy size"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNL, *bitmaps[0], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Align left"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNR, *bitmaps[1], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Align right"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNT, *bitmaps[2], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Align top"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGNB, *bitmaps[3], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Align bottom"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGN_HORIZ, *bitmaps[4], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Align horizontally"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_ALIGN_VERT, *bitmaps[5], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Align vertically"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_COPY_SIZE, *bitmaps[6], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Copy size"));
     m_diagramToolBar->AddSeparator();
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_LINE_ARROW, *bitmaps[7], wxNullBitmap, true, wxDefaultCoord, wxDefaultCoord, NULL, _T("Toggle arrow"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_NEW_POINT, *bitmaps[8], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("New line point"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_CUT_POINT, *bitmaps[9], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Cut line point"));
-    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_STRAIGHTEN, *bitmaps[10], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, _T("Straighten lines"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_LINE_ARROW, *bitmaps[7], wxNullBitmap, true, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Toggle arrow"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_NEW_POINT, *bitmaps[8], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("New line point"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_CUT_POINT, *bitmaps[9], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Cut line point"));
+    m_diagramToolBar->AddTool(DIAGRAM_TOOLBAR_STRAIGHTEN, *bitmaps[10], wxNullBitmap, false, wxDefaultCoord, wxDefaultCoord, NULL, wxT("Straighten lines"));
 
     m_diagramToolBar->Realize();
 
@@ -415,7 +415,7 @@ void csApp::CreateDiagramToolBar(wxFrame
     wxString *pointSizes = new wxString[maxPointSize];
     for (i = 1; i <= maxPointSize; i++)
     {
-        pointSizes[i-1].Printf(_T("%d"), i);
+        pointSizes[i-1].Printf(wxT("%d"), i);
     }
 
     int controlX = 260;
@@ -449,7 +449,7 @@ void csApp::CreateDiagramToolBar(wxFrame
     wxString *zoomStrings = new wxString[noStrings];
     for (i = 0; i < noStrings; i ++)
     {
-        zoomStrings[noStrings - i - 1].Printf(_T("%d%%"), (i*increment + minZoom));
+        zoomStrings[noStrings - i - 1].Printf(wxT("%d%%"), (i*increment + minZoom));
     }
 
     controlX += pointSizeW + 10;
@@ -472,28 +472,28 @@ void csApp::CreateDiagramToolBar(wxFrame
 // Read/write configuration information
 bool csApp::ReadOptions()
 {
-    wxConfig config(_T("OGL Studio"), _T("wxWidgets"));
+    wxConfig config(wxT("OGL Studio"), wxT("wxWidgets"));
 
-    config.Read(_T("mainX"), & m_mainFramePos.x);
-    config.Read(_T("mainY"), & m_mainFramePos.y);
-    config.Read(_T("mainWidth"), & m_mainFrameSize.x);
-    config.Read(_T("mainHeight"), & m_mainFrameSize.y);
-    config.Read(_T("gridStyle"), & m_gridStyle);
-    config.Read(_T("gridSpacing"), & m_gridSpacing);
+    config.Read(wxT("mainX"), & m_mainFramePos.x);
+    config.Read(wxT("mainY"), & m_mainFramePos.y);
+    config.Read(wxT("mainWidth"), & m_mainFrameSize.x);
+    config.Read(wxT("mainHeight"), & m_mainFrameSize.y);
+    config.Read(wxT("gridStyle"), & m_gridStyle);
+    config.Read(wxT("gridSpacing"), & m_gridSpacing);
 
     return true;
 }
 
 bool csApp::WriteOptions()
 {
-    wxConfig config(_T("OGL Studio"), _T("wxWidgets"));
+    wxConfig config(wxT("OGL Studio"), wxT("wxWidgets"));
 
-    config.Write(_T("mainX"), (long) m_mainFramePos.x);
-    config.Write(_T("mainY"), (long) m_mainFramePos.y);
-    config.Write(_T("mainWidth"), (long) m_mainFrameSize.x);
-    config.Write(_T("mainHeight"), (long) m_mainFrameSize.y);
-    config.Write(_T("gridStyle"), (long) m_gridStyle);
-    config.Write(_T("gridSpacing"), (long) m_gridSpacing);
+    config.Write(wxT("mainX"), (long) m_mainFramePos.x);
+    config.Write(wxT("mainY"), (long) m_mainFramePos.y);
+    config.Write(wxT("mainWidth"), (long) m_mainFrameSize.x);
+    config.Write(wxT("mainHeight"), (long) m_mainFrameSize.y);
+    config.Write(wxT("gridStyle"), (long) m_gridStyle);
+    config.Write(wxT("gridSpacing"), (long) m_gridSpacing);
 
     m_docManager->FileHistorySave(config);
 
--- contrib/samples/ogl/studio/dialogs.cpp-orig	2009-06-18 19:17:05.484749000 -0500
+++ contrib/samples/ogl/studio/dialogs.cpp	2009-06-18 19:17:11.149678000 -0500
@@ -36,7 +36,7 @@ END_EVENT_TABLE()
 
 csLabelEditingDialog::csLabelEditingDialog(wxWindow* parent)
 {
-    wxLoadFromResource(this, parent, _T("shape_label_dialog"));
+    wxLoadFromResource(this, parent, wxT("shape_label_dialog"));
 
     // Accelerators
     wxAcceleratorEntry entries[1];
@@ -86,7 +86,7 @@ END_EVENT_TABLE()
 // For 400x400 settings dialog, size your panels to about 375x325 in dialog editor
 
 csSettingsDialog::csSettingsDialog(wxWindow* parent):
-    wxDialog(parent, wxID_ANY, _T("Settings"), wxPoint(0, 0), wxSize(PROPERTY_DIALOG_WIDTH, PROPERTY_DIALOG_HEIGHT))
+    wxDialog(parent, wxID_ANY, wxT("Settings"), wxPoint(0, 0), wxSize(PROPERTY_DIALOG_WIDTH, PROPERTY_DIALOG_HEIGHT))
 {
     m_generalSettings = NULL;
     m_diagramSettings = NULL;
@@ -99,25 +99,25 @@ csSettingsDialog::csSettingsDialog(wxWin
     #ifdef  __WXDEBUG__
     bool success =
     #endif
-                   wxLoadFromResource(m_generalSettings, m_notebook, _T("general_settings_dialog"));
-    wxASSERT_MSG( (success), _T("Could not load general settings panel."));
-    m_notebook->AddPage(m_generalSettings, _T("General"), true);
+                   wxLoadFromResource(m_generalSettings, m_notebook, wxT("general_settings_dialog"));
+    wxASSERT_MSG( (success), wxT("Could not load general settings panel."));
+    m_notebook->AddPage(m_generalSettings, wxT("General"), true);
 
     m_diagramSettings = new wxPanel;
 
     #ifdef  __WXDEBUG__
     success =
     #endif
-              wxLoadFromResource(m_diagramSettings, m_notebook, _T("diagram_settings_dialog"));
-    wxASSERT_MSG( (success), _T("Could not load diagram settings panel."));
-    m_notebook->AddPage(m_diagramSettings, _T("Diagram"));
+              wxLoadFromResource(m_diagramSettings, m_notebook, wxT("diagram_settings_dialog"));
+    wxASSERT_MSG( (success), wxT("Could not load diagram settings panel."));
+    m_notebook->AddPage(m_diagramSettings, wxT("Diagram"));
 
     int largeButtonWidth = 70;
     int largeButtonHeight = 22;
 
-    wxButton* okButton = new wxButton(this, wxID_OK, _T("OK"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
-    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _T("Cancel"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
-    wxButton* helpButton = new wxButton(this, wxID_HELP, _T("Help"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
+    wxButton* okButton = new wxButton(this, wxID_OK, wxT("OK"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
+    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, wxT("Cancel"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
+    wxButton* helpButton = new wxButton(this, wxID_HELP, wxT("Help"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
 
     // Constraints for the notebook
     wxLayoutConstraints *c = new wxLayoutConstraints;
@@ -166,15 +166,15 @@ void csSettingsDialog::OnOK(wxCommandEve
 bool csSettingsDialog::TransferDataToWindow()
 {
     wxTextCtrl* gridSpacing = (wxTextCtrl*) m_diagramSettings->FindWindow(ID_GRID_SPACING);
-    wxASSERT_MSG( (gridSpacing != (wxTextCtrl*) NULL), _T("Could not find grid spacing control."));
+    wxASSERT_MSG( (gridSpacing != (wxTextCtrl*) NULL), wxT("Could not find grid spacing control."));
 
     wxChoice* gridStyle = (wxChoice*) m_diagramSettings->FindWindow(ID_GRID_STYLE);
-    wxASSERT_MSG( (gridStyle != (wxChoice*) NULL), _T("Could not find grid style control."));
+    wxASSERT_MSG( (gridStyle != (wxChoice*) NULL), wxT("Could not find grid style control."));
 
     gridStyle->SetSelection(wxGetApp().GetGridStyle());
 
     wxString str;
-    str.Printf(_T("%d"), wxGetApp().GetGridSpacing());
+    str.Printf(wxT("%d"), wxGetApp().GetGridSpacing());
     gridSpacing->SetValue(str);
 
     return true;
@@ -183,10 +183,10 @@ bool csSettingsDialog::TransferDataToWin
 bool csSettingsDialog::TransferDataFromWindow()
 {
     wxTextCtrl* gridSpacing = (wxTextCtrl*) m_diagramSettings->FindWindow(ID_GRID_SPACING);
-    wxASSERT_MSG( (gridSpacing != (wxTextCtrl*) NULL), _T("Could not find grid spacing control."));
+    wxASSERT_MSG( (gridSpacing != (wxTextCtrl*) NULL), wxT("Could not find grid spacing control."));
 
     wxChoice* gridStyle = (wxChoice*) m_diagramSettings->FindWindow(ID_GRID_STYLE);
-    wxASSERT_MSG( (gridStyle != (wxChoice*) NULL), _T("Could not find grid style control."));
+    wxASSERT_MSG( (gridStyle != (wxChoice*) NULL), wxT("Could not find grid style control."));
 
     wxGetApp().SetGridStyle(gridStyle->GetSelection());
     wxString str = gridSpacing->GetValue();
@@ -196,7 +196,7 @@ bool csSettingsDialog::TransferDataFromW
 
     if (wxGetApp().GetGridStyle() == csGRID_STYLE_DOTTED)
     {
-        wxMessageBox(_T("Dotted grid style not yet implemented."), _T("Studio"), wxICON_EXCLAMATION);
+        wxMessageBox(wxT("Dotted grid style not yet implemented."), wxT("Studio"), wxICON_EXCLAMATION);
         return false;
     }
 
@@ -267,28 +267,28 @@ csShapePropertiesDialog::csShapeProperti
     #ifdef  __WXDEBUG__
     bool success =
     #endif
-                   wxLoadFromResource(m_generalPropertiesDialog, m_notebook, _T("general_shape_properties_dialog"));
-    wxASSERT_MSG( (success), _T("Could not load general properties panel."));
-    m_notebook->AddPage(m_generalPropertiesDialog, _T("General"));
+                   wxLoadFromResource(m_generalPropertiesDialog, m_notebook, wxT("general_shape_properties_dialog"));
+    wxASSERT_MSG( (success), wxT("Could not load general properties panel."));
+    m_notebook->AddPage(m_generalPropertiesDialog, wxT("General"));
 
     if (!wxLoadFromResource(m_attributeDialog, m_notebook, attributeDialogName))
     {
-        wxMessageBox(_T("Could not load the attribute dialog for this shape."), _T("Studio"), wxICON_EXCLAMATION);
+        wxMessageBox(wxT("Could not load the attribute dialog for this shape."), wxT("Studio"), wxICON_EXCLAMATION);
         delete m_attributeDialog;
         m_attributeDialog = NULL;
     }
     else
     {
-        m_notebook->AddPage(m_attributeDialog, _T("Attributes"));
+        m_notebook->AddPage(m_attributeDialog, wxT("Attributes"));
     }
 
     // Try the alternative dialog (test code)
     wxString str(attributeDialogName);
-    str += _T("1");
+    str += wxT("1");
     m_alternativeAttributeDialog = new wxPanel;
     if (wxLoadFromResource(m_alternativeAttributeDialog, m_notebook, str))
     {
-        m_notebook->AddPage(m_alternativeAttributeDialog, _T("Attributes (alternative)"));
+        m_notebook->AddPage(m_alternativeAttributeDialog, wxT("Attributes (alternative)"));
     }
     else
     {
@@ -299,9 +299,9 @@ csShapePropertiesDialog::csShapeProperti
     int largeButtonWidth = 70;
     int largeButtonHeight = 22;
 
-    wxButton* okButton = new wxButton(this, wxID_OK, _T("OK"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
-    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, _T("Cancel"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
-    wxButton* helpButton = new wxButton(this, wxID_HELP, _T("Help"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
+    wxButton* okButton = new wxButton(this, wxID_OK, wxT("OK"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
+    wxButton* cancelButton = new wxButton(this, wxID_CANCEL, wxT("Cancel"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
+    wxButton* helpButton = new wxButton(this, wxID_HELP, wxT("Help"), wxPoint(0, 0), wxSize(largeButtonWidth, largeButtonHeight));
 
     // Constraints for the notebook
     wxLayoutConstraints *c = new wxLayoutConstraints;
--- contrib/samples/ogl/studio/csprint.cpp-orig	2009-06-18 19:17:16.119173000 -0500
+++ contrib/samples/ogl/studio/csprint.cpp	2009-06-18 19:17:20.783965000 -0500
@@ -107,8 +107,8 @@ bool wxDiagramClipboard::DoCopy(wxDiagra
                 wxShape* fromShape = (wxShape*) mapping.Get((long) lineShape->GetFrom());
                 wxShape* toShape = (wxShape*) mapping.Get((long) lineShape->GetTo());
 
-                wxASSERT_MSG( (fromShape != NULL), _T("Could not find 'from' shape"));
-                wxASSERT_MSG( (toShape != NULL), _T("Could not find 'to' shape"));
+                wxASSERT_MSG( (fromShape != NULL), wxT("Could not find 'from' shape"));
+                wxASSERT_MSG( (toShape != NULL), wxT("Could not find 'to' shape"));
 
                 fromShape->AddLine(newShape, toShape, newShape->GetAttachmentFrom(),
                   newShape->GetAttachmentTo());
@@ -140,7 +140,7 @@ bool wxDiagramClipboard::DoCopy(wxDiagra
                 {
                     wxLineShape* newLineShape = (wxLineShape*) mapping.Get((long) lineShape);
 
-                    wxASSERT_MSG( (newLineShape != NULL), _T("Could not find new line shape"));
+                    wxASSERT_MSG( (newLineShape != NULL), wxT("Could not find new line shape"));
 
                     newLines.Append(newLineShape);
                 }
@@ -187,8 +187,8 @@ bool wxDiagramClipboard::CopyToClipboard
       delete newBitmap;
 
       wxChar buf[200];
-      wxSprintf(buf, _T("Sorry, could not allocate clipboard bitmap (%dx%d)"), (maxX+10), (maxY+10));
-      wxMessageBox(buf, _T("Clipboard copy problem"));
+      wxSprintf(buf, wxT("Sorry, could not allocate clipboard bitmap (%dx%d)"), (maxX+10), (maxY+10));
+      wxMessageBox(buf, wxT("Clipboard copy problem"));
       return false;
     }
 
@@ -228,7 +228,7 @@ bool wxDiagramClipboard::CopyToClipboard
   }
   return true;
 #else
-  wxMessageBox("wxUSE_METAFILE in build required to use Clipboard", _T("Clipboard copy problem"));
+  wxMessageBox("wxUSE_METAFILE in build required to use Clipboard", wxT("Clipboard copy problem"));
   return false;
 #endif
 }
@@ -268,7 +268,7 @@ bool csDiagramClipboard::OnStartCopy(wxD
     csDiagramDocument* doc = diagram->GetDocument();
     ((csDiagramView*)doc->GetFirstView())->SelectAll(false);
 
-    m_currentCmd = new csDiagramCommand(_T("Paste"), doc);
+    m_currentCmd = new csDiagramCommand(wxT("Paste"), doc);
 
     return true;
 }
--- contrib/samples/ogl/studio/view.cpp-orig	2009-06-18 19:17:25.083896000 -0500
+++ contrib/samples/ogl/studio/view.cpp	2009-06-18 19:17:30.953811000 -0500
@@ -321,7 +321,7 @@ void csDiagramView::DoCut(wxList& shapes
 
     if (shapes.GetCount() > 0)
     {
-        csDiagramCommand* cmd = new csDiagramCommand(_T("Cut"), doc);
+        csDiagramCommand* cmd = new csDiagramCommand(wxT("Cut"), doc);
 
         wxObjectList::compatibility_iterator node = shapes.GetFirst();
         while (node)
@@ -400,7 +400,7 @@ void csDiagramView::OnChangeBackgroundCo
         if (!theBrush)
             return;
 
-        csDiagramCommand* cmd = new csDiagramCommand(_T("Change colour"), doc);
+        csDiagramCommand* cmd = new csDiagramCommand(wxT("Change colour"), doc);
 
         wxObjectList::compatibility_iterator node = selections.GetFirst();
         while (node)
@@ -469,7 +469,7 @@ void csDiagramView::ApplyPointSize(int p
 
     if (selections.GetCount() > 0)
     {
-        csDiagramCommand* cmd = new csDiagramCommand(_T("Point size"), doc);
+        csDiagramCommand* cmd = new csDiagramCommand(wxT("Point size"), doc);
 
         wxObjectList::compatibility_iterator node = selections.GetFirst();
         while (node)
@@ -560,9 +560,9 @@ void csDiagramView::OnToggleArrowTool(wx
     bool state = wxGetApp().GetDiagramToolBar()->GetToolState(DIAGRAM_TOOLBAR_LINE_ARROW);
     wxString stateName;
     if (state)
-        stateName = _T("Arrow on");
+        stateName = wxT("Arrow on");
     else
-        stateName = _T("Arrow off");
+        stateName = wxT("Arrow off");
 
     wxList selections;
     FindSelectedShapes(selections, CLASSINFO(wxLineShape));
@@ -583,7 +583,7 @@ void csDiagramView::OnToggleArrowTool(wx
                 if (theShape->GetArrows().GetCount() == 0)
                 {
                     newShape = (wxLineShape*) theShape->CreateNewCopy();
-                    newShape->AddArrow(ARROW_ARROW, ARROW_POSITION_MIDDLE, 10.0, 0.0, _T("Normal arrowhead"));
+                    newShape->AddArrow(ARROW_ARROW, ARROW_POSITION_MIDDLE, 10.0, 0.0, wxT("Normal arrowhead"));
                 }
             }
             else
@@ -658,7 +658,7 @@ void csDiagramView::OnAlign(wxCommandEve
         return;
 
     csDiagramDocument *doc = (csDiagramDocument *)GetDocument();
-    csDiagramCommand* cmd = new csDiagramCommand(_T("Align"), doc);
+    csDiagramCommand* cmd = new csDiagramCommand(wxT("Align"), doc);
 
     node = selections.GetFirst();
     wxShape* firstShape = (wxShape*) node->GetData();
@@ -741,7 +741,7 @@ void csDiagramView::OnAlignUpdate(wxUpda
 void csDiagramView::OnNewLinePoint(wxCommandEvent& WXUNUSED(event))
 {
     csDiagramDocument *doc = (csDiagramDocument *)GetDocument();
-    csDiagramCommand* cmd = new csDiagramCommand(_T("New line point"), doc);
+    csDiagramCommand* cmd = new csDiagramCommand(wxT("New line point"), doc);
 
     wxObjectList::compatibility_iterator node = m_selections.GetFirst();
     while (node)
@@ -762,7 +762,7 @@ void csDiagramView::OnNewLinePoint(wxCom
 void csDiagramView::OnCutLinePoint(wxCommandEvent& WXUNUSED(event))
 {
     csDiagramDocument *doc = (csDiagramDocument *)GetDocument();
-    csDiagramCommand* cmd = new csDiagramCommand(_T("Cut line point"), doc);
+    csDiagramCommand* cmd = new csDiagramCommand(wxT("Cut line point"), doc);
 
     wxObjectList::compatibility_iterator node = m_selections.GetFirst();
     while (node)
@@ -783,7 +783,7 @@ void csDiagramView::OnCutLinePoint(wxCom
 void csDiagramView::OnStraightenLines(wxCommandEvent& WXUNUSED(event))
 {
     csDiagramDocument *doc = (csDiagramDocument *)GetDocument();
-    csDiagramCommand* cmd = new csDiagramCommand(_T("Straighten lines"), doc);
+    csDiagramCommand* cmd = new csDiagramCommand(wxT("Straighten lines"), doc);
 
     wxObjectList::compatibility_iterator node = m_selections.GetFirst();
     while (node)
@@ -878,7 +878,7 @@ void csCanvas::OnLeftClick(double x, dou
         csLabelEditingDialog* dialog = new csLabelEditingDialog(GetParent());
 
         dialog->SetShapeLabel( wxEmptyString );
-        dialog->SetTitle(_T("New text box"));
+        dialog->SetTitle(wxT("New text box"));
         if (dialog->ShowModal() == wxID_CANCEL)
         {
             dialog->Destroy();
@@ -910,7 +910,7 @@ void csCanvas::OnLeftClick(double x, dou
         shape->SetX(x);
         shape->SetY(y);
 
-        csDiagramCommand* cmd = new csDiagramCommand(_T("Text box"),
+        csDiagramCommand* cmd = new csDiagramCommand(wxT("Text box"),
             (csDiagramDocument *)GetView()->GetDocument(),
             new csCommandState(ID_CS_ADD_SHAPE, shape, NULL));
         GetView()->GetDocument()->GetCommandProcessor()->Submit(cmd);
--- contrib/samples/ogl/studio/doc.cpp-orig	2009-06-18 19:17:35.767853000 -0500
+++ contrib/samples/ogl/studio/doc.cpp	2009-06-18 19:17:40.468761000 -0500
@@ -61,9 +61,9 @@ bool csDiagramDocument::OnSaveDocument(c
     if (wxTheApp->GetAppName() != wxEmptyString)
         msgTitle = wxTheApp->GetAppName();
     else
-        msgTitle = wxString(_T("File error"));
+        msgTitle = wxString(wxT("File error"));
 
-    (void)wxMessageBox(_T("Sorry, could not open this file for saving."), msgTitle, wxOK | wxICON_EXCLAMATION,
+    (void)wxMessageBox(wxT("Sorry, could not open this file for saving."), msgTitle, wxOK | wxICON_EXCLAMATION,
       GetDocumentWindow());
     return false;
   }
@@ -82,12 +82,12 @@ bool csDiagramDocument::OnOpenDocument(c
   if (wxTheApp->GetAppName() != wxEmptyString)
     msgTitle = wxTheApp->GetAppName();
   else
-    msgTitle = wxString(_T("File error"));
+    msgTitle = wxString(wxT("File error"));
 
   m_diagram.DeleteAllShapes();
   if (!m_diagram.LoadFile(file))
   {
-    (void)wxMessageBox(_T("Sorry, could not open this file."), msgTitle, wxOK|wxICON_EXCLAMATION,
+    (void)wxMessageBox(wxT("Sorry, could not open this file."), msgTitle, wxOK|wxICON_EXCLAMATION,
      GetDocumentWindow());
     return false;
   }
--- contrib/samples/ogl/studio/shapes.cpp-orig	2009-06-18 19:17:46.496881000 -0500
+++ contrib/samples/ogl/studio/shapes.cpp	2009-06-18 19:17:51.738186000 -0500
@@ -239,14 +239,14 @@ void csEvtHandler::OnEndDragRight(double
         lineShape->MakeLineControlPoints(2);
 
         if (haveArrow)
-            lineShape->AddArrow(ARROW_ARROW, ARROW_POSITION_MIDDLE, 10.0, 0.0, _T("Normal arrowhead"));
+            lineShape->AddArrow(ARROW_ARROW, ARROW_POSITION_MIDDLE, 10.0, 0.0, wxT("Normal arrowhead"));
 
         lineShape->SetFrom(GetShape());
         lineShape->SetTo(otherShape);
         lineShape->SetAttachments(attachment, new_attachment);
 
         canvas->GetView()->GetDocument()->GetCommandProcessor()->Submit(
-            new csDiagramCommand(_T("Line"), (csDiagramDocument *)canvas->GetView()->GetDocument(),
+            new csDiagramCommand(wxT("Line"), (csDiagramDocument *)canvas->GetView()->GetDocument(),
                     new csCommandState(ID_CS_ADD_LINE, lineShape, NULL)));
   }
 }
@@ -404,7 +404,7 @@ void csEvtHandler::OnEndDragLeft(double 
   newShape->SetX(xx);
   newShape->SetY(yy);
 
-  csDiagramCommand* cmd = new csDiagramCommand(_T("Move"), (csDiagramDocument*)canvas->GetView()->GetDocument(),
+  csDiagramCommand* cmd = new csDiagramCommand(wxT("Move"), (csDiagramDocument*)canvas->GetView()->GetDocument(),
                 new csCommandState(ID_CS_MOVE, newShape, GetShape()));
 
   // Move line points
@@ -552,7 +552,7 @@ void csEvtHandler::OnSizingEndDragLeft(w
     }
   }
 
-  csDiagramCommand* cmd = new csDiagramCommand(_T("Size"), (csDiagramDocument*)canvas->GetView()->GetDocument(),
+  csDiagramCommand* cmd = new csDiagramCommand(wxT("Size"), (csDiagramDocument*)canvas->GetView()->GetDocument(),
                 new csCommandState(ID_CS_SIZE, newShape, shape));
 
   canvas->GetView()->GetDocument()->GetCommandProcessor()->Submit(cmd);
@@ -576,7 +576,7 @@ void csEvtHandler::OnChangeAttachment(in
     // Problem. If we refresh after the attachment change, we'll get a flicker.
     // We really want to do both in a oner.
 
-    csDiagramCommand* cmd = new csDiagramCommand(_T("Change attachment"), (csDiagramDocument*)canvas->GetView()->GetDocument());
+    csDiagramCommand* cmd = new csDiagramCommand(wxT("Change attachment"), (csDiagramDocument*)canvas->GetView()->GetDocument());
 
     wxLineShape* newLine = (wxLineShape*) line->CreateNewCopy();
     if (line->GetTo() == GetShape())
@@ -618,60 +618,60 @@ bool csEvtHandler::EditProperties()
     if (shape->IsKindOf(CLASSINFO(csThinRectangleShape)))
     {
         attributeDialog = new csThinRectangleDialog;
-        attributeDialogName = _T("thin_rectangle");
-        title = _T("Thin Rectangle Properties");
+        attributeDialogName = wxT("thin_rectangle");
+        title = wxT("Thin Rectangle Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csWideRectangleShape)))
     {
         attributeDialog = new csWideRectangleDialog;
-        attributeDialogName = _T("wide_rectangle");
-        title = _T("Wide Rectangle Properties");
+        attributeDialogName = wxT("wide_rectangle");
+        title = wxT("Wide Rectangle Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csTriangleShape)))
     {
         attributeDialog = new csTriangleDialog;
-        attributeDialogName = _T("triangle");
-        title = _T("Triangle Properties");
+        attributeDialogName = wxT("triangle");
+        title = wxT("Triangle Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csSemiCircleShape)))
     {
         attributeDialog = new csSemiCircleDialog;
-        attributeDialogName = _T("semi_circle");
-        title = _T("Semicircle Properties");
+        attributeDialogName = wxT("semi_circle");
+        title = wxT("Semicircle Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csCircleShape)))
     {
         attributeDialog = new csCircleDialog;
-        attributeDialogName = _T("circle");
-        title = _T("Circle Properties");
+        attributeDialogName = wxT("circle");
+        title = wxT("Circle Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csCircleShadowShape)))
     {
         attributeDialog = new csCircleShadowDialog;
-        attributeDialogName = _T("circle_shadow");
-        title = _T("Circle Shadow Properties");
+        attributeDialogName = wxT("circle_shadow");
+        title = wxT("Circle Shadow Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csTextBoxShape)))
     {
         attributeDialog = new csTextBoxDialog;
-        attributeDialogName = _T("text_box");
-        title = _T("Text Box Properties");
+        attributeDialogName = wxT("text_box");
+        title = wxT("Text Box Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csGroupShape)))
     {
         attributeDialog = new csGroupDialog;
-        attributeDialogName = _T("group");
-        title = _T("Group Properties");
+        attributeDialogName = wxT("group");
+        title = wxT("Group Properties");
     }
     else if (shape->IsKindOf(CLASSINFO(csOctagonShape)))
     {
         attributeDialog = new csOctagonDialog;
-        attributeDialogName = _T("octagon");
-        title = _T("Octagon Properties");
+        attributeDialogName = wxT("octagon");
+        title = wxT("Octagon Properties");
     }
     else
     {
-        wxMessageBox(_T("Unrecognised shape."), _T("Studio"), wxICON_EXCLAMATION);
+        wxMessageBox(wxT("Unrecognised shape."), wxT("Studio"), wxICON_EXCLAMATION);
         return false;
     }
 
@@ -697,7 +697,7 @@ bool csEvtHandler::EditProperties()
     csEvtHandler* handler2 = (csEvtHandler *)newShape->GetEventHandler();
     handler2->m_label = newLabel;
 
-    view->GetDocument()->GetCommandProcessor()->Submit(new csDiagramCommand(_T("Edit properties"), (csDiagramDocument*) view->GetDocument(),
+    view->GetDocument()->GetCommandProcessor()->Submit(new csDiagramCommand(wxT("Edit properties"), (csDiagramDocument*) view->GetDocument(),
                 new csCommandState(ID_CS_EDIT_PROPERTIES, newShape, shape)));
 
     return true;
@@ -712,7 +712,7 @@ bool csDiagram::OnShapeSave(wxExprDataba
 {
   wxDiagram::OnShapeSave(db, shape, expr);
   csEvtHandler *handler = (csEvtHandler *)shape.GetEventHandler();
-  expr.AddAttributeValueString(_T("label"), handler->m_label);
+  expr.AddAttributeValueString(wxT("label"), handler->m_label);
   return true;
 }
 
@@ -720,7 +720,7 @@ bool csDiagram::OnShapeLoad(wxExprDataba
 {
   wxDiagram::OnShapeLoad(db, shape, expr);
   wxString label = wxEmptyString;
-  expr.GetAttributeValue(_T("label"), label);
+  expr.GetAttributeValue(wxT("label"), label);
   csEvtHandler *handler = new csEvtHandler(&shape, &shape, label);
   shape.SetEventHandler(handler);
 
@@ -982,7 +982,7 @@ IMPLEMENT_DYNAMIC_CLASS(csGroupShape, wx
 
 csGroupShape::csGroupShape()
 {
-    SetPen(wxThePenList->FindOrCreatePen(_T("BLACK"), 1, wxDOT));
+    SetPen(wxThePenList->FindOrCreatePen(wxT("BLACK"), 1, wxDOT));
     SetBrush(wxTRANSPARENT_BRUSH);
 
     SetSize(csSTANDARD_SHAPE_WIDTH, csSTANDARD_SHAPE_WIDTH);
@@ -1066,7 +1066,7 @@ bool csLineShape::OnMoveMiddleControlPoi
     lpt->SetX(lpt->m_originalPos.x); lpt->SetY(lpt->m_originalPos.y);
     lpt->m_point->x = lpt->m_originalPos.x; lpt->m_point->y = lpt->m_originalPos.y;
 
-    view->GetDocument()->GetCommandProcessor()->Submit(new csDiagramCommand(_T("Move line point"), (csDiagramDocument*) view->GetDocument(),
+    view->GetDocument()->GetCommandProcessor()->Submit(new csDiagramCommand(wxT("Move line point"), (csDiagramDocument*) view->GetDocument(),
                 new csCommandState(ID_CS_MOVE_LINE_POINT, newShape, this)));
 
     return true;
@@ -1163,12 +1163,12 @@ void studioShapeEditProc(wxMenu& menu, w
             if (event.GetId() == ID_CS_ROTATE_CLOCKWISE)
             {
                 theta += ninetyDegrees;
-                opStr = _T("Rotate clockwise");
+                opStr = wxT("Rotate clockwise");
             }
             else
             {
                 theta -= ninetyDegrees;
-                opStr = _T("Rotate anticlockwise");
+                opStr = wxT("Rotate anticlockwise");
             }
 
             if (theta >= 2.0*myPi || theta < 0.0)
--- contrib/samples/ogl/studio/symbols.cpp-orig	2009-06-18 19:17:58.138523000 -0500
+++ contrib/samples/ogl/studio/symbols.cpp	2009-06-18 19:18:02.963011000 -0500
@@ -117,49 +117,49 @@ void csApp::InitSymbols()
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Circle"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Circle"), shape));
 
     shape = new csCircleShadowShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Circle shadow"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Circle shadow"), shape));
 
     shape = new csThinRectangleShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Thin Rectangle"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Thin Rectangle"), shape));
 
     shape = new csWideRectangleShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Wide Rectangle"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Wide Rectangle"), shape));
 
     shape = new csSemiCircleShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("SemiCircle"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("SemiCircle"), shape));
 
     shape = new csTriangleShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Triangle"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Triangle"), shape));
 
     shape = new csOctagonShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Octagon"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Octagon"), shape));
 
     shape = new csGroupShape();
     shape->AssignNewIds();
     shape->SetEventHandler(new csEvtHandler(shape, shape, wxEmptyString));
 
-    m_symbolDatabase->AddSymbol(new csSymbol(_T("Group"), shape));
+    m_symbolDatabase->AddSymbol(new csSymbol(wxT("Group"), shape));
 }
 
 wxBitmap* csSymbolDatabase::CreateToolBitmap(csSymbol* symbol, const wxSize& toolSize)
--- contrib/samples/ogl/studio/mainfrm.cpp-orig	2009-06-18 19:18:07.908990000 -0500
+++ contrib/samples/ogl/studio/mainfrm.cpp	2009-06-18 19:18:12.597632000 -0500
@@ -53,7 +53,7 @@ END_EVENT_TABLE()
 
 // Define my frame constructor
 csFrame::csFrame(wxDocManager* manager, wxFrame *parent, wxWindowID id, const wxString& title, const wxPoint& pos, const wxSize& size, long style):
-  wxDocMDIParentFrame(manager, parent, id, title, pos, size, style, _T("frame"))
+  wxDocMDIParentFrame(manager, parent, id, title, pos, size, style, wxT("frame"))
 {
     CreateToolBar(wxNO_BORDER|wxTB_FLAT|wxTB_HORIZONTAL);
     wxGetApp().InitToolBar(GetToolBar());
@@ -94,7 +94,7 @@ void csFrame::OnQuit(wxCommandEvent& WXU
 
 void csFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-      (void)wxMessageBox(_T("OGL Studio\n(c) 1999, Julian Smart"), _T("About OGL Studio"), wxICON_INFORMATION);
+      (void)wxMessageBox(wxT("OGL Studio\n(c) 1999, Julian Smart"), wxT("About OGL Studio"), wxICON_INFORMATION);
 }
 
 void csFrame::OnSashDragPaletteWindow(wxSashEvent& event)
--- contrib/samples/ogl/studio/cspalette.cpp-orig	2009-06-18 19:18:18.388406000 -0500
+++ contrib/samples/ogl/studio/cspalette.cpp	2009-06-18 19:18:27.638690000 -0500
@@ -71,7 +71,7 @@ void csEditorToolPalette::OnMouseEnter(i
 #if wxUSE_STATUSBAR
     wxString msg = wxEmptyString;
     if (toolIndex == PALETTE_ARROW)
-        msg = _T("Pointer");
+        msg = wxT("Pointer");
     else if (toolIndex != -1)
     {
         csSymbol* symbol = wxGetApp().GetSymbolDatabase()->FindSymbol(toolIndex);
@@ -115,8 +115,8 @@ bool csApp::CreatePalette(wxFrame *paren
 
   // Load palette bitmaps
 #ifdef __WXMSW__
-    wxBitmap PaletteArrow(_T("arrowtool"));
-    wxBitmap TextTool(_T("texttool"));
+    wxBitmap PaletteArrow(wxT("arrowtool"));
+    wxBitmap TextTool(wxT("texttool"));
     wxSize toolBitmapSize(32, 32);
 #else // !__WXMSW__
     wxBitmap PaletteArrow(arrow_xpm);
@@ -130,37 +130,37 @@ bool csApp::CreatePalette(wxFrame *paren
 
   palette->SetToolBitmapSize(toolBitmapSize);
 
-  palette->AddTool(PALETTE_ARROW, PaletteArrow, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Pointer"));
-  palette->AddTool(PALETTE_TEXT_TOOL, TextTool, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Text"));
+  palette->AddTool(PALETTE_ARROW, PaletteArrow, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Pointer"));
+  palette->AddTool(PALETTE_TEXT_TOOL, TextTool, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Text"));
 
   wxChar** symbols = new wxChar*[20];
   int noSymbols = 0;
 
-  symbols[noSymbols] = _T("Wide Rectangle");
+  symbols[noSymbols] = wxT("Wide Rectangle");
   noSymbols ++;
 
-  symbols[noSymbols] =  _T("Thin Rectangle");
+  symbols[noSymbols] =  wxT("Thin Rectangle");
   noSymbols ++;
 
-  symbols[noSymbols] =  _T("Triangle");
+  symbols[noSymbols] =  wxT("Triangle");
   noSymbols ++;
 
-  symbols[noSymbols] =  _T("Octagon");
+  symbols[noSymbols] =  wxT("Octagon");
   noSymbols ++;
 
   // For some reason, we're getting Gdk errors with
   // some shapes, such as ones that use DrawEllipse.
 #ifndef __WXGTK__
-  symbols[noSymbols] =  _T("Group");
+  symbols[noSymbols] =  wxT("Group");
   noSymbols ++;
 
-  symbols[noSymbols] =  _T("Circle");
+  symbols[noSymbols] =  wxT("Circle");
   noSymbols ++;
 
-  symbols[noSymbols] =  _T("Circle shadow");
+  symbols[noSymbols] =  wxT("Circle shadow");
   noSymbols ++;
 
-  symbols[noSymbols] =  _T("SemiCircle");
+  symbols[noSymbols] =  wxT("SemiCircle");
   noSymbols ++;
 #endif
 
--- contrib/samples/ogl/studio/project.cpp-orig	2009-06-18 19:18:33.933294000 -0500
+++ contrib/samples/ogl/studio/project.cpp	2009-06-18 19:18:39.611364000 -0500
@@ -36,8 +36,8 @@ csProjectTreeCtrl::csProjectTreeCtrl(wxW
   wxTreeCtrl(parent, id, pos, size, style),
   m_imageList(16, 16)
 {
-    m_imageList.Add(wxIcon(_T("folder1")));
-    m_imageList.Add(wxIcon(_T("file1")));
+    m_imageList.Add(wxIcon(wxT("folder1")));
+    m_imageList.Add(wxIcon(wxT("file1")));
 
     SetImageList(& m_imageList);
 }
--- contrib/samples/ogl/ogledit/doc.cpp-orig	2009-06-18 19:15:47.450497000 -0500
+++ contrib/samples/ogl/ogledit/doc.cpp	2009-06-18 19:15:51.926144000 -0500
@@ -93,7 +93,7 @@ wxOutputStream& DiagramDocument::SaveObj
 
     wxDocument::SaveObject(stream);
     wxChar buf[400];
-    (void) wxGetTempFileName(_T("diag"), buf);
+    (void) wxGetTempFileName(wxT("diag"), buf);
 
     diagram.SaveFile(buf);
 
@@ -112,7 +112,7 @@ wxInputStream& DiagramDocument::LoadObje
     wxDocument::LoadObject(stream);
 
     wxChar buf[400];
-    (void) wxGetTempFileName(_T("diag"), buf);
+    (void) wxGetTempFileName(wxT("diag"), buf);
 
     wxTransferStreamToFile(stream, buf);
 
@@ -271,7 +271,7 @@ bool DiagramCommand::Do(void)
         // Yes, you can have more than 2 control points, in which case
         // it becomes a multi-segment line.
         lineShape->MakeLineControlPoints(2);
-        lineShape->AddArrow(ARROW_ARROW, ARROW_POSITION_END, 10.0, 0.0, _T("Normal arrowhead"));
+        lineShape->AddArrow(ARROW_ARROW, ARROW_POSITION_END, 10.0, 0.0, wxT("Normal arrowhead"));
       }
 
       doc->GetDiagram()->AddShape(theShape);
@@ -430,7 +430,7 @@ void DiagramCommand::RemoveLines(wxShape
   while (node)
   {
     wxLineShape *line = (wxLineShape *)node->GetData();
-    doc->GetCommandProcessor()->Submit(new DiagramCommand(_T("Cut"), wxID_CUT, doc, NULL, 0.0, 0.0, line->Selected(), line));
+    doc->GetCommandProcessor()->Submit(new DiagramCommand(wxT("Cut"), wxID_CUT, doc, NULL, 0.0, 0.0, line->Selected(), line));
 
     node = shape->GetLines().GetFirst();
   }
@@ -538,7 +538,7 @@ void MyEvtHandler::OnEndDragRight(double
   if (otherShape && !otherShape->IsKindOf(CLASSINFO(wxLineShape)))
   {
     canvas->view->GetDocument()->GetCommandProcessor()->Submit(
-      new DiagramCommand(_T("wxLineShape"), OGLEDIT_ADD_LINE, (DiagramDocument *)canvas->view->GetDocument(), CLASSINFO(wxLineShape),
+      new DiagramCommand(wxT("wxLineShape"), OGLEDIT_ADD_LINE, (DiagramDocument *)canvas->view->GetDocument(), CLASSINFO(wxLineShape),
       0.0, 0.0, false, NULL, GetShape(), otherShape));
   }
 }
@@ -561,7 +561,7 @@ bool MyDiagram::OnShapeSave(wxExprDataba
 {
   wxDiagram::OnShapeSave(db, shape, expr);
   MyEvtHandler *handler = (MyEvtHandler *)shape.GetEventHandler();
-  expr.AddAttributeValueString(_T("label"), handler->label);
+  expr.AddAttributeValueString(wxT("label"), handler->label);
   return true;
 }
 
@@ -569,7 +569,7 @@ bool MyDiagram::OnShapeLoad(wxExprDataba
 {
   wxDiagram::OnShapeLoad(db, shape, expr);
   wxChar *label = NULL;
-  expr.AssignAttributeValue(_T("label"), &label);
+  expr.AssignAttributeValue(wxT("label"), &label);
   MyEvtHandler *handler = new MyEvtHandler(&shape, &shape, wxString(label));
   shape.SetEventHandler(handler);
 
--- contrib/samples/ogl/ogledit/palette.cpp-orig	2009-06-18 19:15:57.414156000 -0500
+++ contrib/samples/ogl/ogledit/palette.cpp	2009-06-18 19:16:03.117499000 -0500
@@ -89,11 +89,11 @@ EditorToolPalette *MyApp::CreatePalette(
   palette->SetMargins(2, 2);
   palette->SetToolBitmapSize(wxSize(22, 22));
 
-  palette->AddTool(PALETTE_ARROW, PaletteArrow, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Pointer"));
-  palette->AddTool(PALETTE_TOOL1, PaletteTool1, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Tool 1"));
-  palette->AddTool(PALETTE_TOOL2, PaletteTool2, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Tool 2"));
-  palette->AddTool(PALETTE_TOOL3, PaletteTool3, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Tool 3"));
-  palette->AddTool(PALETTE_TOOL4, PaletteTool4, wxNullBitmap, true, 0, wxDefaultCoord, NULL, _T("Tool 4"));
+  palette->AddTool(PALETTE_ARROW, PaletteArrow, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Pointer"));
+  palette->AddTool(PALETTE_TOOL1, PaletteTool1, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Tool 1"));
+  palette->AddTool(PALETTE_TOOL2, PaletteTool2, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Tool 2"));
+  palette->AddTool(PALETTE_TOOL3, PaletteTool3, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Tool 3"));
+  palette->AddTool(PALETTE_TOOL4, PaletteTool4, wxNullBitmap, true, 0, wxDefaultCoord, NULL, wxT("Tool 4"));
 
   palette->Realize();
 
--- contrib/samples/ogl/ogledit/ogledit.cpp-orig	2009-06-18 19:16:15.063780000 -0500
+++ contrib/samples/ogl/ogledit/ogledit.cpp	2009-06-18 19:16:39.791212000 -0500
@@ -53,7 +53,7 @@ bool MyApp::OnInit(void)
   myDocManager = new wxDocManager;
 
   //// Create a template relating drawing documents to their views
-  (void) new wxDocTemplate(myDocManager, _T("Diagram"), _T("*.dia"), wxEmptyString, _T("dia"), _T("Diagram Doc"), _T("Diagram View"),
+  (void) new wxDocTemplate(myDocManager, wxT("Diagram"), wxT("*.dia"), wxEmptyString, wxT("dia"), wxT("Diagram Doc"), wxT("Diagram View"),
           CLASSINFO(DiagramDocument), CLASSINFO(DiagramView));
 
   // If we've only got one window, we only get to edit
@@ -61,7 +61,7 @@ bool MyApp::OnInit(void)
   myDocManager->SetMaxDocsOpen(1);
 
   //// Create the main frame window
-  frame = new MyFrame(myDocManager, NULL, _T("OGLEdit Demo"), wxPoint(0, 0), wxSize(500, 400), wxDEFAULT_FRAME_STYLE);
+  frame = new MyFrame(myDocManager, NULL, wxT("OGLEdit Demo"), wxPoint(0, 0), wxSize(500, 400), wxDEFAULT_FRAME_STYLE);
 
   //// Give it an icon
   frame->SetIcon(wxICON(ogl));
@@ -69,43 +69,43 @@ bool MyApp::OnInit(void)
   //// Make a menubar
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(wxID_NEW, _T("&New..."));
-  file_menu->Append(wxID_OPEN, _T("&Open..."));
+  file_menu->Append(wxID_NEW, wxT("&New..."));
+  file_menu->Append(wxID_OPEN, wxT("&Open..."));
 
-  file_menu->Append(wxID_CLOSE, _T("&Close"));
-  file_menu->Append(wxID_SAVE, _T("&Save"));
-  file_menu->Append(wxID_SAVEAS, _T("Save &As..."));
+  file_menu->Append(wxID_CLOSE, wxT("&Close"));
+  file_menu->Append(wxID_SAVE, wxT("&Save"));
+  file_menu->Append(wxID_SAVEAS, wxT("Save &As..."));
   file_menu->AppendSeparator();
-  file_menu->Append(wxID_PRINT, _T("&Print..."));
-  file_menu->Append(wxID_PRINT_SETUP, _T("Print &Setup..."));
-  file_menu->Append(wxID_PREVIEW, _T("Print Pre&view"));
+  file_menu->Append(wxID_PRINT, wxT("&Print..."));
+  file_menu->Append(wxID_PRINT_SETUP, wxT("Print &Setup..."));
+  file_menu->Append(wxID_PREVIEW, wxT("Print Pre&view"));
 
   wxMenu *edit_menu = new wxMenu;
-  edit_menu->Append(wxID_UNDO, _T("&Undo"));
-  edit_menu->Append(wxID_REDO, _T("&Redo"));
+  edit_menu->Append(wxID_UNDO, wxT("&Undo"));
+  edit_menu->Append(wxID_REDO, wxT("&Redo"));
   edit_menu->AppendSeparator();
-  edit_menu->Append(wxID_CUT, _T("&Cut"));
+  edit_menu->Append(wxID_CUT, wxT("&Cut"));
   edit_menu->AppendSeparator();
-  edit_menu->Append(OGLEDIT_CHANGE_BACKGROUND_COLOUR, _T("Change &background colour"));
-  edit_menu->Append(OGLEDIT_EDIT_LABEL, _T("Edit &label"));
+  edit_menu->Append(OGLEDIT_CHANGE_BACKGROUND_COLOUR, wxT("Change &background colour"));
+  edit_menu->Append(OGLEDIT_EDIT_LABEL, wxT("Edit &label"));
 
   frame->editMenu = edit_menu;
 
   file_menu->AppendSeparator();
-  file_menu->Append(wxID_EXIT, _T("E&xit"));
+  file_menu->Append(wxID_EXIT, wxT("E&xit"));
 
   // A nice touch: a history of files visited. Use this menu.
   myDocManager->FileHistoryUseMenu(file_menu);
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(OGLEDIT_ABOUT, _T("&About"));
+  help_menu->Append(OGLEDIT_ABOUT, wxT("&About"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
+  menu_bar->Append(file_menu, wxT("&File"));
   if (edit_menu)
-    menu_bar->Append(edit_menu, _T("&Edit"));
-  menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(edit_menu, wxT("&Edit"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   frame->canvas = frame->CreateCanvas(NULL, frame);
   frame->palette = wxGetApp().CreatePalette(frame);
@@ -185,7 +185,7 @@ void MyFrame::OnCloseWindow(wxCloseEvent
 // Intercept menu commands
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-      (void)wxMessageBox(_T("OGLEdit Demo\nTo draw a shape, select a shape on the toolbar and left-click on the canvas.\nTo draw a line, right-drag between shapes.\nFor further details, see the OGL manual.\n (c) Julian Smart 1996"), _T("About OGLEdit"));
+      (void)wxMessageBox(wxT("OGLEdit Demo\nTo draw a shape, select a shape on the toolbar and left-click on the canvas.\nTo draw a line, right-drag between shapes.\nFor further details, see the OGL manual.\n (c) Julian Smart 1996"), wxT("About OGLEdit"));
 }
 
 // Creates a canvas. Called by OnInit as a child of the main window
--- contrib/samples/ogl/ogledit/view.cpp-orig	2009-06-18 19:16:43.497813000 -0500
+++ contrib/samples/ogl/ogledit/view.cpp	2009-06-18 19:16:47.732377000 -0500
@@ -189,7 +189,7 @@ void DiagramView::OnCut(wxCommandEvent& 
 
   wxShape *theShape = FindSelectedShape();
   if (theShape)
-    doc->GetCommandProcessor()->Submit(new DiagramCommand(_T("Cut"), wxID_CUT, doc, NULL, 0.0, 0.0, true, theShape));
+    doc->GetCommandProcessor()->Submit(new DiagramCommand(wxT("Cut"), wxID_CUT, doc, NULL, 0.0, 0.0, true, theShape));
 }
 
 void DiagramView::OnChangeBackgroundColour(wxCommandEvent& WXUNUSED(event))
@@ -214,7 +214,7 @@ void DiagramView::OnChangeBackgroundColo
         dialog->Close();
 
         if (theBrush)
-          doc->GetCommandProcessor()->Submit(new DiagramCommand(_T("Change colour"), OGLEDIT_CHANGE_BACKGROUND_COLOUR, doc,
+          doc->GetCommandProcessor()->Submit(new DiagramCommand(wxT("Change colour"), OGLEDIT_CHANGE_BACKGROUND_COLOUR, doc,
             theBrush, theShape));
       }
 }
@@ -224,8 +224,8 @@ void DiagramView::OnEditLabel(wxCommandE
       wxShape *theShape = FindSelectedShape();
       if (theShape)
       {
-        wxString newLabel = wxGetTextFromUser(_T("Enter new label"), _T("Shape Label"), ((MyEvtHandler *)theShape->GetEventHandler())->label);
-        GetDocument()->GetCommandProcessor()->Submit(new DiagramCommand(_T("Edit label"), OGLEDIT_EDIT_LABEL, (DiagramDocument*) GetDocument(), newLabel, theShape));
+        wxString newLabel = wxGetTextFromUser(wxT("Enter new label"), wxT("Shape Label"), ((MyEvtHandler *)theShape->GetEventHandler())->label);
+        GetDocument()->GetCommandProcessor()->Submit(new DiagramCommand(wxT("Edit label"), OGLEDIT_EDIT_LABEL, (DiagramDocument*) GetDocument(), newLabel, theShape));
       }
 }
 
--- contrib/samples/fl/fl_demo1.cpp-orig	2009-06-18 19:19:34.972624000 -0500
+++ contrib/samples/fl/fl_demo1.cpp	2009-06-18 19:19:40.600685000 -0500
@@ -95,7 +95,7 @@ END_EVENT_TABLE()
 
 void MyFrame::OnLoad( wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageBox(_T("Hey - you found a BIG question-mark !!"));
+    wxMessageBox(wxT("Hey - you found a BIG question-mark !!"));
 }
 
 void MyFrame::OnSave( wxCommandEvent& WXUNUSED(event) )
--- contrib/samples/fl/fl_demo2.cpp-orig	2009-06-18 19:19:46.916031000 -0500
+++ contrib/samples/fl/fl_demo2.cpp	2009-06-18 19:19:54.605663000 -0500
@@ -168,7 +168,7 @@ MyFrame::MyFrame(wxFrame *frame, const w
 
     mpInternalFrm = (wxPanel*)this;
 
-    mAboutBox.Create( this, wxID_ANY,  _T("About box in wxWidgets style..."),
+    mAboutBox.Create( this, wxID_ANY,  wxT("About box in wxWidgets style..."),
                       wxDefaultPosition,
                       wxSize( 385,220),
                       wxDEFAULT_DIALOG_STYLE | wxTAB_TRAVERSAL );
@@ -489,7 +489,7 @@ wxTreeCtrl* MyFrame::CreateTreeCtrl( con
 
     const wxTreeItemId rootid = pTree->AddRoot(label);
 
-    if ( label.StartsWith(_T("X")) )
+    if ( label.StartsWith(wxT("X")) )
     {
         pTree->AppendItem(rootid, _("Scully"));
         pTree->AppendItem(rootid, _("Mulder"));
--- contrib/samples/gizmos/editlbox/test.cpp-orig	2009-06-18 19:15:33.867563000 -0500
+++ contrib/samples/gizmos/editlbox/test.cpp	2009-06-18 19:15:39.251481000 -0500
@@ -38,9 +38,9 @@ bool MyApp::OnInit()
     wxEditableListBox *lb = new wxEditableListBox(&dlg, wxID_ANY, _("Except:"),
                                      wxDefaultPosition,wxSize(300,200));
     wxArrayString ar;
-    ar.Add(_T("*.cpp"));
-    ar.Add(_T("*.h"));
-    ar.Add(_T("*.c"));
+    ar.Add(wxT("*.cpp"));
+    ar.Add(wxT("*.h"));
+    ar.Add(wxT("*.c"));
     lb->SetStrings(ar);
 
     sizer->Add(lb, 1, wxEXPAND|wxALL, 10);
@@ -57,7 +57,7 @@ bool MyApp::OnInit()
     wxString res = _("'Except' contains these strings:\n\n");
     lb->GetStrings(ar);
     for (size_t i = 0; i < ar.GetCount(); i++)
-        res << ar[i] << _T("\n");
+        res << ar[i] << wxT("\n");
     wxMessageBox(res);
 
     return false;
--- contrib/samples/gizmos/led/led.cpp-orig	2009-06-18 19:15:16.448259000 -0500
+++ contrib/samples/gizmos/led/led.cpp	2009-06-18 19:15:22.947742000 -0500
@@ -166,7 +166,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("LED App"),
+    MyFrame *frame = new MyFrame(wxT("LED App"),
                                  wxDefaultPosition, wxSize(450, 120));
 
     // and show it (the frames, unlike simple controls, are not shown when
@@ -193,30 +193,30 @@ MyFrame::MyFrame(const wxString& title, 
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(LED_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(LED_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->Append(LED_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(LED_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *editMenu = new wxMenu;
-    editMenu->Append(LED_Edit_Increment, _T("&Increment LED (1)\tCtrl-I"));
-    editMenu->Append(LED_Edit_Small_Increment, _T("&Increment LED (0.01)\tAlt-I"));
-    editMenu->Append(LED_Edit_Decrement, _T("&Decrement LED (1)\tCtrl-D"));
-    editMenu->Append(LED_Edit_Small_Decrement, _T("&Decrement LED (0.01)\tAlt-D"));
-    editMenu->Append(LED_Edit_SetValue, _T("&Set LED Value...\tCtrl-S"));
+    editMenu->Append(LED_Edit_Increment, wxT("&Increment LED (1)\tCtrl-I"));
+    editMenu->Append(LED_Edit_Small_Increment, wxT("&Increment LED (0.01)\tAlt-I"));
+    editMenu->Append(LED_Edit_Decrement, wxT("&Decrement LED (1)\tCtrl-D"));
+    editMenu->Append(LED_Edit_Small_Decrement, wxT("&Decrement LED (0.01)\tAlt-D"));
+    editMenu->Append(LED_Edit_SetValue, wxT("&Set LED Value...\tCtrl-S"));
     editMenu->AppendSeparator();
-    editMenu->AppendRadioItem(LED_Edit_AlignLeft, _T("Align &Left"));
-    editMenu->AppendRadioItem(LED_Edit_AlignCenter, _T("Align &Center"));
-    editMenu->AppendRadioItem(LED_Edit_AlignRight, _T("Align &Right"));
+    editMenu->AppendRadioItem(LED_Edit_AlignLeft, wxT("Align &Left"));
+    editMenu->AppendRadioItem(LED_Edit_AlignCenter, wxT("Align &Center"));
+    editMenu->AppendRadioItem(LED_Edit_AlignRight, wxT("Align &Right"));
     editMenu->AppendSeparator();
-    editMenu->AppendCheckItem(LED_Edit_DrawFaded, _T("Draw &Faded\tCtrl-F"));
+    editMenu->AppendCheckItem(LED_Edit_DrawFaded, wxT("Draw &Faded\tCtrl-F"));
 
     editMenu->Check(LED_Edit_DrawFaded, true);
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(editMenu, _T("&Edit"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(editMenu, wxT("&Edit"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -282,10 +282,10 @@ void MyFrame::OnDrawFaded(wxCommandEvent
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the LED sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the LED sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About LED"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About LED"), wxOK | wxICON_INFORMATION, this);
 }
 
 // --------------------------------------------------------------------------
@@ -299,7 +299,7 @@ MyPanel::MyPanel(wxFrame *frame)
                                 wxDefaultPosition, wxDefaultSize,
                                 wxLED_ALIGN_LEFT|wxLED_DRAW_FADED|wxFULL_REPAINT_ON_RESIZE);
 
-    m_led->SetValue(_T("01.23 7-8-9"));
+    m_led->SetValue(wxT("01.23 7-8-9"));
 
     m_sizer = new wxBoxSizer(wxVERTICAL);
     m_sizer->Add(m_led, 1, wxEXPAND|wxALL, 10);
@@ -316,7 +316,7 @@ void MyPanel::OnIncrement()
     double dValue;
     strValue.ToDouble(&dValue);
     dValue += 1.0;
-    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
+    m_led->SetValue(wxString::Format(wxT("%.2f"), dValue));
 }
 
 void MyPanel::OnDecrement()
@@ -326,7 +326,7 @@ void MyPanel::OnDecrement()
     double dValue;
     strValue.ToDouble(&dValue);
     dValue -= 1.0;
-    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
+    m_led->SetValue(wxString::Format(wxT("%.2f"), dValue));
 }
 
 void MyPanel::OnSmallIncrement()
@@ -336,7 +336,7 @@ void MyPanel::OnSmallIncrement()
     double dValue;
     strValue.ToDouble(&dValue);
     dValue += 0.01;
-    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
+    m_led->SetValue(wxString::Format(wxT("%.2f"), dValue));
 }
 
 void MyPanel::OnSmallDecrement()
@@ -346,16 +346,16 @@ void MyPanel::OnSmallDecrement()
     double dValue;
     strValue.ToDouble(&dValue);
     dValue -= 0.01;
-    m_led->SetValue(wxString::Format(_T("%.2f"), dValue));
+    m_led->SetValue(wxString::Format(wxT("%.2f"), dValue));
 }
 
 void MyPanel::OnSetValue()
 {
     wxString strValue = m_led->GetValue();
 
-    strValue = ::wxGetTextFromUser(_T("Please enter a number for LED display"), _T("Please enter a number"), strValue, this);
+    strValue = ::wxGetTextFromUser(wxT("Please enter a number for LED display"), wxT("Please enter a number"), strValue, this);
 
-    if (strValue != _T(""))
+    if (strValue != wxT(""))
         m_led->SetValue(strValue);
 }
 
--- contrib/samples/svg/svgtest.cpp-orig	2009-06-18 19:15:01.737720000 -0500
+++ contrib/samples/svg/svgtest.cpp	2009-06-18 19:15:07.827678000 -0500
@@ -386,7 +386,7 @@ MyCanvas::MyCanvas(wxWindow *parent, con
 wxSUNKEN_BORDER|wxVSCROLL|wxHSCROLL)
 {
     m_child = (MyChild *) parent ;
-    SetBackgroundColour(wxColour(_T("WHITE")));
+    SetBackgroundColour(wxColour(wxT("WHITE")));
     m_index = m_child->m_frame->nWinCreated % 7 ;
 }
 
@@ -433,10 +433,10 @@ void MyCanvas::OnDraw(wxDC& dc)
             dc.SetBrush(*wxCYAN_BRUSH);
             dc.SetPen(*wxRED_PEN);
             dc.DrawRectangle(10, 10, 100, 70);
-            wB = wxBrush (_T("DARK ORCHID"), wxTRANSPARENT);
+            wB = wxBrush (wxT("DARK ORCHID"), wxTRANSPARENT);
             dc.SetBrush (wB);
             dc.DrawRoundedRectangle(50, 50, 100, 70, 20);
-            dc.SetBrush (wxBrush(_T("GOLDENROD"), wxSOLID) );
+            dc.SetBrush (wxBrush(wxT("GOLDENROD"), wxSOLID) );
             dc.DrawEllipse(100, 100, 100, 50);
 
             points[0].x = 100; points[0].y = 200;
@@ -459,10 +459,10 @@ void MyCanvas::OnDraw(wxDC& dc)
             dc.DrawLine(45,30,55,30);
             dc.DrawText(wxT("This is a Swiss-style string"), 50, 30);
             wC = dc.GetTextForeground() ;
-            dc.SetTextForeground (_T("FIREBRICK"));
+            dc.SetTextForeground (wxT("FIREBRICK"));
 
             // no effect in msw ??
-            dc.SetTextBackground (_T("WHEAT"));
+            dc.SetTextBackground (wxT("WHEAT"));
             dc.DrawText(wxT("This is a Red string"), 50, 200);
             dc.DrawRotatedText(wxT("This is a 45 deg string"), 50, 200, 45);
             dc.DrawRotatedText(wxT("This is a 90 deg string"), 50, 200, 90);
@@ -485,11 +485,11 @@ void MyCanvas::OnDraw(wxDC& dc)
             dc.DrawArc ( 270-50, 270-86, 270-86, 270-50, 270,270 );
             dc.SetDeviceOrigin(0,0);
 
-            wP.SetColour (_T("CADET BLUE"));
+            wP.SetColour (wxT("CADET BLUE"));
             dc.SetPen(wP);
             dc.DrawArc ( 75,125, 110, 40, 75, 75 );
 
-            wP.SetColour (_T("SALMON"));
+            wP.SetColour (wxT("SALMON"));
             dc.SetPen(wP);
             dc.SetBrush(*wxRED_BRUSH);
             //top left corner, width and height, start and end angle
@@ -500,7 +500,7 @@ void MyCanvas::OnDraw(wxDC& dc)
             wP.SetWidth(3);
             dc.SetPen(wP);
                                  //wxTRANSPARENT));
-            dc.SetBrush (wxBrush (_T("SALMON"),wxSOLID)) ;
+            dc.SetBrush (wxBrush (wxT("SALMON"),wxSOLID)) ;
             dc.DrawEllipticArc(300,  0,200,100, 0.0,145.0) ;
                                  //same end point
             dc.DrawEllipticArc(300, 50,200,100,90.0,145.0) ;
@@ -513,7 +513,7 @@ void MyCanvas::OnDraw(wxDC& dc)
 
         case 4:
             dc.DrawCheckMark ( 30,30,25,25);
-            dc.SetBrush (wxBrush (_T("SALMON"),wxTRANSPARENT));
+            dc.SetBrush (wxBrush (wxT("SALMON"),wxTRANSPARENT));
             dc.DrawCheckMark ( 80,50,75,75);
             dc.DrawRectangle ( 80,50,75,75);
 #if wxUSE_STATUSBAR
--- contrib/samples/mmedia/mmboard.cpp-orig	2009-06-18 19:18:49.519179000 -0500
+++ contrib/samples/mmedia/mmboard.cpp	2009-06-18 19:18:56.034236000 -0500
@@ -162,7 +162,7 @@ IMPLEMENT_APP(MMBoardApp)
 bool MMBoardApp::OnInit()
 {
     // create the main application window
-    MMBoardFrame *frame = new MMBoardFrame(_T("Multimedia Board"),
+    MMBoardFrame *frame = new MMBoardFrame(wxT("Multimedia Board"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // and show it (the frames, unlike simple controls, are not shown when
@@ -172,16 +172,16 @@ bool MMBoardApp::OnInit()
     m_caps = TestMultimediaCaps();
 
     if (!m_caps) {
-      wxMessageBox(_T("Your system has no multimedia capabilities. We are exiting now."), _T("Major error !"), wxOK | wxICON_ERROR, NULL);
+      wxMessageBox(wxT("Your system has no multimedia capabilities. We are exiting now."), wxT("Major error !"), wxOK | wxICON_ERROR, NULL);
       return false;
     }
 
     wxString msg;
-    msg.Printf(_T("Detected : %s%s%s"), (m_caps & MM_SOUND_OSS) ? _T("OSS ") : _T(""),
-                                (m_caps & MM_SOUND_ESD) ? _T("ESD ") : _T(""),
-                                (m_caps & MM_SOUND_WIN) ? _T("WIN") : _T(""));
+    msg.Printf(wxT("Detected : %s%s%s"), (m_caps & MM_SOUND_OSS) ? wxT("OSS ") : wxT(""),
+                                (m_caps & MM_SOUND_ESD) ? wxT("ESD ") : wxT(""),
+                                (m_caps & MM_SOUND_WIN) ? wxT("WIN") : wxT(""));
 
-    wxMessageBox(msg, _T("Good !"), wxOK | wxICON_INFORMATION, NULL);
+    wxMessageBox(msg, wxT("Good !"), wxOK | wxICON_INFORMATION, NULL);
 
     // success: wxApp::OnRun() will be called which will enter the main message
     // loop and the application will run. If we returned false here, the
@@ -407,7 +407,7 @@ void MMBoardFrame::OnAbout(wxCommandEven
                 wxT("an example of the capabilities of the wxWidgets multimedia classes.\n")
         wxT("Copyright 1999, 2000, Guilhem Lavaux.\n"));
 
-    wxMessageBox(msg, _T("About MMBoard"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About MMBoard"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MMBoardFrame::OnOpen(wxCommandEvent& WXUNUSED(event))
@@ -424,7 +424,7 @@ void MMBoardFrame::OnOpen(wxCommandEvent
 
     // select a file to be opened
 #if wxUSE_FILEDLG
-    selected_file = wxLoadFileSelector(_T("multimedia"), _T("*"), NULL, this);
+    selected_file = wxLoadFileSelector(wxT("multimedia"), wxT("*"), NULL, this);
 #endif // wxUSE_FILEDLG
     if (selected_file.empty())
         return;
--- contrib/samples/mmedia/mmbman.cpp-orig	2009-06-18 19:19:01.727112000 -0500
+++ contrib/samples/mmedia/mmbman.cpp	2009-06-18 19:19:23.607349000 -0500
@@ -453,12 +453,12 @@ wxString MMBoardVideoFile::GetStringInfo
     wxString info;
 
     info = wxT("Video codec: ");
-    info += m_video_driver->GetMovieCodec() + _T("\n");
+    info += m_video_driver->GetMovieCodec() + wxT("\n");
     info += wxT("Audio codec: ");
     info += m_video_driver->GetAudioCodec();
-    info += wxString::Format(_T(" Sample rate: %d Channels: %d\n"), m_video_driver->GetSampleRate(),
+    info += wxString::Format(wxT(" Sample rate: %d Channels: %d\n"), m_video_driver->GetSampleRate(),
                              m_video_driver->GetBPS());
-    info += wxString::Format(_T(" Frame rate: %.01f"), m_video_driver->GetFrameRate());
+    info += wxString::Format(wxT(" Frame rate: %.01f"), m_video_driver->GetFrameRate());
     return info;
 }
 
@@ -517,7 +517,7 @@ wxSoundStream *MMBoardManager::OpenSound
     return new wxSoundStreamOSS();
 #endif
 
-  wxMessageBox(_T("You are trying to open a multimedia but you have not devices"), _T("Error"), wxOK | wxICON_ERROR, NULL);
+  wxMessageBox(wxT("You are trying to open a multimedia but you have not devices"), wxT("Error"), wxOK | wxICON_ERROR, NULL);
 
   return NULL;
 }
--- contrib/samples/deprecated/treelay/treelay.cpp-orig	2009-06-18 19:14:47.945302000 -0500
+++ contrib/samples/deprecated/treelay/treelay.cpp	2009-06-18 19:14:53.243819000 -0500
@@ -41,7 +41,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
   // Create the main frame window
-  MyFrame* frame = new MyFrame(NULL, _T("Tree Test"), wxDefaultPosition, wxSize(400, 550));
+  MyFrame* frame = new MyFrame(NULL, wxT("Tree Test"), wxDefaultPosition, wxSize(400, 550));
 
 #if wxUSE_STATUSBAR
   // Give it a status line
@@ -50,24 +50,24 @@ bool MyApp::OnInit()
 
   // Give it an icon
 #ifdef __WINDOWS__
-  wxIcon icon(_T("tree_icn"));
+  wxIcon icon(wxT("tree_icn"));
   frame->SetIcon(icon);
 #endif
 
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
-  file_menu->Append(TEST_LEFT_RIGHT, _T("&Left to right"),                _T("Redraw left to right"));
-  file_menu->Append(TEST_TOP_BOTTOM, _T("&Top to bottom"),                _T("Redraw top to bottom"));
+  file_menu->Append(TEST_LEFT_RIGHT, wxT("&Left to right"),                wxT("Redraw left to right"));
+  file_menu->Append(TEST_TOP_BOTTOM, wxT("&Top to bottom"),                wxT("Redraw top to bottom"));
   file_menu->AppendSeparator();
-  file_menu->Append(TEST_QUIT, _T("E&xit"),                _T("Quit program"));
+  file_menu->Append(TEST_QUIT, wxT("E&xit"),                wxT("Quit program"));
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(TEST_ABOUT, _T("&About"),              _T("About Tree Test"));
+  help_menu->Append(TEST_ABOUT, wxT("&About"),              wxT("About Tree Test"));
 
   wxMenuBar* menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
-  menu_bar->Append(help_menu, _T("&Help"));
+  menu_bar->Append(file_menu, wxT("&File"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   // Associate the menu bar with the frame
   frame->SetMenuBar(menu_bar);
@@ -88,7 +88,7 @@ bool MyApp::OnInit()
   frame->Show(true);
 
 #if wxUSE_STATUSBAR
-  frame->SetStatusText(_T("Hello, tree!"));
+  frame->SetStatusText(wxT("Hello, tree!"));
 #endif // wxUSE_STATUSBAR
 
   // Return the main frame window
@@ -110,34 +110,34 @@ void MyApp::TreeTest(wxTreeLayoutStored&
 {
   tree.Initialize(200);
 
-  tree.AddChild(_T("animal"));
-  tree.AddChild(_T("mammal"), _T("animal"));
-  tree.AddChild(_T("insect"), _T("animal"));
-  tree.AddChild(_T("bird"), _T("animal"));
-
-  tree.AddChild(_T("man"), _T("mammal"));
-  tree.AddChild(_T("cat"), _T("mammal"));
-  tree.AddChild(_T("dog"), _T("mammal"));
-  tree.AddChild(_T("giraffe"), _T("mammal"));
-  tree.AddChild(_T("elephant"), _T("mammal"));
-  tree.AddChild(_T("donkey"), _T("mammal"));
-  tree.AddChild(_T("horse"), _T("mammal"));
-
-  tree.AddChild(_T("fido"), _T("dog"));
-  tree.AddChild(_T("domestic cat"), _T("cat"));
-  tree.AddChild(_T("lion"), _T("cat"));
-  tree.AddChild(_T("tiger"), _T("cat"));
-  tree.AddChild(_T("felix"), _T("domestic cat"));
-  tree.AddChild(_T("socks"), _T("domestic cat"));
-
-  tree.AddChild(_T("beetle"), _T("insect"));
-  tree.AddChild(_T("earwig"), _T("insect"));
-  tree.AddChild(_T("eagle"), _T("bird"));
-  tree.AddChild(_T("bluetit"), _T("bird"));
-  tree.AddChild(_T("sparrow"), _T("bird"));
-  tree.AddChild(_T("blackbird"), _T("bird"));
-  tree.AddChild(_T("emu"), _T("bird"));
-  tree.AddChild(_T("crow"), _T("bird"));
+  tree.AddChild(wxT("animal"));
+  tree.AddChild(wxT("mammal"), wxT("animal"));
+  tree.AddChild(wxT("insect"), wxT("animal"));
+  tree.AddChild(wxT("bird"), wxT("animal"));
+
+  tree.AddChild(wxT("man"), wxT("mammal"));
+  tree.AddChild(wxT("cat"), wxT("mammal"));
+  tree.AddChild(wxT("dog"), wxT("mammal"));
+  tree.AddChild(wxT("giraffe"), wxT("mammal"));
+  tree.AddChild(wxT("elephant"), wxT("mammal"));
+  tree.AddChild(wxT("donkey"), wxT("mammal"));
+  tree.AddChild(wxT("horse"), wxT("mammal"));
+
+  tree.AddChild(wxT("fido"), wxT("dog"));
+  tree.AddChild(wxT("domestic cat"), wxT("cat"));
+  tree.AddChild(wxT("lion"), wxT("cat"));
+  tree.AddChild(wxT("tiger"), wxT("cat"));
+  tree.AddChild(wxT("felix"), wxT("domestic cat"));
+  tree.AddChild(wxT("socks"), wxT("domestic cat"));
+
+  tree.AddChild(wxT("beetle"), wxT("insect"));
+  tree.AddChild(wxT("earwig"), wxT("insect"));
+  tree.AddChild(wxT("eagle"), wxT("bird"));
+  tree.AddChild(wxT("bluetit"), wxT("bird"));
+  tree.AddChild(wxT("sparrow"), wxT("bird"));
+  tree.AddChild(wxT("blackbird"), wxT("bird"));
+  tree.AddChild(wxT("emu"), wxT("bird"));
+  tree.AddChild(wxT("crow"), wxT("bird"));
 
   tree.DoLayout(dc);
 }
@@ -189,7 +189,7 @@ void MyFrame::OnTopBottom(wxCommandEvent
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-      (void)wxMessageBox(_T("wxWidgets tree library demo Vsn 2.0\nAuthor: Julian Smart (c) 1998"), _T("About tree test"));
+      (void)wxMessageBox(wxT("wxWidgets tree library demo Vsn 2.0\nAuthor: Julian Smart (c) 1998"), wxT("About tree test"));
 }
 
 void MyFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
--- contrib/samples/deprecated/proplist/proplist.cpp-orig	2009-06-18 19:14:25.798505000 -0500
+++ contrib/samples/deprecated/proplist/proplist.cpp	2009-06-18 19:14:41.017423000 -0500
@@ -44,25 +44,25 @@ bool MyApp::OnInit(void)
   RegisterValidators();
 
   // Create the main frame window
-  m_mainFrame = new MyFrame(NULL, _T("wxPropertySheet Demo"), wxPoint(0, 0), wxSize(300, 400), wxDEFAULT_FRAME_STYLE);
+  m_mainFrame = new MyFrame(NULL, wxT("wxPropertySheet Demo"), wxPoint(0, 0), wxSize(300, 400), wxDEFAULT_FRAME_STYLE);
 
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
-  file_menu->Append(PROPERTY_TEST_DIALOG_LIST, _T("Test property list &dialog..."));
-  file_menu->Append(PROPERTY_TEST_FRAME_LIST, _T("Test property list &frame..."));
+  file_menu->Append(PROPERTY_TEST_DIALOG_LIST, wxT("Test property list &dialog..."));
+  file_menu->Append(PROPERTY_TEST_FRAME_LIST, wxT("Test property list &frame..."));
   file_menu->AppendSeparator();
-  file_menu->Append(PROPERTY_TEST_DIALOG_FORM, _T("Test property form d&ialog..."));
-  file_menu->Append(PROPERTY_TEST_FRAME_FORM, _T("Test property form f&rame..."));
+  file_menu->Append(PROPERTY_TEST_DIALOG_FORM, wxT("Test property form d&ialog..."));
+  file_menu->Append(PROPERTY_TEST_FRAME_FORM, wxT("Test property form f&rame..."));
   file_menu->AppendSeparator();
-  file_menu->Append(PROPERTY_QUIT, _T("E&xit"));
+  file_menu->Append(PROPERTY_QUIT, wxT("E&xit"));
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(PROPERTY_ABOUT, _T("&About"));
+  help_menu->Append(PROPERTY_ABOUT, wxT("&About"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
-  menu_bar->Append(help_menu, _T("&Help"));
+  menu_bar->Append(file_menu, wxT("&File"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   // Associate the menu bar with the frame
   m_mainFrame->SetMenuBar(menu_bar);
@@ -130,21 +130,21 @@ void MyFrame::OnFrameForm(wxCommandEvent
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    (void)wxMessageBox(_T("Property Classes Demo\nAuthor: Julian Smart"), _T("About Property Classes Test"));
+    (void)wxMessageBox(wxT("Property Classes Demo\nAuthor: Julian Smart"), wxT("About Property Classes Test"));
 }
 
 void MyApp::RegisterValidators(void)
 {
-  myListValidatorRegistry.RegisterValidator((wxString)_T("real"), new wxRealListValidator);
-  myListValidatorRegistry.RegisterValidator((wxString)_T("string"), new wxStringListValidator);
-  myListValidatorRegistry.RegisterValidator((wxString)_T("integer"), new wxIntegerListValidator);
-  myListValidatorRegistry.RegisterValidator((wxString)_T("bool"), new wxBoolListValidator);
-  myListValidatorRegistry.RegisterValidator((wxString)_T("stringlist"), new wxListOfStringsListValidator);
-
-  myFormValidatorRegistry.RegisterValidator((wxString)_T("real"), new wxRealFormValidator);
-  myFormValidatorRegistry.RegisterValidator((wxString)_T("string"), new wxStringFormValidator);
-  myFormValidatorRegistry.RegisterValidator((wxString)_T("integer"), new wxIntegerFormValidator);
-  myFormValidatorRegistry.RegisterValidator((wxString)_T("bool"), new wxBoolFormValidator);
+  myListValidatorRegistry.RegisterValidator((wxString)wxT("real"), new wxRealListValidator);
+  myListValidatorRegistry.RegisterValidator((wxString)wxT("string"), new wxStringListValidator);
+  myListValidatorRegistry.RegisterValidator((wxString)wxT("integer"), new wxIntegerListValidator);
+  myListValidatorRegistry.RegisterValidator((wxString)wxT("bool"), new wxBoolListValidator);
+  myListValidatorRegistry.RegisterValidator((wxString)wxT("stringlist"), new wxListOfStringsListValidator);
+
+  myFormValidatorRegistry.RegisterValidator((wxString)wxT("real"), new wxRealFormValidator);
+  myFormValidatorRegistry.RegisterValidator((wxString)wxT("string"), new wxStringFormValidator);
+  myFormValidatorRegistry.RegisterValidator((wxString)wxT("integer"), new wxIntegerFormValidator);
+  myFormValidatorRegistry.RegisterValidator((wxString)wxT("bool"), new wxBoolFormValidator);
 }
 
 void MyApp::PropertyListTest(bool useDialog)
@@ -154,17 +154,17 @@ void MyApp::PropertyListTest(bool useDia
 
     wxPropertySheet *sheet = new wxPropertySheet;
 
-    sheet->AddProperty(new wxProperty(_T("fred"), 1.0, _T("real")));
-    sheet->AddProperty(new wxProperty(_T("tough choice"), true, _T("bool")));
-    sheet->AddProperty(new wxProperty(_T("ian"), (long)45, _T("integer"), new wxIntegerListValidator(-50, 50)));
-    sheet->AddProperty(new wxProperty(_T("bill"), 25.0, _T("real"), new wxRealListValidator(0.0, 100.0)));
-    sheet->AddProperty(new wxProperty(_T("julian"), _T("one"), _T("string")));
-    sheet->AddProperty(new wxProperty(_T("bitmap"), _T("none"), _T("string"), new wxFilenameListValidator(_T("Select a bitmap file"), _T("*.bmp"))));
+    sheet->AddProperty(new wxProperty(wxT("fred"), 1.0, wxT("real")));
+    sheet->AddProperty(new wxProperty(wxT("tough choice"), true, wxT("bool")));
+    sheet->AddProperty(new wxProperty(wxT("ian"), (long)45, wxT("integer"), new wxIntegerListValidator(-50, 50)));
+    sheet->AddProperty(new wxProperty(wxT("bill"), 25.0, wxT("real"), new wxRealListValidator(0.0, 100.0)));
+    sheet->AddProperty(new wxProperty(wxT("julian"), wxT("one"), wxT("string")));
+    sheet->AddProperty(new wxProperty(wxT("bitmap"), wxT("none"), wxT("string"), new wxFilenameListValidator(wxT("Select a bitmap file"), wxT("*.bmp"))));
     wxStringList *strings = new wxStringList(wxT("one"), wxT("two"), wxT("three"), NULL);
-    sheet->AddProperty(new wxProperty(_T("constrained"), _T("one"), _T("string"), new wxStringListValidator(strings)));
+    sheet->AddProperty(new wxProperty(wxT("constrained"), wxT("one"), wxT("string"), new wxStringListValidator(strings)));
 
     wxStringList *strings2 = new wxStringList(wxT("earth"), wxT("fire"), wxT("wind"), wxT("water"), NULL);
-    sheet->AddProperty(new wxProperty(_T("string list"), strings2, _T("stringlist")));
+    sheet->AddProperty(new wxProperty(wxT("string list"), strings2, wxT("stringlist")));
 
     wxPropertyListView *view = new wxPropertyListView
         (
@@ -177,13 +177,13 @@ void MyApp::PropertyListTest(bool useDia
     PropListFrame *propFrame = NULL;
     if (useDialog)
     {
-        propDialog = new PropListDialog(view, NULL, _T("Property Sheet Test"),
+        propDialog = new PropListDialog(view, NULL, wxT("Property Sheet Test"),
             wxDefaultPosition, wxSize(400, 500));
         m_childWindow = propDialog;
     }
     else
     {
-        propFrame = new PropListFrame(view, NULL, _T("Property Sheet Test"),
+        propFrame = new PropListFrame(view, NULL, wxT("Property Sheet Test"),
             wxDefaultPosition, wxSize(400, 500));
         m_childWindow = propFrame;
     }
@@ -211,12 +211,12 @@ void MyApp::PropertyFormTest(bool useDia
 
     wxPropertySheet *sheet = new wxPropertySheet;
 
-    sheet->AddProperty(new wxProperty(_T("fred"), 25.0, _T("real"), new wxRealFormValidator(0.0, 100.0)));
-    sheet->AddProperty(new wxProperty(_T("tough choice"), true, _T("bool")));
-    sheet->AddProperty(new wxProperty(_T("ian"), (long)45, _T("integer"), new wxIntegerFormValidator(-50, 50)));
-    sheet->AddProperty(new wxProperty(_T("julian"), _T("one"), _T("string")));
+    sheet->AddProperty(new wxProperty(wxT("fred"), 25.0, wxT("real"), new wxRealFormValidator(0.0, 100.0)));
+    sheet->AddProperty(new wxProperty(wxT("tough choice"), true, wxT("bool")));
+    sheet->AddProperty(new wxProperty(wxT("ian"), (long)45, wxT("integer"), new wxIntegerFormValidator(-50, 50)));
+    sheet->AddProperty(new wxProperty(wxT("julian"), wxT("one"), wxT("string")));
     wxStringList *strings = new wxStringList(wxT("one"), wxT("two"), wxT("three"), NULL);
-    sheet->AddProperty(new wxProperty(_T("constrained"), _T("one"), _T("string"), new wxStringFormValidator(strings)));
+    sheet->AddProperty(new wxProperty(wxT("constrained"), wxT("one"), wxT("string"), new wxStringFormValidator(strings)));
 
     wxPropertyFormView *view = new wxPropertyFormView(NULL);
 
@@ -225,13 +225,13 @@ void MyApp::PropertyFormTest(bool useDia
 
     if (useDialog)
     {
-        propDialog = new PropFormDialog(view, NULL, _T("Property Form Test"),
+        propDialog = new PropFormDialog(view, NULL, wxT("Property Form Test"),
             wxDefaultPosition, wxSize(380, 250));
         m_childWindow = propDialog;
     }
     else
     {
-        propFrame = new PropFormFrame(view, NULL, _T("Property Form Test"),
+        propFrame = new PropFormFrame(view, NULL, wxT("Property Form Test"),
             wxDefaultPosition, wxSize(380, 250));
         propFrame->Initialize();
         m_childWindow = propFrame;
@@ -264,14 +264,14 @@ void MyApp::PropertyFormTest(bool useDia
 #endif
 
     // Add items to the panel
-    wxButton *okButton = new wxButton(panel, wxID_OK, _T("OK"), wxDefaultPosition,
-        wxSize(80, 26), 0, wxDefaultValidator, _T("ok"));
-    wxButton *cancelButton = new wxButton(panel, wxID_CANCEL, _T("Cancel"),  wxDefaultPosition,
-        wxSize(80, 26), 0, wxDefaultValidator, _T("cancel"));
-    wxButton *updateButton = new wxButton(panel, wxID_PROP_UPDATE, _T("Update"),  wxDefaultPosition,
-        wxSize(80, 26), 0, wxDefaultValidator, _T("update"));
-    wxButton *revertButton = new wxButton(panel, wxID_PROP_REVERT, _T("Revert"),  wxDefaultPosition,
-        wxSize(80, 26), 0, wxDefaultValidator, _T("revert"));
+    wxButton *okButton = new wxButton(panel, wxID_OK, wxT("OK"), wxDefaultPosition,
+        wxSize(80, 26), 0, wxDefaultValidator, wxT("ok"));
+    wxButton *cancelButton = new wxButton(panel, wxID_CANCEL, wxT("Cancel"),  wxDefaultPosition,
+        wxSize(80, 26), 0, wxDefaultValidator, wxT("cancel"));
+    wxButton *updateButton = new wxButton(panel, wxID_PROP_UPDATE, wxT("Update"),  wxDefaultPosition,
+        wxSize(80, 26), 0, wxDefaultValidator, wxT("update"));
+    wxButton *revertButton = new wxButton(panel, wxID_PROP_REVERT, wxT("Revert"),  wxDefaultPosition,
+        wxSize(80, 26), 0, wxDefaultValidator, wxT("revert"));
 
     c = new wxLayoutConstraints;
     c->right.SameAs(panel, wxRight, 4);
@@ -302,8 +302,8 @@ void MyApp::PropertyFormTest(bool useDia
     okButton->SetConstraints(c);
 
     // The name of this text item matches the "fred" property
-    wxTextCtrl *text = new wxTextCtrl(panel, wxID_ANY, _T("Fred"), wxDefaultPosition,
-        wxSize( 200, wxDefaultCoord), 0, wxDefaultValidator, _T("fred"));
+    wxTextCtrl *text = new wxTextCtrl(panel, wxID_ANY, wxT("Fred"), wxDefaultPosition,
+        wxSize( 200, wxDefaultCoord), 0, wxDefaultValidator, wxT("fred"));
 
     c = new wxLayoutConstraints;
     c->left.SameAs(panel, wxLeft, 4);
@@ -312,8 +312,8 @@ void MyApp::PropertyFormTest(bool useDia
     c->width.AsIs();
     text->SetConstraints(c);
 
-    wxCheckBox *checkBox = new wxCheckBox(panel, wxID_ANY, _T("Yes or no"), wxDefaultPosition,
-        wxDefaultSize, 0, wxDefaultValidator, _T("tough choice"));
+    wxCheckBox *checkBox = new wxCheckBox(panel, wxID_ANY, wxT("Yes or no"), wxDefaultPosition,
+        wxDefaultSize, 0, wxDefaultValidator, wxT("tough choice"));
 
     c = new wxLayoutConstraints;
     c->left.SameAs(text, wxRight, 20);
@@ -323,7 +323,7 @@ void MyApp::PropertyFormTest(bool useDia
     checkBox->SetConstraints(c);
 
     wxSlider *slider = new wxSlider(panel, wxID_ANY, -50, 50, 150, wxDefaultPosition,
-    wxSize(200,10), 0, wxDefaultValidator, _T("ian"));
+    wxSize(200,10), 0, wxDefaultValidator, wxT("ian"));
 
     c = new wxLayoutConstraints;
     c->left.SameAs(panel, wxLeft, 4);
@@ -333,7 +333,7 @@ void MyApp::PropertyFormTest(bool useDia
     slider->SetConstraints(c);
 
     wxListBox *listBox = new wxListBox(panel, wxID_ANY, wxDefaultPosition,
-        wxSize(200, 100), 0, NULL, 0, wxDefaultValidator, _T("constrained"));
+        wxSize(200, 100), 0, NULL, 0, wxDefaultValidator, wxT("constrained"));
 
     c = new wxLayoutConstraints;
     c->left.SameAs(panel, wxLeft, 4);
--- contrib/samples/deprecated/proplist/proplist.h-orig	2009-06-18 19:14:29.157145000 -0500
+++ contrib/samples/deprecated/proplist/proplist.h	2009-06-18 19:14:35.629071000 -0500
@@ -57,7 +57,7 @@ class PropListFrame: public wxPropertyLi
 public:
   PropListFrame(wxPropertyListView *v, wxFrame *parent, const wxString& title,
     const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,
-    long style = wxDEFAULT_FRAME_STYLE, const wxString& name = _T("frame")):
+    long style = wxDEFAULT_FRAME_STYLE, const wxString& name = wxT("frame")):
         wxPropertyListFrame(v, parent, title, pos, size, style, name)
     {
     }
@@ -72,7 +72,7 @@ class PropListDialog: public wxPropertyL
 public:
   PropListDialog(wxPropertyListView *v, wxWindow *parent, const wxString& title,
     const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,
-    long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = _T("dialogBox")):
+    long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = wxT("dialogBox")):
         wxPropertyListDialog(v, parent, title, pos, size, style, name)
    {
    }
@@ -87,7 +87,7 @@ class PropFormFrame: public wxPropertyFo
 public:
   PropFormFrame(wxPropertyFormView *v, wxFrame *parent, const wxString& title,
     const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,
-    long style = wxDEFAULT_FRAME_STYLE, const wxString& name = _T("frame")):
+    long style = wxDEFAULT_FRAME_STYLE, const wxString& name = wxT("frame")):
     wxPropertyFormFrame(v, parent, title, pos, size, style, name)
     {
     }
@@ -103,7 +103,7 @@ class PropFormDialog: public wxPropertyF
 public:
   PropFormDialog(wxPropertyFormView *v, wxWindow *parent, const wxString& title,
     const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize,
-    long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = _T("dialogBox")):
+    long style = wxDEFAULT_DIALOG_STYLE, const wxString& name = wxT("dialogBox")):
       wxPropertyFormDialog(v, parent, title, pos, size, style, name)
     {
     }
--- contrib/samples/foldbar/foldpanelbar/foldpanelbartest.cpp-orig	2009-06-18 19:13:50.479542000 -0500
+++ contrib/samples/foldbar/foldpanelbar/foldpanelbartest.cpp	2009-06-18 19:13:58.794986000 -0500
@@ -111,7 +111,7 @@ IMPLEMENT_APP(MyApp)
 
 bool MyApp::OnInit()
 {
-    MyAppFrame *frame = new MyAppFrame(_T("FoldPanelBarTest wxWidgets Test Application"));
+    MyAppFrame *frame = new MyAppFrame(wxT("FoldPanelBarTest wxWidgets Test Application"));
 
     SetTopWindow(frame);
 
@@ -133,23 +133,23 @@ MyAppFrame::MyAppFrame(const wxString& t
     CreateFoldBar();
 
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 }
 
 wxMenuBar *MyAppFrame::CreateMenuBar()
 {
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(FoldPanelBarTest_Horizontal, _T("&Horizontal\tAlt-H"));
-    menuFile->Append(FoldPanelBarTest_Vertical, _T("&Vertical\tAlt-V"));
+    menuFile->Append(FoldPanelBarTest_Horizontal, wxT("&Horizontal\tAlt-H"));
+    menuFile->Append(FoldPanelBarTest_Vertical, wxT("&Vertical\tAlt-V"));
     menuFile->AppendSeparator();
-    menuFile->Append(FoldPanelBarTest_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(FoldPanelBarTest_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(FoldPanelBarTest_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(FoldPanelBarTest_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     wxMenuBar *value = new wxMenuBar();
-    value->Append(menuFile, _T("&File"));
-    value->Append(helpMenu, _T("&Help"));
+    value->Append(menuFile, wxT("&File"));
+    value->Append(helpMenu, wxT("&Help"));
 
     return value;
 }
@@ -168,39 +168,39 @@ void MyAppFrame::CreateFoldBar(bool vert
                                              wxFPB_DEFAULT_STYLE | ( vertical ? wxFPB_VERTICAL : wxFPB_HORIZONTAL ) ,
                                              wxFPB_COLLAPSE_TO_BOTTOM);
 
-    wxFoldPanel item = bar->AddFoldPanel(_T("Test me"), false);
-    bar->AddFoldPanelWindow(item, new wxButton(item.GetParent(), ID_COLLAPSEME, _T("Collapse Me")));
+    wxFoldPanel item = bar->AddFoldPanel(wxT("Test me"), false);
+    bar->AddFoldPanelWindow(item, new wxButton(item.GetParent(), ID_COLLAPSEME, wxT("Collapse Me")));
 
-    item = bar->AddFoldPanel(_T("Test me too!"), true);
-    bar->AddFoldPanelWindow(item, new wxButton(item.GetParent(), ID_EXPANDME, _T("Expand first one")));
+    item = bar->AddFoldPanel(wxT("Test me too!"), true);
+    bar->AddFoldPanelWindow(item, new wxButton(item.GetParent(), ID_EXPANDME, wxT("Expand first one")));
     bar->AddFoldPanelSeperator(item);
     bar->AddFoldPanelWindow(item, new FoldTestPanel(item.GetParent(), wxID_ANY));
 
     bar->AddFoldPanelSeperator(item);
 
-    bar->AddFoldPanelWindow(item, new wxTextCtrl(item.GetParent(), wxID_ANY, _T("Comment")), wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 20);
+    bar->AddFoldPanelWindow(item, new wxTextCtrl(item.GetParent(), wxID_ANY, wxT("Comment")), wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 20);
 
-    item = bar->AddFoldPanel(_T("Some opinions ..."), false);
-    bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, _T("I like this")));
+    item = bar->AddFoldPanel(wxT("Some opinions ..."), false);
+    bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, wxT("I like this")));
     if( vertical)
     {
         // do not add this for horizontal for better presentation
-        bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, _T("And also this")));
-        bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, _T("And gimme this too")));
+        bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, wxT("And also this")));
+        bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, wxT("And gimme this too")));
     }
 
     bar->AddFoldPanelSeperator(item);
 
-    bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, _T("Check this too if you like")));
+    bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, wxT("Check this too if you like")));
     if( vertical)
     {
         // do not add this for horizontal for better presentation
-        bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, _T("What about this")));
+        bar->AddFoldPanelWindow(item, new wxCheckBox(item.GetParent(), wxID_ANY, wxT("What about this")));
     }
 
-    item = bar->AddFoldPanel(_T("Choose one ..."), false);
-    bar->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, _T("Enter your comment")));
-    bar->AddFoldPanelWindow(item, new wxTextCtrl(item.GetParent(), wxID_ANY, _T("Comment")), wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 20);
+    item = bar->AddFoldPanel(wxT("Choose one ..."), false);
+    bar->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, wxT("Enter your comment")));
+    bar->AddFoldPanelWindow(item, new wxTextCtrl(item.GetParent(), wxID_ANY, wxT("Comment")), wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 20);
 
     if (m_pnl) m_pnl->Destroy();
 
@@ -219,10 +219,10 @@ void MyAppFrame::OnQuit(wxCommandEvent& 
 void MyAppFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the FoldPanelBarTest application.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the FoldPanelBarTest application.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About FoldPanelBarTest"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About FoldPanelBarTest"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyAppFrame::OnOrientation(wxCommandEvent& event)
--- contrib/samples/foldbar/foldpanelbar/foldtestpanel.cpp-orig	2009-06-18 19:14:05.999950000 -0500
+++ contrib/samples/foldbar/foldpanelbar/foldtestpanel.cpp	2009-06-18 19:14:14.701264000 -0500
@@ -114,7 +114,7 @@ void FoldTestPanel::CreateControls()
     };
     wxChoice* item5 = new wxChoice( item3, ID_CHOICE, wxDefaultPosition, wxDefaultSize, 3, item5Strings, 0 );
     item4->Add(item5, 0, wxGROW|wxALL, 5);
-    wxTextCtrl* item6 = new wxTextCtrl( item3, ID_TEXTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
+    wxTextCtrl* item6 = new wxTextCtrl( item3, ID_TEXTCTRL, wxT(""), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
     item4->Add(item6, 1, wxGROW|wxALL, 5);
     wxRadioButton* item7 = new wxRadioButton( item3, ID_RADIOBUTTON, _("I like this"), wxDefaultPosition, wxDefaultSize, 0 );
     item7->SetValue(true);
--- contrib/samples/foldbar/extended/extended.cpp-orig	2009-06-18 19:13:29.875856000 -0500
+++ contrib/samples/foldbar/extended/extended.cpp	2009-06-18 19:13:37.929757000 -0500
@@ -45,7 +45,7 @@ bool MyApp::OnInit(void)
 {
     // Create the main frame window
 
-    frame = new MyFrame(NULL, wxID_ANY, _T("FoldPanelBar Extended Demo"), wxDefaultPosition, wxSize(500, 600),
+    frame = new MyFrame(NULL, wxID_ANY, wxT("FoldPanelBar Extended Demo"), wxDefaultPosition, wxSize(500, 600),
                         wxDEFAULT_FRAME_STYLE |
                         wxNO_FULL_REPAINT_ON_RESIZE |
                         wxHSCROLL | wxVSCROLL);
@@ -111,7 +111,7 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    (void)wxMessageBox(_T("wxWidgets 2.0 FoldPanelBar Demo\nAuthor: Julian Smart (c) 1998"), _T("About FoldPanelBar Demo"));
+    (void)wxMessageBox(wxT("wxWidgets 2.0 FoldPanelBar Demo\nAuthor: Julian Smart (c) 1998"), wxT("About FoldPanelBar Demo"));
 }
 
 void MyFrame::OnToggleWindow(wxCommandEvent& WXUNUSED(event))
@@ -143,12 +143,12 @@ void MyFrame::OnFoldPanelBarDrag(wxSashE
 void MyFrame::OnNewWindow(wxCommandEvent& WXUNUSED(event))
 {
     // Make another frame, containing a canvas
-    MyChild *subframe = new MyChild(frame, _T("Canvas Frame"),
+    MyChild *subframe = new MyChild(frame, wxT("Canvas Frame"),
                                     wxPoint(10, 10), wxSize(300, 300),
                                     wxDEFAULT_FRAME_STYLE |
                                     wxNO_FULL_REPAINT_ON_RESIZE);
 
-    subframe->SetTitle(wxString::Format(_T("Canvas Frame %d"), winNumber));
+    subframe->SetTitle(wxString::Format(wxT("Canvas Frame %d"), winNumber));
     winNumber ++;
 
     // Give it a status line
@@ -178,9 +178,9 @@ void MyFrame::ReCreateFoldPanel(int fpb_
 
     m_pnl = new wxFoldPanelBar(m_leftWindow1, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxFPB_DEFAULT_STYLE, fpb_flags);
 
-    wxFoldPanel item = m_pnl->AddFoldPanel(_T("Caption colours"), false);
+    wxFoldPanel item = m_pnl->AddFoldPanel(wxT("Caption colours"), false);
 
-    m_pnl->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, _T("Adjust the first colour")),
+    m_pnl->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, wxT("Adjust the first colour")),
                               wxFPB_ALIGN_WIDTH, 5, 20);
 
     // RED color spin control
@@ -200,7 +200,7 @@ void MyFrame::ReCreateFoldPanel(int fpb_
 
     m_pnl->AddFoldPanelSeperator(item);
 
-    m_pnl->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, _T("Adjust the second colour")),
+    m_pnl->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, wxT("Adjust the second colour")),
                               wxFPB_ALIGN_WIDTH, 5, 20);
 
     // RED color spin control
@@ -220,7 +220,7 @@ void MyFrame::ReCreateFoldPanel(int fpb_
 
     m_pnl->AddFoldPanelSeperator(item);
 
-    m_btn = new wxButton(item.GetParent(), ID_APPLYTOALL, _T("Apply to all"));
+    m_btn = new wxButton(item.GetParent(), ID_APPLYTOALL, wxT("Apply to all"));
     m_pnl->AddFoldPanelWindow(item, m_btn);
 
     // read back current gradients and set the sliders
@@ -240,24 +240,24 @@ void MyFrame::ReCreateFoldPanel(int fpb_
     // put down some caption styles from which the user can
     // select to show how the current or all caption bars will look like
 
-    item = m_pnl->AddFoldPanel(_T("Caption style"), false);
+    item = m_pnl->AddFoldPanel(wxT("Caption style"), false);
 
-    wxRadioButton *currStyle =  new wxRadioButton(item.GetParent(), ID_USE_VGRADIENT, _T("&Vertical gradient"));
+    wxRadioButton *currStyle =  new wxRadioButton(item.GetParent(), ID_USE_VGRADIENT, wxT("&Vertical gradient"));
     m_pnl->AddFoldPanelWindow(item, currStyle,  wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
     currStyle->SetValue(true);
 
-    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_HGRADIENT, _T("&Horizontal gradient")),
+    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_HGRADIENT, wxT("&Horizontal gradient")),
                               wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
-    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_SINGLE, _T("&Single colour")),
+    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_SINGLE, wxT("&Single colour")),
                               wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
-    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_RECTANGLE, _T("&Rectangle box")),
+    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_RECTANGLE, wxT("&Rectangle box")),
                               wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
-    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_FILLED_RECTANGLE, _T("&Filled rectangle box")),
+    m_pnl->AddFoldPanelWindow(item, new wxRadioButton(item.GetParent(), ID_USE_FILLED_RECTANGLE, wxT("&Filled rectangle box")),
                               wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
 
     m_pnl->AddFoldPanelSeperator(item);
 
-    m_single = new wxCheckBox(item.GetParent(), wxID_ANY, _T("&Only this caption"));
+    m_single = new wxCheckBox(item.GetParent(), wxID_ANY, wxT("&Only this caption"));
     m_pnl->AddFoldPanelWindow(item, m_single, wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
 
 
@@ -266,14 +266,14 @@ void MyFrame::ReCreateFoldPanel(int fpb_
     wxCaptionBarStyle cs;
     cs.SetCaptionStyle(wxCAPTIONBAR_RECTANGLE);
 
-    item = m_pnl->AddFoldPanel(_T("Misc stuff"), true, cs);
+    item = m_pnl->AddFoldPanel(wxT("Misc stuff"), true, cs);
 
-    m_pnl->AddFoldPanelWindow(item, new wxButton(item.GetParent(), ID_COLLAPSEME, _T("Collapse All")));
+    m_pnl->AddFoldPanelWindow(item, new wxButton(item.GetParent(), ID_COLLAPSEME, wxT("Collapse All")));
 
-    m_pnl->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, _T("Enter some comments")),
+    m_pnl->AddFoldPanelWindow(item, new wxStaticText(item.GetParent(), wxID_ANY, wxT("Enter some comments")),
                              wxFPB_ALIGN_WIDTH, 5, 20);
 
-    m_pnl->AddFoldPanelWindow(item, new wxTextCtrl(item.GetParent(), wxID_ANY, _T("Comments")),
+    m_pnl->AddFoldPanelWindow(item, new wxTextCtrl(item.GetParent(), wxID_ANY, wxT("Comments")),
                              wxFPB_ALIGN_WIDTH, wxFPB_DEFAULT_SPACING, 10);
 
     m_leftWindow1->SizeWindows();
@@ -341,40 +341,40 @@ wxMenuBar *CreateMenuBar(bool with_windo
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(FPBTEST_NEW_WINDOW, _T("&New window"));
+    file_menu->Append(FPBTEST_NEW_WINDOW, wxT("&New window"));
     if(with_window)
-        file_menu->Append(FPBTEST_CHILD_QUIT, _T("&Close child"));
+        file_menu->Append(FPBTEST_CHILD_QUIT, wxT("&Close child"));
 
     file_menu->AppendSeparator();
-    file_menu->Append(FPBTEST_QUIT, _T("&Exit"));
+    file_menu->Append(FPBTEST_QUIT, wxT("&Exit"));
 
     wxMenu *option_menu = 0;
     if(with_window)
     {
         // Dummy option
         option_menu = new wxMenu;
-        option_menu->Append(FPBTEST_REFRESH, _T("&Refresh picture"));
+        option_menu->Append(FPBTEST_REFRESH, wxT("&Refresh picture"));
     }
 
     // make fold panel menu
 
     wxMenu *fpb_menu = new wxMenu;
-    fpb_menu->AppendCheckItem(FPB_BOTTOM_STICK, _T("Create with &wxFPB_COLLAPSE_TO_BOTTOM"));
-    //fpb_menu->AppendCheckItem(FPB_SINGLE_FOLD, _T("Create with &wxFPB_SINGLE_FOLD"));
+    fpb_menu->AppendCheckItem(FPB_BOTTOM_STICK, wxT("Create with &wxFPB_COLLAPSE_TO_BOTTOM"));
+    //fpb_menu->AppendCheckItem(FPB_SINGLE_FOLD, wxT("Create with &wxFPB_SINGLE_FOLD"));
 
     fpb_menu->AppendSeparator();
-    fpb_menu->Append(FPBTEST_TOGGLE_WINDOW, _T("&Toggle FoldPanelBar"));
+    fpb_menu->Append(FPBTEST_TOGGLE_WINDOW, wxT("&Toggle FoldPanelBar"));
 
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(FPBTEST_ABOUT, _T("&About"));
+    help_menu->Append(FPBTEST_ABOUT, wxT("&About"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
-    menu_bar->Append(fpb_menu, _T("&FoldPanel"));
+    menu_bar->Append(file_menu, wxT("&File"));
+    menu_bar->Append(fpb_menu, wxT("&FoldPanel"));
     if(option_menu)
-        menu_bar->Append(option_menu, _T("&Options"));
-    menu_bar->Append(help_menu, _T("&Help"));
+        menu_bar->Append(option_menu, wxT("&Options"));
+    menu_bar->Append(help_menu, wxT("&Help"));
 
     return menu_bar;
 }
@@ -470,7 +470,7 @@ void MyCanvas::OnDraw(wxDC& dc)
     dc.DrawSpline(50, 200, 50, 100, 200, 10);
 #endif // wxUSE_SPLINES
     dc.DrawLine(50, 230, 200, 230);
-    dc.DrawText(_T("This is a test string"), 50, 230);
+    dc.DrawText(wxT("This is a test string"), 50, 230);
 
     wxPoint points[3];
     points[0].x = 200; points[0].y = 300;
--- contrib/samples/plot/plot.cpp-orig	2009-06-18 19:13:03.676559000 -0500
+++ contrib/samples/plot/plot.cpp	2009-06-18 19:13:08.680097000 -0500
@@ -104,18 +104,18 @@ BEGIN_EVENT_TABLE(MyFrame,wxFrame)
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
-       : wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxPlotWindow sample"),
+       : wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxPlotWindow sample"),
                   wxPoint(20,20), wxSize(470,500) )
 {
     wxMenu *fileMenu = new wxMenu();
-    fileMenu->Append( wxID_EXIT, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    fileMenu->Append( wxID_EXIT, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_ABOUT, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(wxID_ABOUT, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     SetMenuBar( menuBar );
 
@@ -130,7 +130,7 @@ MyFrame::MyFrame()
 //    m_plot->SetScrollOnThumbRelease( true );
 
     //Add a blue, 16pt chart title
-    wxString titleText( _T("The Chart Title") );
+    wxString titleText( wxT("The Chart Title") );
     wxFont titleFont( *wxNORMAL_FONT );
     titleFont.SetPointSize( 16 );
     wxColour titleColour( *wxBLUE );
@@ -146,7 +146,7 @@ MyFrame::MyFrame()
     m_plot->Add( oo );
 
 #if wxUSE_LOG
-    m_log = new wxTextCtrl( this, wxID_ANY, _T("This is the log window.\n"), wxPoint(0,0), wxSize(100,100), wxTE_MULTILINE );
+    m_log = new wxTextCtrl( this, wxID_ANY, wxT("This is the log window.\n"), wxPoint(0,0), wxSize(100,100), wxTE_MULTILINE );
     wxLog *old_log = wxLog::SetActiveTarget( new wxLogTextCtrl( m_log ) );
     delete old_log;
 #endif // wxUSE_LOG
@@ -171,23 +171,23 @@ void MyFrame::OnQuit( wxCommandEvent &WX
 
 void MyFrame::OnAbout( wxCommandEvent &WXUNUSED(event) )
 {
-    (void)wxMessageBox( _T("wxPlotWindow Demo\n")
-                        _T("Robert Roebling (c) 1999,2000"),
-                        _T("About wxPlotWindow Demo"), wxICON_INFORMATION | wxOK );
+    (void)wxMessageBox( wxT("wxPlotWindow Demo\n")
+                        wxT("Robert Roebling (c) 1999,2000"),
+                        wxT("About wxPlotWindow Demo"), wxICON_INFORMATION | wxOK );
 }
 
 void MyFrame::OnPlotClick( wxPlotEvent &event )
 {
     double x = event.GetPosition() * m_plot->GetUnitsPerValue();
     double y = event.GetCurve()->GetY( event.GetPosition() );
-    wxLogMessage( _T("Clicked on curve at x coordinate: %f, value: %f"), x, y );
+    wxLogMessage( wxT("Clicked on curve at x coordinate: %f, value: %f"), x, y );
 }
 
 void MyFrame::OnPlotDClick( wxPlotEvent &event )
 {
     double x = event.GetPosition() * m_plot->GetUnitsPerValue();
     double y = event.GetCurve()->GetY( event.GetPosition() );
-    wxLogMessage( _T("Double clicked on curve at x coordinate: %f, value: %f"), x, y );
+    wxLogMessage( wxT("Double clicked on curve at x coordinate: %f, value: %f"), x, y );
 }
 
 //-----------------------------------------------------------------------------
--- contrib/samples/stc/prefs.cpp-orig	2009-06-18 19:12:22.066026000 -0500
+++ contrib/samples/stc/prefs.cpp	2009-06-18 19:12:26.900097000 -0500
@@ -60,49 +60,49 @@ const CommonInfo g_CommonPrefs = {
 // keywordlists
 // C++
 wxChar* CppWordlist1 =
-    _T("asm auto bool break case catch char class const const_cast ")
-    _T("continue default delete do double dynamic_cast else enum explicit ")
-    _T("export extern false float for friend goto if inline int long ")
-    _T("mutable namespace new operator private protected public register ")
-    _T("reinterpret_cast return short signed sizeof static static_cast ")
-    _T("struct switch template this throw true try typedef typeid ")
-    _T("typename union unsigned using virtual void volatile wchar_t ")
-    _T("while");
+    wxT("asm auto bool break case catch char class const const_cast ")
+    wxT("continue default delete do double dynamic_cast else enum explicit ")
+    wxT("export extern false float for friend goto if inline int long ")
+    wxT("mutable namespace new operator private protected public register ")
+    wxT("reinterpret_cast return short signed sizeof static static_cast ")
+    wxT("struct switch template this throw true try typedef typeid ")
+    wxT("typename union unsigned using virtual void volatile wchar_t ")
+    wxT("while");
 wxChar* CppWordlist2 =
-    _T("file");
+    wxT("file");
 wxChar* CppWordlist3 =
-    _T("a addindex addtogroup anchor arg attention author b brief bug c ")
-    _T("class code date def defgroup deprecated dontinclude e em endcode ")
-    _T("endhtmlonly endif endlatexonly endlink endverbatim enum example ")
-    _T("exception f$ f[ f] file fn hideinitializer htmlinclude ")
-    _T("htmlonly if image include ingroup internal invariant interface ")
-    _T("latexonly li line link mainpage name namespace nosubgrouping note ")
-    _T("overload p page par param post pre ref relates remarks return ")
-    _T("retval sa section see showinitializer since skip skipline struct ")
-    _T("subsection test throw todo typedef union until var verbatim ")
-    _T("verbinclude version warning weakgroup $ @ \"\" & < > # { }");
+    wxT("a addindex addtogroup anchor arg attention author b brief bug c ")
+    wxT("class code date def defgroup deprecated dontinclude e em endcode ")
+    wxT("endhtmlonly endif endlatexonly endlink endverbatim enum example ")
+    wxT("exception f$ f[ f] file fn hideinitializer htmlinclude ")
+    wxT("htmlonly if image include ingroup internal invariant interface ")
+    wxT("latexonly li line link mainpage name namespace nosubgrouping note ")
+    wxT("overload p page par param post pre ref relates remarks return ")
+    wxT("retval sa section see showinitializer since skip skipline struct ")
+    wxT("subsection test throw todo typedef union until var verbatim ")
+    wxT("verbinclude version warning weakgroup $ @ \"\" & < > # { }");
 
 // Python
 wxChar* PythonWordlist1 =
-    _T("and assert break class continue def del elif else except exec ")
-    _T("finally for from global if import in is lambda None not or pass ")
-    _T("print raise return try while yield");
+    wxT("and assert break class continue def del elif else except exec ")
+    wxT("finally for from global if import in is lambda None not or pass ")
+    wxT("print raise return try while yield");
 wxChar* PythonWordlist2 =
-    _T("ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON BEGIN ")
-    _T("BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS ")
-    _T("COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX ")
-    _T("DISCARDABLE EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE ")
-    _T("LISTBOX LTEXT MENU MENUEX MENUITEM MESSAGETABLE POPUP PUSHBUTTON ")
-    _T("RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 ")
-    _T("STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY");
+    wxT("ACCELERATORS ALT AUTO3STATE AUTOCHECKBOX AUTORADIOBUTTON BEGIN ")
+    wxT("BITMAP BLOCK BUTTON CAPTION CHARACTERISTICS CHECKBOX CLASS ")
+    wxT("COMBOBOX CONTROL CTEXT CURSOR DEFPUSHBUTTON DIALOG DIALOGEX ")
+    wxT("DISCARDABLE EDITTEXT END EXSTYLE FONT GROUPBOX ICON LANGUAGE ")
+    wxT("LISTBOX LTEXT MENU MENUEX MENUITEM MESSAGETABLE POPUP PUSHBUTTON ")
+    wxT("RADIOBUTTON RCDATA RTEXT SCROLLBAR SEPARATOR SHIFT STATE3 ")
+    wxT("STRINGTABLE STYLE TEXTINCLUDE VALUE VERSION VERSIONINFO VIRTKEY");
 
 
 //----------------------------------------------------------------------------
 //! languages
 const LanguageInfo g_LanguagePrefs [] = {
     // C++
-    {_T("C++"),
-     _T("*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hpp;*.hxx;*.sma"),
+    {wxT("C++"),
+     wxT("*.c;*.cc;*.cpp;*.cxx;*.cs;*.h;*.hh;*.hpp;*.hxx;*.sma"),
      wxSTC_LEX_CPP,
      {{mySTC_TYPE_DEFAULT, NULL},
       {mySTC_TYPE_COMMENT, NULL},
@@ -138,8 +138,8 @@ const LanguageInfo g_LanguagePrefs [] = 
       {-1, NULL}},
      mySTC_FOLD_COMMENT | mySTC_FOLD_COMPACT | mySTC_FOLD_PREPROC},
     // Python
-    {_T("Python"),
-     _T("*.py;*.pyw"),
+    {wxT("Python"),
+     wxT("*.py;*.pyw"),
      wxSTC_LEX_PYTHON,
      {{mySTC_TYPE_DEFAULT, NULL},
       {mySTC_TYPE_COMMENT_LINE, NULL},
@@ -176,7 +176,7 @@ const LanguageInfo g_LanguagePrefs [] = 
      mySTC_FOLD_COMMENTPY | mySTC_FOLD_QUOTESPY},
     // * (any)
     {(wxChar *)DEFAULT_LANGUAGE,
-     _T("*.*"),
+     wxT("*.*"),
      wxSTC_LEX_PROPERTIES,
      {{mySTC_TYPE_DEFAULT, NULL},
       {mySTC_TYPE_DEFAULT, NULL},
@@ -219,159 +219,159 @@ const int g_LanguagePrefsSize = WXSIZEOF
 //! style types
 const StyleInfo g_StylePrefs [] = {
     // mySTC_TYPE_DEFAULT
-    {_T("Default"),
-     _T("BLACK"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Default"),
+     wxT("BLACK"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD1
-    {_T("Keyword1"),
-     _T("BLUE"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_BOLD, 0},
+    {wxT("Keyword1"),
+     wxT("BLUE"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_BOLD, 0},
 
     // mySTC_TYPE_WORD2
-    {_T("Keyword2"),
-     _T("DARK BLUE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword2"),
+     wxT("DARK BLUE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD3
-    {_T("Keyword3"),
-     _T("CORNFLOWER BLUE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword3"),
+     wxT("CORNFLOWER BLUE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD4
-    {_T("Keyword4"),
-     _T("CYAN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword4"),
+     wxT("CYAN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD5
-    {_T("Keyword5"),
-     _T("DARK GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword5"),
+     wxT("DARK GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_WORD6
-    {_T("Keyword6"),
-     _T("GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Keyword6"),
+     wxT("GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT
-    {_T("Comment"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Comment"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT_DOC
-    {_T("Comment (Doc)"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Comment (Doc)"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT_LINE
-    {_T("Comment line"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Comment line"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMENT_SPECIAL
-    {_T("Special comment"),
-     _T("FOREST GREEN"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_ITALIC, 0},
+    {wxT("Special comment"),
+     wxT("FOREST GREEN"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_ITALIC, 0},
 
     // mySTC_TYPE_CHARACTER
-    {_T("Character"),
-     _T("KHAKI"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Character"),
+     wxT("KHAKI"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_CHARACTER_EOL
-    {_T("Character (EOL)"),
-     _T("KHAKI"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Character (EOL)"),
+     wxT("KHAKI"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_STRING
-    {_T("String"),
-     _T("BROWN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("String"),
+     wxT("BROWN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_STRING_EOL
-    {_T("String (EOL)"),
-     _T("BROWN"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("String (EOL)"),
+     wxT("BROWN"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_DELIMITER
-    {_T("Delimiter"),
-     _T("ORANGE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Delimiter"),
+     wxT("ORANGE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_PUNCTUATION
-    {_T("Punctuation"),
-     _T("ORANGE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Punctuation"),
+     wxT("ORANGE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_OPERATOR
-    {_T("Operator"),
-     _T("BLACK"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_BOLD, 0},
+    {wxT("Operator"),
+     wxT("BLACK"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_BOLD, 0},
 
     // mySTC_TYPE_BRACE
-    {_T("Label"),
-     _T("VIOLET"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Label"),
+     wxT("VIOLET"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_COMMAND
-    {_T("Command"),
-     _T("BLUE"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Command"),
+     wxT("BLUE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_IDENTIFIER
-    {_T("Identifier"),
-     _T("BLACK"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Identifier"),
+     wxT("BLACK"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_LABEL
-    {_T("Label"),
-     _T("VIOLET"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Label"),
+     wxT("VIOLET"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_NUMBER
-    {_T("Number"),
-     _T("SIENNA"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Number"),
+     wxT("SIENNA"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_PARAMETER
-    {_T("Parameter"),
-     _T("VIOLET"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_ITALIC, 0},
+    {wxT("Parameter"),
+     wxT("VIOLET"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_ITALIC, 0},
 
     // mySTC_TYPE_REGEX
-    {_T("Regular expression"),
-     _T("ORCHID"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Regular expression"),
+     wxT("ORCHID"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_UUID
-    {_T("UUID"),
-     _T("ORCHID"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("UUID"),
+     wxT("ORCHID"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_VALUE
-    {_T("Value"),
-     _T("ORCHID"), _T("WHITE"),
-     _T(""), 10, mySTC_STYLE_ITALIC, 0},
+    {wxT("Value"),
+     wxT("ORCHID"), wxT("WHITE"),
+     wxT(""), 10, mySTC_STYLE_ITALIC, 0},
 
     // mySTC_TYPE_PREPROCESSOR
-    {_T("Preprocessor"),
-     _T("GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Preprocessor"),
+     wxT("GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_SCRIPT
-    {_T("Script"),
-     _T("DARK GREY"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Script"),
+     wxT("DARK GREY"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_ERROR
-    {_T("Error"),
-     _T("RED"), _T("WHITE"),
-     _T(""), 10, 0, 0},
+    {wxT("Error"),
+     wxT("RED"), wxT("WHITE"),
+     wxT(""), 10, 0, 0},
 
     // mySTC_TYPE_UNDEFINED
-    {_T("Undefined"),
-     _T("ORANGE"), _T("WHITE"),
-     _T(""), 10, 0, 0}
+    {wxT("Undefined"),
+     wxT("ORANGE"), wxT("WHITE"),
+     wxT(""), 10, 0, 0}
 
     };
 
--- contrib/samples/stc/edit.cpp-orig	2009-06-18 19:12:31.805478000 -0500
+++ contrib/samples/stc/edit.cpp	2009-06-18 19:12:36.841552000 -0500
@@ -134,9 +134,9 @@ Edit::Edit (wxWindow *parent, wxWindowID
     StyleSetFont (wxSTC_STYLE_DEFAULT, font);
     StyleSetForeground (wxSTC_STYLE_DEFAULT, *wxBLACK);
     StyleSetBackground (wxSTC_STYLE_DEFAULT, *wxWHITE);
-    StyleSetForeground (wxSTC_STYLE_LINENUMBER, wxColour (_T("DARK GREY")));
+    StyleSetForeground (wxSTC_STYLE_LINENUMBER, wxColour (wxT("DARK GREY")));
     StyleSetBackground (wxSTC_STYLE_LINENUMBER, *wxWHITE);
-    StyleSetForeground(wxSTC_STYLE_INDENTGUIDE, wxColour (_T("DARK GREY")));
+    StyleSetForeground(wxSTC_STYLE_INDENTGUIDE, wxColour (wxT("DARK GREY")));
     InitializePrefs (DEFAULT_LANGUAGE);
 
     // set visibility
@@ -145,16 +145,16 @@ Edit::Edit (wxWindow *parent, wxWindowID
     SetYCaretPolicy (wxSTC_CARET_EVEN|wxSTC_VISIBLE_STRICT|wxSTC_CARET_SLOP, 1);
 
     // markers
-    MarkerDefine (wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_DOTDOTDOT, _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN, _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_EMPTY,     _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_DOTDOTDOT, _T("BLACK"), _T("WHITE"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN, _T("BLACK"), _T("WHITE"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_EMPTY,     _T("BLACK"), _T("BLACK"));
-    MarkerDefine (wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_EMPTY,     _T("BLACK"), _T("BLACK"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDER,        wxSTC_MARK_DOTDOTDOT, wxT("BLACK"), wxT("BLACK"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDEROPEN,    wxSTC_MARK_ARROWDOWN, wxT("BLACK"), wxT("BLACK"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDERSUB,     wxSTC_MARK_EMPTY,     wxT("BLACK"), wxT("BLACK"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDEREND,     wxSTC_MARK_DOTDOTDOT, wxT("BLACK"), wxT("WHITE"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDEROPENMID, wxSTC_MARK_ARROWDOWN, wxT("BLACK"), wxT("WHITE"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDERMIDTAIL, wxSTC_MARK_EMPTY,     wxT("BLACK"), wxT("BLACK"));
+    MarkerDefine (wxSTC_MARKNUM_FOLDERTAIL,    wxSTC_MARK_EMPTY,     wxT("BLACK"), wxT("BLACK"));
 
     // miscelaneous
-    m_LineNrMargin = TextWidth (wxSTC_STYLE_LINENUMBER, _T("_999999"));
+    m_LineNrMargin = TextWidth (wxSTC_STYLE_LINENUMBER, wxT("_999999"));
     m_FoldingMargin = 16;
     CmdKeyClear (wxSTC_KEY_TAB, 0); // this is done by the menu accelerator key
     SetLayoutCache (wxSTC_CACHE_PAGE);
@@ -369,8 +369,8 @@ wxString Edit::DeterminePrefs (const wxS
         while (!filepattern.empty()) {
             wxString cur = filepattern.BeforeFirst (';');
             if ((cur == filename) ||
-                (cur == (filename.BeforeLast ('.') + _T(".*"))) ||
-                (cur == (_T("*.") + filename.AfterLast ('.')))) {
+                (cur == (filename.BeforeLast ('.') + wxT(".*"))) ||
+                (cur == (wxT("*.") + filename.AfterLast ('.')))) {
                 return curInfo->name;
             }
             filepattern = filepattern.AfterFirst (';');
@@ -404,7 +404,7 @@ bool Edit::InitializePrefs (const wxStri
 
     // set margin for line numbers
     SetMarginType (m_LineNrID, wxSTC_MARGIN_NUMBER);
-    StyleSetForeground (wxSTC_STYLE_LINENUMBER, wxColour (_T("DARK GREY")));
+    StyleSetForeground (wxSTC_STYLE_LINENUMBER, wxColour (wxT("DARK GREY")));
     StyleSetBackground (wxSTC_STYLE_LINENUMBER, *wxWHITE);
     SetMarginWidth (m_LineNrID, 0); // start out not visible
 
@@ -416,8 +416,8 @@ bool Edit::InitializePrefs (const wxStri
     }
 
     // set common styles
-    StyleSetForeground (wxSTC_STYLE_DEFAULT, wxColour (_T("DARK GREY")));
-    StyleSetForeground (wxSTC_STYLE_INDENTGUIDE, wxColour (_T("DARK GREY")));
+    StyleSetForeground (wxSTC_STYLE_DEFAULT, wxColour (wxT("DARK GREY")));
+    StyleSetForeground (wxSTC_STYLE_INDENTGUIDE, wxColour (wxT("DARK GREY")));
 
     // initialize settings
     if (g_CommonPrefs.syntaxEnable) {
@@ -461,21 +461,21 @@ bool Edit::InitializePrefs (const wxStri
     if (g_CommonPrefs.foldEnable) {
         SetMarginWidth (m_FoldingID, curInfo->folds != 0? m_FoldingMargin: 0);
         SetMarginSensitive (m_FoldingID, curInfo->folds != 0);
-        SetProperty (_T("fold"), curInfo->folds != 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.comment"),
-                     (curInfo->folds & mySTC_FOLD_COMMENT) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.compact"),
-                     (curInfo->folds & mySTC_FOLD_COMPACT) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.preprocessor"),
-                     (curInfo->folds & mySTC_FOLD_PREPROC) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.html"),
-                     (curInfo->folds & mySTC_FOLD_HTML) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.html.preprocessor"),
-                     (curInfo->folds & mySTC_FOLD_HTMLPREP) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.comment.python"),
-                     (curInfo->folds & mySTC_FOLD_COMMENTPY) > 0? _T("1"): _T("0"));
-        SetProperty (_T("fold.quotes.python"),
-                     (curInfo->folds & mySTC_FOLD_QUOTESPY) > 0? _T("1"): _T("0"));
+        SetProperty (wxT("fold"), curInfo->folds != 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.comment"),
+                     (curInfo->folds & mySTC_FOLD_COMMENT) > 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.compact"),
+                     (curInfo->folds & mySTC_FOLD_COMPACT) > 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.preprocessor"),
+                     (curInfo->folds & mySTC_FOLD_PREPROC) > 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.html"),
+                     (curInfo->folds & mySTC_FOLD_HTML) > 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.html.preprocessor"),
+                     (curInfo->folds & mySTC_FOLD_HTMLPREP) > 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.comment.python"),
+                     (curInfo->folds & mySTC_FOLD_COMMENTPY) > 0? wxT("1"): wxT("0"));
+        SetProperty (wxT("fold.quotes.python"),
+                     (curInfo->folds & mySTC_FOLD_QUOTESPY) > 0? wxT("1"): wxT("0"));
     }
     SetFoldFlags (wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED |
                   wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED);
@@ -507,8 +507,8 @@ bool Edit::LoadFile ()
 #if wxUSE_FILEDLG
     // get filname
     if (!m_filename) {
-        wxFileDialog dlg (this, _T("Open file"), wxEmptyString, wxEmptyString,
-                          _T("Any file (*)|*"), wxFD_OPEN | wxFD_FILE_MUST_EXIST | wxFD_CHANGE_DIR);
+        wxFileDialog dlg (this, wxT("Open file"), wxEmptyString, wxEmptyString,
+                          wxT("Any file (*)|*"), wxFD_OPEN | wxFD_FILE_MUST_EXIST | wxFD_CHANGE_DIR);
         if (dlg.ShowModal() != wxID_OK) return false;
         m_filename = dlg.GetPath();
     }
@@ -556,7 +556,7 @@ bool Edit::SaveFile ()
 
     // get filname
     if (!m_filename) {
-        wxFileDialog dlg (this, _T("Save file"), wxEmptyString, wxEmptyString, _T("Any file (*)|*"),
+        wxFileDialog dlg (this, wxT("Save file"), wxEmptyString, wxEmptyString, wxT("Any file (*)|*"),
                           wxFD_SAVE | wxFD_OVERWRITE_PROMPT);
         if (dlg.ShowModal() != wxID_OK) return false;
         m_filename = dlg.GetPath();
@@ -630,14 +630,14 @@ EditProperties::EditProperties (Edit *ed
     textinfo->Add (new wxStaticText (this, wxID_ANY, _("Lexer-ID: "),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                    0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetLexer());
+    text = wxString::Format (wxT("%d"), edit->GetLexer());
     textinfo->Add (new wxStaticText (this, wxID_ANY, text),
                    0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     wxString EOLtype = wxEmptyString;
     switch (edit->GetEOLMode()) {
-        case wxSTC_EOL_CR: {EOLtype = _T("CR (Unix)"); break; }
-        case wxSTC_EOL_CRLF: {EOLtype = _T("CRLF (Windows)"); break; }
-        case wxSTC_EOL_LF: {EOLtype = _T("CR (Macintosh)"); break; }
+        case wxSTC_EOL_CR: {EOLtype = wxT("CR (Unix)"); break; }
+        case wxSTC_EOL_CRLF: {EOLtype = wxT("CRLF (Windows)"); break; }
+        case wxSTC_EOL_LF: {EOLtype = wxT("CR (Macintosh)"); break; }
     }
     textinfo->Add (new wxStaticText (this, wxID_ANY, _("Line endings"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
@@ -657,25 +657,25 @@ EditProperties::EditProperties (Edit *ed
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Total lines"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetLineCount());
+    text = wxString::Format (wxT("%d"), edit->GetLineCount());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Total chars"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetTextLength());
+    text = wxString::Format (wxT("%d"), edit->GetTextLength());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Current line"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetCurrentLine());
+    text = wxString::Format (wxT("%d"), edit->GetCurrentLine());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
     statistic->Add (new wxStaticText (this, wxID_ANY, _("Current pos"),
                                      wxDefaultPosition, wxSize(80, wxDefaultCoord)),
                     0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT, 4);
-    text = wxString::Format (_T("%d"), edit->GetCurrentPos());
+    text = wxString::Format (wxT("%d"), edit->GetCurrentPos());
     statistic->Add (new wxStaticText (this, wxID_ANY, text),
                     0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxRIGHT, 4);
 
--- contrib/samples/stc/edit.h-orig	2009-06-18 19:12:41.329541000 -0500
+++ contrib/samples/stc/edit.h	2009-06-18 19:12:45.303622000 -0500
@@ -148,7 +148,7 @@ class EditPrint: public wxPrintout {
 public:
 
     //! constructor
-    EditPrint (Edit *edit, wxChar *title = _T(""));
+    EditPrint (Edit *edit, wxChar *title = wxT(""));
 
     //! event handlers
     bool OnPrintPage (int page);
--- contrib/samples/stc/stctest.cpp-orig	2009-06-18 19:12:50.793608000 -0500
+++ contrib/samples/stc/stctest.cpp	2009-06-18 19:12:56.674677000 -0500
@@ -53,19 +53,19 @@
 // declarations
 //============================================================================
 
-#define APP_NAME _T("STC-Test")
+#define APP_NAME wxT("STC-Test")
 #define APP_DESCR _("See http://wxguide.sourceforge.net/")
 
-#define APP_MAINT _T("Otto Wyss")
-#define APP_VENDOR _T("wxWidgets")
-#define APP_COPYRIGTH _T("(C) 2003 Otto Wyss")
-#define APP_LICENCE _T("wxWidgets")
+#define APP_MAINT wxT("Otto Wyss")
+#define APP_VENDOR wxT("wxWidgets")
+#define APP_COPYRIGTH wxT("(C) 2003 Otto Wyss")
+#define APP_LICENCE wxT("wxWidgets")
 
-#define APP_VERSION _T("0.1.alpha")
+#define APP_VERSION wxT("0.1.alpha")
 #define APP_BUILD __DATE__
 
-#define APP_WEBSITE _T("http://www.wxWidgets.org")
-#define APP_MAIL _T("mailto://???")
+#define APP_WEBSITE wxT("http://www.wxWidgets.org")
+#define APP_MAIL wxT("mailto://???")
 
 #define NONAME _("<untitled>")
 
@@ -203,7 +203,7 @@ bool App::OnInit () {
     SetVendorName (APP_VENDOR);
     g_appname = new wxString ();
     g_appname->Append (APP_VENDOR);
-    g_appname->Append (_T("-"));
+    g_appname->Append (wxT("-"));
     g_appname->Append (APP_NAME);
 
 #if wxUSE_PRINTING_ARCHITECTURE
@@ -308,7 +308,7 @@ AppFrame::AppFrame (const wxString &titl
     // set icon and background
     SetTitle (*g_appname);
     SetIcon (wxICON (mondrian));
-    SetBackgroundColour (_T("WHITE"));
+    SetBackgroundColour (wxT("WHITE"));
 
     // about box shown for 1 seconds
     AppAbout dlg(this, 1000);
@@ -321,7 +321,7 @@ AppFrame::AppFrame (const wxString &titl
     m_edit = new Edit (this, wxID_ANY);
     m_edit->SetFocus();
 
-    FileOpen (_T("stctest.cpp"));
+    FileOpen (wxT("stctest.cpp"));
 }
 
 AppFrame::~AppFrame () {
@@ -351,7 +351,7 @@ void AppFrame::OnFileOpen (wxCommandEven
     if (!m_edit) return;
 #if wxUSE_FILEDLG
     wxString fname;
-    wxFileDialog dlg (this, _T("Open file"), wxEmptyString, wxEmptyString, _T("Any file (*)|*"),
+    wxFileDialog dlg (this, wxT("Open file"), wxEmptyString, wxEmptyString, wxT("Any file (*)|*"),
                       wxFD_OPEN | wxFD_FILE_MUST_EXIST | wxFD_CHANGE_DIR);
     if (dlg.ShowModal() != wxID_OK) return;
     fname = dlg.GetPath ();
@@ -373,7 +373,7 @@ void AppFrame::OnFileSaveAs (wxCommandEv
     if (!m_edit) return;
 #if wxUSE_FILEDLG
     wxString filename = wxEmptyString;
-    wxFileDialog dlg (this, _T("Save file"), wxEmptyString, wxEmptyString, _T("Any file (*)|*"), wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
+    wxFileDialog dlg (this, wxT("Save file"), wxEmptyString, wxEmptyString, wxT("Any file (*)|*"), wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
     if (dlg.ShowModal() != wxID_OK) return;
     filename = dlg.GetPath();
     m_edit->SaveFile (filename);
--- contrib/docs/latex/mmedia/sndoss.tex-orig	2009-06-18 19:23:53.377794000 -0500
+++ contrib/docs/latex/mmedia/sndoss.tex	2009-06-18 19:23:59.976684000 -0500
@@ -20,7 +20,7 @@ OSS output class
 
 \membersection{wxSoundStreamOSS::wxSoundStreamOSS}\label{wxsoundstreamosswxsoundstreamoss}
 
-\func{}{wxSoundStreamOSS}{\param{const wxString\& }{dev\_name = \_T("/dev/dsp")}}
+\func{}{wxSoundStreamOSS}{\param{const wxString\& }{dev\_name = \wxT("/dev/dsp")}}
 
 
 \membersection{wxSoundStreamOSS::\destruct{wxSoundStreamOSS}}\label{wxsoundstreamossdtor}
--- contrib/include/wx/deprecated/proplist.h-orig	2009-06-18 19:23:13.111169000 -0500
+++ contrib/include/wx/deprecated/proplist.h	2009-06-18 19:23:20.224712000 -0500
@@ -357,7 +357,7 @@ public:
                         const wxPoint& pos = wxDefaultPosition,
                         const wxSize& size = wxDefaultSize,
                         long style = wxDEFAULT_FRAME_STYLE,
-                        const wxString& name = _T("frame"))
+                        const wxString& name = wxT("frame"))
         : wxFrame(parent, wxID_ANY, title, pos, size, style, name)
         {
             m_view = v;
--- contrib/include/wx/deprecated/propform.h-orig	2009-06-18 19:23:25.794394000 -0500
+++ contrib/include/wx/deprecated/propform.h	2009-06-18 19:23:33.705976000 -0500
@@ -240,7 +240,7 @@ public:
                          const wxPoint& pos = wxDefaultPosition,
                          const wxSize& size = wxDefaultSize,
                          long style = wxDEFAULT_DIALOG_STYLE,
-                         const wxString& name = _T("dialogBox"));
+                         const wxString& name = wxT("dialogBox"));
 
     void OnCloseWindow(wxCloseEvent& event);
     void OnDefaultAction(wxControl *item);
@@ -268,7 +268,7 @@ public:
                         const wxPoint& pos = wxDefaultPosition,
                         const wxSize& size = wxDefaultSize,
                         long style = 0,
-                        const wxString& name = _T("panel"))
+                        const wxString& name = wxT("panel"))
         : wxPanel(parent, wxID_ANY, pos, size, style, name)
         {
             m_view = v;
@@ -300,7 +300,7 @@ public:
                         const wxPoint& pos = wxDefaultPosition,
                         const wxSize& size = wxDefaultSize,
                         long style = wxDEFAULT_FRAME_STYLE,
-                        const wxString& name = _T("frame"))
+                        const wxString& name = wxT("frame"))
         : wxFrame(parent, wxID_ANY, title, pos, size, style, name)
         {
             m_view = v;
--- contrib/utils/convertrc/convert.cpp-orig	2009-06-18 19:11:05.275619000 -0500
+++ contrib/utils/convertrc/convert.cpp	2009-06-18 19:11:12.033688000 -0500
@@ -50,14 +50,14 @@ bool wxConvertApp::OnInit()
 {
 //Initialize all image loaders(JPEG,BMP,PNG,and etc)
     wxInitAllImageHandlers();
-    SetAppName(_T("wxConvertApp"));
+    SetAppName(wxT("wxConvertApp"));
 
     if (HandleCommandLine())
         return true;
 
 
 // Create the main frame window
-    m_pFrame = new wxMainFrame(NULL, wxID_ANY, _T("wxConvertApp"), wxPoint(0, 0), wxSize(500, 400),
+    m_pFrame = new wxMainFrame(NULL, wxID_ANY, wxT("wxConvertApp"), wxPoint(0, 0), wxSize(500, 400),
         wxDEFAULT_FRAME_STYLE | wxHSCROLL | wxVSCROLL);
 
     InitMenu();
@@ -72,12 +72,12 @@ void wxConvertApp::InitMenu()
     wxASSERT(m_pMenuBar);
 
     wxMenu *filemenu=new wxMenu;
-    filemenu->Append(ID_RC2WXR,_T("Convert RC file to WXR file"));
-    filemenu->Append(ID_WXR2XML,_T("Convert WXR file to XML file"));
-    filemenu->Append(ID_RC2XML,_T("Convert RC file to XML file"));
+    filemenu->Append(ID_RC2WXR,wxT("Convert RC file to WXR file"));
+    filemenu->Append(ID_WXR2XML,wxT("Convert WXR file to XML file"));
+    filemenu->Append(ID_RC2XML,wxT("Convert RC file to XML file"));
 
-    filemenu->Append(ID_QUIT, _T("E&xit"));
-    m_pMenuBar->Append(filemenu,_T("&File"));
+    filemenu->Append(ID_QUIT, wxT("E&xit"));
+    m_pMenuBar->Append(filemenu,wxT("&File"));
 
     m_pFrame->SetMenuBar(m_pMenuBar);
 }
@@ -126,14 +126,14 @@ void wxMainFrame::OnRc2Wxr(wxCommandEven
 #if wxUSE_FILEDLG
     wxFileDialog filed(this, wxEmptyString,
                        wxEmptyString, wxEmptyString,
-                       _T("*.rc"), wxFD_OPEN);
+                       wxT("*.rc"), wxFD_OPEN);
 
     if (filed.ShowModal()!=wxID_OK)
         return;
 
-    wxFileDialog wxrfile(this, _T("Enter Desired WXR file name"),
-                         wxEmptyString, _T("resource.wxr"),
-                         _T("*.wxr"), wxFD_OPEN);
+    wxFileDialog wxrfile(this, wxT("Enter Desired WXR file name"),
+                         wxEmptyString, wxT("resource.wxr"),
+                         wxT("*.wxr"), wxFD_OPEN);
 
     if (wxrfile.ShowModal()!=wxID_OK)
         return;
@@ -147,14 +147,14 @@ void wxMainFrame::OnWXR2XML(wxCommandEve
 {
 #if wxUSE_FILEDLG
     wxFileDialog f(this);
-    f.SetWildcard(_T("*.wxr"));
+    f.SetWildcard(wxT("*.wxr"));
     if (f.ShowModal()!=wxID_OK)
         return;
 
 
-    wxFileDialog xmlfile(this,_T("Enter Desired XML file name"),
-                         wxEmptyString, _T("resource.xml"),
-                         _T("*.xml"), wxFD_OPEN);
+    wxFileDialog xmlfile(this,wxT("Enter Desired XML file name"),
+                         wxEmptyString, wxT("resource.xml"),
+                         wxT("*.xml"), wxFD_OPEN);
 
     if (xmlfile.ShowModal()!=wxID_OK)
         return;
@@ -168,13 +168,13 @@ void wxMainFrame::OnRC2XML(wxCommandEven
 {
 #if wxUSE_FILEDLG
     wxFileDialog f(this);
-    f.SetWildcard(_T("*.rc"));
+    f.SetWildcard(wxT("*.rc"));
     if (f.ShowModal()!=wxID_OK)
         return;
 
-    wxFileDialog xmlfile(this,_T("Enter Desired XML file name"),
-                         wxEmptyString, _T("resource.xml"),
-                         _T("*.xml"), wxFD_OPEN);
+    wxFileDialog xmlfile(this,wxT("Enter Desired XML file name"),
+                         wxEmptyString, wxT("resource.xml"),
+                         wxT("*.xml"), wxFD_OPEN);
 
     if (xmlfile.ShowModal()!=wxID_OK)
         return;
@@ -201,17 +201,17 @@ bool wxConvertApp::HandleCommandLine()
     target=argv[2];
 
 
-    if ((source.Find(_T(".wxr"))>0)&&(target.Find(_T(".xml"))>0))
+    if ((source.Find(wxT(".wxr"))>0)&&(target.Find(wxT(".xml"))>0))
         {
         trans_wxr2xml.Convert(source,target);
         return true;
         }
-    else if ((source.Find(_T(".rc"))!=wxNOT_FOUND)&(target.Find(_T(".wxr"))!=wxNOT_FOUND))
+    else if ((source.Find(wxT(".rc"))!=wxNOT_FOUND)&(target.Find(wxT(".wxr"))!=wxNOT_FOUND))
         {
         trans_rc2wxr.Convert(source,target);
         return true;
         }
-    else if ((source.Find(_T(".rc"))!=wxNOT_FOUND)&(target.Find(_T(".xml"))!=wxNOT_FOUND))
+    else if ((source.Find(wxT(".rc"))!=wxNOT_FOUND)&(target.Find(wxT(".xml"))!=wxNOT_FOUND))
         {
         trans_rc2xml.Convert(source,target);
         return true;
--- contrib/utils/convertrc/rc2wxr.cpp-orig	2009-06-18 19:11:20.192694000 -0500
+++ contrib/utils/convertrc/rc2wxr.cpp	2009-06-18 19:11:27.595370000 -0500
@@ -49,7 +49,7 @@ void rc2wxr::Convert(wxString wxrfile, w
 {
     m_rc.Open(rcfile);
     m_filesize=m_rc.Length();
-    if( (m_wxr  = wxFopen( wxrfile, _T("wt") )) == NULL )
+    if( (m_wxr  = wxFopen( wxrfile, wxT("wt") )) == NULL )
     {
         return;
     }
@@ -60,12 +60,12 @@ void rc2wxr::Convert(wxString wxrfile, w
     {
         tok=GetToken();
 
-        if (tok==_T("DIALOG"))
+        if (tok==wxT("DIALOG"))
         {
             ParseDialog(prevtok);
         }
 
-        if (tok==_T("MENU"))
+        if (tok==wxT("MENU"))
         {
             ParseMenu(prevtok);
         }
@@ -131,7 +131,7 @@ tok=PeekToken();
 
 //Microsoft notation?
 
-if (tok==_T("DISCARDABLE"))
+if (tok==wxT("DISCARDABLE"))
 
 {
 
@@ -149,12 +149,12 @@ if (!tok.IsNumber())
 
 //Generate Dialog text
 
-wxFprintf(m_wxr,_T("static char *dialog%i = \"dialog(name = '%s',\\\n"),dlgid,dlgname.c_str());
+wxFprintf(m_wxr,wxT("static char *dialog%i = \"dialog(name = '%s',\\\n"),dlgid,dlgname.c_str());
 
 //be lazy about style for now. add it later
 
-wxFprintf(m_wxr,_T("style = 'wxRAISED_BORDER | wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU',\\\n"));
-wxFprintf(m_wxr,_T("id = %i,\\\n"),dlgid);
+wxFprintf(m_wxr,wxT("style = 'wxRAISED_BORDER | wxCAPTION | wxRESIZE_BORDER | wxSYSTEM_MENU',\\\n"));
+wxFprintf(m_wxr,wxT("id = %i,\\\n"),dlgid);
 
 //Record x,y,width,height
 
@@ -162,7 +162,7 @@ int x,y,width,height;
 
 ReadRect(x,y,width,height);
 
-wxFprintf(m_wxr,_T("x = %i, y = %i, width = %i, height = %i,\\\n"),x,y,width,height);
+wxFprintf(m_wxr,wxT("x = %i, y = %i, width = %i, height = %i,\\\n"),x,y,width,height);
 
 
 //CAPTION "About Funimator"
@@ -175,17 +175,17 @@ wxString title;
 
 
 
-while ((tok!=_T("BEGIN"))&(tok!=_T("{")))
+while ((tok!=wxT("BEGIN"))&(tok!=wxT("{")))
 
 {
 
-if (tok==_T("CAPTION"))
+if (tok==wxT("CAPTION"))
 
 {
 
 title=GetQuoteField();
 
-wxFprintf(m_wxr,_T("title = '%s',\\\n"),title.c_str());
+wxFprintf(m_wxr,wxT("title = '%s',\\\n"),title.c_str());
 
 }
 
@@ -193,17 +193,17 @@ tok=GetToken();
 
 }
 
-wxFprintf(m_wxr,_T("use_dialog_units = 1,\\\n"));
+wxFprintf(m_wxr,wxT("use_dialog_units = 1,\\\n"));
 
-wxFprintf(m_wxr,_T("use_system_defaults = 0,\\\n"));
+wxFprintf(m_wxr,wxT("use_system_defaults = 0,\\\n"));
 
 
 
-wxFprintf(m_wxr,_T("font = [8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif'],\\\n"));
+wxFprintf(m_wxr,wxT("font = [8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif'],\\\n"));
 
 ParseControls();
 
-wxFprintf(m_wxr,_T(").\";\n\n"));
+wxFprintf(m_wxr,wxT(").\";\n\n"));
 
 }
 
@@ -241,35 +241,35 @@ wxString tok;
 
 tok=GetToken();
 
-while ((tok!=_T("END"))&(tok!=_T("}")))
+while ((tok!=wxT("END"))&(tok!=wxT("}")))
 
 {
 
-if (tok==_T("LTEXT"))
+if (tok==wxT("LTEXT"))
 
     ParseStaticText();
 
-if (tok==_T("EDITTEXT"))
+if (tok==wxT("EDITTEXT"))
 
     ParseTextCtrl();
 
-if (tok==_T("PUSHBUTTON"))
+if (tok==wxT("PUSHBUTTON"))
 
     ParsePushButton();
 
-if (tok==_T("DEFPUSHBUTTON"))
+if (tok==wxT("DEFPUSHBUTTON"))
 
     ParsePushButton();
 
-if (tok==_T("GROUPBOX"))
+if (tok==wxT("GROUPBOX"))
 
     ParseGroupBox();
 
-if (tok==_T("COMBOBOX"))
+if (tok==wxT("COMBOBOX"))
 
     ParseComboBox();
 
-if (tok==_T("CONTROL"))
+if (tok==wxT("CONTROL"))
 
     ParseControlMS();
 
@@ -303,11 +303,11 @@ int x,y,width,height;
 
 ReadRect(x,y,width,height);
 
-wxFprintf(m_wxr,_T("  control = [%i,wxStaticText,'%s','0','%s',"),m_controlid,phrase.c_str(),varname.c_str());
+wxFprintf(m_wxr,wxT("  control = [%i,wxStaticText,'%s','0','%s',"),m_controlid,phrase.c_str(),varname.c_str());
 
-wxFprintf(m_wxr,_T("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
+wxFprintf(m_wxr,wxT("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
 
-wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 
 }
 
@@ -329,11 +329,11 @@ int x,y,width,height;
 
 ReadRect(x,y,width,height);
 
-wxFprintf(m_wxr,_T("  control = [%i,wxTextCtrl,'','0','%s',"),m_controlid,varname.c_str());
+wxFprintf(m_wxr,wxT("  control = [%i,wxTextCtrl,'','0','%s',"),m_controlid,varname.c_str());
 
-wxFprintf(m_wxr,_T("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
+wxFprintf(m_wxr,wxT("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
 
-wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 
 
 
@@ -359,19 +359,19 @@ m_controlid++;
 
 c=m_controlid;
 
-if (varname==_T("IDOK"))
+if (varname==wxT("IDOK"))
 
 c=wxID_OK;
 
 
 
-if (varname==_T("IDCANCEL"))
+if (varname==wxT("IDCANCEL"))
 
 c=wxID_CANCEL;
 
 
 
-if (varname==_T("IDAPPLY"))
+if (varname==wxT("IDAPPLY"))
 
 c=wxID_APPLY;
 
@@ -381,11 +381,11 @@ int x,y,width,height;
 
 ReadRect(x,y,width,height);
 
-wxFprintf(m_wxr,_T("  control = [%i,wxButton,'%s','0','%s',"),c,phrase.c_str(),varname.c_str());
+wxFprintf(m_wxr,wxT("  control = [%i,wxButton,'%s','0','%s',"),c,phrase.c_str(),varname.c_str());
 
-wxFprintf(m_wxr,_T("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
+wxFprintf(m_wxr,wxT("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
 
-wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 
 
 
@@ -441,11 +441,11 @@ int x,y,width,height;
 
 ReadRect(x,y,width,height);
 
-wxFprintf(m_wxr,_T("  control = [%i,wxStaticBox,'%s','0','%s',"),m_controlid,phrase.c_str(),varname.c_str());
+wxFprintf(m_wxr,wxT("  control = [%i,wxStaticBox,'%s','0','%s',"),m_controlid,phrase.c_str(),varname.c_str());
 
-wxFprintf(m_wxr,_T("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
+wxFprintf(m_wxr,wxT("%i,%i,%i,%i,'',\\\n"),x,y,width,height);
 
-wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 
 
 
@@ -617,9 +617,9 @@ void rc2wxr::ParseComboBox()
     m_controlid++;
 
     ReadRect(x,y,width,height);
-    wxFprintf(m_wxr,_T("  control = [%i,wxChoice,'','0','%s',"),m_controlid,varname.c_str());
-    wxFprintf(m_wxr,_T("%i,%i,%i,%i,[],\\\n"),x,y,width,height);
-    wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+    wxFprintf(m_wxr,wxT("  control = [%i,wxChoice,'','0','%s',"),m_controlid,varname.c_str());
+    wxFprintf(m_wxr,wxT("%i,%i,%i,%i,[],\\\n"),x,y,width,height);
+    wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 }
 
 
@@ -628,25 +628,25 @@ void rc2wxr::ParseMenu(wxString name)
     wxString tok;
     static int menuid=0;
     menuid++;
-    wxFprintf(m_wxr,_T("static char *MenuBar%i = \"menu(name = '%s',\\\n"),menuid,name.c_str());
-    wxFprintf(m_wxr,_T("menu = \\\n"));
-    wxFprintf(m_wxr,_T("[\\\n"));
+    wxFprintf(m_wxr,wxT("static char *MenuBar%i = \"menu(name = '%s',\\\n"),menuid,name.c_str());
+    wxFprintf(m_wxr,wxT("menu = \\\n"));
+    wxFprintf(m_wxr,wxT("[\\\n"));
 
-    while ((tok!=_T("BEGIN"))&(tok!=_T("{")))
+    while ((tok!=wxT("BEGIN"))&(tok!=wxT("{")))
         tok=GetToken();
 
-    while ((tok!=_T("END"))&(tok!=_T("}")))
+    while ((tok!=wxT("END"))&(tok!=wxT("}")))
     {
         tok=GetToken();
 
-        if (tok==_T("POPUP"))
+        if (tok==wxT("POPUP"))
         {
             ParsePopupMenu();
-            wxFprintf(m_wxr,_T("  ],\\\n"));
+            wxFprintf(m_wxr,wxT("  ],\\\n"));
         }
     }
 
-    wxFprintf(m_wxr,_T("]).\";\n\n"));
+    wxFprintf(m_wxr,wxT("]).\";\n\n"));
 }
 
 
@@ -660,32 +660,32 @@ void rc2wxr::ParsePopupMenu()
     int spot;
 
     //Remove /t because it causes problems
-    spot=tok.First(_T("\\t"));
+    spot=tok.First(wxT("\\t"));
     tok=tok.Left(spot);
 
-    wxFprintf(m_wxr,_T("  ['%s',%i,'',\\\n"),tok.c_str(),menuitem);
+    wxFprintf(m_wxr,wxT("  ['%s',%i,'',\\\n"),tok.c_str(),menuitem);
 
-    while ((tok!=_T("BEGIN"))&(tok!=_T("{")))
+    while ((tok!=wxT("BEGIN"))&(tok!=wxT("{")))
         tok=GetToken();
 
-    while ((tok!=_T("END"))&(tok!=_T("}")))
+    while ((tok!=wxT("END"))&(tok!=wxT("}")))
     {
         tok=GetToken();
 
-        if (tok==_T("MENUITEM"))
+        if (tok==wxT("MENUITEM"))
         {
-            if (PeekToken()==_T("SEPARATOR"))
+            if (PeekToken()==wxT("SEPARATOR"))
             {
-                wxFprintf(m_wxr,_T("      [],\\\n"));
+                wxFprintf(m_wxr,wxT("      [],\\\n"));
             }
             else
             {
                 tok=GetQuoteField();
                 //Remove /t because it causes problems
-                spot=tok.First(_T("\\t"));
+                spot=tok.First(wxT("\\t"));
                 tok=tok.Left(spot);
                 menuitem++;
-                wxFprintf(m_wxr,_T("      ['%s',%i,''],\\\n"),tok.c_str(),menuitem);
+                wxFprintf(m_wxr,wxT("      ['%s',%i,''],\\\n"),tok.c_str(),menuitem);
             }
         }
     }
@@ -710,11 +710,11 @@ void rc2wxr::ParseControlMS()
     wxString kindctrl=GetQuoteField();
 
     kindctrl.MakeUpper();
-    if (kindctrl==_T("MSCTLS_TRACKBAR32"))
+    if (kindctrl==wxT("MSCTLS_TRACKBAR32"))
         ParseSlider(label,varname);
-    if (kindctrl==_T("MSCTLS_PROGRESS32"))
+    if (kindctrl==wxT("MSCTLS_PROGRESS32"))
         ParseProgressBar(label,varname);
-    if (kindctrl==_T("BUTTON"))
+    if (kindctrl==wxT("BUTTON"))
         ParseCtrlButton(label,varname);
 }
 
@@ -728,11 +728,11 @@ void rc2wxr::ParseSlider(wxString WXUNUS
 
     while (ReadOrs(tok))
         ;
-    wxFprintf(m_wxr,_T("  control = [%i,wxSlider,'','wxSL_HORIZONTAL','%s',"),m_controlid,varname.c_str());
+    wxFprintf(m_wxr,wxT("  control = [%i,wxSlider,'','wxSL_HORIZONTAL','%s',"),m_controlid,varname.c_str());
     ReadRect(x,y,width,height);
-    wxFprintf(m_wxr,_T("%i,%i,%i,%i,"),x,y,width,height);
-    wxFprintf(m_wxr,_T(" 1, 1, 10,\\\n"));
-    wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+    wxFprintf(m_wxr,wxT("%i,%i,%i,%i,"),x,y,width,height);
+    wxFprintf(m_wxr,wxT(" 1, 1, 10,\\\n"));
+    wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 }
 
 /*
@@ -747,11 +747,11 @@ void rc2wxr::ParseProgressBar(wxString W
     while (ReadOrs(tok))
         ;
 
-    wxFprintf(m_wxr,_T("  control = [%i,wxGauge,'','wxGA_HORIZONTAL','%s',"),m_controlid,varname.c_str());
+    wxFprintf(m_wxr,wxT("  control = [%i,wxGauge,'','wxGA_HORIZONTAL','%s',"),m_controlid,varname.c_str());
     ReadRect(x,y,width,height);
-    wxFprintf(m_wxr,_T("%i,%i,%i,%i,"),x,y,width,height);
-    wxFprintf(m_wxr,_T(" 0, 10,\\\n"));
-    wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+    wxFprintf(m_wxr,wxT("%i,%i,%i,%i,"),x,y,width,height);
+    wxFprintf(m_wxr,wxT(" 0, 10,\\\n"));
+    wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
 }
 
 
@@ -773,25 +773,25 @@ void rc2wxr::ParseCtrlButton(wxString la
 
     m_controlid++;
 
-    if (tok==_T("BS_AUTOCHECKBOX"))
+    if (tok==wxT("BS_AUTOCHECKBOX"))
     {
-        wxFprintf(m_wxr,_T("  control = [%i,wxCheckBox,'%s','0','%s',"),m_controlid,label.c_str(),varname.c_str());
+        wxFprintf(m_wxr,wxT("  control = [%i,wxCheckBox,'%s','0','%s',"),m_controlid,label.c_str(),varname.c_str());
         while (ReadOrs(tok))
             ;
 
         ReadRect(x,y,width,height);
-        wxFprintf(m_wxr,_T("%i,%i,%i,%i,0,\\\n"),x,y,width,height);
-        wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+        wxFprintf(m_wxr,wxT("%i,%i,%i,%i,0,\\\n"),x,y,width,height);
+        wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
     }
 
-    if (tok==_T("BS_AUTORADIOBUTTON"))
+    if (tok==wxT("BS_AUTORADIOBUTTON"))
     {
-        wxFprintf(m_wxr,_T("  control = [%i,wxRadioButton,'%s','0','%s',"),m_controlid,label.c_str(),varname.c_str());
+        wxFprintf(m_wxr,wxT("  control = [%i,wxRadioButton,'%s','0','%s',"),m_controlid,label.c_str(),varname.c_str());
         while(ReadOrs(tok))
             ;
 
         ReadRect(x,y,width,height);
-        wxFprintf(m_wxr,_T("%i,%i,%i,%i,0,\\\n"),x,y,width,height);
-        wxFprintf(m_wxr,_T("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
+        wxFprintf(m_wxr,wxT("%i,%i,%i,%i,0,\\\n"),x,y,width,height);
+        wxFprintf(m_wxr,wxT("[8, 'wxSWISS', 'wxNORMAL', 'wxNORMAL', 0, 'MS Sans Serif']],\\\n"));
     }
 }
--- contrib/utils/convertrc/rc2xml.cpp-orig	2009-06-18 19:11:36.961909000 -0500
+++ contrib/utils/convertrc/rc2xml.cpp	2009-06-18 19:11:43.988717000 -0500
@@ -67,7 +67,7 @@ bool rc2xml::Convert(wxString rcfile, wx
 
     m_workingpath=wxPathOnly(rcfile);
 
-    m_targetpath=wxPathOnly(xmlfile) + _T("\\");
+    m_targetpath=wxPathOnly(xmlfile) + wxT("\\");
 
 
 
@@ -75,15 +75,15 @@ bool rc2xml::Convert(wxString rcfile, wx
 
 
     bool result;
-    result=m_xmlfile.Open(xmlfile.c_str(),_T("w+t"));
-    wxASSERT_MSG(result,_T("Couldn't create XML file"));
+    result=m_xmlfile.Open(xmlfile.c_str(),wxT("w+t"));
+    wxASSERT_MSG(result,wxT("Couldn't create XML file"));
     if (!result)
         return false;
 
 
 /* Write Basic header for XML file */
-    m_xmlfile.Write(_T("<?xml version=\"1.0\" ?>\n"));
-    m_xmlfile.Write(_T("<resource>\n"));
+    m_xmlfile.Write(wxT("<?xml version=\"1.0\" ?>\n"));
+    m_xmlfile.Write(wxT("<resource>\n"));
 
 //Read resource.h
     ParseResourceHeader();
@@ -94,7 +94,7 @@ bool rc2xml::Convert(wxString rcfile, wx
 //Read in dialogs, toolbars,menus
     SecondPass();
 
-    m_xmlfile.Write(_T("</resource>\n"));
+    m_xmlfile.Write(wxT("</resource>\n"));
     m_xmlfile.Close();
     m_rc.Close();
     wxMessageBox(_("Conversion complete."), _("Done"),
@@ -114,8 +114,8 @@ microsoft reuses the keyword DIALOG for 
 */
     token=PeekToken();
 //Microsoft notation?
-    while ((token==_T("DISCARDABLE"))
-            ||(token==_T("LOADONCALL"))||(token==_T("MOVEABLE")))
+    while ((token==wxT("DISCARDABLE"))
+            ||(token==wxT("LOADONCALL"))||(token==wxT("MOVEABLE")))
     {
     token=GetToken();
     token=PeekToken();
@@ -132,37 +132,37 @@ microsoft reuses the keyword DIALOG for 
     wxString title;
     wxString ptsize,face;
 
-    m_xmlfile.Write(_T("\t<object class=\"wxDialog\""));
+    m_xmlfile.Write(wxT("\t<object class=\"wxDialog\""));
     //Avoid duplicate names this way
-    dlgname.Replace(_T("IDD_"),_T("DLG_"));
+    dlgname.Replace(wxT("IDD_"),wxT("DLG_"));
     WriteBasicInfo(x,y,width,height,dlgname);
     WriteTitle(title);
 
 
-    while ((token!=_T("BEGIN"))&(token!=_T("{")))
+    while ((token!=wxT("BEGIN"))&(token!=wxT("{")))
     {
-        if (token==_T("CAPTION"))
+        if (token==wxT("CAPTION"))
         {
             title=GetQuoteField();
         }
 
 //TODO fix face name so that it is cross platform name
 //  FONT 8, "MS Sans Serif"
-    if (token==_T("FONT"))
+    if (token==wxT("FONT"))
     {
         ptsize=GetToken();
         face=GetQuoteField();
-        m_xmlfile.Write(_T("\t\t<font>\n"));
-        m_xmlfile.Write(_T("\t\t\t<size>")+ptsize+_T("</size>\n"));
-        m_xmlfile.Write(_T("\t\t\t<face>")+face+_T("</face>\n"));
-        m_xmlfile.Write(_T("\t\t</font>\n"));
+        m_xmlfile.Write(wxT("\t\t<font>\n"));
+        m_xmlfile.Write(wxT("\t\t\t<size>")+ptsize+wxT("</size>\n"));
+        m_xmlfile.Write(wxT("\t\t\t<face>")+face+wxT("</face>\n"));
+        m_xmlfile.Write(wxT("\t\t</font>\n"));
     }
 
     token=GetToken();
     }
 
     ParseControls();
-    m_xmlfile.Write(_T("\t</object>\n"));
+    m_xmlfile.Write(wxT("\t</object>\n"));
 }
 
 /*
@@ -179,60 +179,60 @@ void rc2xml::ParseControls()
     wxString label,varname;
 
     token=GetToken();
-    while ((token!=_T("END"))&(token!=_T("}")))
+    while ((token!=wxT("END"))&(token!=wxT("}")))
         {
-        if (token==_T("AUTOCHECKBOX"))
+        if (token==wxT("AUTOCHECKBOX"))
            {
             label=GetQuoteField();
             varname=GetToken();
             ParseCheckBox(label,varname);
             }
         else
-        if (token==_T("AUTORADIOBUTTON"))
+        if (token==wxT("AUTORADIOBUTTON"))
            {
             label=GetQuoteField();
             varname=GetToken();
             ParseRadioButton(label,varname);
            }
         else
-        if (token==_T("LTEXT"))
+        if (token==wxT("LTEXT"))
            {
             label=GetQuoteField();
             varname=GetToken();
             ParseStaticText(label,varname);
             }
-        else if (token==_T("EDITTEXT"))
+        else if (token==wxT("EDITTEXT"))
            {
             varname=GetToken();
             ParseTextCtrl(varname);
             }
-        else if ((token==_T("PUSHBUTTON"))||(token==_T("DEFPUSHBUTTON")))
+        else if ((token==wxT("PUSHBUTTON"))||(token==wxT("DEFPUSHBUTTON")))
            {
             label=GetQuoteField();
             varname=GetToken();
             ParsePushButton(label,varname);
             }
-        else if (token==_T("GROUPBOX"))
+        else if (token==wxT("GROUPBOX"))
            {
             label=GetQuoteField();
             varname=GetToken();
             ParseGroupBox(label,varname);
             }
-        else if (token==_T("COMBOBOX"))
+        else if (token==wxT("COMBOBOX"))
             {
             varname=GetToken();
             ParseComboBox(varname);
              }
-        else if (token==_T("CONTROL"))
+        else if (token==wxT("CONTROL"))
             ParseControlMS();
-        else if (token==_T("LISTBOX"))
+        else if (token==wxT("LISTBOX"))
            {
             varname=GetToken();
             ParseListBox(varname);
             }
-        else if (token==_T("ICON"))
+        else if (token==wxT("ICON"))
             ParseIconStatic();
-        else if (token==_T("SCROLLBAR"))
+        else if (token==wxT("SCROLLBAR"))
             ParseScrollBar();
         token=GetToken();
         }
@@ -251,9 +251,9 @@ void rc2xml::ParseStaticText(wxString ph
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxStaticText\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxStaticText\""));
     WriteBasicInfo(x,y,width,height,varname);WriteLabel(phrase);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 //EDITTEXT        IDC_RADIUS,36,65,40,14,ES_AUTOHSCROLL
@@ -271,9 +271,9 @@ void rc2xml::ParseTextCtrl(wxString varn
     ReadRect(x,y,width,height);
 //TODO
 //style=GetToken();
-    m_xmlfile.Write(_T("\t\t<object class=\"wxTextCtrl\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxTextCtrl\""));
     WriteBasicInfo(x,y,width,height,varname);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 //AUTOCHECKBOX "&log.", ID_XLOG, 25, 24, 21, 12
@@ -289,10 +289,10 @@ void rc2xml::ParseCheckBox(wxString phra
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxCheckBox\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxCheckBox\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteLabel(phrase);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 //AUTORADIOBUTTON "&text", ID_SW10, 13, 12, 68, 10, BS_AUTORADIOBUTTON | WS_GROUP
@@ -305,14 +305,14 @@ void rc2xml::ParseRadioButton(wxString p
     if (ReadRect(x,y,width,height))
         if (GotOrs==false)
       ReadOrs(token);
-    if (token.Find(_T("WS_GROUP")) != wxNOT_FOUND)
-        style += _T("wxRB_GROUP");
+    if (token.Find(wxT("WS_GROUP")) != wxNOT_FOUND)
+        style += wxT("wxRB_GROUP");
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxRadioButton\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxRadioButton\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteLabel(phrase);
     WriteStyle(style);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 
@@ -330,10 +330,10 @@ void rc2xml::ParsePushButton(wxString ph
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxButton\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxButton\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteLabel(phrase);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 
@@ -366,10 +366,10 @@ void rc2xml::ParseGroupBox(wxString phra
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxStaticBox\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxStaticBox\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteLabel(phrase);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 }
 
 bool rc2xml::ReadRect(int & x, int & y, int & width, int & height)
@@ -538,15 +538,15 @@ void rc2xml::ParseComboBox(wxString varn
         if (GotOrs==false)
       ReadOrs(token);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxComboBox\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxComboBox\""));
     WriteBasicInfo(x,y,width,height,varname);
-    if (token.Find(_T("CBS_SIMPLE")) != wxNOT_FOUND)
-        WriteStyle(_T("wxCB_SIMPLE"));
-    if (token.Find(_T("CBS_SORT")) != wxNOT_FOUND)
-        WriteStyle(_T("wxCB_SORT"));
-    if (token.Find(_T("CBS_DISABLENOSCROLL")) != wxNOT_FOUND)
-        WriteStyle(_T("wxLB_ALWAYS_SB"));
-    m_xmlfile.Write(_T("\n\t\t</object>\n"));
+    if (token.Find(wxT("CBS_SIMPLE")) != wxNOT_FOUND)
+        WriteStyle(wxT("wxCB_SIMPLE"));
+    if (token.Find(wxT("CBS_SORT")) != wxNOT_FOUND)
+        WriteStyle(wxT("wxCB_SORT"));
+    if (token.Find(wxT("CBS_DISABLENOSCROLL")) != wxNOT_FOUND)
+        WriteStyle(wxT("wxLB_ALWAYS_SB"));
+    m_xmlfile.Write(wxT("\n\t\t</object>\n"));
 
 }
 
@@ -555,26 +555,26 @@ void rc2xml::ParseMenu(wxString varname)
     wxString token=wxEmptyString;
 
     //Write menubar to xml file
-    m_xmlfile.Write(_T("\t<object class=\"wxMenuBar\""));
+    m_xmlfile.Write(wxT("\t<object class=\"wxMenuBar\""));
     //Avoid duplicate names this way
-    varname.Replace(_T("IDR_"),_T("MB_"));
+    varname.Replace(wxT("IDR_"),wxT("MB_"));
     WriteName(varname);
-    m_xmlfile.Write(_T(">\n"));
+    m_xmlfile.Write(wxT(">\n"));
 
-    while ((token!=_T("BEGIN"))&(token!=_T("{")))
+    while ((token!=wxT("BEGIN"))&(token!=wxT("{")))
         token=GetToken();
 
-    while ((token!=_T("END"))&(token!=_T("}")))
+    while ((token!=wxT("END"))&(token!=wxT("}")))
     {
     token=GetToken();
     token.MakeUpper();
 
-    if (token==_T("POPUP"))
+    if (token==wxT("POPUP"))
         {
         ParsePopupMenu();
         }
     }
-    m_xmlfile.Write(_T("\t</object>\n"));
+    m_xmlfile.Write(wxT("\t</object>\n"));
 }
 
 void rc2xml::ParsePopupMenu()
@@ -591,27 +591,27 @@ void rc2xml::ParsePopupMenu()
 
 //Write Menu item
 //Generate a fake name since RC menus don't have one
-    name << _T("Menu_") << menucount;
-    m_xmlfile.Write(_T("\t\t<object class=\"wxMenu\""));
+    name << wxT("Menu_") << menucount;
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxMenu\""));
     WriteName(name);
-    m_xmlfile.Write(_T(">\n"));
+    m_xmlfile.Write(wxT(">\n"));
     WriteLabel(token);
 
-    while ((token!=_T("BEGIN"))&(token!=_T("{")))
+    while ((token!=wxT("BEGIN"))&(token!=wxT("{")))
         token=GetToken();
 
-    while ((token!=_T("END"))&(token!=_T("}")))
+    while ((token!=wxT("END"))&(token!=wxT("}")))
     {
     token=GetToken();
     token.MakeUpper();
 
-    if (token==_T("POPUP"))
+    if (token==wxT("POPUP"))
         ParsePopupMenu();
 
-    if (token==_T("MENUITEM"))
+    if (token==wxT("MENUITEM"))
         ParseMenuItem();
     }
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 wxString rc2xml::PeekToken()
@@ -628,7 +628,7 @@ void rc2xml::ParseControlMS()
 {
     wxString token = PeekToken();
 
-    if (token.Contains(_T("\"")))
+    if (token.Contains(wxT("\"")))
         ParseNormalMSControl();
     else
         ParseWeirdMSControl();
@@ -642,18 +642,18 @@ void rc2xml::ParseSlider(wxString WXUNUS
 {
     wxString token,style;
     ReadOrs(token);
-    if (token.Find(_T("TBS_VERT"))!=wxNOT_FOUND)
-        style+=_T("wxSL_VERTICAL");
+    if (token.Find(wxT("TBS_VERT"))!=wxNOT_FOUND)
+        style+=wxT("wxSL_VERTICAL");
     //MFC RC Default is horizontal
     else
-        style+=_T("wxSL_HORIZONTAL");
+        style+=wxT("wxSL_HORIZONTAL");
 
     int x,y,width,height;
     ReadRect(x,y,width,height);
-    m_xmlfile.Write(_T("\t\t<object class=\"wxSlider\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxSlider\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteStyle(style);
-    m_xmlfile.Write(_T("\n\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t</object>\n"));
 
 }
 /*
@@ -669,10 +669,10 @@ void rc2xml::ParseProgressBar(wxString W
     ReadRect(x,y,width,height);
 
 //Always horizontal in MFC
-    m_xmlfile.Write(_T("\t\t<object class=\"wxGauge\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxGauge\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteStyle(style);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 }
 
 bool rc2xml::ReadOrs(wxString & orstring)
@@ -684,7 +684,7 @@ bool rc2xml::ReadOrs(wxString & orstring
         return false;
     orstring=GetToken();
 
-    while(PeekToken()==_T("|"))
+    while(PeekToken()==wxT("|"))
     {
     //Grab |
     orstring+=GetToken();
@@ -702,12 +702,12 @@ void rc2xml::ParseCtrlButton(wxString la
     ReadOrs(token);
     m_rc.Seek(p);
 
-    if (token.Find(_T("BS_AUTOCHECKBOX"))!=wxNOT_FOUND)
+    if (token.Find(wxT("BS_AUTOCHECKBOX"))!=wxNOT_FOUND)
         ParseCheckBox(label, varname);
-    else if ((token.Find(_T("BS_AUTORADIOBUTTON"))!=wxNOT_FOUND)||
-             (token.Find(_T("BS_RADIOBUTTON"))!=wxNOT_FOUND))
+    else if ((token.Find(wxT("BS_AUTORADIOBUTTON"))!=wxNOT_FOUND)||
+             (token.Find(wxT("BS_RADIOBUTTON"))!=wxNOT_FOUND))
         ParseRadioButton(label, varname);
-    else if (token.Find(_T("BS_GROUPBOX"))!=wxNOT_FOUND)
+    else if (token.Find(wxT("BS_GROUPBOX"))!=wxNOT_FOUND)
         ParseGroupBox(label, varname);
     else  // if ((token.Find("BS_PUSHBUTTON")!=wxNOT_FOUND)||
 //                (token.Find("BS_DEFPUSHBUTTON")!=wxNOT_FOUND))
@@ -717,21 +717,21 @@ void rc2xml::ParseCtrlButton(wxString la
 void rc2xml::WriteSize(int width, int height)
 {
     wxString msg;
-    msg << _T(" <size>") << width << _T(",") << height << _T("d</size>");
+    msg << wxT(" <size>") << width << wxT(",") << height << wxT("d</size>");
     m_xmlfile.Write(msg);
 }
 
 void rc2xml::WritePosition(int x, int y)
 {
     wxString msg;
-    msg << _T(" <pos>") << x << _T(",") << y << _T("d</pos>");
+    msg << wxT(" <pos>") << x << wxT(",") << y << wxT("d</pos>");
     m_xmlfile.Write(msg);
 }
 
 void rc2xml::WriteTitle(wxString title)
 {
     wxString msg;
-    msg=_T("\t\t<title>")+title+_T("</title>\n");
+    msg=wxT("\t\t<title>")+title+wxT("</title>\n");
     m_xmlfile.Write(msg);
 }
 
@@ -742,72 +742,72 @@ void rc2xml::WriteName(wxString name)
 name=LookUpId(name);
 //Replace common MS ids with wxWidgets ids
 //I didn't do everyone of them
-    if (name==_T("IDOK"))
-        name=_T("wxID_OK");
-    else if (name==_T("IDCANCEL"))
-        name=_T("wxID_CANCEL");
-    else if (name==_T("IDAPPLY"))
-        name=_T("wxID_APPLY");
-    else if (name==_T("ID_FILE_OPEN"))
-        name=_T("wxID_OPEN");
-    else if (name==_T("ID_FILE_CLOSE"))
-        name=_T("wxID_CLOSE");
-    else if (name==_T("ID_FILE_SAVE"))
-        name=_T("wxID_SAVE");
-    else if (name==_T("ID_FILE_SAVE_AS"))
-        name=_T("wxID_SAVEAS");
-    else if (name==_T("ID_APP_EXIT"))
-        name=_T("wxID_EXIT");
-    else if (name==_T("ID_FILE_PRINT"))
-        name=_T("wxID_PRINT");
-    else if (name==_T("ID_FILE_PRINT_PREVIEW"))
-        name=_T("wxID_PREVIEW");
-    else if (name==_T("ID_FILE_PRINT_SETUP"))
-        name=_T("wxID_PRINT_SETUP");
-    else if (name==_T("ID_APP_ABOUT"))
-        name=_T("wxID_ABOUT");
-    else if (name==_T("ID_EDIT_UNDO"))
-        name=_T("wxID_UNDO");
-    else if (name==_T("ID_EDIT_CUT"))
-        name=_T("wxID_CUT");
-    else if (name==_T("ID_EDIT_COPY"))
-        name=_T("wxID_COPY");
-    else if (name==_T("ID_EDIT_PASTE"))
-        name=_T("wxID_PASTE");
-    else if (name==_T("IDYES"))
-        name=_T("wxID_YES");
-    else if (name==_T("IDNO"))
-        name=_T("wxID_NO");
-    else if (name==_T("IDHELP"))
-        name=_T("wxID_HELP");
+    if (name==wxT("IDOK"))
+        name=wxT("wxID_OK");
+    else if (name==wxT("IDCANCEL"))
+        name=wxT("wxID_CANCEL");
+    else if (name==wxT("IDAPPLY"))
+        name=wxT("wxID_APPLY");
+    else if (name==wxT("ID_FILE_OPEN"))
+        name=wxT("wxID_OPEN");
+    else if (name==wxT("ID_FILE_CLOSE"))
+        name=wxT("wxID_CLOSE");
+    else if (name==wxT("ID_FILE_SAVE"))
+        name=wxT("wxID_SAVE");
+    else if (name==wxT("ID_FILE_SAVE_AS"))
+        name=wxT("wxID_SAVEAS");
+    else if (name==wxT("ID_APP_EXIT"))
+        name=wxT("wxID_EXIT");
+    else if (name==wxT("ID_FILE_PRINT"))
+        name=wxT("wxID_PRINT");
+    else if (name==wxT("ID_FILE_PRINT_PREVIEW"))
+        name=wxT("wxID_PREVIEW");
+    else if (name==wxT("ID_FILE_PRINT_SETUP"))
+        name=wxT("wxID_PRINT_SETUP");
+    else if (name==wxT("ID_APP_ABOUT"))
+        name=wxT("wxID_ABOUT");
+    else if (name==wxT("ID_EDIT_UNDO"))
+        name=wxT("wxID_UNDO");
+    else if (name==wxT("ID_EDIT_CUT"))
+        name=wxT("wxID_CUT");
+    else if (name==wxT("ID_EDIT_COPY"))
+        name=wxT("wxID_COPY");
+    else if (name==wxT("ID_EDIT_PASTE"))
+        name=wxT("wxID_PASTE");
+    else if (name==wxT("IDYES"))
+        name=wxT("wxID_YES");
+    else if (name==wxT("IDNO"))
+        name=wxT("wxID_NO");
+    else if (name==wxT("IDHELP"))
+        name=wxT("wxID_HELP");
 
-    m_xmlfile.Write(_T(" name= \"")+name+_T("\""));
+    m_xmlfile.Write(wxT(" name= \"")+name+wxT("\""));
 }
 
 void rc2xml::WriteLabel(wxString label)
 {
-    label.Replace(_T("&"),_T("$"));
+    label.Replace(wxT("&"),wxT("$"));
     // changes by MS, handle '<' '>' characters within a label.
-    label.Replace(_T("<"),_T("&lt;"));
-    label.Replace(_T(">"),_T("&gt;"));
-    m_xmlfile.Write(_T("\t\t\t<label>")+label+_T("</label>\n"));
+    label.Replace(wxT("<"),wxT("&lt;"));
+    label.Replace(wxT(">"),wxT("&gt;"));
+    m_xmlfile.Write(wxT("\t\t\t<label>")+label+wxT("</label>\n"));
 }
 
 void rc2xml::WriteBasicInfo(int x, int y, int width, int height, wxString name)
 {
     WriteName(name);
-    m_xmlfile.Write(_T(">\n"));
-    m_xmlfile.Write(_T("\t\t\t"));
+    m_xmlfile.Write(wxT(">\n"));
+    m_xmlfile.Write(wxT("\t\t\t"));
     WritePosition(x,y);
     WriteSize(width,height);
-    m_xmlfile.Write(_T("\n"));
+    m_xmlfile.Write(wxT("\n"));
 }
 
 void rc2xml::WriteStyle(wxString style)
 {
     if (style.Length()==0)
         return;
-    m_xmlfile.Write(_T("\t\t\t<style>")+style+_T("</style>\n"));
+    m_xmlfile.Write(wxT("\t\t\t<style>")+style+wxT("</style>\n"));
 }
 /*
     LISTBOX         IDC_LIST1,16,89,48,40,LBS_SORT | LBS_MULTIPLESEL |
@@ -825,9 +825,9 @@ void rc2xml::ParseListBox(wxString varna
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxListBox\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxListBox\""));
     WriteBasicInfo(x,y,width,height,varname);
-    m_xmlfile.Write(_T("\n\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t</object>\n"));
 
 }
 /*
@@ -843,11 +843,11 @@ void rc2xml::ParseRichEdit(wxString WXUN
     ReadRect(x,y,width,height);
     wxString style;
 //Make it a rich text control
-    style+=_T("wxTE_MULTILINE ");
-    m_xmlfile.Write(_T("\t\t<object class=\"wxTextCtrl\""));
+    style+=wxT("wxTE_MULTILINE ");
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxTextCtrl\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteStyle(style);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 /*
@@ -859,18 +859,18 @@ void rc2xml::ParseSpinCtrl(wxString WXUN
     wxString token,style;
 
     ReadOrs(token);
-    if (token.Find(_T("UDS_HORZ"))!=wxNOT_FOUND)
-        style=_T("wxSP_HORIZONTAL");
+    if (token.Find(wxT("UDS_HORZ"))!=wxNOT_FOUND)
+        style=wxT("wxSP_HORIZONTAL");
     //MFC default
     else
-        style=_T("wxSP_VERTICAL");
+        style=wxT("wxSP_VERTICAL");
 
     int x,y,width,height;
     ReadRect(x,y,width,height);
-    m_xmlfile.Write(_T("\t\t<object class=\"wxSpinButton\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxSpinButton\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteStyle(style);
-    m_xmlfile.Write(_T("\n\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t</object>\n"));
 
 }
 
@@ -880,11 +880,11 @@ void rc2xml::FirstPass()
     while (!m_done)
         {
         token=GetToken();
-        if (token==_T("BITMAP"))
+        if (token==wxT("BITMAP"))
             ParseBitmap(prevtok);
-        else if (token==_T("STRINGTABLE"))
+        else if (token==wxT("STRINGTABLE"))
             ParseStringTable(prevtok);
-        else if (token==_T("ICON"))
+        else if (token==wxT("ICON"))
             ParseIcon(prevtok);
 
         prevtok=token;
@@ -898,7 +898,7 @@ void rc2xml::ParseBitmap(wxString varnam
 
     token=PeekToken();
     //Microsoft notation?
-    if (token==_T("DISCARDABLE"))
+    if (token==wxT("DISCARDABLE"))
         {
         token=GetToken();
         token=PeekToken();
@@ -916,11 +916,11 @@ void rc2xml::SecondPass()
     while (!m_done)
         {
         token=GetToken();
-        if ((token==_T("DIALOG"))||(token==_T("DIALOGEX")))
+        if ((token==wxT("DIALOG"))||(token==wxT("DIALOGEX")))
             ParseDialog(prevtok);
-        else if (token==_T("MENU"))
+        else if (token==wxT("MENU"))
             ParseMenu(prevtok);
-        else if (token==_T("TOOLBAR"))
+        else if (token==wxT("TOOLBAR"))
             ParseToolBar(prevtok);
 
         prevtok=token;
@@ -932,23 +932,23 @@ void rc2xml::ParseToolBar(wxString varna
 {
     wxString token;
     token=GetToken();
-    wxASSERT_MSG(token==_T("DISCARDABLE"),_T("Error in toolbar parsing"));
+    wxASSERT_MSG(token==wxT("DISCARDABLE"),wxT("Error in toolbar parsing"));
 //Look up bitmap for toolbar and load
     wxNode *node=m_bitmaplist->Find(LookUpId(varname));
     wxString *bitmappath;
     bitmappath=(wxString *)node->GetData();
     wxBitmap bitmap;
     if (!bitmap.LoadFile(*bitmappath,wxBITMAP_TYPE_BMP ))
-        wxLogError(_T("Unable to load bitmap:")+*bitmappath);
+        wxLogError(wxT("Unable to load bitmap:")+*bitmappath);
 
 //Write toolbar to xml file
-    m_xmlfile.Write(_T("\t<object class=\"wxToolBar\""));
+    m_xmlfile.Write(wxT("\t<object class=\"wxToolBar\""));
 //Avoid duplicate names this way
-    varname.Replace(_T("IDR_"),_T("TB_"));
+    varname.Replace(wxT("IDR_"),wxT("TB_"));
     WriteName(varname);
-    m_xmlfile.Write(_T(">\n"));
+    m_xmlfile.Write(wxT(">\n"));
     wxString style;
-    style+=_T("wxTB_FLAT");
+    style+=wxT("wxTB_FLAT");
     WriteStyle(style);
 
 
@@ -960,39 +960,39 @@ void rc2xml::ParseToolBar(wxString varna
     int c=0;
     wxString buttonname,msg,tip,longhelp;
     token=GetToken();
-    while ((token!=_T("BEGIN"))&(token!=_T("{")))
+    while ((token!=wxT("BEGIN"))&(token!=wxT("{")))
         token=GetToken();
 
-    while ((token!=_T("END"))&(token!=_T("}")))
+    while ((token!=wxT("END"))&(token!=wxT("}")))
         {
-        if (token==_T("BUTTON"))
+        if (token==wxT("BUTTON"))
             {
             buttonname=GetToken();
-            m_xmlfile.Write(_T("\t\t\t<object class=\"tool\""));
+            m_xmlfile.Write(wxT("\t\t\t<object class=\"tool\""));
             WriteName(buttonname);
-            m_xmlfile.Write(_T(">\n"));
+            m_xmlfile.Write(wxT(">\n"));
     //Write tool tip if any
             if (LookUpString(buttonname,msg))
                 {
                 SplitHelp(msg,tip,longhelp);
-                m_xmlfile.Write(_T("\t\t\t\t<tooltip>")+tip+_T("</tooltip>\n"));
-                m_xmlfile.Write(_T("\t\t<longhelp>")+longhelp+_T("</longhelp>\n"));
+                m_xmlfile.Write(wxT("\t\t\t\t<tooltip>")+tip+wxT("</tooltip>\n"));
+                m_xmlfile.Write(wxT("\t\t<longhelp>")+longhelp+wxT("</longhelp>\n"));
                 }
             //Make a bitmap file name
             buttonname=CleanName(buttonname);
-            buttonname+=_T(".bmp");
-            m_xmlfile.Write(_T("\t\t\t\t<bitmap>")+buttonname+_T("</bitmap>\n"));
+            buttonname+=wxT(".bmp");
+            m_xmlfile.Write(wxT("\t\t\t\t<bitmap>")+buttonname+wxT("</bitmap>\n"));
         WriteToolButton(buttonname,c,width,height,bitmap);
-        m_xmlfile.Write(_T("\t\t\t</object>\n"));
+        m_xmlfile.Write(wxT("\t\t\t</object>\n"));
         c++;
         }
-    else if (token==_T("SEPARATOR"))
+    else if (token==wxT("SEPARATOR"))
     {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"separator\"/>\n"));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"separator\"/>\n"));
     }
     token=GetToken();
     }
-    m_xmlfile.Write(_T("\t</object>\n"));
+    m_xmlfile.Write(wxT("\t</object>\n"));
 }
 
 //Extract bitmaps from larger toolbar bitmap
@@ -1010,12 +1010,12 @@ void rc2xml::ParseStringTable(wxString W
 {
     wxString token;
     token=GetToken();
-    while ((token!=_T("BEGIN"))&(token!=_T("{")))
+    while ((token!=wxT("BEGIN"))&(token!=wxT("{")))
         token=GetToken();
     token=GetToken();
     wxString *msg;
 
-    while ((token!=_T("END"))&(token!=_T("}")))
+    while ((token!=wxT("END"))&(token!=wxT("}")))
     {
         msg=new wxString;
         *msg=GetStringQuote();
@@ -1040,7 +1040,7 @@ bool rc2xml::LookUpString(wxString strid
 bool rc2xml::SplitHelp(wxString msg, wxString &shorthelp, wxString &longhelp)
 {
     int spot;
-    spot=msg.Find(_T("\\n"));
+    spot=msg.Find(wxT("\\n"));
     if (spot==wxNOT_FOUND)
         {
         shorthelp=msg;
@@ -1057,9 +1057,9 @@ void rc2xml::ParseMenuItem()
 {
     wxString token,name,msg,tip,longhelp;
 //int spot;
-    if (PeekToken()==_T("SEPARATOR"))
+    if (PeekToken()==wxT("SEPARATOR"))
         {
-        m_xmlfile.Write(_T("\t\t\t<object class=\"separator\"/>\n"));
+        m_xmlfile.Write(wxT("\t\t\t<object class=\"separator\"/>\n"));
         return;
         }
 
@@ -1068,40 +1068,40 @@ void rc2xml::ParseMenuItem()
 //Remove \t because it causes problems
 //spot=token.First("\\t");
 //token=token.Left(spot);
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxMenuItem\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxMenuItem\""));
     WriteName(name);
-    m_xmlfile.Write(_T(">\n"));
+    m_xmlfile.Write(wxT(">\n"));
     WriteLabel(token);
 //Look up help if any listed in stringtable
 //can't assume numbers correlate, restrict to string identifiers
     if ((!name.IsNumber())&&(LookUpString(name,msg)))
         {
         SplitHelp(msg,tip,longhelp);
-        m_xmlfile.Write(_T("\t\t\t<help>")
-            +longhelp+_T("</help>\n"));
+        m_xmlfile.Write(wxT("\t\t\t<help>")
+            +longhelp+wxT("</help>\n"));
         }
 //look for extra attributes like checked and break
     wxString ptoken;
     ptoken=PeekToken();
     ptoken.MakeUpper();
-    while ((ptoken!=_T("MENUITEM"))&(ptoken!=_T("POPUP"))&(ptoken!=_T("END")))
+    while ((ptoken!=wxT("MENUITEM"))&(ptoken!=wxT("POPUP"))&(ptoken!=wxT("END")))
         {
         token=GetToken();
         ptoken.MakeUpper();
-        if (token==_T("CHECKED"))
-            m_xmlfile.Write(_T("\t\t\t<checkable>1</checkable>\n"));
-        else if (token==_T("MENUBREAK"))
+        if (token==wxT("CHECKED"))
+            m_xmlfile.Write(wxT("\t\t\t<checkable>1</checkable>\n"));
+        else if (token==wxT("MENUBREAK"))
             ;
 //m_xmlfile.Write("\t\t\t</break>\n");
-        else if (token==_T("GRAYED"))
+        else if (token==wxT("GRAYED"))
             ;
         else
-            wxLogError(_T("Unknown Menu Item token:")+token);
+            wxLogError(wxT("Unknown Menu Item token:")+token);
 
         ptoken=PeekToken();
         ptoken.MakeUpper();
         }
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 
 }
 
@@ -1111,7 +1111,7 @@ void rc2xml::ParseIconStatic()
     wxString token;
     wxString varname,iconname;
     token = PeekToken();
-    if (token.Contains(_T("\"")))
+    if (token.Contains(wxT("\"")))
         iconname = GetQuoteField();
     else
     iconname=GetToken();
@@ -1121,11 +1121,11 @@ void rc2xml::ParseIconStatic()
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxStaticBitmap\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxStaticBitmap\""));
     WriteBasicInfo(x,y,width,height,varname);
 //Save icon as a bitmap
     WriteIcon(iconname);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 //IDR_MAINFRAME           ICON    DISCARDABLE     "res\\mfcexample.ico"
@@ -1145,14 +1145,14 @@ void rc2xml::ParseIcon(wxString varname)
 wxString rc2xml::CleanName(wxString name)
 {
     name.MakeLower();
-    name.Replace(_T("id_"),wxEmptyString);
-    name.Replace(_T("idr_"),wxEmptyString);
-    name.Replace(_T("idb_"),wxEmptyString);
-    name.Replace(_T("idc_"),wxEmptyString);
+    name.Replace(wxT("id_"),wxEmptyString);
+    name.Replace(wxT("idr_"),wxEmptyString);
+    name.Replace(wxT("idb_"),wxEmptyString);
+    name.Replace(wxT("idc_"),wxEmptyString);
 
-    name.Replace(_T(".ico"),wxEmptyString);
+    name.Replace(wxT(".ico"),wxEmptyString);
 
-    name.Replace(_T(".bmp"),wxEmptyString);
+    name.Replace(wxT(".bmp"),wxEmptyString);
     return name;
 }
 // And the award for most messed up control goes to...
@@ -1167,10 +1167,10 @@ void rc2xml::ParseStaticBitmap(wxString 
     int x,y,width,height;
     ReadRect(x,y,width,height);
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxStaticBitmap\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxStaticBitmap\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteBitmap(bitmapname);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 
@@ -1181,38 +1181,38 @@ void rc2xml::ParseNormalMSControl()
     wxString kindctrl=GetQuoteField();
     kindctrl.MakeUpper();
 
-    if (kindctrl==_T("MSCTLS_UPDOWN32"))
+    if (kindctrl==wxT("MSCTLS_UPDOWN32"))
         ParseSpinCtrl(label,varname);
-    else if (kindctrl==_T("MSCTLS_TRACKBAR32"))
+    else if (kindctrl==wxT("MSCTLS_TRACKBAR32"))
         ParseSlider(label,varname);
-    else if (kindctrl==_T("MSCTLS_PROGRESS32"))
+    else if (kindctrl==wxT("MSCTLS_PROGRESS32"))
         ParseProgressBar(label,varname);
-    else if (kindctrl==_T("SYSTREEVIEW32"))
+    else if (kindctrl==wxT("SYSTREEVIEW32"))
         ParseTreeCtrl(label,varname);
-    else if (kindctrl==_T("SYSMONTHCAL32"))
+    else if (kindctrl==wxT("SYSMONTHCAL32"))
         ParseCalendar(label,varname);
-    else if (kindctrl==_T("SYSLISTVIEW32"))
+    else if (kindctrl==wxT("SYSLISTVIEW32"))
         ParseListCtrl(label,varname);
-    else if (kindctrl==_T("BUTTON"))
+    else if (kindctrl==wxT("BUTTON"))
         ParseCtrlButton(label,varname);
-    else if (kindctrl==_T("RICHEDIT"))
+    else if (kindctrl==wxT("RICHEDIT"))
         ParseRichEdit(label,varname);
-    else if (kindctrl==_T("STATIC"))
+    else if (kindctrl==wxT("STATIC"))
     {
         wxString token;
         wxFileOffset p = m_rc.Tell();
         ReadOrs(token);
         m_rc.Seek(p);
-        if (token.Find(_T("SS_BITMAP"))!=wxNOT_FOUND)
+        if (token.Find(wxT("SS_BITMAP"))!=wxNOT_FOUND)
             ParseStaticBitmap(label,varname);
         else
             ParseStaticText(label,varname);
     }
-    else if (kindctrl==_T("EDIT"))
+    else if (kindctrl==wxT("EDIT"))
         ParseTextCtrl(varname);
-    else if (kindctrl==_T("LISTBOX"))
+    else if (kindctrl==wxT("LISTBOX"))
         ParseListBox(varname);
-    else if (kindctrl==_T("COMBOBOX"))
+    else if (kindctrl==wxT("COMBOBOX"))
         ParseComboBox(varname);
 }
 
@@ -1223,12 +1223,12 @@ void rc2xml::ParseWeirdMSControl()
     wxString kindctrl = GetQuoteField();
     kindctrl.MakeUpper();
 //    CONTROL         IDB_FACE,IDC_STATIC,"Static",SS_BITMAP,26,62,32,30
-    if (kindctrl==_T("STATIC"))
+    if (kindctrl==wxT("STATIC"))
     {
-        if (PeekToken()==_T("SS_BITMAP"))
+        if (PeekToken()==wxT("SS_BITMAP"))
             ParseStaticBitmap(id,varname);
         else
-            wxLogError(_T("Unknown MS Control Static token"));
+            wxLogError(wxT("Unknown MS Control Static token"));
     }
 }
 
@@ -1245,16 +1245,16 @@ void rc2xml::ParseScrollBar()
 
     ReadOrs(token);
 
-if (token.Find(_T("SBS_VERT"))!=wxNOT_FOUND)
-    style=_T("wxSB_VERTICAL");
+if (token.Find(wxT("SBS_VERT"))!=wxNOT_FOUND)
+    style=wxT("wxSB_VERTICAL");
 //Default MFC style is horizontal
     else
-        style=_T("wxSB_HORIZONTAL");
+        style=wxT("wxSB_HORIZONTAL");
 
-    m_xmlfile.Write(_T("\t\t<object class=\"wxScrollBar\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxScrollBar\""));
     WriteBasicInfo(x,y,width,height,varname);
     WriteStyle(style);
-    m_xmlfile.Write(_T("\n\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t</object>\n"));
 
 }
 //    CONTROL         "Tree1",IDC_TREE1,"SysTreeView32",WS_BORDER | WS_TABSTOP,
@@ -1267,9 +1267,9 @@ void rc2xml::ParseTreeCtrl(wxString WXUN
     ReadOrs(token);
     int x,y,width,height;
     ReadRect(x,y,width,height);
-    m_xmlfile.Write(_T("\t\t<object class=\"wxTreeCtrl\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxTreeCtrl\""));
     WriteBasicInfo(x,y,width,height,varname);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 //    CONTROL         "MonthCalendar1",IDC_MONTHCALENDAR1,"SysMonthCal32",
@@ -1282,9 +1282,9 @@ void rc2xml::ParseCalendar(wxString WXUN
     ReadOrs(token);
     int x,y,width,height;
     ReadRect(x,y,width,height);
-    m_xmlfile.Write(_T("\t\t<object class=\"wxCalendarCtrl\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxCalendarCtrl\""));
     WriteBasicInfo(x,y,width,height,varname);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 }
 //    CONTROL         "List1",IDC_LIST1,"SysListView32",WS_BORDER | WS_TABSTOP,
   //                  7,89,68,71
@@ -1296,9 +1296,9 @@ void rc2xml::ParseListCtrl(wxString WXUN
     ReadOrs(token);
     int x,y,width,height;
     ReadRect(x,y,width,height);
-    m_xmlfile.Write(_T("\t\t<object class=\"wxListCtrl\""));
+    m_xmlfile.Write(wxT("\t\t<object class=\"wxListCtrl\""));
     WriteBasicInfo(x,y,width,height,varname);
-    m_xmlfile.Write(_T("\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t</object>\n"));
 
 }
 
@@ -1308,8 +1308,8 @@ void rc2xml::WriteBitmap(wxString bitmap
     wxNode *node=m_bitmaplist->Find(LookUpId(bitmapname));
     if (node==NULL)
         {
-        m_xmlfile.Write(_T("\t\t\t<bitmap>missingfile</bitmap>\n"));
-        wxLogError(_T("Unable to find bitmap:")+bitmapname);
+        m_xmlfile.Write(wxT("\t\t\t<bitmap>missingfile</bitmap>\n"));
+        wxLogError(wxT("Unable to find bitmap:")+bitmapname);
         return;
         }
 
@@ -1319,12 +1319,12 @@ void rc2xml::WriteBitmap(wxString bitmap
     bitmapname=wxFileNameFromPath(*bitmappath);
     wxBitmap bitmap;
     if (!bitmap.LoadFile(*bitmappath,wxBITMAP_TYPE_BMP ))
-        wxLogError(_T("Unable to load bitmap:")+*bitmappath);
+        wxLogError(wxT("Unable to load bitmap:")+*bitmappath);
 
     //Make a bitmap file name
     bitmapname=CleanName(bitmapname);
-    bitmapname+=_T(".bmp");
-    m_xmlfile.Write(_T("\t\t\t<bitmap>")+bitmapname+_T("</bitmap>\n"));
+    bitmapname+=wxT(".bmp");
+    m_xmlfile.Write(wxT("\t\t\t<bitmap>")+bitmapname+wxT("</bitmap>\n"));
     bitmap.SaveFile(m_targetpath+bitmapname,wxBITMAP_TYPE_BMP);
 }
 
@@ -1333,15 +1333,15 @@ void rc2xml::WriteIcon(wxString iconname
 wxNode *node=m_iconlist->Find(iconname);
     if (node==NULL)
         {
-        m_xmlfile.Write(_T("\t\t\t<bitmap>missing_file</bitmap>\n"));
-        wxLogError(_T("Unable to find icon:")+iconname);
+        m_xmlfile.Write(wxT("\t\t\t<bitmap>missing_file</bitmap>\n"));
+        wxLogError(wxT("Unable to find icon:")+iconname);
         }
     wxString *iconpath;
     iconpath=(wxString *)node->GetData();
     wxIcon icon;
     wxBitmap bitmap;
     if (!icon.LoadFile(*iconpath,wxBITMAP_TYPE_ICO ))
-        wxLogError(_T("Unable to load icon:")+*iconpath);
+        wxLogError(wxT("Unable to load icon:")+*iconpath);
 #ifdef __WXMSW__
     bitmap.CopyFromIcon(icon);
 #else
@@ -1350,8 +1350,8 @@ wxNode *node=m_iconlist->Find(iconname);
     iconname=wxFileNameFromPath(*iconpath);
     //Make a bitmap file name
     iconname=CleanName(iconname);
-    iconname+=_T(".bmp");
-    m_xmlfile.Write(_T("\t\t\t<bitmap>")+iconname+_T("</bitmap>\n"));
+    iconname+=wxT(".bmp");
+    m_xmlfile.Write(wxT("\t\t\t<bitmap>")+iconname+wxT("</bitmap>\n"));
     bitmap.SaveFile(m_targetpath+iconname,wxBITMAP_TYPE_BMP);
 
 
@@ -1367,9 +1367,9 @@ void rc2xml::ParseResourceHeader()
 {
 wxTextFile r;
 //Attempt to load resource.h in current path
-    if (!r.Open(_T("resource.h")))
+    if (!r.Open(wxT("resource.h")))
         {
-        wxLogError(_T("Warining Unable to load resource.h file"));
+        wxLogError(wxT("Warining Unable to load resource.h file"));
         return;
         }
 
@@ -1384,7 +1384,7 @@ wxTextFile r;
 //Read through entire file
     for ( str = r.GetFirstLine(); !r.Eof(); str = r.GetNextLine() )
     {
-    if (str.Find(_T("#define"))!=wxNOT_FOUND)
+    if (str.Find(wxT("#define"))!=wxNOT_FOUND)
         {
         tok.SetString(str);
         //Just ignore #define token
--- contrib/utils/convertrc/wxr2xml.cpp-orig	2009-06-18 19:11:52.362865000 -0500
+++ contrib/utils/convertrc/wxr2xml.cpp	2009-06-18 19:11:58.245433000 -0500
@@ -40,20 +40,20 @@ wxr2xml::~wxr2xml()
 bool wxr2xml::Convert(wxString wxrfile, wxString xmlfile)
 {
     bool result;
-    result = m_xmlfile.Open(xmlfile.c_str(), _T("w+t"));
-    wxASSERT_MSG(result, _T("Couldn't create XML file"));
+    result = m_xmlfile.Open(xmlfile.c_str(), wxT("w+t"));
+    wxASSERT_MSG(result, wxT("Couldn't create XML file"));
     if (!result)
         return false;
 
     result = m_table.ParseResourceFile(wxrfile);
-    wxASSERT_MSG(result, _T("Couldn't Load WXR file"));
+    wxASSERT_MSG(result, wxT("Couldn't Load WXR file"));
     if (!result)
         return false;
     // Write basic xml header
-    m_xmlfile.Write(_T("<?xml version=\"1.0\" ?>\n"));
-    m_xmlfile.Write(_T("<resource>\n"));
+    m_xmlfile.Write(wxT("<?xml version=\"1.0\" ?>\n"));
+    m_xmlfile.Write(wxT("<resource>\n"));
     result = ParseResources();
-    m_xmlfile.Write(_T("</resource>\n"));
+    m_xmlfile.Write(wxT("</resource>\n"));
 
     m_xmlfile.Close();
 
@@ -70,18 +70,18 @@ bool wxr2xml::ParseResources()
         {
         wxItemResource *res = (wxItemResource *) node->GetData();
         wxString resType(res->GetType());
-        if (resType == _T("wxDialog"))
+        if (resType == wxT("wxDialog"))
             ParseDialog(res);
-        else if (resType == _T("wxPanel"))
+        else if (resType == wxT("wxPanel"))
             ParsePanel(res);
-        else if (resType == _T("wxPanel"))
+        else if (resType == wxT("wxPanel"))
             ParsePanel(res);
-        else if (resType == _T("wxMenu"))
+        else if (resType == wxT("wxMenu"))
             ParseMenuBar(res);
-        else if (resType == _T("wxBitmap"))
+        else if (resType == wxT("wxBitmap"))
             ParseBitmap(res);
         else
-            wxLogError(_T("Found unsupported resource ") + resType);
+            wxLogError(wxT("Found unsupported resource ") + resType);
         node = m_table.Next();
     }
     return true;
@@ -89,24 +89,24 @@ bool wxr2xml::ParseResources()
 
 void wxr2xml::ParsePanel(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t<object class=\"wxPanel\""));
+    m_xmlfile.Write(wxT("\t<object class=\"wxPanel\""));
     PanelStuff(res);
     WriteControlInfo(res);
-    m_xmlfile.Write(_T("\n"));
+    m_xmlfile.Write(wxT("\n"));
     ParseControls(res);
-    m_xmlfile.Write(_T("\t</object>\n\n"));
+    m_xmlfile.Write(wxT("\t</object>\n\n"));
 }
 
 void wxr2xml::ParseDialog(wxItemResource * res)
 {
     PanelStuff(res);
-    m_xmlfile.Write(_T("\t<object class=\"wxDialog\""));
+    m_xmlfile.Write(wxT("\t<object class=\"wxDialog\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetTitle(res));
 
-    m_xmlfile.Write(_T("\n"));
+    m_xmlfile.Write(wxT("\n"));
     ParseControls(res);
-    m_xmlfile.Write(_T("\t</object>\n\n"));
+    m_xmlfile.Write(wxT("\t</object>\n\n"));
 }
 
 void wxr2xml::ParseControls(wxItemResource * res)
@@ -116,39 +116,39 @@ void wxr2xml::ParseControls(wxItemResour
         {
         wxItemResource *res = (wxItemResource *) node->GetData();
         wxString resType(res->GetType());
-        if (resType == _T("wxButton"))
+        if (resType == wxT("wxButton"))
             ParseButton(res);
-        else if ((resType == _T("wxTextCtrl")) | (resType == _T("wxText"))
-         | (resType == _T("wxMultiText")))
+        else if ((resType == wxT("wxTextCtrl")) | (resType == wxT("wxText"))
+         | (resType == wxT("wxMultiText")))
             ParseTextCtrl(res);
-        else if (resType == _T("wxCheckBox"))
+        else if (resType == wxT("wxCheckBox"))
             ParseCheckBox(res);
-        else if (resType == _T("wxRadioBox"))
+        else if (resType == wxT("wxRadioBox"))
             ParseRadioBox(res);
-        else if (resType == _T("wxListBox"))
+        else if (resType == wxT("wxListBox"))
             ParseListBox(res);
-        else if ((resType == _T("wxStaticText")) | (resType == _T("wxMessage")))
+        else if ((resType == wxT("wxStaticText")) | (resType == wxT("wxMessage")))
             ParseStaticText(res);
-        else if (resType == _T("wxChoice"))
+        else if (resType == wxT("wxChoice"))
             ParseChoice(res);
-        else if (resType == _T("wxGauge"))
+        else if (resType == wxT("wxGauge"))
            ParseGauge(res);
-        else if (resType == _T("wxSlider"))
+        else if (resType == wxT("wxSlider"))
             ParseSlider(res);
-        else if (resType == _T("wxComboBox"))
+        else if (resType == wxT("wxComboBox"))
             ParseComboBox(res);
-        else if (resType == _T("wxRadioButton"))
+        else if (resType == wxT("wxRadioButton"))
             ParseRadioButton(res);
-        else if (resType == _T("wxStaticBitmap"))
+        else if (resType == wxT("wxStaticBitmap"))
             ParseStaticBitmap(res);
-        else if (resType == _T("wxScrollBar"))
+        else if (resType == wxT("wxScrollBar"))
             ParseScrollBar(res);
-        else if ((resType == _T("wxStaticBox")) | (resType == _T("wxGroupBox")))
+        else if ((resType == wxT("wxStaticBox")) | (resType == wxT("wxGroupBox")))
             ParseStaticBox(res);
-        else if (resType == _T("wxBitmapButton"))
+        else if (resType == wxT("wxBitmapButton"))
             ParseBitmapButton(res);
         else
-            wxLogError(_T("Found unsupported resource ") + resType);
+            wxLogError(wxT("Found unsupported resource ") + resType);
         node = node->GetNext();
         }
 }
@@ -158,7 +158,7 @@ void wxr2xml::ParseControls(wxItemResour
 void wxr2xml::WriteControlInfo(wxItemResource * res)
 {
     m_xmlfile.Write(GenerateName(res));
-    m_xmlfile.Write(_T(">\n"));
+    m_xmlfile.Write(wxT(">\n"));
     m_xmlfile.Write(GetPosition(res));
     m_xmlfile.Write(GetSize(res));
     m_xmlfile.Write(GetStyles(res));
@@ -169,9 +169,9 @@ wxString wxr2xml::GetSize(wxItemResource
 {
     wxString msg;
     if (m_dlgunits)
-        msg << _T("\t\t\t\t<size>") << res->GetWidth() << _T(",") << res->GetHeight() << _T("d</size>\n");
+        msg << wxT("\t\t\t\t<size>") << res->GetWidth() << wxT(",") << res->GetHeight() << wxT("d</size>\n");
     else
-        msg << _T("\t\t\t\t<size>") << res->GetWidth() << _T(",") << res->GetHeight() << _T("</size>\n");
+        msg << wxT("\t\t\t\t<size>") << res->GetWidth() << wxT(",") << res->GetHeight() << wxT("</size>\n");
     return msg;
 }
 
@@ -179,196 +179,196 @@ wxString wxr2xml::GetPosition(wxItemReso
 {
     wxString msg;
     if (m_dlgunits)
-        msg << _T("\t\t\t\t<pos>") << res->GetX() << _T(",") << res->GetY() << _T("d</pos>\n");
+        msg << wxT("\t\t\t\t<pos>") << res->GetX() << wxT(",") << res->GetY() << wxT("d</pos>\n");
     else
-        msg << _T("\t\t\t\t<pos>") << res->GetX() << _T(",") << res->GetY() << _T("</pos>\n");
+        msg << wxT("\t\t\t\t<pos>") << res->GetX() << wxT(",") << res->GetY() << wxT("</pos>\n");
     return msg;
 }
 
 void wxr2xml::ParseButton(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxButton\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxButton\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetLabel(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseTextCtrl(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxTextCtrl\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxTextCtrl\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetValue4(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 
 }
 
 wxString wxr2xml::GetTitle(wxItemResource * res)
 {
     wxString msg;
-    msg = _T("\t\t\t\t<title>") + res->GetTitle() + _T("</title>");
+    msg = wxT("\t\t\t\t<title>") + res->GetTitle() + wxT("</title>");
     return msg;
 }
 
 wxString wxr2xml::GetValue4(wxItemResource * res)
 {
     wxString msg;
-    msg = _T("\t\t\t\t<value>") + res->GetValue4() + _T("</value>\n");
+    msg = wxT("\t\t\t\t<value>") + res->GetValue4() + wxT("</value>\n");
     return msg;
 }
 
 void wxr2xml::ParseCheckBox(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxCheckBox\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxCheckBox\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetLabel(res));
     m_xmlfile.Write(GetCheckStatus(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 wxString wxr2xml::GetLabel(wxItemResource * res)
 {
-    return _T("\t\t\t\t<label>") + res->GetTitle() + _T("</label>\n");
+    return wxT("\t\t\t\t<label>") + res->GetTitle() + wxT("</label>\n");
 }
 
 void wxr2xml::ParseRadioBox(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxRadioBox\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxRadioBox\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetLabel(res));
     // Add radio box items
     WriteStringList(res);
     // Value1
     m_xmlfile.Write(GetDimension(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseListBox(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxListBox\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxListBox\""));
     WriteControlInfo(res);
     WriteStringList(res);
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseStaticText(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxStaticText\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxStaticText\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetLabel(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseStaticBox(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxStaticBox\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxStaticBox\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetLabel(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::WriteStringList(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t\t<content>\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t<content>\n"));
     for (wxStringListNode * node = res->GetStringValues().GetFirst();
         node;node = node->GetNext()) {
         const wxString s1 = node->GetData();
-        m_xmlfile.Write(_T("\t\t\t\t\t<item>") + s1 + _T("</item>\n"));
+        m_xmlfile.Write(wxT("\t\t\t\t\t<item>") + s1 + wxT("</item>\n"));
     }
-    m_xmlfile.Write(_T("\t\t\t\t</content>\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t</content>\n"));
 }
 
 void wxr2xml::ParseChoice(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxChoice\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxChoice\""));
     WriteControlInfo(res);
     // Add choice items
     WriteStringList(res);
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseGauge(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxGauge\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxGauge\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetValue1(res));
     m_xmlfile.Write(GetRange(res));
-    m_xmlfile.Write(_T("\n\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t\t</object>\n"));
 }
 
 wxString wxr2xml::GetValue1(wxItemResource * res)
 {
     wxString msg;
-    msg << _T("\t\t\t\t<value>") << res->GetValue1() << _T("</value>\n");
+    msg << wxT("\t\t\t\t<value>") << res->GetValue1() << wxT("</value>\n");
     return msg;
 }
 
 wxString wxr2xml::GetRange(wxItemResource * res)
 {
     wxString msg;
-    msg << _T("\t\t\t\t<range>") << res->GetValue2() << _T("</range>");
+    msg << wxT("\t\t\t\t<range>") << res->GetValue2() << wxT("</range>");
     return msg;
 }
 
 void wxr2xml::ParseSlider(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxSlider\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxSlider\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetValue1(res));
     m_xmlfile.Write(GetMax(res));
     m_xmlfile.Write(GetMin(res));
-    m_xmlfile.Write(_T("\n\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t\t</object>\n"));
 }
 
 wxString wxr2xml::GetMax(wxItemResource * res)
 {
     wxString msg;
-    msg << _T("\t\t\t\t<max>") << res->GetValue3() << _T("</max>\n");
+    msg << wxT("\t\t\t\t<max>") << res->GetValue3() << wxT("</max>\n");
     return msg;
 }
 
 wxString wxr2xml::GetMin(wxItemResource * res)
 {
     wxString msg;
-    msg << _T("\t\t\t\t<min>") << res->GetValue2() << _T("</min>");
+    msg << wxT("\t\t\t\t<min>") << res->GetValue2() << wxT("</min>");
     return msg;
 }
 
 void wxr2xml::ParseComboBox(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxComboBox\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxComboBox\""));
     WriteControlInfo(res);
     // Add combo items
     WriteStringList(res);
-    m_xmlfile.Write(_T("\n\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseRadioButton(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxRadioButton\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxRadioButton\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetLabel(res));
 
     wxString msg;
     m_xmlfile.Write(GetValue1(res));
     m_xmlfile.Write(GetCheckStatus(res));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::ParseScrollBar(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxScrollBar\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxScrollBar\""));
     WriteControlInfo(res);
     m_xmlfile.Write(GetValue1(res));
-    m_xmlfile.Write(_T("\t\t\t\t<thumbsize>")+GetValue2(res)+_T("</thumbsize>\n"));
-    m_xmlfile.Write(_T("\t\t\t\t<range>")+GetValue3(res)+_T("</range>\n"));
-    m_xmlfile.Write(_T("\t\t\t\t<pagesize>")+GetValue5(res)+_T("</pagesize>\n"));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t<thumbsize>")+GetValue2(res)+wxT("</thumbsize>\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t<range>")+GetValue3(res)+wxT("</range>\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t<pagesize>")+GetValue5(res)+wxT("</pagesize>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 wxString wxr2xml::GetCheckStatus(wxItemResource * res)
 {
     wxString msg;
-    msg << _T("\t\t\t\t<checked>") << res->GetValue1() << _T("</checked>\n");
+    msg << wxT("\t\t\t\t<checked>") << res->GetValue1() << wxT("</checked>\n");
     return msg;
 }
 
@@ -380,162 +380,162 @@ wxString wxr2xml::GetStyles(wxItemResour
     restype = res->GetType();
     style = res->GetStyle();
 
-    s = _T("\t\t\t\t<style>");
+    s = wxT("\t\t\t\t<style>");
 
     // Common styles for all controls
     if (style & wxSIMPLE_BORDER)
-        s += _T("wxSIMPLE_BORDER|");
+        s += wxT("wxSIMPLE_BORDER|");
     if (style & wxSUNKEN_BORDER)
-        s += _T("wxSUNKEN_BORDER|");
+        s += wxT("wxSUNKEN_BORDER|");
     if (style & wxSIMPLE_BORDER)
-        s += _T("wxSIMPLE_BORDER|");
+        s += wxT("wxSIMPLE_BORDER|");
     if (style & wxDOUBLE_BORDER)
-        s += _T("wxDOUBLE_BORDER|");
+        s += wxT("wxDOUBLE_BORDER|");
     if (style & wxRAISED_BORDER)
-        s += _T("wxRAISED_BORDER|");
+        s += wxT("wxRAISED_BORDER|");
     if (style & wxTRANSPARENT_WINDOW)
-        s += _T("wxTRANSPARENT_WINDOW|");
+        s += wxT("wxTRANSPARENT_WINDOW|");
     if (style & wxWANTS_CHARS)
-        s += _T("wxWANTS_CHARS|");
+        s += wxT("wxWANTS_CHARS|");
     if (style & wxNO_FULL_REPAINT_ON_RESIZE)
-        s += _T("wxNO_FULL_REPAINT_ON_RESIZE|");
+        s += wxT("wxNO_FULL_REPAINT_ON_RESIZE|");
 
-    if (restype == _T("wxDialog"))
+    if (restype == wxT("wxDialog"))
         {
         if (style & wxDEFAULT_DIALOG_STYLE)
-            s += _T("wxDEFAULT_DIALOG_STYLE|");
+            s += wxT("wxDEFAULT_DIALOG_STYLE|");
 #if WXWIN_COMPATIBILITY_2_6
         if (style & wxDIALOG_MODAL)
-            s += _T("wxDIALOG_MODAL|");
+            s += wxT("wxDIALOG_MODAL|");
         if (style & wxDIALOG_MODELESS)
-            s += _T("wxDIALOG_MODELESS|");
+            s += wxT("wxDIALOG_MODELESS|");
         if (style & wxNO_3D)
-            s += _T("wxNO_3D|");
+            s += wxT("wxNO_3D|");
 #endif // WXWIN_COMPATIBILITY_2_6
         if (style & wxTAB_TRAVERSAL)
-            s += _T("wxTAB_TRAVERSAL|");
+            s += wxT("wxTAB_TRAVERSAL|");
         if (style & wxWS_EX_VALIDATE_RECURSIVELY)
-            s += _T("wxWS_EX_VALIDATE_RECURSIVELY|");
+            s += wxT("wxWS_EX_VALIDATE_RECURSIVELY|");
         if (style & wxSTAY_ON_TOP)
-            s += _T("wxSTAY_ON_TOP|");
+            s += wxT("wxSTAY_ON_TOP|");
         if (style & wxCAPTION)
-            s += _T("wxCAPTION|");
+            s += wxT("wxCAPTION|");
         if (style & wxRESIZE_BORDER)
-            s += _T("wxRESIZE_BORDER|");
+            s += wxT("wxRESIZE_BORDER|");
 #if WXWIN_COMPATIBILITY_2_6
         if (style & wxRESIZE_BOX)
-            s += _T("wxRESIZE_BOX|");
+            s += wxT("wxRESIZE_BOX|");
 #endif // WXWIN_COMPATIBILITY_2_6
         if (style & wxRESIZE_BORDER)
-            s += _T("wxRESIZE_BORDER|");
+            s += wxT("wxRESIZE_BORDER|");
         if (style & wxSYSTEM_MENU)
-            s += _T("wxSYSTEM_MENU|");
+            s += wxT("wxSYSTEM_MENU|");
         if (style & wxCLIP_CHILDREN)
-            s += _T("wxCLIP_CHILDREN|");
+            s += wxT("wxCLIP_CHILDREN|");
         }
 
-    if (restype == _T("wxPanel"))
+    if (restype == wxT("wxPanel"))
         {
         if (style & wxCLIP_CHILDREN)
-            s += _T("wxCLIP_CHILDREN|");
+            s += wxT("wxCLIP_CHILDREN|");
 #if WXWIN_COMPATIBILITY_2_6
         if (style & wxNO_3D)
-            s += _T("wxNO_3D|");
+            s += wxT("wxNO_3D|");
 #endif // WXWIN_COMPATIBILITY_2_6
         if (style & wxTAB_TRAVERSAL)
-            s += _T("wxTAB_TRAVERSAL|");
+            s += wxT("wxTAB_TRAVERSAL|");
         if (style & wxWS_EX_VALIDATE_RECURSIVELY)
-            s += _T("wxWS_EX_VALIDATE_RECURSIVELY|");
+            s += wxT("wxWS_EX_VALIDATE_RECURSIVELY|");
         }
 
-    if (restype == _T("wxComboBox"))
+    if (restype == wxT("wxComboBox"))
         {
         if (style & wxCB_SORT)
-            s += _T("wxCB_SORT|");
+            s += wxT("wxCB_SORT|");
         if (style & wxCB_SIMPLE)
-            s += _T("wxCB_SIMPLE|");
+            s += wxT("wxCB_SIMPLE|");
         if (style & wxCB_READONLY)
-            s += _T("wxCB_READONLY|");
+            s += wxT("wxCB_READONLY|");
         if (style & wxCB_DROPDOWN)
-            s += _T("wxCB_DROPDOWN|");
+            s += wxT("wxCB_DROPDOWN|");
         }
 
-    if (restype == _T("wxGauge"))
+    if (restype == wxT("wxGauge"))
         {
         if (style & wxGA_HORIZONTAL)
-            s += _T("wxGA_HORIZONTAL|");
+            s += wxT("wxGA_HORIZONTAL|");
         if (style & wxGA_VERTICAL)
-            s += _T("wxGA_VERTICAL|");
+            s += wxT("wxGA_VERTICAL|");
     // windows only
         if (style & wxGA_SMOOTH)
-            s += _T("wxGA_SMOOTH|");
+            s += wxT("wxGA_SMOOTH|");
         }
 
-    if (restype == _T("wxRadioButton"))
+    if (restype == wxT("wxRadioButton"))
         {
         if (style & wxRB_GROUP)
-        s += _T("wxRB_GROUP|");
+        s += wxT("wxRB_GROUP|");
         }
 
-    if (restype == _T("wxStaticText"))
+    if (restype == wxT("wxStaticText"))
         {
         if (style & wxST_NO_AUTORESIZE)
-            s += _T("wxST_NO_AUTORESIZEL|");
+            s += wxT("wxST_NO_AUTORESIZEL|");
         }
 
-    if (restype == _T("wxRadioBox"))
+    if (restype == wxT("wxRadioBox"))
         {
         if (style & wxRA_HORIZONTAL)
-            s += _T("wxRA_HORIZONTAL|");
+            s += wxT("wxRA_HORIZONTAL|");
         if (style & wxRA_SPECIFY_COLS)
-            s += _T("wxRA_SPECIFY_COLS|");
+            s += wxT("wxRA_SPECIFY_COLS|");
         if (style & wxRA_SPECIFY_ROWS)
-            s += _T("wxRA_SPECIFY_ROWS|");
+            s += wxT("wxRA_SPECIFY_ROWS|");
         if (style & wxRA_VERTICAL)
-            s += _T("wxRA_VERTICAL|");
+            s += wxT("wxRA_VERTICAL|");
         }
 
-    if (restype == _T("wxListBox"))
+    if (restype == wxT("wxListBox"))
         {
         if (style & wxLB_SINGLE)
-            s += _T("wxLB_SINGLE|");
+            s += wxT("wxLB_SINGLE|");
         if (style & wxLB_MULTIPLE)
-            s += _T("wxLB_MULTIPLE|");
+            s += wxT("wxLB_MULTIPLE|");
         if (style & wxLB_EXTENDED)
-            s += _T("wxLB_EXTENDED|");
+            s += wxT("wxLB_EXTENDED|");
         if (style & wxLB_HSCROLL)
-            s += _T("wxLB_HSCROLL|");
+            s += wxT("wxLB_HSCROLL|");
         if (style & wxLB_ALWAYS_SB)
-            s += _T("wxLB_ALWAYS_SB|");
+            s += wxT("wxLB_ALWAYS_SB|");
         if (style & wxLB_NEEDED_SB)
-            s += _T("wxLB_NEEDED_SB|");
+            s += wxT("wxLB_NEEDED_SB|");
         if (style & wxLB_SORT)
-        s += _T("wxLB_SORT|");
+        s += wxT("wxLB_SORT|");
         }
 
-    if (restype == _T("wxTextCtrl"))
+    if (restype == wxT("wxTextCtrl"))
         {
         if (style & wxTE_PROCESS_ENTER)
-            s += _T("wxTE_PROCESS_ENTER|");
+            s += wxT("wxTE_PROCESS_ENTER|");
         if (style & wxTE_PROCESS_TAB)
-            s += _T("wxTE_PROCESS_TAB|");
+            s += wxT("wxTE_PROCESS_TAB|");
         if (style & wxTE_MULTILINE)
-            s += _T("wxTE_MULTILINE|");
+            s += wxT("wxTE_MULTILINE|");
         if (style & wxTE_PASSWORD)
-            s += _T("wxTE_PASSWORD|");
+            s += wxT("wxTE_PASSWORD|");
         if (style & wxTE_READONLY)
-            s += _T("wxTE_READONLY|");
+            s += wxT("wxTE_READONLY|");
         if (style & wxHSCROLL)
-            s += _T("wxHSCROLL|");
+            s += wxT("wxHSCROLL|");
         }
 
 
-    if (restype == _T("wxScrollBar"))
+    if (restype == wxT("wxScrollBar"))
         {
         if (style & wxSB_HORIZONTAL)
-            s += _T("wxSB_HORIZONTAL|");
+            s += wxT("wxSB_HORIZONTAL|");
         if (style & wxSB_VERTICAL)
-            s += _T("wxSB_VERTICAL|");
+            s += wxT("wxSB_VERTICAL|");
         }
 
     int l = s.length();
@@ -545,33 +545,33 @@ wxString wxr2xml::GetStyles(wxItemResour
     // Trim off last |
     s = s.Truncate(l - 1);
 
-    s += _T("</style>\n");
+    s += wxT("</style>\n");
     return s;
 }
 
 wxString wxr2xml::GetDimension(wxItemResource * res)
 {
     wxString msg;
-    msg << _T("\t\t\t\t<dimension>") << res->GetValue1() << _T("</dimension>\n");
+    msg << wxT("\t\t\t\t<dimension>") << res->GetValue1() << wxT("</dimension>\n");
     return msg;
 }
 
 wxString wxr2xml::GenerateName(wxItemResource * res)
 {
     wxString name;
-    name = _T(" name=\"");
+    name = wxT(" name=\"");
     switch (res->GetId()) {
     case wxID_OK:
-        name += _T("wxID_OK");
+        name += wxT("wxID_OK");
     break;
     case wxID_CANCEL:
-        name += _T("wxID_CANCEL");
+        name += wxT("wxID_CANCEL");
     break;
     default:
         name += res->GetName();
     }
 
-    name += _T("\"");
+    name += wxT("\"");
     return name;
 }
 
@@ -580,16 +580,16 @@ void wxr2xml::ParseMenuBar(wxItemResourc
     wxItemResource *child;
     wxNode *node = res->GetChildren().GetFirst();
     // Get Menu Bar Name
-    m_xmlfile.Write(_T("\t<object class=\"wxMenuBar\" "));
+    m_xmlfile.Write(wxT("\t<object class=\"wxMenuBar\" "));
     m_xmlfile.Write(GenerateName(res));
-    m_xmlfile.Write(_T(">\n"));
+    m_xmlfile.Write(wxT(">\n"));
     while (node) {
         child = (wxItemResource *) node->GetData();
         ParseMenu(child);
         node = node->GetNext();
     }
 
-    m_xmlfile.Write(_T("\t</object> \n\n"));
+    m_xmlfile.Write(wxT("\t</object> \n\n"));
 }
 
 void wxr2xml::ParseMenu(wxItemResource * res)
@@ -597,16 +597,16 @@ void wxr2xml::ParseMenu(wxItemResource *
     wxItemResource *child;
     wxNode *node = res->GetChildren().GetFirst();
     // Get Menu
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxMenu\" "));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxMenu\" "));
     wxString menuname;
-    menuname << _T("name = \"menu_") << res->GetValue1() << _T("\"");
+    menuname << wxT("name = \"menu_") << res->GetValue1() << wxT("\"");
     m_xmlfile.Write(menuname);
-    m_xmlfile.Write(_T(">\n"));
-    m_xmlfile.Write(_T("\t\t\t\t<label>")
-        + FixMenuString(res->GetTitle()) + _T("</label>\n"));
+    m_xmlfile.Write(wxT(">\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t<label>")
+        + FixMenuString(res->GetTitle()) + wxT("</label>\n"));
     if (!res->GetValue4().empty())
-        m_xmlfile.Write(_T("\t\t\t\t<help>") + res->GetValue4() +
-        _T("</help>\n"));
+        m_xmlfile.Write(wxT("\t\t\t\t<help>") + res->GetValue4() +
+        wxT("</help>\n"));
     // Read in menu items and additional menus
     while (node) {
         child = (wxItemResource *) node->GetData();
@@ -616,65 +616,65 @@ void wxr2xml::ParseMenu(wxItemResource *
             ParseMenu(child);
             node = node->GetNext();
     }
-    m_xmlfile.Write(_T("\t\t\t</object> \n"));
+    m_xmlfile.Write(wxT("\t\t\t</object> \n"));
 }
 
 void wxr2xml::ParseMenuItem(wxItemResource * res)
 {
     // Get Menu Item or Separator
     if (res->GetTitle().empty()) {
-        m_xmlfile.Write(_T("\t\t\t<object class=\"separator\"/>\n"));
+        m_xmlfile.Write(wxT("\t\t\t<object class=\"separator\"/>\n"));
     } else {
-        m_xmlfile.Write(_T("\t\t\t\t<object class=\"wxMenuItem\" "));
+        m_xmlfile.Write(wxT("\t\t\t\t<object class=\"wxMenuItem\" "));
         wxString menuname;
-        menuname << _T("name = \"menuitem_") << res->GetValue1() << _T("\"");
+        menuname << wxT("name = \"menuitem_") << res->GetValue1() << wxT("\"");
         m_xmlfile.Write(menuname);
-        m_xmlfile.Write(_T(">\n"));
-            m_xmlfile.Write(_T("\t\t\t<label>")
-            + FixMenuString(res->GetTitle()) + _T("</label>\n"));
+        m_xmlfile.Write(wxT(">\n"));
+            m_xmlfile.Write(wxT("\t\t\t<label>")
+            + FixMenuString(res->GetTitle()) + wxT("</label>\n"));
         if (!res->GetValue4().empty())
-            m_xmlfile.Write(_T("\t\t\t<help>") +
-        res->GetValue4() + _T("</help>\n"));
+            m_xmlfile.Write(wxT("\t\t\t<help>") +
+        res->GetValue4() + wxT("</help>\n"));
         if (res->GetValue2())
-            m_xmlfile.Write(_T("\t\t\t\t<checkable>1</checkable>\n"));
-        m_xmlfile.Write(_T("\t\t\t</object> \n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<checkable>1</checkable>\n"));
+        m_xmlfile.Write(wxT("\t\t\t</object> \n"));
     }
 }
 
 wxString wxr2xml::FixMenuString(wxString phrase)
 {
-    phrase.Replace(_T("&"), _T("$"));
+    phrase.Replace(wxT("&"), wxT("$"));
     return phrase;
 }
 
 void wxr2xml::ParseStaticBitmap(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxStaticBitmap\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxStaticBitmap\""));
     WriteControlInfo(res);
     // value4 holds bitmap name
     wxString bitmapname;
     bitmapname = res->GetValue4();
     wxBitmap bitmap;
     bitmap = wxResourceCreateBitmap(bitmapname, &m_table);
-    bitmapname += _T(".bmp");
+    bitmapname += wxT(".bmp");
     bitmap.SaveFile(bitmapname, wxBITMAP_TYPE_BMP);
-    m_xmlfile.Write(_T("\n\t\t\t\t<bitmap>") + bitmapname + _T("</bitmap>"));
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\n\t\t\t\t<bitmap>") + bitmapname + wxT("</bitmap>"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
     // bitmap5
 }
 //Parse a bitmap resource
 void wxr2xml::ParseBitmap(wxItemResource * res)
 {
-    m_xmlfile.Write(_T("\t<object class=\"wxBitmap\" "));
-    m_xmlfile.Write(GenerateName(res)+_T(">"));
+    m_xmlfile.Write(wxT("\t<object class=\"wxBitmap\" "));
+    m_xmlfile.Write(GenerateName(res)+wxT(">"));
     wxString bitmapname;
     bitmapname = res->GetName();
     wxBitmap bitmap;
     bitmap = wxResourceCreateBitmap(bitmapname, &m_table);
-    bitmapname += _T(".bmp");
+    bitmapname += wxT(".bmp");
     bitmap.SaveFile(bitmapname, wxBITMAP_TYPE_BMP);
     m_xmlfile.Write(bitmapname);
-    m_xmlfile.Write(_T("</object>\n\n"));
+    m_xmlfile.Write(wxT("</object>\n\n"));
 }
 
 void wxr2xml::PanelStuff(wxItemResource * res)
@@ -719,18 +719,18 @@ wxString wxr2xml::GetValue5(wxItemResour
 void wxr2xml::ParseBitmapButton(wxItemResource *res)
 {
 
-    m_xmlfile.Write(_T("\t\t\t<object class=\"wxBitmapButton\""));
+    m_xmlfile.Write(wxT("\t\t\t<object class=\"wxBitmapButton\""));
     WriteControlInfo(res);
     // value4 holds bitmap name
     wxString bitmapname;
     bitmapname = res->GetValue4();
     wxBitmap bitmap;
     bitmap = wxResourceCreateBitmap(bitmapname, &m_table);
-    bitmapname += _T(".bmp");
+    bitmapname += wxT(".bmp");
     bitmap.SaveFile(bitmapname, wxBITMAP_TYPE_BMP);
-    m_xmlfile.Write(_T("\t\t\t\t<bitmap>") + bitmapname + _T("</bitmap>\n"));
+    m_xmlfile.Write(wxT("\t\t\t\t<bitmap>") + bitmapname + wxT("</bitmap>\n"));
 
-    m_xmlfile.Write(_T("\t\t\t</object>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</object>\n"));
 }
 
 void wxr2xml::WriteFontInfo(wxItemResource *res)
@@ -743,21 +743,21 @@ void wxr2xml::WriteFontInfo(wxItemResour
     if (!font.GetRefData())
         return;
 
-    m_xmlfile.Write(_T("\t\t\t<font>\n"));
+    m_xmlfile.Write(wxT("\t\t\t<font>\n"));
     //Get font point size,font family,weight,font style,underline
     int pt;
     wxString msg;
     pt=font.GetPointSize();
-    msg<<_T("\t\t\t\t<size>")<<pt<<_T("</size>\n");
+    msg<<wxT("\t\t\t\t<size>")<<pt<<wxT("</size>\n");
     m_xmlfile.Write(msg);
     GetFontFace(font);
     GetFontStyle(font);
     GetFontWeight(font);
 
     if (font.GetUnderlined())
-        m_xmlfile.Write(_T("\t\t\t\t<underlined>1</underlined>\n"));
+        m_xmlfile.Write(wxT("\t\t\t\t<underlined>1</underlined>\n"));
 
-    m_xmlfile.Write(_T("\t\t\t</font>\n"));
+    m_xmlfile.Write(wxT("\t\t\t</font>\n"));
 }
 
 //WARNING possible make here
@@ -771,22 +771,22 @@ void wxr2xml::GetFontFace(wxFont font)
         case wxDEFAULT:
             break;
         case wxDECORATIVE:
-            m_xmlfile.Write(_T("\t\t\t\t<face>decorative</face>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<face>decorative</face>\n"));
             break;
         case wxROMAN:
-            m_xmlfile.Write(_T("\t\t\t\t<face>roman</face>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<face>roman</face>\n"));
             break;
         case wxSCRIPT:
-            m_xmlfile.Write(_T("\t\t\t\t<face>script</face>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<face>script</face>\n"));
             break;
         case wxSWISS:
-            m_xmlfile.Write(_T("\t\t\t\t<face>swiss</face>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<face>swiss</face>\n"));
             break;
         case wxMODERN:
-            m_xmlfile.Write(_T("\t\t\t\t<face>modern</face>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<face>modern</face>\n"));
             break;
         default:
-            wxLogError(_T("Unknown font face"));
+            wxLogError(wxT("Unknown font face"));
         }
 }
 
@@ -801,13 +801,13 @@ void wxr2xml::GetFontStyle(wxFont font)
         case wxNORMAL:
             break;
         case wxITALIC:
-            m_xmlfile.Write(_T("<style>italic</style>\n"));
+            m_xmlfile.Write(wxT("<style>italic</style>\n"));
             break;
         case wxSLANT:
-            m_xmlfile.Write(_T("<style>slant</style>\n"));
+            m_xmlfile.Write(wxT("<style>slant</style>\n"));
             break;
         default:
-            wxLogError(_T("Unknown font style"));
+            wxLogError(wxT("Unknown font style"));
         }
 }
 
@@ -821,12 +821,12 @@ void wxr2xml::GetFontWeight(wxFont font)
         case wxNORMAL:
             break;
         case wxLIGHT:
-            m_xmlfile.Write(_T("\t\t\t\t<weight>light</weight>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<weight>light</weight>\n"));
             break;
         case wxBOLD:
-            m_xmlfile.Write(_T("\t\t\t\t<weight>bold</weight>\n"));
+            m_xmlfile.Write(wxT("\t\t\t\t<weight>bold</weight>\n"));
             break;
         default:
-            wxLogError(_T("Unknown font weight"));
+            wxLogError(wxT("Unknown font weight"));
         }
 }
--- contrib/utils/convertrc/convert.h-orig	2009-06-18 19:12:03.567311000 -0500
+++ contrib/utils/convertrc/convert.h	2009-06-18 19:12:09.928797000 -0500
@@ -24,7 +24,7 @@ public:
     wxMainFrame(wxWindow* parent, wxWindowID id,
         const wxString& title, const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize, long style = wxDEFAULT_FRAME_STYLE,
-        const wxString& name = _T("frame"));
+        const wxString& name = wxT("frame"));
     virtual ~wxMainFrame();
 
 protected:
--- contrib/src/ogl/basic.cpp-orig	2009-06-18 19:06:55.902899000 -0500
+++ contrib/src/ogl/basic.cpp	2009-06-18 19:07:04.625423000 -0500
@@ -1686,27 +1686,27 @@ void wxShape::RemoveLine(wxLineShape *li
 #if wxUSE_PROLOGIO
 void wxShape::WriteAttributes(wxExpr *clause)
 {
-  clause->AddAttributeValueString(_T("type"), GetClassInfo()->GetClassName());
-  clause->AddAttributeValue(_T("id"), m_id);
+  clause->AddAttributeValueString(wxT("type"), GetClassInfo()->GetClassName());
+  clause->AddAttributeValue(wxT("id"), m_id);
 
   if (m_pen)
   {
     int penWidth = m_pen->GetWidth();
     int penStyle = m_pen->GetStyle();
     if (penWidth != 1)
-      clause->AddAttributeValue(_T("pen_width"), (long)penWidth);
+      clause->AddAttributeValue(wxT("pen_width"), (long)penWidth);
     if (penStyle != wxSOLID)
-      clause->AddAttributeValue(_T("pen_style"), (long)penStyle);
+      clause->AddAttributeValue(wxT("pen_style"), (long)penStyle);
 
     wxString penColour = wxTheColourDatabase->FindName(m_pen->GetColour());
     if (penColour == wxEmptyString)
     {
       wxString hex(oglColourToHex(m_pen->GetColour()));
-      hex = wxString(_T("#")) + hex;
-      clause->AddAttributeValueString(_T("pen_colour"), hex);
+      hex = wxString(wxT("#")) + hex;
+      clause->AddAttributeValueString(wxT("pen_colour"), hex);
     }
-    else if (penColour != _T("BLACK"))
-      clause->AddAttributeValueString(_T("pen_colour"), penColour);
+    else if (penColour != wxT("BLACK"))
+      clause->AddAttributeValueString(wxT("pen_colour"), penColour);
   }
 
   if (m_brush)
@@ -1716,14 +1716,14 @@ void wxShape::WriteAttributes(wxExpr *cl
     if (brushColour == wxEmptyString)
     {
       wxString hex(oglColourToHex(m_brush->GetColour()));
-      hex = wxString(_T("#")) + hex;
-      clause->AddAttributeValueString(_T("brush_colour"), hex);
+      hex = wxString(wxT("#")) + hex;
+      clause->AddAttributeValueString(wxT("brush_colour"), hex);
     }
-    else if (brushColour != _T("WHITE"))
-      clause->AddAttributeValueString(_T("brush_colour"), brushColour);
+    else if (brushColour != wxT("WHITE"))
+      clause->AddAttributeValueString(wxT("brush_colour"), brushColour);
 
     if (m_brush->GetStyle() != wxSOLID)
-      clause->AddAttributeValue(_T("brush_style"), (long)m_brush->GetStyle());
+      clause->AddAttributeValue(wxT("brush_style"), (long)m_brush->GetStyle());
   }
 
   // Output line ids
@@ -1740,40 +1740,40 @@ void wxShape::WriteAttributes(wxExpr *cl
       list->Append(id_expr);
       node = node->GetNext();
     }
-    clause->AddAttributeValue(_T("arcs"), list);
+    clause->AddAttributeValue(wxT("arcs"), list);
   }
 
   // Miscellaneous members
   if (m_attachmentMode != 0)
-    clause->AddAttributeValue(_T("use_attachments"), (long)m_attachmentMode);
+    clause->AddAttributeValue(wxT("use_attachments"), (long)m_attachmentMode);
   if (m_sensitivity != OP_ALL)
-    clause->AddAttributeValue(_T("sensitivity"), (long)m_sensitivity);
+    clause->AddAttributeValue(wxT("sensitivity"), (long)m_sensitivity);
   if (!m_spaceAttachments)
-    clause->AddAttributeValue(_T("space_attachments"), (long)m_spaceAttachments);
+    clause->AddAttributeValue(wxT("space_attachments"), (long)m_spaceAttachments);
   if (m_fixedWidth)
-    clause->AddAttributeValue(_T("fixed_width"), (long)m_fixedWidth);
+    clause->AddAttributeValue(wxT("fixed_width"), (long)m_fixedWidth);
   if (m_fixedHeight)
-    clause->AddAttributeValue(_T("fixed_height"), (long)m_fixedHeight);
+    clause->AddAttributeValue(wxT("fixed_height"), (long)m_fixedHeight);
   if (m_shadowMode != SHADOW_NONE)
-    clause->AddAttributeValue(_T("shadow_mode"), (long)m_shadowMode);
+    clause->AddAttributeValue(wxT("shadow_mode"), (long)m_shadowMode);
   if (m_centreResize != true)
-    clause->AddAttributeValue(_T("centre_resize"), (long)0);
-  clause->AddAttributeValue(_T("maintain_aspect_ratio"), (long) m_maintainAspectRatio);
+    clause->AddAttributeValue(wxT("centre_resize"), (long)0);
+  clause->AddAttributeValue(wxT("maintain_aspect_ratio"), (long) m_maintainAspectRatio);
   if (m_highlighted != false)
-    clause->AddAttributeValue(_T("hilite"), (long)m_highlighted);
+    clause->AddAttributeValue(wxT("hilite"), (long)m_highlighted);
 
   if (m_parent) // For composite objects
-    clause->AddAttributeValue(_T("parent"), (long)m_parent->GetId());
+    clause->AddAttributeValue(wxT("parent"), (long)m_parent->GetId());
 
   if (m_rotation != 0.0)
-    clause->AddAttributeValue(_T("rotation"), m_rotation);
+    clause->AddAttributeValue(wxT("rotation"), m_rotation);
 
   if (!this->IsKindOf(CLASSINFO(wxLineShape)))
   {
-    clause->AddAttributeValue(_T("neck_length"), (long) m_branchNeckLength);
-    clause->AddAttributeValue(_T("stem_length"), (long) m_branchStemLength);
-    clause->AddAttributeValue(_T("branch_spacing"), (long) m_branchSpacing);
-    clause->AddAttributeValue(_T("branch_style"), (long) m_branchStyle);
+    clause->AddAttributeValue(wxT("neck_length"), (long) m_branchNeckLength);
+    clause->AddAttributeValue(wxT("stem_length"), (long) m_branchStemLength);
+    clause->AddAttributeValue(wxT("branch_spacing"), (long) m_branchSpacing);
+    clause->AddAttributeValue(wxT("branch_style"), (long) m_branchStyle);
   }
 
   // Write user-defined attachment points, if any
@@ -1791,7 +1791,7 @@ void wxShape::WriteAttributes(wxExpr *cl
       attachmentList->Append(pointExpr);
       node = node->GetNext();
     }
-    clause->AddAttributeValue(_T("user_attachments"), attachmentList);
+    clause->AddAttributeValue(wxT("user_attachments"), attachmentList);
   }
 
   // Write text regions
@@ -1809,8 +1809,8 @@ void wxShape::WriteRegions(wxExpr *claus
   while (node)
   {
     wxShapeRegion *region = (wxShapeRegion *)node->GetData();
-    wxSprintf(regionNameBuf, _T("region%d"), regionNo);
-    wxSprintf(textNameBuf, _T("text%d"), regionNo);
+    wxSprintf(regionNameBuf, wxT("region%d"), regionNo);
+    wxSprintf(textNameBuf, wxT("text%d"), regionNo);
 
     // Original text and region attributes:
     // region1 = (regionName regionText x y width height minWidth minHeight proportionX proportionY
@@ -1868,15 +1868,15 @@ void wxShape::WriteRegions(wxExpr *claus
 
 void wxShape::ReadAttributes(wxExpr *clause)
 {
-  clause->GetAttributeValue(_T("id"), m_id);
+  clause->GetAttributeValue(wxT("id"), m_id);
   wxRegisterId(m_id);
 
-  clause->GetAttributeValue(_T("x"), m_xpos);
-  clause->GetAttributeValue(_T("y"), m_ypos);
+  clause->GetAttributeValue(wxT("x"), m_xpos);
+  clause->GetAttributeValue(wxT("y"), m_ypos);
 
   // Input text strings (FOR COMPATIBILITY WITH OLD FILES ONLY. SEE REGION CODE BELOW.)
   ClearText();
-  wxExpr *strings = clause->AttributeValue(_T("text"));
+  wxExpr *strings = clause->AttributeValue(wxT("text"));
   if (strings && strings->Type() == wxExprList)
   {
     m_formatted = true;  // Assume text is formatted unless we prove otherwise
@@ -1932,71 +1932,71 @@ void wxShape::ReadAttributes(wxExpr *cla
   int brush_style = wxSOLID;
   m_attachmentMode = ATTACHMENT_MODE_NONE;
 
-  clause->GetAttributeValue(_T("pen_colour"), pen_string);
-  clause->GetAttributeValue(_T("text_colour"), m_textColourName);
+  clause->GetAttributeValue(wxT("pen_colour"), pen_string);
+  clause->GetAttributeValue(wxT("text_colour"), m_textColourName);
 
   SetTextColour(m_textColourName);
 
-  clause->GetAttributeValue(_T("region_name"), m_regionName);
+  clause->GetAttributeValue(wxT("region_name"), m_regionName);
 
-  clause->GetAttributeValue(_T("brush_colour"), brush_string);
-  clause->GetAttributeValue(_T("pen_width"), pen_width);
-  clause->GetAttributeValue(_T("pen_style"), pen_style);
-  clause->GetAttributeValue(_T("brush_style"), brush_style);
+  clause->GetAttributeValue(wxT("brush_colour"), brush_string);
+  clause->GetAttributeValue(wxT("pen_width"), pen_width);
+  clause->GetAttributeValue(wxT("pen_style"), pen_style);
+  clause->GetAttributeValue(wxT("brush_style"), brush_style);
 
   int iVal = (int) m_attachmentMode;
-  clause->GetAttributeValue(_T("use_attachments"), iVal);
+  clause->GetAttributeValue(wxT("use_attachments"), iVal);
   m_attachmentMode = iVal;
 
-  clause->GetAttributeValue(_T("sensitivity"), m_sensitivity);
+  clause->GetAttributeValue(wxT("sensitivity"), m_sensitivity);
 
   iVal = (int) m_spaceAttachments;
-  clause->GetAttributeValue(_T("space_attachments"), iVal);
+  clause->GetAttributeValue(wxT("space_attachments"), iVal);
   m_spaceAttachments = (iVal != 0);
 
   iVal = (int) m_fixedWidth;
-  clause->GetAttributeValue(_T("fixed_width"), iVal);
+  clause->GetAttributeValue(wxT("fixed_width"), iVal);
   m_fixedWidth = (iVal != 0);
 
   iVal = (int) m_fixedHeight;
-  clause->GetAttributeValue(_T("fixed_height"), iVal);
+  clause->GetAttributeValue(wxT("fixed_height"), iVal);
   m_fixedHeight = (iVal != 0);
 
-  clause->GetAttributeValue(_T("format_mode"), m_formatMode);
-  clause->GetAttributeValue(_T("shadow_mode"), m_shadowMode);
+  clause->GetAttributeValue(wxT("format_mode"), m_formatMode);
+  clause->GetAttributeValue(wxT("shadow_mode"), m_shadowMode);
 
   iVal = m_branchNeckLength;
-  clause->GetAttributeValue(_T("neck_length"), iVal);
+  clause->GetAttributeValue(wxT("neck_length"), iVal);
   m_branchNeckLength = iVal;
 
   iVal = m_branchStemLength;
-  clause->GetAttributeValue(_T("stem_length"), iVal);
+  clause->GetAttributeValue(wxT("stem_length"), iVal);
   m_branchStemLength = iVal;
 
   iVal = m_branchSpacing;
-  clause->GetAttributeValue(_T("branch_spacing"), iVal);
+  clause->GetAttributeValue(wxT("branch_spacing"), iVal);
   m_branchSpacing = iVal;
 
-  clause->GetAttributeValue(_T("branch_style"), m_branchStyle);
+  clause->GetAttributeValue(wxT("branch_style"), m_branchStyle);
 
   iVal = (int) m_centreResize;
-  clause->GetAttributeValue(_T("centre_resize"), iVal);
+  clause->GetAttributeValue(wxT("centre_resize"), iVal);
   m_centreResize = (iVal != 0);
 
   iVal = (int) m_maintainAspectRatio;
-  clause->GetAttributeValue(_T("maintain_aspect_ratio"), iVal);
+  clause->GetAttributeValue(wxT("maintain_aspect_ratio"), iVal);
   m_maintainAspectRatio = (iVal != 0);
 
   iVal = (int) m_highlighted;
-  clause->GetAttributeValue(_T("hilite"), iVal);
+  clause->GetAttributeValue(wxT("hilite"), iVal);
   m_highlighted = (iVal != 0);
 
-  clause->GetAttributeValue(_T("rotation"), m_rotation);
+  clause->GetAttributeValue(wxT("rotation"), m_rotation);
 
   if (pen_string == wxEmptyString)
-    pen_string = _T("BLACK");
+    pen_string = wxT("BLACK");
   if (brush_string == wxEmptyString)
-    brush_string = _T("WHITE");
+    brush_string = wxT("WHITE");
 
   if (pen_string.GetChar(0) == '#')
   {
@@ -2021,11 +2021,11 @@ void wxShape::ReadAttributes(wxExpr *cla
     m_brush = wxWHITE_BRUSH;
 
   int point_size = 10;
-  clause->GetAttributeValue(_T("point_size"), point_size);
+  clause->GetAttributeValue(wxT("point_size"), point_size);
   SetFont(oglMatchFont(point_size));
 
   // Read user-defined attachment points, if any
-  wxExpr *attachmentList = clause->AttributeValue(_T("user_attachments"));
+  wxExpr *attachmentList = clause->AttributeValue(wxT("user_attachments"));
   if (attachmentList)
   {
     wxExpr *pointExpr = attachmentList->GetFirst();
@@ -2062,8 +2062,8 @@ void wxShape::ReadRegions(wxExpr *clause
 
   wxExpr *regionExpr;
   wxExpr *textExpr = NULL;
-  wxSprintf(regionNameBuf, _T("region%d"), regionNo);
-  wxSprintf(textNameBuf, _T("text%d"), regionNo);
+  wxSprintf(regionNameBuf, wxT("region%d"), regionNo);
+  wxSprintf(textNameBuf, wxT("text%d"), regionNo);
 
   m_formatted = true;  // Assume text is formatted unless we prove otherwise
 
@@ -2140,7 +2140,7 @@ void wxShape::ReadRegions(wxExpr *clause
         regionTextColour = colourExpr->StringValue();
       }
       else
-        regionTextColour = _T("BLACK");
+        regionTextColour = wxT("BLACK");
 
       if (penColourExpr)
         penColour = penColourExpr->StringValue();
@@ -2221,8 +2221,8 @@ void wxShape::ReadRegions(wxExpr *clause
     }
 
     regionNo ++;
-    wxSprintf(regionNameBuf, _T("region%d"), regionNo);
-    wxSprintf(textNameBuf, _T("text%d"), regionNo);
+    wxSprintf(regionNameBuf, wxT("region%d"), regionNo);
+    wxSprintf(textNameBuf, wxT("text%d"), regionNo);
   }
 
   // Compatibility: check for no regions (old file).
@@ -2233,7 +2233,7 @@ void wxShape::ReadRegions(wxExpr *clause
       !this->IsKindOf(CLASSINFO(wxCompositeShape)))
   {
     wxShapeRegion *newRegion = new wxShapeRegion;
-    newRegion->SetName(_T("0"));
+    newRegion->SetName(wxT("0"));
     m_regions.Append((wxObject *)newRegion);
     if (m_text.GetCount() > 0)
     {
--- contrib/src/ogl/ogldiag.cpp-orig	2009-06-18 19:07:12.482521000 -0500
+++ contrib/src/ogl/ogldiag.cpp	2009-06-18 19:07:18.711120000 -0500
@@ -215,7 +215,7 @@ bool wxDiagram::SaveFile(const wxString&
   wxExprDatabase *database = new wxExprDatabase;
 
   // First write the diagram type
-  wxExpr *header = new wxExpr(_T("diagram"));
+  wxExpr *header = new wxExpr(wxT("diagram"));
   OnHeaderSave(*database, *header);
 
   database->Append(header);
@@ -229,9 +229,9 @@ bool wxDiagram::SaveFile(const wxString&
     {
       wxExpr *expr;
       if (shape->IsKindOf(CLASSINFO(wxLineShape)))
-        expr = new wxExpr(_T("line"));
+        expr = new wxExpr(wxT("line"));
        else
-        expr = new wxExpr(_T("shape"));
+        expr = new wxExpr(wxT("shape"));
 
       OnShapeSave(*database, *shape, *expr);
     }
@@ -288,7 +288,7 @@ bool wxDiagram::LoadFile(const wxString&
 {
   wxBeginBusyCursor();
 
-  wxExprDatabase database(wxExprInteger, _T("id"));
+  wxExprDatabase database(wxExprInteger, wxT("id"));
   if (!database.Read(filename))
   {
     wxEndBusyCursor();
@@ -298,7 +298,7 @@ bool wxDiagram::LoadFile(const wxString&
   DeleteAllShapes();
 
   database.BeginFind();
-  wxExpr *header = database.FindClauseByFunctor(_T("diagram"));
+  wxExpr *header = database.FindClauseByFunctor(wxT("diagram"));
 
   if (header)
     OnHeaderLoad(database, *header);
@@ -309,7 +309,7 @@ bool wxDiagram::LoadFile(const wxString&
   {
     wxExpr *clause = (wxExpr *)node->GetData();
     long id = -1;
-    clause->GetAttributeValue(_T("id"), id);
+    clause->GetAttributeValue(wxT("id"), id);
     wxRegisterId(id);
     node = node->GetNext();
   }
@@ -329,7 +329,7 @@ void wxDiagram::ReadNodes(wxExprDatabase
 {
   // Find and create the node images
   database.BeginFind();
-  wxExpr *clause = database.FindClauseByFunctor(_T("shape"));
+  wxExpr *clause = database.FindClauseByFunctor(wxT("shape"));
   while (clause)
   {
     wxChar *type = NULL;
@@ -351,7 +351,7 @@ void wxDiagram::ReadNodes(wxExprDatabase
       // If child of composite, link up
       if (parentId > -1)
       {
-        wxExpr *parentExpr = database.HashFind(_T("shape"), parentId);
+        wxExpr *parentExpr = database.HashFind(wxT("shape"), parentId);
         if (parentExpr && parentExpr->GetClientData())
         {
           wxShape *parent = (wxShape *)parentExpr->GetClientData();
@@ -365,7 +365,7 @@ void wxDiagram::ReadNodes(wxExprDatabase
     if (type)
       delete[] type;
 
-    clause = database.FindClauseByFunctor(_T("shape"));
+    clause = database.FindClauseByFunctor(wxT("shape"));
   }
   return;
 }
@@ -373,14 +373,14 @@ void wxDiagram::ReadNodes(wxExprDatabase
 void wxDiagram::ReadLines(wxExprDatabase& database)
 {
   database.BeginFind();
-  wxExpr *clause = database.FindClauseByFunctor(_T("line"));
+  wxExpr *clause = database.FindClauseByFunctor(wxT("line"));
   while (clause)
   {
     wxString type;
     long parentId = -1;
 
-    clause->GetAttributeValue(_T("type"), type);
-    clause->GetAttributeValue(_T("parent"), parentId);
+    clause->GetAttributeValue(wxT("type"), type);
+    clause->GetAttributeValue(wxT("parent"), parentId);
     wxClassInfo *classInfo = wxClassInfo::FindClass(type);
     if (classInfo)
     {
@@ -391,16 +391,16 @@ void wxDiagram::ReadLines(wxExprDatabase
       shape->SetCanvas(GetCanvas());
 
       long image_to = -1; long image_from = -1;
-      clause->GetAttributeValue(_T("to"), image_to);
-      clause->GetAttributeValue(_T("from"), image_from);
+      clause->GetAttributeValue(wxT("to"), image_to);
+      clause->GetAttributeValue(wxT("from"), image_from);
 
-      wxExpr *image_to_expr = database.HashFind(_T("shape"), image_to);
+      wxExpr *image_to_expr = database.HashFind(wxT("shape"), image_to);
 
       if (!image_to_expr)
       {
         // Error
       }
-      wxExpr *image_from_expr = database.HashFind(_T("shape"), image_from);
+      wxExpr *image_from_expr = database.HashFind(wxT("shape"), image_from);
 
       if (!image_from_expr)
       {
@@ -422,7 +422,7 @@ void wxDiagram::ReadLines(wxExprDatabase
       m_shapeList->Append(shape);
     }
 
-    clause = database.FindClauseByFunctor(_T("line"));
+    clause = database.FindClauseByFunctor(wxT("line"));
   }
 }
 
@@ -432,7 +432,7 @@ void wxDiagram::ReadLines(wxExprDatabase
 void wxDiagram::ReadContainerGeometry(wxExprDatabase& database)
 {
   database.BeginFind();
-  wxExpr *clause = database.FindClauseByFunctor(_T("shape"));
+  wxExpr *clause = database.FindClauseByFunctor(wxT("shape"));
   while (clause)
   {
     wxShape *image = (wxShape *)clause->GetClientData();
@@ -442,7 +442,7 @@ void wxDiagram::ReadContainerGeometry(wx
       wxExpr *divisionExpr = NULL;
 
       // Find the list of divisions in the composite
-      clause->GetAttributeValue(_T("divisions"), &divisionExpr);
+      clause->GetAttributeValue(wxT("divisions"), &divisionExpr);
       if (divisionExpr)
       {
         int i = 0;
@@ -450,7 +450,7 @@ void wxDiagram::ReadContainerGeometry(wx
         while (idExpr)
         {
           long divisionId = idExpr->IntegerValue();
-          wxExpr *childExpr = database.HashFind(_T("shape"), divisionId);
+          wxExpr *childExpr = database.HashFind(wxT("shape"), divisionId);
           if (childExpr && childExpr->GetClientData())
           {
             wxDivisionShape *child = (wxDivisionShape *)childExpr->GetClientData();
@@ -461,13 +461,13 @@ void wxDiagram::ReadContainerGeometry(wx
             long topSideId = -1;
             long rightSideId = -1;
             long bottomSideId = -1;
-            childExpr->GetAttributeValue(_T("left_side"), leftSideId);
-            childExpr->GetAttributeValue(_T("top_side"), topSideId);
-            childExpr->GetAttributeValue(_T("right_side"), rightSideId);
-            childExpr->GetAttributeValue(_T("bottom_side"), bottomSideId);
+            childExpr->GetAttributeValue(wxT("left_side"), leftSideId);
+            childExpr->GetAttributeValue(wxT("top_side"), topSideId);
+            childExpr->GetAttributeValue(wxT("right_side"), rightSideId);
+            childExpr->GetAttributeValue(wxT("bottom_side"), bottomSideId);
             if (leftSideId > -1)
             {
-              wxExpr *leftExpr = database.HashFind(_T("shape"), leftSideId);
+              wxExpr *leftExpr = database.HashFind(wxT("shape"), leftSideId);
               if (leftExpr && leftExpr->GetClientData())
               {
                 wxDivisionShape *leftSide = (wxDivisionShape *)leftExpr->GetClientData();
@@ -476,7 +476,7 @@ void wxDiagram::ReadContainerGeometry(wx
             }
             if (topSideId > -1)
             {
-              wxExpr *topExpr = database.HashFind(_T("shape"), topSideId);
+              wxExpr *topExpr = database.HashFind(wxT("shape"), topSideId);
               if (topExpr && topExpr->GetClientData())
               {
                 wxDivisionShape *topSide = (wxDivisionShape *)topExpr->GetClientData();
@@ -485,7 +485,7 @@ void wxDiagram::ReadContainerGeometry(wx
             }
             if (rightSideId > -1)
             {
-              wxExpr *rightExpr = database.HashFind(_T("shape"), rightSideId);
+              wxExpr *rightExpr = database.HashFind(wxT("shape"), rightSideId);
               if (rightExpr && rightExpr->GetClientData())
               {
                 wxDivisionShape *rightSide = (wxDivisionShape *)rightExpr->GetClientData();
@@ -494,7 +494,7 @@ void wxDiagram::ReadContainerGeometry(wx
             }
             if (bottomSideId > -1)
             {
-              wxExpr *bottomExpr = database.HashFind(_T("shape"), bottomSideId);
+              wxExpr *bottomExpr = database.HashFind(wxT("shape"), bottomSideId);
               if (bottomExpr && bottomExpr->GetClientData())
               {
                 wxDivisionShape *bottomSide = (wxDivisionShape *)bottomExpr->GetClientData();
@@ -508,7 +508,7 @@ void wxDiagram::ReadContainerGeometry(wx
       }
     }
 
-    clause = database.FindClauseByFunctor(_T("shape"));
+    clause = database.FindClauseByFunctor(wxT("shape"));
   }
 }
 
@@ -534,7 +534,7 @@ bool wxDiagram::OnShapeSave(wxExprDataba
     while (node)
     {
       wxShape *childShape = (wxShape *)node->GetData();
-      wxExpr *childExpr = new wxExpr(_T("shape"));
+      wxExpr *childExpr = new wxExpr(wxT("shape"));
       OnShapeSave(db, *childShape, *childExpr);
       node = node->GetNext();
     }
--- contrib/src/ogl/lines.cpp-orig	2009-06-18 19:07:25.760715000 -0500
+++ contrib/src/ogl/lines.cpp	2009-06-18 19:07:30.959646000 -0500
@@ -1364,23 +1364,23 @@ void wxLineShape::WriteAttributes(wxExpr
   wxShape::WriteAttributes(clause);
 
   if (m_from)
-    clause->AddAttributeValue(_T("from"), m_from->GetId());
+    clause->AddAttributeValue(wxT("from"), m_from->GetId());
   if (m_to)
-    clause->AddAttributeValue(_T("to"), m_to->GetId());
+    clause->AddAttributeValue(wxT("to"), m_to->GetId());
 
   if (m_attachmentTo != 0)
-    clause->AddAttributeValue(_T("attachment_to"), (long)m_attachmentTo);
+    clause->AddAttributeValue(wxT("attachment_to"), (long)m_attachmentTo);
   if (m_attachmentFrom != 0)
-    clause->AddAttributeValue(_T("attachment_from"), (long)m_attachmentFrom);
+    clause->AddAttributeValue(wxT("attachment_from"), (long)m_attachmentFrom);
 
   if (m_alignmentStart != 0)
-    clause->AddAttributeValue(_T("align_start"), (long)m_alignmentStart);
+    clause->AddAttributeValue(wxT("align_start"), (long)m_alignmentStart);
   if (m_alignmentEnd != 0)
-    clause->AddAttributeValue(_T("align_end"), (long)m_alignmentEnd);
+    clause->AddAttributeValue(wxT("align_end"), (long)m_alignmentEnd);
 
-  clause->AddAttributeValue(_T("is_spline"), (long)m_isSpline);
+  clause->AddAttributeValue(wxT("is_spline"), (long)m_isSpline);
   if (m_maintainStraightLines)
-    clause->AddAttributeValue(_T("keep_lines_straight"), (long)m_maintainStraightLines);
+    clause->AddAttributeValue(wxT("keep_lines_straight"), (long)m_maintainStraightLines);
 
   // Make a list of lists for the (sp)line controls
   wxExpr *list = new wxExpr(wxExprList);
@@ -1397,7 +1397,7 @@ void wxLineShape::WriteAttributes(wxExpr
 
     node = node->GetNext();
   }
-  clause->AddAttributeValue(_T("controls"), list);
+  clause->AddAttributeValue(wxT("controls"), list);
 
   // Write arc arrows in new OGL format, if there are any.
   // This is a list of lists. Each sublist comprises:
@@ -1425,7 +1425,7 @@ void wxLineShape::WriteAttributes(wxExpr
 
       node = node->GetNext();
     }
-    clause->AddAttributeValue(_T("arrows"), arrow_list);
+    clause->AddAttributeValue(wxT("arrows"), arrow_list);
   }
 }
 
@@ -1448,7 +1448,7 @@ void wxLineShape::ReadAttributes(wxExpr 
   if (m_regions.GetCount() == 0)
   {
     wxShapeRegion *newRegion = new wxShapeRegion;
-    newRegion->SetName(_T("Middle"));
+    newRegion->SetName(wxT("Middle"));
     newRegion->SetSize(150, 50);
     m_regions.Append((wxObject *)newRegion);
     if (m_text.GetCount() > 0)
--- contrib/src/ogl/drawn.cpp-orig	2009-06-18 19:07:38.137711000 -0500
+++ contrib/src/ogl/drawn.cpp	2009-06-18 19:07:44.925993000 -0500
@@ -232,8 +232,8 @@ void wxDrawnShape::WriteAttributes(wxExp
 {
   wxRectangleShape::WriteAttributes(clause);
 
-  clause->AddAttributeValue(_T("current_angle"), (long)m_currentAngle);
-  clause->AddAttributeValue(_T("save_metafile"), (long)m_saveToFile);
+  clause->AddAttributeValue(wxT("current_angle"), (long)m_currentAngle);
+  clause->AddAttributeValue(wxT("save_metafile"), (long)m_saveToFile);
   if (m_saveToFile)
   {
     for (int i = 0; i < 4; i++)
@@ -249,8 +249,8 @@ void wxDrawnShape::ReadAttributes(wxExpr
   wxRectangleShape::ReadAttributes(clause);
 
   int iVal = (int) m_saveToFile;
-  clause->GetAttributeValue(_T("save_metafile"), iVal);
-  clause->GetAttributeValue(_T("current_angle"), m_currentAngle);
+  clause->GetAttributeValue(wxT("save_metafile"), iVal);
+  clause->GetAttributeValue(wxT("current_angle"), m_currentAngle);
   m_saveToFile = (iVal != 0);
 
   if (m_saveToFile)
@@ -1272,8 +1272,8 @@ bool wxOpPolyDraw::GetPerimeterPoint(dou
 #if wxUSE_PROLOGIO
 
 static char hexArray[] = {
-    _T('0'), _T('1'), _T('2'), _T('3'), _T('4'), _T('5'), _T('6'), _T('7'),
-    _T('8'), _T('9'), _T('A'), _T('B'), _T('C'), _T('D'), _T('E'), _T('F') };
+    wxT('0'), wxT('1'), wxT('2'), wxT('3'), wxT('4'), wxT('5'), wxT('6'), wxT('7'),
+    wxT('8'), wxT('9'), wxT('A'), wxT('B'), wxT('C'), wxT('D'), wxT('E'), wxT('F') };
 
 // Convert unsigned 16-bit integer to 4-character hex string
 static void IntToHex(unsigned int dec, wxChar *buf)
@@ -1295,37 +1295,37 @@ static int HexToInt1(wxChar hex)
 {
   switch (hex)
   {
-    case _T('0'):
+    case wxT('0'):
       return 0;
-    case _T('1'):
+    case wxT('1'):
       return 1;
-    case _T('2'):
+    case wxT('2'):
       return 2;
-    case _T('3'):
+    case wxT('3'):
       return 3;
-    case _T('4'):
+    case wxT('4'):
       return 4;
-    case _T('5'):
+    case wxT('5'):
       return 5;
-    case _T('6'):
+    case wxT('6'):
       return 6;
-    case _T('7'):
+    case wxT('7'):
       return 7;
-    case _T('8'):
+    case wxT('8'):
       return 8;
-    case _T('9'):
+    case wxT('9'):
       return 9;
-    case _T('A'):
+    case wxT('A'):
       return 10;
-    case _T('B'):
+    case wxT('B'):
       return 11;
-    case _T('C'):
+    case wxT('C'):
       return 12;
-    case _T('D'):
+    case wxT('D'):
       return 13;
-    case _T('E'):
+    case wxT('E'):
       return 14;
-    case _T('F'):
+    case wxT('F'):
       return 15;
   }
 
@@ -1468,7 +1468,7 @@ void wxPseudoMetaFile::WriteAttributes(w
   wxNode *node = m_gdiObjects.GetFirst();
   while (node)
   {
-    wxSprintf(buf, _T("gdi%d_%d"), whichAngle, i);
+    wxSprintf(buf, wxT("gdi%d_%d"), whichAngle, i);
     wxObject *obj = (wxObject *)node->GetData();
     wxExpr *expr = NULL;
     if (obj)
@@ -1526,7 +1526,7 @@ void wxPseudoMetaFile::WriteAttributes(w
   node = m_ops.GetFirst();
   while (node)
   {
-    wxSprintf(buf, _T("op%d_%d"), whichAngle, i);
+    wxSprintf(buf, wxT("op%d_%d"), whichAngle, i);
     wxDrawOp *op = (wxDrawOp *)node->GetData();
     wxExpr *expr = op->WriteExpr(this);
     if (expr)
@@ -1597,7 +1597,7 @@ void wxPseudoMetaFile::ReadAttributes(wx
   bool keepGoing = true;
   while (keepGoing)
   {
-    wxSprintf(buf, _T("gdi%d_%d"), whichAngle, i);
+    wxSprintf(buf, wxT("gdi%d_%d"), whichAngle, i);
     wxExpr *expr = NULL;
     clause->GetAttributeValue(buf, &expr);
     if (!expr)
@@ -1663,7 +1663,7 @@ void wxPseudoMetaFile::ReadAttributes(wx
   i = 1;
   while (keepGoing)
   {
-    wxSprintf(buf, _T("op%d_%d"), whichAngle, i);
+    wxSprintf(buf, wxT("op%d_%d"), whichAngle, i);
     wxExpr *expr = NULL;
     clause->GetAttributeValue(buf, &expr);
     if (!expr)
--- contrib/src/ogl/composit.cpp-orig	2009-06-18 19:07:53.788937000 -0500
+++ contrib/src/ogl/composit.cpp	2009-06-18 19:07:59.907014000 -0500
@@ -607,7 +607,7 @@ void wxCompositeShape::WriteAttributes(w
   while (node)
   {
     wxOGLConstraint *constraint = (wxOGLConstraint *)node->GetData();
-    wxSprintf(m_constraintNameBuf, _T("constraint%d"), constraintNo);
+    wxSprintf(m_constraintNameBuf, wxT("constraint%d"), constraintNo);
 
     // Each constraint is stored in the form
     // (type name id xspacing yspacing m_constrainingObjectId constrainedObjectIdList)
@@ -644,7 +644,7 @@ void wxCompositeShape::WriteAttributes(w
     childrenExpr->Append(new wxExpr(child->GetId()));
     node = node->GetNext();
   }
-  clause->AddAttributeValue(_T("children"), childrenExpr);
+  clause->AddAttributeValue(wxT("children"), childrenExpr);
 
   // Write the ids of all the division images
   if (m_divisions.GetCount() > 0)
@@ -657,7 +657,7 @@ void wxCompositeShape::WriteAttributes(w
       divisionsExpr->Append(new wxExpr(child->GetId()));
       node = node->GetNext();
     }
-    clause->AddAttributeValue(_T("divisions"), divisionsExpr);
+    clause->AddAttributeValue(wxT("divisions"), divisionsExpr);
   }
 }
 
@@ -681,7 +681,7 @@ void wxCompositeShape::ReadConstraints(w
 
   while (haveConstraints)
   {
-    wxSprintf(m_constraintNameBuf, _T("constraint%d"), constraintNo);
+    wxSprintf(m_constraintNameBuf, wxT("constraint%d"), constraintNo);
     wxExpr *constraintExpr = NULL;
     clause->GetAttributeValue(m_constraintNameBuf, &constraintExpr);
     if (!constraintExpr)
@@ -710,7 +710,7 @@ void wxCompositeShape::ReadConstraints(w
     cName = nameExpr->StringValue();
     long cId = idExpr->IntegerValue();
 
-    wxExpr *objExpr1 = database->HashFind(_T("node_image"), constrainingExpr->IntegerValue());
+    wxExpr *objExpr1 = database->HashFind(wxT("node_image"), constrainingExpr->IntegerValue());
     if (objExpr1 && objExpr1->GetClientData())
       m_constrainingObject = (wxShape *)objExpr1->GetClientData();
     else
@@ -721,7 +721,7 @@ void wxCompositeShape::ReadConstraints(w
     while (currentIdExpr)
     {
       long currentId = currentIdExpr->IntegerValue();
-      wxExpr *objExpr2 = database->HashFind(_T("node_image"), currentId);
+      wxExpr *objExpr2 = database->HashFind(wxT("node_image"), currentId);
       if (objExpr2 && objExpr2->GetClientData())
       {
         m_constrainedObjects.Append((wxShape *)objExpr2->GetClientData());
@@ -981,30 +981,30 @@ void wxDivisionShape::WriteAttributes(wx
   wxCompositeShape::WriteAttributes(clause);
 
   if (m_leftSide)
-    clause->AddAttributeValue(_T("left_side"), (long)m_leftSide->GetId());
+    clause->AddAttributeValue(wxT("left_side"), (long)m_leftSide->GetId());
   if (m_topSide)
-    clause->AddAttributeValue(_T("top_side"), (long)m_topSide->GetId());
+    clause->AddAttributeValue(wxT("top_side"), (long)m_topSide->GetId());
   if (m_rightSide)
-    clause->AddAttributeValue(_T("right_side"), (long)m_rightSide->GetId());
+    clause->AddAttributeValue(wxT("right_side"), (long)m_rightSide->GetId());
   if (m_bottomSide)
-    clause->AddAttributeValue(_T("bottom_side"), (long)m_bottomSide->GetId());
+    clause->AddAttributeValue(wxT("bottom_side"), (long)m_bottomSide->GetId());
 
-  clause->AddAttributeValue(_T("handle_side"), (long)m_handleSide);
-  clause->AddAttributeValueString(_T("left_colour"), m_leftSideColour);
-  clause->AddAttributeValueString(_T("top_colour"), m_topSideColour);
-  clause->AddAttributeValueString(_T("left_style"), m_leftSideStyle);
-  clause->AddAttributeValueString(_T("top_style"), m_topSideStyle);
+  clause->AddAttributeValue(wxT("handle_side"), (long)m_handleSide);
+  clause->AddAttributeValueString(wxT("left_colour"), m_leftSideColour);
+  clause->AddAttributeValueString(wxT("top_colour"), m_topSideColour);
+  clause->AddAttributeValueString(wxT("left_style"), m_leftSideStyle);
+  clause->AddAttributeValueString(wxT("top_style"), m_topSideStyle);
 }
 
 void wxDivisionShape::ReadAttributes(wxExpr *clause)
 {
   wxCompositeShape::ReadAttributes(clause);
 
-  clause->GetAttributeValue(_T("handle_side"), m_handleSide);
-  clause->GetAttributeValue(_T("left_colour"), m_leftSideColour);
-  clause->GetAttributeValue(_T("top_colour"), m_topSideColour);
-  clause->GetAttributeValue(_T("left_style"), m_leftSideStyle);
-  clause->GetAttributeValue(_T("top_style"), m_topSideStyle);
+  clause->GetAttributeValue(wxT("handle_side"), m_handleSide);
+  clause->GetAttributeValue(wxT("left_colour"), m_leftSideColour);
+  clause->GetAttributeValue(wxT("top_colour"), m_topSideColour);
+  clause->GetAttributeValue(wxT("left_style"), m_leftSideStyle);
+  clause->GetAttributeValue(wxT("top_style"), m_topSideStyle);
 }
 #endif
 
--- contrib/src/ogl/bmpshape.cpp-orig	2009-06-18 19:08:05.211609000 -0500
+++ contrib/src/ogl/bmpshape.cpp	2009-06-18 19:08:13.407924000 -0500
@@ -75,13 +75,13 @@ void wxBitmapShape::WriteAttributes(wxEx
   // Can't really save the bitmap; so instantiate the bitmap
   // at a higher level in the application, from a symbol library.
   wxRectangleShape::WriteAttributes(clause);
-  clause->AddAttributeValueString(_T("filename"), m_filename);
+  clause->AddAttributeValueString(wxT("filename"), m_filename);
 }
 
 void wxBitmapShape::ReadAttributes(wxExpr *clause)
 {
   wxRectangleShape::ReadAttributes(clause);
-  clause->GetAttributeValue(_T("filename"), m_filename);
+  clause->GetAttributeValue(wxT("filename"), m_filename);
 }
 #endif
 
--- contrib/src/fl/frmview.cpp-orig	2009-06-18 19:08:44.937894000 -0500
+++ contrib/src/fl/frmview.cpp	2009-06-18 19:08:49.656999000 -0500
@@ -304,7 +304,7 @@ void wxFrameManager::AddView( wxFrameVie
 void wxFrameManager::RemoveView( wxFrameView* WXUNUSED(pFrmView) )
 {
     // TBD::
-    wxFAIL_MSG( _T("wxFrameManager::RemoveView() has not been implemented yet.") );
+    wxFAIL_MSG( wxT("wxFrameManager::RemoveView() has not been implemented yet.") );
 }
 
 int wxFrameManager::GetActiveViewNo()
--- contrib/src/fl/toolwnd.cpp-orig	2009-06-18 19:08:56.351497000 -0500
+++ contrib/src/fl/toolwnd.cpp	2009-06-18 19:09:00.665632000 -0500
@@ -501,7 +501,7 @@ void wxToolWindow::CalcResizedRect( wxRe
     }
     else
     {
-        wxFAIL_MSG( _T("what did the cursor hit?") );
+        wxFAIL_MSG( wxT("what did the cursor hit?") );
     }
 
     rect.x = left;
--- contrib/src/gizmos/ledctrl.cpp-orig	2009-06-18 19:06:11.592854000 -0500
+++ contrib/src/gizmos/ledctrl.cpp	2009-06-18 19:06:17.353195000 -0500
@@ -187,51 +187,51 @@ void wxLEDNumberCtrl::OnPaint(wxPaintEve
         wxChar c = m_Value.GetChar(offset);
 
         // Draw faded lines if wanted.
-        if (m_DrawFaded && (c != _T('.')))
+        if (m_DrawFaded && (c != wxT('.')))
             DrawDigit(MemDc, DIGITALL, i);
 
         // Draw the digits.
         switch (c)
         {
-            case _T('0') :
+            case wxT('0') :
                 DrawDigit(MemDc, DIGIT0, i);
                 break;
-            case _T('1') :
+            case wxT('1') :
                 DrawDigit(MemDc, DIGIT1, i);
                 break;
-            case _T('2') :
+            case wxT('2') :
                 DrawDigit(MemDc, DIGIT2, i);
                 break;
-            case _T('3') :
+            case wxT('3') :
                 DrawDigit(MemDc, DIGIT3, i);
                 break;
-            case _T('4') :
+            case wxT('4') :
                 DrawDigit(MemDc, DIGIT4, i);
                 break;
-            case _T('5') :
+            case wxT('5') :
                 DrawDigit(MemDc, DIGIT5, i);
                 break;
-            case _T('6') :
+            case wxT('6') :
                 DrawDigit(MemDc, DIGIT6, i);
                 break;
-            case _T('7') :
+            case wxT('7') :
                 DrawDigit(MemDc, DIGIT7, i);
                 break;
-            case _T('8') :
+            case wxT('8') :
                 DrawDigit(MemDc, DIGIT8, i);
                 break;
-            case _T('9') :
+            case wxT('9') :
                 DrawDigit(MemDc, DIGIT9, i);
                 break;
-            case _T('-') :
+            case wxT('-') :
                 DrawDigit(MemDc, DASH, i);
                 break;
-            case _T('.') :
+            case wxT('.') :
                 // Display the decimal in the previous segment
                 i--;
                 DrawDigit(MemDc, DECIMALSIGN, i);
                 break;
-            case _T(' ') :
+            case wxT(' ') :
                 // just skip it
                 break;
             default :
--- contrib/src/gizmos/editlbox.cpp-orig	2009-06-18 19:06:24.146119000 -0500
+++ contrib/src/gizmos/editlbox.cpp	2009-06-18 19:06:30.553202000 -0500
@@ -45,7 +45,7 @@ public:
 
     void CreateColumns()
     {
-        InsertColumn(0, _T("item"));
+        InsertColumn(0, wxT("item"));
         SizeColumns();
     }
 
--- contrib/src/gizmos/multicell.cpp-orig	2009-06-18 19:06:37.099852000 -0500
+++ contrib/src/gizmos/multicell.cpp	2009-06-18 19:06:46.982185000 -0500
@@ -623,9 +623,9 @@ void wxMultiCellCanvas :: Add(wxWindow *
 {
   // thanks to unsigned data row and col are always >= 0
     wxASSERT_MSG( /* row >= 0 && */ row < m_maxRows,
-                 wxString::Format(_T("Row %d out of bounds (0..%d)"), row, m_maxRows) );
+                 wxString::Format(wxT("Row %d out of bounds (0..%d)"), row, m_maxRows) );
     wxASSERT_MSG( /* col >= 0 && */ col < m_maxCols,
-                 wxString::Format(_T("Column %d out of bounds (0..%d)"), col, m_maxCols) );
+                 wxString::Format(wxT("Column %d out of bounds (0..%d)"), col, m_maxCols) );
 
     wxASSERT_MSG(m_cells[CELL_LOC(row, col)] == NULL, wxT("Cell already occupied"));
 
--- contrib/src/mmedia/vidxanm.cpp-orig	2009-06-18 19:08:21.397932000 -0500
+++ contrib/src/mmedia/vidxanm.cpp	2009-06-18 19:08:27.166992000 -0500
@@ -119,7 +119,7 @@ wxVideoXANIM::wxVideoXANIM(wxInputStream
     m_size[0]        = 0;
     m_size[1]        = 0;
     
-    m_filename       = wxGetTempFileName(_T("vidxa"));
+    m_filename       = wxGetTempFileName(wxT("vidxa"));
     m_remove_file    = true;
     wxFileOutputStream fout(m_filename);
     
@@ -475,7 +475,7 @@ bool wxVideoXANIM::RestartXANIM()
     xanim_command.Printf(
         wxT("xanim -Zr +Ze +Sr +f +W%d +f +q +Av70 %s %s"),
         (int)m_internal->xanim_window,
-        (xanim_chg_size) ? _T("") : _T(""),   // ??? why ???
+        (xanim_chg_size) ? wxT("") : wxT(""),   // ??? why ???
         WXSTRINGCAST m_filename);
     
         // Execute it
--- contrib/src/mmedia/vidwin.cpp-orig	2009-06-18 19:08:32.721116000 -0500
+++ contrib/src/mmedia/vidwin.cpp	2009-06-18 19:08:38.378575000 -0500
@@ -46,7 +46,7 @@ wxVideoWindows::wxVideoWindows(wxInputSt
 {
     m_internal    = new wxVIDWinternal;
     m_remove_file = true;
-    m_filename    = wxGetTempFileName(_T("wxvid"));
+    m_filename    = wxGetTempFileName(wxT("wxvid"));
     m_paused      = false;
     m_stopped     = true;
     m_frameRate   = 1.0;
@@ -83,7 +83,7 @@ void wxVideoWindows::OpenFile()
     MCI_DGV_SET_PARMS setStruct;
     MCI_STATUS_PARMS statusStruct;
 
-    openStruct.lpstrDeviceType = _T("avivideo");
+    openStruct.lpstrDeviceType = wxT("avivideo");
     openStruct.lpstrElementName = (wxChar *)m_filename.c_str();
     openStruct.hWndParent = 0;
     
--- contrib/src/mmedia/cdwin.cpp-orig	2009-06-18 19:09:12.682515000 -0500
+++ contrib/src/mmedia/cdwin.cpp	2009-06-18 19:09:17.925801000 -0500
@@ -49,7 +49,7 @@ wxCDAudioWin::wxCDAudioWin(void)
   MCI_SET_PARMS set_struct;
 
   m_internal = new CDAW_Internal;
-  open_struct.lpstrDeviceType = _T("cdaudio");
+  open_struct.lpstrDeviceType = wxT("cdaudio");
   DWORD ret = mciSendCommand((MCIDEVICEID)NULL, MCI_OPEN, MCI_OPEN_TYPE,
                        (DWORD)&open_struct);
   if (ret) {
--- contrib/src/applet/appletwindow.cpp-orig	2009-06-18 19:10:42.572066000 -0500
+++ contrib/src/applet/appletwindow.cpp	2009-06-18 19:10:48.228936000 -0500
@@ -325,7 +325,7 @@ bool wxHtmlAppletWindow::LoadPage(
                 }
             else {
 #ifdef CHECKED
-                wxLogError(_T("VIRTUAL LINK ERROR: '%s' does not exist."), cmdValue.c_str());
+                wxLogError(wxT("VIRTUAL LINK ERROR: '%s' does not exist."), cmdValue.c_str());
 #endif
                 return true;
                 }
@@ -341,7 +341,7 @@ bool wxHtmlAppletWindow::LoadPage(
                 cmdLine = cmdLine.BeforeLast(')');
                 if (!CreatePlugIn(cmdValue,cmdLine)) {
 #ifdef CHECKED
-                    wxLogError(_T("Launch PlugIn ERROR: '%s' does not exist."), cmdValue.c_str());
+                    wxLogError(wxT("Launch PlugIn ERROR: '%s' does not exist."), cmdValue.c_str());
 #endif
                     }
                 }
--- contrib/src/deprecated/tbarsmpl.cpp-orig	2009-06-18 19:09:31.051481000 -0500
+++ contrib/src/deprecated/tbarsmpl.cpp	2009-06-18 19:09:39.810733000 -0500
@@ -187,7 +187,7 @@ bool wxToolBarSimple::DoInsertTool(size_
     wxToolBarToolSimple *tool = (wxToolBarToolSimple *)toolBase;
 
     wxCHECK_MSG( !tool->IsControl(), false,
-                 _T("generic wxToolBarSimple doesn't support controls") );
+                 wxT("generic wxToolBarSimple doesn't support controls") );
 
     tool->m_x = m_xPos;
     if ( tool->m_x == wxDefaultCoord )
@@ -636,7 +636,7 @@ void wxToolBarSimple::DrawTool(wxDC& dc,
 
 void wxToolBarSimple::SetRows(int nRows)
 {
-    wxCHECK_RET( nRows != 0, _T("max number of rows must be > 0") );
+    wxCHECK_RET( nRows != 0, wxT("max number of rows must be > 0") );
 
     m_maxCols = (GetToolsCount() + nRows - 1) / nRows;
 
--- contrib/src/deprecated/proplist.cpp-orig	2009-06-18 19:09:45.812559000 -0500
+++ contrib/src/deprecated/proplist.cpp	2009-06-18 19:09:53.194847000 -0500
@@ -424,7 +424,7 @@ bool wxPropertyListView::CreateControls(
 #ifdef __WXMSW__
     wxFont *boringFont =
         wxTheFontList->FindOrCreateFont(guiFont.GetPointSize(), wxMODERN,
-                                        wxNORMAL, wxNORMAL, false, _T("Courier New"));
+                                        wxNORMAL, wxNORMAL, false, wxT("Courier New"));
 #else
     wxFont *boringFont = wxTheFontList->FindOrCreateFont(guiFont.GetPointSize(), wxTELETYPE, wxNORMAL, wxNORMAL);
 #endif
@@ -452,8 +452,8 @@ bool wxPropertyListView::CreateControls(
         }
         else
         {
-            m_confirmButton = new wxButton(panel, wxID_PROP_CHECK, _T(":-)"), wxDefaultPosition, smallButtonSize );
-            m_cancelButton = new wxButton(panel, wxID_PROP_CROSS, _T("X"), wxDefaultPosition, smallButtonSize );
+            m_confirmButton = new wxButton(panel, wxID_PROP_CHECK, wxT(":-)"), wxDefaultPosition, smallButtonSize );
+            m_cancelButton = new wxButton(panel, wxID_PROP_CROSS, wxT("X"), wxDefaultPosition, smallButtonSize );
         }
 
         topsizer->Add( m_confirmButton, 0, wxLEFT|wxTOP|wxBOTTOM | wxEXPAND, buttonborder );
@@ -467,7 +467,7 @@ bool wxPropertyListView::CreateControls(
 
     if (m_buttonFlags & wxPROP_PULLDOWN)
     {
-        m_editButton = new wxButton(panel, wxID_PROP_EDIT, _T("..."),  wxDefaultPosition, smallButtonSize);
+        m_editButton = new wxButton(panel, wxID_PROP_EDIT, wxT("..."),  wxDefaultPosition, smallButtonSize);
         m_editButton->Disable();
         topsizer->Add( m_editButton, 0, wxRIGHT|wxTOP|wxBOTTOM | wxEXPAND, buttonborder );
     }
--- contrib/src/deprecated/wxexpr.cpp-orig	2009-06-18 19:09:59.409501000 -0500
+++ contrib/src/deprecated/wxexpr.cpp	2009-06-18 19:10:07.614167000 -0500
@@ -1068,7 +1068,7 @@ bool wxExprDatabase::Read(const wxString
 {
   noErrors = 0;
 
-  FILE *f = wxFopen(filename, _T("r"));
+  FILE *f = wxFopen(filename, wxT("r"));
   if (f)
   {
     thewxExprDatabase = this;
@@ -1100,7 +1100,7 @@ bool wxExprDatabase::ReadFromString(cons
 
 bool wxExprDatabase::Write(const wxString& fileName)
 {
-  FILE *stream = wxFopen( fileName, _T("w+"));
+  FILE *stream = wxFopen( fileName, wxT("w+"));
 
   if (!stream)
     return false;
--- contrib/src/foldbar/foldpanelitem.cpp-orig	2009-06-18 19:10:17.458584000 -0500
+++ contrib/src/foldbar/foldpanelitem.cpp	2009-06-18 19:10:23.426807000 -0500
@@ -244,8 +244,8 @@ bool wxFoldPanelItem::IsVertical() const
     // grandparent of wxFoldPanelItem is wxFoldPanelBar
     // default is vertical
     wxPanel *panel = wxDynamicCast(GetParent(), wxPanel);
-    wxCHECK_MSG( panel, true, _T("wrong parent") );
+    wxCHECK_MSG( panel, true, wxT("wrong parent") );
     wxFoldPanelBar *bar = wxDynamicCast(panel->GetParent(), wxFoldPanelBar);
-    wxCHECK_MSG( bar, true, _T("wrong parent") );
+    wxCHECK_MSG( bar, true, wxT("wrong parent") );
     return bar->IsVertical();
 }
--- contrib/src/foldbar/captionbar.cpp-orig	2009-06-18 19:10:29.317277000 -0500
+++ contrib/src/foldbar/captionbar.cpp	2009-06-18 19:10:33.892031000 -0500
@@ -412,7 +412,7 @@ bool wxCaptionBar::IsVertical() const
     // parent of wxCaptionBar is wxFoldPanelItem
     // default is vertical
     wxFoldPanelItem *bar = wxDynamicCast(GetParent(), wxFoldPanelItem);
-    wxCHECK_MSG( bar, true, _T("wrong parent") );
+    wxCHECK_MSG( bar, true, wxT("wrong parent") );
     return bar->IsVertical();
 }
 
--- contrib/src/plot/plot.cpp-orig	2009-06-18 19:05:57.832298000 -0500
+++ contrib/src/plot/plot.cpp	2009-06-18 19:06:03.614879000 -0500
@@ -134,7 +134,7 @@ wxPlotOnOffCurve::wxPlotOnOffCurve( int 
 
 void wxPlotOnOffCurve::Add( wxInt32 on, wxInt32 off, void *clientData )
 {
-    wxASSERT_MSG( on > 0, _T("plot index < 0") );
+    wxASSERT_MSG( on > 0, wxT("plot index < 0") );
     wxASSERT( on <= off );
 
     if (m_minX == -1)
@@ -202,7 +202,7 @@ BEGIN_EVENT_TABLE(wxPlotArea, wxWindow)
 END_EVENT_TABLE()
 
 wxPlotArea::wxPlotArea( wxPlotWindow *parent )
-        : wxWindow( parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER, _T("plotarea") )
+        : wxWindow( parent, wxID_ANY, wxDefaultPosition, wxDefaultSize, wxSIMPLE_BORDER, wxT("plotarea") )
 {
     m_owner = parent;
 
@@ -456,7 +456,7 @@ BEGIN_EVENT_TABLE(wxPlotXAxisArea, wxWin
 END_EVENT_TABLE()
 
 wxPlotXAxisArea::wxPlotXAxisArea( wxPlotWindow *parent )
-        : wxWindow( parent, wxID_ANY, wxDefaultPosition, wxSize(wxDefaultCoord,40), 0, _T("plotxaxisarea") )
+        : wxWindow( parent, wxID_ANY, wxDefaultPosition, wxSize(wxDefaultCoord,40), 0, wxT("plotxaxisarea") )
 {
     m_owner = parent;
 
@@ -552,14 +552,14 @@ void wxPlotXAxisArea::OnPaint( wxPaintEv
             wxString label;
             if (range < 50)
             {
-                label.Printf( _T("%f"), current );
-                while (label.Last() == _T('0'))
+                label.Printf( wxT("%f"), current );
+                while (label.Last() == wxT('0'))
                     label.RemoveLast();
-                if ((label.Last() == _T('.')) || (label.Last() == _T(',')))
-                    label.Append( _T('0') );
+                if ((label.Last() == wxT('.')) || (label.Last() == wxT(',')))
+                    label.Append( wxT('0') );
             }
             else
-                label.Printf( _T("%d"), (int)floor(current) );
+                label.Printf( wxT("%d"), (int)floor(current) );
             dc.DrawText( label, x-4, 20 );
         }
 
@@ -583,7 +583,7 @@ BEGIN_EVENT_TABLE(wxPlotYAxisArea, wxWin
 END_EVENT_TABLE()
 
 wxPlotYAxisArea::wxPlotYAxisArea( wxPlotWindow *parent )
-        : wxWindow( parent, wxID_ANY, wxDefaultPosition, wxSize(60,wxDefaultCoord), 0, _T("plotyaxisarea") )
+        : wxWindow( parent, wxID_ANY, wxDefaultPosition, wxSize(60,wxDefaultCoord), 0, wxT("plotyaxisarea") )
 {
     m_owner = parent;
 
@@ -658,14 +658,14 @@ void wxPlotYAxisArea::OnPaint( wxPaintEv
             wxString label;
             if (range < 50)
             {
-                label.Printf( _T("%f"), current );
-                while (label.Last() == _T('0'))
+                label.Printf( wxT("%f"), current );
+                while (label.Last() == wxT('0'))
                     label.RemoveLast();
-                if ((label.Last() == _T('.')) || (label.Last() == _T(',')))
-                    label.Append( _T('0') );
+                if ((label.Last() == wxT('.')) || (label.Last() == wxT(',')))
+                    label.Append( wxT('0') );
             }
             else
-                label.Printf( _T("%d"), (int)floor(current) );
+                label.Printf( wxT("%d"), (int)floor(current) );
             dc.DrawText( label, 5, y-7 );
         }
 
@@ -707,7 +707,7 @@ BEGIN_EVENT_TABLE(wxPlotWindow, wxScroll
 END_EVENT_TABLE()
 
 wxPlotWindow::wxPlotWindow( wxWindow *parent, wxWindowID id, const wxPoint &pos, const wxSize &size, int flag )
-        : wxScrolledWindow( parent, id, pos, size, flag, _T("plotcanvas") ),
+        : wxScrolledWindow( parent, id, pos, size, flag, wxT("plotcanvas") ),
           m_titleStaticText( NULL )
 {
     m_xUnitsPerValue = 1.0;
@@ -1088,7 +1088,7 @@ static wxBitmap *GetEnlargeBitmap()
         s_loaded = true; // set it to true anyhow, we won't try again
 
         #if defined(__WXMSW__) || defined(__WXPM__)
-            s_bitmap = new wxBitmap(_T("plot_enl_bmp"), wxBITMAP_TYPE_RESOURCE);
+            s_bitmap = new wxBitmap(wxT("plot_enl_bmp"), wxBITMAP_TYPE_RESOURCE);
         #else
             s_bitmap = new wxBitmap( plot_enl_xpm );
         #endif
@@ -1107,7 +1107,7 @@ static wxBitmap *GetShrinkBitmap()
         s_loaded = true; // set it to true anyhow, we won't try again
 
         #if defined(__WXMSW__) || defined(__WXPM__)
-            s_bitmap = new wxBitmap(_T("plot_shr_bmp"), wxBITMAP_TYPE_RESOURCE);
+            s_bitmap = new wxBitmap(wxT("plot_shr_bmp"), wxBITMAP_TYPE_RESOURCE);
         #else
             s_bitmap = new wxBitmap( plot_shr_xpm );
         #endif
@@ -1126,7 +1126,7 @@ static wxBitmap *GetZoomInBitmap()
         s_loaded = true; // set it to true anyhow, we won't try again
 
         #if defined(__WXMSW__) || defined(__WXPM__)
-            s_bitmap = new wxBitmap(_T("plot_zin_bmp"), wxBITMAP_TYPE_RESOURCE);
+            s_bitmap = new wxBitmap(wxT("plot_zin_bmp"), wxBITMAP_TYPE_RESOURCE);
         #else
             s_bitmap = new wxBitmap( plot_zin_xpm );
         #endif
@@ -1145,7 +1145,7 @@ static wxBitmap *GetZoomOutBitmap()
         s_loaded = true; // set it to true anyhow, we won't try again
 
         #if defined(__WXMSW__) || defined(__WXPM__)
-            s_bitmap = new wxBitmap(_T("plot_zot_bmp"), wxBITMAP_TYPE_RESOURCE);
+            s_bitmap = new wxBitmap(wxT("plot_zot_bmp"), wxBITMAP_TYPE_RESOURCE);
         #else
             s_bitmap = new wxBitmap( plot_zot_xpm );
         #endif
@@ -1164,7 +1164,7 @@ static wxBitmap *GetUpBitmap()
         s_loaded = true; // set it to true anyhow, we won't try again
 
         #if defined(__WXMSW__) || defined(__WXPM__)
-            s_bitmap = new wxBitmap(_T("plot_up_bmp"), wxBITMAP_TYPE_RESOURCE);
+            s_bitmap = new wxBitmap(wxT("plot_up_bmp"), wxBITMAP_TYPE_RESOURCE);
         #else
             s_bitmap = new wxBitmap( plot_up_xpm );
         #endif
@@ -1183,7 +1183,7 @@ static wxBitmap *GetDownBitmap()
         s_loaded = true; // set it to true anyhow, we won't try again
 
         #if defined(__WXMSW__) || defined(__WXPM__)
-            s_bitmap = new wxBitmap(_T("plot_dwn_bmp"), wxBITMAP_TYPE_RESOURCE);
+            s_bitmap = new wxBitmap(wxT("plot_dwn_bmp"), wxBITMAP_TYPE_RESOURCE);
         #else
             s_bitmap = new wxBitmap( plot_dwn_xpm );
         #endif
--- contrib/src/net/smapi.cpp-orig	2009-06-18 19:05:32.217811000 -0500
+++ contrib/src/net/smapi.cpp	2009-06-18 19:05:38.014334000 -0500
@@ -88,13 +88,13 @@ void wxMapiSession::Initialise() 
 {
     //First make sure the "WIN.INI" entry for MAPI is present aswell 
     //as the MAPI32 dll being present on the system
-    bool bMapiInstalled = (GetProfileInt(_T("MAIL"), _T("MAPI"), 0) != 0) && 
-        (SearchPath(NULL, _T("MAPI32.DLL"), NULL, 0, NULL, NULL) != 0);
+    bool bMapiInstalled = (GetProfileInt(wxT("MAIL"), wxT("MAPI"), 0) != 0) && 
+        (SearchPath(NULL, wxT("MAPI32.DLL"), NULL, 0, NULL, NULL) != 0);
     
     if (bMapiInstalled)
     {
         //Load up the MAPI dll and get the function pointers we are interested in
-        m_data->m_hMapi = ::LoadLibrary(_T("MAPI32.DLL"));
+        m_data->m_hMapi = ::LoadLibrary(wxT("MAPI32.DLL"));
         if (m_data->m_hMapi)
         {
             m_data->m_lpfnMAPILogon = (LPMAPILOGON) GetProcAddress(m_data->m_hMapi, "MAPILogon");
@@ -110,13 +110,13 @@ void wxMapiSession::Initialise() 
                 m_data->m_lpfnMAPIResolveName == NULL ||
                 m_data->m_lpfnMAPIFreeBuffer == NULL)
             {
-                wxLogDebug(_T("Failed to get one of the functions pointer in MAPI32.DLL\n"));
+                wxLogDebug(wxT("Failed to get one of the functions pointer in MAPI32.DLL\n"));
                 Deinitialise();
             }
         }
     }
     else
-        wxLogDebug(_T("Mapi is not installed on this computer\n"));
+        wxLogDebug(wxT("Mapi is not installed on this computer\n"));
 }
 
 void wxMapiSession::Deinitialise()
@@ -191,7 +191,7 @@ bool wxMapiSession::Logon(const wxString
     if (nError != SUCCESS_SUCCESS && nError != MAPI_E_USER_ABORT)
     {
         //Failed to create a create mapi session, try to acquire a shared mapi session
-        wxLogDebug(_T("Failed to logon to MAPI using a new session, trying to acquire a shared one\n"));
+        wxLogDebug(wxT("Failed to logon to MAPI using a new session, trying to acquire a shared one\n"));
         nError = m_data->m_lpfnMAPILogon(nUIParam, NULL, NULL, 0, 0, &m_data->m_hSession);
         if (nError == SUCCESS_SUCCESS)
         {
@@ -200,7 +200,7 @@ bool wxMapiSession::Logon(const wxString
         }
         else
         {
-            wxLogDebug(_T("Failed to logon to MAPI using a shared session, Error:%ld\n"), nError);
+            wxLogDebug(wxT("Failed to logon to MAPI using a shared session, Error:%ld\n"), nError);
             m_data->m_nLastError = nError;
         }
     }
@@ -237,7 +237,7 @@ bool wxMapiSession::Logoff()
         ULONG nError = m_data->m_lpfnMAPILogoff(m_data->m_hSession, 0, 0, 0); 
         if (nError != SUCCESS_SUCCESS)
         {
-            wxLogDebug(_T("Failed in call to MapiLogoff, Error:%ld"), nError);
+            wxLogDebug(wxT("Failed in call to MapiLogoff, Error:%ld"), nError);
             m_data->m_nLastError = nError;
             bSuccess = TRUE;
         }
@@ -272,7 +272,7 @@ bool wxMapiSession::Resolve(const wxStri
     ULONG nError = m_data->m_lpfnMAPIResolveName(m_data->m_hSession, 0, lpszAsciiName, 0, 0, lppRecip);
     if (nError != SUCCESS_SUCCESS)
     {
-        wxLogDebug(_T("Failed to resolve the name: %s, Error:%ld\n"),
+        wxLogDebug(wxT("Failed to resolve the name: %s, Error:%ld\n"),
                    sName.c_str(), nError);
         m_data->m_nLastError = nError;
     }
@@ -460,7 +460,7 @@ bool wxMapiSession::Send(wxMailMessage& 
     }
     else
     {
-        wxLogDebug(_T("Failed to send mail message, Error:%ld\n"), nError);
+        wxLogDebug(wxT("Failed to send mail message, Error:%ld\n"), nError);
         m_data->m_nLastError = nError;
     }
     
--- contrib/src/net/email.cpp-orig	2009-06-18 19:05:45.126973000 -0500
+++ contrib/src/net/email.cpp	2009-06-18 19:05:50.476886000 -0500
@@ -62,7 +62,7 @@ wxEmail::Send(wxMailMessage& message,
               const wxString& profileName,
               const wxString& sendMail)
 {
-    wxASSERT_MSG( !message.m_to.IsEmpty(), _T("no recipients to send mail to") ) ;
+    wxASSERT_MSG( !message.m_to.IsEmpty(), wxT("no recipients to send mail to") ) ;
 
 
     // The 'from' field is optionally supplied by the app; it's not needed
--- demos/forty/forty.cpp-orig	2009-06-18 16:43:44.770707000 -0500
+++ demos/forty/forty.cpp	2009-06-18 16:43:54.223199000 -0500
@@ -79,7 +79,7 @@ bool FortyApp::OnInit()
 
     wxSize size(668,510);
 
-    if ((argc > 1) && (!wxStrcmp(argv[1],_T("-L"))))
+    if ((argc > 1) && (!wxStrcmp(argv[1],wxT("-L"))))
     {
         largecards = true;
         size = wxSize(1000,750);
@@ -87,7 +87,7 @@ bool FortyApp::OnInit()
 
     FortyFrame* frame = new FortyFrame(
             0,
-            _T("Forty Thieves"),
+            wxT("Forty Thieves"),
             wxDefaultPosition,
             size,
             largecards
@@ -140,35 +140,35 @@ FortyFrame::FortyFrame(wxFrame* frame, c
 #endif
     // set the icon
 #ifdef __WXMSW__
-    SetIcon(wxIcon(_T("CardsIcon")));
+    SetIcon(wxIcon(wxT("CardsIcon")));
 #else
     SetIcon(wxIcon(forty_xpm));
 #endif
 
     // Make a menu bar
     wxMenu* gameMenu = new wxMenu;
-    gameMenu->Append(wxID_NEW, wxGetStockLabel(wxID_NEW), _T("Start a new game"));
-    gameMenu->Append(SCORES, _T("&Scores..."), _T("Displays scores"));
-    gameMenu->Append(wxID_EXIT, wxGetStockLabel(wxID_EXIT), _T("Exits Forty Thieves"));
+    gameMenu->Append(wxID_NEW, wxGetStockLabel(wxID_NEW), wxT("Start a new game"));
+    gameMenu->Append(SCORES, wxT("&Scores..."), wxT("Displays scores"));
+    gameMenu->Append(wxID_EXIT, wxGetStockLabel(wxID_EXIT), wxT("Exits Forty Thieves"));
 
     wxMenu* editMenu = new wxMenu;
-    editMenu->Append(wxID_UNDO, wxGetStockLabel(wxID_UNDO), _T("Undo the last move"));
-    editMenu->Append(wxID_REDO, wxGetStockLabel(wxID_REDO), _T("Redo a move that has been undone"));
+    editMenu->Append(wxID_UNDO, wxGetStockLabel(wxID_UNDO), wxT("Undo the last move"));
+    editMenu->Append(wxID_REDO, wxGetStockLabel(wxID_REDO), wxT("Redo a move that has been undone"));
 
     wxMenu* optionsMenu = new wxMenu;
     optionsMenu->Append(RIGHT_BUTTON_UNDO,
-            _T("&Right button undo"),
-            _T("Enables/disables right mouse button undo and redo"),
+            wxT("&Right button undo"),
+            wxT("Enables/disables right mouse button undo and redo"),
             true
             );
     optionsMenu->Append(HELPING_HAND,
-            _T("&Helping hand"),
-            _T("Enables/disables hand cursor when a card can be moved"),
+            wxT("&Helping hand"),
+            wxT("Enables/disables hand cursor when a card can be moved"),
             true
             );
     optionsMenu->Append(LARGE_CARDS,
-            _T("&Large cards"),
-            _T("Enables/disables large cards for high resolution displays"),
+            wxT("&Large cards"),
+            wxT("Enables/disables large cards for high resolution displays"),
             true
             );
     optionsMenu->Check(HELPING_HAND, true);
@@ -176,14 +176,14 @@ FortyFrame::FortyFrame(wxFrame* frame, c
     optionsMenu->Check(LARGE_CARDS, largecards ? true : false);
 
     wxMenu* helpMenu = new wxMenu;
-    helpMenu->Append(wxID_HELP_CONTENTS, _T("&Help Contents"), _T("Displays information about playing the game"));
-    helpMenu->Append(wxID_ABOUT, _T("&About..."), _T("About Forty Thieves"));
+    helpMenu->Append(wxID_HELP_CONTENTS, wxT("&Help Contents"), wxT("Displays information about playing the game"));
+    helpMenu->Append(wxID_ABOUT, wxT("&About..."), wxT("About Forty Thieves"));
 
     m_menuBar = new wxMenuBar;
-    m_menuBar->Append(gameMenu,    _T("&Game"));
-    m_menuBar->Append(editMenu,    _T("&Edit"));
-    m_menuBar->Append(optionsMenu, _T("&Options"));
-    m_menuBar->Append(helpMenu,    _T("&Help"));
+    m_menuBar->Append(gameMenu,    wxT("&Game"));
+    m_menuBar->Append(editMenu,    wxT("&Edit"));
+    m_menuBar->Append(optionsMenu, wxT("&Options"));
+    m_menuBar->Append(helpMenu,    wxT("&Help"));
 
     SetMenuBar(m_menuBar);
 
@@ -247,11 +247,11 @@ void
 FortyFrame::About(wxCommandEvent&)
 {
         wxMessageBox(
-            _T("Forty Thieves\n\n")
-            _T("A free card game written with the wxWidgets toolkit\n")
-            _T("Author: Chris Breeze (c) 1992-2004\n")
-            _T("email: chris@breezesys.com"),
-            _T("About Forty Thieves"),
+            wxT("Forty Thieves\n\n")
+            wxT("A free card game written with the wxWidgets toolkit\n")
+            wxT("Author: Chris Breeze (c) 1992-2004\n")
+            wxT("email: chris@breezesys.com"),
+            wxT("About Forty Thieves"),
             wxOK|wxICON_INFORMATION, this
             );
 }
@@ -326,7 +326,7 @@ bool FortyAboutDialog::AddControls(wxWin
             file.Open();
             for ( htmlText = file.GetFirstLine();
                   !file.Eof();
-                  htmlText << file.GetNextLine() << _T("\n") ) ;
+                  htmlText << file.GetNextLine() << wxT("\n") ) ;
         }
     }
 
@@ -336,7 +336,7 @@ bool FortyAboutDialog::AddControls(wxWin
     }
 
     // Customize the HTML
-    htmlText.Replace(wxT("$DATE$"), _T(__DATE__));
+    htmlText.Replace(wxT("$DATE$"), wxT(__DATE__));
 
     wxSize htmlSize(400, 290);
 
--- demos/forty/scorefil.cpp-orig	2009-06-18 16:44:10.692640000 -0500
+++ demos/forty/scorefil.cpp	2009-06-18 16:44:24.611530000 -0500
@@ -33,7 +33,7 @@
 
 ScoreFile::ScoreFile(const wxString& appName)
 {
-    m_config = new wxConfig(appName, _T("wxWidgets"), appName, wxEmptyString,
+    m_config = new wxConfig(appName, wxT("wxWidgets"), appName, wxEmptyString,
                                 wxCONFIG_USE_LOCAL_FILE);  // only local
 }
 
@@ -45,7 +45,7 @@ ScoreFile::~ScoreFile()
 
 void ScoreFile::GetPlayerList( wxArrayString &list )
 {
-    m_config->SetPath(_T("/Players"));
+    m_config->SetPath(wxT("/Players"));
     int length = m_config->GetNumberOfGroups();
 
     if (length <= 0) return;
@@ -87,8 +87,8 @@ long ScoreFile::CalcCheck(const wxString
 wxString ScoreFile::GetPreviousPlayer() const
 {
     wxString result;
-    m_config->SetPath(_T("/General"));
-    m_config->Read(_T("LastPlayer"), &result);
+    m_config->SetPath(wxT("/General"));
+    m_config->Read(wxT("LastPlayer"), &result);
     return result;
 }
 
@@ -103,16 +103,16 @@ void ScoreFile::ReadPlayersScore(
 
     games = wins = score = 0;
 
-    m_config->SetPath(_T("/Players"));
+    m_config->SetPath(wxT("/Players"));
     m_config->SetPath(player);
-    if (m_config->Read(_T("Score"), &myScore, 0L) &&
-        m_config->Read(_T("Games"), &myGames, 0L) &&
-        m_config->Read(_T("Wins"),  &myWins, 0L) &&
-        m_config->Read(_T("Check"), &check, 0L))
+    if (m_config->Read(wxT("Score"), &myScore, 0L) &&
+        m_config->Read(wxT("Games"), &myGames, 0L) &&
+        m_config->Read(wxT("Wins"),  &myWins, 0L) &&
+        m_config->Read(wxT("Check"), &check, 0L))
     {
         if (check != CalcCheck(player, myGames, myWins, myScore))
         {
-            wxMessageBox(_T("Score file corrupted"), _T("Warning"),
+            wxMessageBox(wxT("Score file corrupted"), wxT("Warning"),
                                      wxOK | wxICON_EXCLAMATION);
         }
         else
@@ -130,14 +130,14 @@ void ScoreFile::WritePlayersScore(const 
 {
     if (player)
     {
-        m_config->SetPath(_T("/General"));
-        m_config->Write(_T("LastPlayer"), wxString(player)); // Without wxString tmp, thinks it's bool in VC++
+        m_config->SetPath(wxT("/General"));
+        m_config->Write(wxT("LastPlayer"), wxString(player)); // Without wxString tmp, thinks it's bool in VC++
 
-        m_config->SetPath(_T("/Players"));
+        m_config->SetPath(wxT("/Players"));
         m_config->SetPath(player);
-        m_config->Write(_T("Score"), (long)score);
-        m_config->Write(_T("Games"), (long)games);
-        m_config->Write(_T("Wins"), (long)wins);
-        m_config->Write(_T("Check"), CalcCheck(player, games, wins, score));
+        m_config->Write(wxT("Score"), (long)score);
+        m_config->Write(wxT("Games"), (long)games);
+        m_config->Write(wxT("Wins"), (long)wins);
+        m_config->Write(wxT("Check"), CalcCheck(player, games, wins, score));
     }
 }
--- demos/forty/game.cpp-orig	2009-06-18 16:44:29.247359000 -0500
+++ demos/forty/game.cpp	2009-06-18 16:44:55.213920000 -0500
@@ -158,7 +158,7 @@ void Game::DoMove(wxDC& dc, Pile* src, P
     {
         if (src == dest)
         {
-            wxMessageBox(_T("Game::DoMove() src == dest"), _T("Debug message"),
+            wxMessageBox(wxT("Game::DoMove() src == dest"), wxT("Debug message"),
                    wxOK | wxICON_EXCLAMATION);
         }
         m_moves[m_moveIndex].src = src;
@@ -170,7 +170,7 @@ void Game::DoMove(wxDC& dc, Pile* src, P
     }
     else
     {
-        wxMessageBox(_T("Game::DoMove() Undo buffer full"), _T("Debug message"),
+        wxMessageBox(wxT("Game::DoMove() Undo buffer full"), wxT("Debug message"),
                wxOK | wxICON_EXCLAMATION);
     }
 
@@ -198,8 +198,8 @@ void Game::DoMove(wxDC& dc, Pile* src, P
         // Redraw the score box to update games won
         DisplayScore(dc);
 
-        if (wxMessageBox(_T("Do you wish to play again?"),
-            _T("Well Done, You have won!"), wxYES_NO | wxICON_QUESTION) == wxYES)
+        if (wxMessageBox(wxT("Do you wish to play again?"),
+            wxT("Well Done, You have won!"), wxYES_NO | wxICON_QUESTION) == wxYES)
         {
             Deal();
             canvas->Refresh();
@@ -236,25 +236,25 @@ void Game::DisplayScore(wxDC& dc)
     int w, h;
     {
         long width, height;
-        dc.GetTextExtent(_T("Average score:m_x"), &width, &height);
+        dc.GetTextExtent(wxT("Average score:m_x"), &width, &height);
         w = width;
         h = height;
     }
     dc.DrawRectangle(x + w, y, 20, 4 * h);
 
     wxString str;
-    str.Printf(_T("%d"), m_currentScore);
-    dc.DrawText(_T("Score:"), x, y);
+    str.Printf(wxT("%d"), m_currentScore);
+    dc.DrawText(wxT("Score:"), x, y);
     dc.DrawText(str, x + w, y);
     y += h;
 
-    str.Printf(_T("%d"), m_numGames);
-    dc.DrawText(_T("Games played:"), x, y);
+    str.Printf(wxT("%d"), m_numGames);
+    dc.DrawText(wxT("Games played:"), x, y);
     dc.DrawText(str, x + w, y);
     y += h;
 
-    str.Printf(_T("%d"), m_numWins);
-    dc.DrawText(_T("Games won:"), x, y);
+    str.Printf(wxT("%d"), m_numWins);
+    dc.DrawText(wxT("Games won:"), x, y);
     dc.DrawText(str, x + w, y);
     y += h;
 
@@ -263,8 +263,8 @@ void Game::DisplayScore(wxDC& dc)
     {
         average = (2 * (m_currentScore + m_totalScore) + m_numGames ) / (2 * m_numGames);
     }
-    str.Printf(_T("%d"), average);
-    dc.DrawText(_T("Average score:"), x, y);
+    str.Printf(wxT("%d"), average);
+    dc.DrawText(wxT("Average score:"), x, y);
     dc.DrawText(str, x + w, y);
 }
 
@@ -794,7 +794,7 @@ void Pack::Redraw(wxDC& dc)
     Pile::Redraw(dc);
 
     wxString str;
-    str.Printf(_T("%d  "), m_topCard + 1);
+    str.Printf(wxT("%d  "), m_topCard + 1);
 
     dc.SetBackgroundMode( wxSOLID );
     dc.SetTextBackground(FortyApp::BackgroundColour());
@@ -811,7 +811,7 @@ void Pack::AddCard(Card* card)
     }
     else
     {
-        wxMessageBox(_T("Pack::AddCard() Undo error"), _T("Forty Thieves: Warning"),
+        wxMessageBox(wxT("Pack::AddCard() Undo error"), wxT("Forty Thieves: Warning"),
            wxOK | wxICON_EXCLAMATION);
     }
     card->TurnCard(facedown);
--- demos/forty/playerdg.cpp-orig	2009-06-18 16:45:00.826778000 -0500
+++ demos/forty/playerdg.cpp	2009-06-18 16:45:15.350700000 -0500
@@ -37,10 +37,10 @@ PlayerSelectionDialog::PlayerSelectionDi
                             wxWindow* parent,
                             ScoreFile* file
                             ) :
-    wxDialog(parent, wxID_ANY, _T("Player Selection"), wxDefaultPosition),
+    wxDialog(parent, wxID_ANY, wxT("Player Selection"), wxDefaultPosition),
     m_scoreFile(file)
 {
-    wxStaticText* msg = new wxStaticText(this, wxID_ANY, _T("Please select a name or type a new one:"));
+    wxStaticText* msg = new wxStaticText(this, wxID_ANY, wxT("Please select a name or type a new one:"));
 
     wxListBox* list = new wxListBox(
                         this, ID_LISTBOX,
@@ -116,9 +116,9 @@ void PlayerSelectionDialog::ButtonCallba
         wxString name = m_textField->GetValue();
         if (!name.IsNull() && name.Length() > 0)
         {
-            if (name.Contains(_T('@')))
+            if (name.Contains(wxT('@')))
             {
-                wxMessageBox(_T("Names should not contain the '@' character"), _T("Forty Thieves"));
+                wxMessageBox(wxT("Names should not contain the '@' character"), wxT("Forty Thieves"));
             }
             else
             {
@@ -128,7 +128,7 @@ void PlayerSelectionDialog::ButtonCallba
         }
         else
         {
-             wxMessageBox(_T("Please enter your name"), _T("Forty Thieves"));
+             wxMessageBox(wxT("Please enter your name"), wxT("Forty Thieves"));
         }
     }
     else
--- demos/forty/card.cpp-orig	2009-06-18 16:45:19.912469000 -0500
+++ demos/forty/card.cpp	2009-06-18 16:45:26.930642000 -0500
@@ -62,7 +62,7 @@ Card::Card(int value, WayUp way_up) :
         m_symbolBmap = new wxBitmap(symbols_xpm);
         if (!m_symbolBmap->Ok())
         {
-            ::wxMessageBox(_T("Failed to load bitmap CardSymbols"), _T("Error"));
+            ::wxMessageBox(wxT("Failed to load bitmap CardSymbols"), wxT("Error"));
         }
     }
     if (!m_pictureBmap)
@@ -70,7 +70,7 @@ Card::Card(int value, WayUp way_up) :
         m_pictureBmap = new wxBitmap(Pictures);
         if (!m_pictureBmap->Ok())
         {
-            ::wxMessageBox(_T("Failed to load bitmap CardPictures"), _T("Error"));
+            ::wxMessageBox(wxT("Failed to load bitmap CardPictures"), wxT("Error"));
         }
     }
 
--- demos/forty/canvas.cpp-orig	2009-06-18 16:45:31.436076000 -0500
+++ demos/forty/canvas.cpp	2009-06-18 16:45:44.165982000 -0500
@@ -53,7 +53,7 @@ FortyCanvas::FortyCanvas(wxWindow* paren
     m_arrowCursor = new wxCursor(wxCURSOR_ARROW);
 
     wxString name = wxTheApp->GetAppName();
-    if (name.Length() <= 0) name = _T("forty");
+    if (name.Length() <= 0) name = wxT("forty");
     m_scoreFile = new ScoreFile(name);
     m_game = new Game(0, 0, 0);
     m_game->Deal();
@@ -156,8 +156,8 @@ Called when the main frame is closed
 bool FortyCanvas::OnCloseCanvas()
 {
     if (m_game->InPlay() &&
-        wxMessageBox(_T("Are you sure you want to\nabandon the current game?"),
-            _T("Warning"), wxYES_NO | wxICON_QUESTION) == wxNO)
+        wxMessageBox(wxT("Are you sure you want to\nabandon the current game?"),
+            wxT("Warning"), wxYES_NO | wxICON_QUESTION) == wxNO)
     {
         return false;
     }
--- demos/forty/scoredg.cpp-orig	2009-06-18 16:45:48.987297000 -0500
+++ demos/forty/scoredg.cpp	2009-06-18 16:46:00.912966000 -0500
@@ -156,17 +156,17 @@ ScoreDialog::ScoreDialog(wxWindow* paren
             average = (2 * score + games) / (2 * games);
         }
         list->SetCellValue(i,0,players[i]);
-        string_value.Printf( _T("%u"), wins );
+        string_value.Printf( wxT("%u"), wins );
         list->SetCellValue(i,1,string_value);
-        string_value.Printf( _T("%u"), games );
+        string_value.Printf( wxT("%u"), games );
         list->SetCellValue(i,2,string_value);
-        string_value.Printf( _T("%u"), average );
+        string_value.Printf( wxT("%u"), average );
         list->SetCellValue(i,3,string_value);
     }
-    list->SetColLabelValue(0, _T("Players"));
-    list->SetColLabelValue(1, _T("Wins"));
-    list->SetColLabelValue(2, _T("Games"));
-    list->SetColLabelValue(3, _T("Score"));
+    list->SetColLabelValue(0, wxT("Players"));
+    list->SetColLabelValue(1, wxT("Wins"));
+    list->SetColLabelValue(2, wxT("Games"));
+    list->SetColLabelValue(3, wxT("Score"));
     list->SetEditable(false);
     list->AutoSizeColumns();
     list->AutoSizeRows();
--- demos/fractal/fractal.cpp-orig	2009-06-18 16:43:02.905978000 -0500
+++ demos/fractal/fractal.cpp	2009-06-18 16:43:09.379463000 -0500
@@ -93,13 +93,13 @@ DECLARE_EVENT_TABLE()
 bool MyApp::OnInit()
 {
   // Create the main frame window
-  MyFrame *frame = new MyFrame(NULL, _T("Fractal Mountains for wxWidgets"), wxDefaultPosition, wxSize(640, 480));
+  MyFrame *frame = new MyFrame(NULL, wxT("Fractal Mountains for wxWidgets"), wxDefaultPosition, wxSize(640, 480));
 
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
   file_menu->Append(wxID_EXIT, wxGetStockLabel(wxID_EXIT));
   menuBar = new wxMenuBar;
-  menuBar->Append(file_menu, _T("&File"));
+  menuBar->Append(file_menu, wxT("&File"));
   frame->SetMenuBar(menuBar);
 
   int width, height;
--- demos/dbbrowse/dbtree.cpp-orig	2009-06-18 16:40:14.581116000 -0500
+++ demos/dbbrowse/dbtree.cpp	2009-06-18 16:40:23.112045000 -0500
@@ -32,7 +32,7 @@
 //----------------------------------------------------------------------------------------
 static inline const wxChar *bool2String(bool b)
 {
-    return b ? wxEmptyString : _T("not ");
+    return b ? wxEmptyString : wxT("not ");
 }
 
 //----------------------------------------------------------------------------------------
@@ -129,19 +129,19 @@ int DBTree::OnPopulate()
         ct_BrowserDB = (pDoc->db_Br+i_Which)->OnGetCatalog(false);
         if (ct_BrowserDB)
         { // Use the wxDatabase Information
-            Temp0.Printf(_T("%s - (%s) (%s)"), s_DSN.c_str(),ct_BrowserDB->catalog, ct_BrowserDB->schema);
-            Root = AddRoot(Temp0,TreeIc_DsnOpen,TreeIc_DsnOpen,new DBTreeData(_T("Root")));
+            Temp0.Printf(wxT("%s - (%s) (%s)"), s_DSN.c_str(),ct_BrowserDB->catalog, ct_BrowserDB->schema);
+            Root = AddRoot(Temp0,TreeIc_DsnOpen,TreeIc_DsnOpen,new DBTreeData(wxT("Root")));
             for (x=0;x<ct_BrowserDB->numTables;x++)
             {
                 wxYield();
                 TableType = 0; // TABLE = 1 ; VIEW = 2 ; 0 We are not interested in
-                if (!wxStrcmp((ct_BrowserDB->pTableInf+x)->tableType,_T("TABLE")))    // only TABLES
+                if (!wxStrcmp((ct_BrowserDB->pTableInf+x)->tableType,wxT("TABLE")))    // only TABLES
                     TableType = 1;
-                if (!wxStrcmp((ct_BrowserDB->pTableInf+x)->tableType,_T("VIEW")))     // and  VIEWS
+                if (!wxStrcmp((ct_BrowserDB->pTableInf+x)->tableType,wxT("VIEW")))     // and  VIEWS
                     TableType = 2;
                 if (TableType)    // only TABLES or Views
                 {
-                    Temp1.Printf(_T("TN(%s"),(ct_BrowserDB->pTableInf+x)->tableName);
+                    Temp1.Printf(wxT("TN(%s"),(ct_BrowserDB->pTableInf+x)->tableName);
                     //----
                     (ct_BrowserDB->pTableInf+x)->pColInf = (pDoc->db_Br+i_Which)->OnGetColumns((ct_BrowserDB->pTableInf+x)->tableName,(ct_BrowserDB->pTableInf+x)->numCols,false);
                     //----
@@ -161,37 +161,37 @@ int DBTree::OnPopulate()
                         }
                         for (y=0;y<(ct_BrowserDB->pTableInf+x)->numCols;y++)
                         {
-                            Temp1.Printf(_T("FN(%s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName);
+                            Temp1.Printf(wxT("FN(%s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName);
                             // Here is where we find out if the Column is a Primary / Foreign Key
                             if (((ct_BrowserDB->pTableInf+x)->pColInf+y)->PkCol != 0)  // Primary Key
                             {
-                                Temp2.Printf(_T("(%d) - %s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->PkCol,((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName);
+                                Temp2.Printf(wxT("(%d) - %s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->PkCol,((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName);
                                 Docu = AppendItem(Folder,Temp2,TreeIc_KEY,TreeIc_KEY,new DBTreeData(Temp1));
                                 Temp2 = ((ct_BrowserDB->pTableInf+x)->pColInf+y)->PkTableName;
                                 if (Temp2.empty())
                                     Temp2 = _("None");
                                 Temp2.Printf(_("This Primary Key is used in the following Tables : %s"),Temp2.c_str());
-                                Funkt = AppendItem(Docu,Temp2,TreeIc_DocClosed,TreeIc_DocOpen,new DBTreeData(_T("KEY")));
+                                Funkt = AppendItem(Docu,Temp2,TreeIc_DocClosed,TreeIc_DocOpen,new DBTreeData(wxT("KEY")));
                             }
                             else
                             {
                                 if (((ct_BrowserDB->pTableInf+x)->pColInf+y)->FkCol != 0) // Foreign Key
                                 {
-                                    Temp2.Printf(_T("(%d) - %s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->FkCol,((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName);
+                                    Temp2.Printf(wxT("(%d) - %s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->FkCol,((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName);
                                     Docu = AppendItem(Folder,Temp2,TreeIc_KEYF,TreeIc_KEYF,new DBTreeData(Temp1));
                                     Temp2.Printf(_("This Foreign Key comes from the following Table : %s"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->FkTableName);
-                                    Funkt = AppendItem(Docu,Temp2,TreeIc_DocClosed,TreeIc_DocOpen,new DBTreeData(_T("KEYF")));
+                                    Funkt = AppendItem(Docu,Temp2,TreeIc_DocClosed,TreeIc_DocOpen,new DBTreeData(wxT("KEYF")));
                                 }
                                 else
                                     Docu = AppendItem(Folder,((ct_BrowserDB->pTableInf+x)->pColInf+y)->colName,TreeIc_COL,TreeIc_COL,new DBTreeData(Temp1));
                             }
-                            SQL_TYPE.Printf(_T("SQL_C_???? (%d)"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->sqlDataType);
-                            DB_TYPE.Printf(_T("DB_DATA_TYPE_???? (%d)"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->dbDataType);
+                            SQL_TYPE.Printf(wxT("SQL_C_???? (%d)"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->sqlDataType);
+                            DB_TYPE.Printf(wxT("DB_DATA_TYPE_???? (%d)"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->dbDataType);
                             for (i=1;i<=(pDoc->db_Br+i_Which)->i_SqlTyp[0];i++)
                             {
                                 if (((ct_BrowserDB->pTableInf+x)->pColInf+y)->sqlDataType == (pDoc->db_Br+i_Which)->i_SqlTyp[i])
                                 {
-                                    SQL_TYPE.Printf(_T("%s(%d) ; "),(pDoc->db_Br+i_Which)->s_SqlTyp[i].c_str(),(pDoc->db_Br+i_Which)->i_SqlTyp[i]);
+                                    SQL_TYPE.Printf(wxT("%s(%d) ; "),(pDoc->db_Br+i_Which)->s_SqlTyp[i].c_str(),(pDoc->db_Br+i_Which)->i_SqlTyp[i]);
                                 }
                             } // for (i=1;i<=i_SqlTyp[0];i++)
                             wxYield();
@@ -199,13 +199,13 @@ int DBTree::OnPopulate()
                             {
                                 if (((ct_BrowserDB->pTableInf+x)->pColInf+y)->dbDataType == (pDoc->db_Br+i_Which)->i_dbTyp[i])
                                 {
-                                    DB_TYPE.Printf(_T("%s(%d)"),(pDoc->db_Br+i_Which)->s_dbTyp[i].c_str(),(pDoc->db_Br+i_Which)->i_dbTyp[i]);
+                                    DB_TYPE.Printf(wxT("%s(%d)"),(pDoc->db_Br+i_Which)->s_dbTyp[i].c_str(),(pDoc->db_Br+i_Which)->i_dbTyp[i]);
                                 }
                             } // for (i=1;i<=i_dbTyp[0];i++)
                             wxYield();
                             SQL_TYPE += DB_TYPE;
                             Funkt = AppendItem(Docu,SQL_TYPE,TreeIc_DocClosed,TreeIc_DocOpen,new DBTreeData(SQL_TYPE));
-                            SQL_TYPE.Printf(_T("%10s %d,%d"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->typeName,
+                            SQL_TYPE.Printf(wxT("%10s %d,%d"),((ct_BrowserDB->pTableInf+x)->pColInf+y)->typeName,
                                 ((ct_BrowserDB->pTableInf+x)->pColInf+y)->columnLength,((ct_BrowserDB->pTableInf+x)->pColInf+y)->decimalDigits);
                             Funkt = AppendItem(Docu,SQL_TYPE,TreeIc_DocClosed,TreeIc_DocOpen,new DBTreeData(SQL_TYPE));
                         }  // for (y=0;y<(ct_BrowserDB->pTableInf+x)->numCols;y++)
@@ -271,9 +271,9 @@ void DBTree::OnSelChanged(wxTreeEvent& W
     if ( item != NULL )
     {
         int Treffer = 0;
-        Temp1.Printf(_T("%s"),item->m_desc.c_str());
+        Temp1.Printf(wxT("%s"),item->m_desc.c_str());
         //-------------------------------------------------------------------------------------
-        if (Temp1.Contains(_T("ODBC-")))
+        if (Temp1.Contains(wxT("ODBC-")))
         {
             Temp1 = Temp1.Mid(5);
             for (i=0;i<pDoc->i_DSN;i++)
@@ -317,16 +317,16 @@ void DBTree::OnRightSelect(wxTreeEvent& 
     if ( item != NULL )
     {
         int Treffer = 0;
-        Temp1.Printf(_T("%s"),item->m_desc.c_str());
+        Temp1.Printf(wxT("%s"),item->m_desc.c_str());
         //--------------------------------------------------------------------------------------
-        if (!wxStrcmp(_T("Root"),Temp1))
+        if (!wxStrcmp(wxT("Root"),Temp1))
         {
             PopupMenu(popupMenu1,TreePos.x,TreePos.y);
             Treffer++;
         }
         for (i=0;i<ct_BrowserDB->numTables;i++)
         {
-            Temp2.Printf(_T("TN(%s"),(ct_BrowserDB->pTableInf+i)->tableName);
+            Temp2.Printf(wxT("TN(%s"),(ct_BrowserDB->pTableInf+i)->tableName);
             if (!wxStrcmp(Temp2,Temp1))
             {
                 PopupMenu(popupMenu2,TreePos.x,TreePos.y);
@@ -363,10 +363,10 @@ void DBTree::OnDBGrid(wxCommandEvent& WX
     DBTreeData *item = (DBTreeData *)GetItemData(itemId);
     if ( item != NULL )
     {
-        Temp1.Printf(_T("%s"),item->m_desc.c_str());
+        Temp1.Printf(wxT("%s"),item->m_desc.c_str());
         for (i=0;i<ct_BrowserDB->numTables;i++)
         {
-            Temp2.Printf(_T("TN(%s"),(ct_BrowserDB->pTableInf+i)->tableName);
+            Temp2.Printf(wxT("TN(%s"),(ct_BrowserDB->pTableInf+i)->tableName);
             if (!wxStrcmp(Temp2,Temp1))
             {
                 // Temp0.Printf("(%d) Here is where a GridCtrl for >%s< will be called! ",i,(ct_BrowserDB->pTableInf+i)->tableName);
@@ -400,10 +400,10 @@ void DBTree::OnTableClass(wxCommandEvent
     DBTreeData *item = (DBTreeData *)GetItemData(itemId);
     if ( item != NULL )
     {
-        Temp1.Printf(_T("%s"),item->m_desc.c_str());
+        Temp1.Printf(wxT("%s"),item->m_desc.c_str());
         for (i=0;i<ct_BrowserDB->numTables;i++)
         {
-            Temp2.Printf(_T("TN(%s"),(ct_BrowserDB->pTableInf+i)->tableName);
+            Temp2.Printf(wxT("TN(%s"),(ct_BrowserDB->pTableInf+i)->tableName);
             if (!wxStrcmp(Temp2,Temp1))
             {
                 Temp0.Printf(_("(%d) Here is where a wxTable Class for >%s< will be made! "),i,(ct_BrowserDB->pTableInf+i)->tableName);
--- demos/dbbrowse/doc.cpp-orig	2009-06-18 16:40:27.699786000 -0500
+++ demos/dbbrowse/doc.cpp	2009-06-18 16:40:44.604387000 -0500
@@ -50,7 +50,7 @@ MainDoc::MainDoc()
     p_PageArea     = NULL;
     i_TabNr        = 0;
     i_PageNr       = 0;
-    s_BColour      = _T("WHEAT");
+    s_BColour      = wxT("WHEAT");
     ft_Doc         = new wxFont(wxSystemSettings::GetFont(wxSYS_SYSTEM_FONT));
 }
 
@@ -90,7 +90,7 @@ bool MainDoc::OnNewDocument()
 //----------------------------------------------------------------------------------------
 bool MainDoc::OnInitView()
 {
-    Sash = p_ProgramCfg->Read(_T("/MainFrame/Sash"), 200);
+    Sash = p_ProgramCfg->Read(wxT("/MainFrame/Sash"), 200);
     // wxMessageBox("OnInitView() - Begin ","-I->MainDoc::OnInitView");
     //---------------------------------------------------------------------------------------
     // create "workplace" window
@@ -103,9 +103,9 @@ bool MainDoc::OnInitView()
     p_PgmCtrl->i_TabArt = 0; // 0 = Tab ; 1 = Page
     p_PgmCtrl->i_ViewNr = p_TabArea->GetTabCount()-1;
     //---------------------------------------------------------------------------------------
-    wxBitmap *p_FolderClose = new wxBitmap(_T("PgmCtrl")); //, wxBITMAP_TYPE_BMP_RESOURCE); // BJO20000115
+    wxBitmap *p_FolderClose = new wxBitmap(wxT("PgmCtrl")); //, wxBITMAP_TYPE_BMP_RESOURCE); // BJO20000115
     //---------------------------------------------------------------------------------------
-    p_TabArea->AddTab(p_PgmCtrl,_T("PgmCtrl"),p_FolderClose);
+    p_TabArea->AddTab(p_PgmCtrl,wxT("PgmCtrl"),p_FolderClose);
     delete p_FolderClose;      // Memory leak
     p_FolderClose = NULL;
     wxUnusedVar(p_FolderClose);
@@ -124,7 +124,7 @@ bool MainDoc::OnInitView()
     p_LogBook->SetActiveTarget(p_LogBook);
     p_LogBook->SetTimestamp( NULL );
     //---------------------------------------------------------------------------------------
-    p_PageArea->AddTab(p_LogWin,_("LogBook"), _T("what is this?") );
+    p_PageArea->AddTab(p_LogWin,_("LogBook"), wxT("what is this?") );
     i_TabNr  = p_TabArea->GetTabCount()-1;  // Add one when a new AddTab is done;
     i_PageNr = p_PageArea->GetTabCount()-1; // Add one when a new AddTab is done;
     //---------------------------------------------------------------------------------------
@@ -173,7 +173,7 @@ bool MainDoc::OnInitODBC()
     while (wxDbGetDataSource(DbConnectInf.GetHenv(), Dsn, SQL_MAX_DSN_LENGTH, DsDesc, 254))
     {
         i_DSN++;   // How many Dsn have we ?
-        KeyString.Printf(_T("%s%c%s"),Dsn, sep, DsDesc);
+        KeyString.Printf(wxT("%s%c%s"),Dsn, sep, DsDesc);
         s_SortDSNList.Add(Dsn);
         s_SortDsDescList.Add(KeyString);
     }
@@ -193,7 +193,7 @@ bool MainDoc::OnInitODBC()
         (p_DSN+i)->Drv = KeyString;
         (p_DSN+i)->Usr = wxEmptyString;
         (p_DSN+i)->Pas = wxEmptyString;
-        Temp0.Printf(_T("%02d) Dsn(%s) DsDesc(%s)"),i,(p_DSN+i)->Dsn.c_str(),(p_DSN+i)->Drv.c_str());
+        Temp0.Printf(wxT("%02d) Dsn(%s) DsDesc(%s)"),i,(p_DSN+i)->Dsn.c_str(),(p_DSN+i)->Drv.c_str());
         wxLogMessage(Temp0);
 
         // wxDataBase object
@@ -236,7 +236,7 @@ bool MainDoc::OnChosenDSN(int Which)
     p_TabArea->Show(false);    // Deactivate the Window
     p_DBTree = new DBTree(p_TabArea, TREE_CTRL_DB,wxDefaultPosition, wxDefaultSize,
         wxTR_HAS_BUTTONS | wxSUNKEN_BORDER);
-    p_TabArea->AddTab(p_DBTree,(p_DSN+Which)->Dsn,_T(" ? "));
+    p_TabArea->AddTab(p_DBTree,(p_DSN+Which)->Dsn,wxT(" ? "));
     p_DBTree->i_ViewNr = p_TabArea->GetTabCount()-1;
     p_TabArea->Show(true);    // Deactivate the Window
     p_DBTree->i_Which  = Which;
--- demos/dbbrowse/dbbrowse.cpp-orig	2009-06-18 16:40:52.837429000 -0500
+++ demos/dbbrowse/dbbrowse.cpp	2009-06-18 16:41:08.881005000 -0500
@@ -93,8 +93,8 @@ bool MainApp::OnInit(void)  // Does ever
     //---------------------------------------------------------------------------------------
     // Win-Registry : Workplace\HKEY_CURRENT_USERS\Software\%GetVendorName()\%GetAppName()
     //---------------------------------------------------------------------------------------
-    SetVendorName(_T("mj10777"));           // Needed to get Configuration Information
-    SetAppName(_T("DBBrowse"));             // "" , also needed for s_LangHelp
+    SetVendorName(wxT("mj10777"));           // Needed to get Configuration Information
+    SetAppName(wxT("DBBrowse"));             // "" , also needed for s_LangHelp
     //---------------------------------------------------------------------------------------
     // we're using wxConfig's "create-on-demand" feature: it will create the
     // config object when it's used for the first time. It has a number of
@@ -109,77 +109,77 @@ bool MainApp::OnInit(void)  // Does ever
     //---------------------------------------------------------------------------------------
     p_ProgramCfg = wxConfigBase::Get();  // Get Program Configuration from Registry
     // p_ProgramCfg->DeleteAll();           // This is how the Config can be erased
-    p_ProgramCfg->SetPath(_T("/"));          // Start at root
+    p_ProgramCfg->SetPath(wxT("/"));          // Start at root
     //---------------------------------------------------------------------------------------
     //-- Set the Language and remember it for the next time. --------------------------------
     //---------------------------------------------------------------------------------------
     if (langid == NULL) // No Parameter was given
     {
         Temp0.Empty();
-        p_ProgramCfg->Read(_T("/Local/langid"),&Temp0); // >const char *langid< can't be used here
+        p_ProgramCfg->Read(wxT("/Local/langid"),&Temp0); // >const char *langid< can't be used here
         if (Temp0.empty())
-            langid = _T("std");  // Standard language is "std" = english
+            langid = wxT("std");  // Standard language is "std" = english
         else
             langid = Temp0;
     }
-    Temp0.Printf(_T("%s"),langid);
+    Temp0.Printf(wxT("%s"),langid);
     //---------------------------------------------------------------------------------------
     // Support the following languages  (std = english)
-    if ((Temp0 == _T("a"))  || (Temp0 == _T("cz")) || (Temp0 == _T("de")) ||
-        (Temp0 == _T("fr")) || (Temp0 == _T("pl")))
+    if ((Temp0 == wxT("a"))  || (Temp0 == wxT("cz")) || (Temp0 == wxT("de")) ||
+        (Temp0 == wxT("fr")) || (Temp0 == wxT("pl")))
     { // The three-letter language-string codes are only valid in Windows NT and Windows 95.
-        if (Temp0 == _T("cz"))
-            language = _T("czech");  // csy or czech
-        if ((Temp0 == _T("de")) || (Temp0 == _T("a")))
+        if (Temp0 == wxT("cz"))
+            language = wxT("czech");  // csy or czech
+        if ((Temp0 == wxT("de")) || (Temp0 == wxT("a")))
         {
-            language = _T("german");  // deu or german
-            if (Temp0 == _T("a"))
-            { langid = Temp0 = _T("de"); }  // Austrian = german
+            language = wxT("german");  // deu or german
+            if (Temp0 == wxT("a"))
+            { langid = Temp0 = wxT("de"); }  // Austrian = german
         } // german / austrian
-        if (Temp0 == _T("fr"))
-            language = _T("french");  // fra or french
-        if (Temp0 == _T("pl"))
-            language = _T("polish");  // plk or polish
+        if (Temp0 == wxT("fr"))
+            language = wxT("french");  // fra or french
+        if (Temp0 == wxT("pl"))
+            language = wxT("polish");  // plk or polish
         if (!m_locale.Init(language, langid, language)) // Don't do this for english (std)
         { // You should recieve errors here for cz and pl since there is no cz/ and pl/ directory
-            wxLogMessage(_T("-E-> %s : SetLocale error : langid(%s) ; language(%s)"),GetAppName().c_str(),langid,language);
-            langid = _T("std");
-            language = _T("C");  // english, english-aus , -can , -nz , -uk , -usa
+            wxLogMessage(wxT("-E-> %s : SetLocale error : langid(%s) ; language(%s)"),GetAppName().c_str(),langid,language);
+            langid = wxT("std");
+            language = wxT("C");  // english, english-aus , -can , -nz , -uk , -usa
         }
         else
         { // Read in Foreign language's text for GetAppName() and Help
             Temp0 = GetAppName();
             Temp0 = Temp0.Lower();
             m_locale.AddCatalog(Temp0.c_str());
-            m_locale.AddCatalog(_T("help"));
+            m_locale.AddCatalog(wxT("help"));
         }
     } // Support the following languages  (std = english)
     else
     {
-        langid = _T("std");
-        language = _T("C");  // english, english-aus , -can , -nz , -uk , -usa
+        langid = wxT("std");
+        language = wxT("C");  // english, english-aus , -can , -nz , -uk , -usa
     }
-    s_Language.Printf(_T("%s"),language);                       // language is a pointer
-    s_LangId.Printf(_T("%s"),langid);                           // langid   is a pointer
-    p_ProgramCfg->Write(_T("/Local/language"),s_Language);
-    p_ProgramCfg->Write(_T("/Local/langid"),s_LangId);
-    s_LangHelp.Printf(_T("help.%s/%s.hhp"),s_LangId.c_str(),GetAppName().c_str()); // "help.std/Garantie.hhp";
+    s_Language.Printf(wxT("%s"),language);                       // language is a pointer
+    s_LangId.Printf(wxT("%s"),langid);                           // langid   is a pointer
+    p_ProgramCfg->Write(wxT("/Local/language"),s_Language);
+    p_ProgramCfg->Write(wxT("/Local/langid"),s_LangId);
+    s_LangHelp.Printf(wxT("help.%s/%s.hhp"),s_LangId.c_str(),GetAppName().c_str()); // "help.std/Garantie.hhp";
     s_LangHelp = s_LangHelp.Lower();                       // A must for Linux
     //---------------------------------------------------------------------------------------
-    Temp0 = _T("NONE");                               // I don't remember why I did this
-    p_ProgramCfg->Write(_T("/NONE"),Temp0);           // I don't remember why I did this
-    p_ProgramCfg->Write(_T("/Paths/NONE"),Temp0);     // I don't remember why I did this
-    p_ProgramCfg->Write(_T("/MainFrame/NONE"),Temp0); // I don't remember why I did this
+    Temp0 = wxT("NONE");                               // I don't remember why I did this
+    p_ProgramCfg->Write(wxT("/NONE"),Temp0);           // I don't remember why I did this
+    p_ProgramCfg->Write(wxT("/Paths/NONE"),Temp0);     // I don't remember why I did this
+    p_ProgramCfg->Write(wxT("/MainFrame/NONE"),Temp0); // I don't remember why I did this
     //---------------------------------------------------------------------------------------
-    p_ProgramCfg->Write(_T("/Paths/Work"),wxGetCwd()); // Get current Working Path
-    p_ProgramCfg->SetPath(_T("/"));
+    p_ProgramCfg->Write(wxT("/Paths/Work"),wxGetCwd()); // Get current Working Path
+    p_ProgramCfg->SetPath(wxT("/"));
     //---------------------------------------------------------------------------------------
     // restore frame position and size, if empty start Values (1,1) and (750,600)
-    int x = p_ProgramCfg->Read(_T("/MainFrame/x"), 1), y = p_ProgramCfg->Read(_T("/MainFrame/y"), 1),
-        w = p_ProgramCfg->Read(_T("/MainFrame/w"), 750), h = p_ProgramCfg->Read(_T("/MainFrame/h"), 600);
+    int x = p_ProgramCfg->Read(wxT("/MainFrame/x"), 1), y = p_ProgramCfg->Read(wxT("/MainFrame/y"), 1),
+        w = p_ProgramCfg->Read(wxT("/MainFrame/w"), 750), h = p_ProgramCfg->Read(wxT("/MainFrame/h"), 600);
     //---------------------------------------------------------------------------------------
     // Create the main frame window
-    Temp0.Printf(_T("%s - %s"),GetAppName().c_str(),GetVendorName().c_str());
+    Temp0.Printf(wxT("%s - %s"),GetAppName().c_str(),GetVendorName().c_str());
     frame = new MainFrame((wxFrame *) NULL,(wxChar *) Temp0.c_str(),wxPoint(x,y),wxSize(w,h));
     //---------------------------------------------------------------------------------------
     // Set the Backgroundcolour (only needed if you are NOT using wxSYS_COLOUR_BACKGROUND)
@@ -243,7 +243,7 @@ bool MainApp::OnInit(void)  // Does ever
     // You should recieve errors here for fr since there is no help.fr/ directory
     if (!frame->p_Help->AddBook(s_LangHelp))      // Use the language set
     { // You should recieve errors here for fr since there is no help.fr/ but a fr/ directory
-        wxLogMessage(_T("-E-> %s : AddBook error : s_LangHelp(%s)"),GetAppName().c_str(),s_LangHelp.c_str());
+        wxLogMessage(wxT("-E-> %s : AddBook error : s_LangHelp(%s)"),GetAppName().c_str(),s_LangHelp.c_str());
     }
     frame->pDoc->p_Help = frame->p_Help;          // Save the information to the document
     //---------------------------------------------------------------------------------------
@@ -284,11 +284,11 @@ MainFrame::~MainFrame(void)
     int x, y, w, h;
     GetPosition(&x, &y);
     GetClientSize(&w, &h); w -= DiffW; h -= DiffH;
-    p_ProgramCfg->Write(_T("/MainFrame/x"), (long) x);
-    p_ProgramCfg->Write(_T("/MainFrame/y"), (long) y);
-    p_ProgramCfg->Write(_T("/MainFrame/w"), (long) w);
-    p_ProgramCfg->Write(_T("/MainFrame/h"), (long) h);
-    p_ProgramCfg->Write(_T("/MainFrame/Sash"), (long) pDoc->Sash);
+    p_ProgramCfg->Write(wxT("/MainFrame/x"), (long) x);
+    p_ProgramCfg->Write(wxT("/MainFrame/y"), (long) y);
+    p_ProgramCfg->Write(wxT("/MainFrame/w"), (long) w);
+    p_ProgramCfg->Write(wxT("/MainFrame/h"), (long) h);
+    p_ProgramCfg->Write(wxT("/MainFrame/Sash"), (long) pDoc->Sash);
     // clean up: Set() returns the active config object as Get() does, but unlike
     // Get() it doesn't try to create one if there is none (definitely not what
     // we want here!)
@@ -317,6 +317,6 @@ void MainFrame::OnAbout(wxCommandEvent& 
 //----------------------------------------------------------------------------------------
 void MainFrame::OnHelp(wxCommandEvent& WXUNUSED(event))
 {
-    p_Help->Display(_T("Main page"));
+    p_Help->Display(wxT("Main page"));
 }
 //----------------------------------------------------------------------------------------
--- demos/dbbrowse/dbgrid.cpp-orig	2009-06-18 16:41:14.465990000 -0500
+++ demos/dbbrowse/dbgrid.cpp	2009-06-18 16:41:22.203216000 -0500
@@ -113,7 +113,7 @@ int  DBGrid::OnTableView(wxString Table)
                     // The Grid has been created, now fill it
                     for (z=0;z<(db_Br+i_Which)->i_Records;z++)                      // Loop through the Records
                     {
-                        Temp0.Printf(_T("%06d"),z+1);  SetRowLabelValue(z,Temp0);          // Set Row Lable Value
+                        Temp0.Printf(wxT("%06d"),z+1);  SetRowLabelValue(z,Temp0);          // Set Row Lable Value
                         (db_Br+i_Which)->OnGetNext((ct_BrowserDB->pTableInf+ValidTable)->numCols,false);
                         for (y=0;y<(ct_BrowserDB->pTableInf+ValidTable)->numCols;y++) // Loop through the Fields
                         { // BrowserDB::OnGetNext Formats the field Value into tablename
@@ -187,9 +187,9 @@ void DBGrid::OnEditorHidden( wxGridEvent
 void DBGrid::OnSelectCell( wxGridEvent& ev )
 {
     logBuf = wxEmptyString;
-    logBuf << _T("Selected cell at row ") << ev.GetRow()
-        << _T(" col ") << ev.GetCol();
-    wxLogMessage( _T("%s"), logBuf.c_str() );
+    logBuf << wxT("Selected cell at row ") << ev.GetRow()
+        << wxT(" col ") << ev.GetCol();
+    wxLogMessage( wxT("%s"), logBuf.c_str() );
     // you must call Skip() if you want the default processing
     // to occur in wxGrid
     ev.Skip();
@@ -204,24 +204,24 @@ void DBGrid::OnMouseMove(wxMouseEvent &e
 //----------------------------------------------------------------------------------------
 void DBGrid::OnLabelLeftClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnLabelLeftClick : ");
+    logBuf = wxT("DBGrid::OnLabelLeftClick : ");
     if ( ev.GetRow() != -1 )
     {
-        logBuf << _T("row label ") << ev.GetRow();
+        logBuf << wxT("row label ") << ev.GetRow();
     }
     else if ( ev.GetCol() != -1 )
     {
-        logBuf << _T("col label ") << ev.GetCol();
+        logBuf << wxT("col label ") << ev.GetCol();
     }
     else
     {
-        logBuf << _T("corner label");
+        logBuf << wxT("corner label");
     }
     if ( ev.ShiftDown() )
-        logBuf << _T(" (shift down)");
+        logBuf << wxT(" (shift down)");
 
     // wxLogMessage( "%s", logBuf.c_str() );
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     ev.Skip();
 }
@@ -235,24 +235,24 @@ void DBGrid::OnLabelRightClick( wxGridEv
     else
         PopupMenu(popupMenu1,MousePos.x,MousePos.y);
     //-------------------
-    logBuf = _T("DBGrid::OnLabelRightClick : ");
+    logBuf = wxT("DBGrid::OnLabelRightClick : ");
     if ( ev.GetRow() != -1 )
     {
-        logBuf << _T("row label ") << ev.GetRow();
+        logBuf << wxT("row label ") << ev.GetRow();
     }
     else if ( ev.GetCol() != -1 )
     {
-        logBuf << _T("col label ") << ev.GetCol();
+        logBuf << wxT("col label ") << ev.GetCol();
     }
     else
     {
-        logBuf << _T("corner label");
+        logBuf << wxT("corner label");
     }
     if ( ev.ShiftDown() )
-        logBuf << _T(" (shift down)");
+        logBuf << wxT(" (shift down)");
 
     // wxLogMessage( "%s", logBuf.c_str() );
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     ev.Skip();
 }
@@ -260,24 +260,24 @@ void DBGrid::OnLabelRightClick( wxGridEv
 //----------------------------------------------------------------------------------------
 void DBGrid::OnLabelLeftDClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnLabelLeftDClick : ");
+    logBuf = wxT("DBGrid::OnLabelLeftDClick : ");
     if ( ev.GetRow() != -1 )
     {
-        logBuf << _T("row label ") << ev.GetRow();
+        logBuf << wxT("row label ") << ev.GetRow();
     }
     else if ( ev.GetCol() != -1 )
     {
-        logBuf << _T("col label ") << ev.GetCol();
+        logBuf << wxT("col label ") << ev.GetCol();
     }
     else
     {
-        logBuf << _T("corner label");
+        logBuf << wxT("corner label");
     }
     if ( ev.ShiftDown() )
-        logBuf << _T(" (shift down)");
+        logBuf << wxT(" (shift down)");
 
-    // wxLogMessage( _T("%s"), logBuf.c_str() );
-    logBuf += _T("\n");
+    // wxLogMessage( wxT("%s"), logBuf.c_str() );
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     ev.Skip();
 }
@@ -285,23 +285,23 @@ void DBGrid::OnLabelLeftDClick( wxGridEv
 //----------------------------------------------------------------------------------------
 void DBGrid::OnLabelRightDClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnLabelRightDClick : ");
+    logBuf = wxT("DBGrid::OnLabelRightDClick : ");
     if ( ev.GetRow() != -1 )
     {
-        logBuf << _T("row label ") << ev.GetRow();
+        logBuf << wxT("row label ") << ev.GetRow();
     }
     else if ( ev.GetCol() != -1 )
     {
-        logBuf << _T("col label ") << ev.GetCol();
+        logBuf << wxT("col label ") << ev.GetCol();
     }
     else
     {
-        logBuf << _T("corner label");
+        logBuf << wxT("corner label");
     }
     if ( ev.ShiftDown() )
-        logBuf << _T(" (shift down)");
+        logBuf << wxT(" (shift down)");
     // wxLogMessage( "%s", logBuf.c_str() );
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     ev.Skip();
 }
@@ -309,12 +309,12 @@ void DBGrid::OnLabelRightDClick( wxGridE
 //----------------------------------------------------------------------------------------
 void DBGrid::OnCellLeftClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnCellLeftClick : ");
-    logBuf << _T("Cell at row ") << ev.GetRow()
-        << _T(" col ") << ev.GetCol();
+    logBuf = wxT("DBGrid::OnCellLeftClick : ");
+    logBuf << wxT("Cell at row ") << ev.GetRow()
+        << wxT(" col ") << ev.GetCol();
     // wxLogMessage( "%s", logBuf.c_str() );
     // wxMessageBox(logBuf);
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     // you must call event skip if you want default grid processing
     // (cell highlighting etc.)
@@ -325,12 +325,12 @@ void DBGrid::OnCellLeftClick( wxGridEven
 //----------------------------------------------------------------------------------------
 void DBGrid::OnCellRightClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnCellRightClick : ");
-    logBuf << _T("Cell at row ") << ev.GetRow()
-        << _T(" col ") << ev.GetCol();
+    logBuf = wxT("DBGrid::OnCellRightClick : ");
+    logBuf << wxT("Cell at row ") << ev.GetRow()
+        << wxT(" col ") << ev.GetCol();
     // wxLogMessage( "%s", logBuf.c_str() );
     // wxMessageBox(logBuf);
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     // you must call event skip if you want default grid processing
     // (cell highlighting etc.)
@@ -341,12 +341,12 @@ void DBGrid::OnCellRightClick( wxGridEve
 //----------------------------------------------------------------------------------------
 void DBGrid::OnCellLeftDClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnCellLeftDClick : ");
-    logBuf << _T("Cell at row ") << ev.GetRow()
-        << _T(" col ") << ev.GetCol();
+    logBuf = wxT("DBGrid::OnCellLeftDClick : ");
+    logBuf << wxT("Cell at row ") << ev.GetRow()
+        << wxT(" col ") << ev.GetCol();
     // wxLogMessage( "%s", logBuf.c_str() );
     // wxMessageBox(logBuf);
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     // you must call event skip if you want default grid processing
     // (cell highlighting etc.)
@@ -357,12 +357,12 @@ void DBGrid::OnCellLeftDClick( wxGridEve
 //----------------------------------------------------------------------------------------
 void DBGrid::OnCellRightDClick( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnCellRightDClick : ");
-    logBuf << _T("Cell at row ") << ev.GetRow()
-        << _T(" col ") << ev.GetCol();
+    logBuf = wxT("DBGrid::OnCellRightDClick : ");
+    logBuf << wxT("Cell at row ") << ev.GetRow()
+        << wxT(" col ") << ev.GetCol();
     // wxLogMessage( "%s", logBuf.c_str() );
     // wxMessageBox(logBuf);
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     // you must call event skip if you want default grid processing
     // (cell highlighting etc.)
@@ -373,12 +373,12 @@ void DBGrid::OnCellRightDClick( wxGridEv
 //----------------------------------------------------------------------------------------
 void DBGrid::OnCellChange( wxGridEvent& ev )
 {
-    logBuf = _T("DBGrid::OnCellChange : ");
-    logBuf << _T("Cell at row ") << ev.GetRow()
-        << _T(" col ") << ev.GetCol();
+    logBuf = wxT("DBGrid::OnCellChange : ");
+    logBuf << wxT("Cell at row ") << ev.GetRow()
+        << wxT(" col ") << ev.GetCol();
     // wxLogMessage( "%s", logBuf.c_str() );
     // wxMessageBox(logBuf);
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     // you must call event skip if you want default grid processing
     // (cell highlighting etc.)
@@ -389,10 +389,10 @@ void DBGrid::OnCellChange( wxGridEvent& 
 //----------------------------------------------------------------------------------------
 void DBGrid::OnRowSize( wxGridSizeEvent& ev )
 {
-    logBuf = _T("DBGrid::OnRowSize : ");
-    logBuf << _T("Resized row ") << ev.GetRowOrCol();
+    logBuf = wxT("DBGrid::OnRowSize : ");
+    logBuf << wxT("Resized row ") << ev.GetRowOrCol();
     // wxLogMessage( "%s", logBuf.c_str() );
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     ev.Skip();
 }
@@ -400,10 +400,10 @@ void DBGrid::OnRowSize( wxGridSizeEvent&
 //----------------------------------------------------------------------------------------
 void DBGrid::OnColSize( wxGridSizeEvent& ev )
 {
-    logBuf = _T("DBGrid::OnColSize : ");
-    logBuf << _T("Resized col ") << ev.GetRowOrCol();
+    logBuf = wxT("DBGrid::OnColSize : ");
+    logBuf << wxT("Resized col ") << ev.GetRowOrCol();
     // wxLogMessage( "%s", logBuf.c_str() );
-    logBuf += _T("\n");
+    logBuf += wxT("\n");
     wxLogMessage(logBuf.c_str());
     ev.Skip();
 }
@@ -411,12 +411,12 @@ void DBGrid::OnColSize( wxGridSizeEvent&
 //----------------------------------------------------------------------------------------
 void DBGrid::OnRangeSelected( wxGridRangeSelectEvent& ev )
 {
-    logBuf = _T("DBGrid::OnRangeSelected : ");
-    logBuf  << _T("Selected cells from row ") << ev.GetTopRow()
-        << _T(" col ") << ev.GetLeftCol()
-        << _T(" to row ") << ev.GetBottomRow()
-        << _T(" col ") << ev.GetRightCol();
-    logBuf += _T("\n");
+    logBuf = wxT("DBGrid::OnRangeSelected : ");
+    logBuf  << wxT("Selected cells from row ") << ev.GetTopRow()
+        << wxT(" col ") << ev.GetLeftCol()
+        << wxT(" to row ") << ev.GetBottomRow()
+        << wxT(" col ") << ev.GetRightCol();
+    logBuf += wxT("\n");
     // wxLogMessage( "%s", logBuf.c_str() );
     wxLogMessage(logBuf.c_str());
     ev.Skip();
--- demos/dbbrowse/pgmctrl.cpp-orig	2009-06-18 16:41:30.147744000 -0500
+++ demos/dbbrowse/pgmctrl.cpp	2009-06-18 16:41:39.345893000 -0500
@@ -39,7 +39,7 @@
 //----------------------------------------------------------------------------------------
 static inline const wxChar *bool2String(bool b)
 {
-    return b ? wxEmptyString : _T("not ");
+    return b ? wxEmptyString : wxT("not ");
 }
 
 //----------------------------------------------------------------------------------------
@@ -97,21 +97,21 @@ int  PgmCtrl::OnPopulate()
     int i;
     double dTmp = 1234567.89;
     Temp0.Printf(_("%s Functions"),p_ProgramCfg->GetAppName().c_str());
-    Root   = AddRoot(Temp0,TreeIc_Logo,TreeIc_Logo, new TreeData(_T("Root")));
+    Root   = AddRoot(Temp0,TreeIc_Logo,TreeIc_Logo, new TreeData(wxT("Root")));
     //---------------------------------------------------------------------------------------
-    Folder = AppendItem(Root, _("Program settings")   ,TreeIc_FolderClosed, TreeIc_FolderOpen, new TreeData(_T("Settings")));
-    p_ProgramCfg->Read(_T("/Local/langid"),&Temp0); p_ProgramCfg->Read(_T("/Local/language"),&Temp2);
+    Folder = AppendItem(Root, _("Program settings")   ,TreeIc_FolderClosed, TreeIc_FolderOpen, new TreeData(wxT("Settings")));
+    p_ProgramCfg->Read(wxT("/Local/langid"),&Temp0); p_ProgramCfg->Read(wxT("/Local/language"),&Temp2);
     Temp1.Printf(_("locale (%s) ; Language (%s) ; Number(%2.2f)"),Temp0.c_str(), Temp2.c_str(), dTmp); Temp0.Empty();  Temp2.Empty();
-    Docu   = AppendItem(Folder, Temp1,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(_T("Setting Language")));
-    p_ProgramCfg->Read(_T("/Paths/Work"),&Temp0); Temp1.Printf(_("Work Path : %s"),Temp0.c_str()); Temp0.Empty();
-    Docu   = AppendItem(Folder,Temp1,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(_T("Path Work")));
-    Docu   = AppendItem(Folder, _("Change the language to English") ,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(_T("Language English")));
-    Docu   = AppendItem(Folder, _("Change the language to German")  ,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(_T("Language German")));
-    Docu   = AppendItem(Folder, _("Delete all wxConfigBase Entry's"),TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(_T("wxConfigBase Delete")));
-    Folder = AppendItem(Root, _T("ODBC DSN"),TreeIc_FolderClosed,TreeIc_FolderOpen,new TreeData(_T("ODBC-DSN")));
+    Docu   = AppendItem(Folder, Temp1,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(wxT("Setting Language")));
+    p_ProgramCfg->Read(wxT("/Paths/Work"),&Temp0); Temp1.Printf(_("Work Path : %s"),Temp0.c_str()); Temp0.Empty();
+    Docu   = AppendItem(Folder,Temp1,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(wxT("Path Work")));
+    Docu   = AppendItem(Folder, _("Change the language to English") ,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(wxT("Language English")));
+    Docu   = AppendItem(Folder, _("Change the language to German")  ,TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(wxT("Language German")));
+    Docu   = AppendItem(Folder, _("Delete all wxConfigBase Entry's"),TreeIc_DocClosed,TreeIc_DocOpen,new TreeData(wxT("wxConfigBase Delete")));
+    Folder = AppendItem(Root, wxT("ODBC DSN"),TreeIc_FolderClosed,TreeIc_FolderOpen,new TreeData(wxT("ODBC-DSN")));
     for (i=0;i<pDoc->i_DSN;i++)
     {
-        Temp0.Printf(_T("ODBC-%s"),(pDoc->p_DSN+i)->Dsn.c_str());
+        Temp0.Printf(wxT("ODBC-%s"),(pDoc->p_DSN+i)->Dsn.c_str());
         Docu   = AppendItem(Folder,(pDoc->p_DSN+i)->Dsn ,TreeIc_DsnClosed,TreeIc_DsnOpen, new TreeData(Temp0));
     }
     //---------------------------------------------------------------------------------------
@@ -140,24 +140,24 @@ void PgmCtrl::OnSelChanged(wxMouseEvent&
     if (item != NULL )
     {
         int Treffer = 0;
-        Temp1.Printf(_T("%s"),item->m_desc.c_str());
+        Temp1.Printf(wxT("%s"),item->m_desc.c_str());
         //--------------------------------------------------------------------------------------
-        if (Temp1 == _T("Language English"))
+        if (Temp1 == wxT("Language English"))
         {
-            Temp0 = _T("std");
-            p_ProgramCfg->Write(_T("/Local/langid"),Temp0);
+            Temp0 = wxT("std");
+            p_ProgramCfg->Write(wxT("/Local/langid"),Temp0);
             Temp0 = _("-I-> After a programm restart, the language will be changed to English.");
             wxMessageBox(Temp0);
         }
-        if (Temp1 == _T("Language German"))
+        if (Temp1 == wxT("Language German"))
         {
-            Temp0 = _T("de");
-            p_ProgramCfg->Write(_T("/Local/langid"),Temp0);
+            Temp0 = wxT("de");
+            p_ProgramCfg->Write(wxT("/Local/langid"),Temp0);
             Temp0 = _("-I-> After a programm restart, the language will be changed to German.");
             wxMessageBox(Temp0);
         }
         //--------------------------------------------------------------------------------------
-        if (Temp1 == _T("wxConfigBase Delete"))
+        if (Temp1 == wxT("wxConfigBase Delete"))
         {
             if (p_ProgramCfg->DeleteAll()) // Default Diretory for wxFileSelector
                 Temp0 = _("-I-> wxConfigBase.p_ProgramCfg->DeleteAll() was successful.");
@@ -167,7 +167,7 @@ void PgmCtrl::OnSelChanged(wxMouseEvent&
             Treffer++;
         }
         //--------------------------------------------------------------------------------------
-        if (Temp1.Contains(_T("ODBC-")))
+        if (Temp1.Contains(wxT("ODBC-")))
         {
             Temp1 = Temp1.Mid(5);
             for (i=0;i<pDoc->i_DSN;i++)
@@ -190,8 +190,8 @@ void PgmCtrl::OnSelChanged(wxMouseEvent&
                 bool2String(IsBold(itemId)),
                 GetChildrenCount(itemId),
                 GetChildrenCount(itemId));
-            LogBuf.Printf(_T("-I-> PgmCtrl::OnSelChanged - %s"),Temp0.c_str());
-            wxLogMessage( _T("%s"), LogBuf.c_str() );
+            LogBuf.Printf(wxT("-I-> PgmCtrl::OnSelChanged - %s"),Temp0.c_str());
+            wxLogMessage( wxT("%s"), LogBuf.c_str() );
             //-------------------------------------------------------------------------------------
         }
     }
@@ -209,9 +209,9 @@ void PgmCtrl::OnRightSelect(wxTreeEvent&
     if ( item != NULL )
     {
         int Treffer = 0;
-        Temp1.Printf(_T("%s"),item->m_desc.c_str());
+        Temp1.Printf(wxT("%s"),item->m_desc.c_str());
         //--------------------------------------------------------------------------------------
-        if (Temp1.Contains(_T("ODBC-")))
+        if (Temp1.Contains(wxT("ODBC-")))
         {
             Temp1 = Temp1.Mid(5);
             for (i=0;i<pDoc->i_DSN;i++)
--- demos/dbbrowse/browsedb.cpp-orig	2009-06-18 16:41:49.048723000 -0500
+++ demos/dbbrowse/browsedb.cpp	2009-06-18 16:41:57.563922000 -0500
@@ -39,15 +39,15 @@ wxChar *GetExtendedDBErrorMsg(wxChar *Er
     wxString tStr;
     if (ErrFile || ErrLine)
     {
-        msg += _T("File: ");
+        msg += wxT("File: ");
         msg += ErrFile;
-        msg += _T("   Line: ");
-        tStr.Printf(_T("%d"),ErrLine);
+        msg += wxT("   Line: ");
+        tStr.Printf(wxT("%d"),ErrLine);
         msg += tStr.GetData();
-        // msg += _T("\n");
+        // msg += wxT("\n");
     }
-    msg.Append (_T("\nODBC errors:\n"));
-    // msg += _T("\n");
+    msg.Append (wxT("\nODBC errors:\n"));
+    // msg += wxT("\n");
     /* Scan through each database connection displaying
     * any ODBC errors that have occurred. */
     wxDbList *pDbList;
@@ -63,11 +63,11 @@ wxChar *GetExtendedDBErrorMsg(wxChar *Er
             {
                 msg.Append(pDbList->PtrDb->errorList[i]);
                 if (wxStrcmp(pDbList->PtrDb->errorList[i],wxEmptyString) != 0)
-                    msg.Append(_T("\n"));
+                    msg.Append(wxT("\n"));
             }
         }
     }
-    msg += _T("\n");
+    msg += wxT("\n");
     return (wxChar*) (const wxChar*) msg;
 }  // GetExtendedDBErrorMsg
 
@@ -219,7 +219,7 @@ bool BrowserDB::OnGetNext(int Cols,int W
         int i;
         for (i=0;i<Cols;i++)
         {
-            wxStrcpy((cl_BrowserDB+i)->tableName,_T("-E->"));
+            wxStrcpy((cl_BrowserDB+i)->tableName,wxT("-E->"));
             i_dbDataType = (cl_BrowserDB+i)->pColFor->i_dbDataType;
             if (i_dbDataType == 0)         // Filter unsupported dbDataTypes
             {
@@ -345,13 +345,13 @@ bool BrowserDB::OnSelect(wxString tb_Nam
     i_Records = 0;
     //---------------------------------------------------------------------------------------
     wxString tablename = db_BrowserDB->SQLTableName(tb_Name.c_str());
-    SQLStmt.sprintf(_T("SELECT * FROM %s"),tablename.c_str());
+    SQLStmt.sprintf(wxT("SELECT * FROM %s"),tablename.c_str());
     if (!db_BrowserDB->ExecSql((wxChar *)(SQLStmt.GetData())))
     {
         Temp0.Printf(_("\n-E-> BrowserDB::OnSelect - ODBC-Error with ExecSql of >%s<.\n-E-> "),tb_Name.c_str());
         Temp0 += GetExtendedDBErrorMsg(__TFILE__,__LINE__);
         wxLogMessage(Temp0);
-        wxMessageBox(_T("-E-> BrowserDB::OnSelect - GetData()"));
+        wxMessageBox(wxT("-E-> BrowserDB::OnSelect - GetData()"));
         return false;
     }
     //---------------------------------------------------------------------------------------
@@ -388,7 +388,7 @@ bool BrowserDB::OnExecSql(wxString SQLSt
         if (!Quiet)
             wxLogMessage(Temp0);
         else
-            wxMessageBox(_T("-E-> BrowserDB::OnExecSql - ExecSql()"));
+            wxMessageBox(wxT("-E-> BrowserDB::OnExecSql - ExecSql()"));
         return false;
     }
     if (!Quiet)
@@ -459,39 +459,39 @@ void BrowserDB::PointerToNULL(int Art)
 //----------------------------------------------------------------------------------------
 void BrowserDB::OnFillSqlTyp()
 {
-    i_SqlTyp[1]  = SQL_C_BINARY;    s_SqlTyp[1]  = _T("SQL_C_BINARY");
-    i_SqlTyp[2]  = SQL_C_BIT;       s_SqlTyp[2]  = _T("SQL_C_BIT");
-    i_SqlTyp[3]  = SQL_C_BOOKMARK;  s_SqlTyp[3]  = _T("SQL_C_BOOKMARK");
-    i_SqlTyp[4]  = SQL_C_WXCHAR;    s_SqlTyp[4]  = _T("SQL_C_WXCHAR");
-    i_SqlTyp[5]  = SQL_C_DATE;      s_SqlTyp[5]  = _T("SQL_C_DATE");
-    i_SqlTyp[6]  = SQL_C_DEFAULT;   s_SqlTyp[6]  = _T("SQL_C_DEFAULT");
-    i_SqlTyp[7]  = SQL_C_DOUBLE;    s_SqlTyp[7]  = _T("SQL_C_DOUBLE");
-    i_SqlTyp[8]  = SQL_C_FLOAT;     s_SqlTyp[8]  = _T("SQL_C_FLOAT");
-    i_SqlTyp[9]  = SQL_C_LONG;      s_SqlTyp[9]  = _T("SQL_C_LONG");
-    i_SqlTyp[10] = SQL_C_SHORT;     s_SqlTyp[10] = _T("SQL_C_SHORT");
-    i_SqlTyp[11] = SQL_C_SLONG;     s_SqlTyp[11] = _T("SQL_C_SLONG");
-    i_SqlTyp[12] = SQL_C_SSHORT;    s_SqlTyp[12] = _T("SQL_C_SSHORT");
-    i_SqlTyp[13] = SQL_C_STINYINT;  s_SqlTyp[13] = _T("SQL_C_STINYINT");
-    i_SqlTyp[14] = SQL_C_TIME;      s_SqlTyp[14] = _T("SQL_C_TIME");
-    i_SqlTyp[15] = SQL_C_TIMESTAMP; s_SqlTyp[15] = _T("SQL_C_TIMESTAMP");
-    i_SqlTyp[16] = SQL_C_TINYINT;   s_SqlTyp[16] = _T("SQL_C_TINYINT");
-    i_SqlTyp[17] = SQL_C_ULONG;     s_SqlTyp[17] = _T("SQL_C_ULONG");
-    i_SqlTyp[18] = SQL_C_USHORT;    s_SqlTyp[18] = _T("SQL_C_USHORT");
-    i_SqlTyp[19] = SQL_C_UTINYINT;  s_SqlTyp[19] = _T("SQL_C_UTINYINT");
-    i_SqlTyp[20] = SQL_VARCHAR;     s_SqlTyp[20] = _T("SQL_VARCHAR");
-    i_SqlTyp[21] = SQL_NUMERIC;     s_SqlTyp[21] = _T("SQL_NUMERIC");
-    i_SqlTyp[22] = SQL_LONGVARCHAR; s_SqlTyp[22] = _T("SQL_LONGVARCHAR");
-    i_SqlTyp[23] = SQL_REAL;        s_SqlTyp[23] = _T("SQL_REAL");
+    i_SqlTyp[1]  = SQL_C_BINARY;    s_SqlTyp[1]  = wxT("SQL_C_BINARY");
+    i_SqlTyp[2]  = SQL_C_BIT;       s_SqlTyp[2]  = wxT("SQL_C_BIT");
+    i_SqlTyp[3]  = SQL_C_BOOKMARK;  s_SqlTyp[3]  = wxT("SQL_C_BOOKMARK");
+    i_SqlTyp[4]  = SQL_C_WXCHAR;    s_SqlTyp[4]  = wxT("SQL_C_WXCHAR");
+    i_SqlTyp[5]  = SQL_C_DATE;      s_SqlTyp[5]  = wxT("SQL_C_DATE");
+    i_SqlTyp[6]  = SQL_C_DEFAULT;   s_SqlTyp[6]  = wxT("SQL_C_DEFAULT");
+    i_SqlTyp[7]  = SQL_C_DOUBLE;    s_SqlTyp[7]  = wxT("SQL_C_DOUBLE");
+    i_SqlTyp[8]  = SQL_C_FLOAT;     s_SqlTyp[8]  = wxT("SQL_C_FLOAT");
+    i_SqlTyp[9]  = SQL_C_LONG;      s_SqlTyp[9]  = wxT("SQL_C_LONG");
+    i_SqlTyp[10] = SQL_C_SHORT;     s_SqlTyp[10] = wxT("SQL_C_SHORT");
+    i_SqlTyp[11] = SQL_C_SLONG;     s_SqlTyp[11] = wxT("SQL_C_SLONG");
+    i_SqlTyp[12] = SQL_C_SSHORT;    s_SqlTyp[12] = wxT("SQL_C_SSHORT");
+    i_SqlTyp[13] = SQL_C_STINYINT;  s_SqlTyp[13] = wxT("SQL_C_STINYINT");
+    i_SqlTyp[14] = SQL_C_TIME;      s_SqlTyp[14] = wxT("SQL_C_TIME");
+    i_SqlTyp[15] = SQL_C_TIMESTAMP; s_SqlTyp[15] = wxT("SQL_C_TIMESTAMP");
+    i_SqlTyp[16] = SQL_C_TINYINT;   s_SqlTyp[16] = wxT("SQL_C_TINYINT");
+    i_SqlTyp[17] = SQL_C_ULONG;     s_SqlTyp[17] = wxT("SQL_C_ULONG");
+    i_SqlTyp[18] = SQL_C_USHORT;    s_SqlTyp[18] = wxT("SQL_C_USHORT");
+    i_SqlTyp[19] = SQL_C_UTINYINT;  s_SqlTyp[19] = wxT("SQL_C_UTINYINT");
+    i_SqlTyp[20] = SQL_VARCHAR;     s_SqlTyp[20] = wxT("SQL_VARCHAR");
+    i_SqlTyp[21] = SQL_NUMERIC;     s_SqlTyp[21] = wxT("SQL_NUMERIC");
+    i_SqlTyp[22] = SQL_LONGVARCHAR; s_SqlTyp[22] = wxT("SQL_LONGVARCHAR");
+    i_SqlTyp[23] = SQL_REAL;        s_SqlTyp[23] = wxT("SQL_REAL");
     i_SqlTyp[0]  = 23;              s_SqlTyp[0]  = wxEmptyString;
 }
 
 //----------------------------------------------------------------------------------------
 void BrowserDB::OnFilldbTyp()
 {
-    i_dbTyp[1] = DB_DATA_TYPE_VARCHAR; s_dbTyp[1] = _T("DB_DATA_TYPE_VARCHAR");
-    i_dbTyp[2] = DB_DATA_TYPE_INTEGER; s_dbTyp[2] = _T("DB_DATA_TYPE_INTEGER");
-    i_dbTyp[3] = DB_DATA_TYPE_FLOAT;   s_dbTyp[3] = _T("DB_DATA_TYPE_FLOAT");
-    i_dbTyp[4] = DB_DATA_TYPE_DATE;    s_dbTyp[4] = _T("DB_DATA_TYPE_DATE");
+    i_dbTyp[1] = DB_DATA_TYPE_VARCHAR; s_dbTyp[1] = wxT("DB_DATA_TYPE_VARCHAR");
+    i_dbTyp[2] = DB_DATA_TYPE_INTEGER; s_dbTyp[2] = wxT("DB_DATA_TYPE_INTEGER");
+    i_dbTyp[3] = DB_DATA_TYPE_FLOAT;   s_dbTyp[3] = wxT("DB_DATA_TYPE_FLOAT");
+    i_dbTyp[4] = DB_DATA_TYPE_DATE;    s_dbTyp[4] = wxT("DB_DATA_TYPE_DATE");
     i_dbTyp[0] = 4;                    s_dbTyp[0] = wxEmptyString;
 }
 //----------------------------------------------------------------------------------------
--- demos/dbbrowse/dlguser.cpp-orig	2009-06-18 16:42:05.030397000 -0500
+++ demos/dbbrowse/dlguser.cpp	2009-06-18 16:42:10.823918000 -0500
@@ -37,7 +37,7 @@ DlgUser::DlgUser(wxWindow *parent, MainD
     ratio = (float)2.1;
 #endif
 
-    SetBackgroundColour(_T("wheat"));
+    SetBackgroundColour(wxT("wheat"));
     pDoc = p_Doc;
     wxLayoutConstraints* layout;
     SetAutoLayout(true);
@@ -115,7 +115,7 @@ DlgUser::DlgUser(wxWindow *parent, MainD
 //----------------------------------------------------------------------------------------
 void DlgUser::OnInit()
 {
-    wxString Temp; Temp.Printf(_T(">>> %s <<<"),s_DSN.c_str());
+    wxString Temp; Temp.Printf(wxT(">>> %s <<<"),s_DSN.c_str());
     SetTitle(Temp);
     m_UserName->SetLabel(s_User);
     m_Password->SetLabel(s_Password);
--- demos/dbbrowse/tabpgwin.h-orig	2009-06-18 16:42:18.618765000 -0500
+++ demos/dbbrowse/tabpgwin.h	2009-06-18 16:42:24.101789000 -0500
@@ -98,7 +98,7 @@ public:
 
  virtual void AddTab( wxWindow*    pContent,           // contained window
                       wxString     tabText,            // tab label
-                      wxString     imageFileName = _T(""), // if "", only text label is displayed
+                      wxString     imageFileName = wxT(""), // if "", only text label is displayed
                       wxBitmapType imageType     = wxBITMAP_TYPE_BMP );
 
  // NOTE:: if this AddTab(..) overload is called, the
--- demos/dbbrowse/tabpgwin.cpp-orig	2009-06-18 16:42:30.537762000 -0500
+++ demos/dbbrowse/tabpgwin.cpp	2009-06-18 16:42:39.313173000 -0500
@@ -493,7 +493,7 @@ wxFont wxTabbedWindow::GetLabelingFont()
 {
     wxFont font;
 #ifdef __WINDOWS__
-    font.SetFaceName(_T("MS Sans Serif"));
+    font.SetFaceName(wxT("MS Sans Serif"));
 #else
     font.SetFamily( wxSWISS );
 #endif
@@ -717,7 +717,7 @@ wxFont wxPagedWindow::GetLabelingFont()
     wxFont font;
 
 #ifdef __WINDOWS__
-    font.SetFaceName(_T("Comic Sans MS"));
+    font.SetFaceName(wxT("Comic Sans MS"));
 #else
     font.SetFamily( wxSWISS );
 #endif
--- demos/poem/wxpoem.cpp-orig	2009-06-18 16:38:56.302448000 -0500
+++ demos/poem/wxpoem.cpp	2009-06-18 16:39:07.555191000 -0500
@@ -79,8 +79,8 @@ static int      current_page = 0;       
 // Backing bitmap
 wxBitmap        *backingBitmap = NULL;
 
-void            PoetryError(wxChar *, wxChar *caption=_T("wxPoem Error"));
-void            PoetryNotify(wxChar *Msg, wxChar *caption=_T("wxPoem"));
+void            PoetryError(wxChar *, wxChar *caption=wxT("wxPoem Error"));
+void            PoetryNotify(wxChar *Msg, wxChar *caption=wxT("wxPoem"));
 void            TryLoadIndex();
 bool            LoadPoem(wxChar *, long);
 int             GetIndex();
@@ -181,7 +181,7 @@ void MainWindow::ScanBuffer(wxDC *dc, bo
         dc->SetFont(*m_normalFont);
     long xx;
     long yy;
-    dc->GetTextExtent(_T("X"), &xx, &yy);
+    dc->GetTextExtent(wxT("X"), &xx, &yy);
     char_height = (int)yy;
 
     if (current_page == 0)
@@ -262,7 +262,7 @@ void MainWindow::ScanBuffer(wxDC *dc, bo
                         line_ptr = line+3;
 
                         m_title = line_ptr;
-                        m_title << _T(" (cont'd)");
+                        m_title << wxT(" (cont'd)");
 
                         dc->GetTextExtent(line_ptr, &xx, &yy);
                         FindMax(&curr_width, (int)xx);
@@ -325,7 +325,7 @@ void MainWindow::ScanBuffer(wxDC *dc, bo
     // Write (cont'd)
     if (page_break)
     {
-        wxChar *cont = _T("(cont'd)");
+        wxChar *cont = wxT("(cont'd)");
 
         dc->SetFont(* m_normalFont);
 
@@ -481,7 +481,7 @@ void MainWindow::Search(bool ask)
 
     if (ask || m_searchString.empty())
     {
-        wxString s = wxGetTextFromUser( _T("Enter search string"), _T("Search"), m_searchString);
+        wxString s = wxGetTextFromUser( wxT("Enter search string"), wxT("Search"), m_searchString);
         if (!s.empty())
         {
             s.MakeLower();
@@ -510,7 +510,7 @@ void MainWindow::Search(bool ask)
         else
         {
             last_poem_start = 0;
-            PoetryNotify(_T("Search string not found."));
+            PoetryNotify(wxT("Search string not found."));
         }
     }
 }
@@ -534,7 +534,7 @@ bool MyApp::OnInit()
 
     TheMainWindow = new MainWindow(NULL,
                                    wxID_ANY,
-                                   _T("wxPoem"),
+                                   wxT("wxPoem"),
                                    wxPoint(XPos, YPos),
                                    wxDefaultSize,
                                    wxCAPTION|wxMINIMIZE_BOX|wxSYSTEM_MENU|wxCLOSE_BOX|wxFULL_REPAINT_ON_RESIZE
@@ -549,8 +549,8 @@ bool MyApp::OnInit()
     }
     else
     {
-        index_filename = _T(DEFAULT_POETRY_IND);
-        data_filename = _T(DEFAULT_POETRY_DAT);
+        index_filename = wxT(DEFAULT_POETRY_IND);
+        data_filename = wxT(DEFAULT_POETRY_DAT);
     }
     TryLoadIndex();
 
@@ -593,20 +593,20 @@ MyCanvas::MyCanvas(wxFrame *frame):
           wxWindow(frame, wxID_ANY)
 {
     m_popupMenu = new wxMenu;
-    m_popupMenu->Append(POEM_NEXT, _T("Next poem/page"));
-    m_popupMenu->Append(POEM_PREVIOUS, _T("Previous page"));
+    m_popupMenu->Append(POEM_NEXT, wxT("Next poem/page"));
+    m_popupMenu->Append(POEM_PREVIOUS, wxT("Previous page"));
     m_popupMenu->AppendSeparator();
-    m_popupMenu->Append(POEM_SEARCH, _T("Search"));
-    m_popupMenu->Append(POEM_NEXT_MATCH, _T("Next match"));
-    m_popupMenu->Append(POEM_COPY, _T("Copy to clipboard"));
-    m_popupMenu->Append(POEM_MINIMIZE, _T("Minimize"));
+    m_popupMenu->Append(POEM_SEARCH, wxT("Search"));
+    m_popupMenu->Append(POEM_NEXT_MATCH, wxT("Next match"));
+    m_popupMenu->Append(POEM_COPY, wxT("Copy to clipboard"));
+    m_popupMenu->Append(POEM_MINIMIZE, wxT("Minimize"));
     m_popupMenu->AppendSeparator();
-    m_popupMenu->Append(POEM_BIGGER_TEXT, _T("Bigger text"));
-    m_popupMenu->Append(POEM_SMALLER_TEXT, _T("Smaller text"));
+    m_popupMenu->Append(POEM_BIGGER_TEXT, wxT("Bigger text"));
+    m_popupMenu->Append(POEM_SMALLER_TEXT, wxT("Smaller text"));
     m_popupMenu->AppendSeparator();
-    m_popupMenu->Append(POEM_ABOUT, _T("About wxPoem"));
+    m_popupMenu->Append(POEM_ABOUT, wxT("About wxPoem"));
     m_popupMenu->AppendSeparator();
-    m_popupMenu->Append(POEM_EXIT, _T("Exit"));
+    m_popupMenu->Append(POEM_EXIT, wxT("Exit"));
 }
 
 MyCanvas::~MyCanvas()
@@ -716,17 +716,17 @@ int LoadIndex(wxChar *file_name)
     if (file_name == NULL)
         return 0;
 
-    wxSprintf(buf, _T("%s.idx"), file_name);
+    wxSprintf(buf, wxT("%s.idx"), file_name);
 
-    index_file = wxFopen(buf, _T("r"));
+    index_file = wxFopen(buf, wxT("r"));
     if (index_file == NULL)
         return 0;
 
-    wxFscanf(index_file, _T("%ld"), &nitems);
+    wxFscanf(index_file, wxT("%ld"), &nitems);
 
     for (int i = 0; i < nitems; i++)
     {
-        wxFscanf(index_file, _T("%ld"), &data);
+        wxFscanf(index_file, wxT("%ld"), &data);
         poem_index[i] = data;
     }
 
@@ -741,7 +741,7 @@ int GetIndex()
     int indexn = (int)(rand() % nitems);
 
     if ((indexn < 0) || (indexn > nitems))
-    { PoetryError(_T("No such poem!"));
+    { PoetryError(wxT("No such poem!"));
       return -1;
     }
     else
@@ -752,9 +752,9 @@ int GetIndex()
 void MainWindow::ReadPreferences()
 {
 #if wxUSE_RESOURCES
-    wxGetResource(_T("wxPoem"), _T("FontSize"), &pointSize);
-    wxGetResource(_T("wxPoem"), _T("X"), &XPos);
-    wxGetResource(_T("wxPoem"), _T("Y"), &YPos);
+    wxGetResource(wxT("wxPoem"), wxT("FontSize"), &pointSize);
+    wxGetResource(wxT("wxPoem"), wxT("X"), &XPos);
+    wxGetResource(wxT("wxPoem"), wxT("Y"), &YPos);
 #endif
 }
 
@@ -764,9 +764,9 @@ void MainWindow::WritePreferences()
 #ifdef __WXMSW__
     TheMainWindow->GetPosition(&XPos, &YPos);
 #if wxUSE_RESOURCES
-    wxWriteResource(_T("wxPoem"), _T("FontSize"), pointSize);
-    wxWriteResource(_T("wxPoem"), _T("X"), XPos);
-    wxWriteResource(_T("wxPoem"), _T("Y"), YPos);
+    wxWriteResource(wxT("wxPoem"), wxT("FontSize"), pointSize);
+    wxWriteResource(wxT("wxPoem"), wxT("X"), XPos);
+    wxWriteResource(wxT("wxPoem"), wxT("Y"), YPos);
 #endif
 #endif
 }
@@ -787,17 +787,17 @@ bool LoadPoem(wxChar *file_name, long po
 
     if (file_name == NULL)
     {
-      wxSprintf(error_buf, _T("Error in Poem loading."));
+      wxSprintf(error_buf, wxT("Error in Poem loading."));
       PoetryError(error_buf);
       return false;
     }
 
-    wxSprintf(buf, _T("%s.dat"), file_name);
-    data_file = wxFopen(buf, _T("r"));
+    wxSprintf(buf, wxT("%s.dat"), file_name);
+    data_file = wxFopen(buf, wxT("r"));
 
     if (data_file == NULL)
     {
-      wxSprintf(error_buf, _T("Data file %s not found."), buf);
+      wxSprintf(error_buf, wxT("Data file %s not found."), buf);
       PoetryError(error_buf);
       return false;
     }
@@ -826,7 +826,7 @@ bool LoadPoem(wxChar *file_name, long po
 
         if (i == buf_size)
         {
-            wxSprintf(error_buf, _T("%s"), _T("Poetry buffer exceeded."));
+            wxSprintf(error_buf, wxT("%s"), wxT("Poetry buffer exceeded."));
             PoetryError(error_buf);
             return false;
         }
@@ -865,12 +865,12 @@ long MainWindow::DoSearch(void)
     }
 
     if (data_filename)
-        wxSprintf(buf, _T("%s.dat"), data_filename);
+        wxSprintf(buf, wxT("%s.dat"), data_filename);
 
-    file = wxFopen(buf, _T("r"));
+    file = wxFopen(buf, wxT("r"));
     if (! (data_filename && file))
     {
-        wxSprintf(error_buf, _T("Poetry data file %s not found\n"), buf);
+        wxSprintf(error_buf, wxT("Poetry data file %s not found\n"), buf);
         PoetryError(error_buf);
         return false;
     }
@@ -924,7 +924,7 @@ void TryLoadIndex()
     index_ok = (LoadIndex(index_filename) != 0);
     if (!index_ok || (nitems == 0))
     {
-        PoetryError(_T("Index file not found; will compile new one"), _T("wxPoem"));
+        PoetryError(wxT("Index file not found; will compile new one"), wxT("wxPoem"));
         index_ok = Compile();
     }
 }
@@ -951,12 +951,12 @@ bool Compile(void)
     wxChar buf[100];
 
     if (data_filename)
-        wxSprintf(buf, _T("%s.dat"), data_filename);
+        wxSprintf(buf, wxT("%s.dat"), data_filename);
 
-    file = wxFopen(buf, _T("r"));
+    file = wxFopen(buf, wxT("r"));
     if (! (data_filename && file))
     {
-        wxSprintf(error_buf, _T("Poetry data file %s not found\n"), buf);
+        wxSprintf(error_buf, wxT("Poetry data file %s not found\n"), buf);
         PoetryError(error_buf);
         return false;
     }
@@ -983,22 +983,22 @@ bool Compile(void)
     fclose(file);
 
     if (index_filename)
-      wxSprintf(buf, _T("%s.idx"), index_filename);
+      wxSprintf(buf, wxT("%s.idx"), index_filename);
 
-    file = wxFopen(buf, _T("w"));
+    file = wxFopen(buf, wxT("w"));
     if (! (data_filename && file))
     {
-        wxSprintf(error_buf, _T("Poetry index file %s cannot be created\n"), buf);
+        wxSprintf(error_buf, wxT("Poetry index file %s cannot be created\n"), buf);
         PoetryError(error_buf);
         return false;
     }
 
-    wxFprintf(file, _T("%ld\n\n"), nitems);
+    wxFprintf(file, wxT("%ld\n\n"), nitems);
     for (j = 0; j < nitems; j++)
-        wxFprintf(file, _T("%ld\n"), poem_index[j]);
+        wxFprintf(file, wxT("%ld\n"), poem_index[j]);
 
     fclose(file);
-    PoetryNotify(_T("Poetry index compiled."));
+    PoetryNotify(wxT("Poetry index compiled."));
     return true;
 }
 
@@ -1032,18 +1032,18 @@ void MainWindow::OnPopup(wxCommandEvent&
             {
                 static wxString s;
                 s = poem_buffer;
-                s.Replace( _T("@P"),wxEmptyString);
-                s.Replace( _T("@A "),wxEmptyString);
-                s.Replace( _T("@A"),wxEmptyString);
-                s.Replace( _T("@T "),wxEmptyString);
-                s.Replace( _T("@T"),wxEmptyString);
+                s.Replace( wxT("@P"),wxEmptyString);
+                s.Replace( wxT("@A "),wxEmptyString);
+                s.Replace( wxT("@A"),wxEmptyString);
+                s.Replace( wxT("@T "),wxEmptyString);
+                s.Replace( wxT("@T"),wxEmptyString);
                 wxTextDataObject *data = new wxTextDataObject( s.c_str() );
                 if (!wxTheClipboard->SetData( data ))
-                    wxMessageBox(_T("Error while copying to the clipboard."));
+                    wxMessageBox(wxT("Error while copying to the clipboard."));
             }
             else
             {
-                wxMessageBox(_T("Error opening the clipboard."));
+                wxMessageBox(wxT("Error opening the clipboard."));
             }
             wxTheClipboard->Close();
             break;
@@ -1062,8 +1062,8 @@ void MainWindow::OnPopup(wxCommandEvent&
             }
             break;
         case POEM_ABOUT:
-            (void)wxMessageBox(_T("wxPoem Version 1.1\nJulian Smart (c) 1995"),
-                               _T("About wxPoem"), wxOK, TheMainWindow);
+            (void)wxMessageBox(wxT("wxPoem Version 1.1\nJulian Smart (c) 1995"),
+                               wxT("About wxPoem"), wxOK, TheMainWindow);
             break;
         case POEM_EXIT:
             // Exit
--- demos/life/game.h-orig	2009-06-18 16:42:47.664286000 -0500
+++ demos/life/game.h	2009-06-18 16:42:51.773403000 -0500
@@ -58,7 +58,7 @@ public:
         // causes a crash due to conversion objects not being available
         // during initialisation.
 #ifndef __WXMAC__
-        m_shape.Add( wxString::Format(_T("%i %i"), -width/2, -height/2) );
+        m_shape.Add( wxString::Format(wxT("%i %i"), -width/2, -height/2) );
 #endif
         for(int j = 0; j < height; j++)
         {
--- distrib/autopackage/sample/minimal.cpp-orig	2009-06-18 19:24:17.139347000 -0500
+++ distrib/autopackage/sample/minimal.cpp	2009-06-18 19:24:29.752061000 -0500
@@ -115,7 +115,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("Minimal wxWindows App"));
+    MyFrame *frame = new MyFrame(wxT("Minimal wxWindows App"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -143,14 +143,14 @@ MyFrame::MyFrame(const wxString& title)
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Minimal_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Minimal_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -159,7 +159,7 @@ MyFrame::MyFrame(const wxString& title)
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWindows!"));
+    SetStatusText(wxT("Welcome to wxWindows!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -175,8 +175,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the minimal sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the minimal sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About Minimal"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About Minimal"), wxOK | wxICON_INFORMATION, this);
 }
--- docs/latex/wx/arc.tex-orig	2009-06-18 19:24:48.756891000 -0500
+++ docs/latex/wx/arc.tex	2009-06-18 19:25:04.576158000 -0500
@@ -49,16 +49,16 @@ Another call to PutNextEntry() closes th
 For example:
 
 \begin{verbatim}
-    wxFFileOutputStream out(_T("test.zip"));
+    wxFFileOutputStream out(wxT("test.zip"));
     wxZipOutputStream zip(out);
     wxTextOutputStream txt(zip);
     wxString sep(wxFileName::GetPathSeparator());
 
-    zip.PutNextEntry(_T("entry1.txt"));
-    txt << _T("Some text for entry1.txt\n");
+    zip.PutNextEntry(wxT("entry1.txt"));
+    txt << wxT("Some text for entry1.txt\n");
 
-    zip.PutNextEntry(_T("subdir") + sep + _T("entry2.txt"));
-    txt << _T("Some text for subdir/entry2.txt\n");
+    zip.PutNextEntry(wxT("subdir") + sep + wxT("entry2.txt"));
+    txt << wxT("Some text for subdir/entry2.txt\n");
 
 \end{verbatim}
 
@@ -81,7 +81,7 @@ When there are no more entries, GetNextE
 \begin{verbatim}
     auto_ptr<wxZipEntry> entry;
 
-    wxFFileInputStream in(_T("test.zip"));
+    wxFFileInputStream in(wxT("test.zip"));
     wxZipInputStream zip(in);
 
     while (entry.reset(zip.GetNextEntry()), entry.get() != NULL)
@@ -115,8 +115,8 @@ be helpful to do this.
 For example to delete all entries matching the pattern "*.txt":
 
 \begin{verbatim}
-    auto_ptr<wxFFileInputStream> in(new wxFFileInputStream(_T("test.zip")));
-    wxTempFileOutputStream out(_T("test.zip"));
+    auto_ptr<wxFFileInputStream> in(new wxFFileInputStream(wxT("test.zip")));
+    wxTempFileOutputStream out(wxT("test.zip"));
 
     wxZipInputStream inzip(*in);
     wxZipOutputStream outzip(out);
@@ -129,7 +129,7 @@ For example to delete all entries matchi
 
     // call CopyEntry for each entry except those matching the pattern
     while (entry.reset(inzip.GetNextEntry()), entry.get() != NULL)
-        if (!entry->GetName().Matches(_T("*.txt")))
+        if (!entry->GetName().Matches(wxT("*.txt")))
             if (!outzip.CopyEntry(entry.release(), inzip))
                 break;
 
@@ -176,7 +176,7 @@ and search for that:
     wxString name = wxZipEntry::GetInternalName(localname);
 
     // open the zip
-    wxFFileInputStream in(_T("test.zip"));
+    wxFFileInputStream in(wxT("test.zip"));
     wxZipInputStream zip(in);
 
     // call GetNextEntry() until the required internal name is found
@@ -203,7 +203,7 @@ opened using the \helpref{OpenEntry()}{w
     ZipCatalog cat;
 
     // open the zip
-    wxFFileInputStream in(_T("test.zip"));
+    wxFFileInputStream in(wxT("test.zip"));
     wxZipInputStream zip(in);
 
     // load the zip catalog
@@ -229,7 +229,7 @@ underlying stream on the same archive:
 \begin{verbatim}
     // opening another entry without closing the first requires another
     // input stream for the same file
-    wxFFileInputStream in2(_T("test.zip"));
+    wxFFileInputStream in2(wxT("test.zip"));
     wxZipInputStream zip2(in2);
     if ((it = cat.find(wxZipEntry::GetInternalName(local2))) != cat.end())
         zip2.OpenEntry(*it->second);
@@ -324,7 +324,7 @@ For example, to list the contents of arc
                 std::wcout << entry->GetName().c_str() << "\n";
         }
         else {
-            wxLogError(_T("can't handle '%s'"), filename.c_str());
+            wxLogError(wxT("can't handle '%s'"), filename.c_str());
         }
     }
 
--- docs/latex/wx/archive.tex-orig	2009-06-18 19:25:11.310564000 -0500
+++ docs/latex/wx/archive.tex	2009-06-18 19:25:17.641260000 -0500
@@ -105,7 +105,7 @@ For example, to list them:
     const wxArchiveClassFactory *factory = wxArchiveClassFactory::GetFirst();
 
     while (factory) {
-        list << factory->GetProtocol() << _T("\n");
+        list << factory->GetProtocol() << wxT("\n");
         factory = factory->GetNext();
     }
 
@@ -147,7 +147,7 @@ For example, to list the file extensions
     const wxChar *const *p;
 
     for (p = factory->GetProtocols(wxSTREAM_FILEEXT); *p; p++)
-        list << *p << _T("\n");
+        list << *p << wxT("\n");
 
 \end{verbatim}
 
--- docs/latex/wx/gridedit.tex-orig	2009-06-18 19:25:26.827672000 -0500
+++ docs/latex/wx/gridedit.tex	2009-06-18 19:25:38.716393000 -0500
@@ -44,7 +44,7 @@ the truth value we currently use (see 
 
 \membersection{wxGridCellBoolEditor::UseStringValues}\label{wxgridcellbooleditorusestringvalues}
 
-\func{static void}{UseStringValues}{\param{const wxString\& }{valueTrue = \_T("1")}, \param{const wxString\& }{valueFalse = \_T("")}}
+\func{static void}{UseStringValues}{\param{const wxString\& }{valueTrue = \wxT("1")}, \param{const wxString\& }{valueFalse = \wxT("")}}
 
 This method allows to customize the values returned by GetValue() method for
 the cell using this editor. By default, the default values of the arguments are
--- docs/latex/wx/txrc.tex-orig	2009-06-18 19:25:45.592361000 -0500
+++ docs/latex/wx/txrc.tex	2009-06-18 19:25:52.619259000 -0500
@@ -230,8 +230,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the about dialog of XML resources demo.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the about dialog of XML resources demo.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
     wxMessageBox(msg, "About XML resources demo", wxOK | wxICON_INFORMATION, this);
 }
--- docs/latex/wx/fltfactory.tex-orig	2009-06-18 19:26:00.267833000 -0500
+++ docs/latex/wx/fltfactory.tex	2009-06-18 19:26:06.406405000 -0500
@@ -92,7 +92,7 @@ For example, to list them:
     const wxFilterClassFactory *factory = wxFilterClassFactory::GetFirst();
 
     while (factory) {
-        list << factory->GetProtocol() << _T("\n");
+        list << factory->GetProtocol() << wxT("\n");
         factory = factory->GetNext();
     }
 
@@ -125,7 +125,7 @@ For example, to list the file extensions
     const wxChar *const *p;
 
     for (p = factory->GetProtocols(wxSTREAM_FILEEXT); *p; p++)
-        list << *p << _T("\n");
+        list << *p << wxT("\n");
 
 \end{verbatim}
 
--- docs/latex/wx/function.tex-orig	2009-06-18 19:26:11.857391000 -0500
+++ docs/latex/wx/function.tex	2009-06-18 19:26:27.358058000 -0500
@@ -1615,7 +1615,7 @@ Both versions call \helpref{wxLocale::Ge
 
 Note that this function is not suitable for literal strings in Unicode
 builds, since the literal strings must be enclosed into
-\helpref{\_T()}{underscoret} or \helpref{wxT}{wxt} macro which makes them
+\helpref{\wxT()}{underscoret} or \helpref{wxT}{wxt} macro which makes them
 unrecognised by \texttt{xgettext}, and so they are not extracted to the message
 catalog. Instead, use the \helpref{\_()}{underscore} and
 \helpref{wxPLURAL}{wxplural} macro for all literal strings.
@@ -1812,7 +1812,7 @@ function, so it marks the message for th
 \helpref{wxTRANSLATE}{wxtranslate} does, but also returns the translation of
 the string for the current locale during execution.
 
-Don't confuse this macro with \helpref{\_T()}{underscoret}!
+Don't confuse this macro with \helpref{\wxT()}{underscoret}!
 
 
 \membersection{wxPLURAL}\label{wxplural}
@@ -1865,7 +1865,7 @@ void MyFrame::ShowSimpleAboutDialog(wxCo
     info.SetName(_("My Program"));
     info.SetVersion(_("1.2.3 Beta"));
     info.SetDescription(_("This program does something great."));
-    info.SetCopyright(_T("(C) 2007 Me <my@email.addre.ss>"));
+    info.SetCopyright(wxT("(C) 2007 Me <my@email.addre.ss>"));
 
     wxAboutBox(info);
 }
--- docs/latex/wx/dllload.tex-orig	2009-06-18 19:26:35.909659000 -0500
+++ docs/latex/wx/dllload.tex	2009-06-18 19:26:42.635643000 -0500
@@ -33,11 +33,11 @@ Example of using this class to dynamical
 
 \begin{verbatim}
 #if defined(__WXMSW__)
-    static const wxChar *LIB_NAME = _T("kernel32");
-    static const wxChar *FUNC_NAME = _T("lstrlenA");
+    static const wxChar *LIB_NAME = wxT("kernel32");
+    static const wxChar *FUNC_NAME = wxT("lstrlenA");
 #elif defined(__UNIX__)
-    static const wxChar *LIB_NAME = _T("/lib/libc-2.0.7.so");
-    static const wxChar *FUNC_NAME = _T("strlen");
+    static const wxChar *LIB_NAME = wxT("/lib/libc-2.0.7.so");
+    static const wxChar *FUNC_NAME = wxT("strlen");
 #endif
 
     wxDllType dllHandle = wxDllLoader::LoadLibrary(LIB_NAME);
--- docs/latex/wx/spinctrl.tex-orig	2009-06-18 19:26:48.673818000 -0500
+++ docs/latex/wx/spinctrl.tex	2009-06-18 19:26:54.218198000 -0500
@@ -63,7 +63,7 @@ is different from the last value sent.
 
 Default constructor.
 
-\func{}{wxSpinCtrl}{\param{wxWindow* }{parent}, \param{wxWindowID }{id = -1}, \param{const wxString\& }{value = wxEmptyString}, \param{const wxPoint\& }{pos = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize}, \param{long }{style = wxSP\_ARROW\_KEYS}, \param{int }{min = 0}, \param{int }{max = 100}, \param{int }{initial = 0}, \param{const wxString\& }{name = \_T("wxSpinCtrl")}}
+\func{}{wxSpinCtrl}{\param{wxWindow* }{parent}, \param{wxWindowID }{id = -1}, \param{const wxString\& }{value = wxEmptyString}, \param{const wxPoint\& }{pos = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize}, \param{long }{style = wxSP\_ARROW\_KEYS}, \param{int }{min = 0}, \param{int }{max = 100}, \param{int }{initial = 0}, \param{const wxString\& }{name = \wxT("wxSpinCtrl")}}
 
 Constructor, creating and showing a spin control.
 
@@ -95,7 +95,7 @@ Constructor, creating and showing a spin
 
 \membersection{wxSpinCtrl::Create}\label{wxspinctrlcreate}
 
-\func{bool}{Create}{\param{wxWindow* }{parent}, \param{wxWindowID }{id = -1}, \param{const wxString\& }{value = wxEmptyString}, \param{const wxPoint\& }{pos = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize}, \param{long }{style = wxSP\_ARROW\_KEYS}, \param{int }{min = 0}, \param{int }{max = 100}, \param{int }{initial = 0}, \param{const wxString\& }{name = \_T("wxSpinCtrl")}}
+\func{bool}{Create}{\param{wxWindow* }{parent}, \param{wxWindowID }{id = -1}, \param{const wxString\& }{value = wxEmptyString}, \param{const wxPoint\& }{pos = wxDefaultPosition}, \param{const wxSize\& }{size = wxDefaultSize}, \param{long }{style = wxSP\_ARROW\_KEYS}, \param{int }{min = 0}, \param{int }{max = 100}, \param{int }{initial = 0}, \param{const wxString\& }{name = \wxT("wxSpinCtrl")}}
 
 Creation function called by the spin control constructor.
 
--- docs/latex/wx/hthlpfrm.tex-orig	2009-06-18 19:27:02.545278000 -0500
+++ docs/latex/wx/hthlpfrm.tex	2009-06-18 19:27:08.569455000 -0500
@@ -166,7 +166,7 @@ For example:
     m_embeddedHtmlHelp.SetHelpWindow(m_embeddedHelpWindow);    
     m_embeddedHelpWindow->Create(this,
         wxID_ANY, wxDefaultPosition, GetClientSize(), wxTAB_TRAVERSAL|wxNO_BORDER, wxHF_DEFAULT_STYLE);        
-    m_embeddedHtmlHelp.AddBook(wxFileName(_T("doc.zip")));
+    m_embeddedHtmlHelp.AddBook(wxFileName(wxT("doc.zip")));
 \end{verbatim}
 
 You should pass the style wxHF\_EMBEDDED to the style parameter of wxHtmlHelpController to allow
--- docs/latex/wx/tnoneng.tex-orig	2009-06-18 19:27:17.460804000 -0500
+++ docs/latex/wx/tnoneng.tex	2009-06-18 19:27:22.663617000 -0500
@@ -106,8 +106,8 @@ the source code, specify the option {\tt
 \item{Specify the source code language and charset as arguments to
 \helpref{wxLocale::AddCatalog}{wxlocaleaddcatalog}. For example:
 \begin{verbatim}
-locale.AddCatalog(_T("myapp"),
-                  wxLANGUAGE_GERMAN, _T("iso-8859-1"));
+locale.AddCatalog(wxT("myapp"),
+                  wxLANGUAGE_GERMAN, wxT("iso-8859-1"));
 \end{verbatim}
 }
 \end{enumerate}
--- docs/latex/wx/debugrptup.tex-orig	2009-06-18 19:27:30.001875000 -0500
+++ docs/latex/wx/debugrptup.tex	2009-06-18 19:27:36.140537000 -0500
@@ -28,7 +28,7 @@ compressed in a single .ZIP file.
 
 \membersection{wxDebugReportUpload::wxDebugReportUpload}\label{wxdebugreportuploadwxdebugreportupload}
 
-\func{}{wxDebugReportUpload}{\param{const wxString\& }{url}, \param{const wxString\& }{input}, \param{const wxString\& }{action}, \param{const wxString\& }{curl = \_T("curl")}}
+\func{}{wxDebugReportUpload}{\param{const wxString\& }{url}, \param{const wxString\& }{input}, \param{const wxString\& }{action}, \param{const wxString\& }{curl = \wxT("curl")}}
 
 This class will upload the compressed file created by its base class to an HTML
 multipart/form-data form at the specified address. The \arg{url} is the upload
--- include/wx/univ/listbox.h-orig	2009-06-18 17:26:35.268658000 -0500
+++ include/wx/univ/listbox.h	2009-06-18 17:26:44.468268000 -0500
@@ -21,28 +21,28 @@
 // ----------------------------------------------------------------------------
 
 // change the current item
-#define wxACTION_LISTBOX_SETFOCUS   _T("setfocus")  // select the item
-#define wxACTION_LISTBOX_MOVEDOWN   _T("down")      // select item below
-#define wxACTION_LISTBOX_MOVEUP     _T("up")        // select item above
-#define wxACTION_LISTBOX_PAGEDOWN   _T("pagedown")  // go page down
-#define wxACTION_LISTBOX_PAGEUP     _T("pageup")    // go page up
-#define wxACTION_LISTBOX_START      _T("start")     // go to first item
-#define wxACTION_LISTBOX_END        _T("end")       // go to last item
-#define wxACTION_LISTBOX_FIND       _T("find")      // find item by 1st letter
+#define wxACTION_LISTBOX_SETFOCUS   wxT("setfocus")  // select the item
+#define wxACTION_LISTBOX_MOVEDOWN   wxT("down")      // select item below
+#define wxACTION_LISTBOX_MOVEUP     wxT("up")        // select item above
+#define wxACTION_LISTBOX_PAGEDOWN   wxT("pagedown")  // go page down
+#define wxACTION_LISTBOX_PAGEUP     wxT("pageup")    // go page up
+#define wxACTION_LISTBOX_START      wxT("start")     // go to first item
+#define wxACTION_LISTBOX_END        wxT("end")       // go to last item
+#define wxACTION_LISTBOX_FIND       wxT("find")      // find item by 1st letter
 
 // do something with the current item
-#define wxACTION_LISTBOX_ACTIVATE   _T("activate")  // activate (choose)
-#define wxACTION_LISTBOX_TOGGLE     _T("toggle")    // togglee selected state
-#define wxACTION_LISTBOX_SELECT     _T("select")    // sel this, unsel others
-#define wxACTION_LISTBOX_SELECTADD  _T("selectadd") // add to selection
-#define wxACTION_LISTBOX_UNSELECT   _T("unselect")  // unselect
-#define wxACTION_LISTBOX_ANCHOR     _T("selanchor") // anchor selection
+#define wxACTION_LISTBOX_ACTIVATE   wxT("activate")  // activate (choose)
+#define wxACTION_LISTBOX_TOGGLE     wxT("toggle")    // togglee selected state
+#define wxACTION_LISTBOX_SELECT     wxT("select")    // sel this, unsel others
+#define wxACTION_LISTBOX_SELECTADD  wxT("selectadd") // add to selection
+#define wxACTION_LISTBOX_UNSELECT   wxT("unselect")  // unselect
+#define wxACTION_LISTBOX_ANCHOR     wxT("selanchor") // anchor selection
 
 // do something with the selection globally (not for single selection ones)
-#define wxACTION_LISTBOX_SELECTALL   _T("selectall")   // select all items
-#define wxACTION_LISTBOX_UNSELECTALL _T("unselectall") // unselect all items
-#define wxACTION_LISTBOX_SELTOGGLE   _T("togglesel")   // invert the selection
-#define wxACTION_LISTBOX_EXTENDSEL   _T("extend")      // extend to item
+#define wxACTION_LISTBOX_SELECTALL   wxT("selectall")   // select all items
+#define wxACTION_LISTBOX_UNSELECTALL wxT("unselectall") // unselect all items
+#define wxACTION_LISTBOX_SELTOGGLE   wxT("togglesel")   // invert the selection
+#define wxACTION_LISTBOX_EXTENDSEL   wxT("extend")      // extend to item
 
 // ----------------------------------------------------------------------------
 // wxListBox: a list of selectable items
--- include/wx/univ/slider.h-orig	2009-06-18 17:26:50.330663000 -0500
+++ include/wx/univ/slider.h	2009-06-18 17:27:02.822378000 -0500
@@ -20,17 +20,17 @@
 
 // our actions are the same as scrollbars
 
-#define wxACTION_SLIDER_START       _T("start")     // to the beginning
-#define wxACTION_SLIDER_END         _T("end")       // to the end
-#define wxACTION_SLIDER_LINE_UP     _T("lineup")    // one line up/left
-#define wxACTION_SLIDER_PAGE_UP     _T("pageup")    // one page up/left
-#define wxACTION_SLIDER_LINE_DOWN   _T("linedown")  // one line down/right
-#define wxACTION_SLIDER_PAGE_DOWN   _T("pagedown")  // one page down/right
-#define wxACTION_SLIDER_PAGE_CHANGE _T("pagechange")// change page by numArg
-
-#define wxACTION_SLIDER_THUMB_DRAG      _T("thumbdrag")
-#define wxACTION_SLIDER_THUMB_MOVE      _T("thumbmove")
-#define wxACTION_SLIDER_THUMB_RELEASE   _T("thumbrelease")
+#define wxACTION_SLIDER_START       wxT("start")     // to the beginning
+#define wxACTION_SLIDER_END         wxT("end")       // to the end
+#define wxACTION_SLIDER_LINE_UP     wxT("lineup")    // one line up/left
+#define wxACTION_SLIDER_PAGE_UP     wxT("pageup")    // one page up/left
+#define wxACTION_SLIDER_LINE_DOWN   wxT("linedown")  // one line down/right
+#define wxACTION_SLIDER_PAGE_DOWN   wxT("pagedown")  // one page down/right
+#define wxACTION_SLIDER_PAGE_CHANGE wxT("pagechange")// change page by numArg
+
+#define wxACTION_SLIDER_THUMB_DRAG      wxT("thumbdrag")
+#define wxACTION_SLIDER_THUMB_MOVE      wxT("thumbmove")
+#define wxACTION_SLIDER_THUMB_RELEASE   wxT("thumbrelease")
 
 // ----------------------------------------------------------------------------
 // wxSlider
--- include/wx/univ/combobox.h-orig	2009-06-18 17:27:07.977286000 -0500
+++ include/wx/univ/combobox.h	2009-06-18 17:27:16.689826000 -0500
@@ -22,9 +22,9 @@ class WXDLLEXPORT wxListBox;
 // ----------------------------------------------------------------------------
 
 // choose the next/prev/specified (by numArg) item
-#define wxACTION_COMBOBOX_SELECT_NEXT _T("next")
-#define wxACTION_COMBOBOX_SELECT_PREV _T("prev")
-#define wxACTION_COMBOBOX_SELECT      _T("select")
+#define wxACTION_COMBOBOX_SELECT_NEXT wxT("next")
+#define wxACTION_COMBOBOX_SELECT_PREV wxT("prev")
+#define wxACTION_COMBOBOX_SELECT      wxT("select")
 
 
 // ----------------------------------------------------------------------------
--- include/wx/univ/checkbox.h-orig	2009-06-18 17:27:21.756585000 -0500
+++ include/wx/univ/checkbox.h	2009-06-18 17:27:28.529025000 -0500
@@ -18,9 +18,9 @@
 // the actions supported by wxCheckBox
 // ----------------------------------------------------------------------------
 
-#define wxACTION_CHECKBOX_CHECK   _T("check")   // SetValue(true)
-#define wxACTION_CHECKBOX_CLEAR   _T("clear")   // SetValue(false)
-#define wxACTION_CHECKBOX_TOGGLE  _T("toggle")  // toggle the check state
+#define wxACTION_CHECKBOX_CHECK   wxT("check")   // SetValue(true)
+#define wxACTION_CHECKBOX_CLEAR   wxT("clear")   // SetValue(false)
+#define wxACTION_CHECKBOX_TOGGLE  wxT("toggle")  // toggle the check state
 
 // additionally it accepts wxACTION_BUTTON_PRESS and RELEASE
 
--- include/wx/univ/button.h-orig	2009-06-18 17:27:33.644736000 -0500
+++ include/wx/univ/button.h	2009-06-18 17:27:40.323002000 -0500
@@ -20,10 +20,10 @@ class WXDLLEXPORT wxInputHandler;
 // the actions supported by this control
 // ----------------------------------------------------------------------------
 
-#define wxACTION_BUTTON_TOGGLE  _T("toggle")    // press/release the button
-#define wxACTION_BUTTON_PRESS   _T("press")     // press the button
-#define wxACTION_BUTTON_RELEASE _T("release")   // release the button
-#define wxACTION_BUTTON_CLICK   _T("click")     // generate button click event
+#define wxACTION_BUTTON_TOGGLE  wxT("toggle")    // press/release the button
+#define wxACTION_BUTTON_PRESS   wxT("press")     // press the button
+#define wxACTION_BUTTON_RELEASE wxT("release")   // release the button
+#define wxACTION_BUTTON_CLICK   wxT("click")     // generate button click event
 
 // ----------------------------------------------------------------------------
 // wxButton: a push button
--- include/wx/univ/inphand.h-orig	2009-06-18 17:27:47.268326000 -0500
+++ include/wx/univ/inphand.h	2009-06-18 17:27:56.300407000 -0500
@@ -20,21 +20,21 @@
 // wxTheme::GetInputHandler()
 // ----------------------------------------------------------------------------
 
-#define wxINP_HANDLER_DEFAULT           _T("")
-#define wxINP_HANDLER_BUTTON            _T("button")
-#define wxINP_HANDLER_CHECKBOX          _T("checkbox")
-#define wxINP_HANDLER_CHECKLISTBOX      _T("checklistbox")
-#define wxINP_HANDLER_COMBOBOX          _T("combobox")
-#define wxINP_HANDLER_LISTBOX           _T("listbox")
-#define wxINP_HANDLER_NOTEBOOK          _T("notebook")
-#define wxINP_HANDLER_RADIOBTN          _T("radiobtn")
-#define wxINP_HANDLER_SCROLLBAR         _T("scrollbar")
-#define wxINP_HANDLER_SLIDER            _T("slider")
-#define wxINP_HANDLER_SPINBTN           _T("spinbtn")
-#define wxINP_HANDLER_STATUSBAR         _T("statusbar")
-#define wxINP_HANDLER_TEXTCTRL          _T("textctrl")
-#define wxINP_HANDLER_TOOLBAR           _T("toolbar")
-#define wxINP_HANDLER_TOPLEVEL          _T("toplevel")
+#define wxINP_HANDLER_DEFAULT           wxT("")
+#define wxINP_HANDLER_BUTTON            wxT("button")
+#define wxINP_HANDLER_CHECKBOX          wxT("checkbox")
+#define wxINP_HANDLER_CHECKLISTBOX      wxT("checklistbox")
+#define wxINP_HANDLER_COMBOBOX          wxT("combobox")
+#define wxINP_HANDLER_LISTBOX           wxT("listbox")
+#define wxINP_HANDLER_NOTEBOOK          wxT("notebook")
+#define wxINP_HANDLER_RADIOBTN          wxT("radiobtn")
+#define wxINP_HANDLER_SCROLLBAR         wxT("scrollbar")
+#define wxINP_HANDLER_SLIDER            wxT("slider")
+#define wxINP_HANDLER_SPINBTN           wxT("spinbtn")
+#define wxINP_HANDLER_STATUSBAR         wxT("statusbar")
+#define wxINP_HANDLER_TEXTCTRL          wxT("textctrl")
+#define wxINP_HANDLER_TOOLBAR           wxT("toolbar")
+#define wxINP_HANDLER_TOPLEVEL          wxT("toplevel")
 
 // ----------------------------------------------------------------------------
 // wxInputHandler: maps the events to the actions
--- include/wx/univ/textctrl.h-orig	2009-06-18 17:28:02.131267000 -0500
+++ include/wx/univ/textctrl.h	2009-06-18 17:28:09.858341000 -0500
@@ -24,43 +24,43 @@ class WXDLLEXPORT wxTextCtrlCommandProce
 // ----------------------------------------------------------------------------
 
 // cursor movement and also selection and delete operations
-#define wxACTION_TEXT_GOTO          _T("goto")  // to pos in numArg
-#define wxACTION_TEXT_FIRST         _T("first") // go to pos 0
-#define wxACTION_TEXT_LAST          _T("last")  // go to last pos
-#define wxACTION_TEXT_HOME          _T("home")
-#define wxACTION_TEXT_END           _T("end")
-#define wxACTION_TEXT_LEFT          _T("left")
-#define wxACTION_TEXT_RIGHT         _T("right")
-#define wxACTION_TEXT_UP            _T("up")
-#define wxACTION_TEXT_DOWN          _T("down")
-#define wxACTION_TEXT_WORD_LEFT     _T("wordleft")
-#define wxACTION_TEXT_WORD_RIGHT    _T("wordright")
-#define wxACTION_TEXT_PAGE_UP       _T("pageup")
-#define wxACTION_TEXT_PAGE_DOWN     _T("pagedown")
+#define wxACTION_TEXT_GOTO          wxT("goto")  // to pos in numArg
+#define wxACTION_TEXT_FIRST         wxT("first") // go to pos 0
+#define wxACTION_TEXT_LAST          wxT("last")  // go to last pos
+#define wxACTION_TEXT_HOME          wxT("home")
+#define wxACTION_TEXT_END           wxT("end")
+#define wxACTION_TEXT_LEFT          wxT("left")
+#define wxACTION_TEXT_RIGHT         wxT("right")
+#define wxACTION_TEXT_UP            wxT("up")
+#define wxACTION_TEXT_DOWN          wxT("down")
+#define wxACTION_TEXT_WORD_LEFT     wxT("wordleft")
+#define wxACTION_TEXT_WORD_RIGHT    wxT("wordright")
+#define wxACTION_TEXT_PAGE_UP       wxT("pageup")
+#define wxACTION_TEXT_PAGE_DOWN     wxT("pagedown")
 
 // clipboard operations
-#define wxACTION_TEXT_COPY          _T("copy")
-#define wxACTION_TEXT_CUT           _T("cut")
-#define wxACTION_TEXT_PASTE         _T("paste")
+#define wxACTION_TEXT_COPY          wxT("copy")
+#define wxACTION_TEXT_CUT           wxT("cut")
+#define wxACTION_TEXT_PASTE         wxT("paste")
 
 // insert text at the cursor position: the text is in strArg of PerformAction
-#define wxACTION_TEXT_INSERT        _T("insert")
+#define wxACTION_TEXT_INSERT        wxT("insert")
 
 // if the action starts with either of these prefixes and the rest of the
 // string is one of the movement commands, it means to select/delete text from
 // the current cursor position to the new one
-#define wxACTION_TEXT_PREFIX_SEL    _T("sel")
-#define wxACTION_TEXT_PREFIX_DEL    _T("del")
+#define wxACTION_TEXT_PREFIX_SEL    wxT("sel")
+#define wxACTION_TEXT_PREFIX_DEL    wxT("del")
 
 // mouse selection
-#define wxACTION_TEXT_ANCHOR_SEL    _T("anchorsel")
-#define wxACTION_TEXT_EXTEND_SEL    _T("extendsel")
-#define wxACTION_TEXT_SEL_WORD      _T("wordsel")
-#define wxACTION_TEXT_SEL_LINE      _T("linesel")
+#define wxACTION_TEXT_ANCHOR_SEL    wxT("anchorsel")
+#define wxACTION_TEXT_EXTEND_SEL    wxT("extendsel")
+#define wxACTION_TEXT_SEL_WORD      wxT("wordsel")
+#define wxACTION_TEXT_SEL_LINE      wxT("linesel")
 
 // undo or redo
-#define wxACTION_TEXT_UNDO          _T("undo")
-#define wxACTION_TEXT_REDO          _T("redo")
+#define wxACTION_TEXT_UNDO          wxT("undo")
+#define wxACTION_TEXT_REDO          wxT("redo")
 
 // ----------------------------------------------------------------------------
 // wxTextCtrl
@@ -409,7 +409,7 @@ protected:
     wxCoord GetLineHeight() const
     {
         // this one should be already precalculated
-        wxASSERT_MSG( m_heightLine != -1, _T("should have line height") );
+        wxASSERT_MSG( m_heightLine != -1, wxT("should have line height") );
 
         return m_heightLine;
     }
--- include/wx/univ/toplevel.h-orig	2009-06-18 17:28:15.883779000 -0500
+++ include/wx/univ/toplevel.h	2009-06-18 17:28:24.666460000 -0500
@@ -77,12 +77,12 @@ enum
 // the actions supported by this control
 // ----------------------------------------------------------------------------
 
-#define wxACTION_TOPLEVEL_ACTIVATE       _T("activate")   // (de)activate the frame
-#define wxACTION_TOPLEVEL_BUTTON_PRESS   _T("pressbtn")   // press titlebar btn
-#define wxACTION_TOPLEVEL_BUTTON_RELEASE _T("releasebtn") // press titlebar btn
-#define wxACTION_TOPLEVEL_BUTTON_CLICK   _T("clickbtn")   // press titlebar btn
-#define wxACTION_TOPLEVEL_MOVE           _T("move")       // move the frame
-#define wxACTION_TOPLEVEL_RESIZE         _T("resize")     // resize the frame
+#define wxACTION_TOPLEVEL_ACTIVATE       wxT("activate")   // (de)activate the frame
+#define wxACTION_TOPLEVEL_BUTTON_PRESS   wxT("pressbtn")   // press titlebar btn
+#define wxACTION_TOPLEVEL_BUTTON_RELEASE wxT("releasebtn") // press titlebar btn
+#define wxACTION_TOPLEVEL_BUTTON_CLICK   wxT("clickbtn")   // press titlebar btn
+#define wxACTION_TOPLEVEL_MOVE           wxT("move")       // move the frame
+#define wxACTION_TOPLEVEL_RESIZE         wxT("resize")     // resize the frame
 
 //-----------------------------------------------------------------------------
 // wxTopLevelWindow
--- include/wx/univ/menuitem.h-orig	2009-06-18 17:28:30.206781000 -0500
+++ include/wx/univ/menuitem.h	2009-06-18 17:28:37.489498000 -0500
@@ -72,14 +72,14 @@ public:
 
     wxCoord GetPosition() const
     {
-        wxASSERT_MSG( m_posY != wxDefaultCoord, _T("must call SetHeight first!") );
+        wxASSERT_MSG( m_posY != wxDefaultCoord, wxT("must call SetHeight first!") );
 
         return m_posY;
     }
 
     wxCoord GetHeight() const
     {
-        wxASSERT_MSG( m_height != wxDefaultCoord, _T("must call SetHeight first!") );
+        wxASSERT_MSG( m_height != wxDefaultCoord, wxT("must call SetHeight first!") );
 
         return m_height;
     }
--- include/wx/univ/spinbutt.h-orig	2009-06-18 17:28:42.435588000 -0500
+++ include/wx/univ/spinbutt.h	2009-06-18 17:28:47.674878000 -0500
@@ -19,8 +19,8 @@
 // ----------------------------------------------------------------------------
 
 // actions supported by this control
-#define wxACTION_SPIN_INC    _T("inc")
-#define wxACTION_SPIN_DEC    _T("dec")
+#define wxACTION_SPIN_INC    wxT("inc")
+#define wxACTION_SPIN_DEC    wxT("dec")
 
 class WXDLLEXPORT wxSpinButton : public wxSpinButtonBase,
                                  public wxControlWithArrows
--- include/wx/univ/control.h-orig	2009-06-18 17:28:53.810334000 -0500
+++ include/wx/univ/control.h	2009-06-18 17:29:02.327196000 -0500
@@ -32,7 +32,7 @@ typedef wxString wxControlAction;
 // the list of actions which apply to all controls (other actions are defined
 // in the controls headers)
 
-#define wxACTION_NONE    _T("")           // no action to perform
+#define wxACTION_NONE    wxT("")           // no action to perform
 
 // ----------------------------------------------------------------------------
 // wxControl: the base class for all GUI controls
@@ -80,7 +80,7 @@ public:
     // return the accel char itself or 0 if none
     wxChar GetAccelChar() const
     {
-        return m_indexAccel == -1 ? _T('\0') : m_label[m_indexAccel];
+        return m_indexAccel == -1 ? wxT('\0') : m_label[m_indexAccel];
     }
 
     virtual wxWindow *GetInputWindow() const { return (wxWindow*)this; }
--- include/wx/univ/toolbar.h-orig	2009-06-18 17:29:06.588000000 -0500
+++ include/wx/univ/toolbar.h	2009-06-18 17:29:11.328543000 -0500
@@ -24,8 +24,8 @@ class WXDLLEXPORT wxToolBarTool;
 #define wxACTION_TOOLBAR_PRESS   wxACTION_BUTTON_PRESS
 #define wxACTION_TOOLBAR_RELEASE wxACTION_BUTTON_RELEASE
 #define wxACTION_TOOLBAR_CLICK   wxACTION_BUTTON_CLICK
-#define wxACTION_TOOLBAR_ENTER   _T("enter")     // highlight the tool
-#define wxACTION_TOOLBAR_LEAVE   _T("leave")     // unhighlight the tool
+#define wxACTION_TOOLBAR_ENTER   wxT("enter")     // highlight the tool
+#define wxACTION_TOOLBAR_LEAVE   wxT("leave")     // unhighlight the tool
 
 // ----------------------------------------------------------------------------
 // wxToolBar
--- include/wx/univ/scrolbar.h-orig	2009-06-18 17:29:23.165107000 -0500
+++ include/wx/univ/scrolbar.h	2009-06-18 17:29:32.196805000 -0500
@@ -22,17 +22,17 @@ class WXDLLEXPORT wxScrollTimer;
 // ----------------------------------------------------------------------------
 
 // scroll the bar
-#define wxACTION_SCROLL_START       _T("start")     // to the beginning
-#define wxACTION_SCROLL_END         _T("end")       // to the end
-#define wxACTION_SCROLL_LINE_UP     _T("lineup")    // one line up/left
-#define wxACTION_SCROLL_PAGE_UP     _T("pageup")    // one page up/left
-#define wxACTION_SCROLL_LINE_DOWN   _T("linedown")  // one line down/right
-#define wxACTION_SCROLL_PAGE_DOWN   _T("pagedown")  // one page down/right
+#define wxACTION_SCROLL_START       wxT("start")     // to the beginning
+#define wxACTION_SCROLL_END         wxT("end")       // to the end
+#define wxACTION_SCROLL_LINE_UP     wxT("lineup")    // one line up/left
+#define wxACTION_SCROLL_PAGE_UP     wxT("pageup")    // one page up/left
+#define wxACTION_SCROLL_LINE_DOWN   wxT("linedown")  // one line down/right
+#define wxACTION_SCROLL_PAGE_DOWN   wxT("pagedown")  // one page down/right
 
 // the scrollbar thumb may be dragged
-#define wxACTION_SCROLL_THUMB_DRAG      _T("thumbdrag")
-#define wxACTION_SCROLL_THUMB_MOVE      _T("thumbmove")
-#define wxACTION_SCROLL_THUMB_RELEASE   _T("thumbrelease")
+#define wxACTION_SCROLL_THUMB_DRAG      wxT("thumbdrag")
+#define wxACTION_SCROLL_THUMB_MOVE      wxT("thumbmove")
+#define wxACTION_SCROLL_THUMB_RELEASE   wxT("thumbrelease")
 
 // ----------------------------------------------------------------------------
 // wxScrollBar
--- include/wx/univ/notebook.h-orig	2009-06-18 17:29:37.318555000 -0500
+++ include/wx/univ/notebook.h	2009-06-18 17:29:43.501171000 -0500
@@ -21,9 +21,9 @@ class WXDLLEXPORT wxSpinButton;
 // ----------------------------------------------------------------------------
 
 // change the page: to the next/previous/given one
-#define wxACTION_NOTEBOOK_NEXT      _T("nexttab")
-#define wxACTION_NOTEBOOK_PREV      _T("prevtab")
-#define wxACTION_NOTEBOOK_GOTO      _T("gototab")
+#define wxACTION_NOTEBOOK_NEXT      wxT("nexttab")
+#define wxACTION_NOTEBOOK_PREV      wxT("prevtab")
+#define wxACTION_NOTEBOOK_GOTO      wxT("gototab")
 
 // ----------------------------------------------------------------------------
 // wxNotebook
--- include/wx/univ/inpcons.h-orig	2009-06-18 17:29:49.831864000 -0500
+++ include/wx/univ/inpcons.h	2009-06-18 17:29:55.450903000 -0500
@@ -28,7 +28,7 @@ typedef wxString wxControlAction;
 // the list of actions which apply to all controls (other actions are defined
 // in the controls headers)
 
-#define wxACTION_NONE    _T("")           // no action to perform
+#define wxACTION_NONE    wxT("")           // no action to perform
 
 // ----------------------------------------------------------------------------
 // wxInputConsumer: mix-in class for handling wxControlActions (used by
--- include/wx/univ/checklst.h-orig	2009-06-18 17:30:00.941091000 -0500
+++ include/wx/univ/checklst.h	2009-06-18 17:30:05.184903000 -0500
@@ -16,7 +16,7 @@
 // actions
 // ----------------------------------------------------------------------------
 
-#define wxACTION_CHECKLISTBOX_TOGGLE _T("toggle")
+#define wxACTION_CHECKLISTBOX_TOGGLE wxT("toggle")
 
 // ----------------------------------------------------------------------------
 // wxCheckListBox
--- include/wx/generic/grid.h-orig	2009-06-18 17:25:08.142790000 -0500
+++ include/wx/generic/grid.h	2009-06-18 17:25:16.739968000 -0500
@@ -42,11 +42,11 @@ extern WXDLLIMPEXP_DATA_ADV(const wxChar
 #define WXGRID_DEFAULT_SCROLLBAR_WIDTH        16
 
 // type names for grid table values
-#define wxGRID_VALUE_STRING     _T("string")
-#define wxGRID_VALUE_BOOL       _T("bool")
-#define wxGRID_VALUE_NUMBER     _T("long")
-#define wxGRID_VALUE_FLOAT      _T("double")
-#define wxGRID_VALUE_CHOICE     _T("choice")
+#define wxGRID_VALUE_STRING     wxT("string")
+#define wxGRID_VALUE_BOOL       wxT("bool")
+#define wxGRID_VALUE_NUMBER     wxT("long")
+#define wxGRID_VALUE_FLOAT      wxT("double")
+#define wxGRID_VALUE_CHOICE     wxT("choice")
 
 #define wxGRID_VALUE_TEXT wxGRID_VALUE_STRING
 #define wxGRID_VALUE_LONG wxGRID_VALUE_NUMBER
@@ -472,7 +472,7 @@ protected:
 
     // string representation of m_valueOld
     wxString GetString() const
-        { return wxString::Format(_T("%ld"), m_valueOld); }
+        { return wxString::Format(wxT("%ld"), m_valueOld); }
 
 private:
     int m_min,
@@ -552,7 +552,7 @@ public:
 
     // set the string values returned by GetValue() for the true and false
     // states, respectively
-    static void UseStringValues(const wxString& valueTrue = _T("1"),
+    static void UseStringValues(const wxString& valueTrue = wxT("1"),
                                 const wxString& valueFalse = wxEmptyString);
 
     // return true if the given string is equal to the string representation of
--- include/wx/generic/spinctlg.h-orig	2009-06-18 17:25:29.231846000 -0500
+++ include/wx/generic/spinctlg.h	2009-06-18 17:25:37.431058000 -0500
@@ -41,7 +41,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Init();
         Create(parent, id, value, pos, size, style, min, max, initial, name);
@@ -54,7 +54,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     virtual ~wxSpinCtrl();
 
@@ -125,7 +125,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -137,7 +137,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"))
+                const wxString& name = wxT("wxSpinCtrl"))
     {
         SetRange(min, max);
 
--- include/wx/generic/combo.h-orig	2009-06-18 17:25:42.770276000 -0500
+++ include/wx/generic/combo.h	2009-06-18 17:25:48.209808000 -0500
@@ -26,8 +26,8 @@
 // all actions of single line text controls are supported
 
 // popup/dismiss the choice window
-#define wxACTION_COMBOBOX_POPUP     _T("popup")
-#define wxACTION_COMBOBOX_DISMISS   _T("dismiss")
+#define wxACTION_COMBOBOX_POPUP     wxT("popup")
+#define wxACTION_COMBOBOX_DISMISS   wxT("dismiss")
 
 #endif
 
--- include/wx/generic/gridctrl.h-orig	2009-06-18 17:25:54.479521000 -0500
+++ include/wx/generic/gridctrl.h	2009-06-18 17:26:00.022977000 -0500
@@ -16,8 +16,8 @@
 
 #if wxUSE_GRID
 
-#define wxGRID_VALUE_CHOICEINT    _T("choiceint")
-#define wxGRID_VALUE_DATETIME     _T("datetime")
+#define wxGRID_VALUE_CHOICEINT    wxT("choiceint")
+#define wxGRID_VALUE_DATETIME     wxT("datetime")
 
 #if wxUSE_DATETIME
 
--- include/wx/generic/calctrl.h-orig	2009-06-18 17:26:04.969351000 -0500
+++ include/wx/generic/calctrl.h	2009-06-18 17:26:13.771105000 -0500
@@ -19,7 +19,7 @@ class WXDLLIMPEXP_FWD_CORE wxComboBox;
 class WXDLLIMPEXP_FWD_CORE wxStaticText;
 class WXDLLIMPEXP_FWD_CORE wxSpinCtrl;
 
-#define wxCalendarNameStr _T("CalendarCtrl")
+#define wxCalendarNameStr wxT("CalendarCtrl")
 
 // ----------------------------------------------------------------------------
 // wxCalendarCtrl: a control allowing the user to pick a date interactively
@@ -124,14 +124,14 @@ public:
 
     wxCalendarDateAttr *GetAttr(size_t day) const
     {
-        wxCHECK_MSG( day > 0 && day < 32, NULL, _T("invalid day") );
+        wxCHECK_MSG( day > 0 && day < 32, NULL, wxT("invalid day") );
 
         return m_attrs[day - 1];
     }
 
     void SetAttr(size_t day, wxCalendarDateAttr *attr)
     {
-        wxCHECK_RET( day > 0 && day < 32, _T("invalid day") );
+        wxCHECK_RET( day > 0 && day < 32, wxT("invalid day") );
 
         delete m_attrs[day - 1];
         m_attrs[day - 1] = attr;
--- include/wx/generic/splitter.h-orig	2009-06-18 17:26:18.268227000 -0500
+++ include/wx/generic/splitter.h	2009-06-18 17:26:22.893604000 -0500
@@ -91,7 +91,7 @@ public:
     void SetSplitMode(int mode)
     {
         wxASSERT_MSG( mode == wxSPLIT_VERTICAL || mode == wxSPLIT_HORIZONTAL,
-                      _T("invalid split mode") );
+                      wxT("invalid split mode") );
 
         m_splitMode = (wxSplitMode)mode;
     }
--- include/wx/mac/carbon/spinctrl.h-orig	2009-06-18 19:31:05.074867000 -0500
+++ include/wx/mac/carbon/spinctrl.h	2009-06-18 19:31:11.776932000 -0500
@@ -45,7 +45,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Init();
         Create(parent, id, value, pos, size, style, min, max, initial, name);
@@ -58,7 +58,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     // wxTextCtrl-like method
     void SetSelection(long from, long to);
@@ -137,7 +137,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -149,7 +149,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"))
+                const wxString& name = wxT("wxSpinCtrl"))
     {
         SetRange(min, max);
 
--- include/wx/mac/carbon/dirdlg.h-orig	2009-06-18 19:31:16.852368000 -0500
+++ include/wx/mac/carbon/dirdlg.h	2009-06-18 19:31:24.943694000 -0500
@@ -17,7 +17,7 @@ class WXDLLEXPORT wxDirDialog : public w
 public:
     wxDirDialog(wxWindow *parent,
                 const wxString& message = wxDirSelectorPromptStr,
-                const wxString& defaultPath = _T(""),
+                const wxString& defaultPath = wxT(""),
                 long style = wxDD_DEFAULT_STYLE,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
--- include/wx/mac/carbon/toplevel.h-orig	2009-06-18 19:31:29.859428000 -0500
+++ include/wx/mac/carbon/toplevel.h	2009-06-18 19:31:33.774368000 -0500
@@ -13,7 +13,7 @@
 #define _WX_MSW_TOPLEVEL_H_
 
 #if wxUSE_SYSTEM_OPTIONS
-    #define wxMAC_WINDOW_PLAIN_TRANSITION _T("mac.window-plain-transition")
+    #define wxMAC_WINDOW_PLAIN_TRANSITION wxT("mac.window-plain-transition")
 #endif
 
 // ----------------------------------------------------------------------------
--- include/wx/mac/classic/spinctrl.h-orig	2009-06-18 19:31:42.671487000 -0500
+++ include/wx/mac/classic/spinctrl.h	2009-06-18 19:31:50.972984000 -0500
@@ -41,7 +41,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Init();
         Create(parent, id, value, pos, size, style, min, max, initial, name);
@@ -54,7 +54,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     // wxTextCtrl-like method
     void SetSelection(long from, long to);
@@ -126,7 +126,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -138,7 +138,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"))
+                const wxString& name = wxT("wxSpinCtrl"))
     {
         SetRange(min, max);
 
--- include/wx/mac/classic/dirdlg.h-orig	2009-06-18 19:31:57.213192000 -0500
+++ include/wx/mac/classic/dirdlg.h	2009-06-18 19:32:00.927234000 -0500
@@ -17,7 +17,7 @@ class WXDLLEXPORT wxDirDialog : public w
 public:
     wxDirDialog(wxWindow *parent,
                 const wxString& message = wxDirSelectorPromptStr,
-                const wxString& defaultPath = _T(""),
+                const wxString& defaultPath = wxT(""),
                 long style = wxDD_DEFAULT_STYLE,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
--- include/wx/mac/classic/toplevel.h-orig	2009-06-18 19:32:05.143776000 -0500
+++ include/wx/mac/classic/toplevel.h	2009-06-18 19:32:09.138172000 -0500
@@ -13,7 +13,7 @@
 #define _WX_MSW_TOPLEVEL_H_
 
 #if wxUSE_SYSTEM_OPTIONS
-    #define wxMAC_WINDOW_PLAIN_TRANSITION _T("mac.window-plain-transition")
+    #define wxMAC_WINDOW_PLAIN_TRANSITION wxT("mac.window-plain-transition")
 #endif
 
 // ----------------------------------------------------------------------------
--- include/wx/os2/private.h-orig	2009-06-18 19:33:01.290497000 -0500
+++ include/wx/os2/private.h	2009-06-18 19:33:05.803599000 -0500
@@ -169,12 +169,12 @@ typedef MRESULT (APIENTRY * WndProcCast)
  * for this combination of CTl3D/FAFA settings
  */
 
-#define STATIC_CLASS     _T("STATIC")
+#define STATIC_CLASS     wxT("STATIC")
 #define STATIC_FLAGS     (SS_TEXT|DT_LEFT|SS_LEFT|WS_VISIBLE)
-#define CHECK_CLASS      _T("BUTTON")
+#define CHECK_CLASS      wxT("BUTTON")
 #define CHECK_FLAGS      (BS_AUTOCHECKBOX|WS_TABSTOP)
 #define CHECK_IS_FAFA    FALSE
-#define RADIO_CLASS      _T("BUTTON" )
+#define RADIO_CLASS      wxT("BUTTON" )
 #define RADIO_FLAGS      (BS_AUTORADIOBUTTON|WS_VISIBLE)
 #define RADIO_SIZE       20
 #define RADIO_IS_FAFA    FALSE
--- include/wx/os2/spinctrl.h-orig	2009-06-18 19:33:10.285343000 -0500
+++ include/wx/os2/spinctrl.h	2009-06-18 19:33:15.031979000 -0500
@@ -36,7 +36,7 @@ public:
                ,int             nMin = 0
                ,int             nMax = 100
                ,int             nInitial = 0
-               ,const wxString& rsName = _T("wxSpinCtrl")
+               ,const wxString& rsName = wxT("wxSpinCtrl")
               )
     {
         Create(pParent, vId, rsValue, rPos, rSize, lStyle, nMin, nMax, nInitial, rsName);
@@ -52,7 +52,7 @@ public:
                ,int             nMin = 0
                ,int             nMax = 100
                ,int             nInitial = 0
-               ,const wxString& rsName = _T("wxSpinCtrl")
+               ,const wxString& rsName = wxT("wxSpinCtrl")
               );
 
     //
--- include/wx/gtk1/spinctrl.h-orig	2009-06-18 19:30:40.254197000 -0500
+++ include/wx/gtk1/spinctrl.h	2009-06-18 19:30:45.082564000 -0500
@@ -32,7 +32,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -44,7 +44,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     void SetValue(const wxString& text);
     void SetSelection(long from, long to);
--- include/wx/gtk1/checklst.h-orig	2009-06-18 19:30:50.403576000 -0500
+++ include/wx/gtk1/checklst.h	2009-06-18 19:30:55.116609000 -0500
@@ -18,10 +18,10 @@
 // there is no "right" choice of the checkbox indicators, so allow the user to
 // define them himself if he wants
 #ifndef wxCHECKLBOX_CHECKED
-    #define wxCHECKLBOX_CHECKED   _T('x')
-    #define wxCHECKLBOX_UNCHECKED _T(' ')
+    #define wxCHECKLBOX_CHECKED   wxT('x')
+    #define wxCHECKLBOX_UNCHECKED wxT(' ')
 
-    #define wxCHECKLBOX_STRING    _T("[ ] ")
+    #define wxCHECKLBOX_STRING    wxT("[ ] ")
 #endif
 
 //-----------------------------------------------------------------------------
--- include/wx/x11/textctrl.h-orig	2009-06-18 19:30:17.872915000 -0500
+++ include/wx/x11/textctrl.h	2009-06-18 19:30:26.700569000 -0500
@@ -321,43 +321,43 @@ private:
 //-----------------------------------------------------------------------------
 
 // cursor movement and also selection and delete operations
-#define wxACTION_TEXT_GOTO          _T("goto")  // to pos in numArg
-#define wxACTION_TEXT_FIRST         _T("first") // go to pos 0
-#define wxACTION_TEXT_LAST          _T("last")  // go to last pos
-#define wxACTION_TEXT_HOME          _T("home")
-#define wxACTION_TEXT_END           _T("end")
-#define wxACTION_TEXT_LEFT          _T("left")
-#define wxACTION_TEXT_RIGHT         _T("right")
-#define wxACTION_TEXT_UP            _T("up")
-#define wxACTION_TEXT_DOWN          _T("down")
-#define wxACTION_TEXT_WORD_LEFT     _T("wordleft")
-#define wxACTION_TEXT_WORD_RIGHT    _T("wordright")
-#define wxACTION_TEXT_PAGE_UP       _T("pageup")
-#define wxACTION_TEXT_PAGE_DOWN     _T("pagedown")
+#define wxACTION_TEXT_GOTO          wxT("goto")  // to pos in numArg
+#define wxACTION_TEXT_FIRST         wxT("first") // go to pos 0
+#define wxACTION_TEXT_LAST          wxT("last")  // go to last pos
+#define wxACTION_TEXT_HOME          wxT("home")
+#define wxACTION_TEXT_END           wxT("end")
+#define wxACTION_TEXT_LEFT          wxT("left")
+#define wxACTION_TEXT_RIGHT         wxT("right")
+#define wxACTION_TEXT_UP            wxT("up")
+#define wxACTION_TEXT_DOWN          wxT("down")
+#define wxACTION_TEXT_WORD_LEFT     wxT("wordleft")
+#define wxACTION_TEXT_WORD_RIGHT    wxT("wordright")
+#define wxACTION_TEXT_PAGE_UP       wxT("pageup")
+#define wxACTION_TEXT_PAGE_DOWN     wxT("pagedown")
 
 // clipboard operations
-#define wxACTION_TEXT_COPY          _T("copy")
-#define wxACTION_TEXT_CUT           _T("cut")
-#define wxACTION_TEXT_PASTE         _T("paste")
+#define wxACTION_TEXT_COPY          wxT("copy")
+#define wxACTION_TEXT_CUT           wxT("cut")
+#define wxACTION_TEXT_PASTE         wxT("paste")
 
 // insert text at the cursor position: the text is in strArg of PerformAction
-#define wxACTION_TEXT_INSERT        _T("insert")
+#define wxACTION_TEXT_INSERT        wxT("insert")
 
 // if the action starts with either of these prefixes and the rest of the
 // string is one of the movement commands, it means to select/delete text from
 // the current cursor position to the new one
-#define wxACTION_TEXT_PREFIX_SEL    _T("sel")
-#define wxACTION_TEXT_PREFIX_DEL    _T("del")
+#define wxACTION_TEXT_PREFIX_SEL    wxT("sel")
+#define wxACTION_TEXT_PREFIX_DEL    wxT("del")
 
 // mouse selection
-#define wxACTION_TEXT_ANCHOR_SEL    _T("anchorsel")
-#define wxACTION_TEXT_EXTEND_SEL    _T("extendsel")
-#define wxACTION_TEXT_SEL_WORD      _T("wordsel")
-#define wxACTION_TEXT_SEL_LINE      _T("linesel")
+#define wxACTION_TEXT_ANCHOR_SEL    wxT("anchorsel")
+#define wxACTION_TEXT_EXTEND_SEL    wxT("extendsel")
+#define wxACTION_TEXT_SEL_WORD      wxT("wordsel")
+#define wxACTION_TEXT_SEL_LINE      wxT("linesel")
 
 // undo or redo
-#define wxACTION_TEXT_UNDO          _T("undo")
-#define wxACTION_TEXT_REDO          _T("redo")
+#define wxACTION_TEXT_UNDO          wxT("undo")
+#define wxACTION_TEXT_REDO          wxT("redo")
 
 // ----------------------------------------------------------------------------
 // wxTextCtrl types
--- include/wx/private/fileback.h-orig	2009-06-18 15:59:38.065800000 -0500
+++ include/wx/private/fileback.h	2009-06-18 15:59:48.511378000 -0500
@@ -33,7 +33,7 @@ public:
     // backing file is never created and the backing is done with memory.
     wxBackingFile(wxInputStream *stream,
                   size_t bufsize = DefaultBufSize,
-                  const wxString& prefix = _T("wxbf"));
+                  const wxString& prefix = wxT("wxbf"));
 
     wxBackingFile() : m_impl(NULL) { }
     ~wxBackingFile();
--- include/wx/msw/ole/dropsrc.h-orig	2009-06-18 19:29:22.950144000 -0500
+++ include/wx/msw/ole/dropsrc.h	2009-06-18 19:29:27.859479000 -0500
@@ -30,7 +30,7 @@ class WXDLLIMPEXP_FWD_CORE wxWindow;
 // the cursor 'name' from the resources under MSW, but will expand to
 // something else under GTK. If you don't use it, you will have to use #ifdef
 // in the application code.
-#define wxDROP_ICON(name)   wxCursor(_T(#name))
+#define wxDROP_ICON(name)   wxCursor(wxT(#name))
 
 // ----------------------------------------------------------------------------
 // wxDropSource is used to start the drag-&-drop operation on associated
--- include/wx/msw/ole/oleutils.h-orig	2009-06-18 19:29:34.023446000 -0500
+++ include/wx/msw/ole/oleutils.h	2009-06-18 19:29:52.905737000 -0500
@@ -143,7 +143,7 @@ private:
 #define   IMPLEMENT_IUNKNOWN_METHODS(classname)                               \
   STDMETHODIMP classname::QueryInterface(REFIID riid, void **ppv)             \
   {                                                                           \
-    wxLogQueryInterface(_T(#classname), riid);                                \
+    wxLogQueryInterface(wxT(#classname), riid);                               \
                                                                               \
     if ( IsIidFromList(riid, ms_aIids, WXSIZEOF(ms_aIids)) ) {                \
       *ppv = this;                                                            \
@@ -160,14 +160,14 @@ private:
                                                                               \
   STDMETHODIMP_(ULONG) classname::AddRef()                                    \
   {                                                                           \
-    wxLogAddRef(_T(#classname), m_cRef);                                      \
+    wxLogAddRef(wxT(#classname), m_cRef);                                     \
                                                                               \
     return ++m_cRef;                                                          \
   }                                                                           \
                                                                               \
   STDMETHODIMP_(ULONG) classname::Release()                                   \
   {                                                                           \
-    wxLogRelease(_T(#classname), m_cRef);                                     \
+    wxLogRelease(wxT(#classname), m_cRef);                                    \
                                                                               \
     if ( --m_cRef == wxAutoULong(0) ) {                                                    \
       delete this;                                                            \
--- include/wx/msw/ole/dataobj.h-orig	2009-06-18 19:29:59.548512000 -0500
+++ include/wx/msw/ole/dataobj.h	2009-06-18 19:30:04.337772000 -0500
@@ -59,7 +59,7 @@ public:
 
     #define wxGetFormatName(format) wxDataObject::GetFormatName(format)
 #else // !Debug
-    #define wxGetFormatName(format) _T("")
+    #define wxGetFormatName(format) wxT("")
 #endif // Debug/!Debug
     // they need to be accessed from wxIDataObject, so made them public,
     // or wxIDataObject friend
--- include/wx/msw/private.h-orig	2009-06-18 19:28:10.898262000 -0500
+++ include/wx/msw/private.h	2009-06-18 19:28:23.376366000 -0500
@@ -335,7 +335,7 @@ inline RECT wxGetWindowRect(HWND hwnd)
     RECT rect;
 
     if ( !::GetWindowRect(hwnd, &rect) )
-        wxLogLastError(_T("GetWindowRect"));
+        wxLogLastError(wxT("GetWindowRect"));
 
     return rect;
 }
@@ -345,7 +345,7 @@ inline RECT wxGetClientRect(HWND hwnd)
     RECT rect;
 
     if ( !::GetClientRect(hwnd, &rect) )
-        wxLogLastError(_T("GetClientRect"));
+        wxLogLastError(wxT("GetClientRect"));
 
     return rect;
 }
@@ -415,7 +415,7 @@ public:
 
     void Init(HDC hdc, HGDIOBJ hgdiobj)
     {
-        wxASSERT_MSG( !m_hdc, _T("initializing twice?") );
+        wxASSERT_MSG( !m_hdc, wxT("initializing twice?") );
 
         m_hdc = hdc;
 
@@ -444,7 +444,7 @@ protected:
 
     void InitGdiobj(HGDIOBJ gdiobj)
     {
-        wxASSERT_MSG( !m_gdiobj, _T("initializing twice?") );
+        wxASSERT_MSG( !m_gdiobj, wxT("initializing twice?") );
 
         m_gdiobj = gdiobj;
     }
@@ -537,7 +537,7 @@ public:
         : m_hdc(hdc)
     {
         if ( !::SelectClipRgn(hdc, hrgn) )
-            wxLogLastError(_T("SelectClipRgn"));
+            wxLogLastError(wxT("SelectClipRgn"));
     }
 
     ~HDCClipper()
@@ -566,7 +566,7 @@ private:
         {
             m_modeOld = ::SetMapMode(hdc, mm);
             if ( !m_modeOld )
-                wxLogLastError(_T("SelectClipRgn"));
+                wxLogLastError(wxT("SelectClipRgn"));
         }
 
         ~HDCMapModeChanger()
@@ -595,13 +595,13 @@ public:
     {
         m_hGlobal = ::GlobalAlloc(flags, size);
         if ( !m_hGlobal )
-            wxLogLastError(_T("GlobalAlloc"));
+            wxLogLastError(wxT("GlobalAlloc"));
     }
 
     ~GlobalPtr()
     {
         if ( m_hGlobal && ::GlobalFree(m_hGlobal) )
-            wxLogLastError(_T("GlobalFree"));
+            wxLogLastError(wxT("GlobalFree"));
     }
 
     // implicit conversion
@@ -623,7 +623,7 @@ public:
     {
         m_ptr = GlobalLock(hGlobal);
         if ( !m_ptr )
-            wxLogLastError(_T("GlobalLock"));
+            wxLogLastError(wxT("GlobalLock"));
     }
 
     ~GlobalPtrLock()
@@ -635,7 +635,7 @@ public:
             DWORD dwLastError = ::GetLastError();
             if ( dwLastError != NO_ERROR )
             {
-                wxLogApiError(_T("GlobalUnlock"), dwLastError);
+                wxLogApiError(wxT("GlobalUnlock"), dwLastError);
             }
 #endif // __WXDEBUG__
         }
@@ -668,12 +668,12 @@ public:
     {
         // we should only be called if we hadn't been initialized yet
         wxASSERT_MSG( m_registered == -1,
-                        _T("calling ClassRegistrar::Register() twice?") );
+                        wxT("calling ClassRegistrar::Register() twice?") );
 
         m_registered = ::RegisterClass(&wc) ? 1 : 0;
         if ( !IsRegistered() )
         {
-            wxLogLastError(_T("RegisterClassEx()"));
+            wxLogLastError(wxT("RegisterClassEx()"));
         }
         else
         {
@@ -694,7 +694,7 @@ public:
         {
             if ( !::UnregisterClass(m_clsname, wxhInstance) )
             {
-                wxLogLastError(_T("UnregisterClass"));
+                wxLogLastError(wxT("UnregisterClass"));
             }
         }
     }
@@ -780,7 +780,7 @@ inline wxString wxGetFullModuleName(HMOD
                 MAX_PATH
             ) )
     {
-        wxLogLastError(_T("GetModuleFileName"));
+        wxLogLastError(wxT("GetModuleFileName"));
     }
 
     return fullname;
--- include/wx/msw/subwin.h-orig	2009-06-18 19:28:28.023817000 -0500
+++ include/wx/msw/subwin.h	2009-06-18 19:28:36.984812000 -0500
@@ -28,7 +28,7 @@ public:
     // allocate enough space for the given number of windows
     void Create(size_t n)
     {
-        wxASSERT_MSG( !m_hwnds, _T("Create() called twice?") );
+        wxASSERT_MSG( !m_hwnds, wxT("Create() called twice?") );
 
         m_count = n;
         m_hwnds = (HWND *)calloc(n, sizeof(HWND));
@@ -51,7 +51,7 @@ public:
     // access a given window
     HWND& Get(size_t n)
     {
-        wxASSERT_MSG( n < m_count, _T("subwindow index out of range") );
+        wxASSERT_MSG( n < m_count, wxT("subwindow index out of range") );
 
         return m_hwnds[n];
     }
@@ -101,7 +101,7 @@ public:
     void SetFont(const wxFont& font)
     {
         HFONT hfont = GetHfontOf(font);
-        wxCHECK_RET( hfont, _T("invalid font") );
+        wxCHECK_RET( hfont, wxT("invalid font") );
 
         for ( size_t n = 0; n < m_count; n++ )
         {
--- include/wx/msw/dc.h-orig	2009-06-18 19:28:40.446055000 -0500
+++ include/wx/msw/dc.h	2009-06-18 19:28:44.890863000 -0500
@@ -325,7 +325,7 @@ protected:
     virtual void DoGetSize(int *w, int *h) const
     {
         wxASSERT_MSG( m_size.IsFullySpecified(),
-                      _T("size of this DC hadn't been set and is unknown") );
+                      wxT("size of this DC hadn't been set and is unknown") );
 
         if ( w )
             *w = m_size.x;
--- include/wx/msw/slider95.h-orig	2009-06-18 19:28:49.595520000 -0500
+++ include/wx/msw/slider95.h	2009-06-18 19:28:54.270581000 -0500
@@ -99,7 +99,7 @@ protected:
     void Init();
 
     // format an integer value as string
-    static wxString Format(int n) { return wxString::Format(_T("%d"), n); }
+    static wxString Format(int n) { return wxString::Format(wxT("%d"), n); }
 
     // get the boundig box for the slider and possible labels
     wxRect GetBoundingBox() const;
--- include/wx/msw/spinctrl.h-orig	2009-06-18 19:29:00.394396000 -0500
+++ include/wx/msw/spinctrl.h	2009-06-18 19:29:05.562376000 -0500
@@ -39,7 +39,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -51,7 +51,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     // a wxTextCtrl-like method (but we can't have GetValue returning wxString
     // because the base class already has one returning int!)
--- include/wx/msw/wrapshl.h-orig	2009-06-18 19:29:12.381889000 -0500
+++ include/wx/msw/wrapshl.h	2009-06-18 19:29:17.624828000 -0500
@@ -67,7 +67,7 @@ public:
         wxString path;
         if ( !SHGetPathFromIDList(m_pidl, wxStringBuffer(path, MAX_PATH)) )
         {
-            wxLogLastError(_T("SHGetPathFromIDList"));
+            wxLogLastError(wxT("SHGetPathFromIDList"));
         }
 
         return path;
--- include/wx/protocol/ftp.h-orig	2009-06-18 19:34:29.002686000 -0500
+++ include/wx/protocol/ftp.h	2009-06-18 19:34:33.337500000 -0500
@@ -175,7 +175,7 @@ protected:
 
 // the trace mask used by assorted wxLogTrace() in ftp code, do
 // wxLog::AddTraceMask(FTP_TRACE_MASK) to see them in output
-#define FTP_TRACE_MASK _T("ftp")
+#define FTP_TRACE_MASK wxT("ftp")
 
 #endif // wxUSE_PROTOCOL_FTP
 
--- include/wx/gtk/spinctrl.h-orig	2009-06-18 16:39:29.849272000 -0500
+++ include/wx/gtk/spinctrl.h	2009-06-18 16:39:35.612661000 -0500
@@ -26,7 +26,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -38,7 +38,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     void SetValue(const wxString& text);
     void SetSelection(long from, long to);
--- include/wx/gtk/checklst.h-orig	2009-06-18 16:39:45.996136000 -0500
+++ include/wx/gtk/checklst.h	2009-06-18 16:39:53.887994000 -0500
@@ -18,10 +18,10 @@
 // there is no "right" choice of the checkbox indicators, so allow the user to
 // define them himself if he wants
 #ifndef wxCHECKLBOX_CHECKED
-    #define wxCHECKLBOX_CHECKED   _T('x')
-    #define wxCHECKLBOX_UNCHECKED _T(' ')
+    #define wxCHECKLBOX_CHECKED   wxT('x')
+    #define wxCHECKLBOX_UNCHECKED wxT(' ')
 
-    #define wxCHECKLBOX_STRING    _T("[ ] ")
+    #define wxCHECKLBOX_STRING    wxT("[ ] ")
 #endif
 
 //-----------------------------------------------------------------------------
--- include/wx/xrc/xmlres.h-orig	2009-06-18 19:33:26.160631000 -0500
+++ include/wx/xrc/xmlres.h	2009-06-18 19:33:30.826129000 -0500
@@ -59,7 +59,7 @@ class wxXmlResourceModule;
 #define WX_XMLRES_CURRENT_VERSION_MINOR            5
 #define WX_XMLRES_CURRENT_VERSION_RELEASE          3
 #define WX_XMLRES_CURRENT_VERSION_REVISION         0
-#define WX_XMLRES_CURRENT_VERSION_STRING       _T("2.5.3.0")
+#define WX_XMLRES_CURRENT_VERSION_STRING       wxT("2.5.3.0")
 
 #define WX_XMLRES_CURRENT_VERSION \
                 (WX_XMLRES_CURRENT_VERSION_MAJOR * 256*256*256 + \
--- include/wx/palmos/spinctrl.h-orig	2009-06-18 19:32:35.600599000 -0500
+++ include/wx/palmos/spinctrl.h	2009-06-18 19:32:42.578991000 -0500
@@ -37,7 +37,7 @@ public:
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -49,7 +49,7 @@ public:
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     // a wxTextCtrl-like method (but we can't have GetValue returning wxString
     // because the base class already has one returning int!)
--- include/wx/palmos/statbmp.h-orig	2009-06-18 19:32:47.952827000 -0500
+++ include/wx/palmos/statbmp.h	2009-06-18 19:32:53.206503000 -0500
@@ -54,14 +54,14 @@ public:
     // vice versa
     wxIcon GetIcon() const
     {
-        wxASSERT_MSG( m_isIcon, _T("no icon in this wxStaticBitmap") );
+        wxASSERT_MSG( m_isIcon, wxT("no icon in this wxStaticBitmap") );
 
         return *(wxIcon *)m_image;
     }
 
     wxBitmap GetBitmap() const
     {
-        wxASSERT_MSG( !m_isIcon, _T("no bitmap in this wxStaticBitmap") );
+        wxASSERT_MSG( !m_isIcon, wxT("no bitmap in this wxStaticBitmap") );
 
         return *(wxBitmap *)m_image;
     }
--- include/wx/cocoa/dirdlg.h-orig	2009-06-18 19:34:45.167239000 -0500
+++ include/wx/cocoa/dirdlg.h	2009-06-18 19:34:48.977479000 -0500
@@ -26,7 +26,7 @@ class WXDLLEXPORT wxDirDialog: public wx
 public:
     wxDirDialog(wxWindow *parent,
                 const wxString& message = wxDirSelectorPromptStr,
-                const wxString& defaultPath = _T(""),
+                const wxString& defaultPath = wxT(""),
                 long style = wxDD_DEFAULT_STYLE,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
--- include/wx/wxchar.h-orig	2009-06-21 17:22:26.734687000 -0500
+++ include/wx/wxchar.h	2009-06-18 15:46:54.523955000 -0500
@@ -236,26 +236,30 @@
     #undef _T
 #endif
 
-/* could already be defined by tchar.h (it's quasi standard) */
-#ifndef _T
+/* although global macros with such names are normally bad, we want to have */
+/* another name for _T() which should be used to avoid confusion between _T() */
+/* and _() in wxWidgets sources */
+#ifndef wxT
     #if !wxUSE_UNICODE
-        #define _T(x) x
+        #define wxT(x) x
     #else /* Unicode */
         /* use wxCONCAT_HELPER so that x could be expanded if it's a macro */
-        #define _T(x) wxCONCAT_HELPER(L, x)
+        #define wxT(x) wxCONCAT_HELPER(L, x)
     #endif /* ASCII/Unicode */
-#endif /* !defined(_T) */
+#endif /* !defined(wxT) */
 
-/* although global macros with such names are normally bad, we want to have */
-/* another name for _T() which should be used to avoid confusion between _T() */
-/* and _() in wxWidgets sources */
-#define wxT(x)       _T(x)
+/* could already be defined by tchar.h (it's quasi standard) */
+#if !defined (__SUNPRO_C) && !defined(__SUNPRO_CC)
+#ifndef _T
+#define _T(x)       wxT(x)
+#endif
+#endif
 
 /* this macro exists only for forward compatibility with wx 3.0 */
-#define wxS(x)       _T(x)
+#define wxS(x)       wxT(x)
 
 /* a helper macro allowing to make another macro Unicode-friendly, see below */
-#define wxAPPLY_T(x) _T(x)
+#define wxAPPLY_T(x) wxT(x)
 
 /* Unicode-friendly __FILE__, __DATE__ and __TIME__ analogs */
 #ifndef __TFILE__
@@ -1114,7 +1118,7 @@ WXDLLIMPEXP_BASE bool wxOKlibc(); /* for
 
 #ifdef _WIN32_WCE
     #if _WIN32_WCE <= 211
-        #define isspace(c) ((c) == _T(' ') || (c) == _T('\t'))
+        #define isspace(c) ((c) == wxT(' ') || (c) == wxT('\t'))
     #endif
 #endif /* _WIN32_WCE */
 
--- include/wx/confbase.h-orig	2009-06-18 15:40:14.555591000 -0500
+++ include/wx/confbase.h	2009-06-18 15:40:21.635853000 -0500
@@ -30,13 +30,13 @@ class WXDLLIMPEXP_FWD_BASE wxArrayString
 
 /// separates group and entry names (probably shouldn't be changed)
 #ifndef wxCONFIG_PATH_SEPARATOR
-  #define   wxCONFIG_PATH_SEPARATOR     _T('/')
+  #define   wxCONFIG_PATH_SEPARATOR     wxT('/')
 #endif
 
 /// introduces immutable entries
 // (i.e. the ones which can't be changed from the local config file)
 #ifndef wxCONFIG_IMMUTABLE_PREFIX
-  #define   wxCONFIG_IMMUTABLE_PREFIX   _T('!')
+  #define   wxCONFIG_IMMUTABLE_PREFIX   wxT('!')
 #endif
 
 #if wxUSE_CONFIG
--- include/wx/datetime.h-orig	2009-06-18 15:40:25.715499000 -0500
+++ include/wx/datetime.h	2009-06-18 15:41:03.150669000 -0500
@@ -951,37 +951,37 @@ public:
 
     inline bool operator<(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() < dt.GetValue();
     }
 
     inline bool operator<=(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() <= dt.GetValue();
     }
 
     inline bool operator>(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() > dt.GetValue();
     }
 
     inline bool operator>=(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() >= dt.GetValue();
     }
 
     inline bool operator==(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() == dt.GetValue();
     }
 
     inline bool operator!=(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() != dt.GetValue();
     }
 
@@ -1075,15 +1075,15 @@ public:
     wxString Format(const wxChar *format = wxDefaultDateTimeFormat,
                     const TimeZone& tz = Local) const;
         // preferred date representation for the current locale
-    wxString FormatDate() const { return Format(_T("%x")); }
+    wxString FormatDate() const { return Format(wxT("%x")); }
         // preferred time representation for the current locale
-    wxString FormatTime() const { return Format(_T("%X")); }
+    wxString FormatTime() const { return Format(wxT("%X")); }
         // returns the string representing the date in ISO 8601 format
         // (YYYY-MM-DD)
-    wxString FormatISODate() const { return Format(_T("%Y-%m-%d")); }
+    wxString FormatISODate() const { return Format(wxT("%Y-%m-%d")); }
         // returns the string representing the time in ISO 8601 format
         // (HH:MM:SS)
-    wxString FormatISOTime() const { return Format(_T("%H:%M:%S")); }
+    wxString FormatISOTime() const { return Format(wxT("%H:%M:%S")); }
 
     // implementation
     // ------------------------------------------------------------------------
@@ -1647,7 +1647,7 @@ inline wxDateTime::wxDateTime(double jdn
 
 inline wxDateTime& wxDateTime::Set(const Tm& tm)
 {
-    wxASSERT_MSG( tm.IsValid(), _T("invalid broken down date/time") );
+    wxASSERT_MSG( tm.IsValid(), wxT("invalid broken down date/time") );
 
     return Set(tm.mday, (Month)tm.mon, tm.year,
                tm.hour, tm.min, tm.sec, tm.msec);
@@ -1678,14 +1678,14 @@ inline wxDateTime::wxDateTime(wxDateTime
 
 inline wxLongLong wxDateTime::GetValue() const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     return m_time;
 }
 
 inline time_t wxDateTime::GetTicks() const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
     if ( !IsInStdRange() )
     {
         return (time_t)-1;
@@ -1753,21 +1753,21 @@ inline wxDateTime wxDateTime::GetYearDay
 
 inline bool wxDateTime::IsEqualTo(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return m_time == datetime.m_time;
 }
 
 inline bool wxDateTime::IsEarlierThan(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return m_time < datetime.m_time;
 }
 
 inline bool wxDateTime::IsLaterThan(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return m_time > datetime.m_time;
 }
@@ -1824,14 +1824,14 @@ inline bool wxDateTime::IsEqualUpTo(cons
 
 inline wxDateTime wxDateTime::Add(const wxTimeSpan& diff) const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     return wxDateTime(m_time + diff.GetValue());
 }
 
 inline wxDateTime& wxDateTime::Add(const wxTimeSpan& diff)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     m_time += diff.GetValue();
 
@@ -1845,14 +1845,14 @@ inline wxDateTime& wxDateTime::operator+
 
 inline wxDateTime wxDateTime::Subtract(const wxTimeSpan& diff) const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     return wxDateTime(m_time - diff.GetValue());
 }
 
 inline wxDateTime& wxDateTime::Subtract(const wxTimeSpan& diff)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     m_time -= diff.GetValue();
 
@@ -1866,7 +1866,7 @@ inline wxDateTime& wxDateTime::operator-
 
 inline wxTimeSpan wxDateTime::Subtract(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return wxTimeSpan(GetValue() - datetime.GetValue());
 }
--- include/wx/filename.h-orig	2009-06-18 15:41:07.220180000 -0500
+++ include/wx/filename.h	2009-06-18 15:41:14.815310000 -0500
@@ -488,10 +488,10 @@ public:
     static wxULongLong GetSize(const wxString &file);
 
         // returns the size in a human readable form
-    wxString GetHumanReadableSize(const wxString &nullsize = wxGetTranslation(_T("Not available")),
+    wxString GetHumanReadableSize(const wxString &nullsize = wxGetTranslation(wxT("Not available")),
                                   int precision = 1) const;
     static wxString GetHumanReadableSize(const wxULongLong &sz,
-                                         const wxString &nullsize = wxGetTranslation(_T("Not available")),
+                                         const wxString &nullsize = wxGetTranslation(wxT("Not available")),
                                          int precision = 1);
 
 
--- include/wx/tokenzr.h-orig	2009-06-18 15:41:19.939233000 -0500
+++ include/wx/tokenzr.h	2009-06-18 15:41:27.392947000 -0500
@@ -21,7 +21,7 @@
 // ----------------------------------------------------------------------------
 
 // default: delimiters are usual white space characters
-#define wxDEFAULT_DELIMITERS (_T(" \t\r\n"))
+#define wxDEFAULT_DELIMITERS (wxT(" \t\r\n"))
 
 // wxStringTokenizer mode flags which determine its behaviour
 enum wxStringTokenizerMode
--- include/wx/intl.h-orig	2009-06-18 15:42:08.710405000 -0500
+++ include/wx/intl.h	2009-06-18 15:42:26.865838000 -0500
@@ -45,13 +45,13 @@ enum wxLayoutDirection
 // --keyword="_" --keyword="wxPLURAL:1,2" options
 // to extract the strings from the sources)
 #ifndef WXINTL_NO_GETTEXT_MACRO
-    #define _(s)                     wxGetTranslation(_T(s))
-    #define wxPLURAL(sing, plur, n)  wxGetTranslation(_T(sing), _T(plur), n)
+    #define _(s)                     wxGetTranslation(wxT(s))
+    #define wxPLURAL(sing, plur, n)  wxGetTranslation(wxT(sing), wxT(plur), n)
 #endif
 
 // another one which just marks the strings for extraction, but doesn't
 // perform the translation (use -kwxTRANSLATE with xgettext!)
-#define wxTRANSLATE(str) _T(str)
+#define wxTRANSLATE(str) wxT(str)
 
 // ----------------------------------------------------------------------------
 // forward decls
@@ -603,12 +603,12 @@ wxGetTranslation(const wxChar *sz1, cons
 
 #if !defined(WXINTL_NO_GETTEXT_MACRO)
     #if !defined(_)
-        #define _(s)                 (_T(s))
+        #define _(s)                 (wxT(s))
     #endif
-    #define wxPLURAL(sing, plur, n)  ((n) == 1 ? _T(sing) : _T(plur))
+    #define wxPLURAL(sing, plur, n)  ((n) == 1 ? wxT(sing) : wxT(plur))
 #endif
 
-#define wxTRANSLATE(str) _T(str)
+#define wxTRANSLATE(str) wxT(str)
 
 inline const wxChar *
 wxGetTranslation(const wxChar *sz, const wxChar * WXUNUSED(domain) = NULL)
@@ -622,10 +622,10 @@ wxGetTranslation(const wxChar *sz, const
 // wxTRANSLATE) too
 #if !defined(WXINTL_NO_GETTEXT_MACRO)
     #if !defined(gettext_noop)
-        #define gettext_noop(str) _T(str)
+        #define gettext_noop(str) wxT(str)
     #endif
     #if !defined(N_)
-        #define N_(s)             _T(s)
+        #define N_(s)             wxT(s)
     #endif
 #endif
 
--- include/wx/ffile.h-orig	2009-06-18 15:59:10.249560000 -0500
+++ include/wx/ffile.h	2009-06-18 15:59:15.958603000 -0500
@@ -37,13 +37,13 @@ public:
     // def ctor
   wxFFile() { m_fp = NULL; }
     // open specified file (may fail, use IsOpened())
-  wxFFile(const wxChar *filename, const wxChar *mode = _T("r"));
+  wxFFile(const wxChar *filename, const wxChar *mode = wxT("r"));
     // attach to (already opened) file
   wxFFile(FILE *lfp) { m_fp = lfp; }
 
   // open/close
     // open a file (existing or not - the mode controls what happens)
-  bool Open(const wxChar *filename, const wxChar *mode = _T("r"));
+  bool Open(const wxChar *filename, const wxChar *mode = wxT("r"));
     // closes the opened file (this is a NOP if not opened)
   bool Close();
 
--- include/wx/defs.h-orig	2009-06-18 15:47:22.148624000 -0500
+++ include/wx/defs.h	2009-06-18 15:47:38.819252000 -0500
@@ -915,28 +915,28 @@ inline void *wxUIntToPtr(wxUIntPtr p)
 #if (defined(__VISUALC__) && defined(__WIN32__))
     #define wxLongLong_t __int64
     #define wxLongLongSuffix i64
-    #define wxLongLongFmtSpec _T("I64")
+    #define wxLongLongFmtSpec wxT("I64")
 #elif defined(__BORLANDC__) && defined(__WIN32__) && (__BORLANDC__ >= 0x520)
     #define wxLongLong_t __int64
     #define wxLongLongSuffix i64
-    #define wxLongLongFmtSpec _T("L")
+    #define wxLongLongFmtSpec wxT("L")
 #elif (defined(__WATCOMC__) && (defined(__WIN32__) || defined(__DOS__) || defined(__OS2__)))
       #define wxLongLong_t __int64
       #define wxLongLongSuffix i64
-      #define wxLongLongFmtSpec _T("L")
+      #define wxLongLongFmtSpec wxT("L")
 #elif defined(__DIGITALMARS__)
       #define wxLongLong_t __int64
       #define wxLongLongSuffix LL
-      #define wxLongLongFmtSpec _T("ll")
+      #define wxLongLongFmtSpec wxT("ll")
 #elif defined(__MINGW32__)
     #define wxLongLong_t long long
     #define wxLongLongSuffix ll
-    #define wxLongLongFmtSpec _T("I64")
+    #define wxLongLongFmtSpec wxT("I64")
 #elif defined(__MWERKS__)
     #if __option(longlong)
         #define wxLongLong_t long long
         #define wxLongLongSuffix ll
-        #define wxLongLongFmtSpec _T("ll")
+        #define wxLongLongFmtSpec wxT("ll")
     #else
         #error "The 64 bit integer support in CodeWarrior has been disabled."
         #error "See the documentation on the 'longlong' pragma."
@@ -944,7 +944,7 @@ inline void *wxUIntToPtr(wxUIntPtr p)
 #elif defined(__WXPALMOS__)
     #define wxLongLong_t int64_t
     #define wxLongLongSuffix ll
-    #define wxLongLongFmtSpec _T("ll")
+    #define wxLongLongFmtSpec wxT("ll")
 #elif defined(__VISAGECPP__) && __IBMCPP__ >= 400
     #define wxLongLong_t long long
 #elif (defined(SIZEOF_LONG_LONG) && SIZEOF_LONG_LONG >= 8)  || \
@@ -954,11 +954,11 @@ inline void *wxUIntToPtr(wxUIntPtr p)
         (defined(__DJGPP__) && __DJGPP__ >= 2)
     #define wxLongLong_t long long
     #define wxLongLongSuffix ll
-    #define wxLongLongFmtSpec _T("ll")
+    #define wxLongLongFmtSpec wxT("ll")
 #elif defined(SIZEOF_LONG) && (SIZEOF_LONG == 8)
     #define wxLongLong_t long
     #define wxLongLongSuffix l
-    #define wxLongLongFmtSpec _T("l")
+    #define wxLongLongFmtSpec wxT("l")
     #define wxLongLongIsLong
 #endif
 
--- include/wx/wfstream.h-orig	2009-06-18 16:03:46.820088000 -0500
+++ include/wx/wfstream.h	2009-06-18 16:03:54.313932000 -0500
@@ -132,7 +132,7 @@ private:
 class WXDLLIMPEXP_BASE wxFFileInputStream : public wxInputStream
 {
 public:
-    wxFFileInputStream(const wxString& fileName, const wxChar *mode = _T("rb"));
+    wxFFileInputStream(const wxString& fileName, const wxChar *mode = wxT("rb"));
     wxFFileInputStream(wxFFile& file);
     wxFFileInputStream(FILE *file);
     virtual ~wxFFileInputStream();
@@ -160,7 +160,7 @@ protected:
 class WXDLLIMPEXP_BASE wxFFileOutputStream : public wxOutputStream
 {
 public:
-    wxFFileOutputStream(const wxString& fileName, const wxChar *mode = _T("w+b"));
+    wxFFileOutputStream(const wxString& fileName, const wxChar *mode = wxT("w+b"));
     wxFFileOutputStream(wxFFile& file);
     wxFFileOutputStream(FILE *file);
     virtual ~wxFFileOutputStream();
--- include/wx/longlong.h-orig	2009-06-18 16:08:52.656170000 -0500
+++ include/wx/longlong.h	2009-06-18 16:09:01.496294000 -0500
@@ -177,7 +177,7 @@ public:
     long ToLong() const
     {
         wxASSERT_MSG( (m_ll >= LONG_MIN) && (m_ll <= LONG_MAX),
-                      _T("wxLongLong to long conversion loss of precision") );
+                      wxT("wxLongLong to long conversion loss of precision") );
 
         return wx_truncate_cast(long, m_ll);
     }
@@ -405,7 +405,7 @@ public:
     unsigned long ToULong() const
     {
         wxASSERT_MSG( m_ll <= LONG_MAX,
-                      _T("wxULongLong to long conversion loss of precision") );
+                      wxT("wxULongLong to long conversion loss of precision") );
 
         return wx_truncate_cast(unsigned long, m_ll);
     }
@@ -683,7 +683,7 @@ public:
     long ToLong() const
     {
         wxASSERT_MSG( (m_hi == 0l) || (m_hi == -1l),
-                      _T("wxLongLong to long conversion loss of precision") );
+                      wxT("wxLongLong to long conversion loss of precision") );
 
         return (long)m_lo;
     }
@@ -908,7 +908,7 @@ public:
     unsigned long ToULong() const
     {
         wxASSERT_MSG( m_hi == 0ul,
-                      _T("wxULongLong to long conversion loss of precision") );
+                      wxT("wxULongLong to long conversion loss of precision") );
 
         return (unsigned long)m_lo;
     }
--- include/wx/imagbmp.h-orig	2009-06-18 16:24:10.681076000 -0500
+++ include/wx/imagbmp.h	2009-06-18 16:24:30.898602000 -0500
@@ -14,7 +14,7 @@
 
 // defines for saving the BMP file in different formats, Bits Per Pixel
 // USE: wximage.SetOption( wxIMAGE_OPTION_BMP_FORMAT, wxBMP_xBPP );
-#define wxIMAGE_OPTION_BMP_FORMAT wxString(_T("wxBMP_FORMAT"))
+#define wxIMAGE_OPTION_BMP_FORMAT wxString(wxT("wxBMP_FORMAT"))
 
 // These two options are filled in upon reading CUR file and can (should) be
 // specified when saving a CUR file - they define the hotspot of the cursor:
@@ -52,10 +52,10 @@ class WXDLLEXPORT wxBMPHandler : public 
 public:
     wxBMPHandler()
     {
-        m_name = _T("Windows bitmap file");
-        m_extension = _T("bmp");
+        m_name = wxT("Windows bitmap file");
+        m_extension = wxT("bmp");
         m_type = wxBITMAP_TYPE_BMP;
-        m_mime = _T("image/x-bmp");
+        m_mime = wxT("image/x-bmp");
     }
 
 #if wxUSE_STREAMS
@@ -86,10 +86,10 @@ class WXDLLEXPORT wxICOHandler : public 
 public:
     wxICOHandler()
     {
-        m_name = _T("Windows icon file");
-        m_extension = _T("ico");
+        m_name = wxT("Windows icon file");
+        m_extension = wxT("ico");
         m_type = wxBITMAP_TYPE_ICO;
-        m_mime = _T("image/x-ico");
+        m_mime = wxT("image/x-ico");
     }
 
 #if wxUSE_STREAMS
@@ -115,10 +115,10 @@ class WXDLLEXPORT wxCURHandler : public 
 public:
     wxCURHandler()
     {
-        m_name = _T("Windows cursor file");
-        m_extension = _T("cur");
+        m_name = wxT("Windows cursor file");
+        m_extension = wxT("cur");
         m_type = wxBITMAP_TYPE_CUR;
-        m_mime = _T("image/x-cur");
+        m_mime = wxT("image/x-cur");
     }
 
     // VS: This handler's meat is implemented inside wxICOHandler (the two
@@ -142,10 +142,10 @@ class WXDLLEXPORT wxANIHandler : public 
 public:
     wxANIHandler()
     {
-        m_name = _T("Windows animated cursor file");
-        m_extension = _T("ani");
+        m_name = wxT("Windows animated cursor file");
+        m_extension = wxT("ani");
         m_type = wxBITMAP_TYPE_ANI;
-        m_mime = _T("image/x-ani");
+        m_mime = wxT("image/x-ani");
     }
 
 
--- include/wx/version.h-orig	2009-06-18 16:24:49.877507000 -0500
+++ include/wx/version.h	2009-06-18 16:25:11.453176000 -0500
@@ -30,7 +30,7 @@
 #define wxMINOR_VERSION      8
 #define wxRELEASE_NUMBER     10
 #define wxSUBRELEASE_NUMBER  0
-#define wxVERSION_STRING   _T("wxWidgets 2.8.10")
+#define wxVERSION_STRING   wxT("wxWidgets 2.8.10")
 
 /*  nothing to update below this line when updating the version */
 /*  ---------------------------------------------------------------------------- */
@@ -54,7 +54,7 @@
 #define wxMAKE_VERSION_STRING_T(x, y, z) \
     wxSTRINGIZE_T(x) wxSTRINGIZE_T(y) wxSTRINGIZE_T(z)
 #define wxMAKE_VERSION_DOT_STRING_T(x, y, z) \
-    wxSTRINGIZE_T(x) _T(".") wxSTRINGIZE_T(y) _T(".") wxSTRINGIZE_T(z)
+    wxSTRINGIZE_T(x) wxT(".") wxSTRINGIZE_T(y) wxT(".") wxSTRINGIZE_T(z)
 
 /*  these are used by src/msw/version.rc and should always be ASCII, not Unicode */
 #define wxVERSION_NUM_STRING \
--- include/wx/mimetype.h-orig	2009-06-18 16:25:27.258491000 -0500
+++ include/wx/mimetype.h	2009-06-18 16:25:35.767637000 -0500
@@ -51,12 +51,12 @@ class WXDLLIMPEXP_BASE wxMimeType : publ
 public:
     // all string ctors here
 
-    wxString GetType() const { return BeforeFirst(_T('/')); }
-    wxString GetSubType() const { return AfterFirst(_T('/')); }
+    wxString GetType() const { return BeforeFirst(wxT('/')); }
+    wxString GetSubType() const { return AfterFirst(wxT('/')); }
 
     void SetSubType(const wxString& subtype)
     {
-        *this = GetType() + _T('/') + subtype;
+        *this = GetType() + wxT('/') + subtype;
     }
 
     bool Matches(const wxMimeType& wildcard)
--- include/wx/image.h-orig	2009-06-18 16:25:41.098188000 -0500
+++ include/wx/image.h	2009-06-18 16:25:50.660818000 -0500
@@ -27,14 +27,14 @@
 // which breaks the compilation below
 #undef index
 
-#define wxIMAGE_OPTION_QUALITY  wxString(_T("quality"))
-#define wxIMAGE_OPTION_FILENAME wxString(_T("FileName"))
+#define wxIMAGE_OPTION_QUALITY  wxString(wxT("quality"))
+#define wxIMAGE_OPTION_FILENAME wxString(wxT("FileName"))
 
-#define wxIMAGE_OPTION_RESOLUTION            wxString(_T("Resolution"))
-#define wxIMAGE_OPTION_RESOLUTIONX           wxString(_T("ResolutionX"))
-#define wxIMAGE_OPTION_RESOLUTIONY           wxString(_T("ResolutionY"))
+#define wxIMAGE_OPTION_RESOLUTION            wxString(wxT("Resolution"))
+#define wxIMAGE_OPTION_RESOLUTIONX           wxString(wxT("ResolutionX"))
+#define wxIMAGE_OPTION_RESOLUTIONY           wxString(wxT("ResolutionY"))
 
-#define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(_T("ResolutionUnit"))
+#define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(wxT("ResolutionUnit"))
 
 // constants used with wxIMAGE_OPTION_RESOLUTIONUNIT
 enum
--- include/wx/filefn.h-orig	2009-06-18 16:25:55.774697000 -0500
+++ include/wx/filefn.h	2009-06-18 16:25:59.511770000 -0500
@@ -406,7 +406,7 @@ enum wxFileKind
             #define wxHAS_LARGE_FFILES
         #endif
     #else
-        #define wxFileOffsetFmtSpec _T("")
+        #define wxFileOffsetFmtSpec wxT("")
     #endif
     // functions
     #define   wxClose      close
--- include/wx/imagtiff.h-orig	2009-06-18 16:26:06.813880000 -0500
+++ include/wx/imagtiff.h	2009-06-18 16:26:15.466203000 -0500
@@ -21,10 +21,10 @@
 #include "wx/image.h"
 
 // defines for wxImage::SetOption
-#define wxIMAGE_OPTION_BITSPERSAMPLE               wxString(_T("BitsPerSample"))
-#define wxIMAGE_OPTION_SAMPLESPERPIXEL             wxString(_T("SamplesPerPixel"))
-#define wxIMAGE_OPTION_COMPRESSION                 wxString(_T("Compression"))
-#define wxIMAGE_OPTION_IMAGEDESCRIPTOR             wxString(_T("ImageDescriptor"))
+#define wxIMAGE_OPTION_BITSPERSAMPLE               wxString(wxT("BitsPerSample"))
+#define wxIMAGE_OPTION_SAMPLESPERPIXEL             wxString(wxT("SamplesPerPixel"))
+#define wxIMAGE_OPTION_COMPRESSION                 wxString(wxT("Compression"))
+#define wxIMAGE_OPTION_IMAGEDESCRIPTOR             wxString(wxT("ImageDescriptor"))
 
 class WXDLLEXPORT wxTIFFHandler: public wxImageHandler
 {
--- include/wx/msgdlg.h-orig	2009-06-18 16:26:21.891727000 -0500
+++ include/wx/msgdlg.h	2009-06-18 16:26:27.030661000 -0500
@@ -23,10 +23,10 @@ protected:
     void SetMessageDialogStyle(long style)
     {
         wxASSERT_MSG( ((style & wxYES_NO) == wxYES_NO) || ((style & wxYES_NO) == 0),
-                      _T("wxYES and wxNO may only be used together in wxMessageDialog") );
+                      wxT("wxYES and wxNO may only be used together in wxMessageDialog") );
 
         wxASSERT_MSG( (style & wxID_OK) != wxID_OK,
-                      _T("wxMessageBox: Did you mean wxOK (and not wxID_OK)?") );
+                      wxT("wxMessageBox: Did you mean wxOK (and not wxID_OK)?") );
 
         m_dialogStyle = style;
     }
--- include/wx/tbarbase.h-orig	2009-06-18 16:26:32.636745000 -0500
+++ include/wx/tbarbase.h	2009-06-18 16:26:38.473418000 -0500
@@ -115,7 +115,7 @@ public:
 
     wxControl *GetControl() const
     {
-        wxASSERT_MSG( IsControl(), _T("this toolbar tool is not a control") );
+        wxASSERT_MSG( IsControl(), wxT("this toolbar tool is not a control") );
 
         return m_control;
     }
@@ -129,7 +129,7 @@ public:
     int GetStyle() const { return m_toolStyle; }
     wxItemKind GetKind() const
     {
-        wxASSERT_MSG( IsButton(), _T("only makes sense for buttons") );
+        wxASSERT_MSG( IsButton(), wxT("only makes sense for buttons") );
 
         return m_kind;
     }
--- include/wx/valtext.h-orig	2009-06-18 16:26:43.240510000 -0500
+++ include/wx/valtext.h	2009-06-18 16:26:48.195819000 -0500
@@ -99,9 +99,9 @@ protected:
     bool CheckValidator() const
     {
         wxCHECK_MSG( m_validatorWindow, false,
-                     _T("No window associated with validator") );
+                     wxT("No window associated with validator") );
         wxCHECK_MSG( m_validatorWindow->IsKindOf(CLASSINFO(wxTextCtrl)), false,
-                     _T("wxTextValidator is only for wxTextCtrl's") );
+                     wxT("wxTextValidator is only for wxTextCtrl's") );
 
         return true;
     }
--- include/wx/sound.h-orig	2009-06-18 16:26:53.022470000 -0500
+++ include/wx/sound.h	2009-06-18 16:26:56.530862000 -0500
@@ -43,7 +43,7 @@ public:
     {
         wxASSERT_MSG( (flags & wxSOUND_LOOP) == 0 ||
                       (flags & wxSOUND_ASYNC) != 0,
-                     _T("sound can only be looped asynchronously") );
+                     wxT("sound can only be looped asynchronously") );
         return DoPlay(flags);
     }
 #if WXWIN_COMPATIBILITY_2_4
--- include/wx/debug.h-orig	2009-06-18 16:27:22.532145000 -0500
+++ include/wx/debug.h	2009-06-18 16:27:29.071844000 -0500
@@ -123,13 +123,13 @@
       if ( cond )                                                             \
       {}                                                                      \
       else                                                                    \
-          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, _T(#cond), msg)
+          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, wxT(#cond), msg)
   #else
     #define wxASSERT_MSG(cond, msg)                                           \
       if ( cond )                                                             \
           ;                                                                   \
       else                                                                    \
-          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, _T(#cond), msg)
+          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, wxT(#cond), msg)
   #endif
 
   /*  special form of assert: always triggers it (in debug mode) */
@@ -140,7 +140,7 @@
 
   /*  FAIL with some message and a condition */
   #define wxFAIL_COND_MSG(cond, msg)                                          \
-      wxOnAssert(__TFILE__, __LINE__,  __WXFUNCTION__, _T(cond), msg)
+      wxOnAssert(__TFILE__, __LINE__,  __WXFUNCTION__, wxT(cond), msg)
 
   /*  An assert helper used to avoid warning when testing constant expressions, */
   /*  i.e. wxASSERT( sizeof(int) == 4 ) can generate a compiler warning about */
--- include/wx/vlbox.h-orig	2009-06-18 16:27:38.429176000 -0500
+++ include/wx/vlbox.h	2009-06-18 16:27:44.517915000 -0500
@@ -17,7 +17,7 @@
 
 class WXDLLIMPEXP_FWD_CORE wxSelectionStore;
 
-#define wxVListBoxNameStr _T("wxVListBox")
+#define wxVListBoxNameStr wxT("wxVListBox")
 
 // ----------------------------------------------------------------------------
 // wxVListBox
@@ -86,7 +86,7 @@ public:
     int GetSelection() const
     {
         wxASSERT_MSG( !HasMultipleSelection(),
-                        _T("GetSelection() can't be used with wxLB_MULTIPLE") );
+                        wxT("GetSelection() can't be used with wxLB_MULTIPLE") );
 
         return m_current;
     }
--- include/wx/module.h-orig	2009-06-18 16:27:56.970506000 -0500
+++ include/wx/module.h	2009-06-18 16:28:00.715220000 -0500
@@ -68,7 +68,7 @@ protected:
     // after that
     void AddDependency(wxClassInfo *dep)
     {
-        wxCHECK_RET( dep, _T("NULL module dependency") );
+        wxCHECK_RET( dep, wxT("NULL module dependency") );
 
         m_dependencies.Add(dep);
     }
--- include/wx/event.h-orig	2009-06-18 16:28:05.423886000 -0500
+++ include/wx/event.h	2009-06-18 16:28:10.652808000 -0500
@@ -451,7 +451,7 @@ public:
     wxPropagateOnce(wxEvent& event) : m_event(event)
     {
         wxASSERT_MSG( m_event.m_propagationLevel > 0,
-                        _T("shouldn't be used unless ShouldPropagate()!") );
+                        wxT("shouldn't be used unless ShouldPropagate()!") );
 
         m_event.m_propagationLevel--;
     }
@@ -1398,7 +1398,7 @@ public:
         // m_loggingOff flag is only used by wxEVT_[QUERY_]END_SESSION, it
         // doesn't make sense for wxEVT_CLOSE_WINDOW
         wxASSERT_MSG( m_eventType != wxEVT_CLOSE_WINDOW,
-                      _T("this flag is for end session events only") );
+                      wxT("this flag is for end session events only") );
 
         return m_loggingOff;
     }
--- include/wx/selstore.h-orig	2009-06-18 16:28:16.236114000 -0500
+++ include/wx/selstore.h	2009-06-18 16:28:22.874937000 -0500
@@ -51,7 +51,7 @@ public:
     void Clear() { m_itemsSel.Clear(); m_count = 0; m_defaultState = false; }
 
     // must be called when a new item is inserted/added
-    void OnItemAdd(size_t WXUNUSED(item)) { wxFAIL_MSG( _T("TODO") ); }
+    void OnItemAdd(size_t WXUNUSED(item)) { wxFAIL_MSG( wxT("TODO") ); }
 
     // must be called when an item is deleted
     void OnItemDelete(size_t item);
--- include/wx/stopwatch.h-orig	2009-06-18 16:28:30.064003000 -0500
+++ include/wx/stopwatch.h	2009-06-18 16:28:34.288327000 -0500
@@ -40,7 +40,7 @@ public:
     void Resume()
     {
         wxASSERT_MSG( m_pauseCount > 0,
-                      _T("Resuming stop watch which is not paused") );
+                      wxT("Resuming stop watch which is not paused") );
 
         if ( --m_pauseCount == 0 )
             Start(m_pause);
--- include/wx/dcbuffer.h-orig	2009-06-18 16:28:54.202921000 -0500
+++ include/wx/dcbuffer.h	2009-06-18 16:29:01.185159000 -0500
@@ -100,8 +100,8 @@ public:
     // blitting to) is destroyed.
     void UnMask()
     {
-        wxCHECK_RET( m_dc, _T("no underlying wxDC?") );
-        wxASSERT_MSG( m_buffer && m_buffer->IsOk(), _T("invalid backing store") );
+        wxCHECK_RET( m_dc, wxT("no underlying wxDC?") );
+        wxASSERT_MSG( m_buffer && m_buffer->IsOk(), wxT("invalid backing store") );
 
         wxCoord x = 0,
                 y = 0;
@@ -122,7 +122,7 @@ private:
     // common part of Init()s
     void InitCommon(wxDC *dc, int style)
     {
-        wxASSERT_MSG( !m_dc, _T("wxBufferedDC already initialised") );
+        wxASSERT_MSG( !m_dc, wxT("wxBufferedDC already initialised") );
 
         m_dc = dc;
         m_style = style;
--- include/wx/dcmirror.h-orig	2009-06-18 16:29:06.636547000 -0500
+++ include/wx/dcmirror.h	2009-06-18 16:29:13.824313000 -0500
@@ -135,7 +135,7 @@ protected:
                            wxCoord x2, wxCoord y2,
                            wxCoord xc, wxCoord yc)
     {
-        wxFAIL_MSG( _T("this is probably wrong") );
+        wxFAIL_MSG( wxT("this is probably wrong") );
 
         m_dc.DoDrawArc(GetX(x1, y1), GetY(x1, y1),
                        GetX(x2, y2), GetY(x2, y2),
@@ -152,7 +152,7 @@ protected:
     virtual void DoDrawEllipticArc(wxCoord x, wxCoord y, wxCoord w, wxCoord h,
                                    double sa, double ea)
     {
-        wxFAIL_MSG( _T("this is probably wrong") );
+        wxFAIL_MSG( wxT("this is probably wrong") );
 
         m_dc.DoDrawEllipticArc(GetX(x, y), GetY(x, y),
                                GetX(w, h), GetY(w, h),
@@ -256,7 +256,7 @@ protected:
 
     virtual void DoSetClippingRegionAsRegion(const wxRegion& WXUNUSED(region))
     {
-        wxFAIL_MSG( _T("not implemented") );
+        wxFAIL_MSG( wxT("not implemented") );
     }
 
     virtual void DoSetClippingRegion(wxCoord x, wxCoord y,
--- include/wx/dbgrid.h-orig	2009-06-18 16:29:20.424822000 -0500
+++ include/wx/dbgrid.h	2009-06-18 16:29:27.278218000 -0500
@@ -23,7 +23,7 @@
 #include "wx/grid.h"
 #include "wx/dbkeyg.h"
 
-#define wxGRID_VALUE_DBAUTO     _T("dbauto")
+#define wxGRID_VALUE_DBAUTO     wxT("dbauto")
 
 WX_DECLARE_USER_EXPORTED_OBJARRAY(GenericKey,keyarray,WXDLLIMPEXP_DBGRID);
 
@@ -119,12 +119,12 @@ public:
 
     virtual int GetNumberRows()
     {
-        wxLogDebug(_T(" GetNumberRows() = %i"),m_rowtotal);
+        wxLogDebug(wxT(" GetNumberRows() = %i"),m_rowtotal);
         return m_rowtotal;
     }
     virtual int GetNumberCols()
     {
-        wxLogDebug(_T(" GetNumberCols() = %i"),m_nocols);
+        wxLogDebug(wxT(" GetNumberCols() = %i"),m_nocols);
         return m_nocols;
     }
     virtual bool     IsEmptyCell(int row, int col) ;
--- include/wx/artprov.h-orig	2009-06-18 16:29:35.537522000 -0500
+++ include/wx/artprov.h	2009-06-18 16:29:43.855075000 -0500
@@ -27,10 +27,10 @@ class wxArtProviderModule;
 typedef wxString wxArtClient;
 typedef wxString wxArtID;
 
-#define wxART_MAKE_CLIENT_ID_FROM_STR(id)  (id + _T("_C"))
-#define wxART_MAKE_CLIENT_ID(id)           _T(#id) _T("_C")
+#define wxART_MAKE_CLIENT_ID_FROM_STR(id)  (id + wxT("_C"))
+#define wxART_MAKE_CLIENT_ID(id)           wxT(#id) wxT("_C")
 #define wxART_MAKE_ART_ID_FROM_STR(id)     (id)
-#define wxART_MAKE_ART_ID(id)              _T(#id)
+#define wxART_MAKE_ART_ID(id)              wxT(#id)
 
 // ----------------------------------------------------------------------------
 // Art clients
--- include/wx/buffer.h-orig	2009-06-18 16:29:49.744144000 -0500
+++ include/wx/buffer.h	2009-06-18 16:29:55.450494000 -0500
@@ -286,7 +286,7 @@ public:
     // Other ways to append to the buffer
     void  AppendByte(char data)
     {
-        wxCHECK_RET( m_bufdata->m_data, _T("invalid wxMemoryBuffer") );
+        wxCHECK_RET( m_bufdata->m_data, wxT("invalid wxMemoryBuffer") );
 
         m_bufdata->ResizeIfNeeded(m_bufdata->m_len + 1);
         *(((char*)m_bufdata->m_data) + m_bufdata->m_len) = data;
--- include/wx/object.h-orig	2009-06-18 16:30:00.214846000 -0500
+++ include/wx/object.h	2009-06-18 16:30:08.630130000 -0500
@@ -311,7 +311,7 @@ name##PluginSentinel  m_pluginsentinel;
 #ifdef __WXDEBUG__
 inline void* wxCheckCast(void *ptr)
 {
-    wxASSERT_MSG( ptr, _T("wxStaticCast() used incorrectly") );
+    wxASSERT_MSG( ptr, wxT("wxStaticCast() used incorrectly") );
     return ptr;
 }
 #define wxStaticCast(obj, className) \
--- include/wx/vector.h-orig	2009-06-18 16:30:14.483010000 -0500
+++ include/wx/vector.h	2009-06-18 16:30:18.173085000 -0500
@@ -105,7 +105,7 @@ public:
     {
         if ( !Alloc(n) )
         {
-            wxFAIL_MSG( _T("out of memory in wxVector::reserve()") );
+            wxFAIL_MSG( wxT("out of memory in wxVector::reserve()") );
         }
     }
 
--- include/wx/spinbutt.h-orig	2009-06-18 16:30:26.751921000 -0500
+++ include/wx/spinbutt.h	2009-06-18 16:30:30.727625000 -0500
@@ -23,7 +23,7 @@
 #include "wx/control.h"
 #include "wx/event.h"
 
-#define wxSPIN_BUTTON_NAME _T("wxSpinButton")
+#define wxSPIN_BUTTON_NAME wxT("wxSpinButton")
 
 // ----------------------------------------------------------------------------
 //  The wxSpinButton is like a small scrollbar than is often placed next
--- include/wx/palette.h-orig	2009-06-18 16:30:39.825449000 -0500
+++ include/wx/palette.h	2009-06-18 16:30:44.675387000 -0500
@@ -27,7 +27,7 @@ public:
 
     virtual bool Ok() const { return IsOk(); }
     virtual bool IsOk() const = 0;
-    virtual int GetColoursCount() const { wxFAIL_MSG( _T("not implemented") ); return 0; }
+    virtual int GetColoursCount() const { wxFAIL_MSG( wxT("not implemented") ); return 0; }
 };
 
 #if defined(__WXPALMOS__)
--- include/wx/recguard.h-orig	2009-06-18 16:30:49.985938000 -0500
+++ include/wx/recguard.h	2009-06-18 16:30:54.480603000 -0500
@@ -35,7 +35,7 @@ public:
 
     ~wxRecursionGuard()
     {
-        wxASSERT_MSG( m_flag > 0, _T("unbalanced wxRecursionGuards!?") );
+        wxASSERT_MSG( m_flag > 0, wxT("unbalanced wxRecursionGuards!?") );
 
         m_flag--;
     }
--- include/wx/glcanvas.h-orig	2009-06-18 16:31:00.610398000 -0500
+++ include/wx/glcanvas.h	2009-06-18 16:31:05.361070000 -0500
@@ -44,7 +44,7 @@ enum
     WX_GL_MIN_ACCUM_ALPHA  /* use alpha buffer with most bits (> MIN_ACCUM_ALPHA bits) */
 };
 
-#define wxGLCanvasName _T("GLCanvas")
+#define wxGLCanvasName wxT("GLCanvas")
 
 #if defined(__WXMSW__)
 #include "wx/msw/glcanvas.h"
--- include/wx/arrstr.h-orig	2009-06-18 16:31:10.145812000 -0500
+++ include/wx/arrstr.h	2009-06-18 16:31:17.400426000 -0500
@@ -152,7 +152,7 @@ public:
   wxString& Item(size_t nIndex) const
     {
         wxASSERT_MSG( nIndex < m_nCount,
-                      _T("wxArrayString: index out of bounds") );
+                      wxT("wxArrayString: index out of bounds") );
 
         return *(wxString *)&(m_pItems[nIndex]);
     }
@@ -163,7 +163,7 @@ public:
   wxString& Last() const
   {
       wxASSERT_MSG( !IsEmpty(),
-                    _T("wxArrayString: index out of bounds") );
+                    wxT("wxArrayString: index out of bounds") );
       return Item(Count() - 1);
   }
 
--- include/wx/cppunit.h-orig	2009-06-18 16:31:26.817934000 -0500
+++ include/wx/cppunit.h	2009-06-18 16:31:32.985993000 -0500
@@ -69,7 +69,7 @@
     if (Condition) \
         { anyTest; } \
     else \
-        wxLogInfo(wxString::Format(_T("skipping: %s.%s\n  reason: %s equals false\n"), \
+        wxLogInfo(wxString::Format(wxT("skipping: %s.%s\n  reason: %s equals false\n"), \
                                     wxString(suiteName, wxConvUTF8).c_str(), \
                                     wxString(#testMethod, wxConvUTF8).c_str(), \
                                     wxString(#Condition, wxConvUTF8).c_str()))
--- include/wx/datectrl.h-orig	2009-06-18 16:31:44.148279000 -0500
+++ include/wx/datectrl.h	2009-06-18 16:31:48.244011000 -0500
@@ -19,7 +19,7 @@
 #include "wx/control.h"         // the base class
 #include "wx/datetime.h"
 
-#define wxDatePickerCtrlNameStr _T("datectrl")
+#define wxDatePickerCtrlNameStr wxT("datectrl")
 
 // wxDatePickerCtrl styles
 enum
--- include/wx/debugrpt.h-orig	2009-06-18 16:31:54.369110000 -0500
+++ include/wx/debugrpt.h	2009-06-18 16:31:58.905340000 -0500
@@ -161,7 +161,7 @@ public:
     wxDebugReportUpload(const wxString& url,
                         const wxString& input,
                         const wxString& action,
-                        const wxString& curl = _T("curl"));
+                        const wxString& curl = wxT("curl"));
 
 protected:
     virtual bool DoProcess();
--- include/wx/dbtable.h-orig	2009-06-18 16:32:04.764582000 -0500
+++ include/wx/dbtable.h	2009-06-18 16:32:08.876036000 -0500
@@ -305,7 +305,7 @@ public:
     HSTMT          *NewCursor(bool setCursor = false, bool bindColumns = true) {  return GetNewCursor(setCursor,bindColumns); }
 #endif
 
-    ULONG           Count(const wxString &args=_T("*"));
+    ULONG           Count(const wxString &args=wxT("*"));
     int             DB_STATUS(void) { return(pDb->DB_STATUS); }
 
     bool            IsColNull(UWORD colNumber) const;
--- include/wx/cshelp.h-orig	2009-06-18 16:32:16.983422000 -0500
+++ include/wx/cshelp.h	2009-06-18 16:32:21.167913000 -0500
@@ -134,7 +134,7 @@ public:
                                  const wxPoint& pt,
                                  wxHelpEvent::Origin origin)
     {
-        wxCHECK_MSG( window, false, _T("window must not be NULL") );
+        wxCHECK_MSG( window, false, wxT("window must not be NULL") );
 
         m_helptextAtPoint = pt;
         m_helptextOrigin = origin;
--- include/wx/dynlib.h-orig	2009-06-18 17:08:23.465629000 -0500
+++ include/wx/dynlib.h	2009-06-18 17:08:27.901372000 -0500
@@ -116,7 +116,7 @@ enum wxPluginCategory
 // type only once, as the first parameter, and creating a variable of this type
 // called "pfn<name>" initialized with the "name" from the "dynlib"
 #define wxDYNLIB_FUNCTION(type, name, dynlib) \
-    type pfn ## name = (type)(dynlib).GetSymbol(_T(#name))
+    type pfn ## name = (type)(dynlib).GetSymbol(wxT(#name))
 
 // ----------------------------------------------------------------------------
 // wxDynamicLibraryDetails: contains details about a loaded wxDynamicLibrary
--- include/wx/thrimpl.cpp-orig	2009-06-18 17:08:40.022205000 -0500
+++ include/wx/thrimpl.cpp	2009-06-18 17:08:56.151669000 -0500
@@ -39,7 +39,7 @@ bool wxMutex::IsOk() const
 wxMutexError wxMutex::Lock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
-                 _T("wxMutex::Lock(): not initialized") );
+                 wxT("wxMutex::Lock(): not initialized") );
 
     return m_internal->Lock();
 }
@@ -47,7 +47,7 @@ wxMutexError wxMutex::Lock()
 wxMutexError wxMutex::TryLock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
-                 _T("wxMutex::TryLock(): not initialized") );
+                 wxT("wxMutex::TryLock(): not initialized") );
 
     return m_internal->TryLock();
 }
@@ -55,7 +55,7 @@ wxMutexError wxMutex::TryLock()
 wxMutexError wxMutex::Unlock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
-                 _T("wxMutex::Unlock(): not initialized") );
+                 wxT("wxMutex::Unlock(): not initialized") );
 
     return m_internal->Unlock();
 }
@@ -243,7 +243,7 @@ bool wxCondition::IsOk() const
 wxCondError wxCondition::Wait()
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Wait(): not initialized") );
+                 wxT("wxCondition::Wait(): not initialized") );
 
     return m_internal->Wait();
 }
@@ -251,7 +251,7 @@ wxCondError wxCondition::Wait()
 wxCondError wxCondition::WaitTimeout(unsigned long milliseconds)
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Wait(): not initialized") );
+                 wxT("wxCondition::Wait(): not initialized") );
 
     return m_internal->WaitTimeout(milliseconds);
 }
@@ -259,7 +259,7 @@ wxCondError wxCondition::WaitTimeout(uns
 wxCondError wxCondition::Signal()
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Signal(): not initialized") );
+                 wxT("wxCondition::Signal(): not initialized") );
 
     return m_internal->Signal();
 }
@@ -267,7 +267,7 @@ wxCondError wxCondition::Signal()
 wxCondError wxCondition::Broadcast()
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Broadcast(): not initialized") );
+                 wxT("wxCondition::Broadcast(): not initialized") );
 
     return m_internal->Broadcast();
 }
@@ -299,7 +299,7 @@ bool wxSemaphore::IsOk() const
 wxSemaError wxSemaphore::Wait()
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::Wait(): not initialized") );
+                 wxT("wxSemaphore::Wait(): not initialized") );
 
     return m_internal->Wait();
 }
@@ -307,7 +307,7 @@ wxSemaError wxSemaphore::Wait()
 wxSemaError wxSemaphore::TryWait()
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::TryWait(): not initialized") );
+                 wxT("wxSemaphore::TryWait(): not initialized") );
 
     return m_internal->TryWait();
 }
@@ -315,7 +315,7 @@ wxSemaError wxSemaphore::TryWait()
 wxSemaError wxSemaphore::WaitTimeout(unsigned long milliseconds)
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::WaitTimeout(): not initialized") );
+                 wxT("wxSemaphore::WaitTimeout(): not initialized") );
 
     return m_internal->WaitTimeout(milliseconds);
 }
@@ -323,7 +323,7 @@ wxSemaError wxSemaphore::WaitTimeout(uns
 wxSemaError wxSemaphore::Post()
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::Post(): not initialized") );
+                 wxT("wxSemaphore::Post(): not initialized") );
 
     return m_internal->Post();
 }
--- include/wx/list.h-orig	2009-06-18 19:27:54.308593000 -0500
+++ include/wx/list.h	2009-06-18 19:28:00.323900000 -0500
@@ -207,7 +207,7 @@ private:
             bool operator==(const compatibility_iterator& i) const            \
             {                                                                 \
                 wxASSERT_MSG( m_list && i.m_list,                             \
-                              _T("comparing invalid iterators is illegal") ); \
+                              wxT("comparing invalid iterators is illegal") ); \
                 return (m_list == i.m_list) && (m_iter == i.m_iter);          \
             }                                                                 \
             bool operator!=(const compatibility_iterator& i) const            \
--- include/wx/dynload.h-orig	2009-06-18 19:34:05.097151000 -0500
+++ include/wx/dynload.h	2009-06-18 19:34:08.990810000 -0500
@@ -71,7 +71,7 @@ public:
     void  RefObj() { ++m_objcount; }
     void  UnrefObj()
     {
-        wxASSERT_MSG( m_objcount > 0, _T("Too many objects deleted??") );
+        wxASSERT_MSG( m_objcount > 0, wxT("Too many objects deleted??") );
         --m_objcount;
     }
 
--- include/wx/string.h-orig	2009-06-21 17:11:02.143733000 -0500
+++ include/wx/string.h	2009-06-18 15:40:07.348682000 -0500
@@ -70,7 +70,7 @@ class WXDLLIMPEXP_FWD_BASE wxString;
 
 // implementation only
 #define   wxASSERT_VALID_INDEX(i) \
-    wxASSERT_MSG( (size_t)(i) <= length(), _T("invalid index in wxString") )
+    wxASSERT_MSG( (size_t)(i) <= length(), wxT("invalid index in wxString") )
 
 // ----------------------------------------------------------------------------
 // constants
@@ -349,7 +349,7 @@ public:
   wxStringBase(const wxStringBase& stringSrc)
   {
     wxASSERT_MSG( stringSrc.GetStringData()->IsValid(),
-                  _T("did you forget to call UngetWriteBuf()?") );
+                  wxT("did you forget to call UngetWriteBuf()?") );
 
     if ( stringSrc.empty() ) {
       // nothing to do for an empty string
@@ -376,7 +376,7 @@ public:
   wxStringBase(const wxStringBase& str, size_t nPos, size_t nLen)
   {
     wxASSERT_MSG( str.GetStringData()->IsValid(),
-                  _T("did you forget to call UngetWriteBuf()?") );
+                  wxT("did you forget to call UngetWriteBuf()?") );
     Init();
     size_t strLen = str.length() - nPos; nLen = strLen < nLen ? strLen : nLen;
     InitWith(str.c_str(), nPos, nLen);
@@ -754,7 +754,7 @@ public:
   {
     Truncate(0);
 
-    wxASSERT_MSG( empty(), _T("string not empty after call to Empty()?") );
+    wxASSERT_MSG( empty(), wxT("string not empty after call to Empty()?") );
   }
     // empty the string and free memory
   void Clear()
@@ -785,7 +785,7 @@ public:
     // get last character
     wxChar  Last() const
       {
-          wxASSERT_MSG( !empty(), _T("wxString: index out of bounds") );
+          wxASSERT_MSG( !empty(), wxT("wxString: index out of bounds") );
 
           return at(length() - 1);
       }
@@ -793,7 +793,7 @@ public:
     // get writable last character
     wxChar& Last()
       {
-          wxASSERT_MSG( !empty(), _T("wxString: index out of bounds") );
+          wxASSERT_MSG( !empty(), wxT("wxString: index out of bounds") );
           return at(length() - 1);
       }
 
@@ -993,7 +993,7 @@ public:
   {
 #if !wxUSE_STL
     wxASSERT_MSG( s.GetStringData()->IsValid(),
-                  _T("did you forget to call UngetWriteBuf()?") );
+                  wxT("did you forget to call UngetWriteBuf()?") );
 #endif
 
     append(s);
@@ -1058,36 +1058,36 @@ public:
   // stream-like functions
       // insert an int into string
   wxString& operator<<(int i)
-    { return (*this) << Format(_T("%d"), i); }
+    { return (*this) << Format(wxT("%d"), i); }
       // insert an unsigned int into string
   wxString& operator<<(unsigned int ui)
-    { return (*this) << Format(_T("%u"), ui); }
+    { return (*this) << Format(wxT("%u"), ui); }
       // insert a long into string
   wxString& operator<<(long l)
-    { return (*this) << Format(_T("%ld"), l); }
+    { return (*this) << Format(wxT("%ld"), l); }
       // insert an unsigned long into string
   wxString& operator<<(unsigned long ul)
-    { return (*this) << Format(_T("%lu"), ul); }
+    { return (*this) << Format(wxT("%lu"), ul); }
 #if defined wxLongLong_t && !defined wxLongLongIsLong
       // insert a long long if they exist and aren't longs
   wxString& operator<<(wxLongLong_t ll)
     {
-      const wxChar *fmt = _T("%") wxLongLongFmtSpec _T("d");
+      const wxChar *fmt = wxT("%") wxLongLongFmtSpec wxT("d");
       return (*this) << Format(fmt, ll);
     }
       // insert an unsigned long long
   wxString& operator<<(wxULongLong_t ull)
     {
-      const wxChar *fmt = _T("%") wxLongLongFmtSpec _T("u");
+      const wxChar *fmt = wxT("%") wxLongLongFmtSpec wxT("u");
       return (*this) << Format(fmt , ull);
     }
 #endif
       // insert a float into string
   wxString& operator<<(float f)
-    { return (*this) << Format(_T("%f"), f); }
+    { return (*this) << Format(wxT("%f"), f); }
       // insert a double into string
   wxString& operator<<(double d)
-    { return (*this) << Format(_T("%g"), d); }
+    { return (*this) << Format(wxT("%g"), d); }
 
   // string comparison
     // case-sensitive comparison (returns a value < 0, = 0 or > 0)
--- samples/shaped/shaped.cpp-orig	2009-06-18 18:48:23.253639000 -0500
+++ samples/shaped/shaped.cpp	2009-06-18 18:48:32.835780000 -0500
@@ -154,7 +154,7 @@ ShapedFrame::ShapedFrame()
             )
 {
     m_hasShape = false;
-    m_bmp = wxBitmap(_T("star.png"), wxBITMAP_TYPE_PNG);
+    m_bmp = wxBitmap(wxT("star.png"), wxBITMAP_TYPE_PNG);
     SetSize(wxSize(m_bmp.GetWidth(), m_bmp.GetHeight()));
     SetToolTip(wxT("Right-click to exit"));
 
--- samples/menu/menu.cpp-orig	2009-06-18 18:48:09.376054000 -0500
+++ samples/menu/menu.cpp	2009-06-18 18:48:14.145897000 -0500
@@ -135,13 +135,13 @@ protected:
     void OnMenuOpen(wxMenuEvent& event)
         {
 #if USE_LOG_WINDOW
-            LogMenuOpenOrClose(event, _T("opened")); event.Skip();
+            LogMenuOpenOrClose(event, wxT("opened")); event.Skip();
 #endif
         }
     void OnMenuClose(wxMenuEvent& event)
         {
 #if USE_LOG_WINDOW
-          LogMenuOpenOrClose(event, _T("closed")); event.Skip();
+          LogMenuOpenOrClose(event, wxT("closed")); event.Skip();
 #endif
        }
 
@@ -350,7 +350,7 @@ bool MyApp::OnInit()
     frame->Show(true);
 
 #if wxUSE_STATUSBAR
-    frame->SetStatusText(_T("Welcome to wxWidgets menu sample"));
+    frame->SetStatusText(wxT("Welcome to wxWidgets menu sample"));
 #endif // wxUSE_STATUSBAR
 
     SetTopWindow(frame);
@@ -364,7 +364,7 @@ bool MyApp::OnInit()
 
 // Define my frame constructor
 MyFrame::MyFrame()
-       : wxFrame((wxFrame *)NULL, wxID_ANY, _T("wxWidgets menu sample"))
+       : wxFrame((wxFrame *)NULL, wxID_ANY, wxT("wxWidgets menu sample"))
 {
 #if USE_LOG_WINDOW
     m_textctrl = NULL;
@@ -431,11 +431,11 @@ MyFrame::MyFrame()
     stockSubMenu->Append(wxID_ZOOM_FIT);
     stockSubMenu->Append(wxID_ZOOM_IN);
     stockSubMenu->Append(wxID_ZOOM_OUT);
-    fileMenu->AppendSubMenu(stockSubMenu, _T("&Standard items demo"));
+    fileMenu->AppendSubMenu(stockSubMenu, wxT("&Standard items demo"));
 
 #if USE_LOG_WINDOW
     wxMenuItem *item = new wxMenuItem(fileMenu, Menu_File_ClearLog,
-                                      _T("Clear &log\tCtrl-L"));
+                                      wxT("Clear &log\tCtrl-L"));
 #if wxUSE_OWNER_DRAWN || defined(__WXGTK__)
     item->SetBitmap(copy_xpm);
 #endif
@@ -443,86 +443,86 @@ MyFrame::MyFrame()
     fileMenu->AppendSeparator();
 #endif // USE_LOG_WINDOW
 
-    fileMenu->Append(Menu_File_Quit, _T("E&xit\tAlt-X"), _T("Quit menu sample"));
+    fileMenu->Append(Menu_File_Quit, wxT("E&xit\tAlt-X"), wxT("Quit menu sample"));
 
     wxMenu *menubarMenu = new wxMenu;
-    menubarMenu->Append(Menu_MenuBar_Append, _T("&Append menu\tCtrl-A"),
-                        _T("Append a menu to the menubar"));
-    menubarMenu->Append(Menu_MenuBar_Insert, _T("&Insert menu\tCtrl-I"),
-                        _T("Insert a menu into the menubar"));
-    menubarMenu->Append(Menu_MenuBar_Delete, _T("&Delete menu\tCtrl-D"),
-                        _T("Delete the last menu from the menubar"));
-    menubarMenu->Append(Menu_MenuBar_Toggle, _T("&Toggle menu\tCtrl-T"),
-                        _T("Toggle the first menu in the menubar"), true);
+    menubarMenu->Append(Menu_MenuBar_Append, wxT("&Append menu\tCtrl-A"),
+                        wxT("Append a menu to the menubar"));
+    menubarMenu->Append(Menu_MenuBar_Insert, wxT("&Insert menu\tCtrl-I"),
+                        wxT("Insert a menu into the menubar"));
+    menubarMenu->Append(Menu_MenuBar_Delete, wxT("&Delete menu\tCtrl-D"),
+                        wxT("Delete the last menu from the menubar"));
+    menubarMenu->Append(Menu_MenuBar_Toggle, wxT("&Toggle menu\tCtrl-T"),
+                        wxT("Toggle the first menu in the menubar"), true);
     menubarMenu->AppendSeparator();
-    menubarMenu->Append(Menu_MenuBar_Enable, _T("&Enable menu\tCtrl-E"),
-                        _T("Enable or disable the last menu"), true);
+    menubarMenu->Append(Menu_MenuBar_Enable, wxT("&Enable menu\tCtrl-E"),
+                        wxT("Enable or disable the last menu"), true);
     menubarMenu->AppendSeparator();
-    menubarMenu->Append(Menu_MenuBar_GetLabel, _T("&Get menu label\tCtrl-G"),
-                        _T("Get the label of the last menu"));
+    menubarMenu->Append(Menu_MenuBar_GetLabel, wxT("&Get menu label\tCtrl-G"),
+                        wxT("Get the label of the last menu"));
 #if wxUSE_TEXTDLG
-    menubarMenu->Append(Menu_MenuBar_SetLabel, _T("&Set menu label\tCtrl-S"),
-                        _T("Change the label of the last menu"));
+    menubarMenu->Append(Menu_MenuBar_SetLabel, wxT("&Set menu label\tCtrl-S"),
+                        wxT("Change the label of the last menu"));
     menubarMenu->AppendSeparator();
-    menubarMenu->Append(Menu_MenuBar_FindMenu, _T("&Find menu from label\tCtrl-F"),
-                        _T("Find a menu by searching for its label"));
+    menubarMenu->Append(Menu_MenuBar_FindMenu, wxT("&Find menu from label\tCtrl-F"),
+                        wxT("Find a menu by searching for its label"));
 #endif
 
     wxMenu* subMenu = new wxMenu;
-    subMenu->Append(Menu_SubMenu_Normal, _T("&Normal submenu item"), _T("Disabled submenu item"));
-    subMenu->AppendCheckItem(Menu_SubMenu_Check, _T("&Check submenu item"), _T("Check submenu item"));
-    subMenu->AppendRadioItem(Menu_SubMenu_Radio1, _T("Radio item &1"), _T("Radio item"));
-    subMenu->AppendRadioItem(Menu_SubMenu_Radio2, _T("Radio item &2"), _T("Radio item"));
-    subMenu->AppendRadioItem(Menu_SubMenu_Radio3, _T("Radio item &3"), _T("Radio item"));
+    subMenu->Append(Menu_SubMenu_Normal, wxT("&Normal submenu item"), wxT("Disabled submenu item"));
+    subMenu->AppendCheckItem(Menu_SubMenu_Check, wxT("&Check submenu item"), wxT("Check submenu item"));
+    subMenu->AppendRadioItem(Menu_SubMenu_Radio1, wxT("Radio item &1"), wxT("Radio item"));
+    subMenu->AppendRadioItem(Menu_SubMenu_Radio2, wxT("Radio item &2"), wxT("Radio item"));
+    subMenu->AppendRadioItem(Menu_SubMenu_Radio3, wxT("Radio item &3"), wxT("Radio item"));
 
-    menubarMenu->Append(Menu_SubMenu, _T("Submenu"), subMenu);
+    menubarMenu->Append(Menu_SubMenu, wxT("Submenu"), subMenu);
 
     wxMenu *menuMenu = new wxMenu;
-    menuMenu->Append(Menu_Menu_Append, _T("&Append menu item\tAlt-A"),
-                     _T("Append a menu item to the last menu"));
-    menuMenu->Append(Menu_Menu_AppendSub, _T("&Append sub menu\tAlt-S"),
-                     _T("Append a sub menu to the last menu"));
-    menuMenu->Append(Menu_Menu_Insert, _T("&Insert menu item\tAlt-I"),
-                     _T("Insert a menu item in head of the last menu"));
-    menuMenu->Append(Menu_Menu_Delete, _T("&Delete menu item\tAlt-D"),
-                     _T("Delete the last menu item from the last menu"));
+    menuMenu->Append(Menu_Menu_Append, wxT("&Append menu item\tAlt-A"),
+                     wxT("Append a menu item to the last menu"));
+    menuMenu->Append(Menu_Menu_AppendSub, wxT("&Append sub menu\tAlt-S"),
+                     wxT("Append a sub menu to the last menu"));
+    menuMenu->Append(Menu_Menu_Insert, wxT("&Insert menu item\tAlt-I"),
+                     wxT("Insert a menu item in head of the last menu"));
+    menuMenu->Append(Menu_Menu_Delete, wxT("&Delete menu item\tAlt-D"),
+                     wxT("Delete the last menu item from the last menu"));
     menuMenu->AppendSeparator();
-    menuMenu->Append(Menu_Menu_Enable, _T("&Enable menu item\tAlt-E"),
-                     _T("Enable or disable the last menu item"), true);
-    menuMenu->Append(Menu_Menu_Check, _T("&Check menu item\tAlt-C"),
-                     _T("Check or uncheck the last menu item"), true);
+    menuMenu->Append(Menu_Menu_Enable, wxT("&Enable menu item\tAlt-E"),
+                     wxT("Enable or disable the last menu item"), true);
+    menuMenu->Append(Menu_Menu_Check, wxT("&Check menu item\tAlt-C"),
+                     wxT("Check or uncheck the last menu item"), true);
     menuMenu->AppendSeparator();
-    menuMenu->Append(Menu_Menu_GetInfo, _T("Get menu item in&fo\tAlt-F"),
-                     _T("Show the state of the last menu item"));
+    menuMenu->Append(Menu_Menu_GetInfo, wxT("Get menu item in&fo\tAlt-F"),
+                     wxT("Show the state of the last menu item"));
 #if wxUSE_TEXTDLG
-    menuMenu->Append(Menu_Menu_SetLabel, _T("Set menu item label\tAlt-L"),
-                     _T("Set the label of a menu item"));
+    menuMenu->Append(Menu_Menu_SetLabel, wxT("Set menu item label\tAlt-L"),
+                     wxT("Set the label of a menu item"));
 #endif
 #if wxUSE_TEXTDLG
     menuMenu->AppendSeparator();
-    menuMenu->Append(Menu_Menu_FindItem, _T("Find menu item from label"),
-                     _T("Find a menu item by searching for its label"));
+    menuMenu->Append(Menu_Menu_FindItem, wxT("Find menu item from label"),
+                     wxT("Find a menu item by searching for its label"));
 #endif
 
     wxMenu *testMenu = new wxMenu;
-    testMenu->Append(Menu_Test_Normal, _T("&Normal item"));
+    testMenu->Append(Menu_Test_Normal, wxT("&Normal item"));
     testMenu->AppendSeparator();
-    testMenu->AppendCheckItem(Menu_Test_Check, _T("&Check item"));
+    testMenu->AppendCheckItem(Menu_Test_Check, wxT("&Check item"));
     testMenu->AppendSeparator();
-    testMenu->AppendRadioItem(Menu_Test_Radio1, _T("Radio item &1"));
-    testMenu->AppendRadioItem(Menu_Test_Radio2, _T("Radio item &2"));
-    testMenu->AppendRadioItem(Menu_Test_Radio3, _T("Radio item &3"));
+    testMenu->AppendRadioItem(Menu_Test_Radio1, wxT("Radio item &1"));
+    testMenu->AppendRadioItem(Menu_Test_Radio2, wxT("Radio item &2"));
+    testMenu->AppendRadioItem(Menu_Test_Radio3, wxT("Radio item &3"));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Menu_Help_About, _T("&About\tF1"), _T("About menu sample"));
+    helpMenu->Append(Menu_Help_About, wxT("&About\tF1"), wxT("About menu sample"));
 
     wxMenuBar* menuBar = new wxMenuBar( wxMB_DOCKABLE );
 
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(menubarMenu, _T("Menu&bar"));
-    menuBar->Append(menuMenu, _T("&Menu"));
-    menuBar->Append(testMenu, _T("&Test"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(menubarMenu, wxT("Menu&bar"));
+    menuBar->Append(menuMenu, wxT("&Menu"));
+    menuBar->Append(testMenu, wxT("&Test"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // these items should be initially checked
     menuBar->Check(Menu_MenuBar_Toggle, true);
@@ -546,11 +546,11 @@ MyFrame::MyFrame()
     wxLog::SetTimestamp(NULL);
     m_logOld = wxLog::SetActiveTarget(new wxLogTextCtrl(m_textctrl));
 
-    wxLogMessage(_T("Brief explanations: the commands or the \"Menu\" menu ")
-                 _T("append/insert/delete items to/from the last menu.\n")
-                 _T("The commands from \"Menubar\" menu work with the ")
-                 _T("menubar itself.\n\n")
-                 _T("Right click the band below to test popup menus.\n"));
+    wxLogMessage(wxT("Brief explanations: the commands or the \"Menu\" menu ")
+                 wxT("append/insert/delete items to/from the last menu.\n")
+                 wxT("The commands from \"Menubar\" menu work with the ")
+                 wxT("menubar itself.\n\n")
+                 wxT("Right click the band below to test popup menus.\n"));
 #endif
 #ifdef __POCKETPC__
     EnableContextMenu();
@@ -573,13 +573,13 @@ MyFrame::~MyFrame()
 wxMenu *MyFrame::CreateDummyMenu(wxString *title)
 {
     wxMenu *menu = new wxMenu;
-    menu->Append(Menu_Dummy_First, _T("&First item\tCtrl-F1"));
+    menu->Append(Menu_Dummy_First, wxT("&First item\tCtrl-F1"));
     menu->AppendSeparator();
-    menu->AppendCheckItem(Menu_Dummy_Second, _T("&Second item\tCtrl-F2"));
+    menu->AppendCheckItem(Menu_Dummy_Second, wxT("&Second item\tCtrl-F2"));
 
     if ( title )
     {
-        title->Printf(_T("Dummy menu &%u"), (unsigned)++m_countDummy);
+        title->Printf(wxT("Dummy menu &%u"), (unsigned)++m_countDummy);
     }
 
     return menu;
@@ -593,7 +593,7 @@ wxMenuItem *MyFrame::GetLastMenuItem() c
     wxMenuItemList::compatibility_iterator node = menu->GetMenuItems().GetLast();
     if ( !node )
     {
-        wxLogWarning(_T("No last item in the last menu!"));
+        wxLogWarning(wxT("No last item in the last menu!"));
 
         return NULL;
     }
@@ -607,15 +607,15 @@ void MyFrame::LogMenuEvent(const wxComma
 {
     int id = event.GetId();
 
-    wxString msg = wxString::Format(_T("Menu command %d"), id);
+    wxString msg = wxString::Format(wxT("Menu command %d"), id);
 
     // catch all checkable menubar items and also the check item from the popup
     // menu
     wxMenuItem *item = GetMenuBar()->FindItem(id);
     if ( (item && item->IsCheckable()) || id == Menu_Popup_ToBeChecked )
     {
-        msg += wxString::Format(_T(" (the item is currently %schecked)"),
-                                event.IsChecked() ? _T("") : _T("not "));
+        msg += wxString::Format(wxT(" (the item is currently %schecked)"),
+                                event.IsChecked() ? wxT("") : wxT("not "));
     }
 
     wxLogMessage(msg);
@@ -649,8 +649,8 @@ void MyFrame::OnClearLogUpdateUI(wxUpdat
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    (void)wxMessageBox(_T("wxWidgets menu sample\n(c) 1999-2001 Vadim Zeitlin"),
-                       _T("About wxWidgets menu sample"),
+    (void)wxMessageBox(wxT("wxWidgets menu sample\n(c) 1999-2001 Vadim Zeitlin"),
+                       wxT("About wxWidgets menu sample"),
                        wxICON_INFORMATION);
 }
 
@@ -662,7 +662,7 @@ void MyFrame::OnDeleteMenu(wxCommandEven
     if ( count == 2 )
     {
         // don't let delete the first 2 menus
-        wxLogError(_T("Can't delete any more menus"));
+        wxLogError(wxT("Can't delete any more menus"));
     }
     else
     {
@@ -695,7 +695,7 @@ void MyFrame::OnToggleMenu(wxCommandEven
     else
     {
         // restore it
-        mbar->Insert(0, m_menu, _T("&File"));
+        mbar->Insert(0, m_menu, wxT("&File"));
         m_menu = NULL;
     }
 }
@@ -713,9 +713,9 @@ void MyFrame::OnGetLabelMenu(wxCommandEv
     wxMenuBar *mbar = GetMenuBar();
     size_t count = mbar->GetMenuCount();
 
-    wxCHECK_RET( count, _T("no last menu?") );
+    wxCHECK_RET( count, wxT("no last menu?") );
 
-    wxLogMessage(_T("The label of the last menu item is '%s'"),
+    wxLogMessage(wxT("The label of the last menu item is '%s'"),
                  mbar->GetLabelTop(count - 1).c_str());
 }
 
@@ -725,12 +725,12 @@ void MyFrame::OnSetLabelMenu(wxCommandEv
     wxMenuBar *mbar = GetMenuBar();
     size_t count = mbar->GetMenuCount();
 
-    wxCHECK_RET( count, _T("no last menu?") );
+    wxCHECK_RET( count, wxT("no last menu?") );
 
     wxString label = wxGetTextFromUser
                      (
-                        _T("Enter new label: "),
-                        _T("Change last menu text"),
+                        wxT("Enter new label: "),
+                        wxT("Change last menu text"),
                         mbar->GetLabelTop(count - 1),
                         this
                      );
@@ -746,12 +746,12 @@ void MyFrame::OnFindMenu(wxCommandEvent&
     wxMenuBar *mbar = GetMenuBar();
     size_t count = mbar->GetMenuCount();
 
-    wxCHECK_RET( count, _T("no last menu?") );
+    wxCHECK_RET( count, wxT("no last menu?") );
 
     wxString label = wxGetTextFromUser
                      (
-                        _T("Enter label to search for: "),
-                        _T("Find menu"),
+                        wxT("Enter label to search for: "),
+                        wxT("Find menu"),
                         wxEmptyString,
                         this
                      );
@@ -762,11 +762,11 @@ void MyFrame::OnFindMenu(wxCommandEvent&
 
         if (index == wxNOT_FOUND)
         {
-            wxLogWarning(_T("No menu with label '%s'"), label.c_str());
+            wxLogWarning(wxT("No menu with label '%s'"), label.c_str());
         }
         else
         {
-            wxLogMessage(_T("Menu %d has label '%s'"), index, label.c_str());
+            wxLogMessage(wxT("Menu %d has label '%s'"), index, label.c_str());
         }
     }
 }
@@ -774,7 +774,7 @@ void MyFrame::OnFindMenu(wxCommandEvent&
 
 void MyFrame::OnDummy(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Dummy item #%d"), event.GetId() - Menu_Dummy_First + 1);
+    wxLogMessage(wxT("Dummy item #%d"), event.GetId() - Menu_Dummy_First + 1);
 }
 
 void MyFrame::OnAppendMenuItem(wxCommandEvent& WXUNUSED(event))
@@ -783,8 +783,8 @@ void MyFrame::OnAppendMenuItem(wxCommand
     wxMenu *menu = menubar->GetMenu(menubar->GetMenuCount() - 1);
 
     menu->AppendSeparator();
-    menu->Append(Menu_Dummy_Third, _T("&Third dummy item\tCtrl-F3"),
-                 _T("Checkable item"), true);
+    menu->Append(Menu_Dummy_Third, wxT("&Third dummy item\tCtrl-F3"),
+                 wxT("Checkable item"), true);
 }
 
 void MyFrame::OnAppendSubMenu(wxCommandEvent& WXUNUSED(event))
@@ -793,8 +793,8 @@ void MyFrame::OnAppendSubMenu(wxCommandE
 
     wxMenu *menu = menubar->GetMenu(menubar->GetMenuCount() - 2);
 
-    menu->Append(Menu_Dummy_Last, _T("&Dummy sub menu"),
-                 CreateDummyMenu(NULL), _T("Dummy sub menu help"));
+    menu->Append(Menu_Dummy_Last, wxT("&Dummy sub menu"),
+                 CreateDummyMenu(NULL), wxT("Dummy sub menu help"));
 }
 
 void MyFrame::OnDeleteMenuItem(wxCommandEvent& WXUNUSED(event))
@@ -805,7 +805,7 @@ void MyFrame::OnDeleteMenuItem(wxCommand
     size_t count = menu->GetMenuItemCount();
     if ( !count )
     {
-        wxLogWarning(_T("No items to delete!"));
+        wxLogWarning(wxT("No items to delete!"));
     }
     else
     {
@@ -819,7 +819,7 @@ void MyFrame::OnInsertMenuItem(wxCommand
     wxMenu *menu = menubar->GetMenu(menubar->GetMenuCount() - 1);
 
     menu->Insert(0, wxMenuItem::New(menu, Menu_Dummy_Fourth,
-                                    _T("Fourth dummy item\tCtrl-F4")));
+                                    wxT("Fourth dummy item\tCtrl-F4")));
     menu->Insert(1, wxMenuItem::New(menu, wxID_SEPARATOR));
 }
 
@@ -856,7 +856,7 @@ void MyFrame::OnGetLabelMenuItem(wxComma
     if ( item )
     {
         wxString label(item->GetItemLabelText());
-        wxLogMessage(_T("The label of the last menu item is '%s'"),
+        wxLogMessage(wxT("The label of the last menu item is '%s'"),
                      label.c_str());
     }
 }
@@ -870,12 +870,12 @@ void MyFrame::OnSetLabelMenuItem(wxComma
     {
         wxString label = wxGetTextFromUser
                          (
-                            _T("Enter new label: "),
-                            _T("Change last menu item text"),
+                            wxT("Enter new label: "),
+                            wxT("Change last menu item text"),
                             item->GetItemLabelText(),
                             this
                          );
-        label.Replace( _T("\\t"), _T("\t") );
+        label.Replace( wxT("\\t"), wxT("\t") );
 
         if ( !label.empty() )
         {
@@ -892,29 +892,29 @@ void MyFrame::OnGetMenuItemInfo(wxComman
     if ( item )
     {
         wxString msg;
-        msg << _T("The item is ") << (item->IsEnabled() ? _T("enabled")
-                                                    : _T("disabled"))
-            << _T('\n');
+        msg << wxT("The item is ") << (item->IsEnabled() ? wxT("enabled")
+                                                    : wxT("disabled"))
+            << wxT('\n');
 
         if ( item->IsCheckable() )
         {
-            msg << _T("It is checkable and ") << (item->IsChecked() ? _T("") : _T("un"))
-                << _T("checked\n");
+            msg << wxT("It is checkable and ") << (item->IsChecked() ? wxT("") : wxT("un"))
+                << wxT("checked\n");
         }
 
 #if wxUSE_ACCEL
         wxAcceleratorEntry *accel = item->GetAccel();
         if ( accel )
         {
-            msg << _T("Its accelerator is ");
+            msg << wxT("Its accelerator is ");
 
             int flags = accel->GetFlags();
             if ( flags & wxACCEL_ALT )
-                msg << _T("Alt-");
+                msg << wxT("Alt-");
             if ( flags & wxACCEL_CTRL )
-                msg << _T("Ctrl-");
+                msg << wxT("Ctrl-");
             if ( flags & wxACCEL_SHIFT )
-                msg << _T("Shift-");
+                msg << wxT("Shift-");
 
             int code = accel->GetKeyCode();
             switch ( code )
@@ -931,7 +931,7 @@ void MyFrame::OnGetMenuItemInfo(wxComman
                 case WXK_F10:
                 case WXK_F11:
                 case WXK_F12:
-                    msg << _T('F') << code - WXK_F1 + 1;
+                    msg << wxT('F') << code - WXK_F1 + 1;
                     break;
 
                 // if there are any other keys wxGetAccelFromString() may return,
@@ -945,14 +945,14 @@ void MyFrame::OnGetMenuItemInfo(wxComman
                         break;
                     }
 
-                    wxFAIL_MSG( _T("unknown keyboard accel") );
+                    wxFAIL_MSG( wxT("unknown keyboard accel") );
             }
 
             delete accel;
         }
         else
         {
-            msg << _T("It doesn't have an accelerator");
+            msg << wxT("It doesn't have an accelerator");
         }
 #endif // wxUSE_ACCEL
 
@@ -966,12 +966,12 @@ void MyFrame::OnFindMenuItem(wxCommandEv
     wxMenuBar *mbar = GetMenuBar();
     size_t count = mbar->GetMenuCount();
 
-    wxCHECK_RET( count, _T("no last menu?") );
+    wxCHECK_RET( count, wxT("no last menu?") );
 
     wxString label = wxGetTextFromUser
                      (
-                        _T("Enter label to search for: "),
-                        _T("Find menu item"),
+                        wxT("Enter label to search for: "),
+                        wxT("Find menu item"),
                         wxEmptyString,
                         this
                      );
@@ -987,11 +987,11 @@ void MyFrame::OnFindMenuItem(wxCommandEv
         }
         if (index == wxNOT_FOUND)
         {
-            wxLogWarning(_T("No menu item with label '%s'"), label.c_str());
+            wxLogWarning(wxT("No menu item with label '%s'"), label.c_str());
         }
         else
         {
-            wxLogMessage(_T("Menu item %d in menu %lu has label '%s'"),
+            wxLogMessage(wxT("Menu item %d in menu %lu has label '%s'"),
                          index, (unsigned long)menuindex, label.c_str());
         }
     }
@@ -1002,14 +1002,14 @@ void MyFrame::ShowContextMenu(const wxPo
 {
     wxMenu menu;
 
-    menu.Append(Menu_Help_About, _T("&About"));
-    menu.Append(Menu_Popup_Submenu, _T("&Submenu"), CreateDummyMenu(NULL));
-    menu.Append(Menu_Popup_ToBeDeleted, _T("To be &deleted"));
-    menu.AppendCheckItem(Menu_Popup_ToBeChecked, _T("To be &checked"));
-    menu.Append(Menu_Popup_ToBeGreyed, _T("To be &greyed"),
-                _T("This menu item should be initially greyed out"));
+    menu.Append(Menu_Help_About, wxT("&About"));
+    menu.Append(Menu_Popup_Submenu, wxT("&Submenu"), CreateDummyMenu(NULL));
+    menu.Append(Menu_Popup_ToBeDeleted, wxT("To be &deleted"));
+    menu.AppendCheckItem(Menu_Popup_ToBeChecked, wxT("To be &checked"));
+    menu.Append(Menu_Popup_ToBeGreyed, wxT("To be &greyed"),
+                wxT("This menu item should be initially greyed out"));
     menu.AppendSeparator();
-    menu.Append(Menu_File_Quit, _T("E&xit"));
+    menu.Append(Menu_File_Quit, wxT("E&xit"));
 
     menu.Delete(Menu_Popup_ToBeDeleted);
     menu.Check(Menu_Popup_ToBeChecked, true);
@@ -1027,18 +1027,18 @@ void MyFrame::ShowContextMenu(const wxPo
 
 void MyFrame::OnTestNormal(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Normal item selected"));
+    wxLogMessage(wxT("Normal item selected"));
 }
 
 void MyFrame::OnTestCheck(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Check item %schecked"),
-                 event.IsChecked() ? _T("") : _T("un"));
+    wxLogMessage(wxT("Check item %schecked"),
+                 event.IsChecked() ? wxT("") : wxT("un"));
 }
 
 void MyFrame::OnTestRadio(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Radio item %d selected"),
+    wxLogMessage(wxT("Radio item %d selected"),
                  event.GetId() - Menu_Test_Radio1 + 1);
 }
 
@@ -1046,11 +1046,11 @@ void MyFrame::OnTestRadio(wxCommandEvent
 void MyFrame::LogMenuOpenOrClose(const wxMenuEvent& event, const wxChar *what)
 {
     wxString msg;
-    msg << _T("A ")
-        << ( event.IsPopup() ? _T("popup ") : _T("") )
-        << _T("menu has been ")
+    msg << wxT("A ")
+        << ( event.IsPopup() ? wxT("popup ") : wxT("") )
+        << wxT("menu has been ")
         << what
-        << _T(".");
+        << wxT(".");
 
     wxLogStatus(this, msg.c_str());
 }
--- samples/memcheck/memcheck.cpp-orig	2009-06-18 18:48:43.352734000 -0500
+++ samples/memcheck/memcheck.cpp	2009-06-18 18:48:49.266216000 -0500
@@ -65,15 +65,15 @@ bool MyApp::OnInit(void)
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(wxID_EXIT, _T("E&xit"));
+  file_menu->Append(wxID_EXIT, wxT("E&xit"));
   wxMenuBar *menu_bar = new wxMenuBar;
-  menu_bar->Append(file_menu, _T("File"));
+  menu_bar->Append(file_menu, wxT("File"));
   frame->SetMenuBar(menu_bar);
 
   // Make a panel with a message
   wxPanel *panel = new wxPanel(frame);
 
-  (void)new wxStaticText(panel, wxID_ANY, _T("Hello, this is a minimal debugging wxWidgets program!"), wxPoint(10, 10));
+  (void)new wxStaticText(panel, wxID_ANY, wxT("Hello, this is a minimal debugging wxWidgets program!"), wxPoint(10, 10));
 
   // Show the frame
   frame->Show(true);
@@ -124,7 +124,7 @@ END_EVENT_TABLE()
 
 // My frame constructor
 MyFrame::MyFrame(wxFrame *parent):
-  wxFrame(parent, wxID_ANY, _T("MemCheck wxWidgets Sample"), wxDefaultPosition, wxSize(400, 200))
+  wxFrame(parent, wxID_ANY, wxT("MemCheck wxWidgets Sample"), wxDefaultPosition, wxSize(400, 200))
 {}
 
 // Intercept menu commands
--- samples/dragimag/dragimag.cpp-orig	2009-06-18 18:47:57.354213000 -0500
+++ samples/dragimag/dragimag.cpp	2009-06-18 18:48:03.168590000 -0500
@@ -180,7 +180,7 @@ void MyCanvas::OnMouseEvent(wxMouseEvent
                 }
                 case SHAPE_DRAG_TEXT:
                 {
-                    m_dragImage = new MyDragImage(this, wxString(_T("Dragging some test text")), wxCursor(wxCURSOR_HAND));
+                    m_dragImage = new MyDragImage(this, wxString(wxT("Dragging some test text")), wxCursor(wxCURSOR_HAND));
                     break;
                 }
                 case SHAPE_DRAG_ICON:
@@ -316,16 +316,16 @@ BEGIN_EVENT_TABLE(MyFrame,wxFrame)
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
-: wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxDragImage sample"),
+: wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxDragImage sample"),
           wxPoint(20,20), wxSize(470,360) )
 {
     wxMenu *file_menu = new wxMenu();
-    file_menu->Append( wxID_ABOUT, _T("&About..."));
-    file_menu->AppendCheckItem( TEST_USE_SCREEN, _T("&Use whole screen for dragging"), _T("Use whole screen"));
-    file_menu->Append( wxID_EXIT, _T("E&xit"));
+    file_menu->Append( wxID_ABOUT, wxT("&About..."));
+    file_menu->AppendCheckItem( TEST_USE_SCREEN, wxT("&Use whole screen for dragging"), wxT("Use whole screen"));
+    file_menu->Append( wxID_EXIT, wxT("E&xit"));
 
     wxMenuBar *menu_bar = new wxMenuBar();
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     SetIcon(wxICON(mondrian));
     SetMenuBar( menu_bar );
@@ -346,9 +346,9 @@ void MyFrame::OnQuit( wxCommandEvent &WX
 
 void MyFrame::OnAbout( wxCommandEvent &WXUNUSED(event) )
 {
-    (void)wxMessageBox( _T("wxDragImage demo\n")
-        _T("Julian Smart (c) 2000"),
-        _T("About wxDragImage Demo"),
+    (void)wxMessageBox( wxT("wxDragImage demo\n")
+        wxT("Julian Smart (c) 2000"),
+        wxT("About wxDragImage Demo"),
         wxICON_INFORMATION | wxOK );
 }
 
@@ -373,14 +373,14 @@ bool MyApp::OnInit()
 #endif
 
     wxImage image;
-    if (image.LoadFile(_T("backgrnd.png"), wxBITMAP_TYPE_PNG))
+    if (image.LoadFile(wxT("backgrnd.png"), wxBITMAP_TYPE_PNG))
     {
         m_background = wxBitmap(image);
     }
 
     MyFrame *frame = new MyFrame();
 
-    wxString rootName(_T("shape0"));
+    wxString rootName(wxT("shape0"));
 
     int i;
     for (i = 1; i < 4; i++)
--- samples/caret/caret.cpp-orig	2009-06-18 18:47:41.417234000 -0500
+++ samples/caret/caret.cpp	2009-06-18 18:47:46.643318000 -0500
@@ -183,7 +183,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create and show the main application window
-    MyFrame *frame = new MyFrame(_T("Caret wxWidgets sample"),
+    MyFrame *frame = new MyFrame(wxT("Caret wxWidgets sample"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     frame->Show(true);
@@ -208,17 +208,17 @@ MyFrame::MyFrame(const wxString& title, 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 
-    menuFile->Append(Caret_SetBlinkTime, _T("&Blink time...\tCtrl-B"));
-    menuFile->Append(Caret_SetFontSize, _T("&Font size...\tCtrl-S"));
-    menuFile->Append(Caret_Move, _T("&Move caret\tCtrl-C"));
+    menuFile->Append(Caret_SetBlinkTime, wxT("&Blink time...\tCtrl-B"));
+    menuFile->Append(Caret_SetFontSize, wxT("&Font size...\tCtrl-S"));
+    menuFile->Append(Caret_Move, wxT("&Move caret\tCtrl-C"));
     menuFile->AppendSeparator();
-    menuFile->Append(Caret_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(Caret_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
     menuFile->AppendSeparator();
-    menuFile->Append(Caret_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Caret_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
+    menuBar->Append(menuFile, wxT("&File"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -228,7 +228,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -243,8 +243,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("The caret wxWidgets sample.\n(c) 1999 Vadim Zeitlin"),
-                 _T("About Caret"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(wxT("The caret wxWidgets sample.\n(c) 1999 Vadim Zeitlin"),
+                 wxT("About Caret"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnCaretMove(wxCommandEvent& WXUNUSED(event))
@@ -256,9 +256,9 @@ void MyFrame::OnSetBlinkTime(wxCommandEv
 {
     long blinkTime = wxGetNumberFromUser
                      (
-                      _T("The caret blink time is the time between two blinks"),
-                      _T("Time in milliseconds:"),
-                      _T("wxCaret sample"),
+                      wxT("The caret blink time is the time between two blinks"),
+                      wxT("Time in milliseconds:"),
+                      wxT("wxCaret sample"),
                       wxCaret::GetBlinkTime(), 0, 10000,
                       this
                      );
@@ -266,7 +266,7 @@ void MyFrame::OnSetBlinkTime(wxCommandEv
     {
         wxCaret::SetBlinkTime((int)blinkTime);
         m_canvas->CreateCaret();
-        wxLogStatus(this, _T("Blink time set to %ld milliseconds."), blinkTime);
+        wxLogStatus(this, wxT("Blink time set to %ld milliseconds."), blinkTime);
     }
 }
 
@@ -274,9 +274,9 @@ void MyFrame::OnSetFontSize(wxCommandEve
 {
     long fontSize = wxGetNumberFromUser
                     (
-                        _T("The font size also determines the caret size so\nthis demonstrates resizing the caret."),
-                        _T("Font size (in points):"),
-                        _T("wxCaret sample"),
+                        wxT("The font size also determines the caret size so\nthis demonstrates resizing the caret."),
+                        wxT("Font size (in points):"),
+                        wxT("wxCaret sample"),
                         12, 1, 100,
                         this
                     );
@@ -361,7 +361,7 @@ void MyCanvas::MoveCaret(int x, int y)
 
 void MyCanvas::DoMoveCaret()
 {
-    wxLogStatus(_T("Caret is at (%d, %d)"), m_xCaret, m_yCaret);
+    wxLogStatus(wxT("Caret is at (%d, %d)"), m_xCaret, m_yCaret);
 
     GetCaret()->Move(m_xMargin + m_xCaret * m_widthChar,
                      m_yMargin + m_yCaret * m_heightChar);
@@ -393,7 +393,7 @@ void MyCanvas::ChangeSize()
     if ( frame && frame->GetStatusBar() )
     {
         wxString msg;
-        msg.Printf(_T("Panel size is (%d, %d)"), m_xChars, m_yChars);
+        msg.Printf(wxT("Panel size is (%d, %d)"), m_xChars, m_yChars);
         frame->SetStatusText(msg, 1);
     }
 #endif // wxUSE_STATUSBAR
@@ -420,7 +420,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
         {
             wxChar ch = CharAt(x, y);
             if ( !ch )
-                ch = _T(' ');
+                ch = wxT(' ');
             line += ch;
         }
 
--- samples/dnd/dnd.cpp-orig	2009-06-18 18:16:27.912640000 -0500
+++ samples/dnd/dnd.cpp	2009-06-18 18:16:36.252685000 -0500
@@ -78,7 +78,7 @@ public:
     void OnDropURL(wxCoord WXUNUSED(x), wxCoord WXUNUSED(y), const wxString& text)
     {
         // of course, a real program would do something more useful here...
-        wxMessageBox(text, _T("wxDnD sample: got URL"),
+        wxMessageBox(text, wxT("wxDnD sample: got URL"),
                      wxICON_INFORMATION | wxOK);
     }
 
@@ -742,14 +742,14 @@ public:
     virtual wxDragResult OnEnter(wxCoord x, wxCoord y, wxDragResult def)
     {
 #if wxUSE_STATUSBAR
-        m_frame->SetStatusText(_T("Mouse entered the frame"));
+        m_frame->SetStatusText(wxT("Mouse entered the frame"));
 #endif // wxUSE_STATUSBAR
         return OnDragOver(x, y, def);
     }
     virtual void OnLeave()
     {
 #if wxUSE_STATUSBAR
-        m_frame->SetStatusText(_T("Mouse left the frame"));
+        m_frame->SetStatusText(wxT("Mouse left the frame"));
 #endif // wxUSE_STATUSBAR
     }
     virtual wxDragResult OnData(wxCoord x, wxCoord y, wxDragResult def)
@@ -891,7 +891,7 @@ bool DnDApp::OnInit()
     // switch on trace messages
 #if wxUSE_LOG
 #if defined(__WXGTK__)
-    wxLog::AddTraceMask(_T("clipboard"));
+    wxLog::AddTraceMask(wxT("clipboard"));
 #elif defined(__WXMSW__)
     wxLog::AddTraceMask(wxTRACE_OleCalls);
 #endif
@@ -907,7 +907,7 @@ bool DnDApp::OnInit()
 
     // create the main frame window
     DnDFrame *frame = new DnDFrame((wxFrame  *) NULL,
-                                   _T("Drag-and-Drop/Clipboard wxWidgets Sample"),
+                                   wxT("Drag-and-Drop/Clipboard wxWidgets Sample"),
                                    10, 100, 750, 540);
 
     // activate it
@@ -917,7 +917,7 @@ bool DnDApp::OnInit()
 
     return true;
 #else
-    wxMessageBox( _T("This sample has to be compiled with wxUSE_DRAG_AND_DROP"), _T("Building error"), wxOK);
+    wxMessageBox( wxT("This sample has to be compiled with wxUSE_DRAG_AND_DROP"), wxT("Building error"), wxOK);
     return false;
 #endif // wxUSE_DRAG_AND_DROP
 }
@@ -926,7 +926,7 @@ bool DnDApp::OnInit()
 
 DnDFrame::DnDFrame(wxFrame *frame, const wxChar *title, int x, int y, int w, int h)
         : wxFrame(frame, wxID_ANY, title, wxPoint(x, y), wxSize(w, h)),
-          m_strText(_T("wxWidgets drag & drop works :-)"))
+          m_strText(wxT("wxWidgets drag & drop works :-)"))
 
 {
     // frame icon and status bar
@@ -938,51 +938,51 @@ DnDFrame::DnDFrame(wxFrame *frame, const
 
     // construct menu
     wxMenu *file_menu = new wxMenu;
-    file_menu->Append(Menu_Drag, _T("&Test drag..."));
-    file_menu->AppendCheckItem(Menu_DragMoveDef, _T("&Move by default"));
-    file_menu->AppendCheckItem(Menu_DragMoveAllow, _T("&Allow moving"));
+    file_menu->Append(Menu_Drag, wxT("&Test drag..."));
+    file_menu->AppendCheckItem(Menu_DragMoveDef, wxT("&Move by default"));
+    file_menu->AppendCheckItem(Menu_DragMoveAllow, wxT("&Allow moving"));
     file_menu->AppendSeparator();
-    file_menu->Append(Menu_NewFrame, _T("&New frame\tCtrl-N"));
+    file_menu->Append(Menu_NewFrame, wxT("&New frame\tCtrl-N"));
     file_menu->AppendSeparator();
-    file_menu->Append(Menu_OpenFile, _T("&Open file..."));
+    file_menu->Append(Menu_OpenFile, wxT("&Open file..."));
     file_menu->AppendSeparator();
-    file_menu->Append(Menu_Quit, _T("E&xit\tCtrl-Q"));
+    file_menu->Append(Menu_Quit, wxT("E&xit\tCtrl-Q"));
 
 #if wxUSE_LOG
     wxMenu *log_menu = new wxMenu;
-    log_menu->Append(Menu_Clear, _T("Clear\tCtrl-L"));
+    log_menu->Append(Menu_Clear, wxT("Clear\tCtrl-L"));
 #endif // wxUSE_LOG
 
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(Menu_Help, _T("&Help..."));
+    help_menu->Append(Menu_Help, wxT("&Help..."));
     help_menu->AppendSeparator();
-    help_menu->Append(Menu_About, _T("&About"));
+    help_menu->Append(Menu_About, wxT("&About"));
 
     wxMenu *clip_menu = new wxMenu;
-    clip_menu->Append(Menu_Copy, _T("&Copy text\tCtrl-C"));
-    clip_menu->Append(Menu_Paste, _T("&Paste text\tCtrl-V"));
+    clip_menu->Append(Menu_Copy, wxT("&Copy text\tCtrl-C"));
+    clip_menu->Append(Menu_Paste, wxT("&Paste text\tCtrl-V"));
     clip_menu->AppendSeparator();
-    clip_menu->Append(Menu_CopyBitmap, _T("Copy &bitmap\tCtrl-Shift-C"));
-    clip_menu->Append(Menu_PasteBitmap, _T("Paste b&itmap\tCtrl-Shift-V"));
+    clip_menu->Append(Menu_CopyBitmap, wxT("Copy &bitmap\tCtrl-Shift-C"));
+    clip_menu->Append(Menu_PasteBitmap, wxT("Paste b&itmap\tCtrl-Shift-V"));
 #if wxUSE_METAFILE
     clip_menu->AppendSeparator();
-    clip_menu->Append(Menu_PasteMFile, _T("Paste &metafile\tCtrl-M"));
+    clip_menu->Append(Menu_PasteMFile, wxT("Paste &metafile\tCtrl-M"));
 #endif // wxUSE_METAFILE
     clip_menu->AppendSeparator();
-    clip_menu->Append(Menu_CopyFiles, _T("Copy &files\tCtrl-F"));
+    clip_menu->Append(Menu_CopyFiles, wxT("Copy &files\tCtrl-F"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 #if wxUSE_LOG
-    menu_bar->Append(log_menu,  _T("&Log"));
+    menu_bar->Append(log_menu,  wxT("&Log"));
 #endif // wxUSE_LOG
-    menu_bar->Append(clip_menu, _T("&Clipboard"));
-    menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(clip_menu, wxT("&Clipboard"));
+    menu_bar->Append(help_menu, wxT("&Help"));
 
     SetMenuBar(menu_bar);
 
     // make a panel with 3 subwindows
-    wxString strFile(_T("Drop files here!")), strText(_T("Drop text on me"));
+    wxString strFile(wxT("Drop files here!")), strText(wxT("Drop text on me"));
 
     m_ctrlFile  = new wxListBox(this, wxID_ANY, wxDefaultPosition, wxDefaultSize, 1, &strFile,
                                 wxLB_HSCROLL | wxLB_ALWAYS_SB );
@@ -1049,8 +1049,8 @@ void DnDFrame::OnPaint(wxPaintEvent& WXU
 
     wxPaintDC dc(this);
     // dc.Clear(); -- this kills wxGTK
-    dc.SetFont( wxFont( 24, wxDECORATIVE, wxNORMAL, wxNORMAL, false, _T("charter") ) );
-    dc.DrawText( _T("Drag text from here!"), 100, h-50 );
+    dc.SetFont( wxFont( 24, wxDECORATIVE, wxNORMAL, wxNORMAL, false, wxT("charter") ) );
+    dc.DrawText( wxT("Drag text from here!"), 100, h-50 );
 }
 
 void DnDFrame::OnUpdateUIMoveByDefault(wxUpdateUIEvent& event)
@@ -1095,11 +1095,11 @@ void DnDFrame::OnDrag(wxCommandEvent& WX
 #if wxUSE_DRAG_AND_DROP
     wxString strText = wxGetTextFromUser
         (
-            _T("After you enter text in this dialog, press any mouse\n")
-            _T("button in the bottom (empty) part of the frame and \n")
-            _T("drag it anywhere - you will be in fact dragging the\n")
-         _T("text object containing this text"),
-         _T("Please enter some text"), m_strText, this
+            wxT("After you enter text in this dialog, press any mouse\n")
+            wxT("button in the bottom (empty) part of the frame and \n")
+            wxT("drag it anywhere - you will be in fact dragging the\n")
+         wxT("text object containing this text"),
+         wxT("Please enter some text"), m_strText, this
         );
 
     m_strText = strText;
@@ -1119,21 +1119,21 @@ void DnDFrame::OnDragMoveAllow(wxCommand
 
 void DnDFrame::OnOpenFile(wxCommandEvent& WXUNUSED(event))
 {
-    wxFileDialog dialog(this, _T("Open a file"), wxEmptyString, wxEmptyString, _T("Files (*.*)|*.*"), wxFD_MULTIPLE);
+    wxFileDialog dialog(this, wxT("Open a file"), wxEmptyString, wxEmptyString, wxT("Files (*.*)|*.*"), wxFD_MULTIPLE);
     if (dialog.ShowModal() == wxID_OK)
     {
         wxString str;
-        str.Printf( _T("File opened: %s"), dialog.GetPath().c_str() );
+        str.Printf( wxT("File opened: %s"), dialog.GetPath().c_str() );
         m_ctrlFile->Append( str );
     }
 }
 
 void DnDFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Drag-&-Drop Demo\n")
-                 _T("Please see \"Help|Help...\" for details\n")
-                 _T("Copyright (c) 1998 Vadim Zeitlin"),
-                 _T("About wxDnD"),
+    wxMessageBox(wxT("Drag-&-Drop Demo\n")
+                 wxT("Please see \"Help|Help...\" for details\n")
+                 wxT("Copyright (c) 1998 Vadim Zeitlin"),
+                 wxT("About wxDnD"),
                  wxICON_INFORMATION | wxOK,
                  this);
 }
@@ -1141,27 +1141,27 @@ void DnDFrame::OnAbout(wxCommandEvent& W
 void DnDFrame::OnHelp(wxCommandEvent& /* event */)
 {
     wxMessageDialog dialog(this,
-                           _T("This small program demonstrates drag & drop support in wxWidgets. The program window\n")
-                           _T("consists of 3 parts: the bottom pane is for debug messages, so that you can see what's\n")
-                           _T("going on inside. The top part is split into 2 listboxes, the left one accepts files\n")
-                           _T("and the right one accepts text.\n")
-                           _T("\n")
-                           _T("To test wxDropTarget: open wordpad (write.exe), select some text in it and drag it to\n")
-                           _T("the right listbox (you'll notice the usual visual feedback, i.e. the cursor will change).\n")
-                           _T("Also, try dragging some files (you can select several at once) from Windows Explorer (or \n")
-                           _T("File Manager) to the left pane. Hold down Ctrl/Shift keys when you drop text (doesn't \n")
-                           _T("work with files) and see what changes.\n")
-                           _T("\n")
-                           _T("To test wxDropSource: just press any mouse button on the empty zone of the window and drag\n")
-                           _T("it to wordpad or any other droptarget accepting text (and of course you can just drag it\n")
-                           _T("to the right pane). Due to a lot of trace messages, the cursor might take some time to \n")
-                           _T("change, don't release the mouse button until it does. You can change the string being\n")
-                           _T("dragged in in \"File|Test drag...\" dialog.\n")
-                           _T("\n")
-                           _T("\n")
-                           _T("Please send all questions/bug reports/suggestions &c to \n")
-                           _T("Vadim Zeitlin <zeitlin@dptmaths.ens-cachan.fr>"),
-                           _T("wxDnD Help"));
+                           wxT("This small program demonstrates drag & drop support in wxWidgets. The program window\n")
+                           wxT("consists of 3 parts: the bottom pane is for debug messages, so that you can see what's\n")
+                           wxT("going on inside. The top part is split into 2 listboxes, the left one accepts files\n")
+                           wxT("and the right one accepts text.\n")
+                           wxT("\n")
+                           wxT("To test wxDropTarget: open wordpad (write.exe), select some text in it and drag it to\n")
+                           wxT("the right listbox (you'll notice the usual visual feedback, i.e. the cursor will change).\n")
+                           wxT("Also, try dragging some files (you can select several at once) from Windows Explorer (or \n")
+                           wxT("File Manager) to the left pane. Hold down Ctrl/Shift keys when you drop text (doesn't \n")
+                           wxT("work with files) and see what changes.\n")
+                           wxT("\n")
+                           wxT("To test wxDropSource: just press any mouse button on the empty zone of the window and drag\n")
+                           wxT("it to wordpad or any other droptarget accepting text (and of course you can just drag it\n")
+                           wxT("to the right pane). Due to a lot of trace messages, the cursor might take some time to \n")
+                           wxT("change, don't release the mouse button until it does. You can change the string being\n")
+                           wxT("dragged in in \"File|Test drag...\" dialog.\n")
+                           wxT("\n")
+                           wxT("\n")
+                           wxT("Please send all questions/bug reports/suggestions &c to \n")
+                           wxT("Vadim Zeitlin <zeitlin@dptmaths.ens-cachan.fr>"),
+                           wxT("wxDnD Help"));
 
     dialog.ShowModal();
 }
@@ -1199,15 +1199,15 @@ void DnDFrame::OnLeftDown(wxMouseEvent &
         const wxChar *pc;
         switch ( result )
         {
-            case wxDragError:   pc = _T("Error!");    break;
-            case wxDragNone:    pc = _T("Nothing");   break;
-            case wxDragCopy:    pc = _T("Copied");    break;
-            case wxDragMove:    pc = _T("Moved");     break;
-            case wxDragCancel:  pc = _T("Cancelled"); break;
-            default:            pc = _T("Huh?");      break;
+            case wxDragError:   pc = wxT("Error!");    break;
+            case wxDragNone:    pc = wxT("Nothing");   break;
+            case wxDragCopy:    pc = wxT("Copied");    break;
+            case wxDragMove:    pc = wxT("Moved");     break;
+            case wxDragCancel:  pc = wxT("Cancelled"); break;
+            default:            pc = wxT("Huh?");      break;
         }
 
-        SetStatusText(wxString(_T("Drag result: ")) + pc);
+        SetStatusText(wxString(wxT("Drag result: ")) + pc);
 #else
         wxUnusedVar(result);
 #endif // wxUSE_STATUSBAR
@@ -1217,11 +1217,11 @@ void DnDFrame::OnLeftDown(wxMouseEvent &
 
 void DnDFrame::OnRightDown(wxMouseEvent &event )
 {
-    wxMenu menu(_T("Dnd sample menu"));
+    wxMenu menu(wxT("Dnd sample menu"));
 
-    menu.Append(Menu_Drag, _T("&Test drag..."));
+    menu.Append(Menu_Drag, wxT("&Test drag..."));
     menu.AppendSeparator();
-    menu.Append(Menu_About, _T("&About"));
+    menu.Append(Menu_About, wxT("&About"));
 
     PopupMenu( &menu, event.GetX(), event.GetY() );
 }
@@ -1244,26 +1244,26 @@ void DnDFrame::OnCopyBitmap(wxCommandEve
 {
     // PNG support is not always compiled in under Windows, so use BMP there
 #if wxUSE_LIBPNG
-    wxFileDialog dialog(this, _T("Open a PNG file"), wxEmptyString, wxEmptyString, _T("PNG files (*.png)|*.png"), 0);
+    wxFileDialog dialog(this, wxT("Open a PNG file"), wxEmptyString, wxEmptyString, wxT("PNG files (*.png)|*.png"), 0);
 #else
-    wxFileDialog dialog(this, _T("Open a BMP file"), wxEmptyString, wxEmptyString, _T("BMP files (*.bmp)|*.bmp"), 0);
+    wxFileDialog dialog(this, wxT("Open a BMP file"), wxEmptyString, wxEmptyString, wxT("BMP files (*.bmp)|*.bmp"), 0);
 #endif
 
     if (dialog.ShowModal() != wxID_OK)
     {
-        wxLogMessage( _T("Aborted file open") );
+        wxLogMessage( wxT("Aborted file open") );
         return;
     }
 
     if (dialog.GetPath().empty())
     {
-        wxLogMessage( _T("Returned empty string.") );
+        wxLogMessage( wxT("Returned empty string.") );
         return;
     }
 
     if (!wxFileExists(dialog.GetPath()))
     {
-        wxLogMessage( _T("File doesn't exist.") );
+        wxLogMessage( wxT("File doesn't exist.") );
         return;
     }
 
@@ -1277,33 +1277,33 @@ void DnDFrame::OnCopyBitmap(wxCommandEve
                   );
     if (!image.Ok())
     {
-        wxLogError( _T("Invalid image file...") );
+        wxLogError( wxT("Invalid image file...") );
         return;
     }
 
-    wxLogStatus( _T("Decoding image file...") );
+    wxLogStatus( wxT("Decoding image file...") );
     wxYield();
 
     wxBitmap bitmap( image );
 
     if ( !wxTheClipboard->Open() )
     {
-        wxLogError(_T("Can't open clipboard."));
+        wxLogError(wxT("Can't open clipboard."));
 
         return;
     }
 
-    wxLogMessage( _T("Creating wxBitmapDataObject...") );
+    wxLogMessage( wxT("Creating wxBitmapDataObject...") );
     wxYield();
 
     if ( !wxTheClipboard->AddData(new wxBitmapDataObject(bitmap)) )
     {
-        wxLogError(_T("Can't copy image to the clipboard."));
+        wxLogError(wxT("Can't copy image to the clipboard."));
     }
     else
     {
-        wxLogMessage(_T("Image has been put on the clipboard.") );
-        wxLogMessage(_T("You can paste it now and look at it.") );
+        wxLogMessage(wxT("Image has been put on the clipboard.") );
+        wxLogMessage(wxT("You can paste it now and look at it.") );
     }
 
     wxTheClipboard->Close();
@@ -1313,14 +1313,14 @@ void DnDFrame::OnPasteBitmap(wxCommandEv
 {
     if ( !wxTheClipboard->Open() )
     {
-        wxLogError(_T("Can't open clipboard."));
+        wxLogError(wxT("Can't open clipboard."));
 
         return;
     }
 
     if ( !wxTheClipboard->IsSupported(wxDF_BITMAP) )
     {
-        wxLogWarning(_T("No bitmap on clipboard"));
+        wxLogWarning(wxT("No bitmap on clipboard"));
 
         wxTheClipboard->Close();
         return;
@@ -1329,13 +1329,13 @@ void DnDFrame::OnPasteBitmap(wxCommandEv
     wxBitmapDataObject data;
     if ( !wxTheClipboard->GetData(data) )
     {
-        wxLogError(_T("Can't paste bitmap from the clipboard"));
+        wxLogError(wxT("Can't paste bitmap from the clipboard"));
     }
     else
     {
         const wxBitmap& bmp = data.GetBitmap();
 
-        wxLogMessage(_T("Bitmap %dx%d pasted from the clipboard"),
+        wxLogMessage(wxT("Bitmap %dx%d pasted from the clipboard"),
                      bmp.GetWidth(), bmp.GetHeight());
         ShowBitmap(bmp);
     }
@@ -1349,27 +1349,27 @@ void DnDFrame::OnPasteMetafile(wxCommand
 {
     if ( !wxTheClipboard->Open() )
     {
-        wxLogError(_T("Can't open clipboard."));
+        wxLogError(wxT("Can't open clipboard."));
 
         return;
     }
 
     if ( !wxTheClipboard->IsSupported(wxDF_METAFILE) )
     {
-        wxLogWarning(_T("No metafile on clipboard"));
+        wxLogWarning(wxT("No metafile on clipboard"));
     }
     else
     {
         wxMetaFileDataObject data;
         if ( !wxTheClipboard->GetData(data) )
         {
-            wxLogError(_T("Can't paste metafile from the clipboard"));
+            wxLogError(wxT("Can't paste metafile from the clipboard"));
         }
         else
         {
             const wxMetaFile& mf = data.GetMetafile();
 
-            wxLogMessage(_T("Metafile %dx%d pasted from the clipboard"),
+            wxLogMessage(wxT("Metafile %dx%d pasted from the clipboard"),
                          mf.GetWidth(), mf.GetHeight());
 
             ShowMetaFile(mf);
@@ -1388,8 +1388,8 @@ void DnDFrame::OnPasteMetafile(wxCommand
 void DnDFrame::OnCopyFiles(wxCommandEvent& WXUNUSED(event))
 {
 #ifdef __WXMSW__
-    wxFileDialog dialog(this, _T("Select a file to copy"), wxEmptyString, wxEmptyString,
-                         _T("All files (*.*)|*.*"), 0);
+    wxFileDialog dialog(this, wxT("Select a file to copy"), wxEmptyString, wxEmptyString,
+                         wxT("All files (*.*)|*.*"), 0);
 
     wxArrayString filenames;
     while ( dialog.ShowModal() == wxID_OK )
@@ -1441,18 +1441,18 @@ void DnDFrame::OnCopy(wxCommandEvent& WX
 {
     if ( !wxTheClipboard->Open() )
     {
-        wxLogError(_T("Can't open clipboard."));
+        wxLogError(wxT("Can't open clipboard."));
 
         return;
     }
 
     if ( !wxTheClipboard->AddData(new wxTextDataObject(m_strText)) )
     {
-        wxLogError(_T("Can't copy data to the clipboard"));
+        wxLogError(wxT("Can't copy data to the clipboard"));
     }
     else
     {
-        wxLogMessage(_T("Text '%s' put on the clipboard"), m_strText.c_str());
+        wxLogMessage(wxT("Text '%s' put on the clipboard"), m_strText.c_str());
     }
 
     wxTheClipboard->Close();
@@ -1462,14 +1462,14 @@ void DnDFrame::OnPaste(wxCommandEvent& W
 {
     if ( !wxTheClipboard->Open() )
     {
-        wxLogError(_T("Can't open clipboard."));
+        wxLogError(wxT("Can't open clipboard."));
 
         return;
     }
 
     if ( !wxTheClipboard->IsSupported(wxDF_TEXT) )
     {
-        wxLogWarning(_T("No text data on clipboard"));
+        wxLogWarning(wxT("No text data on clipboard"));
 
         wxTheClipboard->Close();
         return;
@@ -1478,11 +1478,11 @@ void DnDFrame::OnPaste(wxCommandEvent& W
     wxTextDataObject text;
     if ( !wxTheClipboard->GetData(text) )
     {
-        wxLogError(_T("Can't paste data from the clipboard"));
+        wxLogError(wxT("Can't paste data from the clipboard"));
     }
     else
     {
-        wxLogMessage(_T("Text '%s' pasted from the clipboard"),
+        wxLogMessage(wxT("Text '%s' pasted from the clipboard"),
                      text.GetText().c_str());
     }
 
@@ -1506,7 +1506,7 @@ bool DnDFile::OnDropFiles(wxCoord, wxCoo
 {
     size_t nFiles = filenames.GetCount();
     wxString str;
-    str.Printf( _T("%d files dropped"), (int)nFiles);
+    str.Printf( wxT("%d files dropped"), (int)nFiles);
     m_pOwner->Append(str);
     for ( size_t n = 0; n < nFiles; n++ )
     {
@@ -1641,8 +1641,8 @@ bool DnDShapeDialog::TransferDataFromWin
 
     if ( !m_pos.x || !m_pos.y || !m_size.x || !m_size.y )
     {
-        wxMessageBox(_T("All sizes and positions should be non null!"),
-                     _T("Invalid shape"), wxICON_HAND | wxOK, this);
+        wxMessageBox(wxT("All sizes and positions should be non null!"),
+                     wxT("Invalid shape"), wxICON_HAND | wxOK, this);
 
         return false;
     }
@@ -1674,30 +1674,30 @@ void DnDShapeDialog::OnColour(wxCommandE
 DnDShapeFrame *DnDShapeFrame::ms_lastDropTarget = NULL;
 
 DnDShapeFrame::DnDShapeFrame(wxFrame *parent)
-             : wxFrame(parent, wxID_ANY, _T("Shape Frame"))
+             : wxFrame(parent, wxID_ANY, wxT("Shape Frame"))
 {
 #if wxUSE_STATUSBAR
     CreateStatusBar();
 #endif // wxUSE_STATUSBAR
 
     wxMenu *menuShape = new wxMenu;
-    menuShape->Append(Menu_Shape_New, _T("&New default shape\tCtrl-S"));
-    menuShape->Append(Menu_Shape_Edit, _T("&Edit shape\tCtrl-E"));
+    menuShape->Append(Menu_Shape_New, wxT("&New default shape\tCtrl-S"));
+    menuShape->Append(Menu_Shape_Edit, wxT("&Edit shape\tCtrl-E"));
     menuShape->AppendSeparator();
-    menuShape->Append(Menu_Shape_Clear, _T("&Clear shape\tCtrl-L"));
+    menuShape->Append(Menu_Shape_Clear, wxT("&Clear shape\tCtrl-L"));
 
     wxMenu *menuClipboard = new wxMenu;
-    menuClipboard->Append(Menu_ShapeClipboard_Copy, _T("&Copy\tCtrl-C"));
-    menuClipboard->Append(Menu_ShapeClipboard_Paste, _T("&Paste\tCtrl-V"));
+    menuClipboard->Append(Menu_ShapeClipboard_Copy, wxT("&Copy\tCtrl-C"));
+    menuClipboard->Append(Menu_ShapeClipboard_Paste, wxT("&Paste\tCtrl-V"));
 
     wxMenuBar *menubar = new wxMenuBar;
-    menubar->Append(menuShape, _T("&Shape"));
-    menubar->Append(menuClipboard, _T("&Clipboard"));
+    menubar->Append(menuShape, wxT("&Shape"));
+    menubar->Append(menuClipboard, wxT("&Clipboard"));
 
     SetMenuBar(menubar);
 
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("Press Ctrl-S to create a new shape"));
+    SetStatusText(wxT("Press Ctrl-S to create a new shape"));
 #endif // wxUSE_STATUSBAR
 
     SetDropTarget(new DnDShapeDropTarget(this));
@@ -1745,16 +1745,16 @@ void DnDShapeFrame::OnDrag(wxMouseEvent&
 
         case wxDragNone:
 #if wxUSE_STATUSBAR
-            SetStatusText(_T("Nothing happened"));
+            SetStatusText(wxT("Nothing happened"));
 #endif // wxUSE_STATUSBAR
             break;
 
         case wxDragCopy:
-            pc = _T("copied");
+            pc = wxT("copied");
             break;
 
         case wxDragMove:
-            pc = _T("moved");
+            pc = wxT("moved");
             if ( ms_lastDropTarget != this )
             {
                 // don't delete the shape if we dropped it on ourselves!
@@ -1764,7 +1764,7 @@ void DnDShapeFrame::OnDrag(wxMouseEvent&
 
         case wxDragCancel:
 #if wxUSE_STATUSBAR
-            SetStatusText(_T("Drag and drop operation cancelled"));
+            SetStatusText(wxT("Drag and drop operation cancelled"));
 #endif // wxUSE_STATUSBAR
             break;
     }
@@ -1772,7 +1772,7 @@ void DnDShapeFrame::OnDrag(wxMouseEvent&
     if ( pc )
     {
 #if wxUSE_STATUSBAR
-        SetStatusText(wxString(_T("Shape successfully ")) + pc);
+        SetStatusText(wxString(wxT("Shape successfully ")) + pc);
 #endif // wxUSE_STATUSBAR
     }
     //else: status text already set
@@ -1804,7 +1804,7 @@ void DnDShapeFrame::OnEditShape(wxComman
 #if wxUSE_STATUSBAR
         if ( m_shape )
         {
-            SetStatusText(_T("You can now drag the shape to another frame"));
+            SetStatusText(wxT("You can now drag the shape to another frame"));
         }
 #endif // wxUSE_STATUSBAR
     }
@@ -1815,7 +1815,7 @@ void DnDShapeFrame::OnNewShape(wxCommand
     SetShape(new DnDEllipticShape(wxPoint(10, 10), wxSize(80, 60), *wxRED));
 
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("You can now drag the shape to another frame"));
+    SetStatusText(wxT("You can now drag the shape to another frame"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -1968,7 +1968,7 @@ void DnDShapeDataObject::CreateBitmap() 
 
 static void ShowBitmap(const wxBitmap& bitmap)
 {
-    wxFrame *frame = new wxFrame(NULL, wxID_ANY, _T("Bitmap view"));
+    wxFrame *frame = new wxFrame(NULL, wxID_ANY, wxT("Bitmap view"));
 #if wxUSE_STATUSBAR
     frame->CreateStatusBar();
 #endif // wxUSE_STATUSBAR
@@ -1978,7 +1978,7 @@ static void ShowBitmap(const wxBitmap& b
     int w = bitmap.GetWidth(),
         h = bitmap.GetHeight();
 #if wxUSE_STATUSBAR
-    frame->SetStatusText(wxString::Format(_T("%dx%d"), w, h));
+    frame->SetStatusText(wxString::Format(wxT("%dx%d"), w, h));
 #endif // wxUSE_STATUSBAR
 
     frame->SetClientSize(w > 100 ? 100 : w, h > 100 ? 100 : h);
@@ -1989,13 +1989,13 @@ static void ShowBitmap(const wxBitmap& b
 
 static void ShowMetaFile(const wxMetaFile& metafile)
 {
-    wxFrame *frame = new wxFrame(NULL, wxID_ANY, _T("Metafile view"));
+    wxFrame *frame = new wxFrame(NULL, wxID_ANY, wxT("Metafile view"));
     frame->CreateStatusBar();
     DnDCanvasMetafile *canvas = new DnDCanvasMetafile(frame);
     canvas->SetMetafile(metafile);
 
     wxSize size = metafile.GetSize();
-    frame->SetStatusText(wxString::Format(_T("%dx%d"), size.x, size.y));
+    frame->SetStatusText(wxString::Format(wxT("%dx%d"), size.x, size.y));
 
     frame->SetClientSize(size.x > 100 ? 100 : size.x,
                          size.y > 100 ? 100 : size.y);
--- samples/multimon/multimon_test.cpp-orig	2009-06-18 18:47:28.320081000 -0500
+++ samples/multimon/multimon_test.cpp	2009-06-18 18:47:35.051866000 -0500
@@ -31,18 +31,18 @@ bool TestApp::OnInit()
                         ;
   if( !is_use_display )
   {
-    wxMessageBox( _T("This sample has to be compiled with wxUSE_DISPLAY"), _T("Building error"), wxOK);
+    wxMessageBox( wxT("This sample has to be compiled with wxUSE_DISPLAY"), wxT("Building error"), wxOK);
   }
 #if wxUSE_DISPLAY
   else
   {
     unsigned count = wxDisplay::GetCount();
-    wxLogDebug ( _T("I detected %u display(s) on your system"), count );
+    wxLogDebug ( wxT("I detected %u display(s) on your system"), count );
     for (unsigned i = 0; i < count; i++)
     {
         wxDisplay display ( i );
         wxRect r = display.GetGeometry();
-        wxLogDebug ( _T("Display #%u \"%s\" = ( %i, %i, %i, %i ) @ %i bits"),
+        wxLogDebug ( wxT("Display #%u \"%s\" = ( %i, %i, %i, %i ) @ %i bits"),
             i, display.GetName().c_str(), r.GetLeft(), r.GetTop(), r.GetWidth(), r.GetHeight(),
             display.GetCurrentMode().GetDepth() );
     }
--- samples/rotate/rotate.cpp-orig	2009-06-18 18:47:10.969728000 -0500
+++ samples/rotate/rotate.cpp	2009-06-18 18:47:16.588016000 -0500
@@ -131,7 +131,7 @@ bool MyApp::OnInit()
     wxImage::AddHandler( new wxPNGHandler );
 #endif
 
-    m_image = wxImage(_T("duck.png"), wxBITMAP_TYPE_PNG);
+    m_image = wxImage(wxT("duck.png"), wxBITMAP_TYPE_PNG);
 
     if ( !m_image.Ok() )
     {
@@ -140,7 +140,7 @@ bool MyApp::OnInit()
         return false;
     }
 
-    MyFrame *frame = new MyFrame (_T("wxWidgets rotate sample"),
+    MyFrame *frame = new MyFrame (wxT("wxWidgets rotate sample"),
                                   wxPoint(20, 20), wxSize(600, 450));
 
     frame->Show (true);
@@ -241,13 +241,13 @@ MyFrame::MyFrame(const wxString& title, 
     m_canvas = new MyCanvas(this);
 
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append (ID_Angle, _T("Set &angle...\tCtrl-A"));
-    menuFile->Append (ID_Clear, _T("&Clear all ducks\tCtrl-C"));
+    menuFile->Append (ID_Angle, wxT("Set &angle...\tCtrl-A"));
+    menuFile->Append (ID_Clear, wxT("&Clear all ducks\tCtrl-C"));
     menuFile->AppendSeparator();
-    menuFile->Append (ID_Quit, _T("E&xit\tAlt-X"));
+    menuFile->Append (ID_Quit, wxT("E&xit\tAlt-X"));
 
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append (menuFile, _T("&File"));
+    menuBar->Append (menuFile, wxT("&File"));
 
     SetMenuBar (menuBar);
 }
@@ -255,9 +255,9 @@ MyFrame::MyFrame(const wxString& title, 
 void MyFrame::OnAngle (wxCommandEvent &)
 {
     long degrees = (long)((180*m_angle)/M_PI);
-    degrees = wxGetNumberFromUser(_T("Change the image rotation angle"),
-                                  _T("Angle in degrees:"),
-                                  _T("wxWidgets rotate sample"),
+    degrees = wxGetNumberFromUser(wxT("Change the image rotation angle"),
+                                  wxT("Angle in degrees:"),
+                                  wxT("wxWidgets rotate sample"),
                                   degrees,
                                   -180, +180,
                                   this);
--- samples/listbox/lboxtest.cpp-orig	2009-06-18 18:46:55.347915000 -0500
+++ samples/listbox/lboxtest.cpp	2009-06-18 18:47:00.639593000 -0500
@@ -322,12 +322,12 @@ END_EVENT_TABLE()
 
 bool LboxTestApp::OnInit()
 {
-    wxFrame *frame = new LboxTestFrame(_T("wxListBox sample"));
+    wxFrame *frame = new LboxTestFrame(wxT("wxListBox sample"));
     frame->Show();
 
 #if wxUSE_LOG
-    //wxLog::AddTraceMask(_T("listbox"));
-    wxLog::AddTraceMask(_T("scrollbar"));
+    //wxLog::AddTraceMask(wxT("listbox"));
+    wxLog::AddTraceMask(wxT("scrollbar"));
 #endif // wxUSE_LOG
 
     return true;
@@ -374,20 +374,20 @@ LboxTestFrame::LboxTestFrame(const wxStr
     // upper left pane
     static const wxString modes[] =
     {
-        _T("single"),
-        _T("extended"),
-        _T("multiple"),
+        wxT("single"),
+        wxT("extended"),
+        wxT("multiple"),
     };
 
-    wxStaticBox *box = new wxStaticBox(m_panel, wxID_ANY, _T("&Set listbox parameters"));
-    m_radioSelMode = new wxRadioBox(m_panel, wxID_ANY, _T("Selection &mode:"),
+    wxStaticBox *box = new wxStaticBox(m_panel, wxID_ANY, wxT("&Set listbox parameters"));
+    m_radioSelMode = new wxRadioBox(m_panel, wxID_ANY, wxT("Selection &mode:"),
                                     wxDefaultPosition, wxDefaultSize,
                                     WXSIZEOF(modes), modes,
                                     1, wxRA_SPECIFY_COLS);
 
-    m_chkVScroll = new wxCheckBox(m_panel, wxID_ANY, _T("Always show &vertical scrollbar"));
-    m_chkHScroll = new wxCheckBox(m_panel, wxID_ANY, _T("Show &horizontal scrollbar"));
-    m_chkSort = new wxCheckBox(m_panel, wxID_ANY, _T("&Sort items"));
+    m_chkVScroll = new wxCheckBox(m_panel, wxID_ANY, wxT("Always show &vertical scrollbar"));
+    m_chkHScroll = new wxCheckBox(m_panel, wxID_ANY, wxT("Show &horizontal scrollbar"));
+    m_chkSort = new wxCheckBox(m_panel, wxID_ANY, wxT("&Sort items"));
 
     sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
@@ -398,50 +398,50 @@ LboxTestFrame::LboxTestFrame(const wxStr
     sizerLeft->Add(m_radioSelMode, 0, wxGROW | wxALL, 5);
 
     wxSizer *sizerBtn = new wxBoxSizer(wxHORIZONTAL);
-    wxButton *btn = new wxButton(m_panel, LboxTest_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(m_panel, LboxTest_Reset, wxT("&Reset"));
     sizerBtn->Add(btn, 0, wxLEFT | wxRIGHT, 5);
-    btn = new wxButton(m_panel, LboxTest_Create, _T("&Create"));
+    btn = new wxButton(m_panel, LboxTest_Create, wxT("&Create"));
     sizerBtn->Add(btn, 0, wxLEFT | wxRIGHT, 5);
     sizerLeft->Add(sizerBtn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(m_panel, wxID_ANY, _T("&Change listbox contents"));
+    wxStaticBox *box2 = new wxStaticBox(m_panel, wxID_ANY, wxT("&Change listbox contents"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxSizer *sizerRow = new wxBoxSizer(wxHORIZONTAL);
-    btn = new wxButton(m_panel, LboxTest_Add, _T("&Add this string"));
-    m_textAdd = new wxTextCtrl(m_panel, LboxTest_AddText, _T("test item 0"));
+    btn = new wxButton(m_panel, LboxTest_Add, wxT("&Add this string"));
+    m_textAdd = new wxTextCtrl(m_panel, LboxTest_AddText, wxT("test item 0"));
     sizerRow->Add(btn, 0, wxRIGHT, 5);
     sizerRow->Add(m_textAdd, 1, wxLEFT, 5);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(m_panel, LboxTest_AddSeveral, _T("&Insert a few strings"));
+    btn = new wxButton(m_panel, LboxTest_AddSeveral, wxT("&Insert a few strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(m_panel, LboxTest_AddMany, _T("Add &many strings"));
+    btn = new wxButton(m_panel, LboxTest_AddMany, wxT("Add &many strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     sizerRow = new wxBoxSizer(wxHORIZONTAL);
-    btn = new wxButton(m_panel, LboxTest_Change, _T("C&hange current"));
+    btn = new wxButton(m_panel, LboxTest_Change, wxT("C&hange current"));
     m_textChange = new wxTextCtrl(m_panel, LboxTest_ChangeText, wxEmptyString);
     sizerRow->Add(btn, 0, wxRIGHT, 5);
     sizerRow->Add(m_textChange, 1, wxLEFT, 5);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = new wxBoxSizer(wxHORIZONTAL);
-    btn = new wxButton(m_panel, LboxTest_Delete, _T("&Delete this item"));
+    btn = new wxButton(m_panel, LboxTest_Delete, wxT("&Delete this item"));
     m_textDelete = new wxTextCtrl(m_panel, LboxTest_DeleteText, wxEmptyString);
     sizerRow->Add(btn, 0, wxRIGHT, 5);
     sizerRow->Add(m_textDelete, 1, wxLEFT, 5);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(m_panel, LboxTest_DeleteSel, _T("Delete &selection"));
+    btn = new wxButton(m_panel, LboxTest_DeleteSel, wxT("Delete &selection"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(m_panel, LboxTest_DeselectAll, _T("Deselect All"));
+    btn = new wxButton(m_panel, LboxTest_DeselectAll, wxT("Deselect All"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(m_panel, LboxTest_Clear, _T("&Clear"));
+    btn = new wxButton(m_panel, LboxTest_Clear, wxT("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     // right pane
@@ -457,7 +457,7 @@ LboxTestFrame::LboxTestFrame(const wxStr
 #if wxUSE_LOG
     wxSizer *sizerDown = new wxStaticBoxSizer
                              (
-                               new wxStaticBox(m_panel, wxID_ANY, _T("&Log window")),
+                               new wxStaticBox(m_panel, wxID_ANY, wxT("&Log window")),
                                wxVERTICAL
                              );
     m_lboxLog = new wxListBox(m_panel, wxID_ANY);
@@ -467,11 +467,11 @@ LboxTestFrame::LboxTestFrame(const wxStr
 #endif // wxUSE_LOG
     wxBoxSizer *sizerBtns = new wxBoxSizer(wxHORIZONTAL);
 #if wxUSE_LOG
-    btn = new wxButton(m_panel, LboxTest_ClearLog, _T("Clear &log"));
+    btn = new wxButton(m_panel, LboxTest_ClearLog, wxT("Clear &log"));
     sizerBtns->Add(btn);
     sizerBtns->Add(10, 0); // spacer
 #endif // wxUSE_LOG
-    btn = new wxButton(m_panel, LboxTest_Quit, _T("E&xit"));
+    btn = new wxButton(m_panel, LboxTest_Quit, wxT("E&xit"));
     sizerBtns->Add(btn);
     sizerDown->Add(sizerBtns, 0, wxALL | wxALIGN_RIGHT, 5);
 
@@ -533,7 +533,7 @@ void LboxTestFrame::CreateLbox()
     switch ( m_radioSelMode->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unexpected radio box selection") );
+            wxFAIL_MSG( wxT("unexpected radio box selection") );
 
         case LboxSel_Single:    flags |= wxLB_SINGLE; break;
         case LboxSel_Extended:  flags |= wxLB_EXTENDED; break;
@@ -653,7 +653,7 @@ void LboxTestFrame::OnButtonAdd(wxComman
     if ( !m_textAdd->IsModified() )
     {
         // update the default string
-        m_textAdd->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textAdd->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     m_lbox->Append(s);
@@ -664,16 +664,16 @@ void LboxTestFrame::OnButtonAddMany(wxCo
     // "many" means 1000 here
     for ( unsigned n = 0; n < 1000; n++ )
     {
-        m_lbox->Append(wxString::Format(_T("item #%u"), n));
+        m_lbox->Append(wxString::Format(wxT("item #%u"), n));
     }
 }
 
 void LboxTestFrame::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
 {
     wxArrayString items;
-    items.Add(_T("First"));
-    items.Add(_T("another one"));
-    items.Add(_T("and the last (very very very very very very very very very very long) one"));
+    items.Add(wxT("First"));
+    items.Add(wxT("another one"));
+    items.Add(wxT("and the last (very very very very very very very very very very long) one"));
     m_lbox->InsertItems(items, 0);
 }
 
@@ -714,15 +714,15 @@ void LboxTestFrame::OnUpdateUIAddSeveral
 void LboxTestFrame::OnListbox(wxCommandEvent& event)
 {
     int sel = event.GetInt();
-    m_textDelete->SetValue(wxString::Format(_T("%d"), sel));
+    m_textDelete->SetValue(wxString::Format(wxT("%d"), sel));
 
-    wxLogMessage(_T("Listbox item %d selected"), sel);
+    wxLogMessage(wxT("Listbox item %d selected"), sel);
 }
 
 void LboxTestFrame::OnListboxDClick(wxCommandEvent& event)
 {
     int sel = event.GetInt();
-    wxLogMessage(_T("Listbox item %d double clicked"), sel);
+    wxLogMessage(wxT("Listbox item %d double clicked"), sel);
 }
 
 void LboxTestFrame::OnListboxRDown(wxMouseEvent& event)
@@ -730,9 +730,9 @@ void LboxTestFrame::OnListboxRDown(wxMou
     int item = m_lbox->HitTest(event.GetPosition());
 
     if ( item != wxNOT_FOUND )
-        wxLogMessage(_T("Listbox item %d right clicked"), item);
+        wxLogMessage(wxT("Listbox item %d right clicked"), item);
     else
-        wxLogMessage(_T("Listbox right clicked but no item clicked upon"));
+        wxLogMessage(wxT("Listbox right clicked but no item clicked upon"));
 
     event.Skip();
 }
--- samples/statbar/statbar.cpp-orig	2009-06-18 18:46:38.228091000 -0500
+++ samples/statbar/statbar.cpp	2009-06-18 18:46:45.122632000 -0500
@@ -268,7 +268,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxStatusBar sample"),
+    MyFrame *frame = new MyFrame(wxT("wxStatusBar sample"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // and show it (the frames, unlike simple controls, are not shown when
@@ -306,30 +306,30 @@ MyFrame::MyFrame(const wxString& title, 
 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(StatusBar_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(StatusBar_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *statbarMenu = new wxMenu;
-    statbarMenu->Append(StatusBar_SetFields, _T("&Set field count\tCtrl-C"),
-                        _T("Set the number of status bar fields"));
-    statbarMenu->Append(StatusBar_Toggle, _T("&Toggle Status Bar"),
-                        _T("Toggle the status bar display"), true);
-    statbarMenu->Append(StatusBar_Recreate, _T("&Recreate\tCtrl-R"),
-                        _T("Toggle status bar format"));
+    statbarMenu->Append(StatusBar_SetFields, wxT("&Set field count\tCtrl-C"),
+                        wxT("Set the number of status bar fields"));
+    statbarMenu->Append(StatusBar_Toggle, wxT("&Toggle Status Bar"),
+                        wxT("Toggle the status bar display"), true);
+    statbarMenu->Append(StatusBar_Recreate, wxT("&Recreate\tCtrl-R"),
+                        wxT("Toggle status bar format"));
 
     wxMenu *statbarStyleMenu = new wxMenu;
-    statbarStyleMenu->Append(StatusBar_SetStyleNormal, _T("&Normal"), _T("Sets the style of the first field to normal (sunken) look"), true);
-    statbarStyleMenu->Append(StatusBar_SetStyleFlat, _T("&Flat"), _T("Sets the style of the first field to flat look"), true);
-    statbarStyleMenu->Append(StatusBar_SetStyleRaised, _T("&Raised"), _T("Sets the style of the first field to raised look"), true);
-    statbarMenu->Append(StatusBar_SetStyle, _T("Field style"), statbarStyleMenu);
+    statbarStyleMenu->Append(StatusBar_SetStyleNormal, wxT("&Normal"), wxT("Sets the style of the first field to normal (sunken) look"), true);
+    statbarStyleMenu->Append(StatusBar_SetStyleFlat, wxT("&Flat"), wxT("Sets the style of the first field to flat look"), true);
+    statbarStyleMenu->Append(StatusBar_SetStyleRaised, wxT("&Raised"), wxT("Sets the style of the first field to raised look"), true);
+    statbarMenu->Append(StatusBar_SetStyle, wxT("Field style"), statbarStyleMenu);
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(StatusBar_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    helpMenu->Append(StatusBar_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(statbarMenu, _T("&Status bar"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(statbarMenu, wxT("&Status bar"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -337,7 +337,7 @@ MyFrame::MyFrame(const wxString& title, 
     // create default status bar to start with
     CreateStatusBar(2);
     m_statbarKind = StatBar_Default;
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 
     m_statbarDefault = GetStatusBar();
 }
@@ -398,9 +398,9 @@ void MyFrame::OnSetStatusFields(wxComman
 
     long nFields = wxGetNumberFromUser
                    (
-                    _T("Select the number of fields in the status bar"),
-                    _T("Fields:"),
-                    _T("wxWidgets statusbar sample"),
+                    wxT("Select the number of fields in the status bar"),
+                    wxT("Fields:"),
+                    wxT("wxWidgets statusbar sample"),
                     sb->GetFieldsCount(),
                     1, 5,
                     this
@@ -432,13 +432,13 @@ void MyFrame::OnSetStatusFields(wxComman
             if ( widths )
             {
                 if ( widths[n] > 0 )
-                    s.Printf(_T("fixed (%d)"), widths[n]);
+                    s.Printf(wxT("fixed (%d)"), widths[n]);
                 else
-                    s.Printf(_T("variable (*%d)"), -widths[n]);
+                    s.Printf(wxT("variable (*%d)"), -widths[n]);
             }
             else
             {
-                s = _T("default");
+                s = wxT("default");
             }
 
             SetStatusText(s, n);
@@ -541,28 +541,28 @@ void MyFrame::ApplyStyle()
 // ----------------------------------------------------------------------------
 
 MyAboutDialog::MyAboutDialog(wxWindow *parent)
-             : wxDialog(parent, wxID_ANY, wxString(_T("About statbar")),
+             : wxDialog(parent, wxID_ANY, wxString(wxT("About statbar")),
                         wxDefaultPosition, wxDefaultSize,
                         wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
 {
     wxStaticText *text = new wxStaticText(this, wxID_ANY,
-                                          _T("wxStatusBar sample\n")
-                                          _T("(c) 2000 Vadim Zeitlin"));
+                                          wxT("wxStatusBar sample\n")
+                                          wxT("(c) 2000 Vadim Zeitlin"));
 
-    wxButton *btn = new wxButton(this, wxID_OK, _T("&Close"));
+    wxButton *btn = new wxButton(this, wxID_OK, wxT("&Close"));
 
     // create the top status bar without the size grip (default style),
     // otherwise it looks weird
     wxStatusBar *statbarTop = new wxStatusBar(this, wxID_ANY, 0);
     statbarTop->SetFieldsCount(3);
-    statbarTop->SetStatusText(_T("This is a top status bar"), 0);
-    statbarTop->SetStatusText(_T("in a dialog"), 1);
-    statbarTop->SetStatusText(_T("Great, isn't it?"), 2);
+    statbarTop->SetStatusText(wxT("This is a top status bar"), 0);
+    statbarTop->SetStatusText(wxT("in a dialog"), 1);
+    statbarTop->SetStatusText(wxT("Great, isn't it?"), 2);
 
     wxStatusBar *statbarBottom = new wxStatusBar(this, wxID_ANY);
     statbarBottom->SetFieldsCount(2);
-    statbarBottom->SetStatusText(_T("This is a bottom status bar"), 0);
-    statbarBottom->SetStatusText(_T("in a dialog"), 1);
+    statbarBottom->SetStatusText(wxT("This is a bottom status bar"), 0);
+    statbarBottom->SetStatusText(wxT("in a dialog"), 1);
 
     wxBoxSizer *sizerTop = new wxBoxSizer(wxVERTICAL);
     sizerTop->Add(statbarTop, 0, wxGROW);
@@ -603,7 +603,7 @@ MyStatusBar::MyStatusBar(wxWindow *paren
     SetStatusWidths(Field_Max, widths);
 
 #if wxUSE_CHECKBOX
-    m_checkbox = new wxCheckBox(this, StatusBar_Checkbox, _T("&Toggle clock"));
+    m_checkbox = new wxCheckBox(this, StatusBar_Checkbox, wxT("&Toggle clock"));
     m_checkbox->SetValue(true);
 #endif
 
--- samples/image/image.cpp-orig	2009-06-18 18:46:24.291627000 -0500
+++ samples/image/image.cpp	2009-06-18 18:46:29.902936000 -0500
@@ -139,7 +139,7 @@ class MyImageFrame : public wxFrame
 {
 public:
     MyImageFrame(wxFrame *parent, const wxBitmap& bitmap)
-        : wxFrame(parent, wxID_ANY, _T("Double click to save"),
+        : wxFrame(parent, wxID_ANY, wxT("Double click to save"),
                   wxDefaultPosition, wxDefaultSize,
                   wxCAPTION | wxSYSTEM_MENU | wxCLOSE_BOX),
                   m_bitmap(bitmap)
@@ -185,7 +185,7 @@ public:
         wxFileName::SplitPath(savefilename, NULL, NULL, &extension);
 
         bool saved = false;
-        if ( extension == _T("bmp") )
+        if ( extension == wxT("bmp") )
         {
             static const int bppvalues[] =
             {
@@ -201,18 +201,18 @@ public:
 
             const wxString bppchoices[] =
             {
-                _T("1 bpp color"),
-                _T("1 bpp B&W"),
-                _T("4 bpp color"),
-                _T("8 bpp color"),
-                _T("8 bpp greyscale"),
-                _T("8 bpp red"),
-                _T("8 bpp own palette"),
-                _T("24 bpp")
+                wxT("1 bpp color"),
+                wxT("1 bpp B&W"),
+                wxT("4 bpp color"),
+                wxT("8 bpp color"),
+                wxT("8 bpp greyscale"),
+                wxT("8 bpp red"),
+                wxT("8 bpp own palette"),
+                wxT("24 bpp")
             };
 
-            int bppselection = wxGetSingleChoiceIndex(_T("Set BMP BPP"),
-                                                      _T("Image sample: save file"),
+            int bppselection = wxGetSingleChoiceIndex(wxT("Set BMP BPP"),
+                                                      wxT("Image sample: save file"),
                                                       WXSIZEOF(bppchoices),
                                                       bppchoices,
                                                       this);
@@ -232,7 +232,7 @@ public:
                 }
             }
         }
-        else if ( extension == _T("png") )
+        else if ( extension == wxT("png") )
         {
             static const int pngvalues[] =
             {
@@ -246,16 +246,16 @@ public:
 
             const wxString pngchoices[] =
             {
-                _T("Colour 8bpp"),
-                _T("Colour 16bpp"),
-                _T("Grey 8bpp"),
-                _T("Grey 16bpp"),
-                _T("Grey red 8bpp"),
-                _T("Grey red 16bpp"),
+                wxT("Colour 8bpp"),
+                wxT("Colour 16bpp"),
+                wxT("Grey 8bpp"),
+                wxT("Grey 16bpp"),
+                wxT("Grey red 8bpp"),
+                wxT("Grey red 16bpp"),
             };
 
-            int sel = wxGetSingleChoiceIndex(_T("Set PNG format"),
-                                             _T("Image sample: save file"),
+            int sel = wxGetSingleChoiceIndex(wxT("Set PNG format"),
+                                             wxT("Image sample: save file"),
                                              WXSIZEOF(pngchoices),
                                              pngchoices,
                                              this);
@@ -265,7 +265,7 @@ public:
                 image.SetOption(wxIMAGE_OPTION_PNG_BITDEPTH, sel % 2 ? 16 : 8);
             }
         }
-        else if ( extension == _T("cur") )
+        else if ( extension == wxT("cur") )
         {
             image.Rescale(32,32);
             image.SetOption(wxIMAGE_OPTION_CUR_HOTSPOT_X, 0);
@@ -305,7 +305,7 @@ public:
     };
 
     MyRawBitmapFrame(wxFrame *parent)
-        : wxFrame(parent, wxID_ANY, _T("Raw bitmaps (how exciting)")),
+        : wxFrame(parent, wxID_ANY, wxT("Raw bitmaps (how exciting)")),
           m_bitmap(SIZE, SIZE, 24),
           m_alphaBitmap(SIZE, SIZE, 32)
     {
@@ -323,7 +323,7 @@ public:
             wxAlphaPixelData data( m_alphaBitmap, wxPoint(0,0), wxSize(SIZE, SIZE) );
             if ( !data )
             {
-                wxLogError(_T("Failed to gain raw access to bitmap data"));
+                wxLogError(wxT("Failed to gain raw access to bitmap data"));
                 return;
             }
             data.UseAlpha();
@@ -346,7 +346,7 @@ public:
                               wxSize(REAL_SIZE, REAL_SIZE));
         if ( !data )
         {
-            wxLogError(_T("Failed to gain raw access to bitmap data"));
+            wxLogError(wxT("Failed to gain raw access to bitmap data"));
             return;
         }
 
@@ -384,7 +384,7 @@ public:
         wxNativePixelData data(m_bitmap);
         if ( !data )
         {
-            wxLogError(_T("Failed to gain raw access to bitmap data"));
+            wxLogError(wxT("Failed to gain raw access to bitmap data"));
             return;
         }
 
@@ -413,12 +413,12 @@ public:
     void OnPaint(wxPaintEvent& WXUNUSED(event))
     {
         wxPaintDC dc( this );
-        dc.DrawText(_T("This is alpha and raw bitmap test"), 0, BORDER);
-        dc.DrawText(_T("This is alpha and raw bitmap test"), 0, SIZE/2 - BORDER);
-        dc.DrawText(_T("This is alpha and raw bitmap test"), 0, SIZE - 2*BORDER);
+        dc.DrawText(wxT("This is alpha and raw bitmap test"), 0, BORDER);
+        dc.DrawText(wxT("This is alpha and raw bitmap test"), 0, SIZE/2 - BORDER);
+        dc.DrawText(wxT("This is alpha and raw bitmap test"), 0, SIZE - 2*BORDER);
         dc.DrawBitmap( m_alphaBitmap, 0, 0, true /* use mask */ );
 
-        dc.DrawText(_T("Raw bitmap access without alpha"), 0, SIZE+5);
+        dc.DrawText(wxT("Raw bitmap access without alpha"), 0, SIZE+5);
         dc.DrawBitmap( m_bitmap, 0, SIZE+5+dc.GetCharHeight());
     }
 
@@ -497,22 +497,22 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
     wxImage image = bitmap.ConvertToImage();
 
 #if wxUSE_LIBPNG
-    if ( !image.SaveFile( dir + _T("test.png"), wxBITMAP_TYPE_PNG ))
+    if ( !image.SaveFile( dir + wxT("test.png"), wxBITMAP_TYPE_PNG ))
         wxLogError(wxT("Can't save file"));
 
     image.Destroy();
 
-    if ( image.LoadFile( dir + _T("test.png") ) )
+    if ( image.LoadFile( dir + wxT("test.png") ) )
         my_square = wxBitmap( image );
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.png")) )
+    if ( !image.LoadFile( dir + wxT("horse.png")) )
         wxLogError(wxT("Can't load PNG image"));
     else
         my_horse_png = wxBitmap( image );
 
-    if ( !image.LoadFile( dir + _T("toucan.png")) )
+    if ( !image.LoadFile( dir + wxT("toucan.png")) )
         wxLogError(wxT("Can't load PNG image"));
     else
         my_toucan = wxBitmap(image);
@@ -531,7 +531,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 #if wxUSE_LIBJPEG
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.jpg")) )
+    if ( !image.LoadFile( dir + wxT("horse.jpg")) )
         wxLogError(wxT("Can't load JPG image"));
     else
     {
@@ -544,8 +544,8 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
         colorized_horse_jpeg = wxBitmap( image );
     }
 
-    if ( !image.LoadFile( dir + _T("cmyk.jpg")) )
-        wxLogError(_T("Can't load CMYK JPG image"));
+    if ( !image.LoadFile( dir + wxT("cmyk.jpg")) )
+        wxLogError(wxT("Can't load CMYK JPG image"));
     else
         my_cmyk_jpeg = wxBitmap(image);
 #endif // wxUSE_LIBJPEG
@@ -553,7 +553,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 #if wxUSE_GIF
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.gif" )) )
+    if ( !image.LoadFile( dir + wxT("horse.gif" )) )
         wxLogError(wxT("Can't load GIF image"));
     else
         my_horse_gif = wxBitmap( image );
@@ -562,7 +562,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 #if wxUSE_PCX
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.pcx"), wxBITMAP_TYPE_PCX ) )
+    if ( !image.LoadFile( dir + wxT("horse.pcx"), wxBITMAP_TYPE_PCX ) )
         wxLogError(wxT("Can't load PCX image"));
     else
         my_horse_pcx = wxBitmap( image );
@@ -570,7 +570,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.bmp"), wxBITMAP_TYPE_BMP ) )
+    if ( !image.LoadFile( dir + wxT("horse.bmp"), wxBITMAP_TYPE_BMP ) )
         wxLogError(wxT("Can't load BMP image"));
     else
         my_horse_bmp = wxBitmap( image );
@@ -578,33 +578,33 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 #if wxUSE_XPM
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.xpm"), wxBITMAP_TYPE_XPM ) )
+    if ( !image.LoadFile( dir + wxT("horse.xpm"), wxBITMAP_TYPE_XPM ) )
         wxLogError(wxT("Can't load XPM image"));
     else
         my_horse_xpm = wxBitmap( image );
 
-    if ( !image.SaveFile( dir + _T("test.xpm"), wxBITMAP_TYPE_XPM ))
+    if ( !image.SaveFile( dir + wxT("test.xpm"), wxBITMAP_TYPE_XPM ))
         wxLogError(wxT("Can't save file"));
 #endif
 
 #if wxUSE_PNM
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.pnm"), wxBITMAP_TYPE_PNM ) )
+    if ( !image.LoadFile( dir + wxT("horse.pnm"), wxBITMAP_TYPE_PNM ) )
         wxLogError(wxT("Can't load PNM image"));
     else
         my_horse_pnm = wxBitmap( image );
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse_ag.pnm"), wxBITMAP_TYPE_PNM ) )
+    if ( !image.LoadFile( dir + wxT("horse_ag.pnm"), wxBITMAP_TYPE_PNM ) )
         wxLogError(wxT("Can't load PNM image"));
     else
         my_horse_asciigrey_pnm = wxBitmap( image );
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse_rg.pnm"), wxBITMAP_TYPE_PNM ) )
+    if ( !image.LoadFile( dir + wxT("horse_rg.pnm"), wxBITMAP_TYPE_PNM ) )
         wxLogError(wxT("Can't load PNM image"));
     else
         my_horse_rawgrey_pnm = wxBitmap( image );
@@ -613,7 +613,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 #if wxUSE_LIBTIFF
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.tif"), wxBITMAP_TYPE_TIF ) )
+    if ( !image.LoadFile( dir + wxT("horse.tif"), wxBITMAP_TYPE_TIF ) )
         wxLogError(wxT("Can't load TIFF image"));
     else
         my_horse_tiff = wxBitmap( image );
@@ -622,7 +622,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 #if wxUSE_LIBTIFF
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.tga"), wxBITMAP_TYPE_TGA ) )
+    if ( !image.LoadFile( dir + wxT("horse.tga"), wxBITMAP_TYPE_TGA ) )
         wxLogError(wxT("Can't load TGA image"));
     else
         my_horse_tga = wxBitmap( image );
@@ -635,33 +635,33 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
 
     // demonstrates XPM automatically using the mask when saving
     if ( m_bmpSmileXpm.Ok() )
-        m_bmpSmileXpm.SaveFile(_T("saved.xpm"), wxBITMAP_TYPE_XPM);
+        m_bmpSmileXpm.SaveFile(wxT("saved.xpm"), wxBITMAP_TYPE_XPM);
 
 #if wxUSE_ICO_CUR
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.ico"), wxBITMAP_TYPE_ICO, 0 ) )
+    if ( !image.LoadFile( dir + wxT("horse.ico"), wxBITMAP_TYPE_ICO, 0 ) )
         wxLogError(wxT("Can't load first ICO image"));
     else
         my_horse_ico32 = wxBitmap( image );
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.ico"), wxBITMAP_TYPE_ICO, 1 ) )
+    if ( !image.LoadFile( dir + wxT("horse.ico"), wxBITMAP_TYPE_ICO, 1 ) )
         wxLogError(wxT("Can't load second ICO image"));
     else
         my_horse_ico16 = wxBitmap( image );
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.ico") ) )
+    if ( !image.LoadFile( dir + wxT("horse.ico") ) )
         wxLogError(wxT("Can't load best ICO image"));
     else
         my_horse_ico = wxBitmap( image );
 
     image.Destroy();
 
-    if ( !image.LoadFile( dir + _T("horse.cur"), wxBITMAP_TYPE_CUR ) )
+    if ( !image.LoadFile( dir + wxT("horse.cur"), wxBITMAP_TYPE_CUR ) )
         wxLogError(wxT("Can't load best ICO image"));
     else
     {
@@ -670,7 +670,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
         yH = 2420 + image.GetOptionInt(wxIMAGE_OPTION_CUR_HOTSPOT_Y) ;
     }
 
-    m_ani_images = wxImage::GetImageCount ( dir + _T("horse3.ani"), wxBITMAP_TYPE_ANI );
+    m_ani_images = wxImage::GetImageCount ( dir + wxT("horse3.ani"), wxBITMAP_TYPE_ANI );
     if (m_ani_images==0)
         wxLogError(wxT("No ANI-format images found"));
     else
@@ -679,7 +679,7 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
     for (i=0; i < m_ani_images; i++)
     {
         image.Destroy();
-        if (!image.LoadFile( dir + _T("horse3.ani"), wxBITMAP_TYPE_ANI, i ))
+        if (!image.LoadFile( dir + wxT("horse3.ani"), wxBITMAP_TYPE_ANI, i ))
         {
             wxString tmp = wxT("Can't load image number ");
             tmp << i ;
@@ -693,14 +693,14 @@ MyCanvas::MyCanvas( wxWindow *parent, wx
     image.Destroy();
 
     // test image loading from stream
-    wxFile file(dir + _T("horse.bmp"));
+    wxFile file(dir + wxT("horse.bmp"));
     if ( file.IsOpened() )
     {
         wxFileOffset len = file.Length();
         size_t dataSize = (size_t)len;
         void *data = malloc(dataSize);
         if ( file.Read(data, dataSize) != len )
-            wxLogError(_T("Reading bitmap file failed"));
+            wxLogError(wxT("Reading bitmap file failed"));
         else
         {
             wxMemoryInputStream mis(data, dataSize);
@@ -724,11 +724,11 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     wxPaintDC dc( this );
     PrepareDC( dc );
 
-    dc.DrawText( _T("Loaded image"), 30, 10 );
+    dc.DrawText( wxT("Loaded image"), 30, 10 );
     if (my_square.Ok())
         dc.DrawBitmap( my_square, 30, 30 );
 
-    dc.DrawText( _T("Drawn directly"), 150, 10 );
+    dc.DrawText( wxT("Drawn directly"), 150, 10 );
     dc.SetBrush( wxBrush( wxT("orange"), wxSOLID ) );
     dc.SetPen( *wxBLACK_PEN );
     dc.DrawRectangle( 150, 30, 100, 100 );
@@ -738,65 +738,65 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     if (my_anti.Ok())
         dc.DrawBitmap( my_anti, 280, 30 );
 
-    dc.DrawText( _T("PNG handler"), 30, 135 );
+    dc.DrawText( wxT("PNG handler"), 30, 135 );
     if (my_horse_png.Ok())
     {
         dc.DrawBitmap( my_horse_png, 30, 150 );
         wxRect rect(0,0,100,100);
         wxBitmap sub( my_horse_png.GetSubBitmap(rect) );
-        dc.DrawText( _T("GetSubBitmap()"), 280, 175 );
+        dc.DrawText( wxT("GetSubBitmap()"), 280, 175 );
         dc.DrawBitmap( sub, 280, 195 );
     }
 
-    dc.DrawText( _T("JPEG handler"), 30, 365 );
+    dc.DrawText( wxT("JPEG handler"), 30, 365 );
     if (my_horse_jpeg.Ok())
         dc.DrawBitmap( my_horse_jpeg, 30, 380 );
 
-    dc.DrawText( _T("Green rotated to red"), 280, 365 );
+    dc.DrawText( wxT("Green rotated to red"), 280, 365 );
     if (colorized_horse_jpeg.Ok())
         dc.DrawBitmap( colorized_horse_jpeg, 280, 380 );
 
-    dc.DrawText( _T("CMYK JPEG image"), 530, 365 );
+    dc.DrawText( wxT("CMYK JPEG image"), 530, 365 );
     if (my_cmyk_jpeg.Ok())
         dc.DrawBitmap( my_cmyk_jpeg, 530, 380 );
 
-    dc.DrawText( _T("GIF handler"), 30, 595 );
+    dc.DrawText( wxT("GIF handler"), 30, 595 );
     if (my_horse_gif.Ok())
         dc.DrawBitmap( my_horse_gif, 30, 610 );
 
-    dc.DrawText( _T("PCX handler"), 30, 825 );
+    dc.DrawText( wxT("PCX handler"), 30, 825 );
     if (my_horse_pcx.Ok())
         dc.DrawBitmap( my_horse_pcx, 30, 840 );
 
-    dc.DrawText( _T("BMP handler"), 30, 1055 );
+    dc.DrawText( wxT("BMP handler"), 30, 1055 );
     if (my_horse_bmp.Ok())
         dc.DrawBitmap( my_horse_bmp, 30, 1070 );
 
-    dc.DrawText( _T("BMP read from memory"), 280, 1055 );
+    dc.DrawText( wxT("BMP read from memory"), 280, 1055 );
     if (my_horse_bmp2.Ok())
         dc.DrawBitmap( my_horse_bmp2, 280, 1070 );
 
-    dc.DrawText( _T("PNM handler"), 30, 1285 );
+    dc.DrawText( wxT("PNM handler"), 30, 1285 );
     if (my_horse_pnm.Ok())
         dc.DrawBitmap( my_horse_pnm, 30, 1300 );
 
-    dc.DrawText( _T("PNM handler (ascii grey)"), 280, 1285 );
+    dc.DrawText( wxT("PNM handler (ascii grey)"), 280, 1285 );
     if (my_horse_asciigrey_pnm.Ok())
         dc.DrawBitmap( my_horse_asciigrey_pnm, 280, 1300 );
 
-    dc.DrawText( _T("PNM handler (raw grey)"), 530, 1285 );
+    dc.DrawText( wxT("PNM handler (raw grey)"), 530, 1285 );
     if (my_horse_rawgrey_pnm.Ok())
         dc.DrawBitmap( my_horse_rawgrey_pnm, 530, 1300 );
 
-    dc.DrawText( _T("TIFF handler"), 30, 1515 );
+    dc.DrawText( wxT("TIFF handler"), 30, 1515 );
     if (my_horse_tiff.Ok())
         dc.DrawBitmap( my_horse_tiff, 30, 1530 );
 
-    dc.DrawText( _T("TGA handler"), 30, 1745 );
+    dc.DrawText( wxT("TGA handler"), 30, 1745 );
     if (my_horse_tga.Ok())
         dc.DrawBitmap( my_horse_tga, 30, 1760 );
 
-    dc.DrawText( _T("XPM handler"), 30, 1975 );
+    dc.DrawText( wxT("XPM handler"), 30, 1975 );
     if (my_horse_xpm.Ok())
         dc.DrawBitmap( my_horse_xpm, 30, 2000 );
 
@@ -841,15 +841,15 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     {
         int x = 300, y = 1800;
 
-        dc.DrawText( _T("XBM bitmap"), x, y );
-        dc.DrawText( _T("(green on red)"), x, y + 15 );
-        dc.SetTextForeground( _T("GREEN") );
-        dc.SetTextBackground( _T("RED") );
+        dc.DrawText( wxT("XBM bitmap"), x, y );
+        dc.DrawText( wxT("(green on red)"), x, y + 15 );
+        dc.SetTextForeground( wxT("GREEN") );
+        dc.SetTextBackground( wxT("RED") );
         dc.DrawBitmap( my_smile_xbm, x, y + 30 );
 
         dc.SetTextForeground( *wxBLACK );
-        dc.DrawText( _T("After wxImage conversion"), x + 120, y );
-        dc.DrawText( _T("(red on white)"), x + 120, y + 15 );
+        dc.DrawText( wxT("After wxImage conversion"), x + 120, y );
+        dc.DrawText( wxT("(red on white)"), x + 120, y + 15 );
         dc.SetTextForeground( wxT("RED") );
         wxImage i = my_smile_xbm.ConvertToImage();
         i.SetMaskColour( 255, 255, 255 );
@@ -871,7 +871,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     memdc.SetTextForeground( *wxBLACK );
 #ifndef __WXGTK20__
     // I cannot convince GTK2 to draw into mono bitmaps
-    memdc.DrawText( _T("Hi!"), 5, 5 );
+    memdc.DrawText( wxT("Hi!"), 5, 5 );
 #endif
     memdc.SetBrush( *wxBLACK_BRUSH );
     memdc.DrawRectangle( 33,5,20,20 );
@@ -883,15 +883,15 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     {
         int x = 300, y = 1900;
 
-        dc.DrawText( _T("Mono bitmap"), x, y );
-        dc.DrawText( _T("(red on green)"), x, y + 15 );
+        dc.DrawText( wxT("Mono bitmap"), x, y );
+        dc.DrawText( wxT("(red on green)"), x, y + 15 );
         dc.SetTextForeground( wxT("RED") );
         dc.SetTextBackground( wxT("GREEN") );
         dc.DrawBitmap( mono, x, y + 30 );
 
         dc.SetTextForeground( *wxBLACK );
-        dc.DrawText( _T("After wxImage conversion"), x + 120, y );
-        dc.DrawText( _T("(red on white)"), x + 120, y + 15 );
+        dc.DrawText( wxT("After wxImage conversion"), x + 120, y );
+        dc.DrawText( wxT("(red on white)"), x + 120, y + 15 );
         dc.SetTextForeground( wxT("RED") );
         wxImage i = mono.ConvertToImage();
         i.SetMaskColour( 255,255,255 );
@@ -907,11 +907,11 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     dc.SetBrush( *wxRED_BRUSH );
     dc.DrawRectangle( 20, 2220, 560, 68 );
 
-    dc.DrawText(_T("XPM bitmap"), 30, 2230 );
+    dc.DrawText(wxT("XPM bitmap"), 30, 2230 );
     if ( m_bmpSmileXpm.Ok() )
         dc.DrawBitmap(m_bmpSmileXpm, 30, 2250, true);
 
-    dc.DrawText(_T("XPM icon"), 110, 2230 );
+    dc.DrawText(wxT("XPM icon"), 110, 2230 );
     if ( m_iconSmileXpm.Ok() )
         dc.DrawIcon(m_iconSmileXpm, 110, 2250);
 
@@ -919,19 +919,19 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     wxBitmap to_blit( m_iconSmileXpm );
     if (to_blit.Ok())
     {
-        dc.DrawText( _T("SubBitmap"), 170, 2230 );
+        dc.DrawText( wxT("SubBitmap"), 170, 2230 );
         wxBitmap sub = to_blit.GetSubBitmap( wxRect(0,0,15,15) );
         if (sub.Ok())
             dc.DrawBitmap( sub, 170, 2250, true );
 
-        dc.DrawText( _T("Enlarged"), 250, 2230 );
+        dc.DrawText( wxT("Enlarged"), 250, 2230 );
         dc.SetUserScale( 1.5, 1.5 );
         dc.DrawBitmap( to_blit, (int)(250/1.5), (int)(2250/1.5), true );
         dc.SetUserScale( 2, 2 );
         dc.DrawBitmap( to_blit, (int)(300/2), (int)(2250/2), true );
         dc.SetUserScale( 1.0, 1.0 );
 
-        dc.DrawText( _T("Blit"), 400, 2230);
+        dc.DrawText( wxT("Blit"), 400, 2230);
         wxMemoryDC blit_dc;
         blit_dc.SelectObject( to_blit );
         dc.Blit( 400, 2250, to_blit.GetWidth(), to_blit.GetHeight(), &blit_dc, 0, 0, wxCOPY, true );
@@ -942,19 +942,19 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
         dc.SetUserScale( 1.0, 1.0 );
     }
 
-    dc.DrawText( _T("ICO handler (1st image)"), 30, 2290 );
+    dc.DrawText( wxT("ICO handler (1st image)"), 30, 2290 );
     if (my_horse_ico32.Ok())
         dc.DrawBitmap( my_horse_ico32, 30, 2330, true );
 
-    dc.DrawText( _T("ICO handler (2nd image)"), 230, 2290 );
+    dc.DrawText( wxT("ICO handler (2nd image)"), 230, 2290 );
     if (my_horse_ico16.Ok())
         dc.DrawBitmap( my_horse_ico16, 230, 2330, true );
 
-    dc.DrawText( _T("ICO handler (best image)"), 430, 2290 );
+    dc.DrawText( wxT("ICO handler (best image)"), 430, 2290 );
     if (my_horse_ico.Ok())
         dc.DrawBitmap( my_horse_ico, 430, 2330, true );
 
-    dc.DrawText( _T("CUR handler"), 30, 2390 );
+    dc.DrawText( wxT("CUR handler"), 30, 2390 );
     if (my_horse_cur.Ok())
     {
         dc.DrawBitmap( my_horse_cur, 30, 2420, true );
@@ -963,7 +963,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
         dc.DrawLine (xH,yH-10,xH,yH+10);
     }
 
-    dc.DrawText( _T("ANI handler"), 230, 2390 );
+    dc.DrawText( wxT("ANI handler"), 230, 2390 );
     for ( int i=0; i < m_ani_images; i++ )
     {
         if (my_horse_ani[i].Ok())
@@ -985,8 +985,8 @@ void MyCanvas::CreateAntiAliasedBitmap()
 
   dc.SetFont( wxFont( 24, wxDECORATIVE, wxNORMAL, wxNORMAL) );
   dc.SetTextForeground( wxT("RED") );
-  dc.DrawText( _T("This is anti-aliased Text."), 20, 5 );
-  dc.DrawText( _T("And a Rectangle."), 20, 45 );
+  dc.DrawText( wxT("This is anti-aliased Text."), 20, 5 );
+  dc.DrawText( wxT("And a Rectangle."), 20, 45 );
 
   dc.SetBrush( *wxRED_BRUSH );
   dc.SetPen( *wxTRANSPARENT_PEN );
@@ -1049,28 +1049,28 @@ BEGIN_EVENT_TABLE(MyFrame,wxFrame)
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
-       : wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxImage sample"),
+       : wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxImage sample"),
                   wxPoint(20, 20), wxSize(950, 700) )
 {
   wxMenuBar *menu_bar = new wxMenuBar();
 
   wxMenu *menuImage = new wxMenu;
-  menuImage->Append( ID_NEW, _T("&Show any image...\tCtrl-O"));
+  menuImage->Append( ID_NEW, wxT("&Show any image...\tCtrl-O"));
 
 #ifdef wxHAVE_RAW_BITMAP
-  menuImage->Append( ID_SHOWRAW, _T("Test &raw bitmap...\tCtrl-R"));
+  menuImage->Append( ID_SHOWRAW, wxT("Test &raw bitmap...\tCtrl-R"));
 #endif
   menuImage->AppendSeparator();
-  menuImage->Append( ID_ABOUT, _T("&About..."));
+  menuImage->Append( ID_ABOUT, wxT("&About..."));
   menuImage->AppendSeparator();
-  menuImage->Append( ID_QUIT, _T("E&xit\tCtrl-Q"));
-  menu_bar->Append(menuImage, _T("&Image"));
+  menuImage->Append( ID_QUIT, wxT("E&xit\tCtrl-Q"));
+  menu_bar->Append(menuImage, wxT("&Image"));
 
 #if wxUSE_CLIPBOARD
   wxMenu *menuClipboard = new wxMenu;
-  menuClipboard->Append(wxID_COPY, _T("&Copy test image\tCtrl-C"));
-  menuClipboard->Append(wxID_PASTE, _T("&Paste image\tCtrl-V"));
-  menu_bar->Append(menuClipboard, _T("&Clipboard"));
+  menuClipboard->Append(wxID_COPY, wxT("&Copy test image\tCtrl-C"));
+  menuClipboard->Append(wxID_PASTE, wxT("&Paste image\tCtrl-V"));
+  menu_bar->Append(menuClipboard, wxT("&Clipboard"));
 #endif // wxUSE_CLIPBOARD
 
   SetMenuBar( menu_bar );
@@ -1094,22 +1094,22 @@ void MyFrame::OnQuit( wxCommandEvent &WX
 
 void MyFrame::OnAbout( wxCommandEvent &WXUNUSED(event) )
 {
-  (void)wxMessageBox( _T("wxImage demo\n")
-                      _T("Robert Roebling (c) 1998,2000"),
-                      _T("About wxImage Demo"), wxICON_INFORMATION | wxOK );
+  (void)wxMessageBox( wxT("wxImage demo\n")
+                      wxT("Robert Roebling (c) 1998,2000"),
+                      wxT("About wxImage Demo"), wxICON_INFORMATION | wxOK );
 }
 
 void MyFrame::OnNewFrame( wxCommandEvent &WXUNUSED(event) )
 {
 #if wxUSE_FILEDLG
-    wxString filename = wxFileSelector(_T("Select image file"));
+    wxString filename = wxFileSelector(wxT("Select image file"));
     if ( !filename )
         return;
 
     wxImage image;
     if ( !image.LoadFile(filename) )
     {
-        wxLogError(_T("Couldn't load image from '%s'."), filename.c_str());
+        wxLogError(wxT("Couldn't load image from '%s'."), filename.c_str());
 
         return;
     }
@@ -1138,7 +1138,7 @@ void MyFrame::OnCopy(wxCommandEvent& WXU
 
     if ( !wxTheClipboard->SetData(dobjBmp) )
     {
-        wxLogError(_T("Failed to copy bitmap to clipboard"));
+        wxLogError(wxT("Failed to copy bitmap to clipboard"));
     }
 
     wxTheClipboard->Close();
@@ -1151,7 +1151,7 @@ void MyFrame::OnPaste(wxCommandEvent& WX
     wxTheClipboard->Open();
     if ( !wxTheClipboard->GetData(dobjBmp) )
     {
-        wxLogMessage(_T("No bitmap data in the clipboard"));
+        wxLogMessage(wxT("No bitmap data in the clipboard"));
     }
     else
     {
--- samples/png/pngdemo.cpp-orig	2009-06-18 18:45:58.859609000 -0500
+++ samples/png/pngdemo.cpp	2009-06-18 18:46:05.208400000 -0500
@@ -30,7 +30,7 @@ bool MyApp::OnInit(void)
   wxImage::AddHandler(new wxPNGHandler);
 
   // Create the main frame window
-  frame = new MyFrame((wxFrame *) NULL, _T("wxPNGBitmap Demo"), wxPoint(0, 0), wxSize(300, 300));
+  frame = new MyFrame((wxFrame *) NULL, wxT("wxPNGBitmap Demo"), wxPoint(0, 0), wxSize(300, 300));
 
 #if wxUSE_STATUSBAR
   // Give it a status line
@@ -41,15 +41,15 @@ bool MyApp::OnInit(void)
   wxMenu *file_menu = new wxMenu;
   wxMenu *help_menu = new wxMenu;
 
-  file_menu->Append(PNGDEMO_LOAD_FILE, _T("&Load file"),                _T("Load file"));
-  file_menu->Append(PNGDEMO_SAVE_FILE, _T("&Save file"),                _T("Save file"));
-  file_menu->Append(PNGDEMO_QUIT, _T("E&xit"),                _T("Quit program"));
-  help_menu->Append(PNGDEMO_ABOUT, _T("&About"),              _T("About PNG demo"));
+  file_menu->Append(PNGDEMO_LOAD_FILE, wxT("&Load file"),                wxT("Load file"));
+  file_menu->Append(PNGDEMO_SAVE_FILE, wxT("&Save file"),                wxT("Save file"));
+  file_menu->Append(PNGDEMO_QUIT, wxT("E&xit"),                wxT("Quit program"));
+  help_menu->Append(PNGDEMO_ABOUT, wxT("&About"),              wxT("About PNG demo"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
-  menu_bar->Append(help_menu, _T("&Help"));
+  menu_bar->Append(file_menu, wxT("&File"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   // Associate the menu bar with the frame
   frame->SetMenuBar(menu_bar);
@@ -63,7 +63,7 @@ bool MyApp::OnInit(void)
   frame->Show(true);
 
 #if wxUSE_STATUSBAR
-  frame->SetStatusText(_T("Hello, wxWidgets"));
+  frame->SetStatusText(wxT("Hello, wxWidgets"));
 #endif // wxUSE_STATUSBAR
 
   return true;
@@ -100,8 +100,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    (void)wxMessageBox(_T("PNG demo\nJulian Smart (c) 1998"),
-            _T("About PNG Demo"), wxOK);
+    (void)wxMessageBox(wxT("PNG demo\nJulian Smart (c) 1998"),
+            wxT("About PNG Demo"), wxOK);
 }
 
 void MyFrame::OnSaveFile(wxCommandEvent& WXUNUSED(event))
@@ -124,7 +124,7 @@ void MyFrame::OnSaveFile(wxCommandEvent&
     memDC.SetPen( *wxBLACK_PEN );
     memDC.DrawLine( 0, 0, 0, 10 );
     memDC.SetTextForeground( *wxWHITE );
-    memDC.DrawText( _T("This is a memory dc."), 10, 10 );
+    memDC.DrawText( wxT("This is a memory dc."), 10, 10 );
 
     memDC.SelectObject( wxNullBitmap );
 
--- samples/popup/popup.cpp-orig	2009-06-18 18:46:12.158147000 -0500
+++ samples/popup/popup.cpp	2009-06-18 18:46:18.692847000 -0500
@@ -290,7 +290,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    m_frame = new MyFrame(_T("Popup wxWidgets App"));
+    m_frame = new MyFrame(wxT("Popup wxWidgets App"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -326,15 +326,15 @@ MyFrame::MyFrame(const wxString& title)
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Minimal_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->Append(Minimal_TestDialog, _T("&Test dialog\tAlt-T"), _T("Test dialog"));
-    menuFile->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Minimal_TestDialog, wxT("&Test dialog\tAlt-T"), wxT("Test dialog"));
+    menuFile->Append(Minimal_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -343,7 +343,7 @@ MyFrame::MyFrame(const wxString& title)
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 
     wxPanel *panel = new wxPanel(this, -1);
@@ -417,10 +417,10 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the popup sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the popup sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About Popup"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About Popup"), wxOK | wxICON_INFORMATION, this);
 }
 
 // ----------------------------------------------------------------------------
--- samples/wizard/wizard.cpp-orig	2009-06-18 18:45:46.542238000 -0500
+++ samples/wizard/wizard.cpp	2009-06-18 18:45:52.207099000 -0500
@@ -121,13 +121,13 @@ public:
     {
         m_bitmap = wxBitmap(wiztest2_xpm);
 
-        m_checkbox = new wxCheckBox(this, wxID_ANY, _T("&Check me"));
+        m_checkbox = new wxCheckBox(this, wxID_ANY, wxT("&Check me"));
 
         wxBoxSizer *mainSizer = new wxBoxSizer(wxVERTICAL);
         mainSizer->Add(
             new wxStaticText(this, wxID_ANY,
-                             _T("You need to check the checkbox\n")
-                             _T("below before going to the next page\n")),
+                             wxT("You need to check the checkbox\n")
+                             wxT("below before going to the next page\n")),
             0,
             wxALL,
             5
@@ -147,7 +147,7 @@ public:
     {
         if ( !m_checkbox->GetValue() )
         {
-            wxMessageBox(_T("Check the checkbox first!"), _T("No way"),
+            wxMessageBox(wxT("Check the checkbox first!"), wxT("No way"),
                          wxICON_WARNING | wxOK, this);
 
             return false;
@@ -178,12 +178,12 @@ public:
         //        static wxString choices[] = { "forward", "backward", "both", "neither" };
         // The above syntax can cause an internal compiler error with gcc.
         wxString choices[4];
-        choices[0] = _T("forward");
-        choices[1] = _T("backward");
-        choices[2] = _T("both");
-        choices[3] = _T("neither");
+        choices[0] = wxT("forward");
+        choices[1] = wxT("backward");
+        choices[2] = wxT("both");
+        choices[3] = wxT("neither");
 
-        m_radio = new wxRadioBox(this, wxID_ANY, _T("Allow to proceed:"),
+        m_radio = new wxRadioBox(this, wxID_ANY, wxT("Allow to proceed:"),
                                  wxDefaultPosition, wxDefaultSize,
                                  WXSIZEOF(choices), choices,
                                  1, wxRA_SPECIFY_COLS);
@@ -204,7 +204,7 @@ public:
     // wizard event handlers
     void OnWizardCancel(wxWizardEvent& event)
     {
-        if ( wxMessageBox(_T("Do you really want to cancel?"), _T("Question"),
+        if ( wxMessageBox(wxT("Do you really want to cancel?"), wxT("Question"),
                           wxICON_QUESTION | wxYES_NO, this) != wxYES )
         {
             // not confirmed
@@ -225,7 +225,7 @@ public:
         if ( !event.GetDirection() && sel == Backward )
             return;
 
-        wxMessageBox(_T("You can't go there"), _T("Not allowed"),
+        wxMessageBox(wxT("You can't go there"), wxT("Not allowed"),
                      wxICON_WARNING | wxOK, this);
 
         event.Veto();
@@ -252,14 +252,14 @@ public:
         wxBoxSizer *mainSizer = new wxBoxSizer(wxVERTICAL);
 
         mainSizer->Add(
-            new wxStaticText(this, wxID_ANY, _T("Try checking the box below and\n")
-                                       _T("then going back and clearing it")),
+            new wxStaticText(this, wxID_ANY, wxT("Try checking the box below and\n")
+                                       wxT("then going back and clearing it")),
             0, // No vertical stretching
             wxALL,
             5 // Border width
         );
 
-        m_checkbox = new wxCheckBox(this, wxID_ANY, _T("&Skip the next page"));
+        m_checkbox = new wxCheckBox(this, wxID_ANY, wxT("&Skip the next page"));
         mainSizer->Add(
             m_checkbox,
             0, // No vertical stretching
@@ -270,16 +270,16 @@ public:
 #if wxUSE_CHECKLISTBOX
         static const wxChar *aszChoices[] =
         {
-            _T("Zeroth"),
-            _T("First"),
-            _T("Second"),
-            _T("Third"),
-            _T("Fourth"),
-            _T("Fifth"),
-            _T("Sixth"),
-            _T("Seventh"),
-            _T("Eighth"),
-            _T("Nineth")
+            wxT("Zeroth"),
+            wxT("First"),
+            wxT("Second"),
+            wxT("Third"),
+            wxT("Fourth"),
+            wxT("Fifth"),
+            wxT("Sixth"),
+            wxT("Seventh"),
+            wxT("Eighth"),
+            wxT("Nineth")
         };
 
         m_checklistbox = new wxCheckListBox
@@ -353,7 +353,7 @@ IMPLEMENT_APP(MyApp)
 // `Main program' equivalent: the program execution "starts" here
 bool MyApp::OnInit()
 {
-    MyFrame *frame = new MyFrame(_T("wxWizard Sample"));
+    MyFrame *frame = new MyFrame(wxT("wxWizard Sample"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -368,7 +368,7 @@ bool MyApp::OnInit()
 // ----------------------------------------------------------------------------
 
 MyWizard::MyWizard(wxFrame *frame, bool useSizer)
-        : wxWizard(frame,wxID_ANY,_T("Absolutely Useless Wizard"),
+        : wxWizard(frame,wxID_ANY,wxT("Absolutely Useless Wizard"),
                    wxBitmap(wiztest_xpm),wxDefaultPosition,
                    wxDEFAULT_DIALOG_STYLE | wxRESIZE_BORDER)
 {
@@ -376,9 +376,9 @@ MyWizard::MyWizard(wxFrame *frame, bool 
     m_page1 = new wxWizardPageSimple(this);
 
     /* wxStaticText *text = */ new wxStaticText(m_page1, wxID_ANY,
-             _T("This wizard doesn't help you\nto do anything at all.\n")
-             _T("\n")
-             _T("The next pages will present you\nwith more useless controls."),
+             wxT("This wizard doesn't help you\nto do anything at all.\n")
+             wxT("\n")
+             wxT("The next pages will present you\nwith more useless controls."),
              wxPoint(5,5)
         );
 
@@ -412,19 +412,19 @@ MyFrame::MyFrame(const wxString& title)
                   wxDefaultPosition, wxSize(250, 150))  // small frame
 {
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Wizard_RunModal, _T("&Run wizard modal...\tCtrl-R"));
-    menuFile->Append(Wizard_RunNoSizer, _T("Run wizard &without sizer..."));
-    menuFile->Append(Wizard_RunModeless, _T("Run wizard &modeless..."));
+    menuFile->Append(Wizard_RunModal, wxT("&Run wizard modal...\tCtrl-R"));
+    menuFile->Append(Wizard_RunNoSizer, wxT("Run wizard &without sizer..."));
+    menuFile->Append(Wizard_RunModeless, wxT("Run wizard &modeless..."));
     menuFile->AppendSeparator();
-    menuFile->Append(Wizard_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Wizard_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Wizard_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Wizard_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -443,9 +443,9 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Demo of wxWizard class\n")
-                 _T("(c) 1999, 2000 Vadim Zeitlin"),
-                 _T("About wxWizard sample"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(wxT("Demo of wxWizard class\n")
+                 wxT("(c) 1999, 2000 Vadim Zeitlin"),
+                 wxT("About wxWizard sample"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnRunWizard(wxCommandEvent& WXUNUSED(event))
--- samples/mobile/wxedit/wxedit.cpp-orig	2009-06-18 18:45:18.881481000 -0500
+++ samples/mobile/wxedit/wxedit.cpp	2009-06-18 18:45:24.121232000 -0500
@@ -56,7 +56,7 @@ MyFrame::MyFrame( wxWindow *parent, wxWi
     CreateMyMenuBar();
 #if wxUSE_STATUSBAR
     CreateStatusBar(1);
-    SetStatusText( _T("Welcome to wxEdit!") );
+    SetStatusText( wxT("Welcome to wxEdit!") );
 #endif // wxUSE_STATUSBAR
 
     // Create edit control. Since it is the only
@@ -68,12 +68,12 @@ MyFrame::MyFrame( wxWindow *parent, wxWi
     wxConfig *conf = (wxConfig*) wxConfig::Get();
 
     int entries = 0;
-    conf->Read( _T("/History/Count"), &entries );
+    conf->Read( wxT("/History/Count"), &entries );
 
     for (int i = 0; i < entries; i++)
     {
         wxString tmp;
-        tmp.Printf( _T("/History/File%d"), (int)i );
+        tmp.Printf( wxT("/History/File%d"), (int)i );
 
         wxString res;
         conf->Read( tmp, &res );
@@ -121,31 +121,31 @@ void MyFrame::AddToHistory( const wxStri
 void MyFrame::CreateMyMenuBar()
 {
     wxMenu *file_menu = new wxMenu;
-    file_menu->Append( ID_ABOUT, _T("About..."), _T("Program info") );
+    file_menu->Append( ID_ABOUT, wxT("About..."), wxT("Program info") );
     file_menu->AppendSeparator();
-    file_menu->Append( ID_NEW, _T("New..."), _T("New text") );
-    file_menu->Append( ID_OPEN, _T("Open..."), _T("Open text") );
-    file_menu->Append( ID_SAVE, _T("Save"), _T("Save text") );
-    file_menu->Append( ID_SAVEAS, _T("Save as..."), _T("Save text as...") );
+    file_menu->Append( ID_NEW, wxT("New..."), wxT("New text") );
+    file_menu->Append( ID_OPEN, wxT("Open..."), wxT("Open text") );
+    file_menu->Append( ID_SAVE, wxT("Save"), wxT("Save text") );
+    file_menu->Append( ID_SAVEAS, wxT("Save as..."), wxT("Save text as...") );
     file_menu->AppendSeparator();
-    file_menu->Append( ID_QUIT, _T("Quit..."), _T("Quit program") );
+    file_menu->Append( ID_QUIT, wxT("Quit..."), wxT("Quit program") );
 
     wxMenu *edit_menu = new wxMenu;
-    edit_menu->Append( ID_COPY, _T("Copy") );
-    edit_menu->Append( ID_CUT, _T("Cut") );
-    edit_menu->Append( ID_PASTE, _T("Paste") );
+    edit_menu->Append( ID_COPY, wxT("Copy") );
+    edit_menu->Append( ID_CUT, wxT("Cut") );
+    edit_menu->Append( ID_PASTE, wxT("Paste") );
     edit_menu->AppendSeparator();
-    edit_menu->Append( ID_DELETE, _T("Delete") );
+    edit_menu->Append( ID_DELETE, wxT("Delete") );
 
     wxMenu *history_menu = new wxMenu;
-    history_menu->Append( ID_LAST_1, _T("No file.") );
-    history_menu->Append( ID_LAST_2, _T("No file.") );
-    history_menu->Append( ID_LAST_3, _T("No file.") );
+    history_menu->Append( ID_LAST_1, wxT("No file.") );
+    history_menu->Append( ID_LAST_2, wxT("No file.") );
+    history_menu->Append( ID_LAST_3, wxT("No file.") );
 
     wxMenuBar *menu_bar = new wxMenuBar();
-    menu_bar->Append( file_menu, _T("&File") );
-    menu_bar->Append( edit_menu, _T("&Edit") );
-    menu_bar->Append( history_menu, _T("&History") );
+    menu_bar->Append( file_menu, wxT("&File") );
+    menu_bar->Append( edit_menu, wxT("&Edit") );
+    menu_bar->Append( history_menu, wxT("&History") );
 
     SetMenuBar( menu_bar );
 }
@@ -189,8 +189,8 @@ void MyFrame::OnLastFiles( wxCommandEven
     else
     {
         wxMessageBox(
-            _T("This entry is empty. It should be filled once you will start opening."),
-            _T("Empty entry"),
+            wxT("This entry is empty. It should be filled once you will start opening."),
+            wxT("Empty entry"),
             wxOK | wxICON_INFORMATION,
             this
         );
@@ -218,8 +218,8 @@ void MyFrame::OnOpen( wxCommandEvent& WX
 #if wxUSE_FILEDLG
     if (!Discard()) return;
 
-    wxFileDialog dialog( this, _T("Open text"), wxEmptyString, wxEmptyString,
-        _T("Text file (*.txt)|*.txt|Any file (*)|*"),
+    wxFileDialog dialog( this, wxT("Open text"), wxEmptyString, wxEmptyString,
+        wxT("Text file (*.txt)|*.txt|Any file (*)|*"),
         wxFD_OPEN|wxFD_FILE_MUST_EXIST );
     if (dialog.ShowModal() == wxID_OK)
     {
@@ -229,22 +229,22 @@ void MyFrame::OnOpen( wxCommandEvent& WX
         // requires wxUSE_UNIV_TEXTCTRL to be set to 0
 #if 0
         wxFileName fname( dialog.GetPath() );
-        if ((fname.GetExt() == _T("cpp")) ||
-            (fname.GetExt() == _T("c")) ||
-            (fname.GetExt() == _T("h")) ||
-            (fname.GetExt() == _T("cxx")) ||
-            (fname.GetExt() == _T("hxx")))
+        if ((fname.GetExt() == wxT("cpp")) ||
+            (fname.GetExt() == wxT("c")) ||
+            (fname.GetExt() == wxT("h")) ||
+            (fname.GetExt() == wxT("cxx")) ||
+            (fname.GetExt() == wxT("hxx")))
         {
             m_text->SetLanguage( wxSOURCE_LANG_CPP );
         }
         else
-        if (fname.GetExt() == _T("py"))
+        if (fname.GetExt() == wxT("py"))
         {
             m_text->SetLanguage( wxSOURCE_LANG_PYTHON );
         }
         else
-        if ((fname.GetExt() == _T("pl")) ||
-            (fname.GetExt() == _T("pm")))
+        if ((fname.GetExt() == wxT("pl")) ||
+            (fname.GetExt() == wxT("pm")))
         {
             m_text->SetLanguage( wxSOURCE_LANG_PYTHON );
         }
@@ -273,8 +273,8 @@ void MyFrame::OnSave( wxCommandEvent& WX
 void MyFrame::OnSaveAs( wxCommandEvent& WXUNUSED(event) )
 {
 #if wxUSE_FILEDLG
-    wxFileDialog dialog( this, _T("Open text"), wxEmptyString, wxEmptyString,
-        _T("Text file (*.txt)|*.txt|Any file (*)|*"),
+    wxFileDialog dialog( this, wxT("Open text"), wxEmptyString, wxEmptyString,
+        wxT("Text file (*.txt)|*.txt|Any file (*)|*"),
         wxFD_SAVE|wxFD_OVERWRITE_PROMPT );
     if (dialog.ShowModal() == wxID_OK)
     {
@@ -290,8 +290,8 @@ void MyFrame::OnSaveAs( wxCommandEvent& 
 
 void MyFrame::OnAbout( wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageDialog dialog( this, _T("Welcome to wxEdit\n(C)opyright Robert Roebling"),
-        _T("About wxEdit"), wxOK|wxICON_INFORMATION );
+    wxMessageDialog dialog( this, wxT("Welcome to wxEdit\n(C)opyright Robert Roebling"),
+        wxT("About wxEdit"), wxOK|wxICON_INFORMATION );
     dialog.ShowModal();
 }
 
@@ -316,8 +316,8 @@ bool MyFrame::Discard()
 {
     if (m_text->IsModified())
     {
-        wxMessageDialog dialog( this, _T("Text has been\nmodified! Save?"),
-            _T("wxEdit"), wxYES_NO|wxCANCEL|wxICON_EXCLAMATION );
+        wxMessageDialog dialog( this, wxT("Text has been\nmodified! Save?"),
+            wxT("wxEdit"), wxYES_NO|wxCANCEL|wxICON_EXCLAMATION );
 
         int ret = dialog.ShowModal();
 
@@ -379,12 +379,12 @@ void MyFrame::OnCloseWindow( wxCloseEven
     if (m_history.GetCount() < (size_t)max)
         max = m_history.GetCount();
 
-    conf->Write( _T("/History/Count"), max );
+    conf->Write( wxT("/History/Count"), max );
 
     for (int i = 0; i < max; i++)
     {
         wxString tmp;
-        tmp.Printf( _T("/History/File%d"), (int)i );
+        tmp.Printf( wxT("/History/File%d"), (int)i );
 
         conf->Write( tmp, m_history[(size_t)i] );
     }
@@ -404,10 +404,10 @@ IMPLEMENT_APP(MyApp)
 
 bool MyApp::OnInit()
 {
-    SetVendorName(_T("Free world"));
-    SetAppName(_T("wxEdit"));
+    SetVendorName(wxT("Free world"));
+    SetAppName(wxT("wxEdit"));
 
-    MyFrame *frame = new MyFrame( NULL, wxID_ANY, _T("wxEdit"), wxPoint(20,20), wxSize(500,340) );
+    MyFrame *frame = new MyFrame( NULL, wxID_ANY, wxT("wxEdit"), wxPoint(20,20), wxSize(500,340) );
     frame->Show( true );
 
     return true;
--- samples/mobile/styles/styles.cpp-orig	2009-06-18 18:45:03.315671000 -0500
+++ samples/mobile/styles/styles.cpp	2009-06-18 18:45:10.369018000 -0500
@@ -35,31 +35,31 @@ MyFrame::MyFrame( wxWindow *parent, wxWi
     CreateMyMenuBar();
 #if wxUSE_STATUSBAR
     CreateStatusBar(1);
-    SetStatusText( _T("Welcome to Styles!") );
+    SetStatusText( wxT("Welcome to Styles!") );
 #endif // wxUSE_STATUSBAR
 
     wxImage image;
-    image.LoadFile( _T("marble.jpg"), wxBITMAP_TYPE_JPEG );
+    image.LoadFile( wxT("marble.jpg"), wxBITMAP_TYPE_JPEG );
 
     wxBitmap bitmap( image );
 #ifdef __WXUNIVERSAL__
     SetBackground( bitmap, 0, wxTILE );
 #endif
 
-    new wxStaticText( this, wxID_ANY, _T("This is text"), wxPoint( 20,50 ) );
+    new wxStaticText( this, wxID_ANY, wxT("This is text"), wxPoint( 20,50 ) );
 
-    new wxCheckBox( this, wxID_ANY, _T("This is a checkbox"), wxPoint( 20,70 ) );
+    new wxCheckBox( this, wxID_ANY, wxT("This is a checkbox"), wxPoint( 20,70 ) );
 }
 
 void MyFrame::CreateMyMenuBar()
 {
     wxMenu *file_menu = new wxMenu;
-    file_menu->Append( ID_ABOUT, _T("About..."), _T("Program info") );
+    file_menu->Append( ID_ABOUT, wxT("About..."), wxT("Program info") );
     file_menu->AppendSeparator();
-    file_menu->Append( ID_QUIT, _T("Quit..."), _T("Quit program") );
+    file_menu->Append( ID_QUIT, wxT("Quit..."), wxT("Quit program") );
 
     wxMenuBar *menu_bar = new wxMenuBar();
-    menu_bar->Append( file_menu, _T("&File") );
+    menu_bar->Append( file_menu, wxT("&File") );
 
     SetMenuBar( menu_bar );
 }
@@ -88,10 +88,10 @@ bool MyApp::OnInit()
 {
     wxInitAllImageHandlers();
 
-    SetVendorName(_T("Free world"));
-    SetAppName(_T("Styles"));
+    SetVendorName(wxT("Free world"));
+    SetAppName(wxT("Styles"));
 
-    MyFrame *frame = new MyFrame( NULL, wxID_ANY, _T("Styles"), wxPoint(20,20), wxSize(500,340) );
+    MyFrame *frame = new MyFrame( NULL, wxID_ANY, wxT("Styles"), wxPoint(20,20), wxSize(500,340) );
     frame->Show( true );
 
     return true;
--- samples/display/display.cpp-orig	2009-06-18 18:45:32.909970000 -0500
+++ samples/display/display.cpp	2009-06-18 18:45:39.144646000 -0500
@@ -168,9 +168,9 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
 #ifdef __WXMSW__
-    if ( argc == 2 && !wxStricmp(argv[1],  _T("/dx")) )
+    if ( argc == 2 && !wxStricmp(argv[1],  wxT("/dx")) )
     {
-        wxSystemOptions::SetOption(_T("msw.display.directdraw"), 1);
+        wxSystemOptions::SetOption(wxT("msw.display.directdraw"), 1);
     }
 #endif // __WXMSW__
 
@@ -242,35 +242,35 @@ MyFrame::MyFrame(const wxString& title, 
         sizer->AddGrowableCol(1);
 
         const wxRect r(display.GetGeometry());
-        sizer->Add(new wxStaticText(page, wxID_ANY, _T("Origin: ")));
+        sizer->Add(new wxStaticText(page, wxID_ANY, wxT("Origin: ")));
         sizer->Add(new wxStaticText
                        (
                         page,
                         wxID_ANY,
-                        wxString::Format(_T("(%d, %d)"),
+                        wxString::Format(wxT("(%d, %d)"),
                                          r.x, r.y)
                        ));
 
-        sizer->Add(new wxStaticText(page, wxID_ANY, _T("Size: ")));
+        sizer->Add(new wxStaticText(page, wxID_ANY, wxT("Size: ")));
         sizer->Add(new wxStaticText
                        (
                         page,
                         wxID_ANY,
-                        wxString::Format(_T("(%d, %d)"),
+                        wxString::Format(wxT("(%d, %d)"),
                                          r.width, r.height)
                        ));
 
         const wxRect rc(display.GetClientArea());
-        sizer->Add(new wxStaticText(page, wxID_ANY, _T("Client area: ")));
+        sizer->Add(new wxStaticText(page, wxID_ANY, wxT("Client area: ")));
         sizer->Add(new wxStaticText
                        (
                         page,
                         wxID_ANY,
-                        wxString::Format(_T("(%d, %d)-(%d, %d)"),
+                        wxString::Format(wxT("(%d, %d)-(%d, %d)"),
                                          rc.x, rc.y, rc.width, rc.height)
                        ));
 
-        sizer->Add(new wxStaticText(page, wxID_ANY, _T("Name: ")));
+        sizer->Add(new wxStaticText(page, wxID_ANY, wxT("Name: ")));
         sizer->Add(new wxStaticText(page, wxID_ANY, display.GetName()));
 
         wxSizer *sizerTop = new wxBoxSizer(wxVERTICAL);
@@ -288,22 +288,22 @@ MyFrame::MyFrame(const wxString& title, 
                                 new MyVideoModeClientData(mode));
         }
 
-        sizer->Add(new wxStaticText(page, wxID_ANY, _T("&Modes: ")));
+        sizer->Add(new wxStaticText(page, wxID_ANY, wxT("&Modes: ")));
         sizer->Add(choiceModes, 0, wxEXPAND);
 
-        sizer->Add(new wxStaticText(page, wxID_ANY, _T("Current: ")));
+        sizer->Add(new wxStaticText(page, wxID_ANY, wxT("Current: ")));
         sizer->Add(new wxStaticText(page, Display_CurrentMode,
                                     VideoModeToText(display.GetCurrentMode())));
 
         // add it to another sizer to have borders around it and button below
-        sizerTop->Add(new wxButton(page, Display_ResetMode, _T("&Reset mode")),
+        sizerTop->Add(new wxButton(page, Display_ResetMode, wxT("&Reset mode")),
                       0, wxALL | wxCENTRE, 5);
 #endif // wxUSE_DISPLAY
 
         page->SetSizer(sizerTop);
 
         m_book->AddPage(page,
-                        wxString::Format(_T("Display %lu"),
+                        wxString::Format(wxT("Display %lu"),
                                          (unsigned long)nDpy));
     }
 
@@ -319,16 +319,16 @@ MyFrame::MyFrame(const wxString& title, 
 wxString MyFrame::VideoModeToText(const wxVideoMode& mode)
 {
     wxString s;
-    s.Printf(_T("%dx%d"), mode.w, mode.h);
+    s.Printf(wxT("%dx%d"), mode.w, mode.h);
 
     if ( mode.bpp )
     {
-        s += wxString::Format(_T(", %dbpp"), mode.bpp);
+        s += wxString::Format(wxT(", %dbpp"), mode.bpp);
     }
 
     if ( mode.refresh )
     {
-        s += wxString::Format(_T(", %dHz"), mode.refresh);
+        s += wxString::Format(wxT(", %dHz"), mode.refresh);
     }
 
     return s;
@@ -346,8 +346,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Demo program for wxDisplay class.\n\n(c) 2003-2006 Vadim Zeitlin"),
-                 _T("About Display Sample"),
+    wxMessageBox(wxT("Demo program for wxDisplay class.\n\n(c) 2003-2006 Vadim Zeitlin"),
+                 wxT("About Display Sample"),
                  wxOK | wxICON_INFORMATION,
                  this);
 }
@@ -355,7 +355,7 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 void MyFrame::OnFromPoint(wxCommandEvent& WXUNUSED(event))
 {
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("Press the mouse anywhere..."));
+    SetStatusText(wxT("Press the mouse anywhere..."));
 #endif // wxUSE_STATUSBAR
 
     CaptureMouse();
@@ -377,7 +377,7 @@ void MyFrame::OnChangeMode(wxCommandEven
                 wxDynamicCast(event.GetEventObject(), wxChoice)->
                     GetClientObject(event.GetInt()))->mode) )
     {
-        wxLogError(_T("Changing video mode failed!"));
+        wxLogError(wxT("Changing video mode failed!"));
     }
 }
 
@@ -399,10 +399,10 @@ void MyFrame::OnLeftClick(wxMouseEvent& 
         int dpy = wxDisplay::GetFromPoint(ptScreen);
         if ( dpy == wxNOT_FOUND )
         {
-            wxLogError(_T("Mouse clicked outside of display!?"));
+            wxLogError(wxT("Mouse clicked outside of display!?"));
         }
 
-        wxLogStatus(this, _T("Mouse clicked in display %d (at (%d, %d))"),
+        wxLogStatus(this, wxT("Mouse clicked in display %d (at (%d, %d))"),
                     dpy, ptScreen.x, ptScreen.y);
 
         ReleaseMouse();
@@ -424,7 +424,7 @@ void MyFrame::OnDisplayChanged(wxDisplay
     }
 
 
-    wxLogStatus(this, _T("Display resolution was changed."));
+    wxLogStatus(this, wxT("Display resolution was changed."));
 
     event.Skip();
 }
--- samples/collpane/collpane.cpp-orig	2009-06-18 18:44:42.763115000 -0500
+++ samples/collpane/collpane.cpp	2009-06-18 18:44:49.030563000 -0500
@@ -151,7 +151,7 @@ END_EVENT_TABLE()
 
 // My frame constructor
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("wxCollapsiblePane sample"),
+       : wxFrame(NULL, wxID_ANY, wxT("wxCollapsiblePane sample"),
                  wxDefaultPosition, wxSize(420, 300),
                  wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE)
 {
@@ -161,12 +161,12 @@ MyFrame::MyFrame()
 
     // Make a menubar
     wxMenu *paneMenu = new wxMenu;
-    paneMenu->Append(PANE_COLLAPSE, _T("Collapse\tCtrl-C"));
-    paneMenu->Append(PANE_EXPAND, _T("Expand\tCtrl-E"));
+    paneMenu->Append(PANE_COLLAPSE, wxT("Collapse\tCtrl-C"));
+    paneMenu->Append(PANE_EXPAND, wxT("Expand\tCtrl-E"));
     paneMenu->AppendSeparator();
-    paneMenu->Append(PANE_SETLABEL, _T("Set label...\tCtrl-S"));
+    paneMenu->Append(PANE_SETLABEL, wxT("Set label...\tCtrl-S"));
     paneMenu->AppendSeparator();
-    paneMenu->Append(PANE_SHOWDLG, _T("Show dialog...\tCtrl-S"));
+    paneMenu->Append(PANE_SHOWDLG, wxT("Show dialog...\tCtrl-S"));
     paneMenu->AppendSeparator();
     paneMenu->Append(PANE_QUIT);
 
@@ -174,8 +174,8 @@ MyFrame::MyFrame()
     helpMenu->Append(PANE_ABOUT);
 
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(paneMenu, _T("&Pane"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(paneMenu, wxT("&Pane"));
+    menuBar->Append(helpMenu, wxT("&Help"));
     SetMenuBar(menuBar);
 
     m_collPane = new wxCollapsiblePane(this, -1, wxT("test!"));
@@ -225,7 +225,7 @@ void MyFrame::OnAbout(wxCommandEvent& WX
     wxAboutDialogInfo info;
     info.SetName(_("wxCollapsiblePane sample"));
     info.SetDescription(_("This sample program demonstrates usage of wxCollapsiblePane"));
-    info.SetCopyright(_T("(C) 2006 Francesco Montorsi <frm@users.sourceforge.net>"));
+    info.SetCopyright(wxT("(C) 2006 Francesco Montorsi <frm@users.sourceforge.net>"));
 
     wxAboutBox(info);
 }
--- samples/config/conftest.cpp-orig	2009-06-18 18:44:27.751884000 -0500
+++ samples/config/conftest.cpp	2009-06-18 18:44:33.743997000 -0500
@@ -95,8 +95,8 @@ bool MyApp::OnInit()
   // of the config file/registry key and must be set before the first call
   // to Get() if you want to override the default values (the application
   // name is the name of the executable and the vendor name is the same)
-  SetVendorName(_T("wxWidgets"));
-  SetAppName(_T("conftest")); // not needed, it's the default value
+  SetVendorName(wxT("wxWidgets"));
+  SetAppName(wxT("conftest")); // not needed, it's the default value
 
   wxConfigBase *pConfig = wxConfigBase::Get();
 
@@ -118,11 +118,11 @@ bool MyApp::OnInit()
   SetTopWindow(frame);
 
   // use our config object...
-  if ( pConfig->Read(_T("/Controls/Check"), 1l) != 0 ) {
-      wxMessageBox(_T("You can disable this message box by unchecking\n")
-                   _T("the checkbox in the main window (of course, a real\n")
-                   _T("program would have a checkbox right here but we\n")
-                 _T("keep it simple)"), _T("Welcome to wxConfig demo"),
+  if ( pConfig->Read(wxT("/Controls/Check"), 1l) != 0 ) {
+      wxMessageBox(wxT("You can disable this message box by unchecking\n")
+                   wxT("the checkbox in the main window (of course, a real\n")
+                   wxT("program would have a checkbox right here but we\n")
+                 wxT("keep it simple)"), wxT("Welcome to wxConfig demo"),
                  wxICON_INFORMATION | wxOK);
   }
 
@@ -145,18 +145,18 @@ int MyApp::OnExit()
 
 // main frame ctor
 MyFrame::MyFrame()
-       : wxFrame((wxFrame *) NULL, wxID_ANY, _T("wxConfig Demo"))
+       : wxFrame((wxFrame *) NULL, wxID_ANY, wxT("wxConfig Demo"))
 {
   // menu
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(ConfTest_Delete, _T("&Delete"), _T("Delete config file"));
+  file_menu->Append(ConfTest_Delete, wxT("&Delete"), wxT("Delete config file"));
   file_menu->AppendSeparator();
-  file_menu->Append(ConfTest_About, _T("&About\tF1"), _T("About this sample"));
+  file_menu->Append(ConfTest_About, wxT("&About\tF1"), wxT("About this sample"));
   file_menu->AppendSeparator();
-  file_menu->Append(ConfTest_Quit, _T("E&xit\tAlt-X"), _T("Exit the program"));
+  file_menu->Append(ConfTest_Quit, wxT("E&xit\tAlt-X"), wxT("Exit the program"));
   wxMenuBar *menu_bar = new wxMenuBar;
-  menu_bar->Append(file_menu, _T("&File"));
+  menu_bar->Append(file_menu, wxT("&File"));
   SetMenuBar(menu_bar);
 
 #if wxUSE_STATUSBAR
@@ -165,10 +165,10 @@ MyFrame::MyFrame()
 
   // child controls
   wxPanel *panel = new wxPanel(this);
-  (void)new wxStaticText(panel, wxID_ANY, _T("These controls remember their values!"),
+  (void)new wxStaticText(panel, wxID_ANY, wxT("These controls remember their values!"),
                          wxPoint(10, 10), wxSize(300, 20));
-  m_text = new wxTextCtrl(panel, wxID_ANY, _T(""), wxPoint(10, 40), wxSize(300, 20));
-  m_check = new wxCheckBox(panel, wxID_ANY, _T("show welcome message box at startup"),
+  m_text = new wxTextCtrl(panel, wxID_ANY, wxT(""), wxPoint(10, 40), wxSize(300, 20));
+  m_check = new wxCheckBox(panel, wxID_ANY, wxT("show welcome message box at startup"),
                            wxPoint(10, 70), wxSize(300, 20));
 
   // restore the control's values from the config
@@ -181,25 +181,25 @@ MyFrame::MyFrame()
   wxConfigBase *pConfig = wxConfigBase::Get();
 
   // we could write Read("/Controls/Text") as well, it's just to show SetPath()
-  pConfig->SetPath(_T("/Controls"));
+  pConfig->SetPath(wxT("/Controls"));
 
-  m_text->SetValue(pConfig->Read(_T("Text"), _T("")));
-  m_check->SetValue(pConfig->Read(_T("Check"), 1l) != 0);
+  m_text->SetValue(pConfig->Read(wxT("Text"), wxT("")));
+  m_check->SetValue(pConfig->Read(wxT("Check"), 1l) != 0);
 
   // SetPath() understands ".."
-  pConfig->SetPath(_T("../MainFrame"));
+  pConfig->SetPath(wxT("../MainFrame"));
 
   // restore frame position and size
-  int x = pConfig->Read(_T("x"), 50),
-      y = pConfig->Read(_T("y"), 50),
-      w = pConfig->Read(_T("w"), 350),
-      h = pConfig->Read(_T("h"), 200);
+  int x = pConfig->Read(wxT("x"), 50),
+      y = pConfig->Read(wxT("y"), 50),
+      w = pConfig->Read(wxT("w"), 350),
+      h = pConfig->Read(wxT("h"), 200);
   Move(x, y);
   SetClientSize(w, h);
 
-  pConfig->SetPath(_T("/"));
+  pConfig->SetPath(wxT("/"));
   wxString s;
-  if ( pConfig->Read(_T("TestValue"), &s) )
+  if ( pConfig->Read(wxT("TestValue"), &s) )
   {
       wxLogStatus(this, wxT("TestValue from config is '%s'"), s.c_str());
   }
@@ -216,7 +216,7 @@ void MyFrame::OnQuit(wxCommandEvent&)
 
 void MyFrame::OnAbout(wxCommandEvent&)
 {
-  wxMessageBox(_T("wxConfig demo\n(c) 1998-2001 Vadim Zeitlin"), _T("About"),
+  wxMessageBox(wxT("wxConfig demo\n(c) 1998-2001 Vadim Zeitlin"), wxT("About"),
                wxICON_INFORMATION | wxOK);
 }
 
@@ -225,20 +225,20 @@ void MyFrame::OnDelete(wxCommandEvent&)
     wxConfigBase *pConfig = wxConfigBase::Get();
     if ( pConfig == NULL )
     {
-        wxLogError(_T("No config to delete!"));
+        wxLogError(wxT("No config to delete!"));
         return;
     }
 
     if ( pConfig->DeleteAll() )
     {
-        wxLogMessage(_T("Config file/registry key successfully deleted."));
+        wxLogMessage(wxT("Config file/registry key successfully deleted."));
 
         delete wxConfigBase::Set(NULL);
         wxConfigBase::DontCreateOnDemand();
     }
     else
     {
-        wxLogError(_T("Deleting config file/registry key failed."));
+        wxLogError(wxT("Deleting config file/registry key failed."));
     }
 }
 
@@ -249,18 +249,18 @@ MyFrame::~MyFrame()
     return;
 
   // save the control's values to the config
-  pConfig->Write(_T("/Controls/Text"), m_text->GetValue());
-  pConfig->Write(_T("/Controls/Check"), m_check->GetValue());
+  pConfig->Write(wxT("/Controls/Text"), m_text->GetValue());
+  pConfig->Write(wxT("/Controls/Check"), m_check->GetValue());
 
   // save the frame position
   int x, y, w, h;
   GetClientSize(&w, &h);
   GetPosition(&x, &y);
-  pConfig->Write(_T("/MainFrame/x"), (long) x);
-  pConfig->Write(_T("/MainFrame/y"), (long) y);
-  pConfig->Write(_T("/MainFrame/w"), (long) w);
-  pConfig->Write(_T("/MainFrame/h"), (long) h);
+  pConfig->Write(wxT("/MainFrame/x"), (long) x);
+  pConfig->Write(wxT("/MainFrame/y"), (long) y);
+  pConfig->Write(wxT("/MainFrame/w"), (long) w);
+  pConfig->Write(wxT("/MainFrame/h"), (long) h);
 
-  pConfig->Write(_T("/TestValue"), wxT("A test value"));
+  pConfig->Write(wxT("/TestValue"), wxT("A test value"));
 }
 
--- samples/checklst/checklst.cpp-orig	2009-06-18 18:44:13.289460000 -0500
+++ samples/checklst/checklst.cpp	2009-06-18 18:44:19.432503000 -0500
@@ -154,7 +154,7 @@ bool CheckListBoxApp::OnInit(void)
     CheckListBoxFrame *pFrame = new CheckListBoxFrame
                                     (
                                      NULL,
-                                     _T("wxWidgets Checklistbox Sample")
+                                     wxT("wxWidgets Checklistbox Sample")
                                     );
     SetTopWindow(pFrame);
 
@@ -178,35 +178,35 @@ CheckListBoxFrame::CheckListBoxFrame(wxF
 
     // file submenu
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Menu_About, _T("&About...\tF1"));
+    menuFile->Append(Menu_About, wxT("&About...\tF1"));
     menuFile->AppendSeparator();
-    menuFile->Append(Menu_Quit, _T("E&xit\tAlt-X"));
+    menuFile->Append(Menu_Quit, wxT("E&xit\tAlt-X"));
 
     // listbox submenu
     wxMenu *menuList = new wxMenu;
-    menuList->Append(Menu_CheckFirst, _T("Check the first item\tCtrl-C"));
-    menuList->Append(Menu_UncheckFirst, _T("Uncheck the first item\tCtrl-U"));
-    menuList->Append(Menu_ToggleFirst, _T("Toggle the first item\tCtrl-T"));
+    menuList->Append(Menu_CheckFirst, wxT("Check the first item\tCtrl-C"));
+    menuList->Append(Menu_UncheckFirst, wxT("Uncheck the first item\tCtrl-U"));
+    menuList->Append(Menu_ToggleFirst, wxT("Toggle the first item\tCtrl-T"));
     menuList->AppendSeparator();
-    menuList->Append(Menu_InsertItemsStart, _T("Insert some item at the beginning"));
-    menuList->Append(Menu_InsertItemsMiddle, _T("Insert some item at the middle"));
-    menuList->Append(Menu_InsertItemsEnd, _T("Insert some item at the end"));
-    menuList->Append(Menu_AppendItems, _T("Append some items\tCtrl-A"));
-    menuList->Append(Menu_RemoveItems, _T("Remove some items"));
+    menuList->Append(Menu_InsertItemsStart, wxT("Insert some item at the beginning"));
+    menuList->Append(Menu_InsertItemsMiddle, wxT("Insert some item at the middle"));
+    menuList->Append(Menu_InsertItemsEnd, wxT("Insert some item at the end"));
+    menuList->Append(Menu_AppendItems, wxT("Append some items\tCtrl-A"));
+    menuList->Append(Menu_RemoveItems, wxT("Remove some items"));
     menuList->AppendSeparator();
-    menuList->AppendCheckItem(Menu_Selection, _T("Multiple selection\tCtrl-M"));
-    menuList->AppendCheckItem(Menu_Extended, _T("Extended selection"));
-    menuList->AppendCheckItem(Menu_Sorting, _T("Sorting"));
+    menuList->AppendCheckItem(Menu_Selection, wxT("Multiple selection\tCtrl-M"));
+    menuList->AppendCheckItem(Menu_Extended, wxT("Extended selection"));
+    menuList->AppendCheckItem(Menu_Sorting, wxT("Sorting"));
     menuList->AppendSeparator();
-    menuList->Append(Menu_GetBestSize, _T("Get the best size of the checklistbox control"));
+    menuList->Append(Menu_GetBestSize, wxT("Get the best size of the checklistbox control"));
     menuList->AppendSeparator();
-    menuList->Append(Menu_MakeItemFirst, _T("Make selected item the first item"));
+    menuList->Append(Menu_MakeItemFirst, wxT("Make selected item the first item"));
 
 
     // put it all together
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(menuFile, _T("&File"));
-    menu_bar->Append(menuList, _T("&List"));
+    menu_bar->Append(menuFile, wxT("&File"));
+    menu_bar->Append(menuList, wxT("&List"));
     SetMenuBar(menu_bar);
 
     // make a panel with some controls
@@ -247,10 +247,10 @@ void CheckListBoxFrame::CreateCheckListb
     // check list box
     static const wxChar *aszChoices[] =
     {
-        _T("Zeroth"),
-        _T("First"), _T("Second"), _T("Third"),
-        _T("Fourth"), _T("Fifth"), _T("Sixth"),
-        _T("Seventh"), _T("Eighth"), _T("Nineth")
+        wxT("Zeroth"),
+        wxT("First"), wxT("Second"), wxT("Third"),
+        wxT("Fourth"), wxT("Fifth"), wxT("Sixth"),
+        wxT("Seventh"), wxT("Eighth"), wxT("Nineth")
     };
 
     wxString *astrChoices = new wxString[WXSIZEOF(aszChoices)];
@@ -314,9 +314,9 @@ void CheckListBoxFrame::OnInsertItemsSta
 {
     static size_t s_nItem = 0;
     wxArrayString items;
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
 
     m_pListBox->InsertItems(items, 0);//m_pListBox->GetCount());
 }
@@ -325,9 +325,9 @@ void CheckListBoxFrame::OnInsertItemsMid
 {
     static size_t s_nItem = 0;
     wxArrayString items;
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
 
     m_pListBox->InsertItems(items, m_pListBox->GetCount() ? 1 : 0);
 }
@@ -336,9 +336,9 @@ void CheckListBoxFrame::OnInsertItemsEnd
 {
     static size_t s_nItem = 0;
     wxArrayString items;
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    items.Add(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    items.Add(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
 
     m_pListBox->InsertItems(items, m_pListBox->GetCount() );
 }
@@ -346,9 +346,9 @@ void CheckListBoxFrame::OnInsertItemsEnd
 void CheckListBoxFrame::OnAppendItems(wxCommandEvent& WXUNUSED(event))
 {
     static size_t s_nItem = 0;
-    m_pListBox->Append(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    m_pListBox->Append(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
-    m_pListBox->Append(wxString::Format(_T("New item %lu"), (unsigned long)++s_nItem));
+    m_pListBox->Append(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    m_pListBox->Append(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
+    m_pListBox->Append(wxString::Format(wxT("New item %lu"), (unsigned long)++s_nItem));
 }
 
 void CheckListBoxFrame::OnRemoveItems(wxCommandEvent& WXUNUSED(event))
--- samples/ipc/server.cpp-orig	2009-06-18 18:43:03.453942000 -0500
+++ samples/ipc/server.cpp	2009-06-18 18:43:08.303628000 -0500
@@ -67,7 +67,7 @@ END_EVENT_TABLE()
 bool MyApp::OnInit()
 {
     // Create the main frame window
-    m_frame = new MyFrame(NULL, _T("Server"));
+    m_frame = new MyFrame(NULL, wxT("Server"));
     m_frame->Show(true);
 
     return true;
@@ -96,11 +96,11 @@ MyFrame::MyFrame(wxFrame *frame, const w
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(wxID_EXIT, _T("&Quit\tCtrl-Q"));
+    file_menu->Append(wxID_EXIT, wxT("&Quit\tCtrl-Q"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     // Associate the menu bar with the frame
     SetMenuBar(menu_bar);
@@ -121,7 +121,7 @@ MyFrame::MyFrame(wxFrame *frame, const w
 
     wxString strs4[] = 
     {
-        IPC_SERVICE, _T("...")
+        IPC_SERVICE, wxT("...")
     };
     wxChoice *item4 = new wxChoice( this, ID_SERVERNAME, wxDefaultPosition, wxSize(100,-1), 2, strs4, 0 );
     item2->Add( item4, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );
@@ -156,7 +156,7 @@ MyFrame::MyFrame(wxFrame *frame, const w
     GetServername()->SetSelection(0);
     wxLogTextCtrl *logWindow = new wxLogTextCtrl(GetLog());
     delete wxLog::SetActiveTarget(logWindow);
-    wxLogMessage(_T("Click on Start to start the server"));
+    wxLogMessage(wxT("Click on Start to start the server"));
     Enable();
 }
 
@@ -190,16 +190,16 @@ void MyFrame::OnStart(wxCommandEvent& WX
     wxString servername = GetServername()->GetStringSelection();
     if (m_server->Create(servername))
     {
-        wxLogMessage(_T("Server %s started"), servername.c_str());
+        wxLogMessage(wxT("Server %s started"), servername.c_str());
   #if wxUSE_DDE_FOR_IPC
-        wxLogMessage(_T("Server uses DDE"));
+        wxLogMessage(wxT("Server uses DDE"));
   #else // !wxUSE_DDE_FOR_IPC
-        wxLogMessage(_T("Server uses TCP"));
+        wxLogMessage(wxT("Server uses TCP"));
   #endif // wxUSE_DDE_FOR_IPC/!wxUSE_DDE_FOR_IPC
     }
     else
     {
-        wxLogMessage(_T("Server %s failed to start"), servername.c_str());
+        wxLogMessage(wxT("Server %s failed to start"), servername.c_str());
         delete m_server;
         m_server = NULL;
     }
@@ -208,10 +208,10 @@ void MyFrame::OnStart(wxCommandEvent& WX
 
 void MyFrame::OnServerName( wxCommandEvent& WXUNUSED(event) )
 {
-    if (GetServername()->GetStringSelection() == _T("..."))
+    if (GetServername()->GetStringSelection() == wxT("..."))
     {
-        wxString s = wxGetTextFromUser(_T("Specify the name of the server"),
-            _T("Server Name"), _(""), this);
+        wxString s = wxGetTextFromUser(wxT("Specify the name of the server"),
+            wxT("Server Name"), _(""), this);
         if (!s.IsEmpty() && s != IPC_SERVICE)
         {
             GetServername()->Insert(s, 0);
@@ -252,13 +252,13 @@ MyServer::~MyServer()
 
 wxConnectionBase *MyServer::OnAcceptConnection(const wxString& topic)
 {
-    wxLogMessage(_T("OnAcceptConnection(\"%s\")"), topic.c_str());
+    wxLogMessage(wxT("OnAcceptConnection(\"%s\")"), topic.c_str());
 
     if ( topic == IPC_TOPIC )
     {
         m_connection = new MyConnection();
         wxGetApp().GetFrame()->Enable();
-        wxLogMessage(_T("Connection accepted"));
+        wxLogMessage(wxT("Connection accepted"));
         return m_connection;
     }
     // unknown topic
@@ -273,7 +273,7 @@ void MyServer::Disconnect()
         delete m_connection;
         m_connection = NULL;
         wxGetApp().GetFrame()->Enable();
-        wxLogMessage(_T("Disconnected client"));
+        wxLogMessage(wxT("Disconnected client"));
     }
 }
 
@@ -283,11 +283,11 @@ void MyServer::Advise()
     {
         wxString s = wxDateTime::Now().Format();
         m_connection->Advise(m_connection->m_sAdvise, (wxChar *)s.c_str());
-        s = wxDateTime::Now().FormatTime() + _T(" ") + wxDateTime::Now().FormatDate();
+        s = wxDateTime::Now().FormatTime() + wxT(" ") + wxDateTime::Now().FormatDate();
         m_connection->Advise(m_connection->m_sAdvise, (wxChar *)s.c_str(), (s.Length() + 1) * sizeof(wxChar));
 
 #if wxUSE_DDE_FOR_IPC
-        wxLogMessage(_T("DDE Advise type argument cannot be wxIPC_PRIVATE. The client will receive it as wxIPC_TEXT, and receive the correct no of bytes, but not print a correct log entry."));
+        wxLogMessage(wxT("DDE Advise type argument cannot be wxIPC_PRIVATE. The client will receive it as wxIPC_TEXT, and receive the correct no of bytes, but not print a correct log entry."));
 #endif
         char bytes[3];
         bytes[0] = '1'; bytes[1] = '2'; bytes[2] = '3';
@@ -313,14 +313,14 @@ MyConnection::~MyConnection()
 bool MyConnection::OnExecute(const wxString& topic,
     wxChar *data, int size, wxIPCFormat format)
 {
-    Log(_T("OnExecute"), topic, _T(""), data, size, format);
+    Log(wxT("OnExecute"), topic, wxT(""), data, size, format);
     return true;
 }
 
 bool MyConnection::OnPoke(const wxString& topic,
     const wxString& item, wxChar *data, int size, wxIPCFormat format)
 {
-    Log(_T("OnPoke"), topic, item, data, size, format);
+    Log(wxT("OnPoke"), topic, item, data, size, format);
     return wxConnection::OnPoke(topic, item, data, size, format);
 }
 
@@ -328,19 +328,19 @@ wxChar *MyConnection::OnRequest(const wx
     const wxString& item, int * size, wxIPCFormat format)
 {
     wxChar *data;
-    if (item == _T("Date"))
+    if (item == wxT("Date"))
     {
         m_sRequestDate = wxDateTime::Now().Format();
         data = (wxChar *)m_sRequestDate.c_str();
         *size = -1;
     }    
-    else if (item == _T("Date+len"))
+    else if (item == wxT("Date+len"))
     {
-        m_sRequestDate = wxDateTime::Now().FormatTime() + _T(" ") + wxDateTime::Now().FormatDate();
+        m_sRequestDate = wxDateTime::Now().FormatTime() + wxT(" ") + wxDateTime::Now().FormatDate();
         data = (wxChar *)m_sRequestDate.c_str();
         *size = (m_sRequestDate.Length() + 1) * sizeof(wxChar);
     }    
-    else if (item == _T("bytes[3]"))
+    else if (item == wxT("bytes[3]"))
     {
         data = (wxChar *)m_achRequestBytes;
         m_achRequestBytes[0] = '1'; m_achRequestBytes[1] = '2'; m_achRequestBytes[2] = '3';
@@ -351,15 +351,15 @@ wxChar *MyConnection::OnRequest(const wx
         data = NULL;
         *size = 0;
     }
-     Log(_T("OnRequest"), topic, item, data, *size, format);
+     Log(wxT("OnRequest"), topic, item, data, *size, format);
     return data;
 }
 
 bool MyConnection::OnStartAdvise(const wxString& topic,
                                  const wxString& item)
 {
-    wxLogMessage(_T("OnStartAdvise(\"%s\",\"%s\")"), topic.c_str(), item.c_str());
-    wxLogMessage(_T("Returning true"));
+    wxLogMessage(wxT("OnStartAdvise(\"%s\",\"%s\")"), topic.c_str(), item.c_str());
+    wxLogMessage(wxT("Returning true"));
     m_sAdvise = item;
     wxGetApp().GetFrame()->Enable();
     return true;
@@ -368,8 +368,8 @@ bool MyConnection::OnStartAdvise(const w
 bool MyConnection::OnStopAdvise(const wxString& topic,
                                  const wxString& item)
 {
-    wxLogMessage(_T("OnStopAdvise(\"%s\",\"%s\")"), topic.c_str(), item.c_str());
-    wxLogMessage(_T("Returning true"));
+    wxLogMessage(wxT("OnStopAdvise(\"%s\",\"%s\")"), topic.c_str(), item.c_str());
+    wxLogMessage(wxT("Returning true"));
     m_sAdvise.Empty();
     wxGetApp().GetFrame()->Enable();
     return true;
@@ -380,39 +380,39 @@ void MyConnection::Log(const wxString& c
 {
     wxString s;
     if (topic.IsEmpty() && item.IsEmpty())
-        s.Printf(_T("%s("), command.c_str());
+        s.Printf(wxT("%s("), command.c_str());
     else if (topic.IsEmpty())
-        s.Printf(_T("%s(\"%s\","), command.c_str(), item.c_str());
+        s.Printf(wxT("%s(\"%s\","), command.c_str(), item.c_str());
     else if (item.IsEmpty())
-        s.Printf(_T("%s(\"%s\","), command.c_str(), topic.c_str());
+        s.Printf(wxT("%s(\"%s\","), command.c_str(), topic.c_str());
     else
-        s.Printf(_T("%s(\"%s\",\"%s\","), command.c_str(), topic.c_str(), item.c_str());
+        s.Printf(wxT("%s(\"%s\",\"%s\","), command.c_str(), topic.c_str(), item.c_str());
 
     if (format == wxIPC_TEXT || format == wxIPC_UNICODETEXT) 
-        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), data, size);
+        wxLogMessage(wxT("%s\"%s\",%d)"), s.c_str(), data, size);
     else if (format == wxIPC_PRIVATE)
     {
         if (size == 3)
         {
             char *bytes = (char *)data;
-            wxLogMessage(_T("%s'%c%c%c',%d)"), s.c_str(), bytes[0], bytes[1], bytes[2], size);
+            wxLogMessage(wxT("%s'%c%c%c',%d)"), s.c_str(), bytes[0], bytes[1], bytes[2], size);
         }
         else
-            wxLogMessage(_T("%s...,%d)"), s.c_str(), size);
+            wxLogMessage(wxT("%s...,%d)"), s.c_str(), size);
     }
     else if (format == wxIPC_INVALID) 
-        wxLogMessage(_T("%s[invalid data],%d)"), s.c_str(), size);
+        wxLogMessage(wxT("%s[invalid data],%d)"), s.c_str(), size);
 }
 
 bool MyConnection::Advise(const wxString& item, wxChar *data, int size, wxIPCFormat format)
 {
-    Log(_T("Advise"), _T(""), item, data, size, format);
+    Log(wxT("Advise"), wxT(""), item, data, size, format);
     return wxConnection::Advise(item, data, size, format);
 }
 
 bool MyConnection::OnDisconnect()
 {
-    wxLogMessage(_T("OnDisconnect()"));
+    wxLogMessage(wxT("OnDisconnect()"));
     wxGetApp().GetFrame()->Disconnect();
     return true;
 }
--- samples/ipc/ipcsetup.h-orig	2009-06-18 18:43:14.531958000 -0500
+++ samples/ipc/ipcsetup.h	2009-06-18 18:43:28.865076000 -0500
@@ -15,14 +15,14 @@
 #include "wx/ipc.h"
 
 // the default service name
-#define IPC_SERVICE _T("4242")
-//#define IPC_SERVICE _T("/tmp/wxsrv424")
+#define IPC_SERVICE wxT("4242")
+//#define IPC_SERVICE wxT("/tmp/wxsrv424")
 
 // the hostname
-#define IPC_HOST _T("localhost")
+#define IPC_HOST wxT("localhost")
 
 // the IPC topic
-#define IPC_TOPIC _T("IPC TEST")
+#define IPC_TOPIC wxT("IPC TEST")
 
 // the name of the item we're being advised about
-#define IPC_ADVISE_NAME _T("Item")
+#define IPC_ADVISE_NAME wxT("Item")
--- samples/ipc/client.cpp-orig	2009-06-18 18:43:33.726084000 -0500
+++ samples/ipc/client.cpp	2009-06-18 18:43:40.389275000 -0500
@@ -77,7 +77,7 @@ END_EVENT_TABLE()
 bool MyApp::OnInit()
 {
     // Create the main frame window
-    m_frame = new MyFrame(NULL, _T("Client"));
+    m_frame = new MyFrame(NULL, wxT("Client"));
     m_frame->Show(true);
 
     return true;
@@ -99,11 +99,11 @@ MyFrame::MyFrame(wxFrame *frame, const w
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(wxID_EXIT, _T("&Quit\tCtrl-Q"));
+    file_menu->Append(wxID_EXIT, wxT("&Quit\tCtrl-Q"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     // Associate the menu bar with the frame
     SetMenuBar(menu_bar);
@@ -114,15 +114,15 @@ MyFrame::MyFrame(wxFrame *frame, const w
     // add the controls to the frame
     wxString strs4[] =
     {
-        IPC_SERVICE, _T("...")
+        IPC_SERVICE, wxT("...")
     };
     wxString strs5[] =
     {
-        IPC_HOST, _T("...")
+        IPC_HOST, wxT("...")
     };
     wxString strs6[] =
     {
-        IPC_TOPIC, _T("...")
+        IPC_TOPIC, wxT("...")
     };
 
     wxBoxSizer *item0 = new wxBoxSizer( wxVERTICAL );
@@ -207,7 +207,7 @@ MyFrame::MyFrame(wxFrame *frame, const w
     GetTopic()->SetSelection(0);
     wxLogTextCtrl *logWindow = new wxLogTextCtrl(GetLog());
     delete wxLog::SetActiveTarget(logWindow);
-    wxLogMessage(_T("Click on Connect to connect to the server"));
+    wxLogMessage(wxT("Click on Connect to connect to the server"));
     EnableControls();
 }
 
@@ -252,9 +252,9 @@ void MyFrame::OnStart(wxCommandEvent& WX
     m_client = new MyClient;
     bool retval = m_client->Connect(hostname, servername, topic);
 
-    wxLogMessage(_T("Client host=\"%s\" port=\"%s\" topic=\"%s\" %s"),
+    wxLogMessage(wxT("Client host=\"%s\" port=\"%s\" topic=\"%s\" %s"),
         hostname.c_str(), servername.c_str(), topic.c_str(),
-        retval ? _T("connected") : _T("failed to connect"));
+        retval ? wxT("connected") : wxT("failed to connect"));
 
     if (!retval)
     {
@@ -266,10 +266,10 @@ void MyFrame::OnStart(wxCommandEvent& WX
 
 void MyFrame::OnServername( wxCommandEvent& WXUNUSED(event) )
 {
-    if (GetServername()->GetStringSelection() == _T("..."))
+    if (GetServername()->GetStringSelection() == wxT("..."))
     {
-        wxString s = wxGetTextFromUser(_T("Specify the name of the server"),
-            _T("Server Name"), wxEmptyString, this);
+        wxString s = wxGetTextFromUser(wxT("Specify the name of the server"),
+            wxT("Server Name"), wxEmptyString, this);
         if (!s.IsEmpty() && s != IPC_SERVICE)
         {
             GetServername()->Insert(s, 0);
@@ -280,10 +280,10 @@ void MyFrame::OnServername( wxCommandEve
 
 void MyFrame::OnHostname( wxCommandEvent& WXUNUSED(event) )
 {
-    if (GetHostname()->GetStringSelection() == _T("..."))
+    if (GetHostname()->GetStringSelection() == wxT("..."))
     {
-        wxString s = wxGetTextFromUser(_T("Specify the name of the host (ignored under DDE)"),
-            _T("Host Name"), wxEmptyString, this);
+        wxString s = wxGetTextFromUser(wxT("Specify the name of the host (ignored under DDE)"),
+            wxT("Host Name"), wxEmptyString, this);
         if (!s.IsEmpty() && s != IPC_HOST)
         {
             GetHostname()->Insert(s, 0);
@@ -294,10 +294,10 @@ void MyFrame::OnHostname( wxCommandEvent
 
 void MyFrame::OnTopic( wxCommandEvent& WXUNUSED(event) )
 {
-    if (GetTopic()->GetStringSelection() == _T("..."))
+    if (GetTopic()->GetStringSelection() == wxT("..."))
     {
-        wxString s = wxGetTextFromUser(_T("Specify the name of the topic"),
-            _T("Topic Name"), wxEmptyString, this);
+        wxString s = wxGetTextFromUser(wxT("Specify the name of the topic"),
+            wxT("Topic Name"), wxEmptyString, this);
         if (!s.IsEmpty() && s != IPC_TOPIC)
         {
             GetTopic()->Insert(s, 0);
@@ -320,24 +320,24 @@ void MyFrame::Disconnect()
 
 void MyFrame::OnStartAdvise(wxCommandEvent& WXUNUSED(event))
 {
-    m_client->GetConnection()->StartAdvise(_T("something"));
+    m_client->GetConnection()->StartAdvise(wxT("something"));
 }
 
 void MyFrame::OnStopAdvise(wxCommandEvent& WXUNUSED(event))
 {
-    m_client->GetConnection()->StopAdvise(_T("something"));
+    m_client->GetConnection()->StopAdvise(wxT("something"));
 }
 
 void MyFrame::OnExecute(wxCommandEvent& WXUNUSED(event))
 {
     if (m_client->IsConnected())
     {
-        wxString s = _T("Date");
+        wxString s = wxT("Date");
 
         m_client->GetConnection()->Execute((wxChar *)s.c_str());
         m_client->GetConnection()->Execute((wxChar *)s.c_str(), (s.Length() + 1) * sizeof(wxChar));
 #if wxUSE_DDE_FOR_IPC
-        wxLogMessage(_T("DDE Execute can only be used to send text strings, not arbitrary data.\nThe type argument will be ignored, text truncated, converted to Unicode and null terminated."));
+        wxLogMessage(wxT("DDE Execute can only be used to send text strings, not arbitrary data.\nThe type argument will be ignored, text truncated, converted to Unicode and null terminated."));
 #endif
         char bytes[3];
         bytes[0] = '1'; bytes[1] = '2'; bytes[2] = '3';
@@ -350,12 +350,12 @@ void MyFrame::OnPoke(wxCommandEvent& WXU
     if (m_client->IsConnected())
     {
         wxString s = wxDateTime::Now().Format();
-        m_client->GetConnection()->Poke(_T("Date"), (wxChar *)s.c_str());
-        s = wxDateTime::Now().FormatTime() + _T(" ") + wxDateTime::Now().FormatDate();
-        m_client->GetConnection()->Poke(_T("Date"), (wxChar *)s.c_str(), (s.Length() + 1) * sizeof(wxChar));
+        m_client->GetConnection()->Poke(wxT("Date"), (wxChar *)s.c_str());
+        s = wxDateTime::Now().FormatTime() + wxT(" ") + wxDateTime::Now().FormatDate();
+        m_client->GetConnection()->Poke(wxT("Date"), (wxChar *)s.c_str(), (s.Length() + 1) * sizeof(wxChar));
         char bytes[3];
         bytes[0] = '1'; bytes[1] = '2'; bytes[2] = '3';
-        m_client->GetConnection()->Poke(_T("bytes[3]"), (wxChar *)bytes, 3, wxIPC_PRIVATE);
+        m_client->GetConnection()->Poke(wxT("bytes[3]"), (wxChar *)bytes, 3, wxIPC_PRIVATE);
     }
 }
 
@@ -364,9 +364,9 @@ void MyFrame::OnRequest(wxCommandEvent& 
     if (m_client->IsConnected())
     {
         int size;
-        m_client->GetConnection()->Request(_T("Date"));
-        m_client->GetConnection()->Request(_T("Date+len"), &size);
-        m_client->GetConnection()->Request(_T("bytes[3]"), &size, wxIPC_PRIVATE);
+        m_client->GetConnection()->Request(wxT("Date"));
+        m_client->GetConnection()->Request(wxT("Date+len"), &size);
+        m_client->GetConnection()->Request(wxT("bytes[3]"), &size, wxIPC_PRIVATE);
     }
 }
 
@@ -400,7 +400,7 @@ void MyClient::Disconnect()
         delete m_connection;
         m_connection = NULL;
         wxGetApp().GetFrame()->EnableControls();
-        wxLogMessage(_T("Client disconnected from server"));
+        wxLogMessage(wxT("Client disconnected from server"));
     }
 }
 
@@ -418,62 +418,62 @@ void MyConnection::Log(const wxString& c
 {
     wxString s;
     if (topic.IsEmpty() && item.IsEmpty())
-        s.Printf(_T("%s("), command.c_str());
+        s.Printf(wxT("%s("), command.c_str());
     else if (topic.IsEmpty())
-        s.Printf(_T("%s(item=\"%s\","), command.c_str(), item.c_str());
+        s.Printf(wxT("%s(item=\"%s\","), command.c_str(), item.c_str());
     else if (item.IsEmpty())
-        s.Printf(_T("%s(topic=\"%s\","), command.c_str(), topic.c_str());
+        s.Printf(wxT("%s(topic=\"%s\","), command.c_str(), topic.c_str());
     else
-        s.Printf(_T("%s(topic=\"%s\",item=\"%s\","), command.c_str(), topic.c_str(), item.c_str());
+        s.Printf(wxT("%s(topic=\"%s\",item=\"%s\","), command.c_str(), topic.c_str(), item.c_str());
 
     if (format == wxIPC_TEXT || format == wxIPC_UNICODETEXT)
-        wxLogMessage(_T("%s\"%s\",%d)"), s.c_str(), data, size);
+        wxLogMessage(wxT("%s\"%s\",%d)"), s.c_str(), data, size);
     else if (format == wxIPC_PRIVATE)
     {
         if (size == 3)
         {
             char *bytes = (char *)data;
-            wxLogMessage(_T("%s'%c%c%c',%d)"), s.c_str(), bytes[0], bytes[1], bytes[2], size);
+            wxLogMessage(wxT("%s'%c%c%c',%d)"), s.c_str(), bytes[0], bytes[1], bytes[2], size);
         }
         else
-            wxLogMessage(_T("%s...,%d)"), s.c_str(), size);
+            wxLogMessage(wxT("%s...,%d)"), s.c_str(), size);
     }
     else if (format == wxIPC_INVALID)
-        wxLogMessage(_T("%s[invalid data],%d)"), s.c_str(), size);
+        wxLogMessage(wxT("%s[invalid data],%d)"), s.c_str(), size);
 }
 
 bool MyConnection::OnAdvise(const wxString& topic, const wxString& item, wxChar *data,
     int size, wxIPCFormat format)
 {
-    Log(_T("OnAdvise"), topic, item, data, size, format);
+    Log(wxT("OnAdvise"), topic, item, data, size, format);
     return true;
 }
 
 bool MyConnection::OnDisconnect()
 {
-    wxLogMessage(_T("OnDisconnect()"));
+    wxLogMessage(wxT("OnDisconnect()"));
     wxGetApp().GetFrame()->Disconnect();
     return true;
 }
 
 bool MyConnection::Execute(const wxChar *data, int size, wxIPCFormat format)
 {
-    Log(_T("Execute"), wxEmptyString, wxEmptyString, (wxChar *)data, size, format);
+    Log(wxT("Execute"), wxEmptyString, wxEmptyString, (wxChar *)data, size, format);
     bool retval = wxConnection::Execute(data, size, format);
     if (!retval)
-        wxLogMessage(_T("Execute failed!"));
+        wxLogMessage(wxT("Execute failed!"));
     return retval;
 }
 
 wxChar *MyConnection::Request(const wxString& item, int *size, wxIPCFormat format)
 {
     wxChar *data =  wxConnection::Request(item, size, format);
-    Log(_T("Request"), wxEmptyString, item, data, size ? *size : -1, format);
+    Log(wxT("Request"), wxEmptyString, item, data, size ? *size : -1, format);
     return data;
 }
 
 bool MyConnection::Poke(const wxString& item, wxChar *data, int size, wxIPCFormat format)
 {
-    Log(_T("Poke"), wxEmptyString, item, data, size, format);
+    Log(wxT("Poke"), wxEmptyString, item, data, size, format);
     return wxConnection::Poke(item, data, size, format);
 }
--- samples/animate/anitest.cpp-orig	2009-06-18 18:43:48.322701000 -0500
+++ samples/animate/anitest.cpp	2009-06-18 18:43:53.702150000 -0500
@@ -92,7 +92,7 @@ bool MyApp::OnInit()
 {
     // Create the main frame window
 
-    MyFrame* frame = new MyFrame((wxFrame *)NULL, wxID_ANY, _T("Animation Demo"),
+    MyFrame* frame = new MyFrame((wxFrame *)NULL, wxID_ANY, wxT("Animation Demo"),
                                  wxDefaultPosition, wxSize(500, 400),
                                  wxDEFAULT_FRAME_STYLE);
 
@@ -103,31 +103,31 @@ bool MyApp::OnInit()
     wxMenu *file_menu = new wxMenu;
 
 #if wxUSE_FILEDLG
-    file_menu->Append(wxID_OPEN, _T("&Open Animation...\tCtrl+O"), _T("Loads an animation"));
+    file_menu->Append(wxID_OPEN, wxT("&Open Animation...\tCtrl+O"), wxT("Loads an animation"));
 #endif // wxUSE_FILEDLG
     file_menu->Append(wxID_EXIT);
 
     wxMenu *play_menu = new wxMenu;
-    play_menu->Append(ID_PLAY, _T("Play\tCtrl+P"), _T("Play the animation"));
-    play_menu->Append(wxID_STOP, _T("Stop\tCtrl+P"), _T("Stop the animation"));
+    play_menu->Append(ID_PLAY, wxT("Play\tCtrl+P"), wxT("Play the animation"));
+    play_menu->Append(wxID_STOP, wxT("Stop\tCtrl+P"), wxT("Stop the animation"));
     play_menu->AppendSeparator();
-    play_menu->Append(ID_SET_NULL_ANIMATION, _T("Set null animation"),
-                      _T("Sets the empty animation in the control"));
-    play_menu->AppendCheckItem(ID_SET_INACTIVE_BITMAP, _T("Set inactive bitmap"),
-                               _T("Sets an inactive bitmap for the control"));
-    play_menu->AppendCheckItem(ID_SET_NO_AUTO_RESIZE, _T("Set no autoresize"),
-                               _T("Tells the control not to resize automatically"));
-    play_menu->Append(ID_SET_BGCOLOR, _T("Set background colour..."),
-                      _T("Sets the background colour of the control"));
+    play_menu->Append(ID_SET_NULL_ANIMATION, wxT("Set null animation"),
+                      wxT("Sets the empty animation in the control"));
+    play_menu->AppendCheckItem(ID_SET_INACTIVE_BITMAP, wxT("Set inactive bitmap"),
+                               wxT("Sets an inactive bitmap for the control"));
+    play_menu->AppendCheckItem(ID_SET_NO_AUTO_RESIZE, wxT("Set no autoresize"),
+                               wxT("Tells the control not to resize automatically"));
+    play_menu->Append(ID_SET_BGCOLOR, wxT("Set background colour..."),
+                      wxT("Sets the background colour of the control"));
 
     wxMenu *help_menu = new wxMenu;
     help_menu->Append(wxID_ABOUT);
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
-    menu_bar->Append(play_menu, _T("&Animation"));
-    menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(file_menu, wxT("&File"));
+    menu_bar->Append(play_menu, wxT("&Animation"));
+    menu_bar->Append(help_menu, wxT("&Help"));
 
     // Associate the menu bar with the frame
     frame->SetMenuBar(menu_bar);
@@ -255,11 +255,11 @@ void MyFrame::OnAbout(wxCommandEvent& WX
     wxAboutDialogInfo info;
     info.SetName(_("wxAnimationCtrl and wxAnimation sample"));
     info.SetDescription(_("This sample program demonstrates the usage of wxAnimationCtrl"));
-    info.SetCopyright(_T("(C) 2006 Julian Smart"));
+    info.SetCopyright(wxT("(C) 2006 Julian Smart"));
 
-    info.AddDeveloper(_T("Julian Smart"));
-    info.AddDeveloper(_T("Guillermo Rodriguez Garcia"));
-    info.AddDeveloper(_T("Francesco Montorsi"));
+    info.AddDeveloper(wxT("Julian Smart"));
+    info.AddDeveloper(wxT("Guillermo Rodriguez Garcia"));
+    info.AddDeveloper(wxT("Francesco Montorsi"));
 
     wxAboutBox(info);
 }
@@ -267,7 +267,7 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 #if wxUSE_FILEDLG
 void MyFrame::OnOpen(wxCommandEvent& WXUNUSED(event))
 {
-    wxFileDialog dialog(this, _T("Please choose an animation"),
+    wxFileDialog dialog(this, wxT("Please choose an animation"),
                         wxEmptyString, wxEmptyString, wxT("*.gif;*.ani"), wxFD_OPEN);
     if (dialog.ShowModal() == wxID_OK)
     {
@@ -278,7 +278,7 @@ void MyFrame::OnOpen(wxCommandEvent& WXU
         if (m_animationCtrl->LoadFile(filename))
             m_animationCtrl->Play();
         else
-            wxMessageBox(_T("Sorry, this animation is not a valid format for wxAnimation."));
+            wxMessageBox(wxT("Sorry, this animation is not a valid format for wxAnimation."));
 #else
     #if 0
         wxAnimation temp;
--- samples/event/event.cpp-orig	2009-06-18 18:42:48.391441000 -0500
+++ samples/event/event.cpp	2009-06-18 18:42:55.169913000 -0500
@@ -112,7 +112,7 @@ public:
 
     void OnTest(wxCommandEvent& event)
     {
-        wxLogMessage(_T("This is the pushed test event handler #%u"), m_level);
+        wxLogMessage(wxT("This is the pushed test event handler #%u"), m_level);
 
         // if we don't skip the event, the other event handlers won't get it:
         // try commenting out this line and see what changes
@@ -201,7 +201,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("Event wxWidgets Sample"),
+    MyFrame *frame = new MyFrame(wxT("Event wxWidgets Sample"),
                                  wxPoint(50, 50), wxSize(600, 340));
 
     // and show it (the frames, unlike simple controls, are not shown when
@@ -228,40 +228,40 @@ MyFrame::MyFrame(const wxString& title, 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 
-    menuFile->Append(Event_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(Event_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
     menuFile->AppendSeparator();
-    menuFile->Append(Event_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Event_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *menuEvent = new wxMenu;
-    menuEvent->Append(Event_Connect, _T("&Connect\tCtrl-C"),
-                     _T("Connect or disconnect the dynamic event handler"),
+    menuEvent->Append(Event_Connect, wxT("&Connect\tCtrl-C"),
+                     wxT("Connect or disconnect the dynamic event handler"),
                      true /* checkable */);
-    menuEvent->Append(Event_Dynamic, _T("&Dynamic event\tCtrl-D"),
-                      _T("Dynamic event sample - only works after Connect"));
+    menuEvent->Append(Event_Dynamic, wxT("&Dynamic event\tCtrl-D"),
+                      wxT("Dynamic event sample - only works after Connect"));
     menuEvent->AppendSeparator();
-    menuEvent->Append(Event_Push, _T("&Push event handler\tCtrl-P"),
-                      _T("Push event handler for test event"));
-    menuEvent->Append(Event_Pop, _T("P&op event handler\tCtrl-O"),
-                      _T("Pop event handler for test event"));
-    menuEvent->Append(Event_Test, _T("Test event\tCtrl-T"),
-                      _T("Test event processed by pushed event handler"));
+    menuEvent->Append(Event_Push, wxT("&Push event handler\tCtrl-P"),
+                      wxT("Push event handler for test event"));
+    menuEvent->Append(Event_Pop, wxT("P&op event handler\tCtrl-O"),
+                      wxT("Pop event handler for test event"));
+    menuEvent->Append(Event_Test, wxT("Test event\tCtrl-T"),
+                      wxT("Test event processed by pushed event handler"));
     menuEvent->AppendSeparator();
-    menuEvent->Append(Event_Custom, _T("Fire c&ustom event\tCtrl-U"),
-                      _T("Generate a custom event"));
+    menuEvent->Append(Event_Custom, wxT("Fire c&ustom event\tCtrl-U"),
+                      wxT("Generate a custom event"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(menuEvent, _T("&Event"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(menuEvent, wxT("&Event"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
 
 #if wxUSE_STATUSBAR
     CreateStatusBar(3);
-    SetStatusText(_T("Welcome to wxWidgets event sample"));
-    SetStatusText(_T("Dynamic: off"), Status_Dynamic);
-    SetStatusText(_T("Push count: 0"), Status_Push);
+    SetStatusText(wxT("Welcome to wxWidgets event sample"));
+    SetStatusText(wxT("Dynamic: off"), Status_Dynamic);
+    SetStatusText(wxT("Push count: 0"), Status_Push);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -317,8 +317,8 @@ void MyFrame::OnConnect(wxCommandEvent& 
                 (wxCommandEventFunction)&MyFrame::OnDynamic);
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("You can now use \"Dynamic\" item in the menu"));
-        SetStatusText(_T("Dynamic: on"), Status_Dynamic);
+        SetStatusText(wxT("You can now use \"Dynamic\" item in the menu"));
+        SetStatusText(wxT("Dynamic: on"), Status_Dynamic);
 #endif // wxUSE_STATUSBAR
     }
     else // connect
@@ -326,8 +326,8 @@ void MyFrame::OnConnect(wxCommandEvent& 
         Disconnect(Event_Dynamic, wxID_ANY, wxEVT_COMMAND_MENU_SELECTED);
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("You can no more use \"Dynamic\" item in the menu"));
-        SetStatusText(_T("Dynamic: off"), Status_Dynamic);
+        SetStatusText(wxT("You can no more use \"Dynamic\" item in the menu"));
+        SetStatusText(wxT("Dynamic: off"), Status_Dynamic);
 #endif // wxUSE_STATUSBAR
     }
 }
@@ -341,25 +341,25 @@ void MyFrame::OnPushEventHandler(wxComma
     PushEventHandler(new MyEvtHandler(++m_nPush));
 
 #if wxUSE_STATUSBAR
-    SetStatusText(wxString::Format(_T("Push count: %u"), m_nPush), Status_Push);
+    SetStatusText(wxString::Format(wxT("Push count: %u"), m_nPush), Status_Push);
 #endif // wxUSE_STATUSBAR
 }
 
 void MyFrame::OnPopEventHandler(wxCommandEvent& WXUNUSED(event))
 {
-    wxCHECK_RET( m_nPush, _T("this command should be disabled!") );
+    wxCHECK_RET( m_nPush, wxT("this command should be disabled!") );
 
     PopEventHandler(true /* delete handler */);
     m_nPush--;
 
 #if wxUSE_STATUSBAR
-    SetStatusText(wxString::Format(_T("Push count: %u"), m_nPush), Status_Push);
+    SetStatusText(wxString::Format(wxT("Push count: %u"), m_nPush), Status_Push);
 #endif // wxUSE_STATUSBAR
 }
 
 void MyFrame::OnTest(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("This is the test event handler in the main frame"));
+    wxLogMessage(wxT("This is the test event handler in the main frame"));
 }
 
 void MyFrame::OnUpdateUIPop(wxUpdateUIEvent& event)
@@ -380,6 +380,6 @@ void MyFrame::OnFireCustom(wxCommandEven
 
 void MyFrame::OnProcessCustom(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Got a custom event!"));
+    wxLogMessage(wxT("Got a custom event!"));
 }
 
--- samples/minimal/minimal.cpp-orig	2009-06-18 18:42:37.876899000 -0500
+++ samples/minimal/minimal.cpp	2009-06-18 18:42:43.046257000 -0500
@@ -125,7 +125,7 @@ bool MyApp::OnInit()
         return false;
 
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("Minimal wxWidgets App"));
+    MyFrame *frame = new MyFrame(wxT("Minimal wxWidgets App"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -154,14 +154,14 @@ MyFrame::MyFrame(const wxString& title)
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Minimal_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Minimal_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    fileMenu->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    fileMenu->Append(Minimal_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -170,7 +170,7 @@ MyFrame::MyFrame(const wxString& title)
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -186,14 +186,14 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageBox(wxString::Format(
-                    _T("Welcome to %s!\n")
-                    _T("\n")
-                    _T("This is the minimal wxWidgets sample\n")
-                    _T("running under %s."),
+                    wxT("Welcome to %s!\n")
+                    wxT("\n")
+                    wxT("This is the minimal wxWidgets sample\n")
+                    wxT("running under %s."),
                     wxVERSION_STRING,
                     wxGetOsDescription().c_str()
                  ),
-                 _T("About wxWidgets minimal sample"),
+                 wxT("About wxWidgets minimal sample"),
                  wxOK | wxICON_INFORMATION,
                  this);
 }
--- samples/except/except.cpp-orig	2009-06-18 18:42:09.069433000 -0500
+++ samples/except/except.cpp	2009-06-18 18:42:16.328048000 -0500
@@ -259,11 +259,11 @@ bool MyApp::OnExceptionInMainLoop()
     }
     catch ( int i )
     {
-        wxLogWarning(_T("Caught an int %d in MyApp."), i);
+        wxLogWarning(wxT("Caught an int %d in MyApp."), i);
     }
     catch ( MyException& e )
     {
-        wxLogWarning(_T("Caught MyException(%s) in MyApp."), e.what());
+        wxLogWarning(wxT("Caught MyException(%s) in MyApp."), e.what());
     }
     catch ( ... )
     {
@@ -286,15 +286,15 @@ void MyApp::OnUnhandledException()
     }
     catch ( ... )
     {
-        wxMessageBox(_T("Unhandled exception caught, program will terminate."),
-                     _T("wxExcept Sample"), wxOK | wxICON_ERROR);
+        wxMessageBox(wxT("Unhandled exception caught, program will terminate."),
+                     wxT("wxExcept Sample"), wxOK | wxICON_ERROR);
     }
 }
 
 void MyApp::OnFatalException()
 {
-    wxMessageBox(_T("Program has crashed and will terminate."),
-                 _T("wxExcept Sample"), wxOK | wxICON_ERROR);
+    wxMessageBox(wxT("Program has crashed and will terminate."),
+                 wxT("wxExcept Sample"), wxOK | wxICON_ERROR);
 }
 
 #ifdef __WXDEBUG__
@@ -316,7 +316,7 @@ void MyApp::OnAssert(const wxChar *file,
 
 // frame constructor
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("Except wxWidgets App"),
+       : wxFrame(NULL, wxID_ANY, wxT("Except wxWidgets App"),
                  wxPoint(50, 50), wxSize(450, 340))
 {
     // set the frame icon
@@ -325,32 +325,32 @@ MyFrame::MyFrame()
 #if wxUSE_MENUS
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Except_Dialog, _T("Show &dialog\tCtrl-D"));
+    menuFile->Append(Except_Dialog, wxT("Show &dialog\tCtrl-D"));
     menuFile->AppendSeparator();
-    menuFile->Append(Except_ThrowInt, _T("Throw an &int\tCtrl-I"));
-    menuFile->Append(Except_ThrowString, _T("Throw a &string\tCtrl-S"));
-    menuFile->Append(Except_ThrowObject, _T("Throw an &object\tCtrl-O"));
+    menuFile->Append(Except_ThrowInt, wxT("Throw an &int\tCtrl-I"));
+    menuFile->Append(Except_ThrowString, wxT("Throw a &string\tCtrl-S"));
+    menuFile->Append(Except_ThrowObject, wxT("Throw an &object\tCtrl-O"));
     menuFile->Append(Except_ThrowUnhandled,
-                        _T("Throw &unhandled exception\tCtrl-U"));
-    menuFile->Append(Except_Crash, _T("&Crash\tCtrl-C"));
+                        wxT("Throw &unhandled exception\tCtrl-U"));
+    menuFile->Append(Except_Crash, wxT("&Crash\tCtrl-C"));
     menuFile->AppendSeparator();
 #if wxUSE_ON_FATAL_EXCEPTION
-    menuFile->AppendCheckItem(Except_HandleCrash, _T("&Handle crashes\tCtrl-H"));
+    menuFile->AppendCheckItem(Except_HandleCrash, wxT("&Handle crashes\tCtrl-H"));
     menuFile->AppendSeparator();
 #endif // wxUSE_ON_FATAL_EXCEPTION
 #ifdef __WXDEBUG__
-    menuFile->Append(Except_ShowAssert, _T("Provoke &assert failure\tCtrl-A"));
+    menuFile->Append(Except_ShowAssert, wxT("Provoke &assert failure\tCtrl-A"));
     menuFile->AppendSeparator();
 #endif // __WXDEBUG__
-    menuFile->Append(Except_Quit, _T("E&xit\tCtrl-Q"), _T("Quit this program"));
+    menuFile->Append(Except_Quit, wxT("E&xit\tCtrl-Q"), wxT("Quit this program"));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Except_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Except_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -359,7 +359,7 @@ MyFrame::MyFrame()
 #if wxUSE_STATUSBAR && !defined(__WXWINCE__)
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -371,7 +371,7 @@ bool MyFrame::ProcessEvent(wxEvent& even
     }
     catch ( const wxChar *msg )
     {
-        wxLogMessage(_T("Caught a string \"%s\" in MyFrame"), msg);
+        wxLogMessage(wxT("Caught a string \"%s\" in MyFrame"), msg);
 
         return true;
     }
@@ -393,7 +393,7 @@ void MyFrame::OnDialog(wxCommandEvent& W
     }
     catch ( ... )
     {
-        wxLogWarning(_T("An exception in MyDialog"));
+        wxLogWarning(wxT("An exception in MyDialog"));
 
         Destroy();
         throw;
@@ -407,12 +407,12 @@ void MyFrame::OnThrowInt(wxCommandEvent&
 
 void MyFrame::OnThrowString(wxCommandEvent& WXUNUSED(event))
 {
-    throw _T("string thrown from MyFrame");
+    throw wxT("string thrown from MyFrame");
 }
 
 void MyFrame::OnThrowObject(wxCommandEvent& WXUNUSED(event))
 {
-    throw MyException(_T("Exception thrown from MyFrame"));
+    throw MyException(wxT("Exception thrown from MyFrame"));
 }
 
 void MyFrame::OnThrowUnhandled(wxCommandEvent& WXUNUSED(event))
@@ -448,10 +448,10 @@ void MyFrame::OnShowAssert(wxCommandEven
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the except sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the except sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About Except"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About Except"), wxOK | wxICON_INFORMATION, this);
 }
 
 // ============================================================================
@@ -459,17 +459,17 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 // ============================================================================
 
 MyDialog::MyDialog(wxFrame *parent)
-        : wxDialog(parent, wxID_ANY, wxString(_T("Throw exception dialog")))
+        : wxDialog(parent, wxID_ANY, wxString(wxT("Throw exception dialog")))
 {
     wxSizer *sizerTop = new wxBoxSizer(wxVERTICAL);
 
-    sizerTop->Add(new wxButton(this, Except_ThrowInt, _T("Throw &int")),
+    sizerTop->Add(new wxButton(this, Except_ThrowInt, wxT("Throw &int")),
                   0, wxCENTRE | wxALL, 5);
-    sizerTop->Add(new wxButton(this, Except_ThrowObject, _T("Throw &object")),
+    sizerTop->Add(new wxButton(this, Except_ThrowObject, wxT("Throw &object")),
                   0, wxCENTRE | wxALL, 5);
-    sizerTop->Add(new wxButton(this, Except_Crash, _T("&Crash")),
+    sizerTop->Add(new wxButton(this, Except_Crash, wxT("&Crash")),
                   0, wxCENTRE | wxALL, 5);
-    sizerTop->Add(new wxButton(this, wxID_CANCEL, _T("&Cancel")),
+    sizerTop->Add(new wxButton(this, wxID_CANCEL, wxT("&Cancel")),
                   0, wxCENTRE | wxALL, 5);
 
     SetSizer(sizerTop);
@@ -483,7 +483,7 @@ void MyDialog::OnThrowInt(wxCommandEvent
 
 void MyDialog::OnThrowObject(wxCommandEvent& WXUNUSED(event))
 {
-    throw MyException(_T("Exception thrown from MyDialog"));
+    throw MyException(wxT("Exception thrown from MyDialog"));
 }
 
 void MyDialog::OnCrash(wxCommandEvent& WXUNUSED(event))
--- samples/erase/erase.cpp-orig	2009-06-18 18:42:24.165460000 -0500
+++ samples/erase/erase.cpp	2009-06-18 18:42:29.513712000 -0500
@@ -137,31 +137,31 @@ END_EVENT_TABLE()
 
 // frame constructor
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("Erase sample"),
+       : wxFrame(NULL, wxID_ANY, wxT("Erase sample"),
                  wxPoint(50, 50), wxSize(450, 340))
 {
     SetIcon(wxICON(mondrian));
 
-    wxMenu *menuFile = new wxMenu(_T(""), wxMENU_TEAROFF);
-    menuFile->AppendCheckItem(Erase_Menu_UseBuffer, _T("&Use memory DC\tCtrl-M"));
-    menuFile->AppendCheckItem(Erase_Menu_EraseBg, _T("Custom &background\tCtrl-B"));
+    wxMenu *menuFile = new wxMenu(wxT(""), wxMENU_TEAROFF);
+    menuFile->AppendCheckItem(Erase_Menu_UseBuffer, wxT("&Use memory DC\tCtrl-M"));
+    menuFile->AppendCheckItem(Erase_Menu_EraseBg, wxT("Custom &background\tCtrl-B"));
     menuFile->AppendSeparator();
-    menuFile->Append(Erase_Menu_Exit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Erase_Menu_Exit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Erase_Menu_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    helpMenu->Append(Erase_Menu_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
 
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     SetMenuBar(menuBar);
 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets erase sample!"));
+    SetStatusText(wxT("Welcome to wxWidgets erase sample!"));
 #endif // wxUSE_STATUSBAR
 
     m_canvas = new MyCanvas( this );
@@ -185,8 +185,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("This sample shows how you can draw custom background."),
-                 _T("About Erase Sample"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(wxT("This sample shows how you can draw custom background."),
+                 wxT("About Erase Sample"), wxOK | wxICON_INFORMATION, this);
 }
 
 
@@ -243,10 +243,10 @@ void MyCanvas::DoPaint(wxDC& dc)
     dc.DrawBitmap( m_bitmap, 10, 20, true );
 
     dc.SetTextForeground(*wxBLUE);
-    dc.DrawText(_T("This text is drawn from OnPaint"), 65, 65);
+    dc.DrawText(wxT("This text is drawn from OnPaint"), 65, 65);
 
     wxString tmp;
-    tmp.Printf( _T("Hit any key to display more text: %s"), m_text.c_str() );
+    tmp.Printf( wxT("Hit any key to display more text: %s"), m_text.c_str() );
     int w,h;
     dc.GetTextExtent( tmp, &w, &h );
     dc.SetBrush( *wxWHITE_BRUSH );
@@ -257,7 +257,7 @@ void MyCanvas::DoPaint(wxDC& dc)
     wxRegionIterator upd( GetUpdateRegion() );
     while (upd)
     {
-        wxLogDebug( _T("Paint: %d %d %d %d"), upd.GetX(), upd.GetY(), upd.GetWidth(), upd.GetHeight() );
+        wxLogDebug( wxT("Paint: %d %d %d %d"), upd.GetX(), upd.GetY(), upd.GetWidth(), upd.GetHeight() );
         upd ++;
     }
 #endif
@@ -265,7 +265,7 @@ void MyCanvas::DoPaint(wxDC& dc)
 #if 0
     wxSize size = GetSize();
     wxSize client_size = GetClientSize();
-    wxLogDebug( _T("size %d %d client_size %d %d"), size.x, size.y, client_size.x, client_size.y );
+    wxLogDebug( wxT("size %d %d client_size %d %d"), size.x, size.y, client_size.x, client_size.y );
 #endif
 
 #if 0
@@ -312,7 +312,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
         wxBitmap bmp(size.x, size.y);
         dc.SelectObject(bmp);
         dc.Blit(0, 0, size.x, size.y, &dcWin, 0, 0);
-        dc.DrawText(_T("(copy of background)"), 5, 120 );
+        dc.DrawText(wxT("(copy of background)"), 5, 120 );
 
         DoPaint(dc);
 
@@ -352,6 +352,6 @@ void MyCanvas::OnEraseBackground( wxEras
     }
 
     dc.SetTextForeground(*wxRED);
-    dc.DrawText(_T("This text is drawn from OnEraseBackground"), 60, 160);
+    dc.DrawText(wxT("This text is drawn from OnEraseBackground"), 60, 160);
 }
 
--- samples/dialogs/dialogs.cpp-orig	2009-06-18 18:41:50.470098000 -0500
+++ samples/dialogs/dialogs.cpp	2009-06-18 18:42:01.259040000 -0500
@@ -246,12 +246,12 @@ bool MyApp::OnInit()
     m_canvasFont = *wxNORMAL_FONT;
 
     // Create the main frame window
-    MyFrame *frame = new MyFrame((wxFrame *) NULL, _T("wxWidgets dialogs example"));
+    MyFrame *frame = new MyFrame((wxFrame *) NULL, wxT("wxWidgets dialogs example"));
 
     // Make a menubar
     wxMenu *menuDlg = new wxMenu;
 
-    menuDlg->Append(DIALOGS_MESSAGE_BOX, _T("&Message box\tCtrl-M"));
+    menuDlg->Append(DIALOGS_MESSAGE_BOX, wxT("&Message box\tCtrl-M"));
 
 
 #if wxUSE_COLOURDLG || wxUSE_FONTDLG || wxUSE_CHOICEDLG
@@ -259,16 +259,16 @@ bool MyApp::OnInit()
     wxMenu *choices_menu = new wxMenu;
 
     #if wxUSE_COLOURDLG
-        choices_menu->Append(DIALOGS_CHOOSE_COLOUR, _T("&Choose colour"));
+        choices_menu->Append(DIALOGS_CHOOSE_COLOUR, wxT("&Choose colour"));
     #endif // wxUSE_COLOURDLG
 
     #if wxUSE_FONTDLG
-        choices_menu->Append(DIALOGS_CHOOSE_FONT, _T("Choose &font"));
+        choices_menu->Append(DIALOGS_CHOOSE_FONT, wxT("Choose &font"));
     #endif // wxUSE_FONTDLG
 
     #if wxUSE_CHOICEDLG
-        choices_menu->Append(DIALOGS_SINGLE_CHOICE,  _T("&Single choice\tCtrl-C"));
-        choices_menu->Append(DIALOGS_MULTI_CHOICE,  _T("M&ultiple choice\tCtrl-U"));
+        choices_menu->Append(DIALOGS_SINGLE_CHOICE,  wxT("&Single choice\tCtrl-C"));
+        choices_menu->Append(DIALOGS_MULTI_CHOICE,  wxT("M&ultiple choice\tCtrl-U"));
     #endif // wxUSE_CHOICEDLG
 
     #if USE_COLOURDLG_GENERIC || USE_FONTDLG_GENERIC
@@ -276,14 +276,14 @@ bool MyApp::OnInit()
     #endif // USE_COLOURDLG_GENERIC || USE_FONTDLG_GENERIC
 
     #if USE_COLOURDLG_GENERIC
-        choices_menu->Append(DIALOGS_CHOOSE_COLOUR_GENERIC, _T("&Choose colour (generic)"));
+        choices_menu->Append(DIALOGS_CHOOSE_COLOUR_GENERIC, wxT("&Choose colour (generic)"));
     #endif // USE_COLOURDLG_GENERIC
 
     #if USE_FONTDLG_GENERIC
-        choices_menu->Append(DIALOGS_CHOOSE_FONT_GENERIC, _T("Choose &font (generic)"));
+        choices_menu->Append(DIALOGS_CHOOSE_FONT_GENERIC, wxT("Choose &font (generic)"));
     #endif // USE_FONTDLG_GENERIC
 
-    menuDlg->Append(wxID_ANY,_T("&Choices and selectors"),choices_menu);
+    menuDlg->Append(wxID_ANY,wxT("&Choices and selectors"),choices_menu);
 #endif // wxUSE_COLOURDLG || wxUSE_FONTDLG || wxUSE_CHOICEDLG
 
 
@@ -292,15 +292,15 @@ bool MyApp::OnInit()
     wxMenu *entry_menu = new wxMenu;
 
     #if wxUSE_TEXTDLG
-        entry_menu->Append(DIALOGS_TEXT_ENTRY,  _T("Text &entry\tCtrl-E"));
-        entry_menu->Append(DIALOGS_PASSWORD_ENTRY,  _T("&Password entry\tCtrl-P"));
+        entry_menu->Append(DIALOGS_TEXT_ENTRY,  wxT("Text &entry\tCtrl-E"));
+        entry_menu->Append(DIALOGS_PASSWORD_ENTRY,  wxT("&Password entry\tCtrl-P"));
     #endif // wxUSE_TEXTDLG
 
     #if wxUSE_NUMBERDLG
-        entry_menu->Append(DIALOGS_NUM_ENTRY, _T("&Numeric entry\tCtrl-N"));
+        entry_menu->Append(DIALOGS_NUM_ENTRY, wxT("&Numeric entry\tCtrl-N"));
     #endif // wxUSE_NUMBERDLG
 
-    menuDlg->Append(wxID_ANY,_T("&Entry dialogs"),entry_menu);
+    menuDlg->Append(wxID_ANY,wxT("&Entry dialogs"),entry_menu);
 
 #endif // wxUSE_TEXTDLG || wxUSE_NUMBERDLG
 
@@ -308,32 +308,32 @@ bool MyApp::OnInit()
 #if wxUSE_FILEDLG
 
     wxMenu *filedlg_menu = new wxMenu;
-    filedlg_menu->Append(DIALOGS_FILE_OPEN,  _T("&Open file\tCtrl-O"));
-    filedlg_menu->Append(DIALOGS_FILE_OPEN2,  _T("&Second open file\tCtrl-2"));
-    filedlg_menu->Append(DIALOGS_FILES_OPEN,  _T("Open &files\tCtrl-Q"));
-    filedlg_menu->Append(DIALOGS_FILE_SAVE,  _T("Sa&ve file\tCtrl-S"));
+    filedlg_menu->Append(DIALOGS_FILE_OPEN,  wxT("&Open file\tCtrl-O"));
+    filedlg_menu->Append(DIALOGS_FILE_OPEN2,  wxT("&Second open file\tCtrl-2"));
+    filedlg_menu->Append(DIALOGS_FILES_OPEN,  wxT("Open &files\tCtrl-Q"));
+    filedlg_menu->Append(DIALOGS_FILE_SAVE,  wxT("Sa&ve file\tCtrl-S"));
 
     #if USE_FILEDLG_GENERIC
         filedlg_menu->AppendSeparator();
-        filedlg_menu->Append(DIALOGS_FILE_OPEN_GENERIC,  _T("&Open file (generic)"));
-        filedlg_menu->Append(DIALOGS_FILES_OPEN_GENERIC,  _T("Open &files (generic)"));
-        filedlg_menu->Append(DIALOGS_FILE_SAVE_GENERIC,  _T("Sa&ve file (generic)"));
+        filedlg_menu->Append(DIALOGS_FILE_OPEN_GENERIC,  wxT("&Open file (generic)"));
+        filedlg_menu->Append(DIALOGS_FILES_OPEN_GENERIC,  wxT("Open &files (generic)"));
+        filedlg_menu->Append(DIALOGS_FILE_SAVE_GENERIC,  wxT("Sa&ve file (generic)"));
     #endif // USE_FILEDLG_GENERIC
 
-    menuDlg->Append(wxID_ANY,_T("&File operations"),filedlg_menu);
+    menuDlg->Append(wxID_ANY,wxT("&File operations"),filedlg_menu);
 
 #endif // wxUSE_FILEDLG
 
 #if wxUSE_DIRDLG
     wxMenu *dir_menu = new wxMenu;
 
-    dir_menu->Append(DIALOGS_DIR_CHOOSE,  _T("&Choose a directory\tCtrl-D"));
-    dir_menu->Append(DIALOGS_DIRNEW_CHOOSE,  _T("Choose a directory (with \"Ne&w\" button)\tShift-Ctrl-D"));
-    menuDlg->Append(wxID_ANY,_T("&Directory operations"),dir_menu);
+    dir_menu->Append(DIALOGS_DIR_CHOOSE,  wxT("&Choose a directory\tCtrl-D"));
+    dir_menu->Append(DIALOGS_DIRNEW_CHOOSE,  wxT("Choose a directory (with \"Ne&w\" button)\tShift-Ctrl-D"));
+    menuDlg->Append(wxID_ANY,wxT("&Directory operations"),dir_menu);
 
     #if USE_DIRDLG_GENERIC
         dir_menu->AppendSeparator();
-        dir_menu->Append(DIALOGS_GENERIC_DIR_CHOOSE,  _T("&Choose a directory (generic)"));
+        dir_menu->Append(DIALOGS_GENERIC_DIR_CHOOSE,  wxT("&Choose a directory (generic)"));
     #endif // USE_DIRDLG_GENERIC
 
 #endif // wxUSE_DIRDLG
@@ -344,74 +344,74 @@ bool MyApp::OnInit()
     wxMenu *info_menu = new wxMenu;
 
     #if wxUSE_STARTUP_TIPS
-        info_menu->Append(DIALOGS_TIP,  _T("&Tip of the day\tCtrl-T"));
+        info_menu->Append(DIALOGS_TIP,  wxT("&Tip of the day\tCtrl-T"));
     #endif // wxUSE_STARTUP_TIPS
 
     #if wxUSE_PROGRESSDLG
-        info_menu->Append(DIALOGS_PROGRESS, _T("Pro&gress dialog\tCtrl-G"));
+        info_menu->Append(DIALOGS_PROGRESS, wxT("Pro&gress dialog\tCtrl-G"));
     #endif // wxUSE_PROGRESSDLG
 
     #if wxUSE_BUSYINFO
-       info_menu->Append(DIALOGS_BUSYINFO, _T("&Busy info dialog\tCtrl-B"));
+       info_menu->Append(DIALOGS_BUSYINFO, wxT("&Busy info dialog\tCtrl-B"));
     #endif // wxUSE_BUSYINFO
 
     #if wxUSE_LOG_DIALOG
-       info_menu->Append(DIALOGS_LOG_DIALOG, _T("&Log dialog\tCtrl-L"));
+       info_menu->Append(DIALOGS_LOG_DIALOG, wxT("&Log dialog\tCtrl-L"));
     #endif // wxUSE_LOG_DIALOG
 
-    menuDlg->Append(wxID_ANY,_T("&Informative dialogs"),info_menu);
+    menuDlg->Append(wxID_ANY,wxT("&Informative dialogs"),info_menu);
 
 #endif // wxUSE_STARTUP_TIPS || wxUSE_PROGRESSDLG || wxUSE_BUSYINFO || wxUSE_LOG_DIALOG
 
 
 #if wxUSE_FINDREPLDLG
     wxMenu *find_menu = new wxMenu;
-    find_menu->AppendCheckItem(DIALOGS_FIND, _T("&Find dialog\tCtrl-F"));
-    find_menu->AppendCheckItem(DIALOGS_REPLACE, _T("Find and &replace dialog\tShift-Ctrl-F"));
-    menuDlg->Append(wxID_ANY,_T("&Searching"),find_menu);
+    find_menu->AppendCheckItem(DIALOGS_FIND, wxT("&Find dialog\tCtrl-F"));
+    find_menu->AppendCheckItem(DIALOGS_REPLACE, wxT("Find and &replace dialog\tShift-Ctrl-F"));
+    menuDlg->Append(wxID_ANY,wxT("&Searching"),find_menu);
 #endif // wxUSE_FINDREPLDLG
 
 #if USE_MODAL_PRESENTATION
     wxMenu *dialogs_menu = new wxMenu;
-    dialogs_menu->Append(DIALOGS_MODAL, _T("&Modal dialog\tCtrl-W"));
-    dialogs_menu->AppendCheckItem(DIALOGS_MODELESS, _T("Mode&less dialog\tCtrl-Z"));
-    dialogs_menu->Append(DIALOGS_CENTRE_SCREEN, _T("Centered on &screen\tShift-Ctrl-1"));
-    dialogs_menu->Append(DIALOGS_CENTRE_PARENT, _T("Centered on &parent\tShift-Ctrl-2"));
-    menuDlg->Append(wxID_ANY, _T("&Generic dialogs"), dialogs_menu);
+    dialogs_menu->Append(DIALOGS_MODAL, wxT("&Modal dialog\tCtrl-W"));
+    dialogs_menu->AppendCheckItem(DIALOGS_MODELESS, wxT("Mode&less dialog\tCtrl-Z"));
+    dialogs_menu->Append(DIALOGS_CENTRE_SCREEN, wxT("Centered on &screen\tShift-Ctrl-1"));
+    dialogs_menu->Append(DIALOGS_CENTRE_PARENT, wxT("Centered on &parent\tShift-Ctrl-2"));
+    menuDlg->Append(wxID_ANY, wxT("&Generic dialogs"), dialogs_menu);
 #endif // USE_MODAL_PRESENTATION
 
 #if USE_SETTINGS_DIALOG
     wxMenu *sheet_menu = new wxMenu;
-    sheet_menu->Append(DIALOGS_PROPERTY_SHEET, _T("&Standard property sheet\tShift-Ctrl-P"));
-    sheet_menu->Append(DIALOGS_PROPERTY_SHEET_TOOLBOOK, _T("&Toolbook sheet\tShift-Ctrl-T"));
+    sheet_menu->Append(DIALOGS_PROPERTY_SHEET, wxT("&Standard property sheet\tShift-Ctrl-P"));
+    sheet_menu->Append(DIALOGS_PROPERTY_SHEET_TOOLBOOK, wxT("&Toolbook sheet\tShift-Ctrl-T"));
 
     if (wxPlatformIs(wxPORT_MAC))
-        sheet_menu->Append(DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK, _T("Button &Toolbook sheet\tShift-Ctrl-U"));
+        sheet_menu->Append(DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK, wxT("Button &Toolbook sheet\tShift-Ctrl-U"));
 /*
 #ifdef __WXMAC__
-    sheet_menu->Append(DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK, _T("Button &Toolbook sheet\tShift-Ctrl-U"));
+    sheet_menu->Append(DIALOGS_PROPERTY_SHEET_BUTTONTOOLBOOK, wxT("Button &Toolbook sheet\tShift-Ctrl-U"));
 #endif
 */
-    menuDlg->Append(wxID_ANY, _T("&Property sheets"), sheet_menu);
+    menuDlg->Append(wxID_ANY, wxT("&Property sheets"), sheet_menu);
 #endif // USE_SETTINGS_DIALOG
 
-    menuDlg->Append(DIALOGS_REQUEST, _T("&Request user attention\tCtrl-R"));
+    menuDlg->Append(DIALOGS_REQUEST, wxT("&Request user attention\tCtrl-R"));
 
     menuDlg->AppendSeparator();
-    menuDlg->Append(wxID_EXIT, _T("E&xit\tAlt-X"));
+    menuDlg->Append(wxID_EXIT, wxT("E&xit\tAlt-X"));
 
 #if wxUSE_ABOUTDLG
     wxMenu *menuHelp = new wxMenu;
-    menuHelp->Append(DIALOGS_ABOUTDLG_SIMPLE, _T("&About (simple)...\tF1"));
-    menuHelp->Append(DIALOGS_ABOUTDLG_FANCY, _T("About (&fancy)...\tShift-F1"));
-    menuHelp->Append(DIALOGS_ABOUTDLG_FULL, _T("About (f&ull)...\tCtrl-F1"));
-    menuHelp->Append(DIALOGS_ABOUTDLG_CUSTOM, _T("About (&custom)...\tCtrl-Shift-F1"));
+    menuHelp->Append(DIALOGS_ABOUTDLG_SIMPLE, wxT("&About (simple)...\tF1"));
+    menuHelp->Append(DIALOGS_ABOUTDLG_FANCY, wxT("About (&fancy)...\tShift-F1"));
+    menuHelp->Append(DIALOGS_ABOUTDLG_FULL, wxT("About (f&ull)...\tCtrl-F1"));
+    menuHelp->Append(DIALOGS_ABOUTDLG_CUSTOM, wxT("About (&custom)...\tCtrl-Shift-F1"));
 #endif // wxUSE_ABOUTDLG
 
     wxMenuBar *menubar = new wxMenuBar;
-    menubar->Append(menuDlg, _T("&Dialogs"));
+    menubar->Append(menuDlg, wxT("&Dialogs"));
 #if wxUSE_ABOUTDLG
-    menubar->Append(menuHelp, _T("&Help"));
+    menubar->Append(menuHelp, wxT("&Help"));
 #endif // wxUSE_ABOUTDLG
 
     frame->SetMenuBar(menubar);
@@ -471,7 +471,7 @@ void MyFrame::ChooseColour(wxCommandEven
     m_clrData.SetColour(myCanvas->GetBackgroundColour());
 
     wxColourDialog dialog(this, &m_clrData);
-    dialog.SetTitle(_T("Choose the background colour"));
+    dialog.SetTitle(wxT("Choose the background colour"));
     if (dialog.ShowModal() == wxID_OK)
     {
         m_clrData = dialog.GetColourData();
@@ -582,8 +582,8 @@ void MyFrame::LogDialog(wxCommandEvent& 
 
 void MyFrame::MessageBox(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageDialog dialog( NULL, _T("This is a message box\nA long, long string to test out the message box properly"),
-        _T("Message box text"), wxNO_DEFAULT|wxYES_NO|wxCANCEL|wxICON_INFORMATION);
+    wxMessageDialog dialog( NULL, wxT("This is a message box\nA long, long string to test out the message box properly"),
+        wxT("Message box text"), wxNO_DEFAULT|wxYES_NO|wxCANCEL|wxICON_INFORMATION);
 
     switch ( dialog.ShowModal() )
     {
@@ -607,54 +607,54 @@ void MyFrame::MessageBox(wxCommandEvent&
 #if wxUSE_NUMBERDLG
 void MyFrame::NumericEntry(wxCommandEvent& WXUNUSED(event) )
 {
-    long res = wxGetNumberFromUser( _T("This is some text, actually a lot of text.\n")
-                                    _T("Even two rows of text."),
-                                    _T("Enter a number:"), _T("Numeric input test"),
+    long res = wxGetNumberFromUser( wxT("This is some text, actually a lot of text.\n")
+                                    wxT("Even two rows of text."),
+                                    wxT("Enter a number:"), wxT("Numeric input test"),
                                      50, 0, 100, this );
 
     wxString msg;
     int icon;
     if ( res == -1 )
     {
-        msg = _T("Invalid number entered or dialog cancelled.");
+        msg = wxT("Invalid number entered or dialog cancelled.");
         icon = wxICON_HAND;
     }
     else
     {
-        msg.Printf(_T("You've entered %lu"), res );
+        msg.Printf(wxT("You've entered %lu"), res );
         icon = wxICON_INFORMATION;
     }
 
-    wxMessageBox(msg, _T("Numeric test result"), wxOK | icon, this);
+    wxMessageBox(msg, wxT("Numeric test result"), wxOK | icon, this);
 }
 #endif // wxUSE_NUMBERDLG
 
 #if wxUSE_TEXTDLG
 void MyFrame::PasswordEntry(wxCommandEvent& WXUNUSED(event))
 {
-    wxString pwd = wxGetPasswordFromUser(_T("Enter password:"),
-                                         _T("Password entry dialog"),
+    wxString pwd = wxGetPasswordFromUser(wxT("Enter password:"),
+                                         wxT("Password entry dialog"),
                                          wxEmptyString,
                                          this);
     if ( !pwd.empty() )
     {
         wxMessageBox(wxString::Format(wxT("Your password is '%s'"), pwd.c_str()),
-                     _T("Got password"), wxOK | wxICON_INFORMATION, this);
+                     wxT("Got password"), wxOK | wxICON_INFORMATION, this);
     }
 }
 
 void MyFrame::TextEntry(wxCommandEvent& WXUNUSED(event))
 {
     wxTextEntryDialog dialog(this,
-                             _T("This is a small sample\n")
-                             _T("A long, long string to test out the text entrybox"),
-                             _T("Please enter a string"),
-                             _T("Default value"),
+                             wxT("This is a small sample\n")
+                             wxT("A long, long string to test out the text entrybox"),
+                             wxT("Please enter a string"),
+                             wxT("Default value"),
                              wxOK | wxCANCEL);
 
     if (dialog.ShowModal() == wxID_OK)
     {
-        wxMessageBox(dialog.GetValue(), _T("Got string"), wxOK | wxICON_INFORMATION, this);
+        wxMessageBox(dialog.GetValue(), wxT("Got string"), wxOK | wxICON_INFORMATION, this);
     }
 }
 #endif // wxUSE_TEXTDLG
@@ -662,19 +662,19 @@ void MyFrame::TextEntry(wxCommandEvent& 
 #if wxUSE_CHOICEDLG
 void MyFrame::SingleChoice(wxCommandEvent& WXUNUSED(event) )
 {
-    const wxString choices[] = { _T("One"), _T("Two"), _T("Three"), _T("Four"), _T("Five") } ;
+    const wxString choices[] = { wxT("One"), wxT("Two"), wxT("Three"), wxT("Four"), wxT("Five") } ;
 
     wxSingleChoiceDialog dialog(this,
-                                _T("This is a small sample\n")
-                                _T("A single-choice convenience dialog"),
-                                _T("Please select a value"),
+                                wxT("This is a small sample\n")
+                                wxT("A single-choice convenience dialog"),
+                                wxT("Please select a value"),
                                 WXSIZEOF(choices), choices);
 
     dialog.SetSelection(2);
 
     if (dialog.ShowModal() == wxID_OK)
     {
-        wxMessageDialog dialog2(this, dialog.GetStringSelection(), _T("Got string"));
+        wxMessageDialog dialog2(this, dialog.GetStringSelection(), wxT("Got string"));
         dialog2.ShowModal();
     }
 }
@@ -683,16 +683,16 @@ void MyFrame::MultiChoice(wxCommandEvent
 {
     const wxString choices[] =
     {
-        _T("One"), _T("Two"), _T("Three"), _T("Four"), _T("Five"),
-        _T("Six"), _T("Seven"), _T("Eight"), _T("Nine"), _T("Ten"),
-        _T("Eleven"), _T("Twelve"), _T("Seventeen"),
+        wxT("One"), wxT("Two"), wxT("Three"), wxT("Four"), wxT("Five"),
+        wxT("Six"), wxT("Seven"), wxT("Eight"), wxT("Nine"), wxT("Ten"),
+        wxT("Eleven"), wxT("Twelve"), wxT("Seventeen"),
     };
 
     wxArrayInt selections;
     size_t count = wxGetMultipleChoices(selections,
-                                        _T("This is a small sample\n")
-                                        _T("A multi-choice convenience dialog"),
-                                        _T("Please select a value"),
+                                        wxT("This is a small sample\n")
+                                        wxT("A multi-choice convenience dialog"),
+                                        wxT("Please select a value"),
                                         WXSIZEOF(choices), choices,
                                         this);
     if ( count )
@@ -717,13 +717,13 @@ void MyFrame::FileOpen(wxCommandEvent& W
     wxFileDialog dialog
                  (
                     this,
-                    _T("Testing open file dialog"),
+                    wxT("Testing open file dialog"),
                     wxEmptyString,
                     wxEmptyString,
 #ifdef __WXMOTIF__
-                    _T("C++ files (*.cpp)|*.cpp")
+                    wxT("C++ files (*.cpp)|*.cpp")
 #else
-                    _T("C++ files (*.cpp;*.h)|*.cpp;*.h")
+                    wxT("C++ files (*.cpp;*.h)|*.cpp;*.h")
 #endif
                  );
 
@@ -733,13 +733,13 @@ void MyFrame::FileOpen(wxCommandEvent& W
     if (dialog.ShowModal() == wxID_OK)
     {
         wxString info;
-        info.Printf(_T("Full file name: %s\n")
-                    _T("Path: %s\n")
-                    _T("Name: %s"),
+        info.Printf(wxT("Full file name: %s\n")
+                    wxT("Path: %s\n")
+                    wxT("Name: %s"),
                     dialog.GetPath().c_str(),
                     dialog.GetDirectory().c_str(),
                     dialog.GetFilename().c_str());
-        wxMessageDialog dialog2(this, info, _T("Selected file"));
+        wxMessageDialog dialog2(this, info, wxT("Selected file"));
         dialog2.ShowModal();
     }
 }
@@ -751,12 +751,12 @@ void MyFrame::FileOpen2(wxCommandEvent& 
 {
     static wxString s_extDef;
     wxString path = wxFileSelector(
-                                    _T("Select the file to load"),
+                                    wxT("Select the file to load"),
                                     wxEmptyString, wxEmptyString,
                                     s_extDef,
                                     wxString::Format
                                     (
-                                        _T("Waveform (*.wav)|*.wav|Plain text (*.txt)|*.txt|All files (%s)|%s"),
+                                        wxT("Waveform (*.wav)|*.wav|Plain text (*.txt)|*.txt|All files (%s)|%s"),
                                         wxFileSelectorDefaultWildcardStr,
                                         wxFileSelectorDefaultWildcardStr
                                     ),
@@ -768,9 +768,9 @@ void MyFrame::FileOpen2(wxCommandEvent& 
         return;
 
     // it is just a sample, would use wxSplitPath in real program
-    s_extDef = path.AfterLast(_T('.'));
+    s_extDef = path.AfterLast(wxT('.'));
 
-    wxLogMessage(_T("You selected the file '%s', remembered extension '%s'"),
+    wxLogMessage(wxT("You selected the file '%s', remembered extension '%s'"),
                  (const wxChar*) path, (const wxChar*) s_extDef);
 }
 
@@ -778,16 +778,16 @@ void MyFrame::FilesOpen(wxCommandEvent& 
 {
     wxString wildcards =
 #ifdef __WXMOTIF__
-                    _T("C++ files (*.cpp)|*.cpp");
+                    wxT("C++ files (*.cpp)|*.cpp");
 #else
                     wxString::Format
                     (
-                        _T("All files (%s)|%s|C++ files (*.cpp;*.h)|*.cpp;*.h"),
+                        wxT("All files (%s)|%s|C++ files (*.cpp;*.h)|*.cpp;*.h"),
                         wxFileSelectorDefaultWildcardStr,
                         wxFileSelectorDefaultWildcardStr
                     );
 #endif
-    wxFileDialog dialog(this, _T("Testing open multiple file dialog"),
+    wxFileDialog dialog(this, wxT("Testing open multiple file dialog"),
                         wxEmptyString, wxEmptyString, wildcards,
                         wxFD_OPEN|wxFD_MULTIPLE);
 
@@ -802,15 +802,15 @@ void MyFrame::FilesOpen(wxCommandEvent& 
         size_t count = paths.GetCount();
         for ( size_t n = 0; n < count; n++ )
         {
-            s.Printf(_T("File %d: %s (%s)\n"),
+            s.Printf(wxT("File %d: %s (%s)\n"),
                      (int)n, paths[n].c_str(), filenames[n].c_str());
 
             msg += s;
         }
-        s.Printf(_T("Filter index: %d"), dialog.GetFilterIndex());
+        s.Printf(wxT("Filter index: %d"), dialog.GetFilterIndex());
         msg += s;
 
-        wxMessageDialog dialog2(this, msg, _T("Selected files"));
+        wxMessageDialog dialog2(this, msg, wxT("Selected files"));
         dialog2.ShowModal();
     }
 }
@@ -818,17 +818,17 @@ void MyFrame::FilesOpen(wxCommandEvent& 
 void MyFrame::FileSave(wxCommandEvent& WXUNUSED(event) )
 {
     wxFileDialog dialog(this,
-                        _T("Testing save file dialog"),
+                        wxT("Testing save file dialog"),
                         wxEmptyString,
-                        _T("myletter.doc"),
-                        _T("Text files (*.txt)|*.txt|Document files (*.doc)|*.doc"),
+                        wxT("myletter.doc"),
+                        wxT("Text files (*.txt)|*.txt|Document files (*.doc)|*.doc"),
                         wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
 
     dialog.SetFilterIndex(1);
 
     if (dialog.ShowModal() == wxID_OK)
     {
-        wxLogMessage(_T("%s, filter %d"),
+        wxLogMessage(wxT("%s, filter %d"),
                      dialog.GetPath().c_str(), dialog.GetFilterIndex());
     }
 }
@@ -840,10 +840,10 @@ void MyFrame::FileOpenGeneric(wxCommandE
     wxGenericFileDialog dialog
                  (
                     this,
-                    _T("Testing open file dialog"),
+                    wxT("Testing open file dialog"),
                     wxEmptyString,
                     wxEmptyString,
-                    _T("C++ files (*.cpp;*.h)|*.cpp;*.h")
+                    wxT("C++ files (*.cpp;*.h)|*.cpp;*.h")
                  );
 
     dialog.SetDirectory(wxGetHomeDir());
@@ -851,13 +851,13 @@ void MyFrame::FileOpenGeneric(wxCommandE
     if (dialog.ShowModal() == wxID_OK)
     {
         wxString info;
-        info.Printf(_T("Full file name: %s\n")
-                    _T("Path: %s\n")
-                    _T("Name: %s"),
+        info.Printf(wxT("Full file name: %s\n")
+                    wxT("Path: %s\n")
+                    wxT("Name: %s"),
                     dialog.GetPath().c_str(),
                     dialog.GetDirectory().c_str(),
                     dialog.GetFilename().c_str());
-        wxMessageDialog dialog2(this, info, _T("Selected file"));
+        wxMessageDialog dialog2(this, info, wxT("Selected file"));
         dialog2.ShowModal();
     }
 }
@@ -868,8 +868,8 @@ void MyFrame::FilesOpenGeneric(wxCommand
     int buttons = wxSystemOptions::GetOptionInt(wxT("wince.dialog.real-ok-cancel"));
     wxSystemOptions::SetOption(wxT("wince.dialog.real-ok-cancel"), 1);
 
-    wxString wildcards = _T("All files (*.*)|*.*|C++ files (*.cpp;*.h)|*.cpp;*.h");
-    wxGenericFileDialog dialog(this, _T("Testing open multiple file dialog"),
+    wxString wildcards = wxT("All files (*.*)|*.*|C++ files (*.cpp;*.h)|*.cpp;*.h");
+    wxGenericFileDialog dialog(this, wxT("Testing open multiple file dialog"),
                         wxEmptyString, wxEmptyString, wildcards,
                         wxFD_MULTIPLE);
 
@@ -884,15 +884,15 @@ void MyFrame::FilesOpenGeneric(wxCommand
         size_t count = paths.GetCount();
         for ( size_t n = 0; n < count; n++ )
         {
-            s.Printf(_T("File %d: %s (%s)\n"),
+            s.Printf(wxT("File %d: %s (%s)\n"),
                      (int)n, paths[n].c_str(), filenames[n].c_str());
 
             msg += s;
         }
-        s.Printf(_T("Filter index: %d"), dialog.GetFilterIndex());
+        s.Printf(wxT("Filter index: %d"), dialog.GetFilterIndex());
         msg += s;
 
-        wxMessageDialog dialog2(this, msg, _T("Selected files"));
+        wxMessageDialog dialog2(this, msg, wxT("Selected files"));
         dialog2.ShowModal();
     }
 
@@ -903,17 +903,17 @@ void MyFrame::FilesOpenGeneric(wxCommand
 void MyFrame::FileSaveGeneric(wxCommandEvent& WXUNUSED(event) )
 {
     wxGenericFileDialog dialog(this,
-                        _T("Testing save file dialog"),
+                        wxT("Testing save file dialog"),
                         wxEmptyString,
-                        _T("myletter.doc"),
-                        _T("Text files (*.txt)|*.txt|Document files (*.doc)|*.doc"),
+                        wxT("myletter.doc"),
+                        wxT("Text files (*.txt)|*.txt|Document files (*.doc)|*.doc"),
                         wxFD_SAVE|wxFD_OVERWRITE_PROMPT);
 
     dialog.SetFilterIndex(1);
 
     if (dialog.ShowModal() == wxID_OK)
     {
-        wxLogMessage(_T("%s, filter %d"),
+        wxLogMessage(wxT("%s, filter %d"),
                      dialog.GetPath().c_str(), dialog.GetFilterIndex());
     }
 }
@@ -926,11 +926,11 @@ void MyFrame::DoDirChoose(int style)
     wxString dirHome;
     wxGetHomeDir(&dirHome);
 
-    wxDirDialog dialog(this, _T("Testing directory picker"), dirHome, style);
+    wxDirDialog dialog(this, wxT("Testing directory picker"), dirHome, style);
 
     if (dialog.ShowModal() == wxID_OK)
     {
-        wxLogMessage(_T("Selected path: %s"), dialog.GetPath().c_str());
+        wxLogMessage(wxT("Selected path: %s"), dialog.GetPath().c_str());
     }
 }
 
@@ -952,11 +952,11 @@ void MyFrame::GenericDirChoose(wxCommand
     wxString dirHome;
     wxGetHomeDir(&dirHome);
 
-    wxGenericDirDialog dialog(this, _T("Testing generic directory picker"), dirHome);
+    wxGenericDirDialog dialog(this, wxT("Testing generic directory picker"), dirHome);
 
     if (dialog.ShowModal() == wxID_OK)
     {
-        wxMessageDialog dialog2(this, dialog.GetPath(), _T("Selected path"));
+        wxMessageDialog dialog2(this, dialog.GetPath(), wxT("Selected path"));
         dialog2.ShowModal();
     }
 }
@@ -997,18 +997,18 @@ void MyFrame::ModelessDlg(wxCommandEvent
 
 void MyFrame::DlgCenteredScreen(wxCommandEvent& WXUNUSED(event))
 {
-    wxDialog dlg(this, wxID_ANY, _T("Dialog centered on screen"),
+    wxDialog dlg(this, wxID_ANY, wxT("Dialog centered on screen"),
                  wxDefaultPosition, wxSize(200, 100));
-    (new wxButton(&dlg, wxID_OK, _T("Close")))->Centre();
+    (new wxButton(&dlg, wxID_OK, wxT("Close")))->Centre();
     dlg.CentreOnScreen();
     dlg.ShowModal();
 }
 
 void MyFrame::DlgCenteredParent(wxCommandEvent& WXUNUSED(event))
 {
-    wxDialog dlg(this, wxID_ANY, _T("Dialog centered on parent"),
+    wxDialog dlg(this, wxID_ANY, wxT("Dialog centered on parent"),
                  wxDefaultPosition, wxSize(200, 100));
-    (new wxButton(&dlg, wxID_OK, _T("Close")))->Centre();
+    (new wxButton(&dlg, wxID_OK, wxT("Close")))->Centre();
     dlg.CentreOnParent();
     dlg.ShowModal();
 }
@@ -1029,13 +1029,13 @@ void MyFrame::ShowTip(wxCommandEvent& WX
         s_index = rand() % 5;
     }
 
-    wxTipProvider *tipProvider = wxCreateFileTipProvider(_T("tips.txt"), s_index);
+    wxTipProvider *tipProvider = wxCreateFileTipProvider(wxT("tips.txt"), s_index);
 
     bool showAtStartup = wxShowTip(this, tipProvider);
 
     if ( showAtStartup )
     {
-        wxMessageBox(_T("Will show tips on startup"), _T("Tips dialog"),
+        wxMessageBox(wxT("Will show tips on startup"), wxT("Tips dialog"),
                      wxOK | wxICON_INFORMATION, this);
     }
 
@@ -1054,7 +1054,7 @@ void MyFrame::OnPropertySheet(wxCommandE
 
 void MyFrame::OnRequestUserAttention(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogStatus(_T("Sleeping for 3 seconds to allow you to switch to another window"));
+    wxLogStatus(wxT("Sleeping for 3 seconds to allow you to switch to another window"));
 
     wxSleep(3);
 
@@ -1072,8 +1072,8 @@ void MyFrame::ShowProgress( wxCommandEve
 {
     static const int max = 100;
 
-    wxProgressDialog dialog(_T("Progress dialog example"),
-                            _T("An informative message"),
+    wxProgressDialog dialog(wxT("Progress dialog example"),
+                            wxT("An informative message"),
                             max,    // range
                             this,   // parent
                             wxPD_CAN_ABORT |
@@ -1099,15 +1099,15 @@ void MyFrame::ShowProgress( wxCommandEve
 
         if ( i == max )
         {
-            msg = _T("That's all, folks!");
+            msg = wxT("That's all, folks!");
         }
         else if ( !determinate )
         {
-            msg = _T("Testing indeterminate mode");
+            msg = wxT("Testing indeterminate mode");
         }
         else if ( determinate )
         {
-            msg = _T("Now in standard determinate mode");
+            msg = wxT("Now in standard determinate mode");
         }
 
         // will be set to true if "Skip" button was pressed
@@ -1127,8 +1127,8 @@ void MyFrame::ShowProgress( wxCommandEve
 
         if ( !cont )
         {
-            if ( wxMessageBox(_T("Do you really want to cancel?"),
-                              _T("Progress dialog question"),  // caption
+            if ( wxMessageBox(wxT("Do you really want to cancel?"),
+                              wxT("Progress dialog question"),  // caption
                               wxYES_NO | wxICON_QUESTION) == wxYES )
                 break;
 
@@ -1153,18 +1153,18 @@ void MyFrame::ShowProgress( wxCommandEve
 
 static void InitAboutInfoMinimal(wxAboutDialogInfo& info)
 {
-    info.SetName(_T("Dialogs Sample"));
+    info.SetName(wxT("Dialogs Sample"));
     info.SetVersion(wxVERSION_NUM_DOT_STRING_T);
-    info.SetDescription(_T("This sample shows different wxWidgets dialogs"));
-    info.SetCopyright(_T("(C) 1998-2006 wxWidgets dev team"));
-    info.AddDeveloper(_T("Vadim Zeitlin"));
+    info.SetDescription(wxT("This sample shows different wxWidgets dialogs"));
+    info.SetCopyright(wxT("(C) 1998-2006 wxWidgets dev team"));
+    info.AddDeveloper(wxT("Vadim Zeitlin"));
 }
 
 static void InitAboutInfoWebsite(wxAboutDialogInfo& info)
 {
     InitAboutInfoMinimal(info);
 
-    info.SetWebSite(_T("http://www.wxwidgets.org/"), _T("wxWidgets web site"));
+    info.SetWebSite(wxT("http://www.wxwidgets.org/"), wxT("wxWidgets web site"));
 }
 
 static void InitAboutInfoAll(wxAboutDialogInfo& info)
@@ -1172,13 +1172,13 @@ static void InitAboutInfoAll(wxAboutDial
     InitAboutInfoMinimal(info);
 
     // we can add a second developer
-    info.AddDeveloper(_T("A.N. Other"));
+    info.AddDeveloper(wxT("A.N. Other"));
 
     // or we can add several persons at once like this
     static const wxChar *docwriters[] =
     {
-        _T("First D. Writer"),
-        _T("Second One"),
+        wxT("First D. Writer"),
+        wxT("Second One"),
     };
 
     info.SetDocWriters(wxArrayString(WXSIZEOF(docwriters), docwriters));
@@ -1197,7 +1197,7 @@ static void InitAboutInfoAll(wxAboutDial
 "                    ...and so on and so forth...\n"
     ));
 
-    info.AddTranslator(_T("Wun Ngo Wen (Martian)"));
+    info.AddTranslator(wxT("Wun Ngo Wen (Martian)"));
 }
 
 void MyFrame::ShowSimpleAboutDialog(wxCommandEvent& WXUNUSED(event))
@@ -1237,7 +1237,7 @@ public:
     virtual void DoAddCustomControls()
     {
         AddControl(new wxStaticLine(this), wxSizerFlags().Expand());
-        AddText(_T("Some custom text"));
+        AddText(wxT("Some custom text"));
         AddControl(new wxStaticLine(this), wxSizerFlags().Expand());
     }
 };
@@ -1259,7 +1259,7 @@ void MyFrame::ShowBusyInfo(wxCommandEven
 {
     wxWindowDisabler disableAll;
 
-    wxBusyInfo info(_T("Working, please wait..."), this);
+    wxBusyInfo info(wxT("Working, please wait..."), this);
 
     for ( int i = 0; i < 18; i++ )
     {
@@ -1288,7 +1288,7 @@ void MyFrame::ShowReplaceDialog( wxComma
                            (
                             this,
                             &m_findData,
-                            _T("Find and replace dialog"),
+                            wxT("Find and replace dialog"),
                             wxFR_REPLACEDIALOG
                            );
 
@@ -1309,7 +1309,7 @@ void MyFrame::ShowFindDialog( wxCommandE
                         (
                             this,
                             &m_findData,
-                            _T("Find dialog"),
+                            wxT("Find dialog"),
                             // just for testing
                             wxFR_NOWHOLEWORD
                         );
@@ -1321,10 +1321,10 @@ void MyFrame::ShowFindDialog( wxCommandE
 static wxString DecodeFindDialogEventFlags(int flags)
 {
     wxString str;
-    str << (flags & wxFR_DOWN ? _T("down") : _T("up")) << _T(", ")
-        << (flags & wxFR_WHOLEWORD ? _T("whole words only, ") : _T(""))
-        << (flags & wxFR_MATCHCASE ? _T("") : _T("not "))
-        << _T("case sensitive");
+    str << (flags & wxFR_DOWN ? wxT("down") : wxT("up")) << wxT(", ")
+        << (flags & wxFR_WHOLEWORD ? wxT("whole words only, ") : wxT(""))
+        << (flags & wxFR_MATCHCASE ? wxT("") : wxT("not "))
+        << wxT("case sensitive");
 
     return str;
 }
@@ -1344,7 +1344,7 @@ void MyFrame::OnFindDialog(wxFindDialogE
                 type == wxEVT_COMMAND_FIND_REPLACE_ALL )
     {
         wxLogMessage(wxT("Replace %s'%s' with '%s' (flags: %s)"),
-                     type == wxEVT_COMMAND_FIND_REPLACE_ALL ? _T("all ") : wxT(""),
+                     type == wxEVT_COMMAND_FIND_REPLACE_ALL ? wxT("all ") : wxT(""),
                      event.GetFindString().c_str(),
                      event.GetReplaceString().c_str(),
                      DecodeFindDialogEventFlags(event.GetFlags()).c_str());
@@ -1357,22 +1357,22 @@ void MyFrame::OnFindDialog(wxFindDialogE
         const wxChar *txt;
         if ( dlg == m_dlgFind )
         {
-            txt = _T("Find");
+            txt = wxT("Find");
             idMenu = DIALOGS_FIND;
             m_dlgFind = NULL;
         }
         else if ( dlg == m_dlgReplace )
         {
-            txt = _T("Replace");
+            txt = wxT("Replace");
             idMenu = DIALOGS_REPLACE;
             m_dlgReplace = NULL;
         }
         else
         {
-            txt = _T("Unknown");
+            txt = wxT("Unknown");
             idMenu = wxID_ANY;
 
-            wxFAIL_MSG( _T("unexpected event") );
+            wxFAIL_MSG( wxT("unexpected event") );
         }
 
         wxLogMessage(wxT("%s dialog is being closed."), txt);
@@ -1403,9 +1403,9 @@ void MyCanvas::OnPaint(wxPaintEvent& WXU
     dc.SetTextForeground(wxGetApp().m_canvasTextColour);
     dc.SetBackgroundMode(wxTRANSPARENT);
     dc.DrawText(
-                _T("wxWidgets common dialogs")
+                wxT("wxWidgets common dialogs")
 #if !defined(__SMARTPHONE__)
-                _T(" test application")
+                wxT(" test application")
 #endif
                 , 10, 10);
 }
@@ -1417,12 +1417,12 @@ void MyCanvas::OnPaint(wxPaintEvent& WXU
 // ----------------------------------------------------------------------------
 
 MyModelessDialog::MyModelessDialog(wxWindow *parent)
-                : wxDialog(parent, wxID_ANY, wxString(_T("Modeless dialog")))
+                : wxDialog(parent, wxID_ANY, wxString(wxT("Modeless dialog")))
 {
     wxBoxSizer *sizerTop = new wxBoxSizer(wxVERTICAL);
 
-    wxButton *btn = new wxButton(this, DIALOGS_MODELESS_BTN, _T("Press me"));
-    wxCheckBox *check = new wxCheckBox(this, wxID_ANY, _T("Should be disabled"));
+    wxButton *btn = new wxButton(this, DIALOGS_MODELESS_BTN, wxT("Press me"));
+    wxCheckBox *check = new wxCheckBox(this, wxID_ANY, wxT("Should be disabled"));
     check->Disable();
 
     sizerTop->Add(btn, 1, wxEXPAND | wxALL, 5);
@@ -1436,7 +1436,7 @@ MyModelessDialog::MyModelessDialog(wxWin
 
 void MyModelessDialog::OnButton(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Button pressed in modeless dialog"), _T("Info"),
+    wxMessageBox(wxT("Button pressed in modeless dialog"), wxT("Info"),
                  wxOK | wxICON_INFORMATION, this);
 }
 
@@ -1444,8 +1444,8 @@ void MyModelessDialog::OnClose(wxCloseEv
 {
     if ( event.CanVeto() )
     {
-        wxMessageBox(_T("Use the menu item to close this dialog"),
-                     _T("Modeless dialog"),
+        wxMessageBox(wxT("Use the menu item to close this dialog"),
+                     wxT("Modeless dialog"),
                      wxOK | wxICON_INFORMATION, this);
 
         event.Veto();
@@ -1457,15 +1457,15 @@ void MyModelessDialog::OnClose(wxCloseEv
 // ----------------------------------------------------------------------------
 
 MyModalDialog::MyModalDialog(wxWindow *parent)
-             : wxDialog(parent, wxID_ANY, wxString(_T("Modal dialog")))
+             : wxDialog(parent, wxID_ANY, wxString(wxT("Modal dialog")))
 {
     wxBoxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
-    m_btnModal = new wxButton(this, wxID_ANY, _T("&Modal dialog..."));
-    m_btnModeless = new wxButton(this, wxID_ANY, _T("Mode&less dialog"));
-    m_btnDelete = new wxButton(this, wxID_ANY, _T("&Delete button"));
+    m_btnModal = new wxButton(this, wxID_ANY, wxT("&Modal dialog..."));
+    m_btnModeless = new wxButton(this, wxID_ANY, wxT("Mode&less dialog"));
+    m_btnDelete = new wxButton(this, wxID_ANY, wxT("&Delete button"));
 
-    wxButton *btnOk = new wxButton(this, wxID_CANCEL, _T("&Close"));
+    wxButton *btnOk = new wxButton(this, wxID_CANCEL, wxT("&Close"));
     sizerTop->Add(m_btnModal, 0, wxALIGN_CENTER | wxALL, 5);
     sizerTop->Add(m_btnModeless, 0, wxALIGN_CENTER | wxALL, 5);
     sizerTop->Add(m_btnDelete, 0, wxALIGN_CENTER | wxALL, 5);
@@ -1492,11 +1492,11 @@ void MyModalDialog::OnButton(wxCommandEv
     else if ( event.GetEventObject() == m_btnModal )
     {
 #if wxUSE_TEXTDLG
-        wxGetTextFromUser(_T("Dummy prompt"),
-                          _T("Modal dialog called from dialog"),
+        wxGetTextFromUser(wxT("Dummy prompt"),
+                          wxT("Modal dialog called from dialog"),
                           wxEmptyString, this);
 #else
-        wxMessageBox(_T("Modal dialog called from dialog"));
+        wxMessageBox(wxT("Modal dialog called from dialog"));
 #endif // wxUSE_TEXTDLG
     }
     else if ( event.GetEventObject() == m_btnModeless )
--- samples/ownerdrw/ownerdrw.cpp-orig	2009-06-18 18:41:36.821514000 -0500
+++ samples/ownerdrw/ownerdrw.cpp	2009-06-18 18:41:44.919560000 -0500
@@ -89,7 +89,7 @@ IMPLEMENT_APP(OwnerDrawnApp)
 bool OwnerDrawnApp::OnInit(void)
 {
     OwnerDrawnFrame *pFrame
-        = new OwnerDrawnFrame(NULL, _T("wxWidgets Ownerdraw Sample"),
+        = new OwnerDrawnFrame(NULL, wxT("wxWidgets Ownerdraw Sample"),
                               50, 50, 450, 340);
 
     SetTopWindow(pFrame);
@@ -115,75 +115,75 @@ void OwnerDrawnFrame::InitMenu()
            fontBmp(14, wxDEFAULT, wxNORMAL, wxNORMAL, false);
 
     // sorry for my artistic skills...
-    wxBitmap bmpBell(_T("bell")),
-             bmpSound(_T("sound")),
-             bmpNoSound(_T("nosound")),
-             bmpInfo(_T("info")),
-             bmpInfo_mono(_T("info_mono"));
+    wxBitmap bmpBell(wxT("bell")),
+             bmpSound(wxT("sound")),
+             bmpNoSound(wxT("nosound")),
+             bmpInfo(wxT("info")),
+             bmpInfo_mono(wxT("info_mono"));
 
     // construct submenu
-    pItem = new wxMenuItem(sub_menu, Menu_Sub1, _T("Submenu &first"), _T("large"));
+    pItem = new wxMenuItem(sub_menu, Menu_Sub1, wxT("Submenu &first"), wxT("large"));
 
     pItem->SetFont(fontLarge);
     sub_menu->Append(pItem);
 
-    pItem = new wxMenuItem(sub_menu, Menu_Sub2, _T("Submenu &second"), _T("italic"),
+    pItem = new wxMenuItem(sub_menu, Menu_Sub2, wxT("Submenu &second"), wxT("italic"),
                            wxITEM_CHECK);
     pItem->SetFont(fontItalic);
     sub_menu->Append(pItem);
 
-    pItem = new wxMenuItem(sub_menu, Menu_Sub3, _T("Submenu &third"), _T("underlined"),
+    pItem = new wxMenuItem(sub_menu, Menu_Sub3, wxT("Submenu &third"), wxT("underlined"),
                            wxITEM_CHECK);
     pItem->SetFont(fontUlined);
     sub_menu->Append(pItem);
 
     // construct menu
-    pItem = new wxMenuItem(file_menu, Menu_Test1, _T("&Uncheckable"), _T("red item"));
+    pItem = new wxMenuItem(file_menu, Menu_Test1, wxT("&Uncheckable"), wxT("red item"));
     pItem->SetFont(*wxITALIC_FONT);
     pItem->SetTextColour(wxColor(255, 0, 0));
     file_menu->Append(pItem);
 
-    pItem = new wxMenuItem(file_menu, Menu_Test2, _T("&Checkable"),
-                           _T("checkable item"), wxITEM_CHECK);
+    pItem = new wxMenuItem(file_menu, Menu_Test2, wxT("&Checkable"),
+                           wxT("checkable item"), wxITEM_CHECK);
     pItem->SetFont(*wxSMALL_FONT);
     file_menu->Append(pItem);
     file_menu->Check(Menu_Test2, true);
 
-    pItem = new wxMenuItem(file_menu, Menu_Test3, _T("&Disabled"), _T("disabled item"));
+    pItem = new wxMenuItem(file_menu, Menu_Test3, wxT("&Disabled"), wxT("disabled item"));
     pItem->SetFont(*wxNORMAL_FONT);
     file_menu->Append(pItem);
     file_menu->Enable(Menu_Test3, false);
 
     file_menu->AppendSeparator();
 
-    pItem = new wxMenuItem(file_menu, Menu_Bitmap, _T("&Bell"),
-                           _T("check/uncheck me!"), wxITEM_CHECK);
+    pItem = new wxMenuItem(file_menu, Menu_Bitmap, wxT("&Bell"),
+                           wxT("check/uncheck me!"), wxITEM_CHECK);
     pItem->SetFont(fontBmp);
     pItem->SetBitmaps(bmpBell);
     file_menu->Append(pItem);
 
-    pItem = new wxMenuItem(file_menu, Menu_Bitmap2, _T("So&und"),
-                           _T("icon changes!"), wxITEM_CHECK);
+    pItem = new wxMenuItem(file_menu, Menu_Bitmap2, wxT("So&und"),
+                           wxT("icon changes!"), wxITEM_CHECK);
     pItem->SetFont(fontBmp);
     pItem->SetBitmaps(bmpSound, bmpNoSound);
     file_menu->Append(pItem);
 
     file_menu->AppendSeparator();
 
-    pItem = new wxMenuItem(file_menu, Menu_Submenu, _T("&Sub menu"), _T(""),
+    pItem = new wxMenuItem(file_menu, Menu_Submenu, wxT("&Sub menu"), wxT(""),
                            wxITEM_CHECK, sub_menu);
     pItem->SetFont(*wxSWISS_FONT);
     file_menu->Append(pItem);
 
     file_menu->AppendSeparator();
-    pItem = new wxMenuItem(file_menu, Menu_Toggle, _T("&Disable/Enable\tCtrl+D"),
-                          _T("enables/disables the About-Item"), wxITEM_NORMAL);
+    pItem = new wxMenuItem(file_menu, Menu_Toggle, wxT("&Disable/Enable\tCtrl+D"),
+                          wxT("enables/disables the About-Item"), wxITEM_NORMAL);
     pItem->SetFont(*wxNORMAL_FONT);
     file_menu->Append(pItem);
 
     // Of course Ctrl+RatherLongAccel will not work in this example:
-    pAboutItem = new wxMenuItem(file_menu, Menu_About, _T("&About\tCtrl+RatherLongAccel"),
-                                _T("display program information"), wxITEM_NORMAL);
+    pAboutItem = new wxMenuItem(file_menu, Menu_About, wxT("&About\tCtrl+RatherLongAccel"),
+                                wxT("display program information"), wxITEM_NORMAL);
     pAboutItem->SetBitmap(bmpInfo);
     pAboutItem->SetDisabledBitmap(bmpInfo_mono);
     file_menu->Append(pAboutItem);
@@ -191,13 +191,13 @@ void OwnerDrawnFrame::InitMenu()
     file_menu->AppendSeparator();
 #endif
 
-    pItem = new wxMenuItem(file_menu, Menu_Quit, _T("&Quit"), _T("Normal item"),
+    pItem = new wxMenuItem(file_menu, Menu_Quit, wxT("&Quit"), wxT("Normal item"),
                            wxITEM_NORMAL);
     file_menu->Append(pItem);
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
     SetMenuBar(menu_bar);
 }
 
@@ -207,7 +207,7 @@ OwnerDrawnFrame::OwnerDrawnFrame(wxFrame
          : wxFrame(frame, wxID_ANY, title, wxPoint(x, y), wxSize(w, h))
 {
     // set the icon
-    SetIcon(wxIcon(_T("mondrian")));
+    SetIcon(wxIcon(wxT("mondrian")));
 
     // create the menu
     InitMenu();
@@ -217,16 +217,16 @@ OwnerDrawnFrame::OwnerDrawnFrame(wxFrame
     const int widths[] = { -1, 60 };
     CreateStatusBar(2);
     SetStatusWidths(2, widths);
-    SetStatusText(_T("no selection"), 0);
+    SetStatusText(wxT("no selection"), 0);
 #endif // wxUSE_STATUSBAR
 
     // make a panel with some controls
     wxPanel *pPanel = new wxPanel(this);
 
     // check list box
-    static const wxChar* aszChoices[] = { _T("Hello"), _T("world"), _T("and"),
-                                          _T("goodbye"), _T("cruel"), _T("world"),
-                                          _T("-------"), _T("owner-drawn"), _T("listbox") };
+    static const wxChar* aszChoices[] = { wxT("Hello"), wxT("world"), wxT("and"),
+                                          wxT("goodbye"), wxT("cruel"), wxT("world"),
+                                          wxT("-------"), wxT("owner-drawn"), wxT("listbox") };
 
     wxString *astrChoices = new wxString[WXSIZEOF(aszChoices)];
     unsigned int ui;
@@ -255,9 +255,9 @@ OwnerDrawnFrame::OwnerDrawnFrame(wxFrame
     m_pListBox->Check(2);
 
     // normal (but owner-drawn) listbox
-    static const wxChar* aszColors[] = { _T("Red"), _T("Blue"), _T("Pink"),
-                                         _T("Green"), _T("Yellow"),
-                                         _T("Black"), _T("Violet")  };
+    static const wxChar* aszColors[] = { wxT("Red"), wxT("Blue"), wxT("Pink"),
+                                         wxT("Green"), wxT("Yellow"),
+                                         wxT("Black"), wxT("Violet")  };
 
     astrChoices = new wxString[WXSIZEOF(aszColors)];
 
@@ -323,8 +323,8 @@ void OwnerDrawnFrame::OnMenuToggle(wxCom
 void OwnerDrawnFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageDialog dialog(this,
-                           _T("Demo of owner-drawn controls\n"),
-                           _T("About wxOwnerDrawn"), wxYES_NO | wxCANCEL);
+                           wxT("Demo of owner-drawn controls\n"),
+                           wxT("About wxOwnerDrawn"), wxYES_NO | wxCANCEL);
     dialog.ShowModal();
 }
 
--- samples/help/demo.cpp-orig	2009-06-18 18:41:19.355761000 -0500
+++ samples/help/demo.cpp	2009-06-18 18:41:24.786034000 -0500
@@ -309,7 +309,7 @@ bool MyApp::OnInit()
 #endif // wxUSE_HTML
 
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("HelpDemo wxWidgets App"),
+    MyFrame *frame = new MyFrame(wxT("HelpDemo wxWidgets App"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
 #if !USE_SIMPLE_HELP_PROVIDER
@@ -326,7 +326,7 @@ bool MyApp::OnInit()
     // initialise the help system: this means that we'll use doc.hlp file under
     // Windows and that the HTML docs are in the subdirectory doc for platforms
     // using HTML help
-    if ( !frame->GetHelpController().Initialize(_T("doc")) )
+    if ( !frame->GetHelpController().Initialize(wxT("doc")) )
     {
         wxLogError(wxT("Cannot initialize the help system, aborting."));
 
@@ -334,7 +334,7 @@ bool MyApp::OnInit()
     }
 
 #if wxUSE_MS_HTML_HELP && !defined(__WXUNIVERSAL__)
-    if( !frame->GetMSHtmlHelpController().Initialize(_T("doc")) )
+    if( !frame->GetMSHtmlHelpController().Initialize(wxT("doc")) )
     {
         wxLogError(wxT("Cannot initialize the MS HTML Help system."));
     }
@@ -342,7 +342,7 @@ bool MyApp::OnInit()
 
 #if wxUSE_MS_HTML_HELP && wxUSE_WXHTML_HELP && !defined(__WXUNIVERSAL__)
     // you need to call Initialize in order to use wxBestHelpController
-    if( !frame->GetBestHelpController().Initialize(_T("doc")) )
+    if( !frame->GetBestHelpController().Initialize(wxT("doc")) )
     {
         wxLogError(wxT("Cannot initialize the best help system, aborting."));
     }
@@ -351,7 +351,7 @@ bool MyApp::OnInit()
 #if USE_HTML_HELP
     // initialise the advanced HTML help system: this means that the HTML docs are in .htb
     // (zipped) form
-    if ( !frame->GetAdvancedHtmlHelpController().Initialize(_T("doc")) )
+    if ( !frame->GetAdvancedHtmlHelpController().Initialize(wxT("doc")) )
     {
         wxLogError(wxT("Cannot initialize the advanced HTML help system, aborting."));
 
@@ -362,7 +362,7 @@ bool MyApp::OnInit()
 #if 0
     // defined(__WXMSW__) && wxUSE_MS_HTML_HELP
     wxString path(wxGetCwd());
-    if ( !frame->GetMSHtmlHelpController().Initialize(path + _T("\\doc.chm")) )
+    if ( !frame->GetMSHtmlHelpController().Initialize(path + wxT("\\doc.chm")) )
     {
         wxLogError("Cannot initialize the MS HTML help system, aborting.");
 
@@ -398,51 +398,51 @@ MyFrame::MyFrame(const wxString& title, 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 
-    menuFile->Append(HelpDemo_Help_Index, _T("&Help Index..."));
-    menuFile->Append(HelpDemo_Help_Classes, _T("&Help on Classes..."));
-    menuFile->Append(HelpDemo_Help_Functions, _T("&Help on Functions..."));
-    menuFile->Append(HelpDemo_Help_ContextHelp, _T("&Context Help..."));
-    menuFile->Append(HelpDemo_Help_DialogContextHelp, _T("&Dialog Context Help...\tCtrl-H"));
-    menuFile->Append(HelpDemo_Help_Help, _T("&About Help Demo..."));
-    menuFile->Append(HelpDemo_Help_Search, _T("&Search help..."));
+    menuFile->Append(HelpDemo_Help_Index, wxT("&Help Index..."));
+    menuFile->Append(HelpDemo_Help_Classes, wxT("&Help on Classes..."));
+    menuFile->Append(HelpDemo_Help_Functions, wxT("&Help on Functions..."));
+    menuFile->Append(HelpDemo_Help_ContextHelp, wxT("&Context Help..."));
+    menuFile->Append(HelpDemo_Help_DialogContextHelp, wxT("&Dialog Context Help...\tCtrl-H"));
+    menuFile->Append(HelpDemo_Help_Help, wxT("&About Help Demo..."));
+    menuFile->Append(HelpDemo_Help_Search, wxT("&Search help..."));
 #if USE_HTML_HELP
     menuFile->AppendSeparator();
-    menuFile->Append(HelpDemo_Advanced_Html_Help_Index, _T("Advanced HTML &Help Index..."));
-    menuFile->Append(HelpDemo_Advanced_Html_Help_Classes, _T("Advanced HTML &Help on Classes..."));
-    menuFile->Append(HelpDemo_Advanced_Html_Help_Functions, _T("Advanced HTML &Help on Functions..."));
-    menuFile->Append(HelpDemo_Advanced_Html_Help_Help, _T("Advanced HTML &About Help Demo..."));
-    menuFile->Append(HelpDemo_Advanced_Html_Help_Search, _T("Advanced HTML &Search help..."));
-    menuFile->Append(HelpDemo_Advanced_Html_Help_Modal, _T("Advanced HTML Help &Modal Dialog..."));
+    menuFile->Append(HelpDemo_Advanced_Html_Help_Index, wxT("Advanced HTML &Help Index..."));
+    menuFile->Append(HelpDemo_Advanced_Html_Help_Classes, wxT("Advanced HTML &Help on Classes..."));
+    menuFile->Append(HelpDemo_Advanced_Html_Help_Functions, wxT("Advanced HTML &Help on Functions..."));
+    menuFile->Append(HelpDemo_Advanced_Html_Help_Help, wxT("Advanced HTML &About Help Demo..."));
+    menuFile->Append(HelpDemo_Advanced_Html_Help_Search, wxT("Advanced HTML &Search help..."));
+    menuFile->Append(HelpDemo_Advanced_Html_Help_Modal, wxT("Advanced HTML Help &Modal Dialog..."));
 #endif
 
 #if wxUSE_MS_HTML_HELP && !defined(__WXUNIVERSAL__)
     menuFile->AppendSeparator();
-    menuFile->Append(HelpDemo_MS_Html_Help_Index, _T("MS HTML &Help Index..."));
-    menuFile->Append(HelpDemo_MS_Html_Help_Classes, _T("MS HTML &Help on Classes..."));
-    menuFile->Append(HelpDemo_MS_Html_Help_Functions, _T("MS HTML &Help on Functions..."));
-    menuFile->Append(HelpDemo_MS_Html_Help_Help, _T("MS HTML &About Help Demo..."));
-    menuFile->Append(HelpDemo_MS_Html_Help_Search, _T("MS HTML &Search help..."));
+    menuFile->Append(HelpDemo_MS_Html_Help_Index, wxT("MS HTML &Help Index..."));
+    menuFile->Append(HelpDemo_MS_Html_Help_Classes, wxT("MS HTML &Help on Classes..."));
+    menuFile->Append(HelpDemo_MS_Html_Help_Functions, wxT("MS HTML &Help on Functions..."));
+    menuFile->Append(HelpDemo_MS_Html_Help_Help, wxT("MS HTML &About Help Demo..."));
+    menuFile->Append(HelpDemo_MS_Html_Help_Search, wxT("MS HTML &Search help..."));
 #endif
 
 #if wxUSE_MS_HTML_HELP && wxUSE_WXHTML_HELP && !defined(__WXUNIVERSAL__)
     menuFile->AppendSeparator();
-    menuFile->Append(HelpDemo_Best_Help_Index, _T("Best &Help Index..."));
+    menuFile->Append(HelpDemo_Best_Help_Index, wxT("Best &Help Index..."));
 #endif
 
 #ifndef __WXMSW__
 #if !wxUSE_HTML
     menuFile->AppendSeparator();
-    menuFile->Append(HelpDemo_Help_KDE, _T("Use &KDE"));
-    menuFile->Append(HelpDemo_Help_GNOME, _T("Use &GNOME"));
-    menuFile->Append(HelpDemo_Help_Netscape, _T("Use &Netscape"));
+    menuFile->Append(HelpDemo_Help_KDE, wxT("Use &KDE"));
+    menuFile->Append(HelpDemo_Help_GNOME, wxT("Use &GNOME"));
+    menuFile->Append(HelpDemo_Help_Netscape, wxT("Use &Netscape"));
 #endif
 #endif
     menuFile->AppendSeparator();
-    menuFile->Append(HelpDemo_Quit, _T("E&xit"));
+    menuFile->Append(HelpDemo_Quit, wxT("E&xit"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
+    menuBar->Append(menuFile, wxT("&File"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -450,7 +450,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar();
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 
 #if USE_HTML_HELP
@@ -462,8 +462,8 @@ MyFrame::MyFrame(const wxString& title, 
     m_embeddedHelpWindow->Create(this,
         wxID_ANY, wxDefaultPosition, GetClientSize(), wxTAB_TRAVERSAL|wxNO_BORDER, wxHF_DEFAULT_STYLE);
         
-    m_embeddedHtmlHelp.AddBook(wxFileName(_T("doc.zip")));
-    m_embeddedHtmlHelp.Display(_T("Introduction"));
+    m_embeddedHtmlHelp.AddBook(wxFileName(wxT("doc.zip")));
+    m_embeddedHtmlHelp.Display(wxT("Introduction"));
 #else
     // now create some controls
 
@@ -474,7 +474,7 @@ MyFrame::MyFrame(const wxString& title, 
     //panel->SetHelpText(wxContextId(300));
 
     // and a static control whose parent is the panel
-    wxStaticText* staticText = new wxStaticText(panel, 302, _T("Hello, world!"), wxPoint(10, 10));
+    wxStaticText* staticText = new wxStaticText(panel, 302, wxT("Hello, world!"), wxPoint(10, 10));
     staticText->SetHelpText(_("This static text control isn't doing a lot right now."));
 #endif
 }
@@ -637,8 +637,8 @@ void MyFrame::ShowHelp(int commandId, wx
        case HelpDemo_MS_Html_Help_Search:
        case HelpDemo_Best_Help_Search:
        {
-          wxString key = wxGetTextFromUser(_T("Search for?"),
-                                           _T("Search help for keyword"),
+          wxString key = wxGetTextFromUser(wxT("Search for?"),
+                                           wxT("Search help for keyword"),
                                            wxEmptyString,
                                            this);
           if(! key.IsEmpty())
@@ -657,13 +657,13 @@ void MyFrame::ShowHelp(int commandId, wx
        // These three calls are only used by wxExtHelpController
 
        case HelpDemo_Help_KDE:
-          helpController.SetViewer(_T("kdehelp"));
+          helpController.SetViewer(wxT("kdehelp"));
           break;
        case HelpDemo_Help_GNOME:
-          helpController.SetViewer(_T("gnome-help-browser"));
+          helpController.SetViewer(wxT("gnome-help-browser"));
           break;
        case HelpDemo_Help_Netscape:
-          helpController.SetViewer(_T("netscape"), wxHELP_NETSCAPE);
+          helpController.SetViewer(wxT("netscape"), wxHELP_NETSCAPE);
           break;
    }
 }
@@ -677,7 +677,7 @@ BEGIN_EVENT_TABLE(MyModalDialog, wxDialo
 END_EVENT_TABLE()
 
 MyModalDialog::MyModalDialog(wxWindow *parent)
-             : wxDialog(parent, wxID_ANY, wxString(_T("Modal dialog")))
+             : wxDialog(parent, wxID_ANY, wxString(wxT("Modal dialog")))
 {
     // Add the context-sensitive help button on the caption for the platforms
     // which support it (currently MSW only)
@@ -687,10 +687,10 @@ MyModalDialog::MyModalDialog(wxWindow *p
     wxBoxSizer *sizerTop = new wxBoxSizer(wxVERTICAL);
     wxBoxSizer *sizerRow = new wxBoxSizer(wxHORIZONTAL);
 
-    wxButton* btnOK = new wxButton(this, wxID_OK, _T("&OK"));
+    wxButton* btnOK = new wxButton(this, wxID_OK, wxT("&OK"));
     btnOK->SetHelpText(_("The OK button confirms the dialog choices."));
 
-    wxButton* btnCancel = new wxButton(this, wxID_CANCEL, _T("&Cancel"));
+    wxButton* btnCancel = new wxButton(this, wxID_CANCEL, wxT("&Cancel"));
     btnCancel->SetHelpText(_("The Cancel button cancels the dialog."));
 
     sizerRow->Add(btnOK, 0, wxALIGN_CENTER | wxALL, 5);
--- samples/regtest/regtest.cpp-orig	2009-06-18 18:41:08.796425000 -0500
+++ samples/regtest/regtest.cpp	2009-06-18 18:41:13.798720000 -0500
@@ -290,23 +290,23 @@ END_EVENT_TABLE()
 wxMenu *CreateRegistryMenu()
 {
     wxMenu *pMenuNew = new wxMenu;
-    pMenuNew->Append(Menu_NewKey,    _T("&Key"),          _T("Create a new key"));
+    pMenuNew->Append(Menu_NewKey,    wxT("&Key"),          wxT("Create a new key"));
     pMenuNew->AppendSeparator();
-    pMenuNew->Append(Menu_NewText,   _T("&Text value"),   _T("Create a new text value"));
-    pMenuNew->Append(Menu_NewBinary, _T("&Binary value"), _T("Create a new binary value"));
+    pMenuNew->Append(Menu_NewText,   wxT("&Text value"),   wxT("Create a new text value"));
+    pMenuNew->Append(Menu_NewBinary, wxT("&Binary value"), wxT("Create a new binary value"));
 
     wxMenu *pMenuReg = new wxMenu;
-    pMenuReg->Append(Menu_New, _T("&New"), pMenuNew);
-    pMenuReg->Append(Menu_Delete,   _T("&Delete..."), _T("Delete selected key/value"));
+    pMenuReg->Append(Menu_New, wxT("&New"), pMenuNew);
+    pMenuReg->Append(Menu_Delete,   wxT("&Delete..."), wxT("Delete selected key/value"));
     pMenuReg->AppendSeparator();
-    pMenuReg->Append(Menu_GoTo,     _T("&Go to...\tCtrl-G"),    _T("Go to registry key"));
-    pMenuReg->Append(Menu_Expand,   _T("&Expand"),    _T("Expand current key"));
-    pMenuReg->Append(Menu_Collapse, _T("&Collapse"),  _T("Collapse current key"));
-    pMenuReg->Append(Menu_Toggle,   _T("&Toggle"),    _T("Toggle current key"));
+    pMenuReg->Append(Menu_GoTo,     wxT("&Go to...\tCtrl-G"),    wxT("Go to registry key"));
+    pMenuReg->Append(Menu_Expand,   wxT("&Expand"),    wxT("Expand current key"));
+    pMenuReg->Append(Menu_Collapse, wxT("&Collapse"),  wxT("Collapse current key"));
+    pMenuReg->Append(Menu_Toggle,   wxT("&Toggle"),    wxT("Toggle current key"));
     pMenuReg->AppendSeparator();
-    pMenuReg->Append(Menu_Refresh,  _T("&Refresh"),   _T("Refresh the subtree"));
+    pMenuReg->Append(Menu_Refresh,  wxT("&Refresh"),   wxT("Refresh the subtree"));
     pMenuReg->AppendSeparator();
-    pMenuReg->Append(Menu_Info,     _T("&Properties"),_T("Information about current selection"));
+    pMenuReg->Append(Menu_Info,     wxT("&Properties"),wxT("Information about current selection"));
 
     return pMenuReg;
 }
@@ -320,7 +320,7 @@ IMPLEMENT_APP(RegApp)
 bool RegApp::OnInit()
 {
     // create the main frame window and show it
-    RegFrame *frame = new RegFrame(NULL, _T("wxRegTest"), 50, 50, 600, 350);
+    RegFrame *frame = new RegFrame(NULL, wxT("wxRegTest"), 50, 50, 600, 350);
     frame->Show(true);
 
     SetTopWindow(frame);
@@ -340,20 +340,20 @@ RegFrame::RegFrame(wxFrame *parent, cons
 
     // set the icon
     // ------------
-    SetIcon(wxIcon(_T("app_icon")));
+    SetIcon(wxIcon(wxT("app_icon")));
 
     // create menu
     // -----------
     wxMenu *pMenuFile = new wxMenu;
-    pMenuFile->Append(Menu_Test, _T("Te&st"), _T("Test key creation"));
+    pMenuFile->Append(Menu_Test, wxT("Te&st"), wxT("Test key creation"));
     pMenuFile->AppendSeparator();
-    pMenuFile->Append(Menu_About, _T("&About..."), _T("Show an extraordinarly beautiful dialog"));
+    pMenuFile->Append(Menu_About, wxT("&About..."), wxT("Show an extraordinarly beautiful dialog"));
     pMenuFile->AppendSeparator();
-    pMenuFile->Append(Menu_Quit,  _T("E&xit"), _T("Quit this program"));
+    pMenuFile->Append(Menu_Quit,  wxT("E&xit"), wxT("Quit this program"));
 
     wxMenuBar *pMenu = new wxMenuBar;
-    pMenu->Append(pMenuFile, _T("&File"));
-    pMenu->Append(CreateRegistryMenu(),  _T("&Registry"));
+    pMenu->Append(pMenuFile, wxT("&File"));
+    pMenu->Append(CreateRegistryMenu(),  wxT("&Registry"));
     SetMenuBar(pMenu);
 
 #if DO_REGTEST
@@ -385,9 +385,9 @@ void RegFrame::OnQuit(wxCommandEvent& WX
 void RegFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageDialog dialog(this,
-        _T("wxRegistry sample\n")
-        _T("(c) 1998, 2000 Vadim Zeitlin"),
-        _T("About wxRegTest"), wxOK);
+        wxT("wxRegistry sample\n")
+        wxT("(c) 1998, 2000 Vadim Zeitlin"),
+        wxT("About wxRegTest"), wxOK);
 
     dialog.ShowModal();
 }
@@ -401,11 +401,11 @@ void RegFrame::OnTest(wxCommandEvent& WX
 
 void RegFrame::OnGoTo(wxCommandEvent& WXUNUSED(event))
 {
-    static wxString s_location = _T("HKEY_CURRENT_USER\\Software\\wxWidgets");
+    static wxString s_location = wxT("HKEY_CURRENT_USER\\Software\\wxWidgets");
 
     wxString location = wxGetTextFromUser(
-        _T("Enter the location to go to:"),
-        _T("wxRegTest question"),
+        wxT("Enter the location to go to:"),
+        wxT("wxRegTest question"),
         s_location,
         this);
 
@@ -459,7 +459,7 @@ void RegFrame::OnNewKey(wxCommandEvent& 
     if ( m_treeCtrl->IsKeySelected() )
     {
         m_treeCtrl->CreateNewKey(
-            wxGetTextFromUser(_T("Enter the name of the new key")));
+            wxGetTextFromUser(wxT("Enter the name of the new key")));
     }
 #endif
 }
@@ -470,7 +470,7 @@ void RegFrame::OnNewText(wxCommandEvent&
     if ( m_treeCtrl->IsKeySelected() )
     {
         m_treeCtrl->CreateNewTextValue(
-            wxGetTextFromUser(_T("Enter the name for the new text value")));
+            wxGetTextFromUser(wxT("Enter the name for the new text value")));
     }
 #endif
 }
@@ -481,7 +481,7 @@ void RegFrame::OnNewBinary(wxCommandEven
     if ( m_treeCtrl->IsKeySelected() )
     {
         m_treeCtrl->CreateNewBinaryValue(
-            wxGetTextFromUser(_T("Enter the name for the new binary value")));
+            wxGetTextFromUser(wxT("Enter the name for the new binary value")));
     }
 #endif
 }
@@ -499,8 +499,8 @@ void RegFrame::OnInfo(wxCommandEvent& WX
 RegImageList::RegImageList() : wxImageList(16, 16, true)
 {
     // should be in sync with enum RegImageList::RegIcon
-    static const wxChar *aszIcons[] = { _T("key1"),_T("key2"),_T("key3"),_T("value1"),_T("value2") };
-    wxString str = _T("icon_");
+    static const wxChar *aszIcons[] = { wxT("key1"),wxT("key2"),wxT("key3"),wxT("value1"),wxT("value2") };
+    wxString str = wxT("icon_");
     for ( unsigned int n = 0; n < WXSIZEOF(aszIcons); n++ )
     {
         Add(wxIcon(str + aszIcons[n], wxBITMAP_TYPE_ICO_RESOURCE));
@@ -579,7 +579,7 @@ RegTreeCtrl::RegTreeCtrl(wxWindow *paren
 
     // create root keys
     // ----------------
-    m_pRoot = InsertNewTreeNode(NULL, _T("Registry Root"), RegImageList::Root);
+    m_pRoot = InsertNewTreeNode(NULL, wxT("Registry Root"), RegImageList::Root);
 
     // create popup menu
     // -----------------
@@ -656,16 +656,16 @@ void RegTreeCtrl::OnMenuTest()
         return;
     }
 
-    wxRegKey key1(pNode->Key(), _T("key1"));
+    wxRegKey key1(pNode->Key(), wxT("key1"));
     if ( key1.Create() )
     {
-        wxRegKey key2a(key1, _T("key2a")), key2b(key1, _T("key2b"));
+        wxRegKey key2a(key1, wxT("key2a")), key2b(key1, wxT("key2b"));
         if ( key2a.Create() && key2b.Create() )
         {
             // put some values under the newly created keys
-            key1.SetValue(wxT("first_term"), _T("10"));
-            key1.SetValue(wxT("second_term"), _T("7"));
-            key2a = _T("this is the unnamed value");
+            key1.SetValue(wxT("first_term"), wxT("10"));
+            key1.SetValue(wxT("second_term"), wxT("7"));
+            key2a = wxT("this is the unnamed value");
             key2b.SetValue(wxT("sum"), 17);
 
             // refresh tree
@@ -740,7 +740,7 @@ void RegTreeCtrl::OnBeginEdit(wxTreeEven
     TreeNode *pNode = GetNode(event);
     if ( pNode->IsRoot() || pNode->Parent()->IsRoot() )
     {
-        wxLogStatus(_T("This registry key can't be renamed."));
+        wxLogStatus(wxT("This registry key can't be renamed."));
 
         event.Veto();
     }
@@ -772,7 +772,7 @@ void RegTreeCtrl::OnEndEdit(wxTreeEvent&
 
     if ( !ok )
     {
-        wxLogError(_T("Failed to rename '%s' to '%s'."),
+        wxLogError(wxT("Failed to rename '%s' to '%s'."),
             m_nameOld.c_str(), name.c_str());
     }
 #if 0   // MSW tree ctrl doesn't like this at all, it hangs
@@ -842,8 +842,8 @@ void RegTreeCtrl::OnEndDrag(wxTreeEvent&
     nameDst << wxString(dst->FullName()).AfterFirst('\\') << '\\'
             << wxString(src->FullName()).AfterLast('\\');
 
-    wxString verb = m_copyOnDrop ? _T("copy") : _T("move");
-    wxString what = isKey ? _T("key") : _T("value");
+    wxString verb = m_copyOnDrop ? wxT("copy") : wxT("move");
+    wxString what = isKey ? wxT("key") : wxT("value");
 
     if ( wxMessageBox(wxString::Format
                         (
@@ -853,7 +853,7 @@ void RegTreeCtrl::OnEndDrag(wxTreeEvent&
                          nameSrc.c_str(),
                          nameDst.c_str()
                         ),
-                      _T("RegTest Confirm"),
+                      wxT("RegTest Confirm"),
                       wxICON_QUESTION | wxYES_NO | wxCANCEL, this) != wxYES ) {
       return;
     }
@@ -966,10 +966,10 @@ bool RegTreeCtrl::TreeNode::OnExpand()
     {
         wxString strItem;
         if (str.empty())
-            strItem = _T("<default>");
+            strItem = wxT("<default>");
         else
             strItem = str;
-        strItem += _T(" = ");
+        strItem += wxT(" = ");
 
         // determine the appropriate icon
         RegImageList::Icon icon;
@@ -1126,7 +1126,7 @@ const wxChar *RegTreeCtrl::TreeNode::Ful
 
 void RegTreeCtrl::GoTo(const wxString& location)
 {
-    wxStringTokenizer tk(location, _T("\\"));
+    wxStringTokenizer tk(location, wxT("\\"));
 
     wxTreeItemId id = GetRootItem();
 
@@ -1169,7 +1169,7 @@ void RegTreeCtrl::GoTo(const wxString& l
 
         if ( !id.IsOk() )
         {
-            wxLogError(_T("No such key '%s'."), location.c_str());
+            wxLogError(wxT("No such key '%s'."), location.c_str());
 
             return;
         }
@@ -1201,13 +1201,13 @@ void RegTreeCtrl::DeleteSelected()
         return;
     }
 
-    wxString what = pCurrent->IsKey() ? _T("key") : _T("value");
+    wxString what = pCurrent->IsKey() ? wxT("key") : wxT("value");
     if ( wxMessageBox(wxString::Format
         (
             wxT("Do you really want to delete this %s?"),
             what.c_str()
         ),
-        _T("Confirmation"),
+        wxT("Confirmation"),
         wxICON_QUESTION | wxYES_NO | wxCANCEL, this) != wxYES )
     {
         return;
--- samples/sound/sound.cpp-orig	2009-06-18 18:40:55.978671000 -0500
+++ samples/sound/sound.cpp	2009-06-18 18:41:00.243666000 -0500
@@ -40,7 +40,7 @@
     #include "../sample.xpm"
 #endif
 
-#define WAV_FILE _T("doggrowl.wav")
+#define WAV_FILE wxT("doggrowl.wav")
 
 // ----------------------------------------------------------------------------
 // private classes
@@ -160,7 +160,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxWidgets Sound Sample"));
+    MyFrame *frame = new MyFrame(wxT("wxWidgets Sound Sample"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -188,29 +188,29 @@ MyFrame::MyFrame(const wxString& title)
     SetIcon(wxICON(sample));
 
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Sound_SelectFile, _T("Select WAV &file...\tCtrl-O"), _T("Select a new wav file to play"));
+    menuFile->Append(Sound_SelectFile, wxT("Select WAV &file...\tCtrl-O"), wxT("Select a new wav file to play"));
 #ifdef __WXMSW__
-    menuFile->Append(Sound_SelectResource, _T("Select WAV &resource...\tCtrl-R"), _T("Select a new resource to play"));
+    menuFile->Append(Sound_SelectResource, wxT("Select WAV &resource...\tCtrl-R"), wxT("Select a new resource to play"));
 #endif // __WXMSW__
-    menuFile->Append(Sound_SelectMemory, _T("Select WAV &data\tCtrl-M"), _T("Choose to play from memory buffer"));
-    menuFile->Append(Sound_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Sound_SelectMemory, wxT("Select WAV &data\tCtrl-M"), wxT("Choose to play from memory buffer"));
+    menuFile->Append(Sound_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *playMenu = new wxMenu;
-    playMenu->Append(Sound_PlaySync, _T("Play sound &synchronously\tCtrl-S"));
-    playMenu->Append(Sound_PlayAsync, _T("Play sound &asynchronously\tCtrl-A"));
-    playMenu->Append(Sound_PlayAsyncOnStack, _T("Play sound asynchronously (&object on stack)\tCtrl-K"));
-    playMenu->Append(Sound_PlayLoop, _T("&Loop sound\tCtrl-L"));
+    playMenu->Append(Sound_PlaySync, wxT("Play sound &synchronously\tCtrl-S"));
+    playMenu->Append(Sound_PlayAsync, wxT("Play sound &asynchronously\tCtrl-A"));
+    playMenu->Append(Sound_PlayAsyncOnStack, wxT("Play sound asynchronously (&object on stack)\tCtrl-K"));
+    playMenu->Append(Sound_PlayLoop, wxT("&Loop sound\tCtrl-L"));
     playMenu->AppendSeparator();
-    playMenu->Append(Sound_Stop, _T("&Stop playing\tCtrl-T"));
+    playMenu->Append(Sound_Stop, wxT("&Stop playing\tCtrl-T"));
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Sound_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Sound_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(playMenu, _T("&Play"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(playMenu, wxT("&Play"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -971,7 +971,7 @@ bool MyFrame::CreateSound(wxSound& snd) 
 void MyFrame::NotifyUsingFile(const wxString& name)
 {
     wxString msg;
-    msg << _T("Using sound file: ") << name << _T("\n");
+    msg << wxT("Using sound file: ") << name << wxT("\n");
     m_tc->AppendText(msg);
 }
 
@@ -982,9 +982,9 @@ void MyFrame::NotifyUsingFile(const wxSt
 void MyFrame::OnSelectFile(wxCommandEvent& WXUNUSED(event))
 {
 #if wxUSE_FILEDLG
-    wxFileDialog dlg(this, _T("Choose a sound file"),
+    wxFileDialog dlg(this, wxT("Choose a sound file"),
                      wxEmptyString, wxEmptyString,
-                     _T("WAV files (*.wav)|*.wav"), wxFD_OPEN|wxFD_CHANGE_DIR);
+                     wxT("WAV files (*.wav)|*.wav"), wxFD_OPEN|wxFD_CHANGE_DIR);
     if ( dlg.ShowModal() == wxID_OK )
     {
         m_soundFile = dlg.GetPath();
@@ -1006,9 +1006,9 @@ void MyFrame::OnSelectResource(wxCommand
 {
     m_soundRes = wxGetTextFromUser
                  (
-                    _T("Enter resource name:"),
-                    _T("wxWidgets Sound Sample"),
-                    _T("FromResource"),
+                    wxT("Enter resource name:"),
+                    wxT("wxWidgets Sound Sample"),
+                    wxT("FromResource"),
                     this
                  );
     if ( m_soundRes.empty() )
@@ -1020,7 +1020,7 @@ void MyFrame::OnSelectResource(wxCommand
     delete m_sound;
     m_sound = NULL;
 
-    NotifyUsingFile(_T("Windows WAV resource"));
+    NotifyUsingFile(wxT("Windows WAV resource"));
 }
 
 #endif // __WXMSW__
@@ -1029,7 +1029,7 @@ void MyFrame::OnSelectMemory(wxCommandEv
 {
     m_useMemory = true;
 
-    NotifyUsingFile(_T("embedded sound fragment"));
+    NotifyUsingFile(wxT("embedded sound fragment"));
 }
 
 void MyFrame::OnQuit(wxCommandEvent& WXUNUSED(event))
@@ -1089,10 +1089,10 @@ void MyFrame::OnPlayLoop(wxCommandEvent&
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the sound sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the sound sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnStop(wxCommandEvent& WXUNUSED(event))
--- samples/listctrl/listtest.cpp-orig	2009-06-18 18:40:42.111793000 -0500
+++ samples/listctrl/listtest.cpp	2009-06-18 18:40:48.578498000 -0500
@@ -48,16 +48,16 @@
 
 const wxChar *SMALL_VIRTUAL_VIEW_ITEMS[][2] =
 {
-    { _T("Cat"), _T("meow") },
-    { _T("Cow"), _T("moo") },
-    { _T("Crow"), _T("caw") },
-    { _T("Dog"), _T("woof") },
-    { _T("Duck"), _T("quack") },
-    { _T("Mouse"), _T("squeak") },
-    { _T("Owl"), _T("hoo") },
-    { _T("Pig"), _T("oink") },
-    { _T("Pigeon"), _T("coo") },
-    { _T("Sheep"), _T("baaah") },
+    { wxT("Cat"), wxT("meow") },
+    { wxT("Cow"), wxT("moo") },
+    { wxT("Crow"), wxT("caw") },
+    { wxT("Dog"), wxT("woof") },
+    { wxT("Duck"), wxT("quack") },
+    { wxT("Mouse"), wxT("squeak") },
+    { wxT("Owl"), wxT("hoo") },
+    { wxT("Pig"), wxT("oink") },
+    { wxT("Pigeon"), wxT("coo") },
+    { wxT("Sheep"), wxT("baaah") },
 };
 
 
@@ -183,17 +183,17 @@ MyFrame::MyFrame(const wxChar *title)
     m_imageListSmall = new wxImageList(16, 16, true);
 
 #ifdef __WXMSW__
-    m_imageListNormal->Add( wxIcon(_T("icon1"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon2"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon3"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon4"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon5"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon6"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon7"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon8"), wxBITMAP_TYPE_ICO_RESOURCE) );
-    m_imageListNormal->Add( wxIcon(_T("icon9"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon1"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon2"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon3"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon4"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon5"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon6"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon7"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon8"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListNormal->Add( wxIcon(wxT("icon9"), wxBITMAP_TYPE_ICO_RESOURCE) );
 
-    m_imageListSmall->Add( wxIcon(_T("iconsmall"), wxBITMAP_TYPE_ICO_RESOURCE) );
+    m_imageListSmall->Add( wxIcon(wxT("iconsmall"), wxBITMAP_TYPE_ICO_RESOURCE) );
 
 #else
     m_imageListNormal->Add( wxIcon( toolbrai_xpm ) );
@@ -211,55 +211,55 @@ MyFrame::MyFrame(const wxChar *title)
 
     // Make a menubar
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(LIST_ABOUT, _T("&About"));
+    menuFile->Append(LIST_ABOUT, wxT("&About"));
     menuFile->AppendSeparator();
-    menuFile->Append(LIST_QUIT, _T("E&xit\tAlt-X"));
+    menuFile->Append(LIST_QUIT, wxT("E&xit\tAlt-X"));
 
     wxMenu *menuView = new wxMenu;
-    menuView->Append(LIST_LIST_VIEW, _T("&List view\tF1"));
-    menuView->Append(LIST_REPORT_VIEW, _T("&Report view\tF2"));
-    menuView->Append(LIST_ICON_VIEW, _T("&Icon view\tF3"));
-    menuView->Append(LIST_ICON_TEXT_VIEW, _T("Icon view with &text\tF4"));
-    menuView->Append(LIST_SMALL_ICON_VIEW, _T("&Small icon view\tF5"));
-    menuView->Append(LIST_SMALL_ICON_TEXT_VIEW, _T("Small icon &view with text\tF6"));
-    menuView->Append(LIST_VIRTUAL_VIEW, _T("&Virtual view\tF7"));
-    menuView->Append(LIST_SMALL_VIRTUAL_VIEW, _T("Small virtual vie&w\tF8"));
+    menuView->Append(LIST_LIST_VIEW, wxT("&List view\tF1"));
+    menuView->Append(LIST_REPORT_VIEW, wxT("&Report view\tF2"));
+    menuView->Append(LIST_ICON_VIEW, wxT("&Icon view\tF3"));
+    menuView->Append(LIST_ICON_TEXT_VIEW, wxT("Icon view with &text\tF4"));
+    menuView->Append(LIST_SMALL_ICON_VIEW, wxT("&Small icon view\tF5"));
+    menuView->Append(LIST_SMALL_ICON_TEXT_VIEW, wxT("Small icon &view with text\tF6"));
+    menuView->Append(LIST_VIRTUAL_VIEW, wxT("&Virtual view\tF7"));
+    menuView->Append(LIST_SMALL_VIRTUAL_VIEW, wxT("Small virtual vie&w\tF8"));
 #ifdef __WXMAC__
-    menuView->AppendCheckItem(LIST_MAC_USE_GENERIC, _T("Mac: Use Generic Control"));
+    menuView->AppendCheckItem(LIST_MAC_USE_GENERIC, wxT("Mac: Use Generic Control"));
 #endif
 
     wxMenu *menuList = new wxMenu;
-    menuList->Append(LIST_FOCUS_LAST, _T("&Make last item current\tCtrl-L"));
-    menuList->Append(LIST_TOGGLE_FIRST, _T("To&ggle first item\tCtrl-G"));
-    menuList->Append(LIST_DESELECT_ALL, _T("&Deselect All\tCtrl-D"));
-    menuList->Append(LIST_SELECT_ALL, _T("S&elect All\tCtrl-A"));
+    menuList->Append(LIST_FOCUS_LAST, wxT("&Make last item current\tCtrl-L"));
+    menuList->Append(LIST_TOGGLE_FIRST, wxT("To&ggle first item\tCtrl-G"));
+    menuList->Append(LIST_DESELECT_ALL, wxT("&Deselect All\tCtrl-D"));
+    menuList->Append(LIST_SELECT_ALL, wxT("S&elect All\tCtrl-A"));
     menuList->AppendSeparator();
-    menuList->Append(LIST_SHOW_COL_INFO, _T("Show &column info\tCtrl-C"));
-    menuList->Append(LIST_SHOW_SEL_INFO, _T("Show &selected items\tCtrl-S"));
+    menuList->Append(LIST_SHOW_COL_INFO, wxT("Show &column info\tCtrl-C"));
+    menuList->Append(LIST_SHOW_SEL_INFO, wxT("Show &selected items\tCtrl-S"));
     menuList->AppendSeparator();
-    menuList->Append(LIST_SORT, _T("&Sort\tCtrl-S"));
+    menuList->Append(LIST_SORT, wxT("&Sort\tCtrl-S"));
     menuList->AppendSeparator();
-    menuList->Append(LIST_ADD, _T("&Append an item\tCtrl-P"));
-    menuList->Append(LIST_EDIT, _T("&Edit the item\tCtrl-E"));
-    menuList->Append(LIST_DELETE, _T("&Delete first item\tCtrl-X"));
-    menuList->Append(LIST_DELETE_ALL, _T("Delete &all items"));
+    menuList->Append(LIST_ADD, wxT("&Append an item\tCtrl-P"));
+    menuList->Append(LIST_EDIT, wxT("&Edit the item\tCtrl-E"));
+    menuList->Append(LIST_DELETE, wxT("&Delete first item\tCtrl-X"));
+    menuList->Append(LIST_DELETE_ALL, wxT("Delete &all items"));
     menuList->AppendSeparator();
-    menuList->Append(LIST_FREEZE, _T("Free&ze\tCtrl-Z"));
-    menuList->Append(LIST_THAW, _T("Tha&w\tCtrl-W"));
+    menuList->Append(LIST_FREEZE, wxT("Free&ze\tCtrl-Z"));
+    menuList->Append(LIST_THAW, wxT("Tha&w\tCtrl-W"));
     menuList->AppendSeparator();
-    menuList->AppendCheckItem(LIST_TOGGLE_LINES, _T("Toggle &lines\tCtrl-I"));
-    menuList->Append(LIST_TOGGLE_MULTI_SEL, _T("&Multiple selection\tCtrl-M"),
-            _T("Toggle multiple selection"), true);
+    menuList->AppendCheckItem(LIST_TOGGLE_LINES, wxT("Toggle &lines\tCtrl-I"));
+    menuList->Append(LIST_TOGGLE_MULTI_SEL, wxT("&Multiple selection\tCtrl-M"),
+            wxT("Toggle multiple selection"), true);
 
     wxMenu *menuCol = new wxMenu;
-    menuCol->Append(LIST_SET_FG_COL, _T("&Foreground colour..."));
-    menuCol->Append(LIST_SET_BG_COL, _T("&Background colour..."));
+    menuCol->Append(LIST_SET_FG_COL, wxT("&Foreground colour..."));
+    menuCol->Append(LIST_SET_BG_COL, wxT("&Background colour..."));
 
     wxMenuBar *menubar = new wxMenuBar;
-    menubar->Append(menuFile, _T("&File"));
-    menubar->Append(menuView, _T("&View"));
-    menubar->Append(menuList, _T("&List"));
-    menubar->Append(menuCol, _T("&Colour"));
+    menubar->Append(menuFile, wxT("&File"));
+    menubar->Append(menuView, wxT("&View"));
+    menubar->Append(menuList, wxT("&List"));
+    menubar->Append(menuCol, wxT("&Colour"));
     SetMenuBar(menubar);
 
     m_panel = new wxPanel(this, wxID_ANY);
@@ -308,7 +308,7 @@ bool MyFrame::CheckNonVirtual() const
         return true;
 
     // "this" == whatever
-    wxLogWarning(_T("Can't do this in virtual view, sorry."));
+    wxLogWarning(wxT("Can't do this in virtual view, sorry."));
 
     return false;
 }
@@ -320,22 +320,22 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageDialog dialog(this, _T("List test sample\nJulian Smart (c) 1997"),
-            _T("About list test"), wxOK|wxCANCEL);
+    wxMessageDialog dialog(this, wxT("List test sample\nJulian Smart (c) 1997"),
+            wxT("About list test"), wxOK|wxCANCEL);
 
     dialog.ShowModal();
 }
 
 void MyFrame::OnFreeze(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Freezing the control"));
+    wxLogMessage(wxT("Freezing the control"));
 
     m_listCtrl->Freeze();
 }
 
 void MyFrame::OnThaw(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Thawing the control"));
+    wxLogMessage(wxT("Thawing the control"));
 
     m_listCtrl->Thaw();
 }
@@ -429,7 +429,7 @@ void MyFrame::RecreateList(long flags, b
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown listctrl mode") );
+                wxFAIL_MSG( wxT("unknown listctrl mode") );
         }
     }
 
@@ -447,7 +447,7 @@ void MyFrame::InitWithListItems()
 {
     for ( int i = 0; i < NUM_ITEMS; i++ )
     {
-        m_listCtrl->InsertItem(i, wxString::Format(_T("Item %d"), i));
+        m_listCtrl->InsertItem(i, wxString::Format(wxT("Item %d"), i));
     }
 }
 
@@ -463,15 +463,15 @@ void MyFrame::InitWithReportItems()
     // note that under MSW for SetColumnWidth() to work we need to create the
     // items with images initially even if we specify dummy image id
     wxListItem itemCol;
-    itemCol.SetText(_T("Column 1"));
+    itemCol.SetText(wxT("Column 1"));
     itemCol.SetImage(-1);
     m_listCtrl->InsertColumn(0, itemCol);
 
-    itemCol.SetText(_T("Column 2"));
+    itemCol.SetText(wxT("Column 2"));
     itemCol.SetAlign(wxLIST_FORMAT_CENTRE);
     m_listCtrl->InsertColumn(1, itemCol);
 
-    itemCol.SetText(_T("Column 3"));
+    itemCol.SetText(wxT("Column 3"));
     itemCol.SetAlign(wxLIST_FORMAT_RIGHT);
     m_listCtrl->InsertColumn(2, itemCol);
 
@@ -485,7 +485,7 @@ void MyFrame::InitWithReportItems()
         m_listCtrl->InsertItemInReportView(i);
     }
 
-    m_logWindow->WriteText(wxString::Format(_T("%d items inserted in %ldms\n"),
+    m_logWindow->WriteText(wxString::Format(wxT("%d items inserted in %ldms\n"),
                                             NUM_ITEMS, sw.Time()));
     m_listCtrl->Show();
 
@@ -534,7 +534,7 @@ void MyFrame::InitWithIconItems(bool wit
 
         if ( withText )
         {
-            m_listCtrl->InsertItem(i, wxString::Format(_T("Label %d"), i),
+            m_listCtrl->InsertItem(i, wxString::Format(wxT("Label %d"), i),
                                    image);
         }
         else
@@ -582,14 +582,14 @@ void MyFrame::InitWithVirtualItems()
 
     if ( m_smallVirtual )
     {
-        m_listCtrl->InsertColumn(0, _T("Animal"));
-        m_listCtrl->InsertColumn(1, _T("Sound"));
+        m_listCtrl->InsertColumn(0, wxT("Animal"));
+        m_listCtrl->InsertColumn(1, wxT("Sound"));
         m_listCtrl->SetItemCount(WXSIZEOF(SMALL_VIRTUAL_VIEW_ITEMS));
     }
     else
     {
-        m_listCtrl->InsertColumn(0, _T("First Column"));
-        m_listCtrl->InsertColumn(1, _T("Second Column"));
+        m_listCtrl->InsertColumn(0, wxT("First Column"));
+        m_listCtrl->InsertColumn(1, wxT("Second Column"));
         m_listCtrl->SetColumnWidth(0, 150);
         m_listCtrl->SetColumnWidth(1, 150);
         m_listCtrl->SetItemCount(1000000);
@@ -602,7 +602,7 @@ void MyFrame::OnSort(wxCommandEvent& WXU
 
     m_listCtrl->SortItems(MyCompareFunction, 0);
 
-    m_logWindow->WriteText(wxString::Format(_T("Sorting %d items took %ld ms\n"),
+    m_logWindow->WriteText(wxString::Format(wxT("Sorting %d items took %ld ms\n"),
                                             m_listCtrl->GetItemCount(),
                                             sw.Time()));
 }
@@ -610,7 +610,7 @@ void MyFrame::OnSort(wxCommandEvent& WXU
 void MyFrame::OnShowSelInfo(wxCommandEvent& WXUNUSED(event))
 {
     int selCount = m_listCtrl->GetSelectedItemCount();
-    wxLogMessage(_T("%d items selected:"), selCount);
+    wxLogMessage(wxT("%d items selected:"), selCount);
 
     // don't show too many items
     size_t shownCount = 0;
@@ -619,12 +619,12 @@ void MyFrame::OnShowSelInfo(wxCommandEve
                                         wxLIST_STATE_SELECTED);
     while ( item != -1 )
     {
-        wxLogMessage(_T("\t%ld (%s)"),
+        wxLogMessage(wxT("\t%ld (%s)"),
                      item, m_listCtrl->GetItemText(item).c_str());
 
         if ( ++shownCount > 10 )
         {
-            wxLogMessage(_T("\t... more selected items snipped..."));
+            wxLogMessage(wxT("\t... more selected items snipped..."));
             break;
         }
 
@@ -658,7 +658,7 @@ void MyFrame::OnToggleMultiSel(wxCommand
         flags |= wxLC_SINGLE_SEL;
 
     m_logWindow->WriteText(wxString::Format(wxT("Current selection mode: %sle\n"),
-                           (flags & wxLC_SINGLE_SEL) ? _T("sing") : _T("multip")));
+                           (flags & wxLC_SINGLE_SEL) ? wxT("sing") : wxT("multip")));
 
     RecreateList(flags);
 }
@@ -682,7 +682,7 @@ void MyFrame::OnSetBgColour(wxCommandEve
 
 void MyFrame::OnAdd(wxCommandEvent& WXUNUSED(event))
 {
-    m_listCtrl->InsertItem(m_listCtrl->GetItemCount(), _T("Appended item"));
+    m_listCtrl->InsertItem(m_listCtrl->GetItemCount(), wxT("Appended item"));
 }
 
 void MyFrame::OnEdit(wxCommandEvent& WXUNUSED(event))
@@ -696,7 +696,7 @@ void MyFrame::OnEdit(wxCommandEvent& WXU
     }
     else
     {
-        m_logWindow->WriteText(_T("No item to edit"));
+        m_logWindow->WriteText(wxT("No item to edit"));
     }
 }
 
@@ -708,7 +708,7 @@ void MyFrame::OnDelete(wxCommandEvent& W
     }
     else
     {
-        m_logWindow->WriteText(_T("Nothing to delete"));
+        m_logWindow->WriteText(wxT("Nothing to delete"));
     }
 }
 
@@ -720,7 +720,7 @@ void MyFrame::OnDeleteAll(wxCommandEvent
 
     m_listCtrl->DeleteAllItems();
 
-    m_logWindow->WriteText(wxString::Format(_T("Deleting %d items took %ld ms\n"),
+    m_logWindow->WriteText(wxString::Format(wxT("Deleting %d items took %ld ms\n"),
                                             itemCount,
                                             sw.Time()));
 }
@@ -763,7 +763,7 @@ void MyListCtrl::OnColRightClick(wxListE
 
     // Show popupmenu at position
     wxMenu menu(wxT("Test"));
-    menu.Append(LIST_ABOUT, _T("&About"));
+    menu.Append(LIST_ABOUT, wxT("&About"));
     PopupMenu(&menu, event.GetPoint());
 
     wxLogMessage( wxT("OnColumnRightClick at %d."), event.GetColumn() );
@@ -786,7 +786,7 @@ void MyListCtrl::OnColBeginDrag(wxListEv
 
     if ( event.GetColumn() == 0 )
     {
-        wxLogMessage(_T("Resizing this column shouldn't work."));
+        wxLogMessage(wxT("Resizing this column shouldn't work."));
 
         event.Veto();
     }
@@ -825,19 +825,19 @@ void MyListCtrl::OnBeginLabelEdit(wxList
 void MyListCtrl::OnEndLabelEdit(wxListEvent& event)
 {
     wxLogMessage( wxT("OnEndLabelEdit: %s"),
-                  event.IsEditCancelled() ? _T("[cancelled]")
+                  event.IsEditCancelled() ? wxT("[cancelled]")
                                           : event.m_item.m_text.c_str());
 }
 
 void MyListCtrl::OnDeleteItem(wxListEvent& event)
 {
-    LogEvent(event, _T("OnDeleteItem"));
+    LogEvent(event, wxT("OnDeleteItem"));
     wxLogMessage( wxT("Number of items when delete event is sent: %d"), GetItemCount() );
 }
 
 void MyListCtrl::OnDeleteAllItems(wxListEvent& event)
 {
-    LogEvent(event, _T("OnDeleteAllItems"));
+    LogEvent(event, wxT("OnDeleteAllItems"));
 }
 
 #if WXWIN_COMPATIBILITY_2_4
@@ -845,25 +845,25 @@ void MyListCtrl::OnGetInfo(wxListEvent& 
 {
     wxString msg;
 
-    msg << _T("OnGetInfo (") << event.m_item.m_itemId << _T(", ") << event.m_item.m_col << _T(")");
+    msg << wxT("OnGetInfo (") << event.m_item.m_itemId << wxT(", ") << event.m_item.m_col << wxT(")");
     if ( event.m_item.m_mask & wxLIST_MASK_STATE )
-        msg << _T(" wxLIST_MASK_STATE");
+        msg << wxT(" wxLIST_MASK_STATE");
     if ( event.m_item.m_mask & wxLIST_MASK_TEXT )
-        msg << _T(" wxLIST_MASK_TEXT");
+        msg << wxT(" wxLIST_MASK_TEXT");
     if ( event.m_item.m_mask & wxLIST_MASK_IMAGE )
-        msg << _T(" wxLIST_MASK_IMAGE");
+        msg << wxT(" wxLIST_MASK_IMAGE");
     if ( event.m_item.m_mask & wxLIST_MASK_DATA )
-        msg << _T(" wxLIST_MASK_DATA");
+        msg << wxT(" wxLIST_MASK_DATA");
     if ( event.m_item.m_mask & wxLIST_SET_ITEM )
-        msg << _T(" wxLIST_SET_ITEM");
+        msg << wxT(" wxLIST_SET_ITEM");
     if ( event.m_item.m_mask & wxLIST_MASK_WIDTH )
-        msg << _T(" wxLIST_MASK_WIDTH");
+        msg << wxT(" wxLIST_MASK_WIDTH");
     if ( event.m_item.m_mask & wxLIST_MASK_FORMAT )
-        msg << _T(" wxLIST_MASK_WIDTH");
+        msg << wxT(" wxLIST_MASK_WIDTH");
 
     if ( event.m_item.m_mask & wxLIST_MASK_TEXT )
     {
-        event.m_item.m_text = _T("My callback text");
+        event.m_item.m_text = wxT("My callback text");
     }
 
     wxLogMessage(msg);
@@ -871,13 +871,13 @@ void MyListCtrl::OnGetInfo(wxListEvent& 
 
 void MyListCtrl::OnSetInfo(wxListEvent& event)
 {
-    LogEvent(event, _T("OnSetInfo"));
+    LogEvent(event, wxT("OnSetInfo"));
 }
 #endif
 
 void MyListCtrl::OnSelected(wxListEvent& event)
 {
-    LogEvent(event, _T("OnSelected"));
+    LogEvent(event, wxT("OnSelected"));
 
     if ( GetWindowStyle() & wxLC_REPORT )
     {
@@ -899,17 +899,17 @@ void MyListCtrl::OnSelected(wxListEvent&
 
 void MyListCtrl::OnDeselected(wxListEvent& event)
 {
-    LogEvent(event, _T("OnDeselected"));
+    LogEvent(event, wxT("OnDeselected"));
 }
 
 void MyListCtrl::OnActivated(wxListEvent& event)
 {
-    LogEvent(event, _T("OnActivated"));
+    LogEvent(event, wxT("OnActivated"));
 }
 
 void MyListCtrl::OnFocused(wxListEvent& event)
 {
-    LogEvent(event, _T("OnFocused"));
+    LogEvent(event, wxT("OnFocused"));
 
     event.Skip();
 }
@@ -953,7 +953,7 @@ void MyListCtrl::OnListKeyDown(wxListEve
                 item = 0;
             }
 
-            wxLogMessage(_T("Focusing item %ld"), item);
+            wxLogMessage(wxT("Focusing item %ld"), item);
 
             SetItemState(item, wxLIST_STATE_FOCUSED, wxLIST_STATE_FOCUSED);
             EnsureVisible(item);
@@ -966,11 +966,11 @@ void MyListCtrl::OnListKeyDown(wxListEve
                 wxRect r;
                 if ( !GetItemRect(item, r) )
                 {
-                    wxLogError(_T("Failed to retrieve rect of item %ld"), item);
+                    wxLogError(wxT("Failed to retrieve rect of item %ld"), item);
                     break;
                 }
 
-                wxLogMessage(_T("Bounding rect of item %ld is (%d, %d)-(%d, %d)"),
+                wxLogMessage(wxT("Bounding rect of item %ld is (%d, %d)-(%d, %d)"),
                              item, r.x, r.y, r.x + r.width, r.y + r.height);
             }
             break;
@@ -981,7 +981,7 @@ void MyListCtrl::OnListKeyDown(wxListEve
             {
                 DeleteItem(item);
 
-                wxLogMessage(_T("Item %ld deleted"), item);
+                wxLogMessage(wxT("Item %ld deleted"), item);
 
                 // -1 because the indices were shifted by DeleteItem()
                 item = GetNextItem(item - 1,
@@ -1004,7 +1004,7 @@ void MyListCtrl::OnListKeyDown(wxListEve
             //else: fall through
 
         default:
-            LogEvent(event, _T("OnListKeyDown"));
+            LogEvent(event, wxT("OnListKeyDown"));
 
             event.Skip();
     }
@@ -1012,7 +1012,7 @@ void MyListCtrl::OnListKeyDown(wxListEve
 
 void MyListCtrl::OnChar(wxKeyEvent& event)
 {
-    wxLogMessage(_T("Got char event."));
+    wxLogMessage(wxT("Got char event."));
 
     switch ( event.GetKeyCode() )
     {
@@ -1043,24 +1043,24 @@ void MyListCtrl::OnRightClick(wxMouseEve
     wxString where;
     switch ( flags )
     {
-        case wxLIST_HITTEST_ABOVE: where = _T("above"); break;
-        case wxLIST_HITTEST_BELOW: where = _T("below"); break;
-        case wxLIST_HITTEST_NOWHERE: where = _T("nowhere near"); break;
-        case wxLIST_HITTEST_ONITEMICON: where = _T("on icon of"); break;
-        case wxLIST_HITTEST_ONITEMLABEL: where = _T("on label of"); break;
-        case wxLIST_HITTEST_ONITEMRIGHT: where = _T("right on"); break;
-        case wxLIST_HITTEST_TOLEFT: where = _T("to the left of"); break;
-        case wxLIST_HITTEST_TORIGHT: where = _T("to the right of"); break;
-        default: where = _T("not clear exactly where on"); break;
+        case wxLIST_HITTEST_ABOVE: where = wxT("above"); break;
+        case wxLIST_HITTEST_BELOW: where = wxT("below"); break;
+        case wxLIST_HITTEST_NOWHERE: where = wxT("nowhere near"); break;
+        case wxLIST_HITTEST_ONITEMICON: where = wxT("on icon of"); break;
+        case wxLIST_HITTEST_ONITEMLABEL: where = wxT("on label of"); break;
+        case wxLIST_HITTEST_ONITEMRIGHT: where = wxT("right on"); break;
+        case wxLIST_HITTEST_TOLEFT: where = wxT("to the left of"); break;
+        case wxLIST_HITTEST_TORIGHT: where = wxT("to the right of"); break;
+        default: where = wxT("not clear exactly where on"); break;
     }
 
-    wxLogMessage(_T("Right double click %s item %ld, subitem %ld"),
+    wxLogMessage(wxT("Right double click %s item %ld, subitem %ld"),
                  where.c_str(), item, subitem);
 }
 
 void MyListCtrl::LogEvent(const wxListEvent& event, const wxChar *eventName)
 {
-    wxLogMessage(_T("Item %ld: %s (item text = %s, data = %ld)"),
+    wxLogMessage(wxT("Item %ld: %s (item text = %s, data = %ld)"),
                  event.GetIndex(), eventName,
                  event.GetText().c_str(), event.GetData());
 }
@@ -1073,7 +1073,7 @@ wxString MyListCtrl::OnGetItemText(long 
     }
     else
     {
-        return wxString::Format(_T("Column %ld of item %ld"), column, item);
+        return wxString::Format(wxT("Column %ld of item %ld"), column, item);
     }
 }
 
@@ -1096,14 +1096,14 @@ wxListItemAttr *MyListCtrl::OnGetItemAtt
 void MyListCtrl::InsertItemInReportView(int i)
 {
     wxString buf;
-    buf.Printf(_T("This is item %d"), i);
+    buf.Printf(wxT("This is item %d"), i);
     long tmp = InsertItem(i, buf, 0);
     SetItemData(tmp, i);
 
-    buf.Printf(_T("Col 1, item %d"), i);
+    buf.Printf(wxT("Col 1, item %d"), i);
     SetItem(tmp, 1, buf);
 
-    buf.Printf(_T("Item %d in column 2"), i);
+    buf.Printf(wxT("Item %d in column 2"), i);
     SetItem(tmp, 2, buf);
 }
 
@@ -1127,9 +1127,9 @@ void MyListCtrl::ShowContextMenu(const w
 {
     wxMenu menu;
 
-    menu.Append(wxID_ABOUT, _T("&About"));
+    menu.Append(wxID_ABOUT, wxT("&About"));
     menu.AppendSeparator();
-    menu.Append(wxID_EXIT, _T("E&xit"));
+    menu.Append(wxID_EXIT, wxT("E&xit"));
 
     PopupMenu(&menu, pos.x, pos.y);
 }
--- samples/mdi/mdi.cpp-orig	2009-06-18 18:40:29.363809000 -0500
+++ samples/mdi/mdi.cpp	2009-06-18 18:40:34.658702000 -0500
@@ -114,13 +114,13 @@ bool MyApp::OnInit()
 {
     // Create the main frame window
 
-    frame = new MyFrame((wxFrame *)NULL, wxID_ANY, _T("MDI Demo"),
+    frame = new MyFrame((wxFrame *)NULL, wxID_ANY, wxT("MDI Demo"),
                         wxDefaultPosition, wxSize(500, 400),
                         wxDEFAULT_FRAME_STYLE | wxHSCROLL | wxVSCROLL);
 #if 0
     // Experimental: change the window menu
     wxMenu* windowMenu = new wxMenu;
-    windowMenu->Append(5000, _T("My menu item!"));
+    windowMenu->Append(5000, wxT("My menu item!"));
     frame->SetWindowMenu(windowMenu);
 #endif
 
@@ -130,16 +130,16 @@ bool MyApp::OnInit()
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(MDI_NEW_WINDOW, _T("&New window\tCtrl-N"), _T("Create a new child window"));
-    file_menu->Append(MDI_QUIT, _T("&Exit\tAlt-X"), _T("Quit the program"));
+    file_menu->Append(MDI_NEW_WINDOW, wxT("&New window\tCtrl-N"), wxT("Create a new child window"));
+    file_menu->Append(MDI_QUIT, wxT("&Exit\tAlt-X"), wxT("Quit the program"));
 
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(MDI_ABOUT, _T("&About\tF1"));
+    help_menu->Append(MDI_ABOUT, wxT("&About\tF1"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
-    menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(file_menu, wxT("&File"));
+    menu_bar->Append(help_menu, wxT("&Help"));
 
     // Associate the menu bar with the frame
     frame->SetMenuBar(menu_bar);
@@ -168,7 +168,7 @@ MyFrame::MyFrame(wxWindow *parent,
                  const long style)
        : wxMDIParentFrame(parent, id, title, pos, size, style)
 {
-    textWindow = new wxTextCtrl(this, wxID_ANY, _T("A help window"),
+    textWindow = new wxTextCtrl(this, wxID_ANY, wxT("A help window"),
                                 wxDefaultPosition, wxDefaultSize,
                                 wxTE_MULTILINE | wxSUNKEN_BORDER);
 
@@ -193,8 +193,8 @@ void MyFrame::OnClose(wxCloseEvent& even
     if ( event.CanVeto() && (gs_nFrames > 0) )
     {
         wxString msg;
-        msg.Printf(_T("%d windows still open, close anyhow?"), gs_nFrames);
-        if ( wxMessageBox(msg, _T("Please confirm"),
+        msg.Printf(wxT("%d windows still open, close anyhow?"), gs_nFrames);
+        if ( wxMessageBox(msg, wxT("Please confirm"),
                           wxICON_QUESTION | wxYES_NO) != wxYES )
         {
             event.Veto();
@@ -213,18 +213,18 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    (void)wxMessageBox(_T("wxWidgets 2.0 MDI Demo\n")
-                       _T("Author: Julian Smart (c) 1997\n")
-                       _T("Usage: mdi.exe"), _T("About MDI Demo"));
+    (void)wxMessageBox(wxT("wxWidgets 2.0 MDI Demo\n")
+                       wxT("Author: Julian Smart (c) 1997\n")
+                       wxT("Usage: mdi.exe"), wxT("About MDI Demo"));
 }
 
 void MyFrame::OnNewWindow(wxCommandEvent& WXUNUSED(event) )
 {
     // Make another frame, containing a canvas
-    MyChild *subframe = new MyChild(frame, _T("Canvas Frame"));
+    MyChild *subframe = new MyChild(frame, wxT("Canvas Frame"));
 
     wxString title;
-    title.Printf(_T("Canvas Frame %d"), ++gs_nFrames);
+    title.Printf(wxT("Canvas Frame %d"), ++gs_nFrames);
 
     subframe->SetTitle(title);
 
@@ -235,30 +235,30 @@ void MyFrame::OnNewWindow(wxCommandEvent
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(MDI_NEW_WINDOW, _T("&New window"));
-    file_menu->Append(MDI_CHILD_QUIT, _T("&Close child"), _T("Close this window"));
-    file_menu->Append(MDI_QUIT, _T("&Exit"));
+    file_menu->Append(MDI_NEW_WINDOW, wxT("&New window"));
+    file_menu->Append(MDI_CHILD_QUIT, wxT("&Close child"), wxT("Close this window"));
+    file_menu->Append(MDI_QUIT, wxT("&Exit"));
 
     wxMenu *option_menu = new wxMenu;
 
-    option_menu->Append(MDI_REFRESH, _T("&Refresh picture"));
-    option_menu->Append(MDI_CHANGE_TITLE, _T("Change &title...\tCtrl-T"));
+    option_menu->Append(MDI_REFRESH, wxT("&Refresh picture"));
+    option_menu->Append(MDI_CHANGE_TITLE, wxT("Change &title...\tCtrl-T"));
     option_menu->AppendSeparator();
-    option_menu->Append(MDI_CHANGE_POSITION, _T("Move frame\tCtrl-M"));
-    option_menu->Append(MDI_CHANGE_SIZE, _T("Resize frame\tCtrl-S"));
+    option_menu->Append(MDI_CHANGE_POSITION, wxT("Move frame\tCtrl-M"));
+    option_menu->Append(MDI_CHANGE_SIZE, wxT("Resize frame\tCtrl-S"));
 #if wxUSE_CLIPBOARD
     option_menu->AppendSeparator();
-    option_menu->Append(wxID_PASTE, _T("Copy text from clipboard\tCtrl-V"));
+    option_menu->Append(wxID_PASTE, wxT("Copy text from clipboard\tCtrl-V"));
 #endif // wxUSE_CLIPBOARD
 
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(MDI_ABOUT, _T("&About"));
+    help_menu->Append(MDI_ABOUT, wxT("&About"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
-    menu_bar->Append(option_menu, _T("&Child"));
-    menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(file_menu, wxT("&File"));
+    menu_bar->Append(option_menu, wxT("&Child"));
+    menu_bar->Append(help_menu, wxT("&Help"));
 
     // Associate the menu bar with the frame
     subframe->SetMenuBar(menu_bar);
@@ -317,17 +317,17 @@ void MyFrame::InitToolBar(wxToolBar* too
     bitmaps[6] = wxBitmap( print_xpm );
     bitmaps[7] = wxBitmap( help_xpm );
 
-    toolBar->AddTool(MDI_NEW_WINDOW, _T("New"), bitmaps[0], _T("New file"));
-    toolBar->AddTool(1, _T("Open"), bitmaps[1], _T("Open file"));
-    toolBar->AddTool(2, _T("Save"), bitmaps[2], _T("Save file"));
+    toolBar->AddTool(MDI_NEW_WINDOW, wxT("New"), bitmaps[0], wxT("New file"));
+    toolBar->AddTool(1, wxT("Open"), bitmaps[1], wxT("Open file"));
+    toolBar->AddTool(2, wxT("Save"), bitmaps[2], wxT("Save file"));
     toolBar->AddSeparator();
-    toolBar->AddTool(3, _T("Copy"), bitmaps[3], _T("Copy"));
-    toolBar->AddTool(4, _T("Cut"), bitmaps[4], _T("Cut"));
-    toolBar->AddTool(5, _T("Paste"), bitmaps[5], _T("Paste"));
+    toolBar->AddTool(3, wxT("Copy"), bitmaps[3], wxT("Copy"));
+    toolBar->AddTool(4, wxT("Cut"), bitmaps[4], wxT("Cut"));
+    toolBar->AddTool(5, wxT("Paste"), bitmaps[5], wxT("Paste"));
     toolBar->AddSeparator();
-    toolBar->AddTool(6, _T("Print"), bitmaps[6], _T("Print"));
+    toolBar->AddTool(6, wxT("Print"), bitmaps[6], wxT("Print"));
     toolBar->AddSeparator();
-    toolBar->AddTool(MDI_ABOUT, _T("About"), bitmaps[7], _T("Help"));
+    toolBar->AddTool(MDI_ABOUT, wxT("About"), bitmaps[7], wxT("Help"));
 
     toolBar->Realize();
 }
@@ -344,7 +344,7 @@ MyCanvas::MyCanvas(wxWindow *parent, con
                            wxNO_FULL_REPAINT_ON_RESIZE |
                            wxVSCROLL | wxHSCROLL)
 {
-    SetBackgroundColour(wxColour(_T("WHITE")));
+    SetBackgroundColour(wxColour(wxT("WHITE")));
 
     m_dirty = false;
 }
@@ -370,7 +370,7 @@ void MyCanvas::OnDraw(wxDC& dc)
     dc.DrawSpline(50, 200, 50, 100, 200, 10);
 #endif // wxUSE_SPLINES
     dc.DrawLine(50, 230, 200, 230);
-    dc.DrawText(_T("This is a test string"), 50, 230);
+    dc.DrawText(wxT("This is a test string"), 50, 230);
 
     wxPoint points[3];
     points[0].x = 200; points[0].y = 300;
@@ -445,10 +445,10 @@ void MyChild::OnChangeSize(wxCommandEven
 void MyChild::OnChangeTitle(wxCommandEvent& WXUNUSED(event))
 {
 #if wxUSE_TEXTDLG
-    static wxString s_title = _T("Canvas Frame");
+    static wxString s_title = wxT("Canvas Frame");
 
-    wxString title = wxGetTextFromUser(_T("Enter the new title for MDI child"),
-                                       _T("MDI sample question"),
+    wxString title = wxGetTextFromUser(wxT("Enter the new title for MDI child"),
+                                       wxT("MDI sample question"),
                                        s_title,
                                        GetParent()->GetParent());
     if ( !title )
@@ -496,7 +496,7 @@ void MyChild::OnClose(wxCloseEvent& even
 {
     if ( canvas && canvas->IsDirty() )
     {
-        if ( wxMessageBox(_T("Really close?"), _T("Please confirm"),
+        if ( wxMessageBox(wxT("Really close?"), wxT("Please confirm"),
                           wxICON_QUESTION | wxYES_NO) != wxYES )
         {
             event.Veto();
@@ -519,7 +519,7 @@ void MyChild::OnPaste(wxCommandEvent& WX
     wxClipboardLocker lock;
     wxTextDataObject data;
     canvas->SetText(wxTheClipboard->GetData(data) ? data.GetText().c_str()
-                                                  : _T("No text on clipboard"));
+                                                  : wxT("No text on clipboard"));
 }
 
 void MyChild::OnUpdatePaste(wxUpdateUIEvent& event)
--- samples/debugrpt/debugrpt.cpp-orig	2009-06-18 18:40:15.516711000 -0500
+++ samples/debugrpt/debugrpt.cpp	2009-06-18 18:40:21.441314000 -0500
@@ -51,9 +51,9 @@ class MyDebugReport : public wxDebugRepo
 public:
     MyDebugReport() : wxDebugReportUpload
                        (
-                        _T("http://your.url.here/"),
-                        _T("report:file"),
-                        _T("action")
+                        wxT("http://your.url.here/"),
+                        wxT("report:file"),
+                        wxT("action")
                        )
     {
     }
@@ -66,19 +66,19 @@ protected:
     {
         if ( reply.IsEmpty() )
         {
-            wxLogError(_T("Didn't receive the expected server reply."));
+            wxLogError(wxT("Didn't receive the expected server reply."));
             return false;
         }
 
-        wxString s(_T("Server replied:\n"));
+        wxString s(wxT("Server replied:\n"));
 
         const size_t count = reply.GetCount();
         for ( size_t n = 0; n < count; n++ )
         {
-            s << _T('\t') << reply[n] << _T('\n');
+            s << wxT('\t') << reply[n] << wxT('\n');
         }
 
-        wxLogMessage(_T("%s"), s.c_str());
+        wxLogMessage(wxT("%s"), s.c_str());
 
         return true;
     }
@@ -97,12 +97,12 @@ public:
     {
         if ( !wxDebugReportCompress::DoProcess() )
             return false;
-        wxMailMessage msg(GetReportName() + _T(" crash report"),
-                          _T("vadim@wxwindows.org"),
+        wxMailMessage msg(GetReportName() + wxT(" crash report"),
+                          wxT("vadim@wxwindows.org"),
                           wxEmptyString, // mail body
                           wxEmptyString, // from address
                           GetCompressedFileName(),
-                          _T("crashreport.zip"));
+                          wxT("crashreport.zip"));
 
         return wxEmail::Send(msg);
     }
@@ -229,33 +229,33 @@ BEGIN_EVENT_TABLE(MyFrame, wxFrame)
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("wxWidgets Debug Report Sample"))
+       : wxFrame(NULL, wxID_ANY, wxT("wxWidgets Debug Report Sample"))
 {
     m_numLines = 10;
 
     SetIcon(wxICON(sample));
 
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(DebugRpt_Quit, _T("E&xit\tAlt-X"));
+    menuFile->Append(DebugRpt_Quit, wxT("E&xit\tAlt-X"));
 
     wxMenu *menuReport = new wxMenu;
-    menuReport->Append(DebugRpt_Crash, _T("Report for &crash\tCtrl-C"),
-                       _T("Provoke a crash inside the program and create report for it"));
-    menuReport->Append(DebugRpt_Current, _T("Report for c&urrent context\tCtrl-U"),
-                       _T("Create report for the current program context"));
-    menuReport->Append(DebugRpt_Paint, _T("Report for &paint handler\tCtrl-P"),
-                       _T("Provoke a repeatable crash in wxEVT_PAINT handler"));
+    menuReport->Append(DebugRpt_Crash, wxT("Report for &crash\tCtrl-C"),
+                       wxT("Provoke a crash inside the program and create report for it"));
+    menuReport->Append(DebugRpt_Current, wxT("Report for c&urrent context\tCtrl-U"),
+                       wxT("Create report for the current program context"));
+    menuReport->Append(DebugRpt_Paint, wxT("Report for &paint handler\tCtrl-P"),
+                       wxT("Provoke a repeatable crash in wxEVT_PAINT handler"));
     menuReport->AppendSeparator();
-    menuReport->AppendCheckItem(DebugRpt_Upload, _T("Up&load debug report"),
-                       _T("You need to configure a web server accepting debug report uploads to use this function"));
+    menuReport->AppendCheckItem(DebugRpt_Upload, wxT("Up&load debug report"),
+                       wxT("You need to configure a web server accepting debug report uploads to use this function"));
 
     wxMenu *menuHelp = new wxMenu;
-    menuHelp->Append(DebugRpt_About, _T("&About...\tF1"));
+    menuHelp->Append(DebugRpt_About, wxT("&About...\tF1"));
 
     wxMenuBar *mbar = new wxMenuBar();
-    mbar->Append(menuFile, _T("&File"));
-    mbar->Append(menuReport, _T("&Report"));
-    mbar->Append(menuHelp, _T("&Help"));
+    mbar->Append(menuFile, wxT("&File"));
+    mbar->Append(menuReport, wxT("&Report"));
+    mbar->Append(menuHelp, wxT("&Help"));
     SetMenuBar(mbar);
 
     CreateStatusBar();
@@ -300,8 +300,8 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 {
     wxMessageBox
     (
-        _T("wxDebugReport sample\n(c) 2005 Vadim Zeitlin <vadim@wxwindows.org>"),
-        _T("wxWidgets Debug Report Sample"),
+        wxT("wxDebugReport sample\n(c) 2005 Vadim Zeitlin <vadim@wxwindows.org>"),
+        wxT("wxWidgets Debug Report Sample"),
         wxOK | wxICON_INFORMATION,
         this
     );
@@ -355,23 +355,23 @@ void MyApp::GenerateReport(wxDebugReport
     // you can also call report->AddFile(...) with your own log files, files
     // created using wxRegKey::Export() and so on, here we just add a test
     // file containing the date of the crash
-    wxFileName fn(report->GetDirectory(), _T("timestamp.my"));
-    wxFFile file(fn.GetFullPath(), _T("w"));
+    wxFileName fn(report->GetDirectory(), wxT("timestamp.my"));
+    wxFFile file(fn.GetFullPath(), wxT("w"));
     if ( file.IsOpened() )
     {
         wxDateTime dt = wxDateTime::Now();
-        file.Write(dt.FormatISODate() + _T(' ') + dt.FormatISOTime());
+        file.Write(dt.FormatISODate() + wxT(' ') + dt.FormatISOTime());
         file.Close();
     }
 
-    report->AddFile(fn.GetFullName(), _T("timestamp of this report"));
+    report->AddFile(fn.GetFullName(), wxT("timestamp of this report"));
 
     // can also add an existing file directly, it will be copied
     // automatically
 #ifdef __WXMSW__
-    report->AddFile(_T("c:\\autoexec.bat"), _T("DOS startup file"));
+    report->AddFile(wxT("c:\\autoexec.bat"), wxT("DOS startup file"));
 #else
-    report->AddFile(_T("/etc/motd"), _T("Message of the day"));
+    report->AddFile(wxT("/etc/motd"), wxT("Message of the day"));
 #endif
 
     // calling Show() is not mandatory, but is more polite
@@ -381,11 +381,11 @@ void MyApp::GenerateReport(wxDebugReport
         {
             if ( m_uploadReport )
             {
-                wxLogMessage(_T("Report successfully uploaded."));
+                wxLogMessage(wxT("Report successfully uploaded."));
             }
             else
             {
-                wxLogMessage(_T("Report generated in \"%s\"."),
+                wxLogMessage(wxT("Report generated in \"%s\"."),
                              report->GetCompressedFileName().c_str());
                 report->Reset();
             }
--- samples/power/power.cpp-orig	2009-06-18 18:39:46.652645000 -0500
+++ samples/power/power.cpp	2009-06-18 18:39:52.941333000 -0500
@@ -44,10 +44,10 @@ class MyFrame : public wxFrame
 {
 public:
     MyFrame()
-        : wxFrame(NULL, wxID_ANY, _T("wxWidgets Power Management Sample"),
+        : wxFrame(NULL, wxID_ANY, wxT("wxWidgets Power Management Sample"),
                   wxDefaultPosition, wxSize(500, 200))
     {
-        wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, _T(""),
+        wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, wxT(""),
                                           wxDefaultPosition, wxDefaultSize,
                                           wxTE_MULTILINE | wxTE_READONLY);
         m_logOld = wxLog::SetActiveTarget(new wxLogTextCtrl(text));
@@ -80,28 +80,28 @@ private:
 #ifdef wxHAS_POWER_EVENTS
     void OnSuspending(wxPowerEvent& event)
     {
-        wxLogMessage(_T("System suspend starting..."));
-        if ( wxMessageBox(_T("Veto suspend?"), _T("Please answer"),
+        wxLogMessage(wxT("System suspend starting..."));
+        if ( wxMessageBox(wxT("Veto suspend?"), wxT("Please answer"),
                           wxYES_NO, this) == wxYES )
         {
             event.Veto();
-            wxLogMessage(_T("Vetoed suspend."));
+            wxLogMessage(wxT("Vetoed suspend."));
         }
     }
 
     void OnSuspended(wxPowerEvent& WXUNUSED(event))
     {
-        wxLogMessage(_T("System is going to suspend."));
+        wxLogMessage(wxT("System is going to suspend."));
     }
 
     void OnSuspendCancel(wxPowerEvent& WXUNUSED(event))
     {
-        wxLogMessage(_T("System suspend was cancelled."));
+        wxLogMessage(wxT("System suspend was cancelled."));
     }
 
     void OnResume(wxPowerEvent& WXUNUSED(event))
     {
-        wxLogMessage(_T("System resumed from suspend."));
+        wxLogMessage(wxT("System resumed from suspend."));
     }
 #endif // wxHAS_POWER_EVENTS
 
@@ -112,19 +112,19 @@ private:
         switch ( m_powerType = powerType )
         {
             case wxPOWER_SOCKET:
-                powerStr = _T("wall");
+                powerStr = wxT("wall");
                 break;
 
             case wxPOWER_BATTERY:
-                powerStr = _T("battery");
+                powerStr = wxT("battery");
                 break;
 
             default:
-                wxFAIL_MSG(_T("unknown wxPowerType value"));
+                wxFAIL_MSG(wxT("unknown wxPowerType value"));
                 // fall through
 
             case wxPOWER_UNKNOWN:
-                powerStr = _T("psychic");
+                powerStr = wxT("psychic");
                 break;
         }
 
@@ -132,32 +132,32 @@ private:
         switch ( m_batteryState = batteryState )
         {
             case wxBATTERY_NORMAL_STATE:
-                batteryStr = _T("charged");
+                batteryStr = wxT("charged");
                 break;
 
             case wxBATTERY_LOW_STATE:
-                batteryStr = _T("low");
+                batteryStr = wxT("low");
                 break;
 
             case wxBATTERY_CRITICAL_STATE:
-                batteryStr = _T("critical");
+                batteryStr = wxT("critical");
                 break;
 
             case wxBATTERY_SHUTDOWN_STATE:
-                batteryStr = _T("empty");
+                batteryStr = wxT("empty");
                 break;
 
             default:
-                wxFAIL_MSG(_T("unknown wxBatteryState value"));
+                wxFAIL_MSG(wxT("unknown wxBatteryState value"));
                 // fall through
 
             case wxBATTERY_UNKNOWN_STATE:
-                batteryStr = _T("unknown");
+                batteryStr = wxT("unknown");
                 break;
         }
 
         SetStatusText(wxString::Format(
-                        _T("System is on %s power, battery state is %s"),
+                        wxT("System is on %s power, battery state is %s"),
                         powerStr.c_str(),
                         batteryStr.c_str()));
     }
--- samples/html/test/test.cpp-orig	2009-06-18 18:39:18.028493000 -0500
+++ samples/html/test/test.cpp	2009-06-18 18:39:23.038514000 -0500
@@ -236,7 +236,7 @@ MyFrame::MyFrame(const wxString& title, 
     m_Html->LoadFile(wxFileName(wxT("test.htm")));
     m_Html->AddProcessor(m_Processor);
 
-    wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, _T(""),
+    wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, wxT(""),
                                       wxDefaultPosition, wxDefaultSize,
                                       wxTE_MULTILINE);
 
@@ -339,7 +339,7 @@ wxHtmlOpeningStatus MyHtmlWindow::OnOpen
                                                const wxString& url,
                                                wxString *WXUNUSED(redirect)) const
 {
-    GetRelatedFrame()->SetStatusText(url + _T(" lately opened"),1);
+    GetRelatedFrame()->SetStatusText(url + wxT(" lately opened"),1);
     return wxHTML_OPEN;
 }
 
@@ -360,10 +360,10 @@ void MyHtmlWindow::OnClipboardEvent(wxCl
             const wxString text = data.GetText();
             const size_t maxTextLength = 100;
 
-            wxLogStatus(wxString::Format(_T("Clipboard: '%s%s'"),
+            wxLogStatus(wxString::Format(wxT("Clipboard: '%s%s'"),
                         wxString(text, maxTextLength).c_str(),
-                        (text.length() > maxTextLength) ? _T("...")
-                                                        : _T("")));
+                        (text.length() > maxTextLength) ? wxT("...")
+                                                        : wxT("")));
 
             wxTheClipboard->Close();
 
@@ -371,6 +371,6 @@ void MyHtmlWindow::OnClipboardEvent(wxCl
         }
     }
 
-    wxLogStatus(_T("Clipboard: nothing"));
+    wxLogStatus(wxT("Clipboard: nothing"));
 }
 #endif // wxUSE_CLIPBOARD
--- samples/html/htmlctrl/htmlctrl.cpp-orig	2009-06-18 18:39:32.464920000 -0500
+++ samples/html/htmlctrl/htmlctrl.cpp	2009-06-18 18:39:38.974174000 -0500
@@ -126,7 +126,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxWebKit Sample"));
+    MyFrame *frame = new MyFrame(wxT("wxWebKit Sample"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -175,7 +175,7 @@ MyFrame::MyFrame(const wxString& title)
     wxButton* btnReload = new wxButton(myToolbar, ID_RELOAD, _("Reload"));
     myToolbar->AddControl(btnReload);
     myToolbar->AddSeparator();
-    urlText = new wxTextCtrl(myToolbar, ID_URLLIST, _T("http://www.wxwidgets.org"), wxDefaultPosition, wxSize(220, -1), wxTE_PROCESS_ENTER);
+    urlText = new wxTextCtrl(myToolbar, ID_URLLIST, wxT("http://www.wxwidgets.org"), wxDefaultPosition, wxSize(220, -1), wxTE_PROCESS_ENTER);
     myToolbar->AddControl(urlText);
     myToolbar->AddSeparator();
     myToolbar->Realize();
@@ -187,7 +187,7 @@ MyFrame::MyFrame(const wxString& title)
     wxBoxSizer* boxSizer = new wxBoxSizer(wxVERTICAL);
     panel->SetSizer(boxSizer);
 
-    mySafari = new wxWebKitCtrl(panel, ID_WEBKIT, _T("http://www.wxwidgets.org"), wxDefaultPosition, wxSize(200, 200));
+    mySafari = new wxWebKitCtrl(panel, ID_WEBKIT, wxT("http://www.wxwidgets.org"), wxDefaultPosition, wxSize(200, 200));
 
     boxSizer->Add(mySafari, 1, wxEXPAND);
 
@@ -195,7 +195,7 @@ MyFrame::MyFrame(const wxString& title)
     SetSizer(frameSizer);
     frameSizer->Add(panel, 1, wxEXPAND);
 #else
-    mySafari = new wxWebKitCtrl(this, ID_WEBKIT, _T("http://www.wxwidgets.org"), wxDefaultPosition, wxSize(200, 200));
+    mySafari = new wxWebKitCtrl(this, ID_WEBKIT, wxT("http://www.wxwidgets.org"), wxDefaultPosition, wxSize(200, 200));
 #endif
     
 #if wxUSE_STATUSBAR
--- samples/artprov/arttest.cpp-orig	2009-06-18 18:38:41.898687000 -0500
+++ samples/artprov/arttest.cpp	2009-06-18 18:38:54.233136000 -0500
@@ -97,7 +97,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxArtProvider sample"),
+    MyFrame *frame = new MyFrame(wxT("wxArtProvider sample"),
                                  wxPoint(50, 50), wxSize(450, 340));
     frame->Show(true);
     return true;
@@ -154,23 +154,23 @@ MyFrame::MyFrame(const wxString& title, 
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_ABOUT, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(wxID_ABOUT, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->AppendCheckItem(ID_PlugProvider, _T("&Plug-in art provider"), _T("Enable custom art provider"));
+    menuFile->AppendCheckItem(ID_PlugProvider, wxT("&Plug-in art provider"), wxT("Enable custom art provider"));
     menuFile->AppendSeparator();
 
 #if wxUSE_LOG
-    menuFile->Append(ID_Logs, _T("&Logging test"), _T("Show some logging output"));
+    menuFile->Append(ID_Logs, wxT("&Logging test"), wxT("Show some logging output"));
 #endif // wxUSE_LOG
-    menuFile->Append(ID_Browser, _T("&Resources browser"), _T("Browse all available icons"));
+    menuFile->Append(ID_Browser, wxT("&Resources browser"), wxT("Browse all available icons"));
     menuFile->AppendSeparator();
 
-    menuFile->Append(ID_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(ID_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -188,22 +188,22 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 #if wxUSE_LOG
 void MyFrame::OnLogs(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Some information."));
-    wxLogError(_T("This is an error."));
-    wxLogWarning(_T("A warning."));
-    wxLogError(_T("Yet another error."));
+    wxLogMessage(wxT("Some information."));
+    wxLogError(wxT("This is an error."));
+    wxLogWarning(wxT("A warning."));
+    wxLogError(wxT("Yet another error."));
     wxLog::GetActiveTarget()->Flush();
-    wxLogMessage(_T("Check/uncheck 'File/Plug-in art provider' and try again."));
+    wxLogMessage(wxT("Check/uncheck 'File/Plug-in art provider' and try again."));
 }
 #endif // wxUSE_LOG
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the about dialog of wxArtProvider sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the about dialog of wxArtProvider sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About wxArtProvider sample"),
+    wxMessageBox(msg, wxT("About wxArtProvider sample"),
         wxOK | wxICON_INFORMATION, this);
 }
 
--- samples/artprov/artbrows.cpp-orig	2009-06-18 18:40:00.899968000 -0500
+++ samples/artprov/artbrows.cpp	2009-06-18 18:40:06.193476000 -0500
@@ -29,7 +29,7 @@
 #include "artbrows.h"
 
 #define ART_CLIENT(id) \
-    choice->Append(_T(#id), (void*)id);
+    choice->Append(wxT(#id), (void*)id);
 #define ART_ICON(id) \
     { \
         int ind; \
@@ -38,7 +38,7 @@
             ind = images->Add(icon); \
         else \
             ind = 0; \
-        list->InsertItem(index, _T(#id), ind); \
+        list->InsertItem(index, wxT(#id), ind); \
         list->SetItemData(index, (long)id); \
         index++; \
     }
@@ -119,7 +119,7 @@ BEGIN_EVENT_TABLE(wxArtBrowserDialog, wx
 END_EVENT_TABLE()
 
 wxArtBrowserDialog::wxArtBrowserDialog(wxWindow *parent)
-    : wxDialog(parent, wxID_ANY, _T("Art resources browser"),
+    : wxDialog(parent, wxID_ANY, wxT("Art resources browser"),
                wxDefaultPosition, wxDefaultSize,
                wxDEFAULT_DIALOG_STYLE|wxRESIZE_BORDER)
 {
@@ -130,7 +130,7 @@ wxArtBrowserDialog::wxArtBrowserDialog(w
     FillClients(choice);
 
     subsizer = new wxBoxSizer(wxHORIZONTAL);
-    subsizer->Add(new wxStaticText(this, wxID_ANY, _T("Client:")), 0, wxALIGN_CENTER_VERTICAL);
+    subsizer->Add(new wxStaticText(this, wxID_ANY, wxT("Client:")), 0, wxALIGN_CENTER_VERTICAL);
     subsizer->Add(choice, 1, wxLEFT, 5);
     sizer->Add(subsizer, 0, wxALL | wxEXPAND, 10);
 
@@ -138,7 +138,7 @@ wxArtBrowserDialog::wxArtBrowserDialog(w
 
     m_list = new wxListCtrl(this, wxID_ANY, wxDefaultPosition, wxSize(250, 300),
                             wxLC_REPORT | wxSUNKEN_BORDER);
-    m_list->InsertColumn(0, _T("wxArtID"));
+    m_list->InsertColumn(0, wxT("wxArtID"));
     subsizer->Add(m_list, 1, wxEXPAND | wxRIGHT, 10);
 
     wxSizer *subsub = new wxBoxSizer(wxVERTICAL);
@@ -152,7 +152,7 @@ wxArtBrowserDialog::wxArtBrowserDialog(w
 
     sizer->Add(subsizer, 1, wxEXPAND | wxLEFT|wxRIGHT, 10);
 
-    wxButton *ok = new wxButton(this, wxID_OK, _T("Close"));
+    wxButton *ok = new wxButton(this, wxID_OK, wxT("Close"));
     ok->SetDefault();
     sizer->Add(ok, 0, wxALIGN_RIGHT | wxALL, 10);
 
--- samples/layout/layout.cpp-orig	2009-06-18 18:38:15.786708000 -0500
+++ samples/layout/layout.cpp	2009-06-18 18:38:21.013924000 -0500
@@ -67,37 +67,37 @@ END_EVENT_TABLE()
 
 // Define my frame constructor
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("wxWidgets Layout Demo"),
+       : wxFrame(NULL, wxID_ANY, wxT("wxWidgets Layout Demo"),
                  wxDefaultPosition, wxDefaultSize,
                  wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE)
 {
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(LAYOUT_TEST_PROPORTIONS, _T("&Proportions demo...\tF1"));
-  file_menu->Append(LAYOUT_TEST_SIZER, _T("Test wx&FlexSizer...\tF2"));
-  file_menu->Append(LAYOUT_TEST_NB_SIZER, _T("Test &notebook sizers...\tF3"));
-  file_menu->Append(LAYOUT_TEST_GB_SIZER, _T("Test &gridbag sizer...\tF4"));
-  file_menu->Append(LAYOUT_TEST_SET_MINIMAL, _T("Test Set&ItemMinSize...\tF5"));
-  file_menu->Append(LAYOUT_TEST_NESTED, _T("Test nested sizer in a wxPanel...\tF6"));
+  file_menu->Append(LAYOUT_TEST_PROPORTIONS, wxT("&Proportions demo...\tF1"));
+  file_menu->Append(LAYOUT_TEST_SIZER, wxT("Test wx&FlexSizer...\tF2"));
+  file_menu->Append(LAYOUT_TEST_NB_SIZER, wxT("Test &notebook sizers...\tF3"));
+  file_menu->Append(LAYOUT_TEST_GB_SIZER, wxT("Test &gridbag sizer...\tF4"));
+  file_menu->Append(LAYOUT_TEST_SET_MINIMAL, wxT("Test Set&ItemMinSize...\tF5"));
+  file_menu->Append(LAYOUT_TEST_NESTED, wxT("Test nested sizer in a wxPanel...\tF6"));
 
   file_menu->AppendSeparator();
-  file_menu->Append(LAYOUT_QUIT, _T("E&xit"), _T("Quit program"));
+  file_menu->Append(LAYOUT_QUIT, wxT("E&xit"), wxT("Quit program"));
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(LAYOUT_ABOUT, _T("&About"), _T("About layout demo..."));
+  help_menu->Append(LAYOUT_ABOUT, wxT("&About"), wxT("About layout demo..."));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
-  menu_bar->Append(help_menu, _T("&Help"));
+  menu_bar->Append(file_menu, wxT("&File"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   // Associate the menu bar with the frame
   SetMenuBar(menu_bar);
 
 #if wxUSE_STATUSBAR
   CreateStatusBar(2);
-  SetStatusText(_T("wxWidgets layout demo"));
+  SetStatusText(wxT("wxWidgets layout demo"));
 #endif // wxUSE_STATUSBAR
 
   wxPanel* p = new wxPanel(this, wxID_ANY);
@@ -110,19 +110,19 @@ MyFrame::MyFrame()
 
   // 1) top: create wxStaticText with minimum size equal to its default size
   topsizer->Add(
-    new wxStaticText( p, wxID_ANY, _T("An explanation (wxALIGN_RIGHT).") ),
+    new wxStaticText( p, wxID_ANY, wxT("An explanation (wxALIGN_RIGHT).") ),
     wxSizerFlags().Align(wxALIGN_RIGHT).Border(wxALL & ~wxBOTTOM, 5));
 
   // 2) top: create wxTextCtrl with minimum size (100x60)
   topsizer->Add(
-    new wxTextCtrl( p, wxID_ANY, _T("My text (wxEXPAND)."), wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),
+    new wxTextCtrl( p, wxID_ANY, wxT("My text (wxEXPAND)."), wxDefaultPosition, wxSize(100,60), wxTE_MULTILINE),
     wxSizerFlags(1).Expand().Border(wxALL, 5));
 
   // 2.5) Gratuitous test of wxStaticBoxSizers
   wxBoxSizer *statsizer = new wxStaticBoxSizer(
-    new wxStaticBox(p, wxID_ANY, _T("A wxStaticBoxSizer")), wxVERTICAL );
+    new wxStaticBox(p, wxID_ANY, wxT("A wxStaticBoxSizer")), wxVERTICAL );
   statsizer->Add(
-    new wxStaticText(p, wxID_ANY, _T("And some TEXT inside it")),
+    new wxStaticText(p, wxID_ANY, wxT("And some TEXT inside it")),
     wxSizerFlags().Center().Border(wxALL, 30));
   topsizer->Add(
     statsizer,
@@ -130,17 +130,17 @@ MyFrame::MyFrame()
 
     // 2.7) And a test of wxGridSizer
     wxGridSizer *gridsizer = new wxGridSizer(2, 5, 5);
-    gridsizer->Add(new wxStaticText(p, wxID_ANY, _T("Label")),
+    gridsizer->Add(new wxStaticText(p, wxID_ANY, wxT("Label")),
                    wxSizerFlags().Align(wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL));
-    gridsizer->Add(new wxTextCtrl(p, wxID_ANY, _T("Grid sizer demo")),
+    gridsizer->Add(new wxTextCtrl(p, wxID_ANY, wxT("Grid sizer demo")),
                    wxSizerFlags(1).Align(wxGROW | wxALIGN_CENTER_VERTICAL));
-    gridsizer->Add(new wxStaticText(p, wxID_ANY, _T("Another label")),
+    gridsizer->Add(new wxStaticText(p, wxID_ANY, wxT("Another label")),
                    wxSizerFlags().Align(wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL));
-    gridsizer->Add(new wxTextCtrl(p, wxID_ANY, _T("More text")),
+    gridsizer->Add(new wxTextCtrl(p, wxID_ANY, wxT("More text")),
                    wxSizerFlags(1).Align(wxGROW | wxALIGN_CENTER_VERTICAL));
-    gridsizer->Add(new wxStaticText(p, wxID_ANY, _T("Final label")),
+    gridsizer->Add(new wxStaticText(p, wxID_ANY, wxT("Final label")),
                    wxSizerFlags().Align(wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL));
-    gridsizer->Add(new wxTextCtrl(p, wxID_ANY, _T("And yet more text")),
+    gridsizer->Add(new wxTextCtrl(p, wxID_ANY, wxT("And yet more text")),
                    wxSizerFlags().Align(wxGROW | wxALIGN_CENTER_VERTICAL));
     topsizer->Add(
         gridsizer,
@@ -158,10 +158,10 @@ MyFrame::MyFrame()
   // 4) bottom: create two centred wxButtons
   wxBoxSizer *button_box = new wxBoxSizer( wxHORIZONTAL );
   button_box->Add(
-     new wxButton( p, wxID_ANY, _T("Two buttons in a box") ),
+     new wxButton( p, wxID_ANY, wxT("Two buttons in a box") ),
      wxSizerFlags().Border(wxALL, 7));
   button_box->Add(
-     new wxButton( p, wxID_ANY, _T("(wxCENTER)") ),
+     new wxButton( p, wxID_ANY, wxT("(wxCENTER)") ),
      wxSizerFlags().Border(wxALL, 7));
 
   topsizer->Add(button_box, wxSizerFlags().Center());
@@ -185,40 +185,40 @@ void MyFrame::TestProportions(wxCommandE
 
 void MyFrame::TestFlexSizers(wxCommandEvent& WXUNUSED(event) )
 {
-    MyFlexSizerFrame *newFrame = new MyFlexSizerFrame(_T("Flex Sizer Test Frame"), 50, 50);
+    MyFlexSizerFrame *newFrame = new MyFlexSizerFrame(wxT("Flex Sizer Test Frame"), 50, 50);
     newFrame->Show(true);
 }
 
 void MyFrame::TestNotebookSizers(wxCommandEvent& WXUNUSED(event) )
 {
-    MySizerDialog dialog( this, _T("Notebook Sizer Test Dialog") );
+    MySizerDialog dialog( this, wxT("Notebook Sizer Test Dialog") );
 
     dialog.ShowModal();
 }
 
 void MyFrame::TestSetMinimal(wxCommandEvent& WXUNUSED(event) )
 {
-    MySimpleSizerFrame *newFrame = new MySimpleSizerFrame(_T("Simple Sizer Test Frame"), 50, 50);
+    MySimpleSizerFrame *newFrame = new MySimpleSizerFrame(wxT("Simple Sizer Test Frame"), 50, 50);
     newFrame->Show(true);
 }
 
 void MyFrame::TestNested(wxCommandEvent& WXUNUSED(event) )
 {
-    MyNestedSizerFrame *newFrame = new MyNestedSizerFrame(_T("Nested Sizer Test Frame"), 50, 50);
+    MyNestedSizerFrame *newFrame = new MyNestedSizerFrame(wxT("Nested Sizer Test Frame"), 50, 50);
     newFrame->Show(true);
 }
 
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    (void)wxMessageBox(_T("wxWidgets GUI library layout demo\n"),
-            _T("About Layout Demo"), wxOK|wxICON_INFORMATION);
+    (void)wxMessageBox(wxT("wxWidgets GUI library layout demo\n"),
+            wxT("About Layout Demo"), wxOK|wxICON_INFORMATION);
 }
 
 void MyFrame::TestGridBagSizer(wxCommandEvent& WXUNUSED(event) )
 {
     MyGridBagSizerFrame *newFrame = new
-        MyGridBagSizerFrame(_T("wxGridBagSizer Test Frame"), 50, 50);
+        MyGridBagSizerFrame(wxT("wxGridBagSizer Test Frame"), 50, 50);
     newFrame->Show(true);
 }
 
@@ -227,7 +227,7 @@ void MyFrame::TestGridBagSizer(wxCommand
 // ----------------------------------------------------------------------------
 
 MyProportionsFrame::MyProportionsFrame(wxFrame *parent)
-                  : wxFrame(parent, wxID_ANY, _T("Box Sizer Proportions Demo"))
+                  : wxFrame(parent, wxID_ANY, wxT("Box Sizer Proportions Demo"))
 {
     size_t n;
 
@@ -241,7 +241,7 @@ MyProportionsFrame::MyProportionsFrame(w
 
     // lay them out
     m_sizer = new wxStaticBoxSizer(wxHORIZONTAL, panel,
-                _T("Try changing elements proportions and resizing the window"));
+                wxT("Try changing elements proportions and resizing the window"));
     for ( n = 0; n < WXSIZEOF(m_spins); n++ )
         m_sizer->Add(m_spins[n], wxSizerFlags().Border());
 
@@ -293,7 +293,7 @@ void MyFlexSizerFrame::InitFlexSizer(wxF
                            (
                             parent,
                             wxID_ANY,
-                            wxString::Format(_T("(%d, %d)"), i + 1, j + 1),
+                            wxString::Format(wxT("(%d, %d)"), i + 1, j + 1),
                             wxDefaultPosition,
                             wxDefaultSize,
                             wxALIGN_CENTER
@@ -311,24 +311,24 @@ MyFlexSizerFrame::MyFlexSizerFrame(const
 
     // consttuct the first column
     wxSizer *sizerCol1 = new wxBoxSizer(wxVERTICAL);
-    sizerCol1->Add(new wxStaticText(p, wxID_ANY, _T("Ungrowable:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(p, wxID_ANY, wxT("Ungrowable:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerCol1->Add(sizerFlex, 1, wxALL | wxEXPAND, 10);
 
-    sizerCol1->Add(new wxStaticText(p, wxID_ANY, _T("Growable middle column:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(p, wxID_ANY, wxT("Growable middle column:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableCol(1);
     sizerCol1->Add(sizerFlex, 1, wxALL | wxEXPAND, 10);
 
-    sizerCol1->Add(new wxStaticText(p, wxID_ANY, _T("Growable middle row:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(p, wxID_ANY, wxT("Growable middle row:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableRow(1);
     sizerCol1->Add(sizerFlex, 1, wxALL | wxEXPAND, 10);
 
-    sizerCol1->Add(new wxStaticText(p, wxID_ANY, _T("All growable columns:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol1->Add(new wxStaticText(p, wxID_ANY, wxT("All growable columns:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableCol(0, 1);
@@ -338,14 +338,14 @@ MyFlexSizerFrame::MyFlexSizerFrame(const
 
     // the second one
     wxSizer *sizerCol2 = new wxBoxSizer(wxVERTICAL);
-    sizerCol2->Add(new wxStaticText(p, wxID_ANY, _T("Growable middle row and column:")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(p, wxID_ANY, wxT("Growable middle row and column:")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableCol(1);
     sizerFlex->AddGrowableRow(1);
     sizerCol2->Add(sizerFlex, 1, wxALL | wxEXPAND, 10);
 
-    sizerCol2->Add(new wxStaticText(p, wxID_ANY, _T("Same with horz flex direction")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(p, wxID_ANY, wxT("Same with horz flex direction")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableCol(1);
@@ -353,7 +353,7 @@ MyFlexSizerFrame::MyFlexSizerFrame(const
     sizerFlex->SetFlexibleDirection(wxHORIZONTAL);
     sizerCol2->Add(sizerFlex, 1, wxALL | wxEXPAND, 10);
 
-    sizerCol2->Add(new wxStaticText(p, wxID_ANY, _T("Same with grow mode == \"none\"")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(p, wxID_ANY, wxT("Same with grow mode == \"none\"")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableCol(1);
@@ -362,7 +362,7 @@ MyFlexSizerFrame::MyFlexSizerFrame(const
     sizerFlex->SetNonFlexibleGrowMode(wxFLEX_GROWMODE_NONE);
     sizerCol2->Add(sizerFlex, 1, wxALL | wxEXPAND, 10);
 
-    sizerCol2->Add(new wxStaticText(p, wxID_ANY, _T("Same with grow mode == \"all\"")), 0, wxCENTER | wxTOP, 20);
+    sizerCol2->Add(new wxStaticText(p, wxID_ANY, wxT("Same with grow mode == \"all\"")), 0, wxCENTER | wxTOP, 20);
     sizerFlex = new wxFlexGridSizer(3, 3);
     InitFlexSizer(sizerFlex, p);
     sizerFlex->AddGrowableCol(1);
@@ -395,24 +395,24 @@ MySizerDialog::MySizerDialog(wxWindow *p
     wxNotebook *notebook = new wxNotebook( this, wxID_ANY );
     topsizer->Add( notebook, 1, wxGROW );
 
-    wxButton *button = new wxButton( this, wxID_OK, _T("OK") );
+    wxButton *button = new wxButton( this, wxID_OK, wxT("OK") );
     topsizer->Add( button, 0, wxALIGN_RIGHT | wxALL, 10 );
 
     // First page: one big text ctrl
-    wxTextCtrl *multi = new wxTextCtrl( notebook, wxID_ANY, _T("TextCtrl."), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
-    notebook->AddPage( multi, _T("Page One") );
+    wxTextCtrl *multi = new wxTextCtrl( notebook, wxID_ANY, wxT("TextCtrl."), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE );
+    notebook->AddPage( multi, wxT("Page One") );
 
     // Second page: a text ctrl and a button
     wxPanel *panel = new wxPanel( notebook, wxID_ANY );
-    notebook->AddPage( panel, _T("Page Two") );
+    notebook->AddPage( panel, wxT("Page Two") );
 
     wxSizer *panelsizer = new wxBoxSizer( wxVERTICAL );
 
-    wxTextCtrl *text = new wxTextCtrl( panel, wxID_ANY, _T("TextLine 1."), wxDefaultPosition, wxSize(250,wxDefaultCoord) );
+    wxTextCtrl *text = new wxTextCtrl( panel, wxID_ANY, wxT("TextLine 1."), wxDefaultPosition, wxSize(250,wxDefaultCoord) );
     panelsizer->Add( text, 0, wxGROW|wxALL, 30 );
-    text = new wxTextCtrl( panel, wxID_ANY, _T("TextLine 2."), wxDefaultPosition, wxSize(250,wxDefaultCoord) );
+    text = new wxTextCtrl( panel, wxID_ANY, wxT("TextLine 2."), wxDefaultPosition, wxSize(250,wxDefaultCoord) );
     panelsizer->Add( text, 0, wxGROW|wxALL, 30 );
-    wxButton *button2 = new wxButton( panel, wxID_ANY, _T("Hallo") );
+    wxButton *button2 = new wxButton( panel, wxID_ANY, wxT("Hallo") );
     panelsizer->Add( button2, 0, wxALIGN_RIGHT | wxLEFT|wxRIGHT|wxBOTTOM, 30 );
 
     panel->SetAutoLayout( true );
@@ -428,12 +428,12 @@ MySizerDialog::MySizerDialog(wxWindow *p
 // ----------------------------------------------------------------------------
 
 // some simple macros to help make the sample code below more clear
-#define TEXTCTRL(text)   new wxTextCtrl(p, wxID_ANY, _T(text))
-#define MLTEXTCTRL(text) new wxTextCtrl(p, wxID_ANY, _T(text), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE)
+#define TEXTCTRL(text)   new wxTextCtrl(p, wxID_ANY, wxT(text))
+#define MLTEXTCTRL(text) new wxTextCtrl(p, wxID_ANY, wxT(text), wxDefaultPosition, wxDefaultSize, wxTE_MULTILINE)
 #define POS(r, c)        wxGBPosition(r,c)
 #define SPAN(r, c)       wxGBSpan(r,c)
 
-const wxChar gbsDescription[] =_T("\
+const wxChar gbsDescription[] =wxT("\
 The wxGridBagSizer is similar to the wxFlexGridSizer except the items are explicitly positioned\n\
 in a virtual cell of the layout grid, and column or row spanning is allowed.  For example, this\n\
 static text is positioned at (0,0) and it spans 7 columns.");
@@ -486,19 +486,19 @@ MyGridBagSizerFrame::MyGridBagSizerFrame
     //m_gbs->Add( TEXTCTRL("bad position"), POS(5,3) );  // Test for assert
 
 
-    m_moveBtn1 = new wxButton(p, GBS_MOVE_BTN1, _T("Move this to (3,6)"));
-    m_moveBtn2 = new wxButton(p, GBS_MOVE_BTN2, _T("Move this to (3,6)"));
+    m_moveBtn1 = new wxButton(p, GBS_MOVE_BTN1, wxT("Move this to (3,6)"));
+    m_moveBtn2 = new wxButton(p, GBS_MOVE_BTN2, wxT("Move this to (3,6)"));
     m_gbs->Add( m_moveBtn1, POS(10,2) );
     m_gbs->Add( m_moveBtn2, POS(10,3) );
 
-    m_hideBtn = new wxButton(p, GBS_HIDE_BTN, _T("Hide this item -->"));
+    m_hideBtn = new wxButton(p, GBS_HIDE_BTN, wxT("Hide this item -->"));
     m_gbs->Add(m_hideBtn, POS(12, 3));
 
-    m_hideTxt = new wxTextCtrl(p, wxID_ANY, _T("pos(12,4), size(150, wxDefaultCoord)"),
+    m_hideTxt = new wxTextCtrl(p, wxID_ANY, wxT("pos(12,4), size(150, wxDefaultCoord)"),
                                 wxDefaultPosition, wxSize(150,wxDefaultCoord));
     m_gbs->Add( m_hideTxt, POS(12,4) );
 
-    m_showBtn = new wxButton(p, GBS_SHOW_BTN, _T("<-- Show it again"));
+    m_showBtn = new wxButton(p, GBS_SHOW_BTN, wxT("<-- Show it again"));
     m_gbs->Add(m_showBtn, POS(12, 5));
     m_showBtn->Disable();
 
@@ -538,20 +538,20 @@ void MyGridBagSizerFrame::OnMoveBtn(wxCo
     if (curPos == wxGBPosition(3,6))
     {
         m_gbs->SetItemPosition(btn, m_lastPos);
-        btn->SetLabel(_T("Move this to (3,6)"));
+        btn->SetLabel(wxT("Move this to (3,6)"));
     }
     else
     {
         if ( m_gbs->CheckForIntersection(wxGBPosition(3,6), wxGBSpan(1,1)) )
             wxMessageBox(
-_T("wxGridBagSizer will not allow items to be in the same cell as\n\
+wxT("wxGridBagSizer will not allow items to be in the same cell as\n\
 another item, so this operation will fail.  You will also get an assert\n\
-when compiled in debug mode."), _T("Warning"), wxOK | wxICON_INFORMATION);
+when compiled in debug mode."), wxT("Warning"), wxOK | wxICON_INFORMATION);
 
         if ( m_gbs->SetItemPosition(btn, wxGBPosition(3,6)) )
         {
             m_lastPos = curPos;
-            btn->SetLabel(_T("Move it back"));
+            btn->SetLabel(wxT("Move it back"));
         }
     }
     m_gbs->Layout();
@@ -577,11 +577,11 @@ MySimpleSizerFrame::MySimpleSizerFrame(c
 {
     wxMenu *menu = new wxMenu;
 
-    menu->Append(ID_SET_SMALL, _T("Make text control small\tF4"));
-    menu->Append(ID_SET_BIG, _T("Make text control big\tF5"));
+    menu->Append(ID_SET_SMALL, wxT("Make text control small\tF4"));
+    menu->Append(ID_SET_BIG, wxT("Make text control big\tF5"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(menu, _T("&File"));
+    menu_bar->Append(menu, wxT("&File"));
 
     SetMenuBar( menu_bar );
 
@@ -623,10 +623,10 @@ MyNestedSizerFrame::MyNestedSizerFrame(c
 {
     wxMenu *menu = new wxMenu;
 
-    menu->Append(wxID_ABOUT, _T("Do nothing"));
+    menu->Append(wxID_ABOUT, wxT("Do nothing"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(menu, _T("&File"));
+    menu_bar->Append(menu, wxT("&File"));
 
     SetMenuBar( menu_bar );
 
--- samples/treectrl/treetest.cpp-orig	2009-06-18 18:38:29.390521000 -0500
+++ samples/treectrl/treetest.cpp	2009-06-18 18:38:34.757230000 -0500
@@ -360,13 +360,13 @@ void MyFrame::OnIdle(wxIdleEvent& event)
         {
             wxTreeItemId idLast = m_treeCtrl->GetLastChild(idRoot);
             status = wxString::Format(
-                _T("Root/last item is %svisible/%svisible"),
-                m_treeCtrl->IsVisible(idRoot) ? _T("") : _T("not "),
+                wxT("Root/last item is %svisible/%svisible"),
+                m_treeCtrl->IsVisible(idRoot) ? wxT("") : wxT("not "),
                 idLast.IsOk() && m_treeCtrl->IsVisible(idLast)
-                    ? _T("") : _T("not "));
+                    ? wxT("") : wxT("not "));
         }
         else
-            status = _T("No root item");
+            status = wxT("No root item");
 
         SetStatusText(status, 1);
     }
@@ -475,7 +475,7 @@ void MyFrame::OnHighlight(wxCommandEvent
     wxRect r;
     if ( !m_treeCtrl->GetBoundingRect(id, r, true /* text, not full row */) )
     {
-        wxLogMessage(_T("Failed to get bounding item rect"));
+        wxLogMessage(wxT("Failed to get bounding item rect"));
         return;
     }
 
@@ -927,9 +927,9 @@ void MyTreeCtrl::LogEvent(const wxChar *
     wxTreeItemId item = event.GetItem();
     wxString text;
     if ( item.IsOk() )
-        text << _T('"') << GetItemText(item).c_str() << _T('"');
+        text << wxT('"') << GetItemText(item).c_str() << wxT('"');
     else
-        text = _T("invalid item");
+        text = wxT("invalid item");
     wxLogMessage(wxT("%s(%s)"), name, text.c_str());
 }
 
@@ -937,7 +937,7 @@ void MyTreeCtrl::LogEvent(const wxChar *
 #define TREE_EVENT_HANDLER(name)                                 \
 void MyTreeCtrl::name(wxTreeEvent& event)                        \
 {                                                                \
-    LogEvent(_T(#name), event);                                  \
+    LogEvent(wxT(#name), event);                                  \
     SetLastItem(wxTreeItemId());                                 \
     event.Skip();                                                \
 }
@@ -1160,7 +1160,7 @@ void MyTreeCtrl::OnBeginLabelEdit(wxTree
     else if ( itemId == GetRootItem() )
     {
         // test that it is possible to change the text of the item being edited
-        SetItemText(itemId, _T("Editing root item"));
+        SetItemText(itemId, wxT("Editing root item"));
     }
 }
 
@@ -1214,7 +1214,7 @@ void MyTreeCtrl::OnItemMenu(wxTreeEvent&
     wxPoint screenpt = ClientToScreen(clientpt);
 
     wxLogMessage(wxT("OnItemMenu for item \"%s\" at screen coords (%i, %i)"), 
-                 item ? item->GetDesc() : _T(""), screenpt.x, screenpt.y);
+                 item ? item->GetDesc() : wxT(""), screenpt.x, screenpt.y);
 
     ShowMenu(itemId, clientpt);
     event.Skip();
@@ -1257,7 +1257,7 @@ void MyTreeCtrl::OnItemRClick(wxTreeEven
                                          : NULL;
 
     wxLogMessage(wxT("Item \"%s\" right clicked"), item ? item->GetDesc()
-                                                        : _T(""));
+                                                        : wxT(""));
 
     event.Skip();
 }
--- samples/nativdlg/nativdlg.cpp-orig	2009-06-18 18:39:03.541882000 -0500
+++ samples/nativdlg/nativdlg.cpp	2009-06-18 18:39:09.709994000 -0500
@@ -33,7 +33,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit(void)
 {
   // Create the main frame window
-  MyFrame   *frame = new MyFrame(NULL, wxID_ANY, _T("wxWidgets Native Dialog Sample"), wxPoint(0, 0), wxSize(300, 250));
+  MyFrame   *frame = new MyFrame(NULL, wxID_ANY, wxT("wxWidgets Native Dialog Sample"), wxPoint(0, 0), wxSize(300, 250));
 
 #if wxUSE_STATUSBAR
   // Give it a status line
@@ -43,18 +43,18 @@ bool MyApp::OnInit(void)
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(RESOURCE_TEST1, _T("&Dialog box test"),                _T("Test dialog box resource"));
-  file_menu->Append(RESOURCE_QUIT, _T("E&xit"),                _T("Quit program"));
+  file_menu->Append(RESOURCE_TEST1, wxT("&Dialog box test"),                wxT("Test dialog box resource"));
+  file_menu->Append(RESOURCE_QUIT, wxT("E&xit"),                wxT("Quit program"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
+  menu_bar->Append(file_menu, wxT("&File"));
 
   // Associate the menu bar with the frame
   frame->SetMenuBar(menu_bar);
 
   // Make a panel
-  frame->panel = new wxWindow(frame, wxID_ANY, wxPoint(0, 0), wxSize(400, 400), 0, _T("MyMainFrame"));
+  frame->panel = new wxWindow(frame, wxID_ANY, wxPoint(0, 0), wxSize(400, 400), 0, wxT("MyMainFrame"));
   frame->Show(true);
 
   // Return the main frame window
@@ -84,12 +84,12 @@ void MyFrame::OnTest1(wxCommandEvent& WX
 {
 #if ( defined(__WXPM__) || defined(__WXMSW__) ) && !defined(__WXUNIVERSAL__)
     MyDialog dialog;
-    if (dialog.LoadNativeDialog(this, _T("dialog1")))
+    if (dialog.LoadNativeDialog(this, wxT("dialog1")))
     {
         dialog.ShowModal();
     }
 #else
-    wxMessageBox(_T("No native dialog support"),_T("Platform limitation"));
+    wxMessageBox(wxT("No native dialog support"),wxT("Platform limitation"));
 #endif
 }
 
--- samples/joytest/joytest.cpp-orig	2009-06-18 18:38:01.426277000 -0500
+++ samples/joytest/joytest.cpp	2009-06-18 18:38:07.284383000 -0500
@@ -46,12 +46,12 @@ bool MyApp::OnInit()
     wxJoystick stick(wxJOYSTICK1);
     if (!stick.IsOk())
     {
-        wxMessageBox(_T("No joystick detected!"));
+        wxMessageBox(wxT("No joystick detected!"));
         return false;
     }
 
 #if wxUSE_SOUND
-    m_fire.Create(_T("buttonpress.wav"));
+    m_fire.Create(wxT("buttonpress.wav"));
 #endif // wxUSE_SOUND
 
     m_minX = stick.GetXMin();
@@ -61,25 +61,25 @@ bool MyApp::OnInit()
 
     // Create the main frame window
 
-    frame = new MyFrame(NULL, _T("Joystick Demo"), wxDefaultPosition,
+    frame = new MyFrame(NULL, wxT("Joystick Demo"), wxDefaultPosition,
         wxSize(500, 400), wxDEFAULT_FRAME_STYLE | wxHSCROLL | wxVSCROLL);
 
   // Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
-    frame->SetIcon(wxIcon(_T("joyicon")));
+    frame->SetIcon(wxIcon(wxT("joyicon")));
 #endif
 #ifdef __X__
-    frame->SetIcon(wxIcon(_T("joyicon.xbm")));
+    frame->SetIcon(wxIcon(wxT("joyicon.xbm")));
 #endif
 
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(JOYTEST_QUIT, _T("&Exit"));
+    file_menu->Append(JOYTEST_QUIT, wxT("&Exit"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     // Associate the menu bar with the frame
     frame->SetMenuBar(menu_bar);
@@ -155,9 +155,9 @@ void MyCanvas::OnJoystickEvent(wxJoystic
 #if wxUSE_STATUSBAR
     wxString buf;
     if (event.ButtonDown())
-        buf.Printf(_T("Joystick (%d, %d) #%i Fire!"), pt.x, pt.y, event.GetButtonChange());
+        buf.Printf(wxT("Joystick (%d, %d) #%i Fire!"), pt.x, pt.y, event.GetButtonChange());
     else
-        buf.Printf(_T("Joystick (%d, %d)  "), pt.x, pt.y);
+        buf.Printf(wxT("Joystick (%d, %d)  "), pt.x, pt.y);
 
 /*
     for(int i = 0; i < nButtons; ++i)
--- samples/splash/splash.cpp-orig	2009-06-18 18:37:48.802979000 -0500
+++ samples/splash/splash.cpp	2009-06-18 18:37:54.146148000 -0500
@@ -126,7 +126,7 @@ bool MyApp::OnInit()
     wxImage::AddHandler(new wxPNGHandler);
 
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxSplashScreen sample application"));
+    MyFrame *frame = new MyFrame(wxT("wxSplashScreen sample application"));
 
     wxBitmap bitmap;
 
@@ -135,7 +135,7 @@ bool MyApp::OnInit()
 
     bool ok = frame->m_isPda
             ? bitmap.Ok()
-            : bitmap.LoadFile(_T("splash.png"), wxBITMAP_TYPE_PNG);
+            : bitmap.LoadFile(wxT("splash.png"), wxBITMAP_TYPE_PNG);
 
     if (ok)
     {
@@ -175,14 +175,14 @@ MyFrame::MyFrame(const wxString& title)
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_ABOUT, _T("&About...\tF1"), _T("Show about frame"));
+    helpMenu->Append(wxID_ABOUT, wxT("&About...\tF1"), wxT("Show about frame"));
 
-    menuFile->Append(wxID_EXIT, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(wxID_EXIT, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -191,7 +191,7 @@ MyFrame::MyFrame(const wxString& title)
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -212,7 +212,7 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 
     bool ok = m_isPda
             ? bitmap.Ok()
-            : bitmap.LoadFile(_T("splash.png"), wxBITMAP_TYPE_PNG);
+            : bitmap.LoadFile(wxT("splash.png"), wxBITMAP_TYPE_PNG);
 
     if (ok)
     {
@@ -227,12 +227,12 @@ void MyFrame::OnAbout(wxCommandEvent& WX
             wxSIMPLE_BORDER|wxSTAY_ON_TOP);
         wxWindow *win = splash->GetSplashWindow();
 #if wxUSE_MEDIACTRL
-        wxMediaCtrl *media = new wxMediaCtrl( win, wxID_EXIT, _T("press.mpg"), wxPoint(2,2));
+        wxMediaCtrl *media = new wxMediaCtrl( win, wxID_EXIT, wxT("press.mpg"), wxPoint(2,2));
         media->Play();
 #else
         wxStaticText *text = new wxStaticText( win,
                                                wxID_EXIT,
-                                               _T("click somewhere\non image"),
+                                               wxT("click somewhere\non image"),
                                                wxPoint(m_isPda ? 0 : 13,
                                                        m_isPda ? 0 : 11)
                                              );
--- samples/dialup/nettest.cpp-orig	2009-06-18 18:37:36.029712000 -0500
+++ samples/dialup/nettest.cpp	2009-06-18 18:37:41.053304000 -0500
@@ -151,7 +151,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("Dial-up wxWidgets demo"),
+    MyFrame *frame = new MyFrame(wxT("Dial-up wxWidgets demo"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // Show it and tell the application that it's our main window
@@ -176,7 +176,7 @@ bool MyApp::OnInit()
     }
 
 #if wxUSE_STATUSBAR
-    frame->SetStatusText(GetDialer()->IsAlwaysOnline() ? _T("LAN") : _T("No LAN"), 2);
+    frame->SetStatusText(GetDialer()->IsAlwaysOnline() ? wxT("LAN") : wxT("No LAN"), 2);
 #endif // wxUSE_STATUSBAR
 
     return true;
@@ -220,19 +220,19 @@ MyFrame::MyFrame(const wxString& title, 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 
-    menuFile->Append(NetTest_Dial, _T("&Dial\tCtrl-D"), _T("Dial default ISP"));
-    menuFile->Append(NetTest_HangUp, _T("&HangUp\tCtrl-H"), _T("Hang up modem"));
+    menuFile->Append(NetTest_Dial, wxT("&Dial\tCtrl-D"), wxT("Dial default ISP"));
+    menuFile->Append(NetTest_HangUp, wxT("&HangUp\tCtrl-H"), wxT("Hang up modem"));
     menuFile->AppendSeparator();
-    menuFile->Append(NetTest_EnumISP, _T("&Enumerate ISPs...\tCtrl-E"));
-    menuFile->Append(NetTest_Check, _T("&Check connection status...\tCtrl-C"));
+    menuFile->Append(NetTest_EnumISP, wxT("&Enumerate ISPs...\tCtrl-E"));
+    menuFile->Append(NetTest_Check, wxT("&Check connection status...\tCtrl-C"));
     menuFile->AppendSeparator();
-    menuFile->Append(NetTest_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(NetTest_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
     menuFile->AppendSeparator();
-    menuFile->Append(NetTest_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(NetTest_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
+    menuBar->Append(menuFile, wxT("&File"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -311,7 +311,7 @@ void MyFrame::OnEnumISPs(wxCommandEvent&
     }
     else
     {
-        wxString msg = _T("Known ISPs:\n");
+        wxString msg = wxT("Known ISPs:\n");
         for ( size_t n = 0; n < nCount; n++ )
         {
             msg << names[n] << '\n';
@@ -337,7 +337,7 @@ void MyFrame::OnIdle(wxIdleEvent& WXUNUS
         s_isOnline = isOnline;
 
 #if wxUSE_STATUSBAR
-        SetStatusText(isOnline ? _T("Online") : _T("Offline"), 1);
+        SetStatusText(isOnline ? wxT("Online") : wxT("Offline"), 1);
 #endif // wxUSE_STATUSBAR
     }
 }
--- samples/calendar/calendar.cpp-orig	2009-06-18 18:37:14.206702000 -0500
+++ samples/calendar/calendar.cpp	2009-06-18 18:37:22.765715000 -0500
@@ -267,7 +267,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("Calendar wxWidgets sample")
+    MyFrame *frame = new MyFrame(wxT("Calendar wxWidgets sample")
 #ifndef __WXWINCE__
                                  ,wxPoint(50, 50), wxSize(450, 340)
 #endif
@@ -294,66 +294,66 @@ MyFrame::MyFrame(const wxString& title, 
 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Calendar_File_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(Calendar_File_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
     menuFile->AppendSeparator();
-    menuFile->Append(Calendar_File_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Calendar_File_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *menuCal = new wxMenu;
     menuCal->Append(Calendar_Cal_Monday,
-                    _T("Monday &first weekday\tCtrl-F"),
-                    _T("Toggle between Mon and Sun as the first week day"),
+                    wxT("Monday &first weekday\tCtrl-F"),
+                    wxT("Toggle between Mon and Sun as the first week day"),
                     true);
-    menuCal->Append(Calendar_Cal_Holidays, _T("Show &holidays\tCtrl-H"),
-                    _T("Toggle highlighting the holidays"),
+    menuCal->Append(Calendar_Cal_Holidays, wxT("Show &holidays\tCtrl-H"),
+                    wxT("Toggle highlighting the holidays"),
                     true);
-    menuCal->Append(Calendar_Cal_Special, _T("Highlight &special dates\tCtrl-S"),
-                    _T("Test custom highlighting"),
+    menuCal->Append(Calendar_Cal_Special, wxT("Highlight &special dates\tCtrl-S"),
+                    wxT("Test custom highlighting"),
                     true);
     menuCal->Append(Calendar_Cal_SurroundWeeks,
-                    _T("Show s&urrounding weeks\tCtrl-W"),
-                    _T("Show the neighbouring weeks in the prev/next month"),
+                    wxT("Show s&urrounding weeks\tCtrl-W"),
+                    wxT("Show the neighbouring weeks in the prev/next month"),
                     true);
     menuCal->AppendSeparator();
     menuCal->Append(Calendar_Cal_SeqMonth,
-                    _T("To&ggle month selector style\tCtrl-G"),
-                    _T("Use another style for the calendar controls"),
+                    wxT("To&ggle month selector style\tCtrl-G"),
+                    wxT("Use another style for the calendar controls"),
                     true);
-    menuCal->Append(Calendar_Cal_Month, _T("&Month can be changed\tCtrl-M"),
-                    _T("Allow changing the month in the calendar"),
+    menuCal->Append(Calendar_Cal_Month, wxT("&Month can be changed\tCtrl-M"),
+                    wxT("Allow changing the month in the calendar"),
                     true);
-    menuCal->Append(Calendar_Cal_Year, _T("&Year can be changed\tCtrl-Y"),
-                    _T("Allow changing the year in the calendar"),
+    menuCal->Append(Calendar_Cal_Year, wxT("&Year can be changed\tCtrl-Y"),
+                    wxT("Allow changing the year in the calendar"),
                     true);
     menuCal->AppendSeparator();
-    menuCal->Append(Calendar_Cal_SetDate, _T("Call &SetDate(2005-12-24)"), _T("Set date to 2005-12-24."));
-    menuCal->Append(Calendar_Cal_Today, _T("Call &Today()"), _T("Set the current date."));
+    menuCal->Append(Calendar_Cal_SetDate, wxT("Call &SetDate(2005-12-24)"), wxT("Set date to 2005-12-24."));
+    menuCal->Append(Calendar_Cal_Today, wxT("Call &Today()"), wxT("Set the current date."));
     menuCal->AppendSeparator();
-    menuCal->AppendCheckItem(Calendar_Cal_Resizable, _T("Make &resizable\tCtrl-R"));
+    menuCal->AppendCheckItem(Calendar_Cal_Resizable, wxT("Make &resizable\tCtrl-R"));
 
 #if wxUSE_DATEPICKCTRL
     wxMenu *menuDate = new wxMenu;
     menuDate->AppendCheckItem(Calendar_DatePicker_ShowCentury,
-                              _T("Al&ways show century"));
+                              wxT("Al&ways show century"));
     menuDate->AppendCheckItem(Calendar_DatePicker_DropDown,
-                              _T("Use &drop down control"));
+                              wxT("Use &drop down control"));
     menuDate->AppendCheckItem(Calendar_DatePicker_AllowNone,
-                              _T("Allow &no date"));
+                              wxT("Allow &no date"));
     menuDate->AppendCheckItem(Calendar_DatePicker_StartWithNone,
-                              _T("Start &with no date"));
+                              wxT("Start &with no date"));
 #if wxUSE_DATEPICKCTRL_GENERIC
     menuDate->AppendCheckItem(Calendar_DatePicker_Generic,
-                              _T("Use &generic version of the control"));
+                              wxT("Use &generic version of the control"));
 #endif // wxUSE_DATEPICKCTRL_GENERIC
     menuDate->AppendSeparator();
-    menuDate->Append(Calendar_DatePicker_AskDate, _T("&Choose date...\tCtrl-D"), _T("Show dialog with wxDatePickerCtrl"));
+    menuDate->Append(Calendar_DatePicker_AskDate, wxT("&Choose date...\tCtrl-D"), wxT("Show dialog with wxDatePickerCtrl"));
 #endif // wxUSE_DATEPICKCTRL
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(menuCal, _T("&Calendar"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(menuCal, wxT("&Calendar"));
 #if wxUSE_DATEPICKCTRL
-    menuBar->Append(menuDate, _T("&Date picker"));
+    menuBar->Append(menuDate, wxT("&Date picker"));
 #endif // wxUSE_DATEPICKCTRL
 
     menuBar->Check(Calendar_Cal_Monday, true);
@@ -373,7 +373,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -385,8 +385,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("wxCalendarCtrl sample\n(c) 2000 Vadim Zeitlin"),
-                 _T("About Calendar"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(wxT("wxCalendarCtrl sample\n(c) 2000 Vadim Zeitlin"),
+                 wxT("About Calendar"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnCalMonday(wxCommandEvent& event)
@@ -505,16 +505,16 @@ void MyFrame::OnAskDate(wxCommandEvent& 
             if ( dt.GetDay() == today.GetDay() &&
                     dt.GetMonth() == today.GetMonth() )
             {
-                wxMessageBox(_T("Happy birthday!"), _T("Calendar Sample"));
+                wxMessageBox(wxT("Happy birthday!"), wxT("Calendar Sample"));
             }
 
             m_panel->GetCal()->SetDate(dt);
 
-            wxLogStatus(_T("Changed the date to your input"));
+            wxLogStatus(wxT("Changed the date to your input"));
         }
         else
         {
-            wxLogStatus(_T("No date entered"));
+            wxLogStatus(wxT("No date entered"));
         }
     }
 }
@@ -652,7 +652,7 @@ void MyPanel::Today()
 #if wxUSE_DATEPICKCTRL
 
 MyDialog::MyDialog(wxWindow *parent, const wxDateTime& dt, int dtpStyle)
-        : wxDialog(parent, wxID_ANY, wxString(_T("Calendar: Choose a date")))
+        : wxDialog(parent, wxID_ANY, wxString(wxT("Calendar: Choose a date")))
 {
     wxStdDialogButtonSizer *sizerBtns = new wxStdDialogButtonSizer;
     sizerBtns->AddButton(new wxButton(this, wxID_OK));
@@ -660,7 +660,7 @@ MyDialog::MyDialog(wxWindow *parent, con
     sizerBtns->Realize();
 
     wxSizer *sizerText = new wxBoxSizer(wxHORIZONTAL);
-    sizerText->Add(new wxStaticText(this, wxID_ANY, _T("Date in ISO format: ")),
+    sizerText->Add(new wxStaticText(this, wxID_ANY, wxT("Date in ISO format: ")),
                     wxSizerFlags().Border().Align(wxALIGN_CENTRE_VERTICAL));
     m_text = new wxTextCtrl(this, wxID_ANY);
     sizerText->Add(m_text, wxSizerFlags().
@@ -670,7 +670,7 @@ MyDialog::MyDialog(wxWindow *parent, con
     sizerTop->Add(new wxStaticText
                       (
                         this, wxID_ANY,
-                        _T("Enter your birthday date (not before 20th century):")
+                        wxT("Enter your birthday date (not before 20th century):")
                       ),
                     wxSizerFlags().Border());
 
--- samples/typetest/typetest.cpp-orig	2009-06-18 18:36:42.899156000 -0500
+++ samples/typetest/typetest.cpp	2009-06-18 18:36:51.768647000 -0500
@@ -67,13 +67,13 @@ BEGIN_EVENT_TABLE(MyApp, wxApp)
     EVT_MENU(TYPES_MIME, MyApp::DoMIMEDemo)
 END_EVENT_TABLE()
 
-wxString file_name = _T("test_wx.dat");
-wxString file_name2 = wxString(_T("test_wx2.dat"));
+wxString file_name = wxT("test_wx.dat");
+wxString file_name2 = wxString(wxT("test_wx2.dat"));
 
 bool MyApp::OnInit()
 {
     // Create the main frame window
-    MyFrame *frame = new MyFrame((wxFrame *) NULL, _T("wxWidgets Types Demo"),
+    MyFrame *frame = new MyFrame((wxFrame *) NULL, wxT("wxWidgets Types Demo"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // Give it an icon
@@ -82,29 +82,29 @@ bool MyApp::OnInit()
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(TYPES_ABOUT, _T("&About"));
+    file_menu->Append(TYPES_ABOUT, wxT("&About"));
     file_menu->AppendSeparator();
-    file_menu->Append(TYPES_QUIT, _T("E&xit\tAlt-X"));
+    file_menu->Append(TYPES_QUIT, wxT("E&xit\tAlt-X"));
 
     wxMenu *test_menu = new wxMenu;
-    test_menu->Append(TYPES_VARIANT, _T("&Variant test"));
-    test_menu->Append(TYPES_BYTEORDER, _T("&Byteorder test"));
+    test_menu->Append(TYPES_VARIANT, wxT("&Variant test"));
+    test_menu->Append(TYPES_BYTEORDER, wxT("&Byteorder test"));
 #if wxUSE_UNICODE
-    test_menu->Append(TYPES_UNICODE, _T("&Unicode test"));
+    test_menu->Append(TYPES_UNICODE, wxT("&Unicode test"));
 #endif // wxUSE_UNICODE
-    test_menu->Append(TYPES_STREAM, _T("&Stream test"));
-    test_menu->Append(TYPES_STREAM2, _T("&Stream seek test"));
-    test_menu->Append(TYPES_STREAM3, _T("&Stream error test"));
-    test_menu->Append(TYPES_STREAM4, _T("&Stream buffer test"));
-    test_menu->Append(TYPES_STREAM5, _T("&Stream peek test"));
-    test_menu->Append(TYPES_STREAM6, _T("&Stream ungetch test"));
-    test_menu->Append(TYPES_STREAM7, _T("&Stream ungetch test for a buffered stream"));
+    test_menu->Append(TYPES_STREAM, wxT("&Stream test"));
+    test_menu->Append(TYPES_STREAM2, wxT("&Stream seek test"));
+    test_menu->Append(TYPES_STREAM3, wxT("&Stream error test"));
+    test_menu->Append(TYPES_STREAM4, wxT("&Stream buffer test"));
+    test_menu->Append(TYPES_STREAM5, wxT("&Stream peek test"));
+    test_menu->Append(TYPES_STREAM6, wxT("&Stream ungetch test"));
+    test_menu->Append(TYPES_STREAM7, wxT("&Stream ungetch test for a buffered stream"));
     test_menu->AppendSeparator();
-    test_menu->Append(TYPES_MIME, _T("&MIME database test"));
+    test_menu->Append(TYPES_MIME, wxT("&MIME database test"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(file_menu, _T("&File"));
-    menu_bar->Append(test_menu, _T("&Tests"));
+    menu_bar->Append(file_menu, wxT("&File"));
+    menu_bar->Append(test_menu, wxT("&Tests"));
     frame->SetMenuBar(menu_bar);
 
     m_textCtrl = new wxTextCtrl(frame, wxID_ANY, wxEmptyString,
@@ -123,9 +123,9 @@ void MyApp::DoStreamDemo(wxCommandEvent&
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl << _T("\nTest fstream vs. wxFileStream:\n\n");
+    textCtrl << wxT("\nTest fstream vs. wxFileStream:\n\n");
 
-    textCtrl.WriteText( _T("Writing to ofstream and wxFileOutputStream:\n") );
+    textCtrl.WriteText( wxT("Writing to ofstream and wxFileOutputStream:\n") );
 
     wxSTD ofstream std_file_output( "test_std.dat" );
     wxFileOutputStream file_output( file_name );
@@ -134,62 +134,62 @@ void MyApp::DoStreamDemo(wxCommandEvent&
 
     wxString tmp;
     signed int si = 0xFFFFFFFF;
-    tmp.Printf( _T("Signed int: %d\n"), si );
+    tmp.Printf( wxT("Signed int: %d\n"), si );
     textCtrl.WriteText( tmp );
-    text_output << si << _T("\n");
+    text_output << si << wxT("\n");
     std_file_output << si << "\n";
 
     unsigned int ui = 0xFFFFFFFF;
-    tmp.Printf( _T("Unsigned int: %u\n"), ui );
+    tmp.Printf( wxT("Unsigned int: %u\n"), ui );
     textCtrl.WriteText( tmp );
-    text_output << ui << _T("\n");
+    text_output << ui << wxT("\n");
     std_file_output << ui << "\n";
 
     double d = 2.01234567890123456789;
-    tmp.Printf( _T("Double: %f\n"), d );
+    tmp.Printf( wxT("Double: %f\n"), d );
     textCtrl.WriteText( tmp );
-    text_output << d << _T("\n");
+    text_output << d << wxT("\n");
     std_file_output << d << "\n";
 
     float f = (float)0.00001;
-    tmp.Printf( _T("Float: %f\n"), f );
+    tmp.Printf( wxT("Float: %f\n"), f );
     textCtrl.WriteText( tmp );
-    text_output << f << _T("\n");
+    text_output << f << wxT("\n");
     std_file_output << f << "\n";
 
-    wxString str( _T("Hello!") );
-    tmp.Printf( _T("String: %s\n"), str.c_str() );
+    wxString str( wxT("Hello!") );
+    tmp.Printf( wxT("String: %s\n"), str.c_str() );
     textCtrl.WriteText( tmp );
-    text_output << str << _T("\n");
+    text_output << str << wxT("\n");
     std_file_output << str.ToAscii() << "\n";
 
-    textCtrl.WriteText( _T("\nReading from ifstream:\n") );
+    textCtrl.WriteText( wxT("\nReading from ifstream:\n") );
 
     wxSTD ifstream std_file_input( "test_std.dat" );
 
     std_file_input >> si;
-    tmp.Printf( _T("Signed int: %d\n"), si );
+    tmp.Printf( wxT("Signed int: %d\n"), si );
     textCtrl.WriteText( tmp );
 
     std_file_input >> ui;
-    tmp.Printf( _T("Unsigned int: %u\n"), ui );
+    tmp.Printf( wxT("Unsigned int: %u\n"), ui );
     textCtrl.WriteText( tmp );
 
     std_file_input >> d;
-    tmp.Printf( _T("Double: %f\n"), d );
+    tmp.Printf( wxT("Double: %f\n"), d );
     textCtrl.WriteText( tmp );
 
     std_file_input >> f;
-    tmp.Printf( _T("Float: %f\n"), f );
+    tmp.Printf( wxT("Float: %f\n"), f );
     textCtrl.WriteText( tmp );
 
     char std_buf[200];
     std_file_input >> std_buf;
     str = wxString::FromAscii(std_buf);
-    tmp.Printf( _T("String: %s\n"), str.c_str() );
+    tmp.Printf( wxT("String: %s\n"), str.c_str() );
     textCtrl.WriteText( tmp );
 
-    textCtrl.WriteText( _T("\nReading from wxFileInputStream:\n") );
+    textCtrl.WriteText( wxT("\nReading from wxFileInputStream:\n") );
 
     buf_output.Sync();
 
@@ -198,75 +198,75 @@ void MyApp::DoStreamDemo(wxCommandEvent&
     wxTextInputStream text_input( file_input );
 
     text_input >> si;
-    tmp.Printf( _T("Signed int: %d\n"), si );
+    tmp.Printf( wxT("Signed int: %d\n"), si );
     textCtrl.WriteText( tmp );
 
     text_input >> ui;
-    tmp.Printf( _T("Unsigned int: %u\n"), ui );
+    tmp.Printf( wxT("Unsigned int: %u\n"), ui );
     textCtrl.WriteText( tmp );
 
     text_input >> d;
-    tmp.Printf( _T("Double: %f\n"), d );
+    tmp.Printf( wxT("Double: %f\n"), d );
     textCtrl.WriteText( tmp );
 
     text_input >> f;
-    tmp.Printf( _T("Float: %f\n"), f );
+    tmp.Printf( wxT("Float: %f\n"), f );
     textCtrl.WriteText( tmp );
 
     text_input >> str;
-    tmp.Printf( _T("String: %s\n"), str.c_str() );
+    tmp.Printf( wxT("String: %s\n"), str.c_str() );
     textCtrl.WriteText( tmp );
 
 
 
-    textCtrl << _T("\nTest for wxDataStream:\n\n");
+    textCtrl << wxT("\nTest for wxDataStream:\n\n");
 
-    textCtrl.WriteText( _T("Writing to wxDataOutputStream:\n") );
+    textCtrl.WriteText( wxT("Writing to wxDataOutputStream:\n") );
 
     file_output.SeekO( 0 );
     wxDataOutputStream data_output( buf_output );
 
     wxInt16 i16 = (unsigned short)0xFFFF;
-    tmp.Printf( _T("Signed int16: %d\n"), (int)i16 );
+    tmp.Printf( wxT("Signed int16: %d\n"), (int)i16 );
     textCtrl.WriteText( tmp );
     data_output.Write16( i16 );
 
     wxUint16 ui16 = 0xFFFF;
-    tmp.Printf( _T("Unsigned int16: %u\n"), (unsigned int) ui16 );
+    tmp.Printf( wxT("Unsigned int16: %u\n"), (unsigned int) ui16 );
     textCtrl.WriteText( tmp );
     data_output.Write16( ui16 );
 
     d = 2.01234567890123456789;
-    tmp.Printf( _T("Double: %f\n"), d );
+    tmp.Printf( wxT("Double: %f\n"), d );
     textCtrl.WriteText( tmp );
     data_output.WriteDouble( d );
 
-    str = _T("Hello!");
-    tmp.Printf( _T("String: %s\n"), str.c_str() );
+    str = wxT("Hello!");
+    tmp.Printf( wxT("String: %s\n"), str.c_str() );
     textCtrl.WriteText( tmp );
     data_output.WriteString( str );
 
     buf_output.Sync();
 
-    textCtrl.WriteText( _T("\nReading from wxDataInputStream:\n") );
+    textCtrl.WriteText( wxT("\nReading from wxDataInputStream:\n") );
 
     file_input.SeekI( 0 );
     wxDataInputStream data_input( buf_input );
 
     i16 = data_input.Read16();
-    tmp.Printf( _T("Signed int16: %d\n"), (int)i16 );
+    tmp.Printf( wxT("Signed int16: %d\n"), (int)i16 );
     textCtrl.WriteText( tmp );
 
     ui16 = data_input.Read16();
-    tmp.Printf( _T("Unsigned int16: %u\n"), (unsigned int) ui16 );
+    tmp.Printf( wxT("Unsigned int16: %u\n"), (unsigned int) ui16 );
     textCtrl.WriteText( tmp );
 
     d = data_input.ReadDouble();
-    tmp.Printf( _T("Double: %f\n"), d );
+    tmp.Printf( wxT("Double: %f\n"), d );
     textCtrl.WriteText( tmp );
 
     str = data_input.ReadString();
-    tmp.Printf( _T("String: %s\n"), str.c_str() );
+    tmp.Printf( wxT("String: %s\n"), str.c_str() );
     textCtrl.WriteText( tmp );
 }
 
@@ -275,11 +275,11 @@ void MyApp::DoStreamDemo2(wxCommandEvent
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl << _T("\nTesting wxBufferedStream:\n\n");
+    textCtrl << wxT("\nTesting wxBufferedStream:\n\n");
 
     char ch,ch2;
 
-    textCtrl.WriteText( _T("Writing number 0 to 9 to buffered wxFileOutputStream:\n\n") );
+    textCtrl.WriteText( wxT("Writing number 0 to 9 to buffered wxFileOutputStream:\n\n") );
 
     wxFileOutputStream file_output( file_name );
     wxBufferedOutputStream buf_output( file_output );
@@ -291,12 +291,12 @@ void MyApp::DoStreamDemo2(wxCommandEvent
     for (ch2 = 0; ch2 < 10; ch2++)
     {
         file_input.Read( &ch, 1 );
-        textCtrl.WriteText( (wxChar)(ch + _T('0')) );
+        textCtrl.WriteText( (wxChar)(ch + wxT('0')) );
     }
-    textCtrl.WriteText( _T("\n\n\n") );
+    textCtrl.WriteText( wxT("\n\n\n") );
 
-    textCtrl.WriteText( _T("Writing number 0 to 9 to buffered wxFileOutputStream, then\n") );
-    textCtrl.WriteText( _T("seeking back to #3 and writing 0:\n\n") );
+    textCtrl.WriteText( wxT("Writing number 0 to 9 to buffered wxFileOutputStream, then\n") );
+    textCtrl.WriteText( wxT("seeking back to #3 and writing 0:\n\n") );
 
     wxFileOutputStream file_output2( file_name2 );
     wxBufferedOutputStream buf_output2( file_output2 );
@@ -311,9 +311,9 @@ void MyApp::DoStreamDemo2(wxCommandEvent
     for (ch2 = 0; ch2 < 10; ch2++)
     {
         file_input2.Read( &ch, 1 );
-        textCtrl.WriteText( (wxChar)(ch + _T('0')) );
+        textCtrl.WriteText( (wxChar)(ch + wxT('0')) );
     }
-    textCtrl.WriteText( _T("\n\n\n") );
+    textCtrl.WriteText( wxT("\n\n\n") );
 
     // now append 2000 bytes to file (bigger than buffer)
     buf_output2.SeekO( 0, wxFromEnd );
@@ -322,23 +322,23 @@ void MyApp::DoStreamDemo2(wxCommandEvent
        buf_output2.Write( &ch, 1 );
     buf_output2.Sync();
 
-    textCtrl.WriteText( _T("Reading number 0 to 9 from buffered wxFileInputStream, then\n") );
-    textCtrl.WriteText( _T("seeking back to #3 and reading the 0:\n\n") );
+    textCtrl.WriteText( wxT("Reading number 0 to 9 from buffered wxFileInputStream, then\n") );
+    textCtrl.WriteText( wxT("seeking back to #3 and reading the 0:\n\n") );
 
     wxFileInputStream file_input3( file_name2 );
     wxBufferedInputStream buf_input3( file_input3 );
     for (ch2 = 0; ch2 < 10; ch2++)
     {
         buf_input3.Read( &ch, 1 );
-        textCtrl.WriteText( (wxChar)(ch + _T('0')) );
+        textCtrl.WriteText( (wxChar)(ch + wxT('0')) );
     }
     for (int j = 0; j < 2000; j++)
        buf_input3.Read( &ch, 1 );
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
     buf_input3.SeekI( 3 );
     buf_input3.Read( &ch, 1 );
-    textCtrl.WriteText( (wxChar)(ch + _T('0')) );
-    textCtrl.WriteText( _T("\n\n\n") );
+    textCtrl.WriteText( (wxChar)(ch + wxT('0')) );
+    textCtrl.WriteText( wxT("\n\n\n") );
 
 }
 
@@ -347,11 +347,11 @@ void MyApp::DoStreamDemo3(wxCommandEvent
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl << _T("\nTesting wxFileInputStream's and wxFFileInputStream's error handling:\n\n");
+    textCtrl << wxT("\nTesting wxFileInputStream's and wxFFileInputStream's error handling:\n\n");
 
     char ch,ch2;
 
-    textCtrl.WriteText( _T("Writing number 0 to 9 to wxFileOutputStream:\n\n") );
+    textCtrl.WriteText( wxT("Writing number 0 to 9 to wxFileOutputStream:\n\n") );
 
     wxFileOutputStream file_output( file_name );
     for (ch = 0; ch < 10; ch++)
@@ -359,147 +359,147 @@ void MyApp::DoStreamDemo3(wxCommandEvent
 
     // Testing wxFileInputStream
 
-    textCtrl.WriteText( _T("Reading 0 to 10 to wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading 0 to 10 to wxFileInputStream:\n\n") );
 
     wxFileInputStream file_input( file_name );
     for (ch2 = 0; ch2 < 11; ch2++)
     {
         file_input.Read( &ch, 1 );
-        textCtrl.WriteText( _T("Value read: ") );
+        textCtrl.WriteText( wxT("Value read: ") );
         textCtrl.WriteText( (wxChar)(ch + '0') );
-        textCtrl.WriteText( _T(";  stream.GetLastError() returns: ") );
+        textCtrl.WriteText( wxT(";  stream.GetLastError() returns: ") );
         switch (file_input.GetLastError())
         {
-            case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-            case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-            case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-            case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-            default: textCtrl.WriteText( _T("Huh?\n") ); break;
+            case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+            case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+            case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+            case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+            default: textCtrl.WriteText( wxT("Huh?\n") ); break;
         }
     }
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
 
-    textCtrl.WriteText( _T("Seeking to 0;  stream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("Seeking to 0;  stream.GetLastError() returns: ") );
     file_input.SeekI( 0 );
     switch (file_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
 
     file_input.Read( &ch, 1 );
-    textCtrl.WriteText( _T("Value read: ") );
-    textCtrl.WriteText( (wxChar)(ch + _T('0')) );
-    textCtrl.WriteText( _T(";  stream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("Value read: ") );
+    textCtrl.WriteText( (wxChar)(ch + wxT('0')) );
+    textCtrl.WriteText( wxT(";  stream.GetLastError() returns: ") );
     switch (file_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
 
     // Testing wxFFileInputStream
 
-    textCtrl.WriteText( _T("Reading 0 to 10 to wxFFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading 0 to 10 to wxFFileInputStream:\n\n") );
 
     wxFFileInputStream ffile_input( file_name );
     for (ch2 = 0; ch2 < 11; ch2++)
     {
         ffile_input.Read( &ch, 1 );
-        textCtrl.WriteText( _T("Value read: ") );
+        textCtrl.WriteText( wxT("Value read: ") );
         textCtrl.WriteText( (wxChar)(ch + '0') );
-        textCtrl.WriteText( _T(";  stream.GetLastError() returns: ") );
+        textCtrl.WriteText( wxT(";  stream.GetLastError() returns: ") );
         switch (ffile_input.GetLastError())
         {
-            case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-            case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-            case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-            case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-            default: textCtrl.WriteText( _T("Huh?\n") ); break;
+            case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+            case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+            case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+            case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+            default: textCtrl.WriteText( wxT("Huh?\n") ); break;
         }
     }
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
 
-    textCtrl.WriteText( _T("Seeking to 0;  stream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("Seeking to 0;  stream.GetLastError() returns: ") );
     ffile_input.SeekI( 0 );
     switch (ffile_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
 
     ffile_input.Read( &ch, 1 );
-    textCtrl.WriteText( _T("Value read: ") );
+    textCtrl.WriteText( wxT("Value read: ") );
     textCtrl.WriteText( (wxChar)(ch + '0') );
-    textCtrl.WriteText( _T(";  stream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT(";  stream.GetLastError() returns: ") );
     switch (ffile_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
     // Testing wxFFileInputStream
 
-    textCtrl.WriteText( _T("Reading 0 to 10 to buffered wxFFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading 0 to 10 to buffered wxFFileInputStream:\n\n") );
 
     wxFFileInputStream ffile_input2( file_name );
     wxBufferedInputStream buf_input( ffile_input2 );
     for (ch2 = 0; ch2 < 11; ch2++)
     {
         buf_input.Read( &ch, 1 );
-        textCtrl.WriteText( _T("Value read: ") );
+        textCtrl.WriteText( wxT("Value read: ") );
         textCtrl.WriteText( (wxChar)(ch + '0') );
-        textCtrl.WriteText( _T(";  stream.GetLastError() returns: ") );
+        textCtrl.WriteText( wxT(";  stream.GetLastError() returns: ") );
         switch (buf_input.GetLastError())
         {
-            case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-            case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-            case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-            case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-            default: textCtrl.WriteText( _T("Huh?\n") ); break;
+            case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+            case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+            case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+            case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+            default: textCtrl.WriteText( wxT("Huh?\n") ); break;
         }
     }
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
 
-    textCtrl.WriteText( _T("Seeking to 0;  stream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("Seeking to 0;  stream.GetLastError() returns: ") );
     buf_input.SeekI( 0 );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
-    textCtrl.WriteText( _T("\n") );
+    textCtrl.WriteText( wxT("\n") );
 
     buf_input.Read( &ch, 1 );
-    textCtrl.WriteText( _T("Value read: ") );
+    textCtrl.WriteText( wxT("Value read: ") );
     textCtrl.WriteText( (wxChar)(ch + '0') );
-    textCtrl.WriteText( _T(";  stream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT(";  stream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
 }
 
@@ -510,10 +510,10 @@ void MyApp::DoStreamDemo4(wxCommandEvent
     wxString msg;
 
     textCtrl.Clear();
-    textCtrl << _T("\nTesting wxStreamBuffer:\n\n");
+    textCtrl << wxT("\nTesting wxStreamBuffer:\n\n");
 
     // bigger than buffer
-    textCtrl.WriteText( _T("Writing 2000x 1 to wxFileOutputStream.\n\n") );
+    textCtrl.WriteText( wxT("Writing 2000x 1 to wxFileOutputStream.\n\n") );
 
     wxFileOutputStream file_output( file_name );
     for (int i = 0; i < 2000; i++)
@@ -522,124 +522,124 @@ void MyApp::DoStreamDemo4(wxCommandEvent
         file_output.Write( &ch, 1 );
     }
 
-    textCtrl.WriteText( _T("Opening with a buffered wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Opening with a buffered wxFileInputStream:\n\n") );
 
     wxFileInputStream file_input( file_name );
     wxBufferedInputStream buf_input( file_input );
 
-    textCtrl.WriteText( _T("wxBufferedInputStream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("wxBufferedInputStream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
     msg.Printf( wxT("wxBufferedInputStream.LastRead() returns: %d\n"), (int)buf_input.LastRead() );
     textCtrl.WriteText( msg );
     msg.Printf( wxT("wxBufferedInputStream.TellI() returns: %d\n"), (int)buf_input.TellI() );
     textCtrl.WriteText( msg );
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
 
-    textCtrl.WriteText( _T("Seeking to position 300:\n\n") );
+    textCtrl.WriteText( wxT("Seeking to position 300:\n\n") );
 
     buf_input.SeekI( 300 );
 
-    textCtrl.WriteText( _T("wxBufferedInputStream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("wxBufferedInputStream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
     msg.Printf( wxT("wxBufferedInputStream.LastRead() returns: %d\n"), (int)buf_input.LastRead() );
     textCtrl.WriteText( msg );
     msg.Printf( wxT("wxBufferedInputStream.TellI() returns: %d\n"), (int)buf_input.TellI() );
     textCtrl.WriteText( msg );
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
 
     char buf[2000];
 
-    textCtrl.WriteText( _T("Reading 500 bytes:\n\n") );
+    textCtrl.WriteText( wxT("Reading 500 bytes:\n\n") );
 
     buf_input.Read( buf, 500 );
 
-    textCtrl.WriteText( _T("wxBufferedInputStream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("wxBufferedInputStream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
     msg.Printf( wxT("wxBufferedInputStream.LastRead() returns: %d\n"), (int)buf_input.LastRead() );
     textCtrl.WriteText( msg );
     msg.Printf( wxT("wxBufferedInputStream.TellI() returns: %d\n"), (int)buf_input.TellI() );
     textCtrl.WriteText( msg );
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
-    textCtrl.WriteText( _T("Reading another 500 bytes:\n\n") );
+    textCtrl.WriteText( wxT("Reading another 500 bytes:\n\n") );
 
     buf_input.Read( buf, 500 );
 
-    textCtrl.WriteText( _T("wxBufferedInputStream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("wxBufferedInputStream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
     msg.Printf( wxT("wxBufferedInputStream.LastRead() returns: %d\n"), (int)buf_input.LastRead() );
     textCtrl.WriteText( msg );
     msg.Printf( wxT("wxBufferedInputStream.TellI() returns: %d\n"), (int)buf_input.TellI() );
     textCtrl.WriteText( msg );
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
-    textCtrl.WriteText( _T("Reading another 500 bytes:\n\n") );
+    textCtrl.WriteText( wxT("Reading another 500 bytes:\n\n") );
 
     buf_input.Read( buf, 500 );
 
-    textCtrl.WriteText( _T("wxBufferedInputStream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("wxBufferedInputStream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
     msg.Printf( wxT("wxBufferedInputStream.LastRead() returns: %d\n"), (int)buf_input.LastRead() );
     textCtrl.WriteText( msg );
     msg.Printf( wxT("wxBufferedInputStream.TellI() returns: %d\n"), (int)buf_input.TellI() );
     textCtrl.WriteText( msg );
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 
-    textCtrl.WriteText( _T("Reading another 500 bytes:\n\n") );
+    textCtrl.WriteText( wxT("Reading another 500 bytes:\n\n") );
 
     buf_input.Read( buf, 500 );
 
-    textCtrl.WriteText( _T("wxBufferedInputStream.GetLastError() returns: ") );
+    textCtrl.WriteText( wxT("wxBufferedInputStream.GetLastError() returns: ") );
     switch (buf_input.GetLastError())
     {
-        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( _T("wxSTREAM_NO_ERROR\n") ); break;
-        case wxSTREAM_EOF:          textCtrl.WriteText( _T("wxSTREAM_EOF\n") ); break;
-        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( _T("wxSTREAM_READ_ERROR\n") ); break;
-        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( _T("wxSTREAM_WRITE_ERROR\n") ); break;
-        default: textCtrl.WriteText( _T("Huh?\n") ); break;
+        case wxSTREAM_NO_ERROR:      textCtrl.WriteText( wxT("wxSTREAM_NO_ERROR\n") ); break;
+        case wxSTREAM_EOF:          textCtrl.WriteText( wxT("wxSTREAM_EOF\n") ); break;
+        case wxSTREAM_READ_ERROR:   textCtrl.WriteText( wxT("wxSTREAM_READ_ERROR\n") ); break;
+        case wxSTREAM_WRITE_ERROR:  textCtrl.WriteText( wxT("wxSTREAM_WRITE_ERROR\n") ); break;
+        default: textCtrl.WriteText( wxT("Huh?\n") ); break;
     }
     msg.Printf( wxT("wxBufferedInputStream.LastRead() returns: %d\n"), (int)buf_input.LastRead() );
     textCtrl.WriteText( msg );
     msg.Printf( wxT("wxBufferedInputStream.TellI() returns: %d\n"), (int)buf_input.TellI() );
     textCtrl.WriteText( msg );
-    textCtrl.WriteText( _T("\n\n") );
+    textCtrl.WriteText( wxT("\n\n") );
 }
 
 void MyApp::DoStreamDemo5(wxCommandEvent& WXUNUSED(event))
@@ -647,12 +647,12 @@ void MyApp::DoStreamDemo5(wxCommandEvent
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl << _T("\nTesting wxFileInputStream's Peek():\n\n");
+    textCtrl << wxT("\nTesting wxFileInputStream's Peek():\n\n");
 
     char ch;
     wxString str;
 
-    textCtrl.WriteText( _T("Writing number 0 to 9 to wxFileOutputStream:\n\n") );
+    textCtrl.WriteText( wxT("Writing number 0 to 9 to wxFileOutputStream:\n\n") );
 
     wxFileOutputStream file_output( file_name );
     for (ch = 0; ch < 10; ch++)
@@ -687,7 +687,7 @@ void MyApp::DoStreamDemo5(wxCommandEvent
     textCtrl.WriteText( str );
 
 
-    textCtrl << _T("\n\n\nTesting wxMemoryInputStream's Peek():\n\n");
+    textCtrl << wxT("\n\n\nTesting wxMemoryInputStream's Peek():\n\n");
 
     char buf[] = { 0,1,2,3,4,5,6,7,8,9,10 };
     wxMemoryInputStream input( buf, 10 );
@@ -722,12 +722,12 @@ void MyApp::DoStreamDemo6(wxCommandEvent
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl.WriteText( _T("\nTesting Ungetch():\n\n") );
+    textCtrl.WriteText( wxT("\nTesting Ungetch():\n\n") );
 
     char ch = 0;
     wxString str;
 
-    textCtrl.WriteText( _T("Writing number 0 to 9 to wxFileOutputStream...\n\n") );
+    textCtrl.WriteText( wxT("Writing number 0 to 9 to wxFileOutputStream...\n\n") );
 
     wxFileOutputStream file_output( file_name );
     for (ch = 0; ch < 10; ch++)
@@ -735,7 +735,7 @@ void MyApp::DoStreamDemo6(wxCommandEvent
 
     file_output.Sync();
 
-    textCtrl.WriteText( _T("Reading char from wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading char from wxFileInputStream:\n\n") );
 
     wxFileInputStream file_input( file_name );
 
@@ -744,49 +744,49 @@ void MyApp::DoStreamDemo6(wxCommandEvent
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading another char from wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading another char from wxFileInputStream:\n\n") );
 
     ch = file_input.GetC();
     pos = (size_t)file_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading yet another char from wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading yet another char from wxFileInputStream:\n\n") );
 
     ch = file_input.GetC();
     pos = (size_t)file_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Now calling Ungetch( 5 ) from wxFileInputStream...\n\n") );
+    textCtrl.WriteText( wxT("Now calling Ungetch( 5 ) from wxFileInputStream...\n\n") );
 
     file_input.Ungetch( 5 );
     pos = (size_t)file_input.TellI();
     str.Printf( wxT("Now at position %d\n\n"), (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading char from wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading char from wxFileInputStream:\n\n") );
 
     ch = file_input.GetC();
     pos = (size_t)file_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading another char from wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading another char from wxFileInputStream:\n\n") );
 
     ch = file_input.GetC();
     pos = (size_t)file_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Now calling Ungetch( 5 ) from wxFileInputStream again...\n\n") );
+    textCtrl.WriteText( wxT("Now calling Ungetch( 5 ) from wxFileInputStream again...\n\n") );
 
     file_input.Ungetch( 5 );
     pos = (size_t)file_input.TellI();
     str.Printf( wxT("Now at position %d\n\n"), (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Seeking to pos 3 in wxFileInputStream. This invalidates the writeback buffer.\n\n") );
+    textCtrl.WriteText( wxT("Seeking to pos 3 in wxFileInputStream. This invalidates the writeback buffer.\n\n") );
 
     file_input.SeekI( 3 );
 
@@ -801,12 +801,12 @@ void MyApp::DoStreamDemo7(wxCommandEvent
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl.WriteText( _T("\nTesting Ungetch() in buffered input stream:\n\n") );
+    textCtrl.WriteText( wxT("\nTesting Ungetch() in buffered input stream:\n\n") );
 
     char ch = 0;
     wxString str;
 
-    textCtrl.WriteText( _T("Writing number 0 to 9 to wxFileOutputStream...\n\n") );
+    textCtrl.WriteText( wxT("Writing number 0 to 9 to wxFileOutputStream...\n\n") );
 
     wxFileOutputStream file_output( file_name );
     for (ch = 0; ch < 10; ch++)
@@ -814,7 +814,7 @@ void MyApp::DoStreamDemo7(wxCommandEvent
 
     file_output.Sync();
 
-    textCtrl.WriteText( _T("Reading char from wxBufferedInputStream via wxFileInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading char from wxBufferedInputStream via wxFileInputStream:\n\n") );
 
     wxFileInputStream file_input( file_name );
     wxBufferedInputStream buf_input( file_input );
@@ -824,49 +824,49 @@ void MyApp::DoStreamDemo7(wxCommandEvent
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading another char from wxBufferedInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading another char from wxBufferedInputStream:\n\n") );
 
     ch = buf_input.GetC();
     pos = (size_t)buf_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading yet another char from wxBufferedInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading yet another char from wxBufferedInputStream:\n\n") );
 
     ch = buf_input.GetC();
     pos = (size_t)buf_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Now calling Ungetch( 5 ) from wxBufferedInputStream...\n\n") );
+    textCtrl.WriteText( wxT("Now calling Ungetch( 5 ) from wxBufferedInputStream...\n\n") );
 
     buf_input.Ungetch( 5 );
     pos = (size_t)buf_input.TellI();
     str.Printf( wxT("Now at position %d\n\n"), (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading char from wxBufferedInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading char from wxBufferedInputStream:\n\n") );
 
     ch = buf_input.GetC();
     pos = (size_t)buf_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Reading another char from wxBufferedInputStream:\n\n") );
+    textCtrl.WriteText( wxT("Reading another char from wxBufferedInputStream:\n\n") );
 
     ch = buf_input.GetC();
     pos = (size_t)buf_input.TellI();
     str.Printf( wxT("Read char: %d. Now at position %d\n\n"), (int) ch, (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Now calling Ungetch( 5 ) from wxBufferedInputStream again...\n\n") );
+    textCtrl.WriteText( wxT("Now calling Ungetch( 5 ) from wxBufferedInputStream again...\n\n") );
 
     buf_input.Ungetch( 5 );
     pos = (size_t)buf_input.TellI();
     str.Printf( wxT("Now at position %d\n\n"), (int) pos );
     textCtrl.WriteText( str );
 
-    textCtrl.WriteText( _T("Seeking to pos 3 in wxBufferedInputStream. This invalidates the writeback buffer.\n\n") );
+    textCtrl.WriteText( wxT("Seeking to pos 3 in wxBufferedInputStream. This invalidates the writeback buffer.\n\n") );
 
     buf_input.SeekI( 3 );
 
@@ -882,10 +882,10 @@ void MyApp::DoUnicodeDemo(wxCommandEvent
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl << _T("\nTest wchar_t to char (Unicode to ANSI/Multibyte) converions:");
+    textCtrl << wxT("\nTest wchar_t to char (Unicode to ANSI/Multibyte) converions:");
 
     wxString str;
-    str = _T("Robert R\366bling\n");
+    str = wxT("Robert R\366bling\n");
 
     printf( "\n\nConversion with wxConvLocal:\n" );
     wxConvCurrent = &wxConvLocal;
@@ -899,10 +899,10 @@ void MyApp::DoUnicodeDemo(wxCommandEvent
 
 void MyApp::DoMIMEDemo(wxCommandEvent& WXUNUSED(event))
 {
-    static wxString s_defaultExt = _T("xyz");
+    static wxString s_defaultExt = wxT("xyz");
 
-    wxString ext = wxGetTextFromUser(_T("Enter a file extension: "),
-                                     _T("MIME database test"),
+    wxString ext = wxGetTextFromUser(wxT("Enter a file extension: "),
+                                     wxT("MIME database test"),
                                      s_defaultExt);
     if ( !!ext )
     {
@@ -915,16 +915,16 @@ void MyApp::DoMIMEDemo(wxCommandEvent& W
 
             static const wxFileTypeInfo fallbacks[] =
             {
-                wxFileTypeInfo(_T("application/xyz"),
-                               _T("XyZ %s"),
-                               _T("XyZ -p %s"),
-                               _T("The one and only XYZ format file"),
-                               _T("xyz"), _T("123"), NULL),
-                wxFileTypeInfo(_T("text/html"),
-                               _T("lynx %s"),
-                               _T("lynx -dump %s | lpr"),
-                               _T("HTML document (from fallback)"),
-                               _T("htm"), _T("html"), NULL),
+                wxFileTypeInfo(wxT("application/xyz"),
+                               wxT("XyZ %s"),
+                               wxT("XyZ -p %s"),
+                               wxT("The one and only XYZ format file"),
+                               wxT("xyz"), wxT("123"), NULL),
+                wxFileTypeInfo(wxT("text/html"),
+                               wxT("lynx %s"),
+                               wxT("lynx -dump %s | lpr"),
+                               wxT("HTML document (from fallback)"),
+                               wxT("htm"), wxT("html"), NULL),
 
                 // must terminate the table with this!
                 wxFileTypeInfo()
@@ -938,7 +938,7 @@ void MyApp::DoMIMEDemo(wxCommandEvent& W
         wxFileType *filetype = m_mimeDatabase->GetFileTypeFromExtension(ext);
         if ( !filetype )
         {
-            textCtrl << _T("Unknown extension '") << ext << _T("'\n");
+            textCtrl << wxT("Unknown extension '") << ext << wxT("'\n");
         }
         else
         {
@@ -946,18 +946,18 @@ void MyApp::DoMIMEDemo(wxCommandEvent& W
             filetype->GetMimeType(&type);
             filetype->GetDescription(&desc);
 
-            wxString filename = _T("filename");
-            filename << _T(".") << ext;
+            wxString filename = wxT("filename");
+            filename << wxT(".") << ext;
             wxFileType::MessageParameters params(filename, type);
             filetype->GetOpenCommand(&open, params);
 
-            textCtrl << _T("MIME information about extension '") << ext << _T('\n')
-                     << _T("\tMIME type: ") << ( !type ? wxT("unknown")
-                                                   : type.c_str() ) << _T('\n')
-                     << _T("\tDescription: ") << ( !desc ? wxEmptyString : desc.c_str() )
-                        << _T('\n')
-                     << _T("\tCommand to open: ") << ( !open ? wxT("no") : open.c_str() )
-                        << _T('\n');
+            textCtrl << wxT("MIME information about extension '") << ext << wxT('\n')
+                     << wxT("\tMIME type: ") << ( !type ? wxT("unknown")
+                                                   : type.c_str() ) << wxT('\n')
+                     << wxT("\tDescription: ") << ( !desc ? wxEmptyString : desc.c_str() )
+                        << wxT('\n')
+                     << wxT("\tCommand to open: ") << ( !open ? wxT("no") : open.c_str() )
+                        << wxT('\n');
 
             delete filetype;
         }
@@ -970,31 +970,31 @@ void MyApp::DoByteOrderDemo(wxCommandEve
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
     textCtrl.Clear();
-    textCtrl << _T("\nTest byte order macros:\n\n");
+    textCtrl << wxT("\nTest byte order macros:\n\n");
 
     #if wxBYTE_ORDER == wxLITTLE_ENDIAN
-        textCtrl << _T("This is a little endian system.\n\n");
+        textCtrl << wxT("This is a little endian system.\n\n");
     #else
-        textCtrl << _T("This is a big endian system.\n\n");
+        textCtrl << wxT("This is a big endian system.\n\n");
     #endif
 
     wxString text;
 
     wxInt32 var = 0xF1F2F3F4;
     text = wxEmptyString;
-    text.Printf( _T("Value of wxInt32 is now: %#x.\n\n"), var );
+    text.Printf( wxT("Value of wxInt32 is now: %#x.\n\n"), var );
     textCtrl.WriteText( text );
 
     text = wxEmptyString;
-    text.Printf( _T("Value of swapped wxInt32 is: %#x.\n\n"), wxINT32_SWAP_ALWAYS( var ) );
+    text.Printf( wxT("Value of swapped wxInt32 is: %#x.\n\n"), wxINT32_SWAP_ALWAYS( var ) );
     textCtrl.WriteText( text );
 
     text = wxEmptyString;
-    text.Printf( _T("Value of wxInt32 swapped on little endian is: %#x.\n\n"), wxINT32_SWAP_ON_LE( var ) );
+    text.Printf( wxT("Value of wxInt32 swapped on little endian is: %#x.\n\n"), wxINT32_SWAP_ON_LE( var ) );
     textCtrl.WriteText( text );
 
     text = wxEmptyString;
-    text.Printf( _T("Value of wxInt32 swapped on big endian is: %#x.\n\n"), wxINT32_SWAP_ON_BE( var ) );
+    text.Printf( wxT("Value of wxInt32 swapped on big endian is: %#x.\n\n"), wxINT32_SWAP_ON_BE( var ) );
     textCtrl.WriteText( text );
 }
 
@@ -1002,20 +1002,20 @@ void MyApp::DoVariantDemo(wxCommandEvent
 {
     wxTextCtrl& textCtrl = * GetTextCtrl();
 
-    wxVariant var1 = _T("String value");
-    textCtrl << _T("var1 = ") << var1.MakeString() << _T("\n");
+    wxVariant var1 = wxT("String value");
+    textCtrl << wxT("var1 = ") << var1.MakeString() << wxT("\n");
 
     // Conversion
     wxString str = var1.MakeString();
 
     var1 = 123.456;
-    textCtrl << _T("var1 = ") << var1.GetReal() << _T("\n");
+    textCtrl << wxT("var1 = ") << var1.GetReal() << wxT("\n");
 
     // Implicit conversion
     double v = var1;
 
     var1 = 9876L;
-    textCtrl << _T("var1 = ") << var1.GetLong() << _T("\n");
+    textCtrl << wxT("var1 = ") << var1.GetLong() << wxT("\n");
 
     // Implicit conversion
     long l = var1;
@@ -1025,34 +1025,34 @@ void MyApp::DoVariantDemo(wxCommandEvent
     wxUnusedVar(v);
 
     wxArrayString stringArray;
-    stringArray.Add(_T("one")); stringArray.Add(_T("two")); stringArray.Add(_T("three"));
+    stringArray.Add(wxT("one")); stringArray.Add(wxT("two")); stringArray.Add(wxT("three"));
     var1 = stringArray;
-    textCtrl << _T("var1 = ") << var1.MakeString() << _T("\n");
+    textCtrl << wxT("var1 = ") << var1.MakeString() << wxT("\n");
 
     var1.ClearList();
     var1.Append(wxVariant(1.2345));
-    var1.Append(wxVariant(_T("hello")));
+    var1.Append(wxVariant(wxT("hello")));
     var1.Append(wxVariant(54321L));
 
-    textCtrl << _T("var1 = ") << var1.MakeString() << _T("\n");
+    textCtrl << wxT("var1 = ") << var1.MakeString() << wxT("\n");
 
     size_t n = var1.GetCount();
     size_t i;
     for (i = (size_t) 0; i < n; i++)
     {
-        textCtrl << _T("var1[") << (int) i << _T("] (type ") << var1[i].GetType() << _T(") = ") << var1[i].MakeString() << _T("\n");
+        textCtrl << wxT("var1[") << (int) i << wxT("] (type ") << var1[i].GetType() << wxT(") = ") << var1[i].MakeString() << wxT("\n");
     }
 
     var1 = wxVariant(new wxFont(wxSystemSettings::GetFont(wxSYS_OEM_FIXED_FONT)));
-    textCtrl << _T("var1 = (wxfont)\"");
+    textCtrl << wxT("var1 = (wxfont)\"");
     wxFont* font = wxGetVariantCast(var1,wxFont);
     if (font)
     {
-        textCtrl << font->GetNativeFontInfoDesc() << _T("\"\n");
+        textCtrl << font->GetNativeFontInfoDesc() << wxT("\"\n");
     }
     else
     {
-        textCtrl << _T("(null)\"\n");
+        textCtrl << wxT("(null)\"\n");
     }
 }
 
@@ -1074,8 +1074,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageDialog dialog(this, _T("Tests various wxWidgets types"),
-        _T("About Types"), wxYES_NO|wxCANCEL);
+    wxMessageDialog dialog(this, wxT("Tests various wxWidgets types"),
+        wxT("About Types"), wxYES_NO|wxCANCEL);
 
     dialog.ShowModal();
 }
--- samples/access/accesstest.cpp-orig	2009-06-18 18:36:23.834481000 -0500
+++ samples/access/accesstest.cpp	2009-06-18 18:36:30.445048000 -0500
@@ -172,7 +172,7 @@ bool MyApp::OnInit()
     wxHelpProvider::Set(new wxSimpleHelpProvider());
 
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("AccessTest wxWidgets App"),
+    MyFrame *frame = new MyFrame(wxT("AccessTest wxWidgets App"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // and show it (the frames, unlike simple controls, are not shown when
@@ -184,7 +184,7 @@ bool MyApp::OnInit()
     // application would exit immediately.
     return true;
 #else
-    wxMessageBox( _T("This sample has to be compiled with wxUSE_ACCESSIBILITY"), _T("Building error"), wxOK);
+    wxMessageBox( wxT("This sample has to be compiled with wxUSE_ACCESSIBILITY"), wxT("Building error"), wxOK);
     return false;
 #endif // wxUSE_ACCESSIBILITY
 }
@@ -334,16 +334,16 @@ MyFrame::MyFrame(const wxString& title, 
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(AccessTest_About, _T("&About..."), _T("Show about dialog"));
+    helpMenu->Append(AccessTest_About, wxT("&About..."), wxT("Show about dialog"));
 
-    menuFile->Append(AccessTest_Query, _T("Query"), _T("Query the window hierarchy"));
+    menuFile->Append(AccessTest_Query, wxT("Query"), wxT("Query the window hierarchy"));
     menuFile->AppendSeparator();
-    menuFile->Append(AccessTest_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(AccessTest_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -352,7 +352,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if 0 // wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 
 
@@ -392,10 +392,10 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the About dialog of the AccessTest sample.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the About dialog of the AccessTest sample.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
-    wxMessageBox(msg, _T("About AccessTest"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About AccessTest"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnQuery(wxCommandEvent& WXUNUSED(event))
--- samples/render/render.cpp-orig	2009-06-18 18:35:58.943237000 -0500
+++ samples/render/render.cpp	2009-06-18 18:36:08.870248000 -0500
@@ -69,7 +69,7 @@ public:
         dc.SetBrush(*wxBLUE_BRUSH);
         dc.SetTextForeground(*wxWHITE);
         dc.DrawRoundedRectangle(rect, 5);
-        dc.DrawLabel(_T("MyRenderer"), wxNullBitmap, rect, wxALIGN_CENTER);
+        dc.DrawLabel(wxT("MyRenderer"), wxNullBitmap, rect, wxALIGN_CENTER);
         return rect.width;
     }
 };
@@ -130,8 +130,8 @@ public:
     {
         wxPaintDC dc(this);
 
-        dc.DrawText(_T("Below is the standard header button drawn"), 10, 10);
-        dc.DrawText(_T("using the current renderer:"), 10, 40);
+        dc.DrawText(wxT("Below is the standard header button drawn"), 10, 10);
+        dc.DrawText(wxT("using the current renderer:"), 10, 40);
 
         wxRendererNative::Get().DrawHeaderButton(this, dc,
                                                  wxRect(20, 70, 100, 25));
@@ -139,7 +139,7 @@ public:
         // Draw some check boxes in various states
         dc.SetBrush(*wxBLACK_BRUSH);
         dc.SetTextForeground(*wxBLACK);
-        dc.DrawText(_T("Checkbox Drawn with native renderer"), 10, 150);
+        dc.DrawText(wxT("Checkbox Drawn with native renderer"), 10, 150);
         // Checked
         wxRendererNative::Get().DrawCheckBox(this, dc, wxRect(20, 170, 16, 16), wxCONTROL_CHECKED);
         // Undetermined
@@ -151,17 +151,17 @@ public:
         
         
 #if defined(__WXGTK20__) || defined(__WXMSW__) || defined(__WXMAC__)
-        dc.DrawText(_T("Draw wxTextCtrl (without text)"), 10, 200);
+        dc.DrawText(wxT("Draw wxTextCtrl (without text)"), 10, 200);
         wxRenderer_DrawTextCtrl( this, dc, wxRect(20,220,60,24), 0);
         wxRenderer_DrawTextCtrl( this, dc, wxRect(120,220,60,24), wxCONTROL_CURRENT );
         
-        dc.DrawText(_T("Draw wxComboBox (without text)"), 10, 250);
+        dc.DrawText(wxT("Draw wxComboBox (without text)"), 10, 250);
         wxRenderer_DrawComboBox( this, dc, wxRect(20,270,80,24), 0);
         
-        dc.DrawText(_T("Draw wxChoice (without text)"), 10, 300);
+        dc.DrawText(wxT("Draw wxChoice (without text)"), 10, 300);
         wxRenderer_DrawChoice( this, dc, wxRect(20,320,80,24), 0);
         
-        dc.DrawText(_T("Draw wxRadioButton (without text)"), 10, 350);
+        dc.DrawText(wxT("Draw wxRadioButton (without text)"), 10, 350);
         wxRenderer_DrawRadioButton( this, dc, wxRect(20,370,24,24), 0);
         wxRenderer_DrawRadioButton( this, dc, wxRect(40,370,24,24), wxCONTROL_CHECKED );
 #endif
@@ -246,7 +246,7 @@ bool MyApp::OnInit()
 MyFrame::MyFrame()
        : wxFrame(NULL,
                  wxID_ANY,
-                 _T("Render wxWidgets Sample"),
+                 wxT("Render wxWidgets Sample"),
                  wxPoint(50, 50),
                  wxSize(450, 340))
 {
@@ -257,19 +257,19 @@ MyFrame::MyFrame()
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 #if wxUSE_DYNLIB_CLASS
-    menuFile->Append(Render_Load, _T("&Load renderer...\tCtrl-L"));
-    menuFile->Append(Render_Unload, _T("&Unload renderer\tCtrl-U"));
+    menuFile->Append(Render_Load, wxT("&Load renderer...\tCtrl-L"));
+    menuFile->Append(Render_Unload, wxT("&Unload renderer\tCtrl-U"));
 #endif // wxUSE_DYNLIB_CLASS
-    menuFile->Append(Render_Quit, _T("E&xit\tCtrl-Q"), _T("Quit this program"));
+    menuFile->Append(Render_Quit, wxT("E&xit\tCtrl-Q"), wxT("Quit this program"));
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Render_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Render_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -280,7 +280,7 @@ MyFrame::MyFrame()
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 
     Show();
@@ -298,12 +298,12 @@ MyFrame::~MyFrame()
 
 void MyFrame::OnLoad(wxCommandEvent& WXUNUSED(event))
 {
-    static wxString s_name = _T("renddll");
+    static wxString s_name = wxT("renddll");
 
     wxString name = wxGetTextFromUser
                     (
-                        _T("Name of the renderer to load:"),
-                        _T("Render wxWidgets Sample"),
+                        wxT("Name of the renderer to load:"),
+                        wxT("Render wxWidgets Sample"),
                         s_name,
                         this
                     );
@@ -318,7 +318,7 @@ void MyFrame::OnLoad(wxCommandEvent& WXU
     wxRendererNative *renderer = wxRendererNative::Load(name);
     if ( !renderer )
     {
-        wxLogError(_T("Failed to load renderer \"%s\"."), name.c_str());
+        wxLogError(wxT("Failed to load renderer \"%s\"."), name.c_str());
     }
     else // loaded ok
     {
@@ -326,7 +326,7 @@ void MyFrame::OnLoad(wxCommandEvent& WXU
 
         m_panel->Refresh();
 
-        wxLogStatus(this, _T("Successfully loaded the renderer \"%s\"."),
+        wxLogStatus(this, wxT("Successfully loaded the renderer \"%s\"."),
                     name.c_str());
     }
 }
@@ -340,11 +340,11 @@ void MyFrame::OnUnload(wxCommandEvent& W
 
         m_panel->Refresh();
 
-        wxLogStatus(this, _T("Unloaded the previously loaded renderer."));
+        wxLogStatus(this, wxT("Unloaded the previously loaded renderer."));
     }
     else
     {
-        wxLogWarning(_T("No renderer to unload."));
+        wxLogWarning(wxT("No renderer to unload."));
     }
 }
 
@@ -358,10 +358,10 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Render sample shows how to use custom renderers.\n")
-                 _T("\n")
-                 _T("(c) 2003 Vadim Zeitlin"),
-                 _T("About Render wxWidgets Sample"),
+    wxMessageBox(wxT("Render sample shows how to use custom renderers.\n")
+                 wxT("\n")
+                 wxT("(c) 2003 Vadim Zeitlin"),
+                 wxT("About Render wxWidgets Sample"),
                  wxOK | wxICON_INFORMATION, this);
 }
 
--- samples/render/renddll.cpp-orig	2009-06-18 18:36:02.990783000 -0500
+++ samples/render/renddll.cpp	2009-06-18 18:36:14.621064000 -0500
@@ -35,7 +35,7 @@ public:
         dc.SetBrush(*wxCYAN_BRUSH);
         dc.SetTextForeground(*wxRED);
         dc.DrawRoundedRectangle(rect, 10);
-        dc.DrawLabel(_T("MyDllRenderer"), wxNullBitmap, rect, wxALIGN_CENTER);
+        dc.DrawLabel(wxT("MyDllRenderer"), wxNullBitmap, rect, wxALIGN_CENTER);
     }
 
     virtual wxRendererVersion GetVersion() const
@@ -47,12 +47,12 @@ public:
 #if 0 // just for debugging
     MyDllRenderer()
     {
-        wxMessageBox(_T("Creating MyDllRenderer"), _T("Renderer Sample"));
+        wxMessageBox(wxT("Creating MyDllRenderer"), wxT("Renderer Sample"));
     }
 
     virtual ~MyDllRenderer()
     {
-        wxMessageBox(_T("Deleting MyDllRenderer"), _T("Renderer Sample"));
+        wxMessageBox(wxT("Deleting MyDllRenderer"), wxT("Renderer Sample"));
     }
 #endif // 0
 };
--- samples/drawing/drawing.cpp-orig	2009-06-18 18:35:46.405102000 -0500
+++ samples/drawing/drawing.cpp	2009-06-18 18:35:52.063198000 -0500
@@ -308,10 +308,10 @@ bool MyApp::LoadImages()
     gs_bmp36 = new wxBitmap;
 
     wxPathList pathList;
-    pathList.Add(_T("."));
-    pathList.Add(_T(".."));
+    pathList.Add(wxT("."));
+    pathList.Add(wxT(".."));
 
-    wxString path = pathList.FindValidPath(_T("pat4.bmp"));
+    wxString path = pathList.FindValidPath(wxT("pat4.bmp"));
     if ( !path )
         return false;
 
@@ -322,21 +322,21 @@ bool MyApp::LoadImages()
     wxMask* mask4 = new wxMask(*gs_bmp4_mono, *wxBLACK);
     gs_bmp4_mono->SetMask(mask4);
 
-    path = pathList.FindValidPath(_T("pat36.bmp"));
+    path = pathList.FindValidPath(wxT("pat36.bmp"));
     if ( !path )
         return false;
     gs_bmp36->LoadFile(path, wxBITMAP_TYPE_BMP);
     wxMask* mask36 = new wxMask(*gs_bmp36, *wxBLACK);
     gs_bmp36->SetMask(mask36);
 
-    path = pathList.FindValidPath(_T("image.bmp"));
+    path = pathList.FindValidPath(wxT("image.bmp"));
     if ( !path )
         return false;
     gs_bmpNoMask->LoadFile(path, wxBITMAP_TYPE_BMP);
     gs_bmpWithMask->LoadFile(path, wxBITMAP_TYPE_BMP);
     gs_bmpWithColMask->LoadFile(path, wxBITMAP_TYPE_BMP);
 
-    path = pathList.FindValidPath(_T("mask.bmp"));
+    path = pathList.FindValidPath(wxT("mask.bmp"));
     if ( !path )
         return false;
     gs_bmpMask->LoadFile(path, wxBITMAP_TYPE_BMP);
@@ -354,7 +354,7 @@ bool MyApp::LoadImages()
 bool MyApp::OnInit()
 {
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("Drawing sample"),
+    MyFrame *frame = new MyFrame(wxT("Drawing sample"),
                                  wxPoint(50, 50), wxSize(550, 340));
 
     // Show it and tell the application that it's our main window
@@ -433,22 +433,22 @@ void MyCanvas::DrawTestBrushes(wxDC& dc)
 
     dc.SetBrush(wxBrush(*wxGREEN, wxSOLID));
     dc.DrawRectangle(x, y, WIDTH, HEIGHT);
-    dc.DrawText(_T("Solid green"), x + 10, y + 10);
+    dc.DrawText(wxT("Solid green"), x + 10, y + 10);
 
     y += HEIGHT;
     dc.SetBrush(wxBrush(*wxRED, wxCROSSDIAG_HATCH));
     dc.DrawRectangle(x, y, WIDTH, HEIGHT);
-    dc.DrawText(_T("Hatched red"), x + 10, y + 10);
+    dc.DrawText(wxT("Hatched red"), x + 10, y + 10);
 
     y += HEIGHT;
     dc.SetBrush(wxBrush(*gs_bmpMask));
     dc.DrawRectangle(x, y, WIDTH, HEIGHT);
-    dc.DrawText(_T("Stipple mono"), x + 10, y + 10);
+    dc.DrawText(wxT("Stipple mono"), x + 10, y + 10);
 
     y += HEIGHT;
     dc.SetBrush(wxBrush(*gs_bmpNoMask));
     dc.DrawRectangle(x, y, WIDTH, HEIGHT);
-    dc.DrawText(_T("Stipple colour"), x + 10, y + 10);
+    dc.DrawText(wxT("Stipple colour"), x + 10, y + 10);
 }
 
 void MyCanvas::DrawTestPoly(wxDC& dc)
@@ -463,11 +463,11 @@ void MyCanvas::DrawTestPoly(wxDC& dc)
     star[3] = wxPoint(40, 100);
     star[4] = wxPoint(140, 150);
 
-    dc.DrawText(_T("You should see two (irregular) stars below, the left one ")
-                _T("hatched"), 10, 10);
-    dc.DrawText(_T("except for the central region and the right ")
-                _T("one entirely hatched"), 10, 30);
-    dc.DrawText(_T("The third star only has a hatched outline"), 10, 50);
+    dc.DrawText(wxT("You should see two (irregular) stars below, the left one ")
+                wxT("hatched"), 10, 10);
+    dc.DrawText(wxT("except for the central region and the right ")
+                wxT("one entirely hatched"), 10, 30);
+    dc.DrawText(wxT("The third star only has a hatched outline"), 10, 50);
 
     dc.DrawPolygon(WXSIZEOF(star), star, 0, 30);
     dc.DrawPolygon(WXSIZEOF(star), star, 160, 30, wxWINDING_RULE);
@@ -495,7 +495,7 @@ void MyCanvas::DrawTestLines( int x, int
     dc.DrawText(wxString::Format(wxT("Testing lines of width %d"), width), x + 10, y - 10);
     dc.DrawRectangle( x+10, y+10, 100, 190 );
 
-    dc.DrawText(_T("Solid/dot/short dash/long dash/dot dash"), x + 150, y + 10);
+    dc.DrawText(wxT("Solid/dot/short dash/long dash/dot dash"), x + 150, y + 10);
     dc.SetPen( wxPen( wxT("black"), width, wxSOLID) );
     dc.DrawLine( x+20, y+20, 100, y+20 );
     dc.SetPen( wxPen( wxT("black"), width, wxDOT) );
@@ -507,7 +507,7 @@ void MyCanvas::DrawTestLines( int x, int
     dc.SetPen( wxPen( wxT("black"), width, wxDOT_DASH) );
     dc.DrawLine( x+20, y+60, 100, y+60 );
 
-    dc.DrawText(_T("Misc hatches"), x + 150, y + 70);
+    dc.DrawText(wxT("Misc hatches"), x + 150, y + 70);
     dc.SetPen( wxPen( wxT("black"), width, wxBDIAGONAL_HATCH) );
     dc.DrawLine( x+20, y+70, 100, y+70 );
     dc.SetPen( wxPen( wxT("black"), width, wxCROSSDIAG_HATCH) );
@@ -521,7 +521,7 @@ void MyCanvas::DrawTestLines( int x, int
     dc.SetPen( wxPen( wxT("black"), width, wxVERTICAL_HATCH) );
     dc.DrawLine( x+20, y+120, 100, y+120 );
 
-    dc.DrawText(_T("User dash"), x + 150, y + 140);
+    dc.DrawText(wxT("User dash"), x + 150, y + 140);
     wxPen ud( wxT("black"), width, wxUSER_DASH );
     wxDash dash1[6];
     dash1[0] = 8;  // Long dash  <---------+
@@ -758,8 +758,8 @@ void MyCanvas::DrawText(wxDC& dc)
 {
     // set underlined font for testing
     dc.SetFont( wxFont(12, wxMODERN, wxNORMAL, wxNORMAL, true) );
-    dc.DrawText( _T("This is text"), 110, 10 );
-    dc.DrawRotatedText( _T("That is text"), 20, 10, -45 );
+    dc.DrawText( wxT("This is text"), 110, 10 );
+    dc.DrawRotatedText( wxT("That is text"), 20, 10, -45 );
 
     // use wxSWISS_FONT and not wxNORMAL_FONT as the latter can't be rotated
     // under Win9x (it is not TrueType)
@@ -776,12 +776,12 @@ void MyCanvas::DrawText(wxDC& dc)
 
     dc.SetFont( wxFont( 18, wxSWISS, wxNORMAL, wxNORMAL ) );
 
-    dc.DrawText( _T("This is Swiss 18pt text."), 110, 40 );
+    dc.DrawText( wxT("This is Swiss 18pt text."), 110, 40 );
 
     long length;
     long height;
     long descent;
-    dc.GetTextExtent( _T("This is Swiss 18pt text."), &length, &height, &descent );
+    dc.GetTextExtent( wxT("This is Swiss 18pt text."), &length, &height, &descent );
     text.Printf( wxT("Dimensions are length %ld, height %ld, descent %ld"), length, height, descent );
     dc.DrawText( text, 110, 80 );
 
@@ -793,20 +793,20 @@ void MyCanvas::DrawText(wxDC& dc)
     // test the logical function effect
     wxCoord y = 150;
     dc.SetLogicalFunction(wxINVERT);
-    dc.DrawText( _T("There should be no text below"), 110, 150 );
+    dc.DrawText( wxT("There should be no text below"), 110, 150 );
     dc.DrawRectangle( 110, y, 100, height );
 
     // twice drawn inverted should result in invisible
     y += height;
-    dc.DrawText( _T("Invisible text"), 110, y );
+    dc.DrawText( wxT("Invisible text"), 110, y );
     dc.DrawRectangle( 110, y, 100, height );
-    dc.DrawText( _T("Invisible text"), 110, y );
+    dc.DrawText( wxT("Invisible text"), 110, y );
     dc.DrawRectangle( 110, y, 100, height );
     dc.SetLogicalFunction(wxCOPY);
 
     y += height;
     dc.DrawRectangle( 110, y, 100, height );
-    dc.DrawText( _T("Visible text"), 110, y );
+    dc.DrawText( wxT("Visible text"), 110, y );
 }
 
 static const struct
@@ -834,13 +834,13 @@ static const struct
 
 void MyCanvas::DrawImages(wxDC& dc)
 {
-    dc.DrawText(_T("original image"), 0, 0);
+    dc.DrawText(wxT("original image"), 0, 0);
     dc.DrawBitmap(*gs_bmpNoMask, 0, 20, 0);
-    dc.DrawText(_T("with colour mask"), 0, 100);
+    dc.DrawText(wxT("with colour mask"), 0, 100);
     dc.DrawBitmap(*gs_bmpWithColMask, 0, 120, true);
-    dc.DrawText(_T("the mask image"), 0, 200);
+    dc.DrawText(wxT("the mask image"), 0, 200);
     dc.DrawBitmap(*gs_bmpMask, 0, 220, 0);
-    dc.DrawText(_T("masked image"), 0, 300);
+    dc.DrawText(wxT("masked image"), 0, 300);
     dc.DrawBitmap(*gs_bmpWithMask, 0, 320, true);
 
     int cx = gs_bmpWithColMask->GetWidth(),
@@ -951,19 +951,19 @@ void MyCanvas::DrawCircles(wxDC& dc)
     dc.SetPen( *wxRED_PEN );
     dc.SetBrush( *wxGREEN_BRUSH );
 
-    dc.DrawText(_T("Some circles"), 0, y);
+    dc.DrawText(wxT("Some circles"), 0, y);
     dc.DrawCircle(x, y, r);
     dc.DrawCircle(x + 2*r, y, r);
     dc.DrawCircle(x + 4*r, y, r);
 
     y += 2*r;
-    dc.DrawText(_T("And ellipses"), 0, y);
+    dc.DrawText(wxT("And ellipses"), 0, y);
     dc.DrawEllipse(x - r, y, 2*r, r);
     dc.DrawEllipse(x + r, y, 2*r, r);
     dc.DrawEllipse(x + 3*r, y, 2*r, r);
 
     y += 2*r;
-    dc.DrawText(_T("And arcs"), 0, y);
+    dc.DrawText(wxT("And arcs"), 0, y);
     dc.DrawArc(x - r, y, x + r, y, x, y);
     dc.DrawArc(x + 4*r, y, x + 2*r, y, x + 3*r, y);
     dc.DrawArc(x + 5*r, y, x + 5*r, y, x + 6*r, y);
@@ -980,19 +980,19 @@ void MyCanvas::DrawCircles(wxDC& dc)
     dc.SetBrush( *wxTRANSPARENT_BRUSH );
 
     y += 2*r;
-    dc.DrawText(_T("Some circles"), 0, y);
+    dc.DrawText(wxT("Some circles"), 0, y);
     dc.DrawCircle(x, y, r);
     dc.DrawCircle(x + 2*r, y, r);
     dc.DrawCircle(x + 4*r, y, r);
 
     y += 2*r;
-    dc.DrawText(_T("And ellipses"), 0, y);
+    dc.DrawText(wxT("And ellipses"), 0, y);
     dc.DrawEllipse(x - r, y, 2*r, r);
     dc.DrawEllipse(x + r, y, 2*r, r);
     dc.DrawEllipse(x + 3*r, y, 2*r, r);
 
     y += 2*r;
-    dc.DrawText(_T("And arcs"), 0, y);
+    dc.DrawText(wxT("And arcs"), 0, y);
     dc.DrawArc(x - r, y, x + r, y, x, y);
     dc.DrawArc(x + 4*r, y, x + 2*r, y, x + 3*r, y);
     dc.DrawArc(x + 5*r, y, x + 5*r, y, x + 6*r, y);
@@ -1008,7 +1008,7 @@ void MyCanvas::DrawCircles(wxDC& dc)
 void MyCanvas::DrawSplines(wxDC& dc)
 {
 #if wxUSE_SPLINES
-    dc.DrawText(_T("Some splines"), 10, 5);
+    dc.DrawText(wxT("Some splines"), 10, 5);
 
     // values are hardcoded rather than randomly generated
     // so the output can be compared between native
@@ -1089,7 +1089,7 @@ void MyCanvas::DrawSplines(wxDC& dc)
     }
 
 #else
-    dc.DrawText(_T("Splines not supported."), 10, 5);
+    dc.DrawText(wxT("Splines not supported."), 10, 5);
 #endif
 }
 
@@ -1099,56 +1099,56 @@ void MyCanvas::DrawGradients(wxDC& dc)
 
     // LHS: linear
     wxRect r(10, 10, 50, 50);
-    dc.DrawText(_T("wxRIGHT"), r.x, r.y);
+    dc.DrawText(wxT("wxRIGHT"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillLinear(r, *wxWHITE, *wxBLUE, wxRIGHT);
 
     r.Offset(0, r.height + 10);
-    dc.DrawText(_T("wxLEFT"), r.x, r.y);
+    dc.DrawText(wxT("wxLEFT"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillLinear(r, *wxWHITE, *wxBLUE, wxLEFT);
 
     r.Offset(0, r.height + 10);
-    dc.DrawText(_T("wxDOWN"), r.x, r.y);
+    dc.DrawText(wxT("wxDOWN"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillLinear(r, *wxWHITE, *wxBLUE, wxDOWN);
 
     r.Offset(0, r.height + 10);
-    dc.DrawText(_T("wxUP"), r.x, r.y);
+    dc.DrawText(wxT("wxUP"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillLinear(r, *wxWHITE, *wxBLUE, wxUP);
 
 
     // RHS: concentric
     r = wxRect(200, 10, 50, 50);
-    dc.DrawText(_T("Blue inside"), r.x, r.y);
+    dc.DrawText(wxT("Blue inside"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillConcentric(r, *wxBLUE, *wxWHITE);
 
     r.Offset(0, r.height + 10);
-    dc.DrawText(_T("White inside"), r.x, r.y);
+    dc.DrawText(wxT("White inside"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillConcentric(r, *wxWHITE, *wxBLUE);
 
     r.Offset(0, r.height + 10);
-    dc.DrawText(_T("Blue in top left corner"), r.x, r.y);
+    dc.DrawText(wxT("Blue in top left corner"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillConcentric(r, *wxBLUE, *wxWHITE, wxPoint(0, 0));
 
     r.Offset(0, r.height + 10);
-    dc.DrawText(_T("Blue in bottom right corner"), r.x, r.y);
+    dc.DrawText(wxT("Blue in bottom right corner"), r.x, r.y);
     r.Offset(0, TEXT_HEIGHT);
     dc.GradientFillConcentric(r, *wxBLUE, *wxWHITE, wxPoint(r.width, r.height));
 }
 
 void MyCanvas::DrawRegions(wxDC& dc)
 {
-    dc.DrawText(_T("You should see a red rect partly covered by a cyan one ")
-                _T("on the left"), 10, 5);
-    dc.DrawText(_T("and 5 smileys from which 4 are partially clipped on the right"),
+    dc.DrawText(wxT("You should see a red rect partly covered by a cyan one ")
+                wxT("on the left"), 10, 5);
+    dc.DrawText(wxT("and 5 smileys from which 4 are partially clipped on the right"),
                 10, 5 + dc.GetCharHeight());
-    dc.DrawText(_T("The second copy should be identical but right part of it ")
-                _T("should be offset by 10 pixels."),
+    dc.DrawText(wxT("The second copy should be identical but right part of it ")
+                wxT("should be offset by 10 pixels."),
                 10, 5 + 2*dc.GetCharHeight());
 
     DrawRegionsHelper(dc, 10, true);
@@ -1346,82 +1346,82 @@ MyFrame::MyFrame(const wxString& title, 
     SetIcon(wxICON(mondrian));
 
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(File_ShowDefault, _T("&Default screen\tF1"));
-    menuFile->Append(File_ShowText, _T("&Text screen\tF2"));
-    menuFile->Append(File_ShowLines, _T("&Lines screen\tF3"));
-    menuFile->Append(File_ShowBrushes, _T("&Brushes screen\tF4"));
-    menuFile->Append(File_ShowPolygons, _T("&Polygons screen\tF5"));
-    menuFile->Append(File_ShowMask, _T("&Mask screen\tF6"));
-    menuFile->Append(File_ShowOps, _T("&ROP screen\tF7"));
-    menuFile->Append(File_ShowRegions, _T("Re&gions screen\tF8"));
-    menuFile->Append(File_ShowCircles, _T("&Circles screen\tF9"));
+    menuFile->Append(File_ShowDefault, wxT("&Default screen\tF1"));
+    menuFile->Append(File_ShowText, wxT("&Text screen\tF2"));
+    menuFile->Append(File_ShowLines, wxT("&Lines screen\tF3"));
+    menuFile->Append(File_ShowBrushes, wxT("&Brushes screen\tF4"));
+    menuFile->Append(File_ShowPolygons, wxT("&Polygons screen\tF5"));
+    menuFile->Append(File_ShowMask, wxT("&Mask screen\tF6"));
+    menuFile->Append(File_ShowOps, wxT("&ROP screen\tF7"));
+    menuFile->Append(File_ShowRegions, wxT("Re&gions screen\tF8"));
+    menuFile->Append(File_ShowCircles, wxT("&Circles screen\tF9"));
 #if wxUSE_GRAPHICS_CONTEXT
-    menuFile->Append(File_ShowAlpha, _T("&Alpha screen\tF10"));
+    menuFile->Append(File_ShowAlpha, wxT("&Alpha screen\tF10"));
 #endif
-    menuFile->Append(File_ShowSplines, _T("&Splines screen\tF11"));
-    menuFile->Append(File_ShowGradients, _T("&Gradients screen\tF12"));
+    menuFile->Append(File_ShowSplines, wxT("&Splines screen\tF11"));
+    menuFile->Append(File_ShowGradients, wxT("&Gradients screen\tF12"));
     menuFile->AppendSeparator();
-    menuFile->AppendCheckItem(File_Clip, _T("&Clip\tCtrl-C"), _T("Clip/unclip drawing"));
+    menuFile->AppendCheckItem(File_Clip, wxT("&Clip\tCtrl-C"), wxT("Clip/unclip drawing"));
 #if wxUSE_GRAPHICS_CONTEXT
-    menuFile->AppendCheckItem(File_GraphicContext, _T("&Use GraphicContext\tCtrl-Y"), _T("Use GraphicContext"));
+    menuFile->AppendCheckItem(File_GraphicContext, wxT("&Use GraphicContext\tCtrl-Y"), wxT("Use GraphicContext"));
 #endif
     menuFile->AppendSeparator();
-    menuFile->Append(File_About, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(File_About, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
     menuFile->AppendSeparator();
-    menuFile->Append(File_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(File_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *menuMapMode = new wxMenu;
-    menuMapMode->Append( MapMode_Text, _T("&TEXT map mode") );
-    menuMapMode->Append( MapMode_Lometric, _T("&LOMETRIC map mode") );
-    menuMapMode->Append( MapMode_Twips, _T("T&WIPS map mode") );
-    menuMapMode->Append( MapMode_Points, _T("&POINTS map mode") );
-    menuMapMode->Append( MapMode_Metric, _T("&METRIC map mode") );
+    menuMapMode->Append( MapMode_Text, wxT("&TEXT map mode") );
+    menuMapMode->Append( MapMode_Lometric, wxT("&LOMETRIC map mode") );
+    menuMapMode->Append( MapMode_Twips, wxT("T&WIPS map mode") );
+    menuMapMode->Append( MapMode_Points, wxT("&POINTS map mode") );
+    menuMapMode->Append( MapMode_Metric, wxT("&METRIC map mode") );
 
     wxMenu *menuUserScale = new wxMenu;
-    menuUserScale->Append( UserScale_StretchHoriz, _T("Stretch &horizontally\tCtrl-H") );
-    menuUserScale->Append( UserScale_ShrinkHoriz, _T("Shrin&k horizontally\tCtrl-G") );
-    menuUserScale->Append( UserScale_StretchVertic, _T("Stretch &vertically\tCtrl-V") );
-    menuUserScale->Append( UserScale_ShrinkVertic, _T("&Shrink vertically\tCtrl-W") );
+    menuUserScale->Append( UserScale_StretchHoriz, wxT("Stretch &horizontally\tCtrl-H") );
+    menuUserScale->Append( UserScale_ShrinkHoriz, wxT("Shrin&k horizontally\tCtrl-G") );
+    menuUserScale->Append( UserScale_StretchVertic, wxT("Stretch &vertically\tCtrl-V") );
+    menuUserScale->Append( UserScale_ShrinkVertic, wxT("&Shrink vertically\tCtrl-W") );
     menuUserScale->AppendSeparator();
-    menuUserScale->Append( UserScale_Restore, _T("&Restore to normal\tCtrl-0") );
+    menuUserScale->Append( UserScale_Restore, wxT("&Restore to normal\tCtrl-0") );
 
     wxMenu *menuAxis = new wxMenu;
-    menuAxis->AppendCheckItem( AxisMirror_Horiz, _T("Mirror horizontally\tCtrl-M") );
-    menuAxis->AppendCheckItem( AxisMirror_Vertic, _T("Mirror vertically\tCtrl-N") );
+    menuAxis->AppendCheckItem( AxisMirror_Horiz, wxT("Mirror horizontally\tCtrl-M") );
+    menuAxis->AppendCheckItem( AxisMirror_Vertic, wxT("Mirror vertically\tCtrl-N") );
 
     wxMenu *menuLogical = new wxMenu;
-    menuLogical->Append( LogicalOrigin_MoveDown, _T("Move &down\tCtrl-D") );
-    menuLogical->Append( LogicalOrigin_MoveUp, _T("Move &up\tCtrl-U") );
-    menuLogical->Append( LogicalOrigin_MoveLeft, _T("Move &right\tCtrl-L") );
-    menuLogical->Append( LogicalOrigin_MoveRight, _T("Move &left\tCtrl-R") );
+    menuLogical->Append( LogicalOrigin_MoveDown, wxT("Move &down\tCtrl-D") );
+    menuLogical->Append( LogicalOrigin_MoveUp, wxT("Move &up\tCtrl-U") );
+    menuLogical->Append( LogicalOrigin_MoveLeft, wxT("Move &right\tCtrl-L") );
+    menuLogical->Append( LogicalOrigin_MoveRight, wxT("Move &left\tCtrl-R") );
     menuLogical->AppendSeparator();
-    menuLogical->Append( LogicalOrigin_Set, _T("Set to (&100, 100)\tShift-Ctrl-1") );
-    menuLogical->Append( LogicalOrigin_Restore, _T("&Restore to normal\tShift-Ctrl-0") );
+    menuLogical->Append( LogicalOrigin_Set, wxT("Set to (&100, 100)\tShift-Ctrl-1") );
+    menuLogical->Append( LogicalOrigin_Restore, wxT("&Restore to normal\tShift-Ctrl-0") );
 
     wxMenu *menuColour = new wxMenu;
 #if wxUSE_COLOURDLG
-    menuColour->Append( Colour_TextForeground, _T("Text &foreground...") );
-    menuColour->Append( Colour_TextBackground, _T("Text &background...") );
-    menuColour->Append( Colour_Background, _T("Background &colour...") );
+    menuColour->Append( Colour_TextForeground, wxT("Text &foreground...") );
+    menuColour->Append( Colour_TextBackground, wxT("Text &background...") );
+    menuColour->Append( Colour_Background, wxT("Background &colour...") );
 #endif // wxUSE_COLOURDLG
-    menuColour->AppendCheckItem( Colour_BackgroundMode, _T("&Opaque/transparent\tCtrl-B") );
-    menuColour->AppendCheckItem( Colour_TextureBackgound, _T("Draw textured back&ground\tCtrl-T") );
+    menuColour->AppendCheckItem( Colour_BackgroundMode, wxT("&Opaque/transparent\tCtrl-B") );
+    menuColour->AppendCheckItem( Colour_TextureBackgound, wxT("Draw textured back&ground\tCtrl-T") );
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(menuMapMode, _T("&Mode"));
-    menuBar->Append(menuUserScale, _T("&Scale"));
-    menuBar->Append(menuAxis, _T("&Axis"));
-    menuBar->Append(menuLogical, _T("&Origin"));
-    menuBar->Append(menuColour, _T("&Colours"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(menuMapMode, wxT("&Mode"));
+    menuBar->Append(menuUserScale, wxT("&Scale"));
+    menuBar->Append(menuAxis, wxT("&Axis"));
+    menuBar->Append(menuLogical, wxT("&Origin"));
+    menuBar->Append(menuColour, wxT("&Colours"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
 
 #if wxUSE_STATUSBAR
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 
     m_mapMode = wxMM_TEXT;
@@ -1457,7 +1457,7 @@ void MyFrame::OnAbout(wxCommandEvent& WX
                 wxT("Copyright (c) Robert Roebling 1999")
               );
 
-    wxMessageBox(msg, _T("About Drawing"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About Drawing"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnClip(wxCommandEvent& event)
--- samples/propsize/propsize.cpp-orig	2009-06-18 18:35:30.003168000 -0500
+++ samples/propsize/propsize.cpp	2009-06-18 18:35:37.450886000 -0500
@@ -115,7 +115,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("Proportional resize"),
+    MyFrame *frame = new MyFrame(wxT("Proportional resize"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // Show it and tell the application that it's our main window
@@ -141,15 +141,15 @@ MyFrame::MyFrame(const wxString& title, 
     SetIcon(wxICON(mondrian));
 
     // create a menu bar
-    wxMenu *menuFile = new wxMenu(_T(""), wxMENU_TEAROFF);
+    wxMenu *menuFile = new wxMenu(wxT(""), wxMENU_TEAROFF);
 
-    menuFile->Append(wxID_ABOUT, _T("&About...\tCtrl-A"), _T("Show about dialog"));
+    menuFile->Append(wxID_ABOUT, wxT("&About...\tCtrl-A"), wxT("Show about dialog"));
     menuFile->AppendSeparator();
-    menuFile->Append(Minimal_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Minimal_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
+    menuBar->Append(menuFile, wxT("&File"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -157,7 +157,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(1);
-    SetStatusText(_T("Resize the frame to see how controls react"));
+    SetStatusText(wxT("Resize the frame to see how controls react"));
 #endif // wxUSE_STATUSBAR
 
 #if wxUSE_STATLINE
@@ -176,42 +176,42 @@ MyFrame::MyFrame(const wxString& title, 
     wxBoxSizer *topsizer = new wxBoxSizer( wxVERTICAL );
     // top row -- top-aligned
     wxBoxSizer *hsizer1 = new wxBoxSizer( wxHORIZONTAL );
-    hsizer1->AddButton( _T("one"), wxALIGN_LEFT | wxALIGN_TOP);
+    hsizer1->AddButton( wxT("one"), wxALIGN_LEFT | wxALIGN_TOP);
     hsizer1->AddLine(wxVERTICAL);
-    hsizer1->AddButton( _T("two"), wxALIGN_CENTER_HORIZONTAL | wxALIGN_TOP);
+    hsizer1->AddButton( wxT("two"), wxALIGN_CENTER_HORIZONTAL | wxALIGN_TOP);
     hsizer1->AddLine(wxVERTICAL);
-    hsizer1->AddButton( _T("three"), wxALIGN_RIGHT | wxALIGN_TOP);
+    hsizer1->AddButton( wxT("three"), wxALIGN_RIGHT | wxALIGN_TOP);
 
     topsizer->Add(hsizer1, 1, wxEXPAND);
     topsizer->AddLine(wxHORIZONTAL);
 
     wxBoxSizer *hsizer2 = new wxBoxSizer( wxHORIZONTAL );
-    hsizer2->AddButton( _T("four"), wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL);
+    hsizer2->AddButton( wxT("four"), wxALIGN_LEFT | wxALIGN_CENTER_VERTICAL);
     hsizer2->AddLine(wxVERTICAL);
     // sizer that preserves it's shape
     wxBoxSizer *vsizer = new wxBoxSizer( wxVERTICAL );
     vsizer->Add(
-        new wxButton( this, wxID_ANY, _T("up"), wxDefaultPosition, wxSize(100,25) ),
+        new wxButton( this, wxID_ANY, wxT("up"), wxDefaultPosition, wxSize(100,25) ),
         1, wxEXPAND);
 
     vsizer->Add(
-        new wxButton( this, wxID_ANY, _T("down"), wxDefaultPosition, wxSize(100,25) ),
+        new wxButton( this, wxID_ANY, wxT("down"), wxDefaultPosition, wxSize(100,25) ),
         1, wxEXPAND);
 
     hsizer2->Add(vsizer, 1, wxSHAPED | wxALIGN_CENTER);
     hsizer2->AddLine(wxVERTICAL);
-    hsizer2->AddButton( _T("six"), wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
+    hsizer2->AddButton( wxT("six"), wxALIGN_RIGHT | wxALIGN_CENTER_VERTICAL);
 
     topsizer->Add(hsizer2, 1, wxEXPAND);
     topsizer->AddLine(wxHORIZONTAL);
 
     wxBoxSizer *hsizer3 = new wxBoxSizer( wxHORIZONTAL );
-    hsizer3->AddButton( _T("seven"), wxALIGN_LEFT | wxALIGN_BOTTOM);
+    hsizer3->AddButton( wxT("seven"), wxALIGN_LEFT | wxALIGN_BOTTOM);
     hsizer3->AddLine(wxVERTICAL);
-    hsizer3->AddButton( _T("eight"), wxALIGN_CENTER_HORIZONTAL | wxALIGN_BOTTOM);
+    hsizer3->AddButton( wxT("eight"), wxALIGN_CENTER_HORIZONTAL | wxALIGN_BOTTOM);
     hsizer3->AddLine(wxVERTICAL);
     // wxEXPAND should have no effect
-    hsizer3->AddButton( _T("nine"), wxEXPAND | wxALIGN_RIGHT | wxALIGN_BOTTOM);
+    hsizer3->AddButton( wxT("nine"), wxEXPAND | wxALIGN_RIGHT | wxALIGN_BOTTOM);
 
     topsizer->Add(hsizer3, 1, wxEXPAND);
 
@@ -236,10 +236,10 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the about dialog of proportional sizer test.\n")
-                _T("Welcome to %s")
+    msg.Printf( wxT("This is the about dialog of proportional sizer test.\n")
+                wxT("Welcome to %s")
 #ifdef wxBETA_NUMBER
-               _T(" (beta %d)!")
+               wxT(" (beta %d)!")
 #endif // wxBETA_NUMBER
                , wxVERSION_STRING
 #ifdef wxBETA_NUMBER
@@ -247,5 +247,5 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 #endif // wxBETA_NUMBER
               );
 
-    wxMessageBox(msg, _T("About Shaped Sizer"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About Shaped Sizer"), wxOK | wxICON_INFORMATION, this);
 }
--- samples/sockets/client.cpp-orig	2009-06-18 18:37:01.233434000 -0500
+++ samples/sockets/client.cpp	2009-06-18 18:37:05.327906000 -0500
@@ -549,7 +549,7 @@ void MyFrame::OnTestURL(wxCommandEvent& 
   m_text->AppendText(_("\n=== URL test begins ===\n"));
   wxString urlname = wxGetTextFromUser(_("Enter an URL to get"),
                                        _("URL:"),
-                                       _T("http://localhost"));
+                                       wxT("http://localhost"));
 
   // Parse the URL
   wxURL url(urlname);
--- samples/vscroll/vstest.cpp-orig	2009-06-18 18:35:16.681217000 -0500
+++ samples/vscroll/vstest.cpp	2009-06-18 18:35:22.594325000 -0500
@@ -74,7 +74,7 @@ public:
         if ( m_frameStatusBar )
         {
             wxSize sz = GetClientSize();
-            SetStatusText(wxString::Format(_T("%dx%d"), sz.x, sz.y), 1);
+            SetStatusText(wxString::Format(wxT("%dx%d"), sz.x, sz.y), 1);
         }
 #endif // wxUSE_STATUSBAR
 
@@ -103,7 +103,7 @@ public:
 #if wxUSE_STATUSBAR
         m_frame->SetStatusText(wxString::Format
                                (
-                                    _T("Page size = %d, pos = %d, max = %d"),
+                                    wxT("Page size = %d, pos = %d, max = %d"),
                                     GetScrollThumb(wxVERTICAL),
                                     GetScrollPos(wxVERTICAL),
                                     GetScrollRange(wxVERTICAL)
@@ -129,7 +129,7 @@ public:
             dc.DrawLine(0, y, 1000, y);
 
             wxCoord hLine = OnGetLineHeight(line);
-            dc.DrawText(wxString::Format(_T("Line %lu"), (unsigned long)line),
+            dc.DrawText(wxString::Format(wxT("Line %lu"), (unsigned long)line),
                         0, y + (hLine - hText) / 2);
 
             y += hLine;
@@ -232,7 +232,7 @@ bool VScrollApp::OnInit()
 VScrollFrame::VScrollFrame()
             : wxFrame(NULL,
                       wxID_ANY,
-                      _T("VScroll wxWidgets Sample"),
+                      wxT("VScroll wxWidgets Sample"),
                       wxDefaultPosition,
                       wxSize(400, 350))
 {
@@ -245,14 +245,14 @@ VScrollFrame::VScrollFrame()
 
     // the "About" item should be in the help menu
     wxMenu *menuHelp = new wxMenu;
-    menuHelp->Append(VScroll_About, _T("&About...\tF1"), _T("Show about dialog"));
+    menuHelp->Append(VScroll_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->Append(VScroll_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(VScroll_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(menuHelp, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(menuHelp, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -261,7 +261,7 @@ VScrollFrame::VScrollFrame()
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 
     // create our one and only child -- it will take our entire client area
@@ -280,10 +280,10 @@ void VScrollFrame::OnQuit(wxCommandEvent
 
 void VScrollFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("VScroll shows how to implement scrolling with\n")
-                 _T("variable line heights.\n")
-                 _T("(c) 2003 Vadim Zeitlin"),
-                 _T("About VScroll"),
+    wxMessageBox(wxT("VScroll shows how to implement scrolling with\n")
+                 wxT("variable line heights.\n")
+                 wxT("(c) 2003 Vadim Zeitlin"),
+                 wxT("About VScroll"),
                  wxOK | wxICON_INFORMATION,
                  this);
 }
--- samples/widgets/odcombobox.cpp-orig	2009-06-18 18:29:42.071477000 -0500
+++ samples/widgets/odcombobox.cpp	2009-06-18 18:29:51.163044000 -0500
@@ -290,7 +290,7 @@ public:
 };
 
 
-IMPLEMENT_WIDGETS_PAGE(ODComboboxWidgetsPage, _T("OwnerDrawnCombobox"),
+IMPLEMENT_WIDGETS_PAGE(ODComboboxWidgetsPage, wxT("OwnerDrawnCombobox"),
                        GENERIC_CTRLS | WITH_ITEMS_CTRLS | COMBO_CTRLS
                        );
 
@@ -323,85 +323,85 @@ void ODComboboxWidgetsPage::CreateConten
     wxSizer *sizerLeft = new wxBoxSizer(wxVERTICAL);
 
     // left pane - style box
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerStyle = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkSort = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Sort items"));
-    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Read only"));
-    m_chkDclickcycles = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Double-click Cycles"));
+    m_chkSort = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("&Sort items"));
+    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("&Read only"));
+    m_chkDclickcycles = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("&Double-click Cycles"));
 
     sizerStyle->AddSpacer(4);
 
-    m_chkBitmapbutton = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Bitmap button"));
-    m_chkStdbutton = CreateCheckBoxAndAddToSizer(sizerStyle, _T("B&lank button background"));
+    m_chkBitmapbutton = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("&Bitmap button"));
+    m_chkStdbutton = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("B&lank button background"));
 
-    wxButton *btn = new wxButton(this, ODComboPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, ODComboPage_Reset, wxT("&Reset"));
     sizerStyle->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 3);
 
     sizerLeft->Add(sizerStyle, 0, wxGROW | wxALIGN_CENTRE_HORIZONTAL);
 
     // left pane - popup adjustment box
-    box = new wxStaticBox(this, wxID_ANY, _T("Adjust &popup"));
+    box = new wxStaticBox(this, wxID_ANY, wxT("Adjust &popup"));
 
     wxSizer *sizerPopupPos = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Min. Width:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Min. Width:"),
                                            ODComboPage_PopupMinWidth,
                                            &m_textPopupMinWidth);
     m_textPopupMinWidth->SetValue(wxT("-1"));
     sizerPopupPos->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Max. Height:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Max. Height:"),
                                            ODComboPage_PopupHeight,
                                            &m_textPopupHeight);
     m_textPopupHeight->SetValue(wxT("-1"));
     sizerPopupPos->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    m_chkAlignpopupright = CreateCheckBoxAndAddToSizer(sizerPopupPos, _T("Align Right"));
+    m_chkAlignpopupright = CreateCheckBoxAndAddToSizer(sizerPopupPos, wxT("Align Right"));
 
     sizerLeft->Add(sizerPopupPos, 0, wxGROW | wxALIGN_CENTRE_HORIZONTAL | wxTOP, 2);
 
     // left pane - button adjustment box
-    box = new wxStaticBox(this, wxID_ANY, _T("Adjust &button"));
+    box = new wxStaticBox(this, wxID_ANY, wxT("Adjust &button"));
 
     wxSizer *sizerButtonPos = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Width:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Width:"),
                                            ODComboPage_ButtonWidth,
                                            &m_textButtonWidth);
     m_textButtonWidth->SetValue(wxT("-1"));
     sizerButtonPos->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("VSpacing:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("VSpacing:"),
                                            ODComboPage_ButtonSpacing,
                                            &m_textButtonSpacing);
     m_textButtonSpacing->SetValue(wxT("0"));
     sizerButtonPos->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Height:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Height:"),
                                            ODComboPage_ButtonHeight,
                                            &m_textButtonHeight);
     m_textButtonHeight->SetValue(wxT("-1"));
     sizerButtonPos->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    m_chkAlignbutleft = CreateCheckBoxAndAddToSizer(sizerButtonPos, _T("Align Left"));
+    m_chkAlignbutleft = CreateCheckBoxAndAddToSizer(sizerButtonPos, wxT("Align Left"));
 
     sizerLeft->Add(sizerButtonPos, 0, wxGROW | wxALIGN_CENTRE_HORIZONTAL | wxTOP, 2);
 
     // middle pane
     wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
-        _T("&Change combobox contents"));
+        wxT("&Change combobox contents"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Current selection"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Current selection"),
                                            ODComboPage_CurText,
                                            &text);
     text->SetEditable(false);
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Insertion Point"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Insertion Point"),
                                            ODComboPage_InsertionPointText,
                                            &text);
     text->SetEditable(false);
@@ -409,39 +409,39 @@ void ODComboboxWidgetsPage::CreateConten
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ODComboPage_Insert,
-                                            _T("&Insert this string"),
+                                            wxT("&Insert this string"),
                                             ODComboPage_InsertText,
                                             &m_textInsert);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ODComboPage_Add,
-                                            _T("&Add this string"),
+                                            wxT("&Add this string"),
                                             ODComboPage_AddText,
                                             &m_textAdd);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ODComboPage_AddSeveral, _T("&Append a few strings"));
+    btn = new wxButton(this, ODComboPage_AddSeveral, wxT("&Append a few strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ODComboPage_AddMany, _T("Append &many strings"));
+    btn = new wxButton(this, ODComboPage_AddMany, wxT("Append &many strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ODComboPage_Change,
-                                            _T("C&hange current"),
+                                            wxT("C&hange current"),
                                             ODComboPage_ChangeText,
                                             &m_textChange);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ODComboPage_Delete,
-                                            _T("&Delete this item"),
+                                            wxT("&Delete this item"),
                                             ODComboPage_DeleteText,
                                             &m_textDelete);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ODComboPage_DeleteSel, _T("Delete &selection"));
+    btn = new wxButton(this, ODComboPage_DeleteSel, wxT("Delete &selection"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ODComboPage_Clear, _T("&Clear"));
+    btn = new wxButton(this, ODComboPage_Clear, wxT("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     // right pane
@@ -557,7 +557,7 @@ void ODComboboxWidgetsPage::OnButtonChan
 #ifndef __WXGTK__
         m_combobox->SetString(sel, m_textChange->GetValue());
 #else
-        wxLogMessage(_T("Not implemented in wxGTK"));
+        wxLogMessage(wxT("Not implemented in wxGTK"));
 #endif
     }
 }
@@ -596,7 +596,7 @@ void ODComboboxWidgetsPage::OnButtonInse
     if ( !m_textInsert->IsModified() )
     {
         // update the default string
-        m_textInsert->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textInsert->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     if (m_combobox->GetSelection() >= 0)
@@ -611,7 +611,7 @@ void ODComboboxWidgetsPage::OnButtonAdd(
     if ( !m_textAdd->IsModified() )
     {
         // update the default string
-        m_textAdd->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textAdd->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     m_combobox->Append(s);
@@ -622,15 +622,15 @@ void ODComboboxWidgetsPage::OnButtonAddM
     // "many" means 1000 here
     for ( unsigned int n = 0; n < 1000; n++ )
     {
-        m_combobox->Append(wxString::Format(_T("item #%u"), n));
+        m_combobox->Append(wxString::Format(wxT("item #%u"), n));
     }
 }
 
 void ODComboboxWidgetsPage::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
 {
-    m_combobox->Append(_T("First"));
-    m_combobox->Append(_T("another one"));
-    m_combobox->Append(_T("and the last (very very very very very very very very very very long) one"));
+    m_combobox->Append(wxT("First"));
+    m_combobox->Append(wxT("another one"));
+    m_combobox->Append(wxT("and the last (very very very very very very very very very very long) one"));
 }
 
 void ODComboboxWidgetsPage::OnTextPopupWidth(wxCommandEvent& WXUNUSED(event))
@@ -686,13 +686,13 @@ void ODComboboxWidgetsPage::OnTextButton
 void ODComboboxWidgetsPage::OnUpdateUICurText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(_T("%d"), m_combobox->GetSelection()) );
+        event.SetText( wxString::Format(wxT("%d"), m_combobox->GetSelection()) );
 }
 
 void ODComboboxWidgetsPage::OnUpdateUIInsertionPointText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(_T("%ld"), m_combobox->GetInsertionPoint()) );
+        event.SetText( wxString::Format(wxT("%ld"), m_combobox->GetInsertionPoint()) );
 }
 
 void ODComboboxWidgetsPage::OnUpdateUIResetButton(wxUpdateUIEvent& event)
@@ -749,22 +749,22 @@ void ODComboboxWidgetsPage::OnComboText(
     wxString s = event.GetString();
 
     wxASSERT_MSG( s == m_combobox->GetValue(),
-                  _T("event and combobox values should be the same") );
+                  wxT("event and combobox values should be the same") );
 
     if (event.GetEventType() == wxEVT_COMMAND_TEXT_ENTER)
-        wxLogMessage(_T("OwnerDrawnCombobox enter pressed (now '%s')"), s.c_str());
+        wxLogMessage(wxT("OwnerDrawnCombobox enter pressed (now '%s')"), s.c_str());
     else
-        wxLogMessage(_T("OwnerDrawnCombobox text changed (now '%s')"), s.c_str());
+        wxLogMessage(wxT("OwnerDrawnCombobox text changed (now '%s')"), s.c_str());
 }
 
 void ODComboboxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
     long sel = event.GetInt();
-    m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
+    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
 
-    wxLogMessage(_T("OwnerDrawnCombobox item %ld selected"), sel);
+    wxLogMessage(wxT("OwnerDrawnCombobox item %ld selected"), sel);
 
-    wxLogMessage(_T("OwnerDrawnCombobox GetValue(): %s"), m_combobox->GetValue().c_str() );
+    wxLogMessage(wxT("OwnerDrawnCombobox GetValue(): %s"), m_combobox->GetValue().c_str() );
 }
 
 void ODComboboxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& event)
--- samples/widgets/dirctrl.cpp-orig	2009-06-18 18:29:59.544473000 -0500
+++ samples/widgets/dirctrl.cpp	2009-06-18 18:30:05.028879000 -0500
@@ -60,16 +60,16 @@ enum
 
 static const wxString stdPaths[] =
 {
-    _T("&none"),
-    _T("&config"),
-    _T("&data"),
-    _T("&documents"),
-    _T("&local data"),
-    _T("&plugins"),
-    _T("&resources"),
-    _T("&user config"),
-    _T("&user data"),
-    _T("&user local data")
+    wxT("&none"),
+    wxT("&config"),
+    wxT("&data"),
+    wxT("&documents"),
+    wxT("&local data"),
+    wxT("&plugins"),
+    wxT("&resources"),
+    wxT("&user config"),
+    wxT("&user data"),
+    wxT("&user local data")
 };
 
 enum
@@ -178,22 +178,22 @@ void DirCtrlWidgetsPage::CreateContent()
                     0, wxALL | wxALIGN_RIGHT , 5 );
 
     wxSizer *sizerUseFlags =
-        new wxStaticBoxSizer(wxVERTICAL, this, _T("&Flags"));
-    m_chkDirOnly = CreateCheckBoxAndAddToSizer(sizerUseFlags, _T("wxDIRCTRL_DIR_ONLY"));
-    m_chk3D      = CreateCheckBoxAndAddToSizer(sizerUseFlags, _T("wxDIRCTRL_3D_INTERNAL"));
-    m_chkFirst   = CreateCheckBoxAndAddToSizer(sizerUseFlags, _T("wxDIRCTRL_SELECT_FIRST"));
-    m_chkFilters = CreateCheckBoxAndAddToSizer(sizerUseFlags, _T("wxDIRCTRL_SHOW_FILTERS"));
-    m_chkLabels  = CreateCheckBoxAndAddToSizer(sizerUseFlags, _T("wxDIRCTRL_EDIT_LABELS"));
+        new wxStaticBoxSizer(wxVERTICAL, this, wxT("&Flags"));
+    m_chkDirOnly = CreateCheckBoxAndAddToSizer(sizerUseFlags, wxT("wxDIRCTRL_DIR_ONLY"));
+    m_chk3D      = CreateCheckBoxAndAddToSizer(sizerUseFlags, wxT("wxDIRCTRL_3D_INTERNAL"));
+    m_chkFirst   = CreateCheckBoxAndAddToSizer(sizerUseFlags, wxT("wxDIRCTRL_SELECT_FIRST"));
+    m_chkFilters = CreateCheckBoxAndAddToSizer(sizerUseFlags, wxT("wxDIRCTRL_SHOW_FILTERS"));
+    m_chkLabels  = CreateCheckBoxAndAddToSizer(sizerUseFlags, wxT("wxDIRCTRL_EDIT_LABELS"));
     sizerLeft->Add(sizerUseFlags, wxSizerFlags().Expand().Border());
 
-    wxButton *btn = new wxButton(this, DirCtrlPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, DirCtrlPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // keep consistency between enum and labels of radiobox
     wxCOMPILE_TIME_ASSERT( stdPathMax == WXSIZEOF(stdPaths), EnumForRadioBoxMismatch);
 
     // middle pane
-    m_radioStdPath = new wxRadioBox(this, wxID_ANY, _T("Standard path"),
+    m_radioStdPath = new wxRadioBox(this, wxID_ANY, wxT("Standard path"),
                                     wxDefaultPosition, wxDefaultSize,
                                     WXSIZEOF(stdPaths), stdPaths, 1);
 
@@ -276,7 +276,7 @@ void DirCtrlWidgetsPage::OnRadioBox(wxCo
 {
     wxString path;
 
-    wxTheApp->SetAppName(_T("widgets"));
+    wxTheApp->SetAppName(wxT("widgets"));
     wxStandardPathsBase& stdp = wxStandardPaths::Get();
 
     switch ( m_radioStdPath->GetSelection() )
@@ -327,7 +327,7 @@ void DirCtrlWidgetsPage::OnRadioBox(wxCo
     m_dirCtrl->SetPath(path);
     if(!m_dirCtrl->GetPath().IsSameAs(path))
     {
-        wxLogMessage(_T("Selected standard path and path from control do not match!"));
+        wxLogMessage(wxT("Selected standard path and path from control do not match!"));
         m_radioStdPath->SetSelection(stdPathUnknown);
     }
 }
--- samples/widgets/bmpcombobox.cpp-orig	2009-06-18 18:30:13.012425000 -0500
+++ samples/widgets/bmpcombobox.cpp	2009-06-18 18:30:22.726091000 -0500
@@ -226,7 +226,7 @@ END_EVENT_TABLE()
 
 
 
-IMPLEMENT_WIDGETS_PAGE(BitmapComboBoxWidgetsPage, _T("BitmapCombobox"),
+IMPLEMENT_WIDGETS_PAGE(BitmapComboBoxWidgetsPage, wxT("BitmapCombobox"),
                        GENERIC_CTRLS | WITH_ITEMS_CTRLS | COMBO_CTRLS
                        );
 
@@ -278,24 +278,24 @@ void BitmapComboBoxWidgetsPage::CreateCo
     wxSizer *sizerLeft = new wxBoxSizer(wxVERTICAL);
 
     // left pane - style box
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerStyle = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkSort = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Sort items"));
-    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerStyle, _T("&Read only"));
+    m_chkSort = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("&Sort items"));
+    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerStyle, wxT("&Read only"));
 
-    wxButton *btn = new wxButton(this, BitmapComboBoxPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, BitmapComboBoxPage_Reset, wxT("&Reset"));
     sizerStyle->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 3);
 
     sizerLeft->Add(sizerStyle, 0, wxGROW | wxALIGN_CENTRE_HORIZONTAL);
 
     // left pane - other options box
-    box = new wxStaticBox(this, wxID_ANY, _T("Demo options"));
+    box = new wxStaticBox(this, wxID_ANY, wxT("Demo options"));
 
     wxSizer *sizerOptions = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    sizerRow = CreateSizerWithSmallTextAndLabel(_T("Control &height:"),
+    sizerRow = CreateSizerWithSmallTextAndLabel(wxT("Control &height:"),
                                                 BitmapComboBoxPage_ChangeHeight,
                                                 &m_textChangeHeight);
     m_textChangeHeight->SetSize(20, wxDefaultCoord);
@@ -305,39 +305,39 @@ void BitmapComboBoxWidgetsPage::CreateCo
 
     // middle pane
     wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
-        _T("&Change wxBitmapComboBox contents"));
+        wxT("&Change wxBitmapComboBox contents"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
 #if wxUSE_IMAGE
-    btn = new wxButton(this, BitmapComboBoxPage_AddWidgetIcons, _T("Add &widget icons"));
+    btn = new wxButton(this, BitmapComboBoxPage_AddWidgetIcons, wxT("Add &widget icons"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BitmapComboBoxPage_LoadFromFile, _T("Insert image from &file"));
+    btn = new wxButton(this, BitmapComboBoxPage_LoadFromFile, wxT("Insert image from &file"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BitmapComboBoxPage_SetFromFile, _T("&Set image from file"));
+    btn = new wxButton(this, BitmapComboBoxPage_SetFromFile, wxT("&Set image from file"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 #endif
 
-    btn = new wxButton(this, BitmapComboBoxPage_AddSeveralWithImages, _T("A&ppend a few strings with images"));
+    btn = new wxButton(this, BitmapComboBoxPage_AddSeveralWithImages, wxT("A&ppend a few strings with images"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BitmapComboBoxPage_AddSeveral, _T("Append a &few strings"));
+    btn = new wxButton(this, BitmapComboBoxPage_AddSeveral, wxT("Append a &few strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BitmapComboBoxPage_AddMany, _T("Append &many strings"));
+    btn = new wxButton(this, BitmapComboBoxPage_AddMany, wxT("Append &many strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(BitmapComboBoxPage_Delete,
-                                            _T("&Delete this item"),
+                                            wxT("&Delete this item"),
                                             BitmapComboBoxPage_DeleteText,
                                             &m_textDelete);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BitmapComboBoxPage_DeleteSel, _T("Delete &selection"));
+    btn = new wxButton(this, BitmapComboBoxPage_DeleteSel, wxT("Delete &selection"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BitmapComboBoxPage_Clear, _T("&Clear"));
+    btn = new wxButton(this, BitmapComboBoxPage_Clear, wxT("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
 #if wxUSE_IMAGE
@@ -456,7 +456,7 @@ void BitmapComboBoxWidgetsPage::OnButton
 #ifndef __WXGTK__
         m_combobox->SetString(sel, m_textChange->GetValue());
 #else
-        wxLogMessage(_T("Not implemented in wxGTK"));
+        wxLogMessage(wxT("Not implemented in wxGTK"));
 #endif
     }
 }
@@ -495,7 +495,7 @@ void BitmapComboBoxWidgetsPage::OnButton
     if ( !m_textInsert->IsModified() )
     {
         // update the default string
-        m_textInsert->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textInsert->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     int sel = m_combobox->GetSelection();
@@ -534,15 +534,15 @@ void BitmapComboBoxWidgetsPage::OnButton
     // "many" means 1000 here
     for ( unsigned int n = 0; n < 1000; n++ )
     {
-        m_combobox->Append(wxString::Format(_T("item #%u"), n));
+        m_combobox->Append(wxString::Format(wxT("item #%u"), n));
     }
 }
 
 void BitmapComboBoxWidgetsPage::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
 {
-    m_combobox->Append(_T("First"));
-    m_combobox->Append(_T("another one"));
-    m_combobox->Append(_T("and the last (very very very very very very very very very very long) one"));
+    m_combobox->Append(wxT("First"));
+    m_combobox->Append(wxT("another one"));
+    m_combobox->Append(wxT("and the last (very very very very very very very very very very long) one"));
 }
 
 void BitmapComboBoxWidgetsPage::OnButtonAddSeveralWithImages(wxCommandEvent& WXUNUSED(event))
@@ -736,22 +736,22 @@ void BitmapComboBoxWidgetsPage::OnComboT
     wxString s = event.GetString();
 
     wxASSERT_MSG( s == m_combobox->GetValue(),
-                  _T("event and combobox values should be the same") );
+                  wxT("event and combobox values should be the same") );
 
     if (event.GetEventType() == wxEVT_COMMAND_TEXT_ENTER)
-        wxLogMessage(_T("BitmapCombobox enter pressed (now '%s')"), s.c_str());
+        wxLogMessage(wxT("BitmapCombobox enter pressed (now '%s')"), s.c_str());
     else
-        wxLogMessage(_T("BitmapCombobox text changed (now '%s')"), s.c_str());
+        wxLogMessage(wxT("BitmapCombobox text changed (now '%s')"), s.c_str());
 }
 
 void BitmapComboBoxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
     long sel = event.GetInt();
-    m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
+    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
 
-    wxLogMessage(_T("BitmapCombobox item %ld selected"), sel);
+    wxLogMessage(wxT("BitmapCombobox item %ld selected"), sel);
 
-    wxLogMessage(_T("BitmapCombobox GetValue(): %s"), m_combobox->GetValue().c_str() );
+    wxLogMessage(wxT("BitmapCombobox GetValue(): %s"), m_combobox->GetValue().c_str() );
 }
 
 void BitmapComboBoxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
--- samples/widgets/toggle.cpp-orig	2009-06-18 18:31:06.997697000 -0500
+++ samples/widgets/toggle.cpp	2009-06-18 18:31:16.084171000 -0500
@@ -132,14 +132,14 @@ void ToggleWidgetsPage::CreateContent()
 //    wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Operations"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Operations"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxSizer *sizerRow = CreateSizerWithTextAndButton(TogglePage_ChangeLabel,
-                                                     _T("Change label"),
+                                                     wxT("Change label"),
                                                      wxID_ANY,
                                                      &m_textLabel);
-    m_textLabel->SetValue(_T("&Toggle me!"));
+    m_textLabel->SetValue(wxT("&Toggle me!"));
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
--- samples/widgets/notebook.cpp-orig	2009-06-18 18:30:29.732617000 -0500
+++ samples/widgets/notebook.cpp	2009-06-18 18:30:42.561522000 -0500
@@ -211,20 +211,20 @@ void BookWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     // must be in sync with Orient enum
     wxArrayString orientations;
-    orientations.Add(_T("&top"));
-    orientations.Add(_T("&bottom"));
-    orientations.Add(_T("&left"));
-    orientations.Add(_T("&right"));
+    orientations.Add(wxT("&top"));
+    orientations.Add(wxT("&bottom"));
+    orientations.Add(wxT("&left"));
+    orientations.Add(wxT("&right"));
 
     wxASSERT_MSG( orientations.GetCount() == Orient_Max,
-                  _T("forgot to update something") );
+                  wxT("forgot to update something") );
 
-    m_chkImages = new wxCheckBox(this, wxID_ANY, _T("Show &images"));
-    m_radioOrient = new wxRadioBox(this, wxID_ANY, _T("&Tab orientation"),
+    m_chkImages = new wxCheckBox(this, wxID_ANY, wxT("Show &images"));
+    m_radioOrient = new wxRadioBox(this, wxID_ANY, wxT("&Tab orientation"),
                                    wxDefaultPosition, wxDefaultSize,
                                    orientations, 1, wxRA_SPECIFY_COLS);
 
@@ -234,48 +234,48 @@ void BookWidgetsPage::CreateContent()
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
     sizerLeft->Add(m_radioOrient, 0, wxALL, 5);
 
-    wxButton *btn = new wxButton(this, BookPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, BookPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Contents"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Contents"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxTextCtrl *text;
-    wxSizer *sizerRow = CreateSizerWithTextAndLabel(_T("Number of pages: "),
+    wxSizer *sizerRow = CreateSizerWithTextAndLabel(wxT("Number of pages: "),
                                                     BookPage_NumPagesText,
                                                     &text);
     text->SetEditable(false);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Current selection: "),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Current selection: "),
                                            BookPage_CurSelectText,
                                            &text);
     text->SetEditable(false);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(BookPage_SelectPage,
-                                            _T("&Select page"),
+                                            wxT("&Select page"),
                                             BookPage_SelectText,
                                             &m_textSelect);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BookPage_AddPage, _T("&Add page"));
+    btn = new wxButton(this, BookPage_AddPage, wxT("&Add page"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(BookPage_InsertPage,
-                                            _T("&Insert page at"),
+                                            wxT("&Insert page at"),
                                             BookPage_InsertText,
                                             &m_textInsert);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(BookPage_RemovePage,
-                                            _T("&Remove page"),
+                                            wxT("&Remove page"),
                                             BookPage_RemoveText,
                                             &m_textRemove);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, BookPage_DeleteAll, _T("&Delete All"));
+    btn = new wxButton(this, BookPage_DeleteAll, wxT("&Delete All"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     // right pane
@@ -359,7 +359,7 @@ void BookWidgetsPage::RecreateBook()
     switch ( m_radioOrient->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unknown orientation") );
+            wxFAIL_MSG( wxT("unknown orientation") );
             // fall through
 
         case Orient_Top:
@@ -450,7 +450,7 @@ int BookWidgetsPage::GetIconIndex() cons
 
 wxWindow *BookWidgetsPage::CreateNewPage()
 {
-    return new wxTextCtrl(m_book, wxID_ANY, _T("I'm a book page"));
+    return new wxTextCtrl(m_book, wxID_ANY, wxT("I'm a book page"));
 }
 
 // ----------------------------------------------------------------------------
@@ -472,30 +472,30 @@ void BookWidgetsPage::OnButtonDeleteAll(
 void BookWidgetsPage::OnButtonSelectPage(wxCommandEvent& WXUNUSED(event))
 {
     int pos = GetTextValue(m_textSelect);
-    wxCHECK_RET( IsValidValue(pos), _T("button should be disabled") );
+    wxCHECK_RET( IsValidValue(pos), wxT("button should be disabled") );
 
     m_book->SetSelection(pos);
 }
 
 void BookWidgetsPage::OnButtonAddPage(wxCommandEvent& WXUNUSED(event))
 {
-    m_book->AddPage(CreateNewPage(), _T("Added page"), false,
+    m_book->AddPage(CreateNewPage(), wxT("Added page"), false,
                     GetIconIndex());
 }
 
 void BookWidgetsPage::OnButtonInsertPage(wxCommandEvent& WXUNUSED(event))
 {
     int pos = GetTextValue(m_textInsert);
-    wxCHECK_RET( IsValidValue(pos), _T("button should be disabled") );
+    wxCHECK_RET( IsValidValue(pos), wxT("button should be disabled") );
 
-    m_book->InsertPage(pos, CreateNewPage(), _T("Inserted page"), false,
+    m_book->InsertPage(pos, CreateNewPage(), wxT("Inserted page"), false,
                        GetIconIndex());
 }
 
 void BookWidgetsPage::OnButtonRemovePage(wxCommandEvent& WXUNUSED(event))
 {
     int pos = GetTextValue(m_textRemove);
-    wxCHECK_RET( IsValidValue(pos), _T("button should be disabled") );
+    wxCHECK_RET( IsValidValue(pos), wxT("button should be disabled") );
 
     m_book->DeletePage(pos);
 }
@@ -525,13 +525,13 @@ void BookWidgetsPage::OnUpdateUIResetBut
 void BookWidgetsPage::OnUpdateUINumPagesText(wxUpdateUIEvent& event)
 {
     if(m_book)
-        event.SetText( wxString::Format(_T("%u"), unsigned(m_book->GetPageCount())) );
+        event.SetText( wxString::Format(wxT("%u"), unsigned(m_book->GetPageCount())) );
 }
 
 void BookWidgetsPage::OnUpdateUICurSelectText(wxUpdateUIEvent& event)
 {
     if(m_book)
-        event.SetText( wxString::Format(_T("%d"), m_book->GetSelection()) );
+        event.SetText( wxString::Format(wxT("%d"), m_book->GetSelection()) );
 }
 
 void BookWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
@@ -594,13 +594,13 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(NotebookWidgetsPage, _T("Notebook"),
+IMPLEMENT_WIDGETS_PAGE(NotebookWidgetsPage, wxT("Notebook"),
                        FAMILY_CTRLS | BOOK_CTRLS
                        );
 
 void NotebookWidgetsPage::OnPageChanging(wxNotebookEvent& event)
 {
-    wxLogMessage(_T("Notebook page changing from %d to %d (currently %d)."),
+    wxLogMessage(wxT("Notebook page changing from %d to %d (currently %d)."),
                  event.GetOldSelection(),
                  event.GetSelection(),
                  m_book->GetSelection());
@@ -610,7 +610,7 @@ void NotebookWidgetsPage::OnPageChanging
 
 void NotebookWidgetsPage::OnPageChanged(wxNotebookEvent& event)
 {
-    wxLogMessage(_T("Notebook page changed from %d to %d (currently %d)."),
+    wxLogMessage(wxT("Notebook page changed from %d to %d (currently %d)."),
                  event.GetOldSelection(),
                  event.GetSelection(),
                  m_book->GetSelection());
@@ -667,13 +667,13 @@ BEGIN_EVENT_TABLE(ListbookWidgetsPage, B
     EVT_LISTBOOK_PAGE_CHANGED(wxID_ANY, ListbookWidgetsPage::OnPageChanged)
 END_EVENT_TABLE()
 
-IMPLEMENT_WIDGETS_PAGE(ListbookWidgetsPage, _T("Listbook"),
+IMPLEMENT_WIDGETS_PAGE(ListbookWidgetsPage, wxT("Listbook"),
                        GENERIC_CTRLS | BOOK_CTRLS
                        );
 
 void ListbookWidgetsPage::OnPageChanging(wxListbookEvent& event)
 {
-    wxLogMessage(_T("Listbook page changing from %d to %d (currently %d)."),
+    wxLogMessage(wxT("Listbook page changing from %d to %d (currently %d)."),
                  event.GetOldSelection(),
                  event.GetSelection(),
                  m_book->GetSelection());
@@ -683,7 +683,7 @@ void ListbookWidgetsPage::OnPageChanging
 
 void ListbookWidgetsPage::OnPageChanged(wxListbookEvent& event)
 {
-    wxLogMessage(_T("Listbook page changed from %d to %d (currently %d)."),
+    wxLogMessage(wxT("Listbook page changed from %d to %d (currently %d)."),
                  event.GetOldSelection(),
                  event.GetSelection(),
                  m_book->GetSelection());
@@ -740,13 +740,13 @@ BEGIN_EVENT_TABLE(ChoicebookWidgetsPage,
     EVT_CHOICEBOOK_PAGE_CHANGED(wxID_ANY, ChoicebookWidgetsPage::OnPageChanged)
 END_EVENT_TABLE()
 
-IMPLEMENT_WIDGETS_PAGE(ChoicebookWidgetsPage, _T("Choicebook"),
+IMPLEMENT_WIDGETS_PAGE(ChoicebookWidgetsPage, wxT("Choicebook"),
                        GENERIC_CTRLS | BOOK_CTRLS
                        );
 
 void ChoicebookWidgetsPage::OnPageChanging(wxChoicebookEvent& event)
 {
-    wxLogMessage(_T("Choicebook page changing from %d to %d (currently %d)."),
+    wxLogMessage(wxT("Choicebook page changing from %d to %d (currently %d)."),
                  event.GetOldSelection(),
                  event.GetSelection(),
                  m_book->GetSelection());
@@ -756,7 +756,7 @@ void ChoicebookWidgetsPage::OnPageChangi
 
 void ChoicebookWidgetsPage::OnPageChanged(wxChoicebookEvent& event)
 {
-    wxLogMessage(_T("Choicebook page changed from %d to %d (currently %d)."),
+    wxLogMessage(wxT("Choicebook page changed from %d to %d (currently %d)."),
                  event.GetOldSelection(),
                  event.GetSelection(),
                  m_book->GetSelection());
--- samples/widgets/dirpicker.cpp-orig	2009-06-18 18:30:47.848052000 -0500
+++ samples/widgets/dirpicker.cpp	2009-06-18 18:31:01.317928000 -0500
@@ -130,7 +130,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS GENERIC_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(DirPickerWidgetsPage, _T("DirPicker"),
+IMPLEMENT_WIDGETS_PAGE(DirPickerWidgetsPage, wxT("DirPicker"),
                        PICKER_CTRLS | FAMILY_CTRLS);
 
 DirPickerWidgetsPage::DirPickerWidgetsPage(WidgetsBookCtrl *book,
@@ -144,13 +144,13 @@ void DirPickerWidgetsPage::CreateContent
     // left pane
     wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
 
-    wxStaticBoxSizer *dirbox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&DirPicker style"));
-    m_chkDirTextCtrl = CreateCheckBoxAndAddToSizer(dirbox, _T("With textctrl"), false);
-    m_chkDirMustExist = CreateCheckBoxAndAddToSizer(dirbox, _T("Dir must exist"), false);
-    m_chkDirChangeDir = CreateCheckBoxAndAddToSizer(dirbox, _T("Change working dir"), false);
+    wxStaticBoxSizer *dirbox = new wxStaticBoxSizer(wxVERTICAL, this, wxT("&DirPicker style"));
+    m_chkDirTextCtrl = CreateCheckBoxAndAddToSizer(dirbox, wxT("With textctrl"), false);
+    m_chkDirMustExist = CreateCheckBoxAndAddToSizer(dirbox, wxT("Dir must exist"), false);
+    m_chkDirChangeDir = CreateCheckBoxAndAddToSizer(dirbox, wxT("Change working dir"), false);
     boxleft->Add(dirbox, 0, wxALL|wxGROW, 5);
 
-    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+    boxleft->Add(new wxButton(this, PickerPage_Reset, wxT("&Reset")),
                  0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     Reset();    // set checkboxes state
--- samples/widgets/listbox.cpp-orig	2009-06-18 18:31:21.264542000 -0500
+++ samples/widgets/listbox.cpp	2009-06-18 18:31:28.309378000 -0500
@@ -208,7 +208,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(ListboxWidgetsPage, _T("Listbox"),
+IMPLEMENT_WIDGETS_PAGE(ListboxWidgetsPage, wxT("Listbox"),
                        FAMILY_CTRLS | WITH_ITEMS_CTRLS
                        );
 
@@ -242,17 +242,17 @@ void ListboxWidgetsPage::CreateContent()
 
     // left pane
     wxStaticBox *box = new wxStaticBox(this, wxID_ANY,
-        _T("&Set listbox parameters"));
+        wxT("&Set listbox parameters"));
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
     static const wxString modes[] =
     {
-        _T("single"),
-        _T("extended"),
-        _T("multiple"),
+        wxT("single"),
+        wxT("extended"),
+        wxT("multiple"),
     };
 
-    m_radioSelMode = new wxRadioBox(this, wxID_ANY, _T("Selection &mode:"),
+    m_radioSelMode = new wxRadioBox(this, wxID_ANY, wxT("Selection &mode:"),
                                     wxDefaultPosition, wxDefaultSize,
                                     WXSIZEOF(modes), modes,
                                     1, wxRA_SPECIFY_COLS);
@@ -260,59 +260,59 @@ void ListboxWidgetsPage::CreateContent()
     m_chkVScroll = CreateCheckBoxAndAddToSizer
                    (
                     sizerLeft,
-                    _T("Always show &vertical scrollbar")
+                    wxT("Always show &vertical scrollbar")
                    );
     m_chkHScroll = CreateCheckBoxAndAddToSizer
                    (
                     sizerLeft,
-                    _T("Show &horizontal scrollbar")
+                    wxT("Show &horizontal scrollbar")
                    );
-    m_chkCheck = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Check list box"));
-    m_chkSort = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Sort items"));
-    m_chkOwnerDraw = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Owner drawn"));
+    m_chkCheck = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Check list box"));
+    m_chkSort = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Sort items"));
+    m_chkOwnerDraw = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Owner drawn"));
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
     sizerLeft->Add(m_radioSelMode, 0, wxGROW | wxALL, 5);
 
-    wxButton *btn = new wxButton(this, ListboxPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, ListboxPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
     wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
-        _T("&Change listbox contents"));
+        wxT("&Change listbox contents"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxSizer *sizerRow = new wxBoxSizer(wxHORIZONTAL);
-    btn = new wxButton(this, ListboxPage_Add, _T("&Add this string"));
-    m_textAdd = new wxTextCtrl(this, ListboxPage_AddText, _T("test item 0"));
+    btn = new wxButton(this, ListboxPage_Add, wxT("&Add this string"));
+    m_textAdd = new wxTextCtrl(this, ListboxPage_AddText, wxT("test item 0"));
     sizerRow->Add(btn, 0, wxRIGHT, 5);
     sizerRow->Add(m_textAdd, 1, wxLEFT, 5);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ListboxPage_AddSeveral, _T("&Insert a few strings"));
+    btn = new wxButton(this, ListboxPage_AddSeveral, wxT("&Insert a few strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ListboxPage_AddMany, _T("Add &many strings"));
+    btn = new wxButton(this, ListboxPage_AddMany, wxT("Add &many strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     sizerRow = new wxBoxSizer(wxHORIZONTAL);
-    btn = new wxButton(this, ListboxPage_Change, _T("C&hange current"));
+    btn = new wxButton(this, ListboxPage_Change, wxT("C&hange current"));
     m_textChange = new wxTextCtrl(this, ListboxPage_ChangeText, wxEmptyString);
     sizerRow->Add(btn, 0, wxRIGHT, 5);
     sizerRow->Add(m_textChange, 1, wxLEFT, 5);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = new wxBoxSizer(wxHORIZONTAL);
-    btn = new wxButton(this, ListboxPage_Delete, _T("&Delete this item"));
+    btn = new wxButton(this, ListboxPage_Delete, wxT("&Delete this item"));
     m_textDelete = new wxTextCtrl(this, ListboxPage_DeleteText, wxEmptyString);
     sizerRow->Add(btn, 0, wxRIGHT, 5);
     sizerRow->Add(m_textDelete, 1, wxLEFT, 5);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ListboxPage_DeleteSel, _T("Delete &selection"));
+    btn = new wxButton(this, ListboxPage_DeleteSel, wxT("Delete &selection"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ListboxPage_Clear, _T("&Clear"));
+    btn = new wxButton(this, ListboxPage_Clear, wxT("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     // right pane
@@ -356,7 +356,7 @@ void ListboxWidgetsPage::CreateLbox()
     switch ( m_radioSelMode->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unexpected radio box selection") );
+            wxFAIL_MSG( wxT("unexpected radio box selection") );
 
         case LboxSel_Single:    flags |= wxLB_SINGLE; break;
         case LboxSel_Extended:  flags |= wxLB_EXTENDED; break;
@@ -464,7 +464,7 @@ void ListboxWidgetsPage::OnButtonAdd(wxC
     if ( !m_textAdd->IsModified() )
     {
         // update the default string
-        m_textAdd->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textAdd->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     m_lbox->Append(s);
@@ -475,16 +475,16 @@ void ListboxWidgetsPage::OnButtonAddMany
     // "many" means 1000 here
     for ( unsigned int n = 0; n < 1000; n++ )
     {
-        m_lbox->Append(wxString::Format(_T("item #%u"), n));
+        m_lbox->Append(wxString::Format(wxT("item #%u"), n));
     }
 }
 
 void ListboxWidgetsPage::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
 {
     wxArrayString items;
-    items.Add(_T("First"));
-    items.Add(_T("another one"));
-    items.Add(_T("and the last (very very very very very very very very very very long) one"));
+    items.Add(wxT("First"));
+    items.Add(wxT("another one"));
+    items.Add(wxT("and the last (very very very very very very very very very very long) one"));
     m_lbox->InsertItems(items, 0);
 }
 
@@ -523,22 +523,22 @@ void ListboxWidgetsPage::OnUpdateUIAddSe
 void ListboxWidgetsPage::OnListbox(wxCommandEvent& event)
 {
     long sel = event.GetSelection();
-    m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
+    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
 
     if (event.IsSelection())
-        wxLogMessage(_T("Listbox item %ld selected"), sel);
+        wxLogMessage(wxT("Listbox item %ld selected"), sel);
     else
-        wxLogMessage(_T("Listbox item %ld deselected"), sel);
+        wxLogMessage(wxT("Listbox item %ld deselected"), sel);
 }
 
 void ListboxWidgetsPage::OnListboxDClick(wxCommandEvent& event)
 {
-    wxLogMessage( _T("Listbox item %d double clicked"), event.GetInt() );
+    wxLogMessage( wxT("Listbox item %d double clicked"), event.GetInt() );
 }
 
 void ListboxWidgetsPage::OnCheckListbox(wxCommandEvent& event)
 {
-    wxLogMessage( _T("Listbox item %d toggled"), event.GetInt() );
+    wxLogMessage( wxT("Listbox item %d toggled"), event.GetInt() );
 }
 
 void ListboxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
--- samples/widgets/radiobox.cpp-orig	2009-06-18 18:31:33.634163000 -0500
+++ samples/widgets/radiobox.cpp	2009-06-18 18:31:40.561279000 -0500
@@ -182,7 +182,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(RadioWidgetsPage, _T("Radio"),
+IMPLEMENT_WIDGETS_PAGE(RadioWidgetsPage, wxT("Radio"),
                        FAMILY_CTRLS | WITH_ITEMS_CTRLS
                        );
 
@@ -209,20 +209,20 @@ void RadioWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Vertical layout"));
+    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Vertical layout"));
 
     static const wxString layoutDir[] =
     {
-        _T("default"),
-        _T("left to right"),
-        _T("top to bottom")
+        wxT("default"),
+        wxT("left to right"),
+        wxT("top to bottom")
     };
 
-    m_radioDir = new wxRadioBox(this, wxID_ANY, _T("Numbering:"),
+    m_radioDir = new wxRadioBox(this, wxID_ANY, wxT("Numbering:"),
                                 wxDefaultPosition, wxDefaultSize,
                                 WXSIZEOF(layoutDir), layoutDir,
                                 1, wxRA_SPECIFY_COLS);
@@ -234,57 +234,57 @@ void RadioWidgetsPage::CreateContent()
 #endif // wxRA_LEFTTORIGHT
 
     wxSizer *sizerRow;
-    sizerRow = CreateSizerWithTextAndLabel(_T("&Major dimension:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("&Major dimension:"),
                                            wxID_ANY,
                                            &m_textMajorDim);
     sizerLeft->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("&Number of buttons:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("&Number of buttons:"),
                                            wxID_ANY,
                                            &m_textNumBtns);
     sizerLeft->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
     wxButton *btn;
-    btn = new wxButton(this, RadioPage_Update, _T("&Update"));
+    btn = new wxButton(this, RadioPage_Update, wxT("&Update"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 5);
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
-    btn = new wxButton(this, RadioPage_Reset, _T("&Reset"));
+    btn = new wxButton(this, RadioPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Change parameters"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Change parameters"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Current selection:"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Current selection:"),
                                            wxID_ANY,
                                            &m_textCurSel);
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
     sizerRow = CreateSizerWithTextAndButton(RadioPage_Selection,
-                                            _T("&Change selection:"),
+                                            wxT("&Change selection:"),
                                            wxID_ANY,
                                            &m_textSel);
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
     sizerRow = CreateSizerWithTextAndButton(RadioPage_Label,
-                                            _T("&Label for box:"),
+                                            wxT("&Label for box:"),
                                             wxID_ANY,
                                             &m_textLabel);
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
     sizerRow = CreateSizerWithTextAndButton(RadioPage_LabelBtn,
-                                            _T("&Label for buttons:"),
+                                            wxT("&Label for buttons:"),
                                             wxID_ANY,
                                             &m_textLabelBtns);
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
     m_chkEnableItem = CreateCheckBoxAndAddToSizer(sizerMiddle,
-                                                  _T("Disable &2nd item"),
+                                                  wxT("Disable &2nd item"),
                                                   RadioPage_EnableItem);
     m_chkShowItem = CreateCheckBoxAndAddToSizer(sizerMiddle,
-                                                _T("Hide 2nd &item"),
+                                                wxT("Hide 2nd &item"),
                                                 RadioPage_ShowItem);
 
     // right pane
@@ -310,10 +310,10 @@ void RadioWidgetsPage::CreateContent()
 
 void RadioWidgetsPage::Reset()
 {
-    m_textMajorDim->SetValue(wxString::Format(_T("%u"), DEFAULT_MAJOR_DIM));
-    m_textNumBtns->SetValue(wxString::Format(_T("%u"), DEFAULT_NUM_ENTRIES));
-    m_textLabel->SetValue(_T("I'm a radiobox"));
-    m_textLabelBtns->SetValue(_T("item"));
+    m_textMajorDim->SetValue(wxString::Format(wxT("%u"), DEFAULT_MAJOR_DIM));
+    m_textNumBtns->SetValue(wxString::Format(wxT("%u"), DEFAULT_NUM_ENTRIES));
+    m_textLabel->SetValue(wxT("I'm a radiobox"));
+    m_textLabelBtns->SetValue(wxT("item"));
 
     m_chkVert->SetValue(false);
     m_chkEnableItem->SetValue(true);
@@ -340,7 +340,7 @@ void RadioWidgetsPage::CreateRadio()
     unsigned long count;
     if ( !m_textNumBtns->GetValue().ToULong(&count) )
     {
-        wxLogWarning(_T("Should have a valid number for number of items."));
+        wxLogWarning(wxT("Should have a valid number for number of items."));
 
         // fall back to default
         count = DEFAULT_NUM_ENTRIES;
@@ -349,7 +349,7 @@ void RadioWidgetsPage::CreateRadio()
     unsigned long majorDim;
     if ( !m_textMajorDim->GetValue().ToULong(&majorDim) )
     {
-        wxLogWarning(_T("Should have a valid major dimension number."));
+        wxLogWarning(wxT("Should have a valid major dimension number."));
 
         // fall back to default
         majorDim = DEFAULT_MAJOR_DIM;
@@ -360,7 +360,7 @@ void RadioWidgetsPage::CreateRadio()
     wxString labelBtn = m_textLabelBtns->GetValue();
     for ( size_t n = 0; n < count; n++ )
     {
-        items[n] = wxString::Format(_T("%s %lu"),
+        items[n] = wxString::Format(wxT("%s %lu"),
                                     labelBtn.c_str(), (unsigned long)n + 1);
     }
 
@@ -373,7 +373,7 @@ void RadioWidgetsPage::CreateRadio()
     switch ( m_radioDir->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unexpected wxRadioBox layout direction") );
+            wxFAIL_MSG( wxT("unexpected wxRadioBox layout direction") );
             // fall through
 
         case RadioDir_Default:
@@ -432,12 +432,12 @@ void RadioWidgetsPage::OnRadioBox(wxComm
     int event_sel = event.GetSelection();
     wxUnusedVar(event_sel);
 
-    wxLogMessage(_T("Radiobox selection changed, now %d"), sel);
+    wxLogMessage(wxT("Radiobox selection changed, now %d"), sel);
 
     wxASSERT_MSG( sel == event_sel,
-                  _T("selection should be the same in event and radiobox") );
+                  wxT("selection should be the same in event and radiobox") );
 
-    m_textCurSel->SetValue(wxString::Format(_T("%d"), sel));
+    m_textCurSel->SetValue(wxString::Format(wxT("%d"), sel));
 }
 
 void RadioWidgetsPage::OnButtonRecreate(wxCommandEvent& WXUNUSED(event))
@@ -456,7 +456,7 @@ void RadioWidgetsPage::OnButtonSelection
     if ( !m_textSel->GetValue().ToULong(&sel) ||
             (sel >= (size_t)m_radio->GetCount()) )
     {
-        wxLogWarning(_T("Invalid number specified as new selection."));
+        wxLogWarning(wxT("Invalid number specified as new selection."));
     }
     else
     {
@@ -514,14 +514,14 @@ void RadioWidgetsPage::OnUpdateUIReset(w
 
 void RadioWidgetsPage::OnUpdateUIEnableItem(wxUpdateUIEvent& event)
 {
-    event.SetText(m_radio->IsItemEnabled(TEST_BUTTON) ? _T("Disable &2nd item")
-                                                      : _T("Enable &2nd item"));
+    event.SetText(m_radio->IsItemEnabled(TEST_BUTTON) ? wxT("Disable &2nd item")
+                                                      : wxT("Enable &2nd item"));
 }
 
 void RadioWidgetsPage::OnUpdateUIShowItem(wxUpdateUIEvent& event)
 {
-    event.SetText(m_radio->IsItemShown(TEST_BUTTON) ? _T("Hide 2nd &item")
-                                                    : _T("Show 2nd &item"));
+    event.SetText(m_radio->IsItemShown(TEST_BUTTON) ? wxT("Hide 2nd &item")
+                                                    : wxT("Show 2nd &item"));
 }
 
 #endif // wxUSE_RADIOBOX
--- samples/widgets/slider.cpp-orig	2009-06-18 18:31:44.697460000 -0500
+++ samples/widgets/slider.cpp	2009-06-18 18:31:49.824052000 -0500
@@ -226,7 +226,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(SliderWidgetsPage, _T("Slider"), FAMILY_CTRLS );
+IMPLEMENT_WIDGETS_PAGE(SliderWidgetsPage, wxT("Slider"), FAMILY_CTRLS );
 
 SliderWidgetsPage::SliderWidgetsPage(WidgetsBookCtrl *book,
                                      wxImageList *imaglist)
@@ -252,41 +252,41 @@ void SliderWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkInverse = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Inverse"));
-    m_chkTicks = CreateCheckBoxAndAddToSizer(sizerLeft, _T("Show &ticks"));
-    m_chkLabels = CreateCheckBoxAndAddToSizer(sizerLeft, _T("Show &labels"));
+    m_chkInverse = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Inverse"));
+    m_chkTicks = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("Show &ticks"));
+    m_chkLabels = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("Show &labels"));
     static const wxString sides[] =
     {
-        _T("top"),
-        _T("bottom"),
-        _T("left"),
-        _T("right"),
+        wxT("top"),
+        wxT("bottom"),
+        wxT("left"),
+        wxT("right"),
     };
-    m_radioSides = new wxRadioBox(this, SliderPage_RadioSides, _T("&Ticks/Labels"),
+    m_radioSides = new wxRadioBox(this, SliderPage_RadioSides, wxT("&Ticks/Labels"),
                                  wxDefaultPosition, wxDefaultSize,
                                  WXSIZEOF(sides), sides,
                                  1, wxRA_SPECIFY_COLS);
     sizerLeft->Add(m_radioSides, 0, wxGROW | wxALL, 5);
     m_chkBothSides = CreateCheckBoxAndAddToSizer
-                     (sizerLeft, _T("&Both sides"), SliderPage_BothSides);
+                     (sizerLeft, wxT("&Both sides"), SliderPage_BothSides);
 #if wxUSE_TOOLTIPS
-    m_chkBothSides->SetToolTip( _T("\"Both sides\" is only supported \nin Win95 and Universal") );
+    m_chkBothSides->SetToolTip( wxT("\"Both sides\" is only supported \nin Win95 and Universal") );
 #endif // wxUSE_TOOLTIPS
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
-    wxButton *btn = new wxButton(this, SliderPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, SliderPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Change slider value"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Change slider value"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxTextCtrl *text;
-    wxSizer *sizerRow = CreateSizerWithTextAndLabel(_T("Current value"),
+    wxSizer *sizerRow = CreateSizerWithTextAndLabel(wxT("Current value"),
                                                     SliderPage_CurValueText,
                                                     &text);
     text->SetEditable(false);
@@ -294,49 +294,49 @@ void SliderWidgetsPage::CreateContent()
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetValue,
-                                            _T("Set &value"),
+                                            wxT("Set &value"),
                                             SliderPage_ValueText,
                                             &m_textValue);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetMinAndMax,
-                                            _T("&Min and max"),
+                                            wxT("&Min and max"),
                                             SliderPage_MinText,
                                             &m_textMin);
 
     m_textMax = new wxTextCtrl(this, SliderPage_MaxText, wxEmptyString);
     sizerRow->Add(m_textMax, 1, wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
 
-    m_textMin->SetValue( wxString::Format(_T("%d"), m_min) );
-    m_textMax->SetValue( wxString::Format(_T("%d"), m_max) );
+    m_textMin->SetValue( wxString::Format(wxT("%d"), m_min) );
+    m_textMax->SetValue( wxString::Format(wxT("%d"), m_max) );
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetLineSize,
-                                            _T("Li&ne size"),
+                                            wxT("Li&ne size"),
                                             SliderPage_LineSizeText,
                                             &m_textLineSize);
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetPageSize,
-                                            _T("P&age size"),
+                                            wxT("P&age size"),
                                             SliderPage_PageSizeText,
                                             &m_textPageSize);
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetTickFreq,
-                                            _T("Tick &frequency"),
+                                            wxT("Tick &frequency"),
                                             SliderPage_TickFreqText,
                                             &m_textTickFreq);
 
-    m_textTickFreq->SetValue(_T("10"));
+    m_textTickFreq->SetValue(wxT("10"));
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SliderPage_SetThumbLen,
-                                            _T("Thumb &length"),
+                                            wxT("Thumb &length"),
                                             SliderPage_ThumbLenText,
                                             &m_textThumbLen);
 
@@ -350,8 +350,8 @@ void SliderWidgetsPage::CreateContent()
     Reset();
     CreateSlider();
 
-    m_textLineSize->SetValue(wxString::Format(_T("%d"), m_slider->GetLineSize()));
-    m_textPageSize->SetValue(wxString::Format(_T("%d"), m_slider->GetPageSize()));
+    m_textLineSize->SetValue(wxString::Format(wxT("%d"), m_slider->GetLineSize()));
+    m_textPageSize->SetValue(wxString::Format(wxT("%d"), m_slider->GetPageSize()));
 
     // the 3 panes panes compose the window
     sizerTop->Add(sizerLeft, 0, wxGROW | (wxALL & ~wxLEFT), 10);
@@ -414,7 +414,7 @@ void SliderWidgetsPage::CreateSlider()
             break;
 
         default:
-            wxFAIL_MSG(_T("unexpected radiobox selection"));
+            wxFAIL_MSG(wxT("unexpected radiobox selection"));
             // fall through
     }
 
@@ -473,7 +473,7 @@ void SliderWidgetsPage::DoSetLineSize()
     long lineSize;
     if ( !m_textLineSize->GetValue().ToLong(&lineSize) )
     {
-        wxLogWarning(_T("Invalid slider line size"));
+        wxLogWarning(wxT("Invalid slider line size"));
 
         return;
     }
@@ -482,7 +482,7 @@ void SliderWidgetsPage::DoSetLineSize()
 
     if ( m_slider->GetLineSize() != lineSize )
     {
-        wxLogWarning(_T("Invalid line size in slider."));
+        wxLogWarning(wxT("Invalid line size in slider."));
     }
 }
 
@@ -491,7 +491,7 @@ void SliderWidgetsPage::DoSetPageSize()
     long pageSize;
     if ( !m_textPageSize->GetValue().ToLong(&pageSize) )
     {
-        wxLogWarning(_T("Invalid slider page size"));
+        wxLogWarning(wxT("Invalid slider page size"));
 
         return;
     }
@@ -500,7 +500,7 @@ void SliderWidgetsPage::DoSetPageSize()
 
     if ( m_slider->GetPageSize() != pageSize )
     {
-        wxLogWarning(_T("Invalid page size in slider."));
+        wxLogWarning(wxT("Invalid page size in slider."));
     }
 }
 
@@ -509,7 +509,7 @@ void SliderWidgetsPage::DoSetTickFreq()
     long freq;
     if ( !m_textTickFreq->GetValue().ToLong(&freq) )
     {
-        wxLogWarning(_T("Invalid slider tick frequency"));
+        wxLogWarning(wxT("Invalid slider tick frequency"));
 
         return;
     }
@@ -522,7 +522,7 @@ void SliderWidgetsPage::DoSetThumbLen()
     long len;
     if ( !m_textThumbLen->GetValue().ToLong(&len) )
     {
-        wxLogWarning(_T("Invalid slider thumb length"));
+        wxLogWarning(wxT("Invalid slider thumb length"));
 
         return;
     }
@@ -569,7 +569,7 @@ void SliderWidgetsPage::OnButtonSetMinAn
          !m_textMax->GetValue().ToLong(&maxNew) ||
          minNew >= maxNew )
     {
-        wxLogWarning(_T("Invalid min/max values for the slider."));
+        wxLogWarning(wxT("Invalid min/max values for the slider."));
 
         return;
     }
@@ -582,7 +582,7 @@ void SliderWidgetsPage::OnButtonSetMinAn
     if ( m_slider->GetMin() != m_min ||
          m_slider->GetMax() != m_max )
     {
-        wxLogWarning(_T("Invalid range in slider."));
+        wxLogWarning(wxT("Invalid range in slider."));
     }
 }
 
@@ -591,7 +591,7 @@ void SliderWidgetsPage::OnButtonSetValue
     long val;
     if ( !m_textValue->GetValue().ToLong(&val) || !IsValidValue(val) )
     {
-        wxLogWarning(_T("Invalid slider value."));
+        wxLogWarning(wxT("Invalid slider value."));
 
         return;
     }
@@ -657,7 +657,7 @@ void SliderWidgetsPage::OnCheckOrRadioBo
 
 void SliderWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(_T("%d"), m_slider->GetValue()) );
+    event.SetText( wxString::Format(wxT("%d"), m_slider->GetValue()) );
 }
 
 void SliderWidgetsPage::OnUpdateUIRadioSides(wxUpdateUIEvent& event)
--- samples/widgets/textctrl.cpp-orig	2009-06-18 18:31:55.381499000 -0500
+++ samples/widgets/textctrl.cpp	2009-06-18 18:32:04.422706000 -0500
@@ -262,32 +262,32 @@ protected:
         switch ( HitTest(event.GetPosition(), &x, &y) )
         {
             default:
-                wxFAIL_MSG( _T("unexpected HitTest() result") );
+                wxFAIL_MSG( wxT("unexpected HitTest() result") );
                 // fall through
 
             case wxTE_HT_UNKNOWN:
                 x = y = -1;
-                where = _T("nowhere near");
+                where = wxT("nowhere near");
                 break;
 
             case wxTE_HT_BEFORE:
-                where = _T("before");
+                where = wxT("before");
                 break;
 
             case wxTE_HT_BELOW:
-                where = _T("below");
+                where = wxT("below");
                 break;
 
             case wxTE_HT_BEYOND:
-                where = _T("beyond");
+                where = wxT("beyond");
                 break;
 
             case wxTE_HT_ON_TEXT:
-                where = _T("at");
+                where = wxT("at");
                 break;
         }
 
-        wxLogMessage(_T("Mouse is %s (%ld, %ld)"), where.c_str(), x, y);
+        wxLogMessage(wxT("Mouse is %s (%ld, %ld)"), where.c_str(), x, y);
 
         event.Skip();
     }
@@ -343,7 +343,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(TextWidgetsPage, _T("Text"),
+IMPLEMENT_WIDGETS_PAGE(TextWidgetsPage, wxT("Text"),
                        FAMILY_CTRLS | EDITABLE_CTRLS
                        );
 
@@ -388,12 +388,12 @@ void TextWidgetsPage::CreateContent()
     // left pane
     static const wxString modes[] =
     {
-        _T("single line"),
-        _T("multi line"),
+        wxT("single line"),
+        wxT("multi line"),
     };
 
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set textctrl parameters"));
-    m_radioTextLines = new wxRadioBox(this, wxID_ANY, _T("&Number of lines:"),
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set textctrl parameters"));
+    m_radioTextLines = new wxRadioBox(this, wxID_ANY, wxT("&Number of lines:"),
                                       wxDefaultPosition, wxDefaultSize,
                                       WXSIZEOF(modes), modes,
                                       1, wxRA_SPECIFY_COLS);
@@ -404,26 +404,26 @@ void TextWidgetsPage::CreateContent()
     sizerLeft->AddSpacer(5);
 
     m_chkPassword = CreateCheckBoxAndAddToSizer(
-                        sizerLeft, _T("&Password control"), TextPage_Password
+                        sizerLeft, wxT("&Password control"), TextPage_Password
                     );
     m_chkReadonly = CreateCheckBoxAndAddToSizer(
-                        sizerLeft, _T("&Read-only mode")
+                        sizerLeft, wxT("&Read-only mode")
                     );
     m_chkFilename = CreateCheckBoxAndAddToSizer(
-                        sizerLeft, _T("&Filename control")
+                        sizerLeft, wxT("&Filename control")
                     );
     m_chkFilename->Disable(); // not implemented yet
     sizerLeft->AddSpacer(5);
 
     static const wxString wrap[] =
     {
-        _T("no wrap"),
-        _T("word wrap"),
-        _T("char wrap"),
-        _T("best wrap"),
+        wxT("no wrap"),
+        wxT("word wrap"),
+        wxT("char wrap"),
+        wxT("best wrap"),
     };
 
-    m_radioWrap = new wxRadioBox(this, wxID_ANY, _T("&Wrap style:"),
+    m_radioWrap = new wxRadioBox(this, wxID_ANY, wxT("&Wrap style:"),
                                  wxDefaultPosition, wxDefaultSize,
                                  WXSIZEOF(wrap), wrap,
                                  1, wxRA_SPECIFY_COLS);
@@ -432,12 +432,12 @@ void TextWidgetsPage::CreateContent()
 #ifdef __WXMSW__
     static const wxString kinds[] =
     {
-        _T("plain edit"),
-        _T("rich edit"),
-        _T("rich edit 2.0"),
+        wxT("plain edit"),
+        wxT("rich edit"),
+        wxT("rich edit 2.0"),
     };
 
-    m_radioKind = new wxRadioBox(this, wxID_ANY, _T("Control &kind"),
+    m_radioKind = new wxRadioBox(this, wxID_ANY, wxT("Control &kind"),
                                  wxDefaultPosition, wxDefaultSize,
                                  WXSIZEOF(kinds), kinds,
                                  1, wxRA_SPECIFY_COLS);
@@ -446,33 +446,33 @@ void TextWidgetsPage::CreateContent()
     sizerLeft->Add(m_radioKind, 0, wxGROW | wxALL, 5);
 #endif // __WXMSW__
 
-    wxButton *btn = new wxButton(this, TextPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, TextPage_Reset, wxT("&Reset"));
     sizerLeft->Add(2, 2, 0, wxGROW | wxALL, 1); // spacer
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Change contents:"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Change contents:"));
     wxSizer *sizerMiddleUp = new wxStaticBoxSizer(box2, wxVERTICAL);
 
-    btn = new wxButton(this, TextPage_Set, _T("&Set text value"));
+    btn = new wxButton(this, TextPage_Set, wxT("&Set text value"));
     sizerMiddleUp->Add(btn, 0, wxALL | wxGROW, 1);
 
-    btn = new wxButton(this, TextPage_Add, _T("&Append text"));
+    btn = new wxButton(this, TextPage_Add, wxT("&Append text"));
     sizerMiddleUp->Add(btn, 0, wxALL | wxGROW, 1);
 
-    btn = new wxButton(this, TextPage_Insert, _T("&Insert text"));
+    btn = new wxButton(this, TextPage_Insert, wxT("&Insert text"));
     sizerMiddleUp->Add(btn, 0, wxALL | wxGROW, 1);
 
-    btn = new wxButton(this, TextPage_Load, _T("&Load file"));
+    btn = new wxButton(this, TextPage_Load, wxT("&Load file"));
     sizerMiddleUp->Add(btn, 0, wxALL | wxGROW, 1);
 
-    btn = new wxButton(this, TextPage_Clear, _T("&Clear"));
+    btn = new wxButton(this, TextPage_Clear, wxT("&Clear"));
     sizerMiddleUp->Add(btn, 0, wxALL | wxGROW, 1);
 
-    btn = new wxButton(this, TextPage_StreamRedirector, _T("St&ream redirection"));
+    btn = new wxButton(this, TextPage_StreamRedirector, wxT("St&ream redirection"));
     sizerMiddleUp->Add(btn, 0, wxALL | wxGROW, 1);
 
-    wxStaticBox *box4 = new wxStaticBox(this, wxID_ANY, _T("&Info:"));
+    wxStaticBox *box4 = new wxStaticBox(this, wxID_ANY, wxT("&Info:"));
     wxSizer *sizerMiddleDown = new wxStaticBoxSizer(box4, wxVERTICAL);
 
     m_textPosCur = CreateInfoText();
@@ -482,19 +482,19 @@ void TextWidgetsPage::CreateContent()
     wxSizer *sizerRow = new wxBoxSizer(wxHORIZONTAL);
     sizerRow->Add(CreateTextWithLabelSizer
                   (
-                    _T("Current pos:"),
+                    wxT("Current pos:"),
                     m_textPosCur
                   ),
                   0, wxRIGHT, 5);
     sizerRow->Add(CreateTextWithLabelSizer
                   (
-                    _T("Col:"),
+                    wxT("Col:"),
                     m_textColCur
                   ),
                   0, wxLEFT | wxRIGHT, 5);
     sizerRow->Add(CreateTextWithLabelSizer
                   (
-                    _T("Row:"),
+                    wxT("Row:"),
                     m_textRowCur
                   ),
                   0, wxLEFT, 5);
@@ -506,9 +506,9 @@ void TextWidgetsPage::CreateContent()
                      (
                         CreateTextWithLabelSizer
                         (
-                          _T("Number of lines:"),
+                          wxT("Number of lines:"),
                           m_textLineLast,
-                          _T("Last position:"),
+                          wxT("Last position:"),
                           m_textPosLast
                         ),
                         0, wxALL, 5
@@ -520,9 +520,9 @@ void TextWidgetsPage::CreateContent()
                      (
                         CreateTextWithLabelSizer
                         (
-                          _T("Selection: from"),
+                          wxT("Selection: from"),
                           m_textSelFrom,
-                          _T("to"),
+                          wxT("to"),
                           m_textSelTo
                         ),
                         0, wxALL, 5
@@ -535,7 +535,7 @@ void TextWidgetsPage::CreateContent()
                      (
                         CreateTextWithLabelSizer
                         (
-                          _T("Range 10..20:"),
+                          wxT("Range 10..20:"),
                           m_textRange
                         ),
                         0, wxALL, 5
@@ -546,7 +546,7 @@ void TextWidgetsPage::CreateContent()
     sizerMiddle->Add(sizerMiddleDown, 1, wxGROW | wxTOP, 5);
 
     // right pane
-    wxStaticBox *box3 = new wxStaticBox(this, wxID_ANY, _T("&Text:"));
+    wxStaticBox *box3 = new wxStaticBox(this, wxID_ANY, wxT("&Text:"));
     m_sizerText = new wxStaticBoxSizer(box3, wxHORIZONTAL);
     Reset();
     CreateText();
@@ -571,7 +571,7 @@ wxTextCtrl *TextWidgetsPage::CreateInfoT
     if ( !s_maxWidth )
     {
         // calc it once only
-        GetTextExtent(_T("9999999"), &s_maxWidth, NULL);
+        GetTextExtent(wxT("9999999"), &s_maxWidth, NULL);
     }
 
     wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, wxEmptyString,
@@ -625,7 +625,7 @@ void TextWidgetsPage::CreateText()
     switch ( m_radioTextLines->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unexpected lines radio box selection") );
+            wxFAIL_MSG( wxT("unexpected lines radio box selection") );
 
         case TextLines_Single:
             break;
@@ -644,7 +644,7 @@ void TextWidgetsPage::CreateText()
     switch ( m_radioWrap->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unexpected wrap style radio box selection") );
+            wxFAIL_MSG( wxT("unexpected wrap style radio box selection") );
 
         case WrapStyle_None:
             flags |= wxTE_DONTWRAP; // same as wxHSCROLL
@@ -668,7 +668,7 @@ void TextWidgetsPage::CreateText()
     switch ( m_radioKind->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unexpected kind radio box selection") );
+            wxFAIL_MSG( wxT("unexpected kind radio box selection") );
 
         case TextKind_Plain:
             break;
@@ -693,7 +693,7 @@ void TextWidgetsPage::CreateText()
     }
     else
     {
-        valueOld = _T("Hello, Universe!");
+        valueOld = wxT("Hello, Universe!");
     }
 
     m_text = new WidgetsTextCtrl(this, TextPage_Textctrl, valueOld, flags);
@@ -753,7 +753,7 @@ void TextWidgetsPage::OnIdle(wxIdleEvent
     if ( m_textLineLast )
     {
         m_textLineLast->SetValue(
-                wxString::Format(_T("%d"), m_text->GetNumberOfLines()) );
+                wxString::Format(wxT("%d"), m_text->GetNumberOfLines()) );
     }
 
     if ( m_textSelFrom && m_textSelTo )
@@ -798,8 +798,8 @@ void TextWidgetsPage::OnButtonReset(wxCo
 void TextWidgetsPage::OnButtonSet(wxCommandEvent& WXUNUSED(event))
 {
     m_text->SetValue(m_text->GetWindowStyle() & wxTE_MULTILINE
-                        ? _T("Here,\nthere and\neverywhere")
-                        : _T("Yellow submarine"));
+                        ? wxT("Here,\nthere and\neverywhere")
+                        : wxT("Yellow submarine"));
 
     m_text->SetFocus();
 }
@@ -808,18 +808,18 @@ void TextWidgetsPage::OnButtonAdd(wxComm
 {
     if ( m_text->GetWindowStyle() & wxTE_MULTILINE )
     {
-        m_text->AppendText(_T("We all live in a\n"));
+        m_text->AppendText(wxT("We all live in a\n"));
     }
 
-    m_text->AppendText(_T("Yellow submarine"));
+    m_text->AppendText(wxT("Yellow submarine"));
 }
 
 void TextWidgetsPage::OnButtonInsert(wxCommandEvent& WXUNUSED(event))
 {
-    m_text->WriteText(_T("Is there anybody going to listen to my story"));
+    m_text->WriteText(wxT("Is there anybody going to listen to my story"));
     if ( m_text->GetWindowStyle() & wxTE_MULTILINE )
     {
-        m_text->WriteText(_T("\nall about the girl who came to stay"));
+        m_text->WriteText(wxT("\nall about the girl who came to stay"));
     }
 }
 
@@ -833,14 +833,14 @@ void TextWidgetsPage::OnButtonLoad(wxCom
 {
     // search for the file in several dirs where it's likely to be
     wxPathList pathlist;
-    pathlist.Add(_T("."));
-    pathlist.Add(_T(".."));
-    pathlist.Add(_T("../../../samples/widgets"));
+    pathlist.Add(wxT("."));
+    pathlist.Add(wxT(".."));
+    pathlist.Add(wxT("../../../samples/widgets"));
 
-    wxString filename = pathlist.FindValidPath(_T("textctrl.cpp"));
+    wxString filename = pathlist.FindValidPath(wxT("textctrl.cpp"));
     if ( !filename )
     {
-        wxLogError(_T("File textctrl.cpp not found."));
+        wxLogError(wxT("File textctrl.cpp not found."));
     }
     else // load it
     {
@@ -848,12 +848,12 @@ void TextWidgetsPage::OnButtonLoad(wxCom
         if ( !m_text->LoadFile(filename) )
         {
             // this is not supposed to happen ...
-            wxLogError(_T("Error loading file."));
+            wxLogError(wxT("Error loading file."));
         }
         else
         {
             long elapsed = sw.Time();
-            wxLogMessage(_T("Loaded file '%s' in %lu.%us"),
+            wxLogMessage(wxT("Loaded file '%s' in %lu.%us"),
                          filename.c_str(), elapsed / 1000,
                          (unsigned int) elapsed % 1000);
         }
@@ -900,12 +900,12 @@ void TextWidgetsPage::OnText(wxCommandEv
         return;
     }
 
-    wxLogMessage(_T("Text ctrl value changed"));
+    wxLogMessage(wxT("Text ctrl value changed"));
 }
 
 void TextWidgetsPage::OnTextEnter(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Text entered: '%s'"), event.GetString().c_str());
+    wxLogMessage(wxT("Text entered: '%s'"), event.GetString().c_str());
     event.Skip();
 }
 
@@ -918,9 +918,9 @@ void TextWidgetsPage::OnStreamRedirector
 {
 #if wxHAS_TEXT_WINDOW_STREAM
     wxStreamToTextRedirector redirect(m_text);
-    wxString str( _T("Outputed to cout, appears in wxTextCtrl!") );
+    wxString str( wxT("Outputed to cout, appears in wxTextCtrl!") );
     wxSTD cout << str << wxSTD endl;
 #else
-    wxMessageBox(_T("This wxWidgets build does not support wxStreamToTextRedirector"));
+    wxMessageBox(wxT("This wxWidgets build does not support wxStreamToTextRedirector"));
 #endif
 }
--- samples/widgets/widgets.cpp-orig	2009-06-18 18:32:09.423434000 -0500
+++ samples/widgets/widgets.cpp	2009-06-18 18:32:14.954658000 -0500
@@ -305,27 +305,27 @@ bool WidgetsApp::OnInit()
     // this sample side by side and it is useful to see which one is which
     wxString title;
 #if defined(__WXUNIVERSAL__)
-    title = _T("wxUniv/");
+    title = wxT("wxUniv/");
 #endif
 
 #if defined(__WXMSW__)
-    title += _T("wxMSW");
+    title += wxT("wxMSW");
 #elif defined(__WXGTK__)
-    title += _T("wxGTK");
+    title += wxT("wxGTK");
 #elif defined(__WXMAC__)
-    title += _T("wxMAC");
+    title += wxT("wxMAC");
 #elif defined(__WXMOTIF__)
-    title += _T("wxMOTIF");
+    title += wxT("wxMOTIF");
 #else
-    title += _T("wxWidgets");
+    title += wxT("wxWidgets");
 #endif
 
-    wxFrame *frame = new WidgetsFrame(title + _T(" widgets demo"));
+    wxFrame *frame = new WidgetsFrame(title + wxT(" widgets demo"));
     frame->Show();
 
-    //wxLog::AddTraceMask(_T("listbox"));
-    //wxLog::AddTraceMask(_T("scrollbar"));
-    //wxLog::AddTraceMask(_T("focus"));
+    //wxLog::AddTraceMask(wxT("listbox"));
+    //wxLog::AddTraceMask(wxT("scrollbar"));
+    //wxLog::AddTraceMask(wxT("focus"));
 
     return true;
 }
@@ -352,33 +352,33 @@ WidgetsFrame::WidgetsFrame(const wxStrin
     wxMenuBar *mbar = new wxMenuBar;
     wxMenu *menuWidget = new wxMenu;
 #if wxUSE_TOOLTIPS
-    menuWidget->Append(Widgets_SetTooltip, _T("Set &tooltip...\tCtrl-T"));
+    menuWidget->Append(Widgets_SetTooltip, wxT("Set &tooltip...\tCtrl-T"));
     menuWidget->AppendSeparator();
 #endif // wxUSE_TOOLTIPS
-    menuWidget->Append(Widgets_SetFgColour, _T("Set &foreground...\tCtrl-F"));
-    menuWidget->Append(Widgets_SetBgColour, _T("Set &background...\tCtrl-B"));
-    menuWidget->Append(Widgets_SetFont,     _T("Set f&ont...\tCtrl-O"));
-    menuWidget->AppendCheckItem(Widgets_Enable,  _T("&Enable/disable\tCtrl-E"));
+    menuWidget->Append(Widgets_SetFgColour, wxT("Set &foreground...\tCtrl-F"));
+    menuWidget->Append(Widgets_SetBgColour, wxT("Set &background...\tCtrl-B"));
+    menuWidget->Append(Widgets_SetFont,     wxT("Set f&ont...\tCtrl-O"));
+    menuWidget->AppendCheckItem(Widgets_Enable,  wxT("&Enable/disable\tCtrl-E"));
 
     wxMenu *menuBorders = new wxMenu;
-    menuBorders->AppendRadioItem(Widgets_BorderDefault, _T("De&fault\tCtrl-Shift-9"));
-    menuBorders->AppendRadioItem(Widgets_BorderNone,   _T("&None\tCtrl-Shift-0"));
-    menuBorders->AppendRadioItem(Widgets_BorderSimple, _T("&Simple\tCtrl-Shift-1"));
-    menuBorders->AppendRadioItem(Widgets_BorderDouble, _T("&Double\tCtrl-Shift-2"));
-    menuBorders->AppendRadioItem(Widgets_BorderStatic, _T("Stati&c\tCtrl-Shift-3"));
-    menuBorders->AppendRadioItem(Widgets_BorderRaised, _T("&Raised\tCtrl-Shift-4"));
-    menuBorders->AppendRadioItem(Widgets_BorderSunken, _T("S&unken\tCtrl-Shift-5"));
-    menuWidget->AppendSubMenu(menuBorders, _T("Set &border"));
+    menuBorders->AppendRadioItem(Widgets_BorderDefault, wxT("De&fault\tCtrl-Shift-9"));
+    menuBorders->AppendRadioItem(Widgets_BorderNone,   wxT("&None\tCtrl-Shift-0"));
+    menuBorders->AppendRadioItem(Widgets_BorderSimple, wxT("&Simple\tCtrl-Shift-1"));
+    menuBorders->AppendRadioItem(Widgets_BorderDouble, wxT("&Double\tCtrl-Shift-2"));
+    menuBorders->AppendRadioItem(Widgets_BorderStatic, wxT("Stati&c\tCtrl-Shift-3"));
+    menuBorders->AppendRadioItem(Widgets_BorderRaised, wxT("&Raised\tCtrl-Shift-4"));
+    menuBorders->AppendRadioItem(Widgets_BorderSunken, wxT("S&unken\tCtrl-Shift-5"));
+    menuWidget->AppendSubMenu(menuBorders, wxT("Set &border"));
 
     menuWidget->AppendSeparator();
     menuWidget->AppendCheckItem(Widgets_GlobalBusyCursor,
-                                _T("Toggle &global busy cursor\tCtrl-Shift-U"));
+                                wxT("Toggle &global busy cursor\tCtrl-Shift-U"));
     menuWidget->AppendCheckItem(Widgets_BusyCursor,
-                                _T("Toggle b&usy cursor\tCtrl-U"));
+                                wxT("Toggle b&usy cursor\tCtrl-U"));
 
     menuWidget->AppendSeparator();
-    menuWidget->Append(wxID_EXIT, _T("&Quit\tCtrl-Q"));
-    mbar->Append(menuWidget, _T("&Widget"));
+    menuWidget->Append(wxID_EXIT, wxT("&Quit\tCtrl-Q"));
+    mbar->Append(menuWidget, wxT("&Widget"));
     SetMenuBar(mbar);
 
     mbar->Check(Widgets_Enable, true);
@@ -409,7 +409,7 @@ WidgetsFrame::WidgetsFrame(const wxStrin
     // the lower one only has the log listbox and a button to clear it
 #if USE_LOG
     wxSizer *sizerDown = new wxStaticBoxSizer(
-        new wxStaticBox( m_panel, wxID_ANY, _T("&Log window") ),
+        new wxStaticBox( m_panel, wxID_ANY, wxT("&Log window") ),
         wxVERTICAL);
 
     m_lboxLog = new wxListBox(m_panel, wxID_ANY);
@@ -422,11 +422,11 @@ WidgetsFrame::WidgetsFrame(const wxStrin
     wxBoxSizer *sizerBtns = new wxBoxSizer(wxHORIZONTAL);
     wxButton *btn;
 #if USE_LOG
-    btn = new wxButton(m_panel, Widgets_ClearLog, _T("Clear &log"));
+    btn = new wxButton(m_panel, Widgets_ClearLog, wxT("Clear &log"));
     sizerBtns->Add(btn);
     sizerBtns->Add(10, 0); // spacer
 #endif // USE_LOG
-    btn = new wxButton(m_panel, Widgets_Quit, _T("E&xit"));
+    btn = new wxButton(m_panel, Widgets_Quit, wxT("E&xit"));
     sizerBtns->Add(btn);
     sizerDown->Add(sizerBtns, 0, wxALL | wxALIGN_RIGHT, 5);
 
@@ -535,7 +535,7 @@ void WidgetsFrame::InitBook()
         }
     }
 
-    GetMenuBar()->Append(menuPages, _T("&Page"));
+    GetMenuBar()->Append(menuPages, wxT("&Page"));
 
 #if USE_ICONS_IN_BOOK
     m_book->AssignImageList(imageList);
@@ -598,7 +598,7 @@ WidgetsPage *WidgetsFrame::CurrentPage()
 
 #if !USE_TREEBOOK
     WidgetsBookCtrl *subBook = wxStaticCast(page, WidgetsBookCtrl);
-    wxCHECK_MSG( subBook, NULL, _T("no WidgetsBookCtrl?") );
+    wxCHECK_MSG( subBook, NULL, wxT("no WidgetsBookCtrl?") );
 
     page = subBook->GetCurrentPage();
 #endif // !USE_TREEBOOK
@@ -694,13 +694,13 @@ void WidgetsFrame::OnGoToPage(wxCommandE
 
 void WidgetsFrame::OnSetTooltip(wxCommandEvent& WXUNUSED(event))
 {
-    static wxString s_tip = _T("This is a tooltip");
+    static wxString s_tip = wxT("This is a tooltip");
 
     wxTextEntryDialog dialog
                       (
                         this,
-                        _T("Tooltip text (may use \\n, leave empty to remove): "),
-                        _T("Widgets sample"),
+                        wxT("Tooltip text (may use \\n, leave empty to remove): "),
+                        wxT("Widgets sample"),
                         s_tip
                       );
 
@@ -708,7 +708,7 @@ void WidgetsFrame::OnSetTooltip(wxComman
         return;
 
     s_tip = dialog.GetValue();
-    s_tip.Replace(_T("\\n"), _T("\n"));
+    s_tip.Replace(wxT("\\n"), wxT("\n"));
 
     WidgetsPage *page = CurrentPage();
 
@@ -746,7 +746,7 @@ void WidgetsFrame::OnSetFgCol(wxCommandE
         ctrl2->Refresh();
     }
 #else
-    wxLogMessage(_T("Colour selection dialog not available in current build."));
+    wxLogMessage(wxT("Colour selection dialog not available in current build."));
 #endif
 }
 
@@ -774,7 +774,7 @@ void WidgetsFrame::OnSetBgCol(wxCommandE
         ctrl2->Refresh();
     }
 #else
-    wxLogMessage(_T("Colour selection dialog not available in current build."));
+    wxLogMessage(wxT("Colour selection dialog not available in current build."));
 #endif
 }
 
@@ -802,7 +802,7 @@ void WidgetsFrame::OnSetFont(wxCommandEv
         ctrl2->Refresh();
     }
 #else
-    wxLogMessage(_T("Font selection dialog not available in current build."));
+    wxLogMessage(wxT("Font selection dialog not available in current build."));
 #endif
 }
 
@@ -826,7 +826,7 @@ void WidgetsFrame::OnSetBorder(wxCommand
         case Widgets_BorderDouble: border = wxBORDER_DOUBLE; break;
 
         default:
-            wxFAIL_MSG( _T("unknown border style") );
+            wxFAIL_MSG( wxT("unknown border style") );
             // fall through
 
         case Widgets_BorderDefault: border = wxBORDER_DEFAULT; break;
--- samples/widgets/button.cpp-orig	2009-06-18 18:32:20.022434000 -0500
+++ samples/widgets/button.cpp	2009-06-18 18:32:27.125813000 -0500
@@ -163,7 +163,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(ButtonWidgetsPage, _T("Button"), FAMILY_CTRLS );
+IMPLEMENT_WIDGETS_PAGE(ButtonWidgetsPage, wxT("Button"), FAMILY_CTRLS );
 
 ButtonWidgetsPage::ButtonWidgetsPage(WidgetsBookCtrl *book,
                                      wxImageList *imaglist)
@@ -193,14 +193,14 @@ void ButtonWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkBitmap = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Bitmap button"));
-    m_chkImage = CreateCheckBoxAndAddToSizer(sizerLeft, _T("With &image"));
-    m_chkFit = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Fit exactly"));
-    m_chkDefault = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Default"));
+    m_chkBitmap = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Bitmap button"));
+    m_chkImage = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("With &image"));
+    m_chkFit = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Fit exactly"));
+    m_chkDefault = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Default"));
 
 #ifndef __WXUNIVERSAL__
     // only wxUniv currently supports buttons with images
@@ -210,11 +210,11 @@ void ButtonWidgetsPage::CreateContent()
     sizerLeft->AddSpacer(5);
 
     wxSizer *sizerUseLabels =
-        new wxStaticBoxSizer(wxVERTICAL, this, _T("&Use the following labels?"));
-    m_chkUseSelected = CreateCheckBoxAndAddToSizer(sizerUseLabels, _T("&Pushed"));
-    m_chkUseFocused = CreateCheckBoxAndAddToSizer(sizerUseLabels, _T("&Focused"));
-    m_chkUseHover = CreateCheckBoxAndAddToSizer(sizerUseLabels, _T("&Hover"));
-    m_chkUseDisabled = CreateCheckBoxAndAddToSizer(sizerUseLabels, _T("&Disabled"));
+        new wxStaticBoxSizer(wxVERTICAL, this, wxT("&Use the following labels?"));
+    m_chkUseSelected = CreateCheckBoxAndAddToSizer(sizerUseLabels, wxT("&Pushed"));
+    m_chkUseFocused = CreateCheckBoxAndAddToSizer(sizerUseLabels, wxT("&Focused"));
+    m_chkUseHover = CreateCheckBoxAndAddToSizer(sizerUseLabels, wxT("&Hover"));
+    m_chkUseDisabled = CreateCheckBoxAndAddToSizer(sizerUseLabels, wxT("&Disabled"));
     sizerLeft->Add(sizerUseLabels, wxSizerFlags().Expand().Border());
 
     sizerLeft->AddSpacer(15);
@@ -222,22 +222,22 @@ void ButtonWidgetsPage::CreateContent()
     // should be in sync with enums Button[HV]Align!
     static const wxString halign[] =
     {
-        _T("left"),
-        _T("centre"),
-        _T("right"),
+        wxT("left"),
+        wxT("centre"),
+        wxT("right"),
     };
 
     static const wxString valign[] =
     {
-        _T("top"),
-        _T("centre"),
-        _T("bottom"),
+        wxT("top"),
+        wxT("centre"),
+        wxT("bottom"),
     };
 
-    m_radioHAlign = new wxRadioBox(this, wxID_ANY, _T("&Horz alignment"),
+    m_radioHAlign = new wxRadioBox(this, wxID_ANY, wxT("&Horz alignment"),
                                    wxDefaultPosition, wxDefaultSize,
                                    WXSIZEOF(halign), halign);
-    m_radioVAlign = new wxRadioBox(this, wxID_ANY, _T("&Vert alignment"),
+    m_radioVAlign = new wxRadioBox(this, wxID_ANY, wxT("&Vert alignment"),
                                    wxDefaultPosition, wxDefaultSize,
                                    WXSIZEOF(valign), valign);
 
@@ -246,18 +246,18 @@ void ButtonWidgetsPage::CreateContent()
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
-    wxButton *btn = new wxButton(this, ButtonPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, ButtonPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Operations"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Operations"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxSizer *sizerRow = CreateSizerWithTextAndButton(ButtonPage_ChangeLabel,
-                                                     _T("Change label"),
+                                                     wxT("Change label"),
                                                      wxID_ANY,
                                                      &m_textLabel);
-    m_textLabel->SetValue(_T("&Press me!"));
+    m_textLabel->SetValue(wxT("&Press me!"));
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
@@ -328,7 +328,7 @@ void ButtonWidgetsPage::CreateButton()
             break;
 
         default:
-            wxFAIL_MSG(_T("unexpected radiobox selection"));
+            wxFAIL_MSG(wxT("unexpected radiobox selection"));
             // fall through
 
         case ButtonHAlign_Centre:
@@ -346,7 +346,7 @@ void ButtonWidgetsPage::CreateButton()
             break;
 
         default:
-            wxFAIL_MSG(_T("unexpected radiobox selection"));
+            wxFAIL_MSG(wxT("unexpected radiobox selection"));
             // fall through
 
         case ButtonVAlign_Centre:
@@ -362,15 +362,15 @@ void ButtonWidgetsPage::CreateButton()
     if ( isBitmapButton )
     {
         wxBitmapButton *bbtn = new wxBitmapButton(this, ButtonPage_Button,
-                                                  CreateBitmap(_T("normal")));
+                                                  CreateBitmap(wxT("normal")));
         if ( m_chkUseSelected->GetValue() )
-            bbtn->SetBitmapSelected(CreateBitmap(_T("pushed")));
+            bbtn->SetBitmapSelected(CreateBitmap(wxT("pushed")));
         if ( m_chkUseFocused->GetValue() )
-            bbtn->SetBitmapFocus(CreateBitmap(_T("focused")));
+            bbtn->SetBitmapFocus(CreateBitmap(wxT("focused")));
         if ( m_chkUseHover->GetValue() )
-            bbtn->SetBitmapHover(CreateBitmap(_T("hover")));
+            bbtn->SetBitmapHover(CreateBitmap(wxT("hover")));
         if ( m_chkUseDisabled->GetValue() )
-            bbtn->SetBitmapDisabled(CreateBitmap(_T("disabled")));
+            bbtn->SetBitmapDisabled(CreateBitmap(wxT("disabled")));
         m_button = bbtn;
     }
     else // normal button
@@ -439,7 +439,7 @@ void ButtonWidgetsPage::OnButtonChangeLa
 
 void ButtonWidgetsPage::OnButton(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Test button clicked."));
+    wxLogMessage(wxT("Test button clicked."));
 }
 
 // ----------------------------------------------------------------------------
@@ -454,8 +454,8 @@ wxBitmap ButtonWidgetsPage::CreateBitmap
     dc.SetBackground(wxBrush(*wxWHITE));
     dc.Clear();
     dc.SetTextForeground(*wxBLUE);
-    dc.DrawLabel(wxStripMenuCodes(m_textLabel->GetValue()) + _T("\n")
-                    _T("(") + label + _T(" state)"),
+    dc.DrawLabel(wxStripMenuCodes(m_textLabel->GetValue()) + wxT("\n")
+                    wxT("(") + label + wxT(" state)"),
                  wxArtProvider::GetBitmap(wxART_INFORMATION),
                  wxRect(10, 10, bmp.GetWidth() - 20, bmp.GetHeight() - 20),
                  wxALIGN_CENTRE);
--- samples/widgets/fontpicker.cpp-orig	2009-06-18 18:32:32.131151000 -0500
+++ samples/widgets/fontpicker.cpp	2009-06-18 18:32:40.048319000 -0500
@@ -130,7 +130,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS GENERIC_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(FontPickerWidgetsPage, _T("FontPicker"),
+IMPLEMENT_WIDGETS_PAGE(FontPickerWidgetsPage, wxT("FontPicker"),
                        PICKER_CTRLS | FAMILY_CTRLS);
 
 FontPickerWidgetsPage::FontPickerWidgetsPage(WidgetsBookCtrl *book,
@@ -144,13 +144,13 @@ void FontPickerWidgetsPage::CreateConten
     // left pane
     wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
 
-    wxStaticBoxSizer *fontbox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&FontPicker style"));
-    m_chkFontTextCtrl = CreateCheckBoxAndAddToSizer(fontbox, _T("With textctrl"));
-    m_chkFontDescAsLabel = CreateCheckBoxAndAddToSizer(fontbox, _T("Font desc as btn label"));
-    m_chkFontUseFontForLabel = CreateCheckBoxAndAddToSizer(fontbox, _T("Use font for label"), false);
+    wxStaticBoxSizer *fontbox = new wxStaticBoxSizer(wxVERTICAL, this, wxT("&FontPicker style"));
+    m_chkFontTextCtrl = CreateCheckBoxAndAddToSizer(fontbox, wxT("With textctrl"));
+    m_chkFontDescAsLabel = CreateCheckBoxAndAddToSizer(fontbox, wxT("Font desc as btn label"));
+    m_chkFontUseFontForLabel = CreateCheckBoxAndAddToSizer(fontbox, wxT("Use font for label"), false);
     boxleft->Add(fontbox, 0, wxALL|wxGROW, 5);
 
-    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+    boxleft->Add(new wxButton(this, PickerPage_Reset, wxT("&Reset")),
                  0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     Reset();    // set checkboxes state
--- samples/widgets/combobox.cpp-orig	2009-06-18 18:32:46.498747000 -0500
+++ samples/widgets/combobox.cpp	2009-06-18 18:32:53.488810000 -0500
@@ -202,7 +202,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(ComboboxWidgetsPage, _T("Combobox"),
+IMPLEMENT_WIDGETS_PAGE(ComboboxWidgetsPage, wxT("Combobox"),
                        FAMILY_CTRLS | WITH_ITEMS_CTRLS | COMBO_CTRLS
                        );
 
@@ -230,50 +230,50 @@ void ComboboxWidgetsPage::CreateContent(
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     // should be in sync with ComboKind_XXX values
     static const wxString kinds[] =
     {
-        _T("default"),
-        _T("simple"),
-        _T("drop down"),
+        wxT("default"),
+        wxT("simple"),
+        wxT("drop down"),
     };
 
-    m_radioKind = new wxRadioBox(this, wxID_ANY, _T("Combobox &kind:"),
+    m_radioKind = new wxRadioBox(this, wxID_ANY, wxT("Combobox &kind:"),
                                  wxDefaultPosition, wxDefaultSize,
                                  WXSIZEOF(kinds), kinds,
                                  1, wxRA_SPECIFY_COLS);
 
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkSort = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Sort items"));
-    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Read only"));
-    m_chkFilename = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&File name"));
+    m_chkSort = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Sort items"));
+    m_chkReadonly = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Read only"));
+    m_chkFilename = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&File name"));
     m_chkFilename->Disable(); // not implemented yet
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
     sizerLeft->Add(m_radioKind, 0, wxGROW | wxALL, 5);
 
-    wxButton *btn = new wxButton(this, ComboPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, ComboPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
     wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
-        _T("&Change combobox contents"));
+        wxT("&Change combobox contents"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxSizer *sizerRow;
 
     wxTextCtrl *text;
-    sizerRow = CreateSizerWithTextAndLabel(_T("Current selection"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Current selection"),
                                            ComboPage_CurText,
                                            &text);
     text->SetEditable(false);
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    sizerRow = CreateSizerWithTextAndLabel(_T("Insertion Point"),
+    sizerRow = CreateSizerWithTextAndLabel(wxT("Insertion Point"),
                                            ComboPage_InsertionPointText,
                                            &text);
     text->SetEditable(false);
@@ -281,39 +281,39 @@ void ComboboxWidgetsPage::CreateContent(
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ComboPage_Insert,
-                                            _T("&Insert this string"),
+                                            wxT("&Insert this string"),
                                             ComboPage_InsertText,
                                             &m_textInsert);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ComboPage_Add,
-                                            _T("&Add this string"),
+                                            wxT("&Add this string"),
                                             ComboPage_AddText,
                                             &m_textAdd);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ComboPage_AddSeveral, _T("&Append a few strings"));
+    btn = new wxButton(this, ComboPage_AddSeveral, wxT("&Append a few strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ComboPage_AddMany, _T("Append &many strings"));
+    btn = new wxButton(this, ComboPage_AddMany, wxT("Append &many strings"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ComboPage_Change,
-                                            _T("C&hange current"),
+                                            wxT("C&hange current"),
                                             ComboPage_ChangeText,
                                             &m_textChange);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(ComboPage_Delete,
-                                            _T("&Delete this item"),
+                                            wxT("&Delete this item"),
                                             ComboPage_DeleteText,
                                             &m_textDelete);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ComboPage_DeleteSel, _T("Delete &selection"));
+    btn = new wxButton(this, ComboPage_DeleteSel, wxT("Delete &selection"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, ComboPage_Clear, _T("&Clear"));
+    btn = new wxButton(this, ComboPage_Clear, wxT("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     // right pane
@@ -360,7 +360,7 @@ void ComboboxWidgetsPage::CreateCombo()
     switch ( m_radioKind->GetSelection() )
     {
         default:
-            wxFAIL_MSG( _T("unknown combo kind") );
+            wxFAIL_MSG( wxT("unknown combo kind") );
             // fall through
 
         case ComboKind_Default:
@@ -427,7 +427,7 @@ void ComboboxWidgetsPage::OnButtonChange
 #ifndef __WXGTK__
         m_combobox->SetString(sel, m_textChange->GetValue());
 #else
-        wxLogMessage(_T("Not implemented in wxGTK"));
+        wxLogMessage(wxT("Not implemented in wxGTK"));
 #endif
     }
 }
@@ -466,7 +466,7 @@ void ComboboxWidgetsPage::OnButtonInsert
     if ( !m_textInsert->IsModified() )
     {
         // update the default string
-        m_textInsert->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textInsert->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     if (m_combobox->GetSelection() >= 0)
@@ -481,7 +481,7 @@ void ComboboxWidgetsPage::OnButtonAdd(wx
     if ( !m_textAdd->IsModified() )
     {
         // update the default string
-        m_textAdd->SetValue(wxString::Format(_T("test item %u"), ++s_item));
+        m_textAdd->SetValue(wxString::Format(wxT("test item %u"), ++s_item));
     }
 
     m_combobox->Append(s);
@@ -492,27 +492,27 @@ void ComboboxWidgetsPage::OnButtonAddMan
     // "many" means 1000 here
     for ( unsigned int n = 0; n < 1000; n++ )
     {
-        m_combobox->Append(wxString::Format(_T("item #%u"), n));
+        m_combobox->Append(wxString::Format(wxT("item #%u"), n));
     }
 }
 
 void ComboboxWidgetsPage::OnButtonAddSeveral(wxCommandEvent& WXUNUSED(event))
 {
-    m_combobox->Append(_T("First"));
-    m_combobox->Append(_T("another one"));
-    m_combobox->Append(_T("and the last (very very very very very very very very very very long) one"));
+    m_combobox->Append(wxT("First"));
+    m_combobox->Append(wxT("another one"));
+    m_combobox->Append(wxT("and the last (very very very very very very very very very very long) one"));
 }
 
 void ComboboxWidgetsPage::OnUpdateUICurText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(_T("%d"), m_combobox->GetSelection()) );
+        event.SetText( wxString::Format(wxT("%d"), m_combobox->GetSelection()) );
 }
 
 void ComboboxWidgetsPage::OnUpdateUIInsertionPointText(wxUpdateUIEvent& event)
 {
     if (m_combobox)
-        event.SetText( wxString::Format(_T("%ld"), m_combobox->GetInsertionPoint()) );
+        event.SetText( wxString::Format(wxT("%ld"), m_combobox->GetInsertionPoint()) );
 }
 
 void ComboboxWidgetsPage::OnUpdateUIResetButton(wxUpdateUIEvent& event)
@@ -569,22 +569,22 @@ void ComboboxWidgetsPage::OnComboText(wx
     wxString s = event.GetString();
 
     wxASSERT_MSG( s == m_combobox->GetValue(),
-                  _T("event and combobox values should be the same") );
+                  wxT("event and combobox values should be the same") );
 
     if (event.GetEventType() == wxEVT_COMMAND_TEXT_ENTER)
-        wxLogMessage(_T("Combobox enter pressed (now '%s')"), s.c_str());
+        wxLogMessage(wxT("Combobox enter pressed (now '%s')"), s.c_str());
     else
-        wxLogMessage(_T("Combobox text changed (now '%s')"), s.c_str());
+        wxLogMessage(wxT("Combobox text changed (now '%s')"), s.c_str());
 }
 
 void ComboboxWidgetsPage::OnComboBox(wxCommandEvent& event)
 {
     long sel = event.GetInt();
-    m_textDelete->SetValue(wxString::Format(_T("%ld"), sel));
+    m_textDelete->SetValue(wxString::Format(wxT("%ld"), sel));
 
-    wxLogMessage(_T("Combobox item %ld selected"), sel);
+    wxLogMessage(wxT("Combobox item %ld selected"), sel);
 
-    wxLogMessage(_T("Combobox GetValue(): %s"), m_combobox->GetValue().c_str() );
+    wxLogMessage(wxT("Combobox GetValue(): %s"), m_combobox->GetValue().c_str() );
 }
 
 void ComboboxWidgetsPage::OnCheckOrRadioBox(wxCommandEvent& WXUNUSED(event))
--- samples/widgets/spinbtn.cpp-orig	2009-06-18 18:33:08.916276000 -0500
+++ samples/widgets/spinbtn.cpp	2009-06-18 18:33:15.450764000 -0500
@@ -175,7 +175,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(SpinBtnWidgetsPage, _T("Spin"),
+IMPLEMENT_WIDGETS_PAGE(SpinBtnWidgetsPage, wxT("Spin"),
                        FAMILY_CTRLS | EDITABLE_CTRLS
                        );
 
@@ -207,25 +207,25 @@ void SpinBtnWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Vertical"));
-    m_chkWrap = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Wrap"));
+    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Vertical"));
+    m_chkWrap = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Wrap"));
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
-    wxButton *btn = new wxButton(this, SpinBtnPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, SpinBtnPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
     wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
-        _T("&Change spinbtn value"));
+        wxT("&Change spinbtn value"));
 
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxTextCtrl *text;
-    wxSizer *sizerRow = CreateSizerWithTextAndLabel(_T("Current value"),
+    wxSizer *sizerRow = CreateSizerWithTextAndLabel(wxT("Current value"),
                                                     SpinBtnPage_CurValueText,
                                                     &text);
     text->SetEditable(false);
@@ -233,21 +233,21 @@ void SpinBtnWidgetsPage::CreateContent()
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SpinBtnPage_SetValue,
-                                            _T("Set &value"),
+                                            wxT("Set &value"),
                                             SpinBtnPage_ValueText,
                                             &m_textValue);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(SpinBtnPage_SetMinAndMax,
-                                            _T("&Min and max"),
+                                            wxT("&Min and max"),
                                             SpinBtnPage_MinText,
                                             &m_textMin);
 
     m_textMax = new wxTextCtrl(this, SpinBtnPage_MaxText, wxEmptyString);
     sizerRow->Add(m_textMax, 1, wxLEFT | wxALIGN_CENTRE_VERTICAL, 5);
 
-    m_textMin->SetValue( wxString::Format(_T("%d"), m_min) );
-    m_textMax->SetValue( wxString::Format(_T("%d"), m_max) );
+    m_textMin->SetValue( wxString::Format(wxT("%d"), m_min) );
+    m_textMax->SetValue( wxString::Format(wxT("%d"), m_max) );
 
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
@@ -320,7 +320,7 @@ void SpinBtnWidgetsPage::CreateSpin()
     m_spinbtn->SetRange(m_min, m_max);
 
     m_spinctrl = new wxSpinCtrl(this, SpinBtnPage_SpinCtrl,
-                                wxString::Format(_T("%d"), val),
+                                wxString::Format(wxT("%d"), val),
                                 wxDefaultPosition, wxDefaultSize,
                                 flags,
                                 m_min, m_max, val);
@@ -353,7 +353,7 @@ void SpinBtnWidgetsPage::OnButtonSetMinA
          !m_textMax->GetValue().ToLong(&maxNew) ||
          minNew > maxNew )
     {
-        wxLogWarning(_T("Invalid min/max values for the spinbtn."));
+        wxLogWarning(wxT("Invalid min/max values for the spinbtn."));
 
         return;
     }
@@ -370,7 +370,7 @@ void SpinBtnWidgetsPage::OnButtonSetValu
     long val;
     if ( !m_textValue->GetValue().ToLong(&val) || !IsValidValue(val) )
     {
-        wxLogWarning(_T("Invalid spinbtn value."));
+        wxLogWarning(wxT("Invalid spinbtn value."));
 
         return;
     }
@@ -405,7 +405,7 @@ void SpinBtnWidgetsPage::OnCheckOrRadioB
 
 void SpinBtnWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(_T("%d"), m_spinbtn->GetValue()));
+    event.SetText( wxString::Format(wxT("%d"), m_spinbtn->GetValue()));
 }
 
 void SpinBtnWidgetsPage::OnSpinBtn(wxSpinEvent& event)
@@ -413,20 +413,20 @@ void SpinBtnWidgetsPage::OnSpinBtn(wxSpi
     int value = event.GetInt();
 
     wxASSERT_MSG( value == m_spinbtn->GetValue(),
-                  _T("spinbtn value should be the same") );
+                  wxT("spinbtn value should be the same") );
 
-    wxLogMessage(_T("Spin button value changed, now %d"), value);
+    wxLogMessage(wxT("Spin button value changed, now %d"), value);
 }
 
 void SpinBtnWidgetsPage::OnSpinBtnUp(wxSpinEvent& event)
 {
-    wxLogMessage( _T("Spin button value incremented, will be %d (was %d)"),
+    wxLogMessage( wxT("Spin button value incremented, will be %d (was %d)"),
                   event.GetInt(), m_spinbtn->GetValue() );
 }
 
 void SpinBtnWidgetsPage::OnSpinBtnDown(wxSpinEvent& event)
 {
-    wxLogMessage( _T("Spin button value decremented, will be %d (was %d)"),
+    wxLogMessage( wxT("Spin button value decremented, will be %d (was %d)"),
                   event.GetInt(), m_spinbtn->GetValue() );
 }
 
@@ -437,9 +437,9 @@ void SpinBtnWidgetsPage::OnSpinCtrl(wxSp
     int value = event.GetInt();
 
     wxASSERT_MSG( value == m_spinctrl->GetValue(),
-                  _T("spinctrl value should be the same") );
+                  wxT("spinctrl value should be the same") );
 
-    wxLogMessage(_T("Spin control value changed, now %d"), value);
+    wxLogMessage(wxT("Spin control value changed, now %d"), value);
 }
 #endif
     // wxUSE_SPINBTN
--- samples/widgets/gauge.cpp-orig	2009-06-18 18:33:21.120273000 -0500
+++ samples/widgets/gauge.cpp	2009-06-18 18:33:27.159168000 -0500
@@ -175,7 +175,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS NATIVE_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(GaugeWidgetsPage, _T("Gauge"), FAMILY_CTRLS );
+IMPLEMENT_WIDGETS_PAGE(GaugeWidgetsPage, wxT("Gauge"), FAMILY_CTRLS );
 
 GaugeWidgetsPage::GaugeWidgetsPage(WidgetsBookCtrl *book,
                                    wxImageList *imaglist)
@@ -198,25 +198,25 @@ void GaugeWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Vertical"));
-    m_chkSmooth = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Smooth"));
+    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Vertical"));
+    m_chkSmooth = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Smooth"));
 
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
-    wxButton *btn = new wxButton(this, GaugePage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, GaugePage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
     wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY,
-        _T("&Change gauge value"));
+        wxT("&Change gauge value"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxTextCtrl *text;
-    wxSizer *sizerRow = CreateSizerWithTextAndLabel(_T("Current value"),
+    wxSizer *sizerRow = CreateSizerWithTextAndLabel(wxT("Current value"),
                                                     GaugePage_CurValueText,
                                                     &text);
     text->SetEditable(false);
@@ -224,25 +224,25 @@ void GaugeWidgetsPage::CreateContent()
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(GaugePage_SetValue,
-                                            _T("Set &value"),
+                                            wxT("Set &value"),
                                             GaugePage_ValueText,
                                             &m_textValue);
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
     sizerRow = CreateSizerWithTextAndButton(GaugePage_SetRange,
-                                            _T("Set &range"),
+                                            wxT("Set &range"),
                                             GaugePage_RangeText,
                                             &m_textRange);
-    m_textRange->SetValue( wxString::Format(_T("%lu"), m_range) );
+    m_textRange->SetValue( wxString::Format(wxT("%lu"), m_range) );
     sizerMiddle->Add(sizerRow, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, GaugePage_Progress, _T("Simulate &progress"));
+    btn = new wxButton(this, GaugePage_Progress, wxT("Simulate &progress"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, GaugePage_IndeterminateProgress, _T("Simulate undeterminate job"));
+    btn = new wxButton(this, GaugePage_IndeterminateProgress, wxT("Simulate undeterminate job"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
-    btn = new wxButton(this, GaugePage_Clear, _T("&Clear"));
+    btn = new wxButton(this, GaugePage_Clear, wxT("&Clear"));
     sizerMiddle->Add(btn, 0, wxALL | wxGROW, 5);
 
     // right pane
@@ -316,13 +316,13 @@ void GaugeWidgetsPage::StartTimer(wxButt
 {
     static const int INTERVAL = 300;
 
-    wxLogMessage(_T("Launched progress timer (interval = %d ms)"), INTERVAL);
+    wxLogMessage(wxT("Launched progress timer (interval = %d ms)"), INTERVAL);
 
     m_timer = new wxTimer(this,
         clicked->GetId() == GaugePage_Progress ? GaugePage_Timer : GaugePage_IndeterminateTimer);
     m_timer->Start(INTERVAL);
 
-    clicked->SetLabel(_T("&Stop timer"));
+    clicked->SetLabel(wxT("&Stop timer"));
 
     if (clicked->GetId() == GaugePage_Progress)
         FindWindow(GaugePage_IndeterminateProgress)->Disable();
@@ -332,7 +332,7 @@ void GaugeWidgetsPage::StartTimer(wxButt
 
 void GaugeWidgetsPage::StopTimer(wxButton *clicked)
 {
-    wxCHECK_RET( m_timer, _T("shouldn't be called") );
+    wxCHECK_RET( m_timer, wxT("shouldn't be called") );
 
     m_timer->Stop();
     delete m_timer;
@@ -340,16 +340,16 @@ void GaugeWidgetsPage::StopTimer(wxButto
 
     if (clicked->GetId() == GaugePage_Progress)
     {
-        clicked->SetLabel(_T("Simulate &progress"));
+        clicked->SetLabel(wxT("Simulate &progress"));
         FindWindow(GaugePage_IndeterminateProgress)->Enable();
     }
     else
     {
-        clicked->SetLabel(_T("Simulate undeterminate job"));
+        clicked->SetLabel(wxT("Simulate undeterminate job"));
         FindWindow(GaugePage_Progress)->Enable();
     }
 
-    wxLogMessage(_T("Progress finished."));
+    wxLogMessage(wxT("Progress finished."));
 }
 
 // ----------------------------------------------------------------------------
@@ -374,7 +374,7 @@ void GaugeWidgetsPage::OnButtonProgress(
     {
         StopTimer(b);
 
-        wxLogMessage(_T("Stopped the timer."));
+        wxLogMessage(wxT("Stopped the timer."));
     }
 }
 
@@ -389,7 +389,7 @@ void GaugeWidgetsPage::OnButtonIndetermi
     {
         StopTimer(b);
 
-        wxLogMessage(_T("Stopped the timer."));
+        wxLogMessage(wxT("Stopped the timer."));
     }
 }
 
@@ -449,7 +449,7 @@ void GaugeWidgetsPage::OnProgressTimer(w
     else // reached the end
     {
         wxButton *btn = (wxButton *)FindWindow(GaugePage_Progress);
-        wxCHECK_RET( btn, _T("no progress button?") );
+        wxCHECK_RET( btn, wxT("no progress button?") );
 
         StopTimer(btn);
     }
@@ -462,7 +462,7 @@ void GaugeWidgetsPage::OnIndeterminatePr
 
 void GaugeWidgetsPage::OnUpdateUICurValueText(wxUpdateUIEvent& event)
 {
-    event.SetText( wxString::Format(_T("%d"), m_gauge->GetValue()));
+    event.SetText( wxString::Format(wxT("%d"), m_gauge->GetValue()));
 }
 
 #endif
--- samples/widgets/static.cpp-orig	2009-06-18 18:33:31.969348000 -0500
+++ samples/widgets/static.cpp	2009-06-18 18:33:40.182500000 -0500
@@ -207,7 +207,7 @@ END_EVENT_TABLE()
 // implementation
 // ============================================================================
 
-IMPLEMENT_WIDGETS_PAGE(StaticWidgetsPage, _T("Static"),
+IMPLEMENT_WIDGETS_PAGE(StaticWidgetsPage, wxT("Static"),
                        (int)wxPlatform(GENERIC_CTRLS).If(wxOS_WINDOWS,NATIVE_CTRLS)
                        );
 
@@ -237,59 +237,59 @@ void StaticWidgetsPage::CreateContent()
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
-    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Vertical line"));
-    m_chkAutoResize = CreateCheckBoxAndAddToSizer(sizerLeft, _T("&Fit to text"));
+    m_chkVert = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Vertical line"));
+    m_chkAutoResize = CreateCheckBoxAndAddToSizer(sizerLeft, wxT("&Fit to text"));
     sizerLeft->Add(5, 5, 0, wxGROW | wxALL, 5); // spacer
 
     static const wxString halign[] =
     {
-        _T("left"),
-        _T("centre"),
-        _T("right"),
+        wxT("left"),
+        wxT("centre"),
+        wxT("right"),
     };
 
     static const wxString valign[] =
     {
-        _T("top"),
-        _T("centre"),
-        _T("bottom"),
+        wxT("top"),
+        wxT("centre"),
+        wxT("bottom"),
     };
 
-    m_radioHAlign = new wxRadioBox(this, wxID_ANY, _T("&Horz alignment"),
+    m_radioHAlign = new wxRadioBox(this, wxID_ANY, wxT("&Horz alignment"),
                                    wxDefaultPosition, wxDefaultSize,
                                    WXSIZEOF(halign), halign);
-    m_radioVAlign = new wxRadioBox(this, wxID_ANY, _T("&Vert alignment"),
+    m_radioVAlign = new wxRadioBox(this, wxID_ANY, wxT("&Vert alignment"),
                                    wxDefaultPosition, wxDefaultSize,
                                    WXSIZEOF(valign), valign);
 
     sizerLeft->Add(m_radioHAlign, 0, wxGROW | wxALL, 5);
     sizerLeft->Add(m_radioVAlign, 0, wxGROW | wxALL, 5);
 
-    wxButton *btn = new wxButton(this, StaticPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, StaticPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Change labels"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Change labels"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     wxSizer *sizerRow;
 
     sizerRow = CreateSizerWithTextAndButton(StaticPage_BoxText,
-                                            _T("Change &box label"),
+                                            wxT("Change &box label"),
                                             wxID_ANY, &m_textBox);
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
     sizerRow = CreateSizerWithTextAndButton(StaticPage_LabelText,
-                                            _T("Change &text label"),
+                                            wxT("Change &text label"),
                                             wxID_ANY, &m_textLabel);
     sizerMiddle->Add(sizerRow, 0, wxGROW | wxALL, 5);
 
-    m_textBox->SetValue(_T("This is a box"));
-    m_textLabel->SetValue(_T("And this is a label\ninside the box"));
+    m_textBox->SetValue(wxT("This is a box"));
+    m_textLabel->SetValue(wxT("And this is a label\ninside the box"));
 
     // right pane
     wxSizer *sizerRight = new wxBoxSizer(wxHORIZONTAL);
@@ -349,7 +349,7 @@ void StaticWidgetsPage::CreateStatic()
     switch ( m_radioHAlign->GetSelection() )
     {
         default:
-            wxFAIL_MSG(_T("unexpected radiobox selection"));
+            wxFAIL_MSG(wxT("unexpected radiobox selection"));
             // fall through
 
         case StaticHAlign_Left:
@@ -368,7 +368,7 @@ void StaticWidgetsPage::CreateStatic()
     switch ( m_radioVAlign->GetSelection() )
     {
         default:
-            wxFAIL_MSG(_T("unexpected radiobox selection"));
+            wxFAIL_MSG(wxT("unexpected radiobox selection"));
             // fall through
 
         case StaticVAlign_Top:
--- samples/widgets/checkbox.cpp-orig	2009-06-18 18:33:47.360266000 -0500
+++ samples/widgets/checkbox.cpp	2009-06-18 18:33:52.489175000 -0500
@@ -170,14 +170,14 @@ void CheckBoxWidgetsPage::CreateContent(
     wxSizer *sizerTop = new wxBoxSizer(wxHORIZONTAL);
 
     // left pane
-    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, _T("&Set style"));
+    wxStaticBox *box = new wxStaticBox(this, wxID_ANY, wxT("&Set style"));
 
     wxSizer *sizerLeft = new wxStaticBoxSizer(box, wxVERTICAL);
 
     m_chkRight = CreateCheckBoxAndAddToSizer
                  (
                     sizerLeft,
-                    _T("&Right aligned"),
+                    wxT("&Right aligned"),
                     CheckboxPage_ChkRight
                  );
 
@@ -185,39 +185,39 @@ void CheckBoxWidgetsPage::CreateContent(
 
     static const wxString kinds[] =
     {
-        _T("usual &2-state checkbox"),
-        _T("&3rd state settable by program"),
-        _T("&user-settable 3rd state"),
+        wxT("usual &2-state checkbox"),
+        wxT("&3rd state settable by program"),
+        wxT("&user-settable 3rd state"),
     };
 
-    m_radioKind = new wxRadioBox(this, wxID_ANY, _T("&Kind"),
+    m_radioKind = new wxRadioBox(this, wxID_ANY, wxT("&Kind"),
                                  wxDefaultPosition, wxDefaultSize,
                                  WXSIZEOF(kinds), kinds,
                                  1);
     sizerLeft->Add(m_radioKind, 0, wxGROW | wxALL, 5);
-    wxButton *btn = new wxButton(this, CheckboxPage_Reset, _T("&Reset"));
+    wxButton *btn = new wxButton(this, CheckboxPage_Reset, wxT("&Reset"));
     sizerLeft->Add(btn, 0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     // middle pane
-    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, _T("&Operations"));
+    wxStaticBox *box2 = new wxStaticBox(this, wxID_ANY, wxT("&Operations"));
     wxSizer *sizerMiddle = new wxStaticBoxSizer(box2, wxVERTICAL);
 
     sizerMiddle->Add(CreateSizerWithTextAndButton(CheckboxPage_ChangeLabel,
-                                                     _T("Change label"),
+                                                     wxT("Change label"),
                                                      wxID_ANY,
                                                      &m_textLabel),
                      0, wxALL | wxGROW, 5);
-    sizerMiddle->Add(new wxButton(this, CheckboxPage_Check, _T("&Check it")),
+    sizerMiddle->Add(new wxButton(this, CheckboxPage_Check, wxT("&Check it")),
                      0, wxALL | wxGROW, 5);
-    sizerMiddle->Add(new wxButton(this, CheckboxPage_Uncheck, _T("&Uncheck it")),
+    sizerMiddle->Add(new wxButton(this, CheckboxPage_Uncheck, wxT("&Uncheck it")),
                      0, wxALL | wxGROW, 5);
     sizerMiddle->Add(new wxButton(this, CheckboxPage_PartCheck,
-                                  _T("Put in &3rd state")),
+                                  wxT("Put in &3rd state")),
                      0, wxALL | wxGROW, 5);
 
     // right pane
     wxSizer *sizerRight = new wxBoxSizer(wxHORIZONTAL);
-    m_checkbox = new wxCheckBox(this, CheckboxPage_Checkbox, _T("&Check me!"));
+    m_checkbox = new wxCheckBox(this, CheckboxPage_Checkbox, wxT("&Check me!"));
     sizerRight->Add(0, 0, 1, wxCENTRE);
     sizerRight->Add(m_checkbox, 1, wxCENTRE);
     sizerRight->Add(0, 0, 1, wxCENTRE);
@@ -260,7 +260,7 @@ void CheckBoxWidgetsPage::CreateCheckbox
     switch ( m_radioKind->GetSelection() )
     {
         default:
-            wxFAIL_MSG(_T("unexpected radiobox selection"));
+            wxFAIL_MSG(wxT("unexpected radiobox selection"));
             // fall through
 
         case CheckboxKind_2State:
@@ -309,8 +309,8 @@ void CheckBoxWidgetsPage::OnButtonChange
 
 void CheckBoxWidgetsPage::OnCheckBox(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Test checkbox %schecked (value = %d)."),
-                 event.IsChecked() ? _T("") : _T("un"),
+    wxLogMessage(wxT("Test checkbox %schecked (value = %d)."),
+                 event.IsChecked() ? wxT("") : wxT("un"),
                  (int)m_checkbox->Get3StateValue());
 }
 
--- samples/widgets/clrpicker.cpp-orig	2009-06-18 18:33:58.568240000 -0500
+++ samples/widgets/clrpicker.cpp	2009-06-18 18:34:03.573084000 -0500
@@ -129,7 +129,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS GENERIC_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(ColourPickerWidgetsPage, _T("ColourPicker"),
+IMPLEMENT_WIDGETS_PAGE(ColourPickerWidgetsPage, wxT("ColourPicker"),
                        PICKER_CTRLS | FAMILY_CTRLS);
 
 ColourPickerWidgetsPage::ColourPickerWidgetsPage(WidgetsBookCtrl *book,
@@ -143,12 +143,12 @@ void ColourPickerWidgetsPage::CreateCont
     // left pane
     wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
 
-    wxStaticBoxSizer *clrbox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&ColourPicker style"));
-    m_chkColourTextCtrl = CreateCheckBoxAndAddToSizer(clrbox, _T("With textctrl"), false);
-    m_chkColourShowLabel = CreateCheckBoxAndAddToSizer(clrbox, _T("With label"), false);
+    wxStaticBoxSizer *clrbox = new wxStaticBoxSizer(wxVERTICAL, this, wxT("&ColourPicker style"));
+    m_chkColourTextCtrl = CreateCheckBoxAndAddToSizer(clrbox, wxT("With textctrl"), false);
+    m_chkColourShowLabel = CreateCheckBoxAndAddToSizer(clrbox, wxT("With label"), false);
     boxleft->Add(clrbox, 0, wxALL|wxGROW, 5);
 
-    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+    boxleft->Add(new wxButton(this, PickerPage_Reset, wxT("&Reset")),
                  0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     Reset();    // set checkboxes state
--- samples/widgets/filepicker.cpp-orig	2009-06-18 18:34:09.907936000 -0500
+++ samples/widgets/filepicker.cpp	2009-06-18 18:34:17.484838000 -0500
@@ -144,7 +144,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS GENERIC_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(FilePickerWidgetsPage, _T("FilePicker"),
+IMPLEMENT_WIDGETS_PAGE(FilePickerWidgetsPage, wxT("FilePicker"),
                        PICKER_CTRLS | FAMILY_CTRLS);
 
 FilePickerWidgetsPage::FilePickerWidgetsPage(WidgetsBookCtrl *book,
@@ -158,20 +158,20 @@ void FilePickerWidgetsPage::CreateConten
     // left pane
     wxSizer *boxleft = new wxBoxSizer(wxVERTICAL);
 
-    static const wxString mode[] = { _T("open"), _T("save") };
-    m_radioFilePickerMode = new wxRadioBox(this, wxID_ANY, _T("wxFilePicker mode"),
+    static const wxString mode[] = { wxT("open"), wxT("save") };
+    m_radioFilePickerMode = new wxRadioBox(this, wxID_ANY, wxT("wxFilePicker mode"),
                                            wxDefaultPosition, wxDefaultSize,
                                            WXSIZEOF(mode), mode);
     boxleft->Add(m_radioFilePickerMode, 0, wxALL|wxGROW, 5);
 
-    wxStaticBoxSizer *filebox = new wxStaticBoxSizer(wxVERTICAL, this, _T("&FilePicker style"));
-    m_chkFileTextCtrl = CreateCheckBoxAndAddToSizer(filebox, _T("With textctrl"), false);
-    m_chkFileOverwritePrompt = CreateCheckBoxAndAddToSizer(filebox, _T("Overwrite prompt"), false);
-    m_chkFileMustExist = CreateCheckBoxAndAddToSizer(filebox, _T("File must exist"), false);
-    m_chkFileChangeDir = CreateCheckBoxAndAddToSizer(filebox, _T("Change working dir"), false);
+    wxStaticBoxSizer *filebox = new wxStaticBoxSizer(wxVERTICAL, this, wxT("&FilePicker style"));
+    m_chkFileTextCtrl = CreateCheckBoxAndAddToSizer(filebox, wxT("With textctrl"), false);
+    m_chkFileOverwritePrompt = CreateCheckBoxAndAddToSizer(filebox, wxT("Overwrite prompt"), false);
+    m_chkFileMustExist = CreateCheckBoxAndAddToSizer(filebox, wxT("File must exist"), false);
+    m_chkFileChangeDir = CreateCheckBoxAndAddToSizer(filebox, wxT("Change working dir"), false);
     boxleft->Add(filebox, 0, wxALL|wxGROW, 5);
 
-    boxleft->Add(new wxButton(this, PickerPage_Reset, _T("&Reset")),
+    boxleft->Add(new wxButton(this, PickerPage_Reset, wxT("&Reset")),
                  0, wxALIGN_CENTRE_HORIZONTAL | wxALL, 15);
 
     Reset();    // set checkboxes state
--- samples/widgets/searchctrl.cpp-orig	2009-06-18 18:34:27.098373000 -0500
+++ samples/widgets/searchctrl.cpp	2009-06-18 18:34:33.352351000 -0500
@@ -122,7 +122,7 @@ END_EVENT_TABLE()
     #define FAMILY_CTRLS GENERIC_CTRLS
 #endif
 
-IMPLEMENT_WIDGETS_PAGE(SearchCtrlWidgetsPage, _T("SearchCtrl"),
+IMPLEMENT_WIDGETS_PAGE(SearchCtrlWidgetsPage, wxT("SearchCtrl"),
                        FAMILY_CTRLS | EDITABLE_CTRLS | ALL_CTRLS);
 
 SearchCtrlWidgetsPage::SearchCtrlWidgetsPage(WidgetsBookCtrl *book,
@@ -180,7 +180,7 @@ wxMenu* SearchCtrlWidgetsPage::CreateTes
 {
     wxMenu* menu = new wxMenu;
     const int SEARCH_MENU_SIZE = 5;
-    wxMenuItem* menuItem = menu->Append(wxID_ANY, _T("Recent Searches"), wxT(""), wxITEM_NORMAL);
+    wxMenuItem* menuItem = menu->Append(wxID_ANY, wxT("Recent Searches"), wxT(""), wxITEM_NORMAL);
     menuItem->Enable(false);
     for ( int i = 0; i < SEARCH_MENU_SIZE; i++ )
     {
--- samples/widgets/datepick.cpp-orig	2009-06-18 18:34:38.577218000 -0500
+++ samples/widgets/datepick.cpp	2009-06-18 18:34:43.345891000 -0500
@@ -185,9 +185,9 @@ void DatePickerWidgetsPage::Reset()
     const wxDateTime today = wxDateTime::Today();
 
     m_datePicker->SetValue(today);
-    m_day->SetValue(wxString::Format(_T("%d"), today.GetDay()));
-    m_month->SetValue(wxString::Format(_T("%d"), today.GetMonth()));
-    m_year->SetValue(wxString::Format(_T("%d"), today.GetYear()));
+    m_day->SetValue(wxString::Format(wxT("%d"), today.GetDay()));
+    m_month->SetValue(wxString::Format(wxT("%d"), today.GetMonth()));
+    m_year->SetValue(wxString::Format(wxT("%d"), today.GetYear()));
 }
 
 void DatePickerWidgetsPage::CreateDatePicker()
@@ -237,12 +237,12 @@ void DatePickerWidgetsPage::OnButtonSet(
         }
         else
         {
-            wxLogError(_T("Date is invalid"));
+            wxLogError(wxT("Date is invalid"));
         }
     }
     else
     {
-        wxLogError(_T("One of inputs is not number"));
+        wxLogError(wxT("One of inputs is not number"));
     }
 }
 
--- samples/widgets/hyperlnk.cpp-orig	2009-06-18 18:34:58.106255000 -0500
+++ samples/widgets/hyperlnk.cpp	2009-06-18 18:35:07.997119000 -0500
@@ -167,14 +167,14 @@ void HyperlinkWidgetsPage::CreateContent
 
     static const wxString alignments[] =
     {
-        _T("&left"),
-        _T("&centre"),
-        _T("&right")
+        wxT("&left"),
+        wxT("&centre"),
+        wxT("&right")
     };
     wxCOMPILE_TIME_ASSERT( WXSIZEOF(alignments) == Align_Max,
                            AlignMismatch );
 
-    m_radioAlignMode = new wxRadioBox(this, wxID_ANY, _T("alignment"),
+    m_radioAlignMode = new wxRadioBox(this, wxID_ANY, wxT("alignment"),
                                       wxDefaultPosition, wxDefaultSize,
                                       WXSIZEOF(alignments), alignments);
     m_radioAlignMode->SetSelection(1);  // start with "centre" selected since
@@ -304,7 +304,7 @@ void HyperlinkWidgetsPage::OnAlignment(w
     {
         default:
         case Align_Max:
-            wxFAIL_MSG( _T("unknown alignment") );
+            wxFAIL_MSG( wxT("unknown alignment") );
             // fall through
 
         case Align_Left:
--- samples/grid/griddemo.cpp-orig	2009-06-18 18:29:27.111616000 -0500
+++ samples/grid/griddemo.cpp	2009-06-18 18:29:33.105585000 -0500
@@ -130,102 +130,102 @@ END_EVENT_TABLE()
 
 
 GridFrame::GridFrame()
-        : wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxWidgets grid class demo"),
+        : wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxWidgets grid class demo"),
                    wxDefaultPosition,
                    wxDefaultSize )
 {
     wxMenu *fileMenu = new wxMenu;
-    fileMenu->Append( ID_VTABLE, _T("&Virtual table test\tCtrl-V"));
-    fileMenu->Append( ID_BUGS_TABLE, _T("&Bugs table test\tCtrl-B"));
-    fileMenu->Append( ID_SMALL_GRID, _T("&Small Grid test\tCtrl-S"));
+    fileMenu->Append( ID_VTABLE, wxT("&Virtual table test\tCtrl-V"));
+    fileMenu->Append( ID_BUGS_TABLE, wxT("&Bugs table test\tCtrl-B"));
+    fileMenu->Append( ID_SMALL_GRID, wxT("&Small Grid test\tCtrl-S"));
     fileMenu->AppendSeparator();
-    fileMenu->Append( wxID_EXIT, _T("E&xit\tAlt-X") );
+    fileMenu->Append( wxID_EXIT, wxT("E&xit\tAlt-X") );
 
     wxMenu *viewMenu = new wxMenu;
-    viewMenu->Append( ID_TOGGLEROWLABELS,  _T("&Row labels"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLECOLLABELS,  _T("&Col labels"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLEEDIT,  _T("&Editable"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLEROWSIZING, _T("Ro&w drag-resize"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLECOLSIZING, _T("C&ol drag-resize"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLECOLMOVING, _T("Col drag-&move"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLEGRIDSIZING, _T("&Grid drag-resize"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLEGRIDDRAGCELL, _T("&Grid drag-cell"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_TOGGLEGRIDLINES, _T("&Grid Lines"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_SET_HIGHLIGHT_WIDTH, _T("&Set Cell Highlight Width...") );
-    viewMenu->Append( ID_SET_RO_HIGHLIGHT_WIDTH, _T("&Set Cell RO Highlight Width...") );
-    viewMenu->Append( ID_AUTOSIZECOLS, _T("&Auto-size cols") );
-    viewMenu->Append( ID_CELLOVERFLOW, _T("&Overflow cells"), wxEmptyString, wxITEM_CHECK );
-    viewMenu->Append( ID_RESIZECELL, _T("&Resize cell (7,1)"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLEROWLABELS,  wxT("&Row labels"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLECOLLABELS,  wxT("&Col labels"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLEEDIT,  wxT("&Editable"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLEROWSIZING, wxT("Ro&w drag-resize"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLECOLSIZING, wxT("C&ol drag-resize"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLECOLMOVING, wxT("Col drag-&move"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLEGRIDSIZING, wxT("&Grid drag-resize"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLEGRIDDRAGCELL, wxT("&Grid drag-cell"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_TOGGLEGRIDLINES, wxT("&Grid Lines"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_SET_HIGHLIGHT_WIDTH, wxT("&Set Cell Highlight Width...") );
+    viewMenu->Append( ID_SET_RO_HIGHLIGHT_WIDTH, wxT("&Set Cell RO Highlight Width...") );
+    viewMenu->Append( ID_AUTOSIZECOLS, wxT("&Auto-size cols") );
+    viewMenu->Append( ID_CELLOVERFLOW, wxT("&Overflow cells"), wxEmptyString, wxITEM_CHECK );
+    viewMenu->Append( ID_RESIZECELL, wxT("&Resize cell (7,1)"), wxEmptyString, wxITEM_CHECK );
 
     wxMenu *rowLabelMenu = new wxMenu;
 
-    viewMenu->Append( ID_ROWLABELALIGN, _T("R&ow label alignment"),
+    viewMenu->Append( ID_ROWLABELALIGN, wxT("R&ow label alignment"),
                       rowLabelMenu,
-                      _T("Change alignment of row labels") );
+                      wxT("Change alignment of row labels") );
 
-    rowLabelMenu->Append( ID_ROWLABELHORIZALIGN, _T("&Horizontal") );
-    rowLabelMenu->Append( ID_ROWLABELVERTALIGN, _T("&Vertical") );
+    rowLabelMenu->Append( ID_ROWLABELHORIZALIGN, wxT("&Horizontal") );
+    rowLabelMenu->Append( ID_ROWLABELVERTALIGN, wxT("&Vertical") );
 
     wxMenu *colLabelMenu = new wxMenu;
 
-    viewMenu->Append( ID_COLLABELALIGN, _T("Col l&abel alignment"),
+    viewMenu->Append( ID_COLLABELALIGN, wxT("Col l&abel alignment"),
                       colLabelMenu,
-                      _T("Change alignment of col labels") );
+                      wxT("Change alignment of col labels") );
 
-    colLabelMenu->Append( ID_COLLABELHORIZALIGN, _T("&Horizontal") );
-    colLabelMenu->Append( ID_COLLABELVERTALIGN, _T("&Vertical") );
+    colLabelMenu->Append( ID_COLLABELHORIZALIGN, wxT("&Horizontal") );
+    colLabelMenu->Append( ID_COLLABELVERTALIGN, wxT("&Vertical") );
 
     wxMenu *colMenu = new wxMenu;
-    colMenu->Append( ID_SETLABELCOLOUR, _T("Set &label colour...") );
-    colMenu->Append( ID_SETLABELTEXTCOLOUR, _T("Set label &text colour...") );
-    colMenu->Append( ID_SETLABEL_FONT, _T("Set label fo&nt...") );
-    colMenu->Append( ID_GRIDLINECOLOUR, _T("&Grid line colour...") );
-    colMenu->Append( ID_SET_CELL_FG_COLOUR, _T("Set cell &foreground colour...") );
-    colMenu->Append( ID_SET_CELL_BG_COLOUR, _T("Set cell &background colour...") );
+    colMenu->Append( ID_SETLABELCOLOUR, wxT("Set &label colour...") );
+    colMenu->Append( ID_SETLABELTEXTCOLOUR, wxT("Set label &text colour...") );
+    colMenu->Append( ID_SETLABEL_FONT, wxT("Set label fo&nt...") );
+    colMenu->Append( ID_GRIDLINECOLOUR, wxT("&Grid line colour...") );
+    colMenu->Append( ID_SET_CELL_FG_COLOUR, wxT("Set cell &foreground colour...") );
+    colMenu->Append( ID_SET_CELL_BG_COLOUR, wxT("Set cell &background colour...") );
 
     wxMenu *editMenu = new wxMenu;
-    editMenu->Append( ID_INSERTROW, _T("Insert &row") );
-    editMenu->Append( ID_INSERTCOL, _T("Insert &column") );
-    editMenu->Append( ID_DELETEROW, _T("Delete selected ro&ws") );
-    editMenu->Append( ID_DELETECOL, _T("Delete selected co&ls") );
-    editMenu->Append( ID_CLEARGRID, _T("Cl&ear grid cell contents") );
+    editMenu->Append( ID_INSERTROW, wxT("Insert &row") );
+    editMenu->Append( ID_INSERTCOL, wxT("Insert &column") );
+    editMenu->Append( ID_DELETEROW, wxT("Delete selected ro&ws") );
+    editMenu->Append( ID_DELETECOL, wxT("Delete selected co&ls") );
+    editMenu->Append( ID_CLEARGRID, wxT("Cl&ear grid cell contents") );
 
     wxMenu *selectMenu = new wxMenu;
-    selectMenu->Append( ID_SELECT_UNSELECT, _T("Add new cells to the selection"),
-                        _T("When off, old selection is deselected before ")
-                        _T("selecting the new cells"), wxITEM_CHECK );
+    selectMenu->Append( ID_SELECT_UNSELECT, wxT("Add new cells to the selection"),
+                        wxT("When off, old selection is deselected before ")
+                        wxT("selecting the new cells"), wxITEM_CHECK );
     selectMenu->Append( ID_SHOW_SELECTION,
-                        _T("&Show current selection\tCtrl-Alt-S"));
+                        wxT("&Show current selection\tCtrl-Alt-S"));
     selectMenu->AppendSeparator();
-    selectMenu->Append( ID_SELECT_ALL, _T("Select all"));
-    selectMenu->Append( ID_SELECT_ROW, _T("Select row 2"));
-    selectMenu->Append( ID_SELECT_COL, _T("Select col 2"));
-    selectMenu->Append( ID_SELECT_CELL, _T("Select cell (3, 1)"));
+    selectMenu->Append( ID_SELECT_ALL, wxT("Select all"));
+    selectMenu->Append( ID_SELECT_ROW, wxT("Select row 2"));
+    selectMenu->Append( ID_SELECT_COL, wxT("Select col 2"));
+    selectMenu->Append( ID_SELECT_CELL, wxT("Select cell (3, 1)"));
     selectMenu->AppendSeparator();
-    selectMenu->Append( ID_DESELECT_ALL, _T("Deselect all"));
-    selectMenu->Append( ID_DESELECT_ROW, _T("Deselect row 2"));
-    selectMenu->Append( ID_DESELECT_COL, _T("Deselect col 2"));
-    selectMenu->Append( ID_DESELECT_CELL, _T("Deselect cell (3, 1)"));
+    selectMenu->Append( ID_DESELECT_ALL, wxT("Deselect all"));
+    selectMenu->Append( ID_DESELECT_ROW, wxT("Deselect row 2"));
+    selectMenu->Append( ID_DESELECT_COL, wxT("Deselect col 2"));
+    selectMenu->Append( ID_DESELECT_CELL, wxT("Deselect cell (3, 1)"));
     wxMenu *selectionMenu = new wxMenu;
-    selectMenu->Append( ID_CHANGESEL, _T("Change &selection mode"),
+    selectMenu->Append( ID_CHANGESEL, wxT("Change &selection mode"),
                       selectionMenu,
-                      _T("Change selection mode") );
+                      wxT("Change selection mode") );
 
-    selectionMenu->Append( ID_SELCELLS, _T("Select &Cells") );
-    selectionMenu->Append( ID_SELROWS, _T("Select &Rows") );
-    selectionMenu->Append( ID_SELCOLS, _T("Select C&ols") );
+    selectionMenu->Append( ID_SELCELLS, wxT("Select &Cells") );
+    selectionMenu->Append( ID_SELROWS, wxT("Select &Rows") );
+    selectionMenu->Append( ID_SELCOLS, wxT("Select C&ols") );
 
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append( wxID_ABOUT, _T("&About wxGrid demo") );
+    helpMenu->Append( wxID_ABOUT, wxT("&About wxGrid demo") );
 
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append( fileMenu, _T("&File") );
-    menuBar->Append( viewMenu, _T("&View") );
-    menuBar->Append( colMenu,  _T("&Colours") );
-    menuBar->Append( editMenu, _T("&Edit") );
-    menuBar->Append( selectMenu, _T("&Select") );
-    menuBar->Append( helpMenu, _T("&Help") );
+    menuBar->Append( fileMenu, wxT("&File") );
+    menuBar->Append( viewMenu, wxT("&View") );
+    menuBar->Append( colMenu,  wxT("&Colours") );
+    menuBar->Append( editMenu, wxT("&Edit") );
+    menuBar->Append( selectMenu, wxT("&Select") );
+    menuBar->Append( helpMenu, wxT("&Help") );
 
     SetMenuBar( menuBar );
 
@@ -263,37 +263,37 @@ GridFrame::GridFrame()
     grid->AppendRows(ir);
 
     grid->SetRowSize( 0, 60 );
-    grid->SetCellValue( 0, 0, _T("Ctrl+Home\nwill go to\nthis cell") );
+    grid->SetCellValue( 0, 0, wxT("Ctrl+Home\nwill go to\nthis cell") );
 
-    grid->SetCellValue( 0, 1, _T("A long piece of text to demonstrate wrapping.") );
+    grid->SetCellValue( 0, 1, wxT("A long piece of text to demonstrate wrapping.") );
     grid->SetCellRenderer(0 , 1, new wxGridCellAutoWrapStringRenderer);
     grid->SetCellEditor( 0,  1 , new wxGridCellAutoWrapStringEditor);
 
-    grid->SetCellValue( 0, 2, _T("Blah") );
-    grid->SetCellValue( 0, 3, _T("Read only") );
+    grid->SetCellValue( 0, 2, wxT("Blah") );
+    grid->SetCellValue( 0, 3, wxT("Read only") );
     grid->SetReadOnly( 0, 3 );
 
-    grid->SetCellValue( 0, 4, _T("Can veto edit this cell") );
+    grid->SetCellValue( 0, 4, wxT("Can veto edit this cell") );
 
-    grid->SetCellValue( 0, 5, _T("Press\nCtrl+arrow\nto skip over\ncells") );
+    grid->SetCellValue( 0, 5, wxT("Press\nCtrl+arrow\nto skip over\ncells") );
 
     grid->SetRowSize( 99, 60 );
-    grid->SetCellValue( 99, 99, _T("Ctrl+End\nwill go to\nthis cell") );
-    grid->SetCellValue( 1, 0, _T("This default cell will overflow into neighboring cells, but not if you turn overflow off."));
+    grid->SetCellValue( 99, 99, wxT("Ctrl+End\nwill go to\nthis cell") );
+    grid->SetCellValue( 1, 0, wxT("This default cell will overflow into neighboring cells, but not if you turn overflow off."));
 
     grid->SetCellTextColour(1, 2, *wxRED);
     grid->SetCellBackgroundColour(1, 2, *wxGREEN);
 
-    grid->SetCellValue( 1, 4, _T("I'm in the middle"));
+    grid->SetCellValue( 1, 4, wxT("I'm in the middle"));
 
-    grid->SetCellValue(2, 2, _T("red"));
+    grid->SetCellValue(2, 2, wxT("red"));
 
     grid->SetCellTextColour(2, 2, *wxRED);
-    grid->SetCellValue(3, 3, _T("green on grey"));
+    grid->SetCellValue(3, 3, wxT("green on grey"));
     grid->SetCellTextColour(3, 3, *wxGREEN);
     grid->SetCellBackgroundColour(3, 3, *wxLIGHT_GREY);
 
-    grid->SetCellValue(4, 4, _T("a weird looking cell"));
+    grid->SetCellValue(4, 4, wxT("a weird looking cell"));
     grid->SetCellAlignment(4, 4, wxALIGN_CENTRE, wxALIGN_CENTRE);
     grid->SetCellRenderer(4, 4, new MyGridCellRenderer);
 
@@ -308,29 +308,29 @@ GridFrame::GridFrame()
     attr->SetBackgroundColour(*wxRED);
     grid->SetRowAttr(5, attr);
 
-    grid->SetCellValue(2, 4, _T("a wider column"));
+    grid->SetCellValue(2, 4, wxT("a wider column"));
     grid->SetColSize(4, 120);
     grid->SetColMinimalWidth(4, 120);
 
     grid->SetCellTextColour(5, 8, *wxGREEN);
-    grid->SetCellValue(5, 8, _T("Bg from row attr\nText col from cell attr"));
-    grid->SetCellValue(5, 5, _T("Bg from row attr Text col from col attr and this text is so long that it covers over many many empty cells but is broken by one that isn't"));
+    grid->SetCellValue(5, 8, wxT("Bg from row attr\nText col from cell attr"));
+    grid->SetCellValue(5, 5, wxT("Bg from row attr Text col from col attr and this text is so long that it covers over many many empty cells but is broken by one that isn't"));
 
     grid->SetColFormatFloat(6);
-    grid->SetCellValue(0, 6, _T("3.1415"));
-    grid->SetCellValue(1, 6, _T("1415"));
-    grid->SetCellValue(2, 6, _T("12345.67890"));
+    grid->SetCellValue(0, 6, wxT("3.1415"));
+    grid->SetCellValue(1, 6, wxT("1415"));
+    grid->SetCellValue(2, 6, wxT("12345.67890"));
 
     grid->SetColFormatFloat(7, 6, 2);
-    grid->SetCellValue(0, 7, _T("3.1415"));
-    grid->SetCellValue(1, 7, _T("1415"));
-    grid->SetCellValue(2, 7, _T("12345.67890"));
+    grid->SetCellValue(0, 7, wxT("3.1415"));
+    grid->SetCellValue(1, 7, wxT("1415"));
+    grid->SetCellValue(2, 7, wxT("12345.67890"));
 
     const wxString choices[] =
     {
-        _T("Please select a choice"),
-        _T("This takes two cells"),
-        _T("Another choice"),
+        wxT("Please select a choice"),
+        wxT("This takes two cells"),
+        wxT("Another choice"),
     };
     grid->SetCellEditor(4, 0, new wxGridCellChoiceEditor(WXSIZEOF(choices), choices));
     grid->SetCellSize(4, 0, 1, 2);
@@ -339,7 +339,7 @@ GridFrame::GridFrame()
 
     grid->SetCellSize(7, 1, 3, 4);
     grid->SetCellAlignment(7, 1, wxALIGN_CENTRE, wxALIGN_CENTRE);
-    grid->SetCellValue(7, 1, _T("Big box!"));
+    grid->SetCellValue(7, 1, wxT("Big box!"));
 
     wxBoxSizer *topSizer = new wxBoxSizer( wxVERTICAL );
     topSizer->Add( grid,
@@ -457,10 +457,10 @@ void GridFrame::ToggleGridLines( wxComma
 
 void GridFrame::OnSetHighlightWidth( wxCommandEvent& WXUNUSED(ev) )
 {
-    wxString choices[] = { _T("0"), _T("1"), _T("2"), _T("3"), _T("4"), _T("5"), _T("6"), _T("7"), _T("8"), _T("9"), _T("10")};
+    wxString choices[] = { wxT("0"), wxT("1"), wxT("2"), wxT("3"), wxT("4"), wxT("5"), wxT("6"), wxT("7"), wxT("8"), wxT("9"), wxT("10")};
 
-    wxSingleChoiceDialog dlg(this, _T("Choose the thickness of the highlight pen:"),
-                             _T("Pen Width"), 11, choices);
+    wxSingleChoiceDialog dlg(this, wxT("Choose the thickness of the highlight pen:"),
+                             wxT("Pen Width"), 11, choices);
 
     int current = grid->GetCellHighlightPenWidth();
     dlg.SetSelection(current);
@@ -471,10 +471,10 @@ void GridFrame::OnSetHighlightWidth( wxC
 
 void GridFrame::OnSetROHighlightWidth( wxCommandEvent& WXUNUSED(ev) )
 {
-    wxString choices[] = { _T("0"), _T("1"), _T("2"), _T("3"), _T("4"), _T("5"), _T("6"), _T("7"), _T("8"), _T("9"), _T("10")};
+    wxString choices[] = { wxT("0"), wxT("1"), wxT("2"), wxT("3"), wxT("4"), wxT("5"), wxT("6"), wxT("7"), wxT("8"), wxT("9"), wxT("10")};
 
-    wxSingleChoiceDialog dlg(this, _T("Choose the thickness of the highlight pen:"),
-                             _T("Pen Width"), 11, choices);
+    wxSingleChoiceDialog dlg(this, wxT("Choose the thickness of the highlight pen:"),
+                             wxT("Pen Width"), 11, choices);
 
     int current = grid->GetCellHighlightROPenWidth();
     dlg.SetSelection(current);
@@ -791,21 +791,21 @@ void GridFrame::OnLabelLeftClick( wxGrid
     wxString logBuf;
     if ( ev.GetRow() != -1 )
     {
-        logBuf << _T("Left click on row label ") << ev.GetRow();
+        logBuf << wxT("Left click on row label ") << ev.GetRow();
     }
     else if ( ev.GetCol() != -1 )
     {
-        logBuf << _T("Left click on col label ") << ev.GetCol();
+        logBuf << wxT("Left click on col label ") << ev.GetCol();
     }
     else
     {
-        logBuf << _T("Left click on corner label");
+        logBuf << wxT("Left click on corner label");
     }
 
     if ( ev.ShiftDown() )
-        logBuf << _T(" (shift down)");
+        logBuf << wxT(" (shift down)");
     if ( ev.ControlDown() )
-        logBuf << _T(" (control down)");
+        logBuf << wxT(" (control down)");
     wxLogMessage( wxT("%s"), logBuf.c_str() );
 
     // you must call event skip if you want default grid processing
@@ -816,7 +816,7 @@ void GridFrame::OnLabelLeftClick( wxGrid
 
 void GridFrame::OnCellLeftClick( wxGridEvent& ev )
 {
-    wxLogMessage(_T("Left click at row %d, col %d"), ev.GetRow(), ev.GetCol());
+    wxLogMessage(wxT("Left click at row %d, col %d"), ev.GetRow(), ev.GetCol());
 
     // you must call event skip if you want default grid processing
     // (cell highlighting etc.)
@@ -827,7 +827,7 @@ void GridFrame::OnCellLeftClick( wxGridE
 
 void GridFrame::OnRowSize( wxGridSizeEvent& ev )
 {
-    wxLogMessage(_T("Resized row %d"), ev.GetRowOrCol());
+    wxLogMessage(wxT("Resized row %d"), ev.GetRowOrCol());
 
     ev.Skip();
 }
@@ -835,7 +835,7 @@ void GridFrame::OnRowSize( wxGridSizeEve
 
 void GridFrame::OnColSize( wxGridSizeEvent& ev )
 {
-    wxLogMessage(_T("Resized col %d"), ev.GetRowOrCol());
+    wxLogMessage(wxT("Resized col %d"), ev.GetRowOrCol());
 
     ev.Skip();
 }
@@ -854,11 +854,11 @@ void GridFrame::OnShowSelection(wxComman
             {
                 const wxGridCellCoordsArray cells(grid->GetSelectedCells());
                 size_t count = cells.size();
-                wxLogMessage(_T("%lu cells selected:"), (unsigned long)count);
+                wxLogMessage(wxT("%lu cells selected:"), (unsigned long)count);
                 if ( count > countMax )
                 {
-                    wxLogMessage(_T("[too many selected cells, ")
-                                 _T("showing only the first %lu]"),
+                    wxLogMessage(wxT("[too many selected cells, ")
+                                 wxT("showing only the first %lu]"),
                                  (unsigned long)countMax);
                     count = countMax;
                 }
@@ -866,7 +866,7 @@ void GridFrame::OnShowSelection(wxComman
                 for ( size_t n = 0; n < count; n++ )
                 {
                     const wxGridCellCoords& c = cells[n];
-                    wxLogMessage(_T("  selected cell %lu: (%d, %d)"),
+                    wxLogMessage(wxT("  selected cell %lu: (%d, %d)"),
                                  (unsigned long)n, c.GetCol(), c.GetRow());
                 }
             }
@@ -881,39 +881,39 @@ void GridFrame::OnShowSelection(wxComman
                 const wxChar *plural, *single;
                 if ( rows )
                 {
-                    plural = _T("rows");
-                    single = _T("row");
+                    plural = wxT("rows");
+                    single = wxT("row");
                 }
                 else // columns
                 {
-                    plural = _T("columns");
-                    single = _T("column");
+                    plural = wxT("columns");
+                    single = wxT("column");
                 }
 
                 // NB: extra parentheses needed to avoid bcc 5.82 errors
                 const wxArrayInt sels((rows ? grid->GetSelectedRows()
                                             : grid->GetSelectedCols()));
                 size_t count = sels.size();
-                wxLogMessage(_T("%lu %s selected:"),
+                wxLogMessage(wxT("%lu %s selected:"),
                              (unsigned long)count, plural);
                 if ( count > countMax )
                 {
-                    wxLogMessage(_T("[too many selected %s, ")
-                                 _T("showing only the first %lu]"),
+                    wxLogMessage(wxT("[too many selected %s, ")
+                                 wxT("showing only the first %lu]"),
                                  plural, (unsigned long)countMax);
                     count = countMax;
                 }
 
                 for ( size_t n = 0; n < count; n++ )
                 {
-                    wxLogMessage(_T("  selected %s %lu: %d"),
+                    wxLogMessage(wxT("  selected %s %lu: %d"),
                                  single, (unsigned long)n, sels[n]);
                 }
             }
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown wxGrid selection mode") );
+            wxFAIL_MSG( wxT("unknown wxGrid selection mode") );
             break;
     }
 }
@@ -922,19 +922,19 @@ void GridFrame::OnSelectCell( wxGridEven
 {
     wxString logBuf;
     if ( ev.Selecting() )
-        logBuf << _T("Selected ");
+        logBuf << wxT("Selected ");
     else
-        logBuf << _T("Deselected ");
-    logBuf << _T("cell at row ") << ev.GetRow()
-           << _T(" col ") << ev.GetCol()
-           << _T(" ( ControlDown: ")<< (ev.ControlDown() ? 'T':'F')
-           << _T(", ShiftDown: ")<< (ev.ShiftDown() ? 'T':'F')
-           << _T(", AltDown: ")<< (ev.AltDown() ? 'T':'F')
-           << _T(", MetaDown: ")<< (ev.MetaDown() ? 'T':'F') << _T(" )");
+        logBuf << wxT("Deselected ");
+    logBuf << wxT("cell at row ") << ev.GetRow()
+           << wxT(" col ") << ev.GetCol()
+           << wxT(" ( ControlDown: ")<< (ev.ControlDown() ? 'T':'F')
+           << wxT(", ShiftDown: ")<< (ev.ShiftDown() ? 'T':'F')
+           << wxT(", AltDown: ")<< (ev.AltDown() ? 'T':'F')
+           << wxT(", MetaDown: ")<< (ev.MetaDown() ? 'T':'F') << wxT(" )");
 
     //Indicate whether this column was moved
     if ( ((wxGrid *)ev.GetEventObject())->GetColPos( ev.GetCol() ) != ev.GetCol() )
-        logBuf << _T(" *** Column moved, current position: ") << ((wxGrid *)ev.GetEventObject())->GetColPos( ev.GetCol() );
+        logBuf << wxT(" *** Column moved, current position: ") << ((wxGrid *)ev.GetEventObject())->GetColPos( ev.GetCol() );
 
     wxLogMessage( wxT("%s"), logBuf.c_str() );
 
@@ -947,17 +947,17 @@ void GridFrame::OnRangeSelected( wxGridR
 {
     wxString logBuf;
     if ( ev.Selecting() )
-        logBuf << _T("Selected ");
+        logBuf << wxT("Selected ");
     else
-        logBuf << _T("Deselected ");
-    logBuf << _T("cells from row ") << ev.GetTopRow()
-           << _T(" col ") << ev.GetLeftCol()
-           << _T(" to row ") << ev.GetBottomRow()
-           << _T(" col ") << ev.GetRightCol()
-           << _T(" ( ControlDown: ")<< (ev.ControlDown() ? 'T':'F')
-           << _T(", ShiftDown: ")<< (ev.ShiftDown() ? 'T':'F')
-           << _T(", AltDown: ")<< (ev.AltDown() ? 'T':'F')
-           << _T(", MetaDown: ")<< (ev.MetaDown() ? 'T':'F') << _T(" )");
+        logBuf << wxT("Deselected ");
+    logBuf << wxT("cells from row ") << ev.GetTopRow()
+           << wxT(" col ") << ev.GetLeftCol()
+           << wxT(" to row ") << ev.GetBottomRow()
+           << wxT(" col ") << ev.GetRightCol()
+           << wxT(" ( ControlDown: ")<< (ev.ControlDown() ? 'T':'F')
+           << wxT(", ShiftDown: ")<< (ev.ShiftDown() ? 'T':'F')
+           << wxT(", AltDown: ")<< (ev.AltDown() ? 'T':'F')
+           << wxT(", MetaDown: ")<< (ev.MetaDown() ? 'T':'F') << wxT(" )");
     wxLogMessage( wxT("%s"), logBuf.c_str() );
 
     ev.Skip();
@@ -968,7 +968,7 @@ void GridFrame::OnCellValueChanged( wxGr
     int row = ev.GetRow(),
         col = ev.GetCol();
 
-    wxLogMessage(_T("Value changed for cell at row %d, col %d: now \"%s\""),
+    wxLogMessage(wxT("Value changed for cell at row %d, col %d: now \"%s\""),
                  row, col, grid->GetCellValue(row, col).c_str());
 
     ev.Skip();
@@ -976,7 +976,7 @@ void GridFrame::OnCellValueChanged( wxGr
 
 void GridFrame::OnCellBeginDrag( wxGridEvent& ev )
 {
-    wxLogMessage(_T("Got request to drag cell at row %d, col %d"),
+    wxLogMessage(wxT("Got request to drag cell at row %d, col %d"),
                  ev.GetRow(), ev.GetCol());
 
     ev.Skip();
@@ -987,8 +987,8 @@ void GridFrame::OnEditorShown( wxGridEve
 
     if ( (ev.GetCol() == 4) &&
          (ev.GetRow() == 0) &&
-     (wxMessageBox(_T("Are you sure you wish to edit this cell"),
-                   _T("Checking"),wxYES_NO) == wxNO ) ) {
+     (wxMessageBox(wxT("Are you sure you wish to edit this cell"),
+                   wxT("Checking"),wxYES_NO) == wxNO ) ) {
 
      ev.Veto();
      return;
@@ -1004,8 +1004,8 @@ void GridFrame::OnEditorHidden( wxGridEv
 
     if ( (ev.GetCol() == 4) &&
          (ev.GetRow() == 0) &&
-     (wxMessageBox(_T("Are you sure you wish to finish editing this cell"),
-                   _T("Checking"),wxYES_NO) == wxNO ) ) {
+     (wxMessageBox(wxT("Are you sure you wish to finish editing this cell"),
+                   wxT("Checking"),wxYES_NO) == wxNO ) ) {
 
         ev.Veto();
         return;
@@ -1018,9 +1018,9 @@ void GridFrame::OnEditorHidden( wxGridEv
 
 void GridFrame::About(  wxCommandEvent& WXUNUSED(ev) )
 {
-    (void)wxMessageBox( _T("\n\nwxGrid demo \n\n")
-                        _T("Michael Bedward, Julian Smart, Vadim Zeitlin"),
-                        _T("About"),
+    (void)wxMessageBox( wxT("\n\nwxGrid demo \n\n")
+                        wxT("Michael Bedward, Julian Smart, Vadim Zeitlin"),
+                        wxT("About"),
                         wxOK );
 }
 
@@ -1038,7 +1038,7 @@ void GridFrame::OnBugsTable(wxCommandEve
 
 void GridFrame::OnSmallGrid(wxCommandEvent& )
 {
-    wxFrame* frame = new wxFrame(NULL, wxID_ANY, _T("A Small Grid"),
+    wxFrame* frame = new wxFrame(NULL, wxID_ANY, wxT("A Small Grid"),
                                  wxDefaultPosition, wxSize(640, 480));
     wxPanel* panel = new wxPanel(frame, wxID_ANY);
     wxGrid* grid = new wxGrid(panel, wxID_ANY, wxPoint(10,10), wxSize(400,400),
@@ -1055,16 +1055,16 @@ void GridFrame::OnVTable(wxCommandEvent&
     // MB: wxGetNumberFromUser doesn't work properly for wxMotif
     wxString s;
     s << s_sizeGrid;
-    s = wxGetTextFromUser( _T("Size of the table to create"),
-                           _T("Size:"),
+    s = wxGetTextFromUser( wxT("Size of the table to create"),
+                           wxT("Size:"),
                            s );
 
     s.ToLong( &s_sizeGrid );
 
 #else
-    s_sizeGrid = wxGetNumberFromUser(_T("Size of the table to create"),
-                                     _T("Size: "),
-                                     _T("wxGridDemo question"),
+    s_sizeGrid = wxGetNumberFromUser(wxT("Size of the table to create"),
+                                     wxT("Size: "),
+                                     wxT("wxGridDemo question"),
                                      s_sizeGrid,
                                      0, 32000, this);
 #endif
@@ -1144,7 +1144,7 @@ wxGridCellAttr *MyGridCellAttrProvider::
 // ============================================================================
 
 BigGridFrame::BigGridFrame(long sizeGrid)
-            : wxFrame(NULL, wxID_ANY, _T("Plugin Virtual Table"),
+            : wxFrame(NULL, wxID_ANY, wxT("Plugin Virtual Table"),
                       wxDefaultPosition, wxSize(500, 450))
 {
     m_grid = new wxGrid(this, wxID_ANY, wxDefaultPosition, wxDefaultSize);
@@ -1195,11 +1195,11 @@ enum Severity
 
 static const wxString severities[] =
 {
-    _T("wishlist"),
-    _T("minor"),
-    _T("normal"),
-    _T("major"),
-    _T("critical"),
+    wxT("wishlist"),
+    wxT("minor"),
+    wxT("normal"),
+    wxT("major"),
+    wxT("critical"),
 };
 
 static struct BugsGridData
@@ -1212,20 +1212,20 @@ static struct BugsGridData
     bool opened;
 } gs_dataBugsGrid [] =
 {
-    { 18, _T("foo doesn't work"), Sev_Major, 1, _T("wxMSW"), true },
-    { 27, _T("bar crashes"), Sev_Critical, 1, _T("all"), false },
-    { 45, _T("printing is slow"), Sev_Minor, 3, _T("wxMSW"), true },
-    { 68, _T("Rectangle() fails"), Sev_Normal, 1, _T("wxMSW"), false },
+    { 18, wxT("foo doesn't work"), Sev_Major, 1, wxT("wxMSW"), true },
+    { 27, wxT("bar crashes"), Sev_Critical, 1, wxT("all"), false },
+    { 45, wxT("printing is slow"), Sev_Minor, 3, wxT("wxMSW"), true },
+    { 68, wxT("Rectangle() fails"), Sev_Normal, 1, wxT("wxMSW"), false },
 };
 
 static const wxChar *headers[Col_Max] =
 {
-    _T("Id"),
-    _T("Summary"),
-    _T("Severity"),
-    _T("Priority"),
-    _T("Platform"),
-    _T("Opened?"),
+    wxT("Id"),
+    wxT("Summary"),
+    wxT("Severity"),
+    wxT("Priority"),
+    wxT("Platform"),
+    wxT("Opened?"),
 };
 
 // ----------------------------------------------------------------------------
@@ -1244,16 +1244,16 @@ wxString BugsGridTable::GetTypeName(int 
             // fall thorugh (TODO should be a list)
 
         case Col_Summary:
-            return wxString::Format(_T("%s:80"), wxGRID_VALUE_STRING);
+            return wxString::Format(wxT("%s:80"), wxGRID_VALUE_STRING);
 
         case Col_Platform:
-            return wxString::Format(_T("%s:all,MSW,GTK,other"), wxGRID_VALUE_CHOICE);
+            return wxString::Format(wxT("%s:all,MSW,GTK,other"), wxGRID_VALUE_CHOICE);
 
         case Col_Opened:
             return wxGRID_VALUE_BOOL;
     }
 
-    wxFAIL_MSG(_T("unknown column"));
+    wxFAIL_MSG(wxT("unknown column"));
 
     return wxEmptyString;
 }
@@ -1280,13 +1280,13 @@ wxString BugsGridTable::GetValue( int ro
     switch ( col )
     {
         case Col_Id:
-            return wxString::Format(_T("%d"), gd.id);
+            return wxString::Format(wxT("%d"), gd.id);
 
         case Col_Priority:
-            return wxString::Format(_T("%d"), gd.prio);
+            return wxString::Format(wxT("%d"), gd.prio);
 
         case Col_Opened:
-            return gd.opened ? _T("1") : _T("0");
+            return gd.opened ? wxT("1") : wxT("0");
 
         case Col_Severity:
             return severities[gd.severity];
@@ -1310,7 +1310,7 @@ void BugsGridTable::SetValue( int row, i
         case Col_Id:
         case Col_Priority:
         case Col_Opened:
-            wxFAIL_MSG(_T("unexpected column"));
+            wxFAIL_MSG(wxT("unexpected column"));
             break;
 
         case Col_Severity:
@@ -1327,7 +1327,7 @@ void BugsGridTable::SetValue( int row, i
 
                 if ( n == WXSIZEOF(severities) )
                 {
-                    wxLogWarning(_T("Invalid severity value '%s'."),
+                    wxLogWarning(wxT("Invalid severity value '%s'."),
                                  value.c_str());
                     gd.severity = Sev_Normal;
                 }
@@ -1388,7 +1388,7 @@ long BugsGridTable::GetValueAsLong( int 
             return gd.severity;
 
         default:
-            wxFAIL_MSG(_T("unexpected column"));
+            wxFAIL_MSG(wxT("unexpected column"));
             return -1;
     }
 }
@@ -1401,7 +1401,7 @@ bool BugsGridTable::GetValueAsBool( int 
     }
     else
     {
-        wxFAIL_MSG(_T("unexpected column"));
+        wxFAIL_MSG(wxT("unexpected column"));
 
         return false;
     }
@@ -1418,7 +1418,7 @@ void BugsGridTable::SetValueAsLong( int 
             break;
 
         default:
-            wxFAIL_MSG(_T("unexpected column"));
+            wxFAIL_MSG(wxT("unexpected column"));
     }
 }
 
@@ -1430,7 +1430,7 @@ void BugsGridTable::SetValueAsBool( int 
     }
     else
     {
-        wxFAIL_MSG(_T("unexpected column"));
+        wxFAIL_MSG(wxT("unexpected column"));
     }
 }
 
@@ -1444,7 +1444,7 @@ wxString BugsGridTable::GetColLabelValue
 // ----------------------------------------------------------------------------
 
 BugsGridFrame::BugsGridFrame()
-             : wxFrame(NULL, wxID_ANY, _T("Bugs table"))
+             : wxFrame(NULL, wxID_ANY, wxT("Bugs table"))
 {
     wxGrid *grid = new wxGrid(this, wxID_ANY, wxDefaultPosition);
     wxGridTableBase *table = new BugsGridTable();
--- samples/scroll/scroll.cpp-orig	2009-06-18 18:29:11.680936000 -0500
+++ samples/scroll/scroll.cpp	2009-06-18 18:29:18.671927000 -0500
@@ -60,7 +60,7 @@ END_EVENT_TABLE()
 
 MySimpleCanvas::MySimpleCanvas( wxWindow *parent, wxWindowID id,
                     const wxPoint &pos, const wxSize &size )
-    : wxScrolledWindow( parent, id, pos, size, wxSUNKEN_BORDER, _T("test canvas") )
+    : wxScrolledWindow( parent, id, pos, size, wxSUNKEN_BORDER, wxT("test canvas") )
 {
     SetScrollRate( 10, 10 );
     SetVirtualSize( 92, 97 );
@@ -101,14 +101,14 @@ BEGIN_EVENT_TABLE(MySimpleFrame,wxFrame)
 END_EVENT_TABLE()
 
 MySimpleFrame::MySimpleFrame()
-       : wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxScrolledWindow sample"),
+       : wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxScrolledWindow sample"),
                   wxPoint(120,120), wxSize(150,150) )
 {
     wxMenu *file_menu = new wxMenu();
-    file_menu->Append( ID_QUIT,       _T("E&xit\tAlt-X"));
+    file_menu->Append( ID_QUIT,       wxT("E&xit\tAlt-X"));
 
     wxMenuBar *menu_bar = new wxMenuBar();
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     SetMenuBar( menu_bar );
 
@@ -189,7 +189,7 @@ public:
         , m_nLines( 100 )
     {
         wxClientDC dc(this);
-        dc.GetTextExtent(_T("Line 17"), NULL, &m_hLine);
+        dc.GetTextExtent(wxT("Line 17"), NULL, &m_hLine);
     }
 
 protected:
@@ -345,15 +345,15 @@ END_EVENT_TABLE()
 
 MyCanvas::MyCanvas( wxWindow *parent, wxWindowID id,
                     const wxPoint &pos, const wxSize &size )
-    : wxScrolledWindow( parent, id, pos, size, wxSUNKEN_BORDER | wxTAB_TRAVERSAL, _T("test canvas") )
+    : wxScrolledWindow( parent, id, pos, size, wxSUNKEN_BORDER | wxTAB_TRAVERSAL, wxT("test canvas") )
 {
     SetScrollRate( 10, 10 );
     SetVirtualSize( 500, 1000 );
 
-    (void) new wxButton( this, ID_ADDBUTTON,  _T("add button"), wxPoint(10,10) );
-    (void) new wxButton( this, ID_DELBUTTON,  _T("del button"), wxPoint(10,40) );
-    (void) new wxButton( this, ID_MOVEBUTTON, _T("move button"), wxPoint(150,10) );
-    (void) new wxButton( this, ID_SCROLLWIN,  _T("scroll win"), wxPoint(250,10) );
+    (void) new wxButton( this, ID_ADDBUTTON,  wxT("add button"), wxPoint(10,10) );
+    (void) new wxButton( this, ID_DELBUTTON,  wxT("del button"), wxPoint(10,40) );
+    (void) new wxButton( this, ID_MOVEBUTTON, wxT("move button"), wxPoint(150,10) );
+    (void) new wxButton( this, ID_SCROLLWIN,  wxT("scroll win"), wxPoint(250,10) );
 
 #if 0
 
@@ -449,9 +449,9 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     wxPaintDC dc( this );
     PrepareDC( dc );
 
-    dc.DrawText( _T("Press mouse button to test calculations!"), 160, 50 );
+    dc.DrawText( wxT("Press mouse button to test calculations!"), 160, 50 );
 
-    dc.DrawText( _T("Some text"), 140, 140 );
+    dc.DrawText( wxT("Some text"), 140, 140 );
 
     dc.DrawRectangle( 100, 160, 200, 200 );
 }
@@ -530,7 +530,7 @@ MyAutoScrollWindow::MyAutoScrollWindow( 
 
     m_button = new wxButton( this,
                              ID_RESIZEBUTTON,
-                             _T("Press me"),
+                             wxT("Press me"),
                              wxDefaultPosition,
                              SMALL_BUTTON );
 
@@ -546,15 +546,15 @@ MyAutoScrollWindow::MyAutoScrollWindow( 
                      wxALIGN_CENTER | wxALL | wxADJUST_MINSIZE,
                      20 );
 
-    innersizer->Add( new wxStaticText( this, wxID_ANY, _T("This is just") ),
+    innersizer->Add( new wxStaticText( this, wxID_ANY, wxT("This is just") ),
                     0,
                     wxALIGN_CENTER );
 
-    innersizer->Add( new wxStaticText( this, wxID_ANY, _T("some decoration") ),
+    innersizer->Add( new wxStaticText( this, wxID_ANY, wxT("some decoration") ),
                     0,
                     wxALIGN_CENTER );
 
-    innersizer->Add( new wxStaticText( this, wxID_ANY, _T("for you to scroll...") ),
+    innersizer->Add( new wxStaticText( this, wxID_ANY, wxT("for you to scroll...") ),
                     0,
                     wxALIGN_CENTER );
 
@@ -593,17 +593,17 @@ BEGIN_EVENT_TABLE(MyFrame,wxFrame)
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
-       : wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxScrolledWindow sample"),
+       : wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxScrolledWindow sample"),
                   wxPoint(20,20), wxSize(800,500) )
 {
     wxMenu *file_menu = new wxMenu();
-    file_menu->Append( ID_DELETE_ALL, _T("Delete all"));
-    file_menu->Append( ID_INSERT_NEW, _T("Insert new"));
-    file_menu->Append( ID_ABOUT,      _T("&About.."));
-    file_menu->Append( ID_QUIT,       _T("E&xit\tAlt-X"));
+    file_menu->Append( ID_DELETE_ALL, wxT("Delete all"));
+    file_menu->Append( ID_INSERT_NEW, wxT("Insert new"));
+    file_menu->Append( ID_ABOUT,      wxT("&About.."));
+    file_menu->Append( ID_QUIT,       wxT("E&xit\tAlt-X"));
 
     wxMenuBar *menu_bar = new wxMenuBar();
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     SetMenuBar( menu_bar );
 
@@ -646,7 +646,7 @@ void MyFrame::OnDeleteAll( wxCommandEven
 
 void MyFrame::OnInsertNew( wxCommandEvent &WXUNUSED(event) )
 {
-    (void)new wxButton( m_canvas, wxID_ANY, _T("Hello"), wxPoint(100,100) );
+    (void)new wxButton( m_canvas, wxID_ANY, wxT("Hello"), wxPoint(100,100) );
 }
 
 void MyFrame::OnQuit( wxCommandEvent &WXUNUSED(event) )
@@ -656,13 +656,13 @@ void MyFrame::OnQuit( wxCommandEvent &WX
 
 void MyFrame::OnAbout( wxCommandEvent &WXUNUSED(event) )
 {
-   (void)wxMessageBox( _T("wxScroll demo\n")
-                       _T("Robert Roebling (c) 1998\n")
-                       _T("Autoscrolling examples\n")
-                       _T("Ron Lee (c) 2002\n")
-                       _T("Auto-timed-scrolling example\n")
-                       _T("Matt Gregory (c) 2003\n"),
-                       _T("About wxScroll Demo"),
+   (void)wxMessageBox( wxT("wxScroll demo\n")
+                       wxT("Robert Roebling (c) 1998\n")
+                       wxT("Autoscrolling examples\n")
+                       wxT("Ron Lee (c) 2002\n")
+                       wxT("Auto-timed-scrolling example\n")
+                       wxT("Matt Gregory (c) 2003\n"),
+                       wxT("About wxScroll Demo"),
                        wxICON_INFORMATION | wxOK );
 }
 
@@ -697,7 +697,7 @@ void MyScrolledWindowDumb::OnDraw(wxDC& 
         wxCoord yPhys;
         CalcScrolledPosition(0, y, NULL, &yPhys);
 
-        dc.DrawText(wxString::Format(_T("Line %u (logical %d, physical %d)"),
+        dc.DrawText(wxString::Format(wxT("Line %u (logical %d, physical %d)"),
                                      unsigned(line), y, yPhys), 0, y);
         y += m_hLine;
     }
@@ -726,7 +726,7 @@ void MyScrolledWindowSmart::OnDraw(wxDC&
         wxCoord yPhys;
         CalcScrolledPosition(0, y, NULL, &yPhys);
 
-        dc.DrawText(wxString::Format(_T("Line %u (logical %d, physical %d)"),
+        dc.DrawText(wxString::Format(wxT("Line %u (logical %d, physical %d)"),
                                      unsigned(line), y, yPhys), 0, y);
         y += m_hLine;
     }
@@ -754,7 +754,7 @@ MyAutoTimedScrollingWindow::MyAutoTimedS
     wxClientDC dc(this);
     // query dc for text size
     dc.SetFont(m_font);
-    dc.GetTextExtent(wxString(_T("A")), &m_fontW, &m_fontH);
+    dc.GetTextExtent(wxString(wxT("A")), &m_fontW, &m_fontH);
     // set up the virtual window
     SetScrollbars(m_fontW, m_fontH, sm_lineLen, sm_lineCnt);
 }
@@ -1036,126 +1036,126 @@ void MyAutoTimedScrollingWindow::OnScrol
 const int MyAutoTimedScrollingWindow::sm_lineCnt = 125;
 const int MyAutoTimedScrollingWindow::sm_lineLen = 79;
 const wxChar* MyAutoTimedScrollingWindow::sm_testData =
-_T("162 Cult of the genius out of vanity. Because we think well of ourselves, but ")
-_T("nonetheless never suppose ourselves capable of producing a painting like one of ")
-_T("Raphael's or a dramatic scene like one of Shakespeare's, we convince ourselves ")
-_T("that the capacity to do so is quite extraordinarily marvelous, a wholly ")
-_T("uncommon accident, or, if we are still religiously inclined, a mercy from on ")
-_T("high. Thus our vanity, our self-love, promotes the cult of the genius: for only ")
-_T("if we think of him as being very remote from us, as a miraculum, does he not ")
-_T("aggrieve us (even Goethe, who was without envy, called Shakespeare his star of ")
-_T("the most distant heights [\"William! Stern der schonsten Ferne\": from Goethe's, ")
-_T("\"Between Two Worlds\"]; in regard to which one might recall the lines: \"the ")
-_T("stars, these we do not desire\" [from Goethe's, \"Comfort in Tears\"]). But, aside ")
-_T("from these suggestions of our vanity, the activity of the genius seems in no ")
-_T("way fundamentally different from the activity of the inventor of machines, the ")
-_T("scholar of astronomy or history, the master of tactics. All these activities ")
-_T("are explicable if one pictures to oneself people whose thinking is active in ")
-_T("one direction, who employ everything as material, who always zealously observe ")
-_T("their own inner life and that of others, who perceive everywhere models and ")
-_T("incentives, who never tire of combining together the means available to them. ")
-_T("Genius too does nothing except learn first how to lay bricks then how to build, ")
-_T("except continually seek for material and continually form itself around it. ")
-_T("Every activity of man is amazingly complicated, not only that of the genius: ")
-_T("but none is a \"miracle.\" Whence, then, the belief that genius exists only in ")
-_T("the artist, orator and philosopher? that only they have \"intuition\"? (Whereby ")
-_T("they are supposed to possess a kind of miraculous eyeglass with which they can ")
-_T("see directly into \"the essence of the thing\"!) It is clear that people speak of ")
-_T("genius only where the effects of the great intellect are most pleasant to them ")
-_T("and where they have no desire to feel envious. To call someone \"divine\" means: ")
-_T("\"here there is no need for us to compete.\" Then, everything finished and ")
-_T("complete is regarded with admiration, everything still becoming is undervalued. ")
-_T("But no one can see in the work of the artist how it has become; that is its ")
-_T("advantage, for wherever one can see the act of becoming one grows somewhat ")
-_T("cool. The finished and perfect art of representation repulses all thinking as ")
-_T("to how it has become; it tyrannizes as present completeness and perfection. ")
-_T("That is why the masters of the art of representation count above all as gifted ")
-_T("with genius and why men of science do not. In reality, this evaluation of the ")
-_T("former and undervaluation of the latter is only a piece of childishness in the ")
-_T("realm of reason. ")
-_T("\n\n")
-_T("163 The serious workman. Do not talk about giftedness, inborn talents! One can ")
-_T("name great men of all kinds who were very little gifted. The acquired ")
-_T("greatness, became \"geniuses\" (as we put it), through qualities the lack of ")
-_T("which no one who knew what they were would boast of: they all possessed that ")
-_T("seriousness of the efficient workman which first learns to construct the parts ")
-_T("properly before it ventures to fashion a great whole; they allowed themselves ")
-_T("time for it, because they took more pleasure in making the little, secondary ")
-_T("things well than in the effect of a dazzling whole. the recipe for becoming a ")
-_T("good novelist, for example, is easy to give, but to carry it out presupposes ")
-_T("qualities one is accustomed to overlook when one says \"I do not have enough ")
-_T("talent.\" One has only to make a hundred or so sketches for novels, none longer ")
-_T("than two pages but of such distinctness that every word in them is necessary; ")
-_T("one should write down anecdotes each day until one has learned how to give them ")
-_T("the most pregnant and effective form; one should be tireless in collecting and ")
-_T("describing human types and characters; one should above all relate things to ")
-_T("others and listen to others relate, keeping one's eyes and ears open for the ")
-_T("effect produced on those present, one should travel like a landscape painter or ")
-_T("costume designer; one should excerpt for oneself out of the individual sciences ")
-_T("everything that will produce an artistic effect when it is well described, one ")
-_T("should, finally, reflect on the motives of human actions, disdain no signpost ")
-_T("to instruction about them and be a collector of these things by day and night. ")
-_T("One should continue in this many-sided exercise some ten years: what is then ")
-_T("created in the workshop, however, will be fit to go out into the world. What, ")
-_T("however, do most people do? They begin, not with the parts, but with the whole. ")
-_T("Perhaps they chance to strike a right note, excite attention and from then on ")
-_T("strike worse and worse notes, for good, natural reasons. Sometimes, when the ")
-_T("character and intellect needed to formulate such a life-plan are lacking, fate ")
-_T("and need take their place and lead the future master step by step through all ")
-_T("the stipulations of his trade. ")
-_T("\n\n")
-_T("164 Peril and profit in the cult of the genius. The belief in great, superior, ")
-_T("fruitful spirits is not necessarily, yet nonetheless is very frequently ")
-_T("associated with that religious or semi-religious superstition that these ")
-_T("spirits are of supra-human origin and possess certain miraculous abilities by ")
-_T("virtue of which they acquire their knowledge by quite other means than the rest ")
-_T("of mankind. One ascribes to them, it seems, a direct view of the nature of the ")
-_T("world, as it were a hole in the cloak of appearance, and believes that, by ")
-_T("virtue of this miraculous seer's vision, they are able to communicate something ")
-_T("conclusive and decisive about man and the world without the toil and ")
-_T("rigorousness required by science. As long as there continue to be those who ")
-_T("believe in the miraculous in the domain of knowledge one can perhaps concede ")
-_T("that these people themselves derive some benefit from their belief, inasmuch as ")
-_T("through their unconditional subjection to the great spirits they create for ")
-_T("their own spirit during its time of development the finest form of discipline ")
-_T("and schooling. On the other hand, it is at least questionable whether the ")
-_T("superstitious belief in genius, in its privileges and special abilities, is of ")
-_T("benefit to the genius himself if it takes root in him. It is in any event a ")
-_T("dangerous sign when a man is assailed by awe of himself, whether it be the ")
-_T("celebrated Caesar's awe of Caesar or the awe of one's own genius now under ")
-_T("consideration; when the sacrificial incense which is properly rendered only to ")
-_T("a god penetrates the brain of the genius, so that his head begins to swim and ")
-_T("he comes to regard himself as something supra-human. The consequences that ")
-_T("slowly result are: the feeling of irresponsibility, of exceptional rights, the ")
-_T("belief that he confers a favor by his mere presence, insane rage when anyone ")
-_T("attempts even to compare him with others, let alone to rate him beneath them, ")
-_T("or to draw attention to lapses in his work. Because he ceases to practice ")
-_T("criticism of himself, at last one pinion after the other falls out of his ")
-_T("plumage: that superstitious eats at the roots of his powers and perhaps even ")
-_T("turns him into a hypocrite after his powers have fled from him. For the great ")
-_T("spirits themselves it is therefore probably more beneficial if they acquire an ")
-_T("insight into the nature and origin of their powers, if they grasp, that is to ")
-_T("say, what purely human qualities have come together in them and what fortunate ")
-_T("circumstances attended them: in the first place undiminished energy, resolute ")
-_T("application to individual goals, great personal courage, then the good fortune ")
-_T("to receive an upbringing which offered in the early years the finest teachers, ")
-_T("models and methods. To be sure, when their goal is the production of the ")
-_T("greatest possible effect, unclarity with regard to oneself and that ")
-_T("semi-insanity superadded to it has always achieved much; for what has been ")
-_T("admired and envied at all times has been that power in them by virtue of which ")
-_T("they render men will-less and sweep them away into the delusion that the ")
-_T("leaders they are following are supra-natural. Indeed, it elevates and inspires ")
-_T("men to believe that someone is in possession of supra-natural powers: to this ")
-_T("extent Plato was right to say [Plato: Phaedrus, 244a] that madness has brought ")
-_T("the greatest of blessings upon mankind. In rare individual cases this portion ")
-_T("of madness may, indeed, actually have been the means by which such a nature, ")
-_T("excessive in all directions, was held firmly together: in the life of ")
-_T("individuals, too, illusions that are in themselves poisons often play the role ")
-_T("of healers; yet, in the end, in the case of every \"genius\" who believes in his ")
-_T("own divinity the poison shows itself to the same degree as his \"genius\" grows ")
-_T("old: one may recall, for example, the case of Napoleon, whose nature certainly ")
-_T("grew into the mighty unity that sets him apart from all men of modern times ")
-_T("precisely through his belief in himself and his star and through the contempt ")
-_T("for men that flowed from it; until in the end, however, this same belief went ")
-_T("over into an almost insane fatalism, robbed him of his acuteness and swiftness ")
-_T("of perception, and became the cause of his destruction.");
+wxT("162 Cult of the genius out of vanity. Because we think well of ourselves, but ")
+wxT("nonetheless never suppose ourselves capable of producing a painting like one of ")
+wxT("Raphael's or a dramatic scene like one of Shakespeare's, we convince ourselves ")
+wxT("that the capacity to do so is quite extraordinarily marvelous, a wholly ")
+wxT("uncommon accident, or, if we are still religiously inclined, a mercy from on ")
+wxT("high. Thus our vanity, our self-love, promotes the cult of the genius: for only ")
+wxT("if we think of him as being very remote from us, as a miraculum, does he not ")
+wxT("aggrieve us (even Goethe, who was without envy, called Shakespeare his star of ")
+wxT("the most distant heights [\"William! Stern der schonsten Ferne\": from Goethe's, ")
+wxT("\"Between Two Worlds\"]; in regard to which one might recall the lines: \"the ")
+wxT("stars, these we do not desire\" [from Goethe's, \"Comfort in Tears\"]). But, aside ")
+wxT("from these suggestions of our vanity, the activity of the genius seems in no ")
+wxT("way fundamentally different from the activity of the inventor of machines, the ")
+wxT("scholar of astronomy or history, the master of tactics. All these activities ")
+wxT("are explicable if one pictures to oneself people whose thinking is active in ")
+wxT("one direction, who employ everything as material, who always zealously observe ")
+wxT("their own inner life and that of others, who perceive everywhere models and ")
+wxT("incentives, who never tire of combining together the means available to them. ")
+wxT("Genius too does nothing except learn first how to lay bricks then how to build, ")
+wxT("except continually seek for material and continually form itself around it. ")
+wxT("Every activity of man is amazingly complicated, not only that of the genius: ")
+wxT("but none is a \"miracle.\" Whence, then, the belief that genius exists only in ")
+wxT("the artist, orator and philosopher? that only they have \"intuition\"? (Whereby ")
+wxT("they are supposed to possess a kind of miraculous eyeglass with which they can ")
+wxT("see directly into \"the essence of the thing\"!) It is clear that people speak of ")
+wxT("genius only where the effects of the great intellect are most pleasant to them ")
+wxT("and where they have no desire to feel envious. To call someone \"divine\" means: ")
+wxT("\"here there is no need for us to compete.\" Then, everything finished and ")
+wxT("complete is regarded with admiration, everything still becoming is undervalued. ")
+wxT("But no one can see in the work of the artist how it has become; that is its ")
+wxT("advantage, for wherever one can see the act of becoming one grows somewhat ")
+wxT("cool. The finished and perfect art of representation repulses all thinking as ")
+wxT("to how it has become; it tyrannizes as present completeness and perfection. ")
+wxT("That is why the masters of the art of representation count above all as gifted ")
+wxT("with genius and why men of science do not. In reality, this evaluation of the ")
+wxT("former and undervaluation of the latter is only a piece of childishness in the ")
+wxT("realm of reason. ")
+wxT("\n\n")
+wxT("163 The serious workman. Do not talk about giftedness, inborn talents! One can ")
+wxT("name great men of all kinds who were very little gifted. The acquired ")
+wxT("greatness, became \"geniuses\" (as we put it), through qualities the lack of ")
+wxT("which no one who knew what they were would boast of: they all possessed that ")
+wxT("seriousness of the efficient workman which first learns to construct the parts ")
+wxT("properly before it ventures to fashion a great whole; they allowed themselves ")
+wxT("time for it, because they took more pleasure in making the little, secondary ")
+wxT("things well than in the effect of a dazzling whole. the recipe for becoming a ")
+wxT("good novelist, for example, is easy to give, but to carry it out presupposes ")
+wxT("qualities one is accustomed to overlook when one says \"I do not have enough ")
+wxT("talent.\" One has only to make a hundred or so sketches for novels, none longer ")
+wxT("than two pages but of such distinctness that every word in them is necessary; ")
+wxT("one should write down anecdotes each day until one has learned how to give them ")
+wxT("the most pregnant and effective form; one should be tireless in collecting and ")
+wxT("describing human types and characters; one should above all relate things to ")
+wxT("others and listen to others relate, keeping one's eyes and ears open for the ")
+wxT("effect produced on those present, one should travel like a landscape painter or ")
+wxT("costume designer; one should excerpt for oneself out of the individual sciences ")
+wxT("everything that will produce an artistic effect when it is well described, one ")
+wxT("should, finally, reflect on the motives of human actions, disdain no signpost ")
+wxT("to instruction about them and be a collector of these things by day and night. ")
+wxT("One should continue in this many-sided exercise some ten years: what is then ")
+wxT("created in the workshop, however, will be fit to go out into the world. What, ")
+wxT("however, do most people do? They begin, not with the parts, but with the whole. ")
+wxT("Perhaps they chance to strike a right note, excite attention and from then on ")
+wxT("strike worse and worse notes, for good, natural reasons. Sometimes, when the ")
+wxT("character and intellect needed to formulate such a life-plan are lacking, fate ")
+wxT("and need take their place and lead the future master step by step through all ")
+wxT("the stipulations of his trade. ")
+wxT("\n\n")
+wxT("164 Peril and profit in the cult of the genius. The belief in great, superior, ")
+wxT("fruitful spirits is not necessarily, yet nonetheless is very frequently ")
+wxT("associated with that religious or semi-religious superstition that these ")
+wxT("spirits are of supra-human origin and possess certain miraculous abilities by ")
+wxT("virtue of which they acquire their knowledge by quite other means than the rest ")
+wxT("of mankind. One ascribes to them, it seems, a direct view of the nature of the ")
+wxT("world, as it were a hole in the cloak of appearance, and believes that, by ")
+wxT("virtue of this miraculous seer's vision, they are able to communicate something ")
+wxT("conclusive and decisive about man and the world without the toil and ")
+wxT("rigorousness required by science. As long as there continue to be those who ")
+wxT("believe in the miraculous in the domain of knowledge one can perhaps concede ")
+wxT("that these people themselves derive some benefit from their belief, inasmuch as ")
+wxT("through their unconditional subjection to the great spirits they create for ")
+wxT("their own spirit during its time of development the finest form of discipline ")
+wxT("and schooling. On the other hand, it is at least questionable whether the ")
+wxT("superstitious belief in genius, in its privileges and special abilities, is of ")
+wxT("benefit to the genius himself if it takes root in him. It is in any event a ")
+wxT("dangerous sign when a man is assailed by awe of himself, whether it be the ")
+wxT("celebrated Caesar's awe of Caesar or the awe of one's own genius now under ")
+wxT("consideration; when the sacrificial incense which is properly rendered only to ")
+wxT("a god penetrates the brain of the genius, so that his head begins to swim and ")
+wxT("he comes to regard himself as something supra-human. The consequences that ")
+wxT("slowly result are: the feeling of irresponsibility, of exceptional rights, the ")
+wxT("belief that he confers a favor by his mere presence, insane rage when anyone ")
+wxT("attempts even to compare him with others, let alone to rate him beneath them, ")
+wxT("or to draw attention to lapses in his work. Because he ceases to practice ")
+wxT("criticism of himself, at last one pinion after the other falls out of his ")
+wxT("plumage: that superstitious eats at the roots of his powers and perhaps even ")
+wxT("turns him into a hypocrite after his powers have fled from him. For the great ")
+wxT("spirits themselves it is therefore probably more beneficial if they acquire an ")
+wxT("insight into the nature and origin of their powers, if they grasp, that is to ")
+wxT("say, what purely human qualities have come together in them and what fortunate ")
+wxT("circumstances attended them: in the first place undiminished energy, resolute ")
+wxT("application to individual goals, great personal courage, then the good fortune ")
+wxT("to receive an upbringing which offered in the early years the finest teachers, ")
+wxT("models and methods. To be sure, when their goal is the production of the ")
+wxT("greatest possible effect, unclarity with regard to oneself and that ")
+wxT("semi-insanity superadded to it has always achieved much; for what has been ")
+wxT("admired and envied at all times has been that power in them by virtue of which ")
+wxT("they render men will-less and sweep them away into the delusion that the ")
+wxT("leaders they are following are supra-natural. Indeed, it elevates and inspires ")
+wxT("men to believe that someone is in possession of supra-natural powers: to this ")
+wxT("extent Plato was right to say [Plato: Phaedrus, 244a] that madness has brought ")
+wxT("the greatest of blessings upon mankind. In rare individual cases this portion ")
+wxT("of madness may, indeed, actually have been the means by which such a nature, ")
+wxT("excessive in all directions, was held firmly together: in the life of ")
+wxT("individuals, too, illusions that are in themselves poisons often play the role ")
+wxT("of healers; yet, in the end, in the case of every \"genius\" who believes in his ")
+wxT("own divinity the poison shows itself to the same degree as his \"genius\" grows ")
+wxT("old: one may recall, for example, the case of Napoleon, whose nature certainly ")
+wxT("grew into the mighty unity that sets him apart from all men of modern times ")
+wxT("precisely through his belief in himself and his star and through the contempt ")
+wxT("for men that flowed from it; until in the end, however, this same belief went ")
+wxT("over into an almost insane fatalism, robbed him of his acuteness and swiftness ")
+wxT("of perception, and became the cause of his destruction.");
--- samples/exec/exec.cpp-orig	2009-06-18 18:28:58.322662000 -0500
+++ samples/exec/exec.cpp	2009-06-18 18:29:04.673788000 -0500
@@ -204,7 +204,7 @@ protected:
     void DoSend()
     {
         wxString s(m_textOut->GetValue());
-        s += _T('\n');
+        s += wxT('\n');
         m_out.Write(s.c_str(), s.length());
         m_textOut->Clear();
 
@@ -318,7 +318,7 @@ enum
     Exec_Btn_Close
 };
 
-static const wxChar *DIALOG_TITLE = _T("Exec sample");
+static const wxChar *DIALOG_TITLE = wxT("Exec sample");
 
 // ----------------------------------------------------------------------------
 // event tables and other macros for wxWidgets
@@ -387,7 +387,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("Exec wxWidgets sample"),
+    MyFrame *frame = new MyFrame(wxT("Exec wxWidgets sample"),
                                  wxDefaultPosition, wxSize(500, 140));
 
     // Show it and tell the application that it's our main window
@@ -423,48 +423,48 @@ MyFrame::MyFrame(const wxString& title, 
 
     // create a menu bar
     wxMenu *menuFile = new wxMenu(wxEmptyString, wxMENU_TEAROFF);
-    menuFile->Append(Exec_Kill, _T("&Kill process...\tCtrl-K"),
-                     _T("Kill a process by PID"));
+    menuFile->Append(Exec_Kill, wxT("&Kill process...\tCtrl-K"),
+                     wxT("Kill a process by PID"));
     menuFile->AppendSeparator();
-    menuFile->Append(Exec_ClearLog, _T("&Clear log\tCtrl-C"),
-                     _T("Clear the log window"));
+    menuFile->Append(Exec_ClearLog, wxT("&Clear log\tCtrl-C"),
+                     wxT("Clear the log window"));
     menuFile->AppendSeparator();
-    menuFile->Append(Exec_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Exec_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *execMenu = new wxMenu;
-    execMenu->Append(Exec_SyncExec, _T("Sync &execution...\tCtrl-E"),
-                     _T("Launch a program and return when it terminates"));
-    execMenu->Append(Exec_AsyncExec, _T("&Async execution...\tCtrl-A"),
-                     _T("Launch a program and return immediately"));
-    execMenu->Append(Exec_Shell, _T("Execute &shell command...\tCtrl-S"),
-                     _T("Launch a shell and execute a command in it"));
+    execMenu->Append(Exec_SyncExec, wxT("Sync &execution...\tCtrl-E"),
+                     wxT("Launch a program and return when it terminates"));
+    execMenu->Append(Exec_AsyncExec, wxT("&Async execution...\tCtrl-A"),
+                     wxT("Launch a program and return immediately"));
+    execMenu->Append(Exec_Shell, wxT("Execute &shell command...\tCtrl-S"),
+                     wxT("Launch a shell and execute a command in it"));
     execMenu->AppendSeparator();
-    execMenu->Append(Exec_Redirect, _T("Capture command &output...\tCtrl-O"),
-                     _T("Launch a program and capture its output"));
-    execMenu->Append(Exec_Pipe, _T("&Pipe through command..."),
-                     _T("Pipe a string through a filter"));
-    execMenu->Append(Exec_POpen, _T("&Open a pipe to a command...\tCtrl-P"),
-                     _T("Open a pipe to and from another program"));
+    execMenu->Append(Exec_Redirect, wxT("Capture command &output...\tCtrl-O"),
+                     wxT("Launch a program and capture its output"));
+    execMenu->Append(Exec_Pipe, wxT("&Pipe through command..."),
+                     wxT("Pipe a string through a filter"));
+    execMenu->Append(Exec_POpen, wxT("&Open a pipe to a command...\tCtrl-P"),
+                     wxT("Open a pipe to and from another program"));
 
     execMenu->AppendSeparator();
-    execMenu->Append(Exec_OpenFile, _T("Open &file...\tCtrl-F"),
-                     _T("Launch the command to open this kind of files"));
-    execMenu->Append(Exec_OpenURL, _T("Open &URL...\tCtrl-U"),
-                     _T("Launch the default browser with the given URL"));
+    execMenu->Append(Exec_OpenFile, wxT("Open &file...\tCtrl-F"),
+                     wxT("Launch the command to open this kind of files"));
+    execMenu->Append(Exec_OpenURL, wxT("Open &URL...\tCtrl-U"),
+                     wxT("Launch the default browser with the given URL"));
 #ifdef __WINDOWS__
     execMenu->AppendSeparator();
-    execMenu->Append(Exec_DDEExec, _T("Execute command via &DDE...\tCtrl-D"));
-    execMenu->Append(Exec_DDERequest, _T("Send DDE &request...\tCtrl-R"));
+    execMenu->Append(Exec_DDEExec, wxT("Execute command via &DDE...\tCtrl-D"));
+    execMenu->Append(Exec_DDERequest, wxT("Send DDE &request...\tCtrl-R"));
 #endif
 
     wxMenu *helpMenu = new wxMenu(wxEmptyString, wxMENU_TEAROFF);
-    helpMenu->Append(Exec_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Exec_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(execMenu, _T("&Exec"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(execMenu, wxT("&Exec"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -479,7 +479,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar();
-    SetStatusText(_T("Welcome to wxWidgets exec sample!"));
+    SetStatusText(wxT("Welcome to wxWidgets exec sample!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -500,15 +500,15 @@ void MyFrame::OnClear(wxCommandEvent& WX
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Exec wxWidgets Sample\n(c) 2000-2002 Vadim Zeitlin"),
-                 _T("About Exec"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(wxT("Exec wxWidgets Sample\n(c) 2000-2002 Vadim Zeitlin"),
+                 wxT("About Exec"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnKill(wxCommandEvent& WXUNUSED(event))
 {
-    long pid = wxGetNumberFromUser(_T("Please specify the process to kill"),
-                                   _T("Enter PID:"),
-                                   _T("Exec question"),
+    long pid = wxGetNumberFromUser(wxT("Please specify the process to kill"),
+                                   wxT("Enter PID:"),
+                                   wxT("Exec question"),
                                    m_pidLast,
                                    // we need the full unsigned int range
                                    -INT_MAX, INT_MAX,
@@ -521,32 +521,32 @@ void MyFrame::OnKill(wxCommandEvent& WXU
 
     static const wxString signalNames[] =
     {
-        _T("Just test (SIGNONE)"),
-        _T("Hangup (SIGHUP)"),
-        _T("Interrupt (SIGINT)"),
-        _T("Quit (SIGQUIT)"),
-        _T("Illegal instruction (SIGILL)"),
-        _T("Trap (SIGTRAP)"),
-        _T("Abort (SIGABRT)"),
-        _T("Emulated trap (SIGEMT)"),
-        _T("FP exception (SIGFPE)"),
-        _T("Kill (SIGKILL)"),
-        _T("Bus (SIGBUS)"),
-        _T("Segment violation (SIGSEGV)"),
-        _T("System (SIGSYS)"),
-        _T("Broken pipe (SIGPIPE)"),
-        _T("Alarm (SIGALRM)"),
-        _T("Terminate (SIGTERM)"),
+        wxT("Just test (SIGNONE)"),
+        wxT("Hangup (SIGHUP)"),
+        wxT("Interrupt (SIGINT)"),
+        wxT("Quit (SIGQUIT)"),
+        wxT("Illegal instruction (SIGILL)"),
+        wxT("Trap (SIGTRAP)"),
+        wxT("Abort (SIGABRT)"),
+        wxT("Emulated trap (SIGEMT)"),
+        wxT("FP exception (SIGFPE)"),
+        wxT("Kill (SIGKILL)"),
+        wxT("Bus (SIGBUS)"),
+        wxT("Segment violation (SIGSEGV)"),
+        wxT("System (SIGSYS)"),
+        wxT("Broken pipe (SIGPIPE)"),
+        wxT("Alarm (SIGALRM)"),
+        wxT("Terminate (SIGTERM)"),
     };
 
-    int sig = wxGetSingleChoiceIndex(_T("How to kill the process?"),
-                                     _T("Exec question"),
+    int sig = wxGetSingleChoiceIndex(wxT("How to kill the process?"),
+                                     wxT("Exec question"),
                                      WXSIZEOF(signalNames), signalNames,
                                      this);
     switch ( sig )
     {
         default:
-            wxFAIL_MSG( _T("unexpected return value") );
+            wxFAIL_MSG( wxT("unexpected return value") );
             // fall through
 
         case -1:
@@ -575,29 +575,29 @@ void MyFrame::OnKill(wxCommandEvent& WXU
     if ( sig == 0 )
     {
         if ( wxProcess::Exists(pid) )
-            wxLogStatus(_T("Process %ld is running."), pid);
+            wxLogStatus(wxT("Process %ld is running."), pid);
         else
-            wxLogStatus(_T("No process with pid = %ld."), pid);
+            wxLogStatus(wxT("No process with pid = %ld."), pid);
     }
     else // not SIGNONE
     {
         wxKillError rc = wxProcess::Kill(pid, (wxSignal)sig);
         if ( rc == wxKILL_OK )
         {
-            wxLogStatus(_T("Process %ld killed with signal %d."), pid, sig);
+            wxLogStatus(wxT("Process %ld killed with signal %d."), pid, sig);
         }
         else
         {
             static const wxChar *errorText[] =
             {
-                _T(""), // no error
-                _T("signal not supported"),
-                _T("permission denied"),
-                _T("no such process"),
-                _T("unspecified error"),
+                wxT(""), // no error
+                wxT("signal not supported"),
+                wxT("permission denied"),
+                wxT("no such process"),
+                wxT("unspecified error"),
             };
 
-            wxLogStatus(_T("Failed to kill process %ld with signal %d: %s"),
+            wxLogStatus(wxT("Failed to kill process %ld with signal %d: %s"),
                         pid, sig, errorText[rc]);
         }
     }
@@ -613,13 +613,13 @@ void MyFrame::DoAsyncExec(const wxString
     m_pidLast = wxExecute(cmd, wxEXEC_ASYNC, process);
     if ( !m_pidLast )
     {
-        wxLogError( _T("Execution of '%s' failed."), cmd.c_str() );
+        wxLogError( wxT("Execution of '%s' failed."), cmd.c_str() );
 
         delete process;
     }
     else
     {
-        wxLogStatus( _T("Process %ld (%s) launched."),
+        wxLogStatus( wxT("Process %ld (%s) launched."),
             m_pidLast, cmd.c_str() );
 
         m_cmdLast = cmd;
@@ -628,18 +628,18 @@ void MyFrame::DoAsyncExec(const wxString
 
 void MyFrame::OnSyncExec(wxCommandEvent& WXUNUSED(event))
 {
-    wxString cmd = wxGetTextFromUser(_T("Enter the command: "),
+    wxString cmd = wxGetTextFromUser(wxT("Enter the command: "),
                                      DIALOG_TITLE,
                                      m_cmdLast);
 
     if ( !cmd )
         return;
 
-    wxLogStatus( _T("'%s' is running please wait..."), cmd.c_str() );
+    wxLogStatus( wxT("'%s' is running please wait..."), cmd.c_str() );
 
     int code = wxExecute(cmd, wxEXEC_SYNC);
 
-    wxLogStatus(_T("Process '%s' terminated with exit code %d."),
+    wxLogStatus(wxT("Process '%s' terminated with exit code %d."),
         cmd.c_str(), code);
 
     m_cmdLast = cmd;
@@ -647,7 +647,7 @@ void MyFrame::OnSyncExec(wxCommandEvent&
 
 void MyFrame::OnAsyncExec(wxCommandEvent& WXUNUSED(event))
 {
-    wxString cmd = wxGetTextFromUser(_T("Enter the command: "),
+    wxString cmd = wxGetTextFromUser(wxT("Enter the command: "),
                                      DIALOG_TITLE,
                                      m_cmdLast);
 
@@ -659,7 +659,7 @@ void MyFrame::OnAsyncExec(wxCommandEvent
 
 void MyFrame::OnShell(wxCommandEvent& WXUNUSED(event))
 {
-    wxString cmd = wxGetTextFromUser(_T("Enter the command: "),
+    wxString cmd = wxGetTextFromUser(wxT("Enter the command: "),
                                      DIALOG_TITLE,
                                      m_cmdLast);
 
@@ -667,14 +667,14 @@ void MyFrame::OnShell(wxCommandEvent& WX
         return;
 
     int code = wxShell(cmd);
-    wxLogStatus(_T("Shell command '%s' terminated with exit code %d."),
+    wxLogStatus(wxT("Shell command '%s' terminated with exit code %d."),
                 cmd.c_str(), code);
     m_cmdLast = cmd;
 }
 
 void MyFrame::OnExecWithRedirect(wxCommandEvent& WXUNUSED(event))
 {
-    wxString cmd = wxGetTextFromUser(_T("Enter the command: "),
+    wxString cmd = wxGetTextFromUser(wxT("Enter the command: "),
                                      DIALOG_TITLE,
                                      m_cmdLast);
 
@@ -682,8 +682,8 @@ void MyFrame::OnExecWithRedirect(wxComma
         return;
 
     bool sync;
-    switch ( wxMessageBox(_T("Execute it synchronously?"),
-                          _T("Exec question"),
+    switch ( wxMessageBox(wxT("Execute it synchronously?"),
+                          wxT("Exec question"),
                           wxYES_NO | wxCANCEL | wxICON_QUESTION, this) )
     {
         case wxYES:
@@ -702,13 +702,13 @@ void MyFrame::OnExecWithRedirect(wxComma
     {
         wxArrayString output, errors;
         int code = wxExecute(cmd, output, errors);
-        wxLogStatus(_T("command '%s' terminated with exit code %d."),
+        wxLogStatus(wxT("command '%s' terminated with exit code %d."),
                     cmd.c_str(), code);
 
         if ( code != -1 )
         {
-            ShowOutput(cmd, output, _T("Output"));
-            ShowOutput(cmd, errors, _T("Errors"));
+            ShowOutput(cmd, output, wxT("Output"));
+            ShowOutput(cmd, errors, wxT("Errors"));
         }
     }
     else // async exec
@@ -716,7 +716,7 @@ void MyFrame::OnExecWithRedirect(wxComma
         MyPipedProcess *process = new MyPipedProcess(this, cmd);
         if ( !wxExecute(cmd, wxEXEC_ASYNC, process) )
         {
-            wxLogError(_T("Execution of '%s' failed."), cmd.c_str());
+            wxLogError(wxT("Execution of '%s' failed."), cmd.c_str());
 
             delete process;
         }
@@ -732,16 +732,16 @@ void MyFrame::OnExecWithRedirect(wxComma
 void MyFrame::OnExecWithPipe(wxCommandEvent& WXUNUSED(event))
 {
     if ( !m_cmdLast )
-        m_cmdLast = _T("tr [a-z] [A-Z]");
+        m_cmdLast = wxT("tr [a-z] [A-Z]");
 
-    wxString cmd = wxGetTextFromUser(_T("Enter the command: "),
+    wxString cmd = wxGetTextFromUser(wxT("Enter the command: "),
                                      DIALOG_TITLE,
                                      m_cmdLast);
 
     if ( !cmd )
         return;
 
-    wxString input = wxGetTextFromUser(_T("Enter the string to send to it: "),
+    wxString input = wxGetTextFromUser(wxT("Enter the string to send to it: "),
                                        DIALOG_TITLE);
     if ( !input )
         return;
@@ -751,13 +751,13 @@ void MyFrame::OnExecWithPipe(wxCommandEv
     long pid = wxExecute(cmd, wxEXEC_ASYNC, process);
     if ( pid )
     {
-        wxLogStatus( _T("Process %ld (%s) launched."), pid, cmd.c_str() );
+        wxLogStatus( wxT("Process %ld (%s) launched."), pid, cmd.c_str() );
 
         AddAsyncProcess(process);
     }
     else
     {
-        wxLogError(_T("Execution of '%s' failed."), cmd.c_str());
+        wxLogError(wxT("Execution of '%s' failed."), cmd.c_str());
 
         delete process;
     }
@@ -767,7 +767,7 @@ void MyFrame::OnExecWithPipe(wxCommandEv
 
 void MyFrame::OnPOpen(wxCommandEvent& WXUNUSED(event))
 {
-    wxString cmd = wxGetTextFromUser(_T("Enter the command to launch: "),
+    wxString cmd = wxGetTextFromUser(wxT("Enter the command to launch: "),
                                      DIALOG_TITLE,
                                      m_cmdLast);
     if ( cmd.empty() )
@@ -776,23 +776,23 @@ void MyFrame::OnPOpen(wxCommandEvent& WX
     wxProcess *process = wxProcess::Open(cmd);
     if ( !process )
     {
-        wxLogError(_T("Failed to launch the command."));
+        wxLogError(wxT("Failed to launch the command."));
         return;
     }
 
-    wxLogVerbose(_T("PID of the new process: %ld"), process->GetPid());
+    wxLogVerbose(wxT("PID of the new process: %ld"), process->GetPid());
 
     wxOutputStream *out = process->GetOutputStream();
     if ( !out )
     {
-        wxLogError(_T("Failed to connect to child stdin"));
+        wxLogError(wxT("Failed to connect to child stdin"));
         return;
     }
 
     wxInputStream *in = process->GetInputStream();
     if ( !in )
     {
-        wxLogError(_T("Failed to connect to child stdout"));
+        wxLogError(wxT("Failed to connect to child stdout"));
         return;
     }
 
@@ -806,9 +806,9 @@ void MyFrame::OnFileExec(wxCommandEvent&
     wxString filename;
 
 #if wxUSE_FILEDLG
-    filename = wxLoadFileSelector(_T("any file"), NULL, s_filename, this);
+    filename = wxLoadFileSelector(wxT("any file"), NULL, s_filename, this);
 #else // !wxUSE_FILEDLG
-    filename = wxGetTextFromUser(_T("Enter the file name"), _T("exec sample"),
+    filename = wxGetTextFromUser(wxT("Enter the file name"), wxT("exec sample"),
                                  s_filename, this);
 #endif // wxUSE_FILEDLG/!wxUSE_FILEDLG
 
@@ -817,11 +817,11 @@ void MyFrame::OnFileExec(wxCommandEvent&
 
     s_filename = filename;
 
-    wxString ext = filename.AfterLast(_T('.'));
+    wxString ext = filename.AfterLast(wxT('.'));
     wxFileType *ft = wxTheMimeTypesManager->GetFileTypeFromExtension(ext);
     if ( !ft )
     {
-        wxLogError(_T("Impossible to determine the file type for extension '%s'"),
+        wxLogError(wxT("Impossible to determine the file type for extension '%s'"),
                    ext.c_str());
         return;
     }
@@ -832,7 +832,7 @@ void MyFrame::OnFileExec(wxCommandEvent&
     delete ft;
     if ( !ok )
     {
-        wxLogError(_T("Impossible to find out how to open files of extension '%s'"),
+        wxLogError(wxT("Impossible to find out how to open files of extension '%s'"),
                    ext.c_str());
         return;
     }
@@ -846,8 +846,8 @@ void MyFrame::OnOpenURL(wxCommandEvent& 
 
     wxString filename = wxGetTextFromUser
                         (
-                            _T("Enter the URL"),
-                            _T("exec sample"),
+                            wxT("Enter the URL"),
+                            wxT("exec sample"),
                             s_filename,
                             this
                         );
@@ -858,7 +858,7 @@ void MyFrame::OnOpenURL(wxCommandEvent& 
     s_filename = filename;
 
     if ( !wxLaunchDefaultBrowser(s_filename) )
-        wxLogError(_T("Failed to open URL \"%s\""), s_filename.c_str());
+        wxLogError(wxT("Failed to open URL \"%s\""), s_filename.c_str());
 }
 
 // ----------------------------------------------------------------------------
@@ -869,20 +869,20 @@ void MyFrame::OnOpenURL(wxCommandEvent& 
 
 bool MyFrame::GetDDEServer()
 {
-    wxString server = wxGetTextFromUser(_T("Server to connect to:"),
+    wxString server = wxGetTextFromUser(wxT("Server to connect to:"),
                                         DIALOG_TITLE, m_server);
     if ( !server )
         return false;
 
     m_server = server;
 
-    wxString topic = wxGetTextFromUser(_T("DDE topic:"), DIALOG_TITLE, m_topic);
+    wxString topic = wxGetTextFromUser(wxT("DDE topic:"), DIALOG_TITLE, m_topic);
     if ( !topic )
         return false;
 
     m_topic = topic;
 
-    wxString cmd = wxGetTextFromUser(_T("DDE command:"), DIALOG_TITLE, m_cmdDde);
+    wxString cmd = wxGetTextFromUser(wxT("DDE command:"), DIALOG_TITLE, m_cmdDde);
     if ( !cmd )
         return false;
 
@@ -900,19 +900,19 @@ void MyFrame::OnDDEExec(wxCommandEvent& 
     wxConnectionBase *conn = client.MakeConnection(wxEmptyString, m_server, m_topic);
     if ( !conn )
     {
-        wxLogError(_T("Failed to connect to the DDE server '%s'."),
+        wxLogError(wxT("Failed to connect to the DDE server '%s'."),
                    m_server.c_str());
     }
     else
     {
         if ( !conn->Execute(m_cmdDde) )
         {
-            wxLogError(_T("Failed to execute command '%s' via DDE."),
+            wxLogError(wxT("Failed to execute command '%s' via DDE."),
                        m_cmdDde.c_str());
         }
         else
         {
-            wxLogStatus(_T("Successfully executed DDE command"));
+            wxLogStatus(wxT("Successfully executed DDE command"));
         }
     }
 }
@@ -926,19 +926,19 @@ void MyFrame::OnDDERequest(wxCommandEven
     wxConnectionBase *conn = client.MakeConnection(wxEmptyString, m_server, m_topic);
     if ( !conn )
     {
-        wxLogError(_T("Failed to connect to the DDE server '%s'."),
+        wxLogError(wxT("Failed to connect to the DDE server '%s'."),
                    m_server.c_str());
     }
     else
     {
         if ( !conn->Request(m_cmdDde) )
         {
-            wxLogError(_T("Failed to  send request '%s' via DDE."),
+            wxLogError(wxT("Failed to  send request '%s' via DDE."),
                        m_cmdDde.c_str());
         }
         else
         {
-            wxLogStatus(_T("Successfully sent DDE request."));
+            wxLogStatus(wxT("Successfully sent DDE request."));
         }
     }
 }
@@ -981,7 +981,7 @@ void MyFrame::ShowOutput(const wxString&
     if ( !count )
         return;
 
-    m_lbox->Append(wxString::Format(_T("--- %s of '%s' ---"),
+    m_lbox->Append(wxString::Format(wxT("--- %s of '%s' ---"),
                                     title.c_str(), cmd.c_str()));
 
     for ( size_t n = 0; n < count; n++ )
@@ -989,7 +989,7 @@ void MyFrame::ShowOutput(const wxString&
         m_lbox->Append(output[n]);
     }
 
-    m_lbox->Append(wxString::Format(_T("--- End of %s ---"),
+    m_lbox->Append(wxString::Format(wxT("--- End of %s ---"),
                                     title.Lower().c_str()));
 }
 
@@ -999,7 +999,7 @@ void MyFrame::ShowOutput(const wxString&
 
 void MyProcess::OnTerminate(int pid, int status)
 {
-    wxLogStatus(m_parent, _T("Process %u ('%s') terminated with exit code %d."),
+    wxLogStatus(m_parent, wxT("Process %u ('%s') terminated with exit code %d."),
                 pid, m_cmd.c_str(), status);
 
     // we're not needed any more
@@ -1020,7 +1020,7 @@ bool MyPipedProcess::HasInput()
 
         // this assumes that the output is always line buffered
         wxString msg;
-        msg << m_cmd << _T(" (stdout): ") << tis.ReadLine();
+        msg << m_cmd << wxT(" (stdout): ") << tis.ReadLine();
 
         m_parent->GetLogListBox()->Append(msg);
 
@@ -1033,7 +1033,7 @@ bool MyPipedProcess::HasInput()
 
         // this assumes that the output is always line buffered
         wxString msg;
-        msg << m_cmd << _T(" (stderr): ") << tis.ReadLine();
+        msg << m_cmd << wxT(" (stderr): ") << tis.ReadLine();
 
         m_parent->GetLogListBox()->Append(msg);
 
@@ -1110,13 +1110,13 @@ MyPipeFrame::MyPipeFrame(wxFrame *parent
 
     wxSizer *sizerBtns = new wxBoxSizer(wxHORIZONTAL);
     sizerBtns->
-        Add(new wxButton(panel, Exec_Btn_Send, _T("&Send")), 0, wxALL, 5);
+        Add(new wxButton(panel, Exec_Btn_Send, wxT("&Send")), 0, wxALL, 5);
     sizerBtns->
-        Add(new wxButton(panel, Exec_Btn_SendFile, _T("&File...")), 0, wxALL, 5);
+        Add(new wxButton(panel, Exec_Btn_SendFile, wxT("&File...")), 0, wxALL, 5);
     sizerBtns->
-        Add(new wxButton(panel, Exec_Btn_Get, _T("&Get")), 0, wxALL, 5);
+        Add(new wxButton(panel, Exec_Btn_Get, wxT("&Get")), 0, wxALL, 5);
     sizerBtns->
-        Add(new wxButton(panel, Exec_Btn_Close, _T("&Close")), 0, wxALL, 5);
+        Add(new wxButton(panel, Exec_Btn_Close, wxT("&Close")), 0, wxALL, 5);
 
     sizerTop->Add(sizerBtns, 0, wxCENTRE | wxALL, 5);
     sizerTop->Add(m_textIn, 1, wxGROW | wxALL, 5);
@@ -1131,11 +1131,11 @@ MyPipeFrame::MyPipeFrame(wxFrame *parent
 void MyPipeFrame::OnBtnSendFile(wxCommandEvent& WXUNUSED(event))
 {
 #if wxUSE_FILEDLG
-    wxFileDialog filedlg(this, _T("Select file to send"));
+    wxFileDialog filedlg(this, wxT("Select file to send"));
     if ( filedlg.ShowModal() != wxID_OK )
         return;
 
-    wxFFile file(filedlg.GetFilename(), _T("r"));
+    wxFFile file(filedlg.GetFilename(), wxT("r"));
     wxString data;
     if ( !file.IsOpened() || !file.ReadAll(&data) )
         return;
@@ -1174,7 +1174,7 @@ void MyPipeFrame::DoGetFromStream(wxText
     while ( in.CanRead() )
     {
         wxChar buffer[4096];
-        buffer[in.Read(buffer, WXSIZEOF(buffer) - 1).LastRead()] = _T('\0');
+        buffer[in.Read(buffer, WXSIZEOF(buffer) - 1).LastRead()] = wxT('\0');
 
         text->AppendText(buffer);
     }
@@ -1223,7 +1223,7 @@ void MyPipeFrame::OnProcessTerm(wxProces
     delete m_process;
     m_process = NULL;
 
-    wxLogWarning(_T("The other process has terminated, closing"));
+    wxLogWarning(wxT("The other process has terminated, closing"));
 
     DisableInput();
     DisableOutput();
--- samples/htlbox/htlbox.cpp-orig	2009-06-18 18:28:30.467283000 -0500
+++ samples/htlbox/htlbox.cpp	2009-06-18 18:28:36.391110000 -0500
@@ -128,7 +128,7 @@ public:
     void OnLboxSelect(wxCommandEvent& event);
     void OnLboxDClick(wxCommandEvent& event)
     {
-        wxLogMessage(_T("Listbox item %d double clicked."), event.GetInt());
+        wxLogMessage(wxT("Listbox item %d double clicked."), event.GetInt());
     }
     
     void OnHtmlLinkClicked(wxHtmlLinkEvent& event);
@@ -234,7 +234,7 @@ IMPLEMENT_APP(MyApp)
 
 // frame constructor
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("HtmlLbox wxWidgets Sample"),
+       : wxFrame(NULL, wxID_ANY, wxT("HtmlLbox wxWidgets Sample"),
                  wxDefaultPosition, wxSize(500, 500))
 {
     // set the frame icon
@@ -243,47 +243,47 @@ MyFrame::MyFrame()
 #if wxUSE_MENUS
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
-    menuFile->AppendRadioItem(HtmlLbox_CustomBox, _T("Use custom box"), 
-                              _T("Use a wxHtmlListBox virtual class control"));
-    menuFile->AppendRadioItem(HtmlLbox_SimpleBox, _T("Use simple box"), 
-                              _T("Use a wxSimpleHtmlListBox control"));
+    menuFile->AppendRadioItem(HtmlLbox_CustomBox, wxT("Use custom box"), 
+                              wxT("Use a wxHtmlListBox virtual class control"));
+    menuFile->AppendRadioItem(HtmlLbox_SimpleBox, wxT("Use simple box"), 
+                              wxT("Use a wxSimpleHtmlListBox control"));
     menuFile->AppendSeparator();
-    menuFile->Append(HtmlLbox_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(HtmlLbox_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // create our specific menu
     wxMenu *menuHLbox = new wxMenu;
     menuHLbox->Append(HtmlLbox_SetMargins,
-                      _T("Set &margins...\tCtrl-G"),
-                      _T("Change the margins around the items"));
+                      wxT("Set &margins...\tCtrl-G"),
+                      wxT("Change the margins around the items"));
     menuHLbox->AppendCheckItem(HtmlLbox_DrawSeparator,
-                               _T("&Draw separators\tCtrl-D"),
-                               _T("Toggle drawing separators between cells"));
+                               wxT("&Draw separators\tCtrl-D"),
+                               wxT("Toggle drawing separators between cells"));
     menuHLbox->AppendSeparator();
     menuHLbox->AppendCheckItem(HtmlLbox_ToggleMulti,
-                               _T("&Multiple selection\tCtrl-M"),
-                               _T("Toggle multiple selection on/off"));
+                               wxT("&Multiple selection\tCtrl-M"),
+                               wxT("Toggle multiple selection on/off"));
     menuHLbox->AppendSeparator();
-    menuHLbox->Append(HtmlLbox_SelectAll, _T("Select &all items\tCtrl-A"));
-    menuHLbox->Append(HtmlLbox_UpdateItem, _T("Update &first item\tCtrl-U"));
+    menuHLbox->Append(HtmlLbox_SelectAll, wxT("Select &all items\tCtrl-A"));
+    menuHLbox->Append(HtmlLbox_UpdateItem, wxT("Update &first item\tCtrl-U"));
     menuHLbox->AppendSeparator();
-    menuHLbox->Append(HtmlLbox_SetBgCol, _T("Set &background...\tCtrl-B"));
+    menuHLbox->Append(HtmlLbox_SetBgCol, wxT("Set &background...\tCtrl-B"));
     menuHLbox->Append(HtmlLbox_SetSelBgCol,
-                      _T("Set &selection background...\tCtrl-S"));
+                      wxT("Set &selection background...\tCtrl-S"));
     menuHLbox->AppendCheckItem(HtmlLbox_SetSelFgCol,
-                               _T("Keep &foreground in selection\tCtrl-F"));
+                               wxT("Keep &foreground in selection\tCtrl-F"));
 
     menuHLbox->AppendSeparator();
-    menuHLbox->Append(HtmlLbox_Clear, _T("&Clear\tCtrl-L"));
+    menuHLbox->Append(HtmlLbox_Clear, wxT("&Clear\tCtrl-L"));
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(HtmlLbox_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(HtmlLbox_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(menuHLbox, _T("&Listbox"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(menuHLbox, wxT("&Listbox"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     menuBar->Check(HtmlLbox_DrawSeparator, true);
 
@@ -294,12 +294,12 @@ MyFrame::MyFrame()
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
     
     // create the child controls
     CreateBox();
-    wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, _T(""),
+    wxTextCtrl *text = new wxTextCtrl(this, wxID_ANY, wxT(""),
                                       wxDefaultPosition, wxDefaultSize,
                                       wxTE_MULTILINE);
     delete wxLog::SetActiveTarget(new wxLogTextCtrl(text));
@@ -341,9 +341,9 @@ void MyFrame::CreateBox()
                          (unsigned char)(abs((int)n - 128) % 256));
             int level = n % 6 + 1;
 
-            wxString label = wxString::Format(_T("<h%d><font color=%s>")
-                    _T("Item</font> <b>%lu</b>")
-                    _T("</h%d>"),
+            wxString label = wxString::Format(wxT("<h%d><font color=%s>")
+                    wxT("Item</font> <b>%lu</b>")
+                    wxT("</h%d>"),
                     level,
                     clr.GetAsString(wxC2S_HTML_SYNTAX).c_str(),
                     (unsigned long)n, level);
@@ -380,10 +380,10 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("This sample shows wxHtmlListBox class.\n")
-                 _T("\n")
-                 _T("(c) 2003 Vadim Zeitlin"),
-                 _T("About HtmlLbox"),
+    wxMessageBox(wxT("This sample shows wxHtmlListBox class.\n")
+                 wxT("\n")
+                 wxT("(c) 2003 Vadim Zeitlin"),
+                 wxT("About HtmlLbox"),
                  wxOK | wxICON_INFORMATION,
                  this);
 }
@@ -392,9 +392,9 @@ void MyFrame::OnSetMargins(wxCommandEven
 {
     long margin = wxGetNumberFromUser
                   (
-                    _T("Enter the margins to use for the listbox items."),
-                    _T("Margin: "),
-                    _T("HtmlLbox: Set the margins"),
+                    wxT("Enter the margins to use for the listbox items."),
+                    wxT("Margin: "),
+                    wxT("HtmlLbox: Set the margins"),
                     0, 0, 20,
                     this
                   );
@@ -443,7 +443,7 @@ void MyFrame::OnSetBgCol(wxCommandEvent&
         m_hlbox->Refresh();
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("Background colour changed."));
+        SetStatusText(wxT("Background colour changed."));
 #endif // wxUSE_STATUSBAR
     }
 }
@@ -457,7 +457,7 @@ void MyFrame::OnSetSelBgCol(wxCommandEve
         m_hlbox->Refresh();
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("Selection background colour changed."));
+        SetStatusText(wxT("Selection background colour changed."));
 #endif // wxUSE_STATUSBAR
     }
 }
@@ -508,7 +508,7 @@ void MyFrame::OnHtmlCellClicked(wxHtmlCe
 
 void MyFrame::OnLboxSelect(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Listbox selection is now %d."), event.GetInt());
+    wxLogMessage(wxT("Listbox selection is now %d."), event.GetInt());
 
     if ( m_hlbox->HasMultipleSelection() )
     {
@@ -523,18 +523,18 @@ void MyFrame::OnLboxSelect(wxCommandEven
             if ( first )
                 first = false;
             else
-                s << _T(", ");
+                s << wxT(", ");
 
             s << item;
         }
 
         if ( !s.empty() )
-            wxLogMessage(_T("Selected items: %s"), s.c_str());
+            wxLogMessage(wxT("Selected items: %s"), s.c_str());
     }
 
 #if wxUSE_STATUSBAR
     SetStatusText(wxString::Format(
-                    _T("# items selected = %lu"),
+                    wxT("# items selected = %lu"),
                     (unsigned long)m_hlbox->GetSelectedCount()
                   ));
 #endif // wxUSE_STATUSBAR
@@ -558,9 +558,9 @@ MyHtmlListBox::MyHtmlListBox(wxWindow *p
     SetMargins(5, 5);
 
 #ifdef USE_HTML_FILE
-    if ( !m_file.Open(_T("results")) )
+    if ( !m_file.Open(wxT("results")) )
     {
-        wxLogError(_T("Failed to open results file"));
+        wxLogError(wxT("Failed to open results file"));
     }
     else
     {
@@ -588,7 +588,7 @@ wxString MyHtmlListBox::OnGetItem(size_t
 {
     if ( !n && m_firstItemUpdated )
     {
-        return wxString::Format(_T("<h1><b>Just updated</b></h1>"));
+        return wxString::Format(wxT("<h1><b>Just updated</b></h1>"));
     }
 
 #ifdef USE_HTML_FILE
@@ -604,18 +604,18 @@ wxString MyHtmlListBox::OnGetItem(size_t
                  (unsigned char)(abs((int)n - 256) % 256),
                  (unsigned char)(abs((int)n - 128) % 256));
 
-    wxString label = wxString::Format(_T("<h%d><font color=%s>")
-                                      _T("Item</font> <b>%lu</b>")
-                                      _T("</h%d>"),
+    wxString label = wxString::Format(wxT("<h%d><font color=%s>")
+                                      wxT("Item</font> <b>%lu</b>")
+                                      wxT("</h%d>"),
                                       level,
                                       clr.GetAsString(wxC2S_HTML_SYNTAX).c_str(),
                                       (unsigned long)n, level);
     if ( n == 1 )
     {
         if ( !m_linkClicked )
-            label += _T("<a href='1'>Click here...</a>");
+            label += wxT("<a href='1'>Click here...</a>");
         else
-            label += _T("<font color='#9999ff'>Clicked here...</font>");
+            label += wxT("<font color='#9999ff'>Clicked here...</font>");
     }
 
     return label;
--- samples/printing/printing.cpp-orig	2009-06-18 18:27:17.451290000 -0500
+++ samples/printing/printing.cpp	2009-06-18 18:27:34.621351000 -0500
@@ -94,7 +94,7 @@ bool MyApp::OnInit(void)
     g_pageSetupData->SetMarginBottomRight(wxPoint(15, 15));
 
     // Create the main frame window
-    frame = new MyFrame((wxFrame *) NULL, _T("wxWidgets Printing Demo"), 
+    frame = new MyFrame((wxFrame *) NULL, wxT("wxWidgets Printing Demo"), 
         wxPoint(0, 0), wxSize(400, 400));
 
 #if wxUSE_STATUSBAR
@@ -108,12 +108,12 @@ bool MyApp::OnInit(void)
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(WXPRINT_PRINT, _T("&Print..."),              _T("Print"));
-    file_menu->Append(WXPRINT_PAGE_SETUP, _T("Page Set&up..."),              _T("Page setup"));
+    file_menu->Append(WXPRINT_PRINT, wxT("&Print..."),              wxT("Print"));
+    file_menu->Append(WXPRINT_PAGE_SETUP, wxT("Page Set&up..."),              wxT("Page setup"));
 #ifdef __WXMAC__
-    file_menu->Append(WXPRINT_PAGE_MARGINS, _T("Page Margins..."), _T("Page margins"));
+    file_menu->Append(WXPRINT_PAGE_MARGINS, wxT("Page Margins..."), wxT("Page margins"));
 #endif
-    file_menu->Append(WXPRINT_PREVIEW, _T("Print Pre&view"),              _T("Preview"));
+    file_menu->Append(WXPRINT_PREVIEW, wxT("Print Pre&view"),              wxT("Preview"));
 
 #if wxUSE_ACCEL
     // Accelerators
@@ -125,24 +125,24 @@ bool MyApp::OnInit(void)
 
 #if defined(__WXMSW__) && wxTEST_POSTSCRIPT_IN_MSW
     file_menu->AppendSeparator();
-    file_menu->Append(WXPRINT_PRINT_PS, _T("Print PostScript..."),              _T("Print (PostScript)"));
-    file_menu->Append(WXPRINT_PAGE_SETUP_PS, _T("Page Setup PostScript..."),              _T("Page setup (PostScript)"));
-    file_menu->Append(WXPRINT_PREVIEW_PS, _T("Print Preview PostScript"),              _T("Preview (PostScript)"));
+    file_menu->Append(WXPRINT_PRINT_PS, wxT("Print PostScript..."),              wxT("Print (PostScript)"));
+    file_menu->Append(WXPRINT_PAGE_SETUP_PS, wxT("Page Setup PostScript..."),              wxT("Page setup (PostScript)"));
+    file_menu->Append(WXPRINT_PREVIEW_PS, wxT("Print Preview PostScript"),              wxT("Preview (PostScript)"));
 #endif
 
     file_menu->AppendSeparator();
-    file_menu->Append(WXPRINT_ANGLEUP, _T("Angle up\tAlt-U"),                _T("Raise rotated text angle"));
-    file_menu->Append(WXPRINT_ANGLEDOWN, _T("Angle down\tAlt-D"),            _T("Lower rotated text angle"));
+    file_menu->Append(WXPRINT_ANGLEUP, wxT("Angle up\tAlt-U"),                wxT("Raise rotated text angle"));
+    file_menu->Append(WXPRINT_ANGLEDOWN, wxT("Angle down\tAlt-D"),            wxT("Lower rotated text angle"));
     file_menu->AppendSeparator();
-    file_menu->Append(WXPRINT_QUIT, _T("E&xit"),                _T("Exit program"));
+    file_menu->Append(WXPRINT_QUIT, wxT("E&xit"),                wxT("Exit program"));
 
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(WXPRINT_ABOUT, _T("&About"),              _T("About this demo"));
+    help_menu->Append(WXPRINT_ABOUT, wxT("&About"),              wxT("About this demo"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
-    menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(file_menu, wxT("&File"));
+    menu_bar->Append(help_menu, wxT("&Help"));
 
     // Associate the menu bar with the frame
     frame->SetMenuBar(menu_bar);
@@ -158,7 +158,7 @@ bool MyApp::OnInit(void)
     frame->Show();
 
 #if wxUSE_STATUSBAR
-    frame->SetStatusText(_T("Printing demo"));
+    frame->SetStatusText(wxT("Printing demo"));
 #endif // wxUSE_STATUSBAR
 
     SetTopWindow(frame);
@@ -218,13 +218,13 @@ void MyFrame::OnPrint(wxCommandEvent& WX
     wxPrintDialogData printDialogData(* g_printData);
 
     wxPrinter printer(& printDialogData);
-    MyPrintout printout(_T("My printout"));
+    MyPrintout printout(wxT("My printout"));
     if (!printer.Print(this, &printout, true /*prompt*/))
     {
         if (wxPrinter::GetLastError() == wxPRINTER_ERROR)
-            wxMessageBox(_T("There was a problem printing.\nPerhaps your current printer is not set correctly?"), _T("Printing"), wxOK);
+            wxMessageBox(wxT("There was a problem printing.\nPerhaps your current printer is not set correctly?"), wxT("Printing"), wxOK);
         else
-            wxMessageBox(_T("You canceled printing"), _T("Printing"), wxOK);
+            wxMessageBox(wxT("You canceled printing"), wxT("Printing"), wxOK);
     }
     else
     {
@@ -240,11 +240,11 @@ void MyFrame::OnPrintPreview(wxCommandEv
     if (!preview->Ok())
     {
         delete preview;
-        wxMessageBox(_T("There was a problem previewing.\nPerhaps your current printer is not set correctly?"), _T("Previewing"), wxOK);
+        wxMessageBox(wxT("There was a problem previewing.\nPerhaps your current printer is not set correctly?"), wxT("Previewing"), wxOK);
         return;
     }
 
-    wxPreviewFrame *frame = new wxPreviewFrame(preview, this, _T("Demo Print Preview"), wxPoint(100, 100), wxSize(600, 650));
+    wxPreviewFrame *frame = new wxPreviewFrame(preview, this, wxT("Demo Print Preview"), wxPoint(100, 100), wxSize(600, 650));
     frame->Centre(wxBOTH);
     frame->Initialize();
     frame->Show();
@@ -265,7 +265,7 @@ void MyFrame::OnPageSetup(wxCommandEvent
 void MyFrame::OnPrintPS(wxCommandEvent& WXUNUSED(event))
 {
     wxPostScriptPrinter printer(g_printData);
-    MyPrintout printout(_T("My printout"));
+    MyPrintout printout(wxT("My printout"));
     printer.Print(this, &printout, true/*prompt*/);
 
     (*g_printData) = printer.GetPrintData();
@@ -276,7 +276,7 @@ void MyFrame::OnPrintPreviewPS(wxCommand
     // Pass two printout objects: for preview, and possible printing.
     wxPrintDialogData printDialogData(* g_printData);
     wxPrintPreview *preview = new wxPrintPreview(new MyPrintout, new MyPrintout, & printDialogData);
-    wxPreviewFrame *frame = new wxPreviewFrame(preview, this, _T("Demo Print Preview"), wxPoint(100, 100), wxSize(600, 650));
+    wxPreviewFrame *frame = new wxPreviewFrame(preview, this, wxT("Demo Print Preview"), wxPoint(100, 100), wxSize(600, 650));
     frame->Centre(wxBOTH);
     frame->Initialize();
     frame->Show();
@@ -311,8 +311,8 @@ void MyFrame::OnPageMargins(wxCommandEve
 
 void MyFrame::OnPrintAbout(wxCommandEvent& WXUNUSED(event))
 {
-    (void)wxMessageBox(_T("wxWidgets printing demo\nAuthor: Julian Smart"),
-        _T("About wxWidgets printing demo"), wxOK|wxCENTRE);
+    (void)wxMessageBox(wxT("wxWidgets printing demo\nAuthor: Julian Smart"),
+        wxT("About wxWidgets printing demo"), wxOK|wxCENTRE);
 }
 
 void MyFrame::OnAngleUp(wxCommandEvent& WXUNUSED(event))
@@ -605,7 +605,7 @@ void MyPrintout::DrawPageTwo()
     dc->SetBrush(*wxTRANSPARENT_BRUSH);
 
     { // GetTextExtent demo:
-        wxString words[7] = {_T("This "), _T("is "), _T("GetTextExtent "), _T("testing "), _T("string. "), _T("Enjoy "), _T("it!")};
+        wxString words[7] = {wxT("This "), wxT("is "), wxT("GetTextExtent "), wxT("testing "), wxT("string. "), wxT("Enjoy "), wxT("it!")};
         long w, h;
         long x = 200, y= 250;
         wxFont fnt(15, wxSWISS, wxNORMAL, wxNORMAL);
@@ -627,7 +627,7 @@ void MyPrintout::DrawPageTwo()
 
     dc->SetFont(wxGetApp().m_testFont);
 
-    dc->DrawText(_T("Some test text"), 200, 300 );
+    dc->DrawText(wxT("Some test text"), 200, 300 );
 
     // TESTING
 
@@ -650,7 +650,7 @@ void MyPrintout::DrawPageTwo()
     dc->DrawLine( (long)leftMarginLogical, (long)bottomMarginLogical,
         (long)rightMarginLogical,  (long)bottomMarginLogical);
 
-    WritePageHeader(this, dc, _T("A header"), logUnitsFactor);
+    WritePageHeader(this, dc, wxT("A header"), logUnitsFactor);
 }
 
 // Writes a header on a page. Margin units are in millimetres.
--- samples/printing/printing.h-orig	2009-06-18 18:27:21.470064000 -0500
+++ samples/printing/printing.h	2009-06-18 18:27:28.102586000 -0500
@@ -72,7 +72,7 @@ DECLARE_EVENT_TABLE()
 class MyPrintout: public wxPrintout
 {
  public:
-  MyPrintout(const wxChar *title = _T("My printout")):wxPrintout(title) {}
+  MyPrintout(const wxChar *title = wxT("My printout")):wxPrintout(title) {}
   bool OnPrintPage(int page);
   bool HasPage(int page);
   bool OnBeginDocument(int startPage, int endPage);
--- samples/docview/doc.cpp-orig	2009-06-18 18:26:16.709920000 -0500
+++ samples/docview/doc.cpp	2009-06-18 18:26:28.424210000 -0500
@@ -172,16 +172,16 @@ wxOutputStream &DoodleSegment::SaveObjec
     wxTextOutputStream text_stream( stream );
 
     wxInt32 n = lines.GetCount();
-    text_stream << n << _T("\n");
+    text_stream << n << wxT("\n");
 
     wxList::compatibility_iterator node = lines.GetFirst();
     while (node)
     {
         DoodleLine *line = (DoodleLine *)node->GetData();
-        text_stream << line->x1 << _T(" ") <<
-            line->y1 << _T(" ") <<
-            line->x2 << _T(" ") <<
-            line->y2 << _T("\n");
+        text_stream << line->x1 << wxT(" ") <<
+            line->y1 << wxT(" ") <<
+            line->x2 << wxT(" ") <<
+            line->y2 << wxT("\n");
         node = node->GetNext();
     }
 
--- samples/docview/docview.cpp-orig	2009-06-18 18:26:21.486821000 -0500
+++ samples/docview/docview.cpp	2009-06-18 18:26:44.381261000 -0500
@@ -61,7 +61,7 @@ bool MyApp::OnInit(void)
     ////                   In single window mode, we only allow one document type
     if (argc > 1)
     {
-        if (wxStrcmp(argv[1], _T("-single")) == 0)
+        if (wxStrcmp(argv[1], wxT("-single")) == 0)
         {
             singleWindowMode = true;
         }
@@ -71,7 +71,7 @@ bool MyApp::OnInit(void)
     m_docManager = new wxDocManager;
 
     //// Create a template relating drawing documents to their views
-    (void) new wxDocTemplate(m_docManager, _T("Drawing"), _T("*.drw"), _T(""), _T("drw"), _T("Drawing Doc"), _T("Drawing View"),
+    (void) new wxDocTemplate(m_docManager, wxT("Drawing"), wxT("*.drw"), wxT(""), wxT("drw"), wxT("Drawing Doc"), wxT("Drawing View"),
         CLASSINFO(DrawingDocument), CLASSINFO(DrawingView));
 #ifdef __WXMAC__
     wxFileName::MacRegisterDefaultTypeAndCreator( wxT("drw") , 'WXMB' , 'WXMA' ) ;
@@ -87,7 +87,7 @@ bool MyApp::OnInit(void)
     else
     {
         //// Create a template relating text documents to their views
-        (void) new wxDocTemplate(m_docManager, _T("Text"), _T("*.txt;*.text"), _T(""), _T("txt;text"), _T("Text Doc"), _T("Text View"),
+        (void) new wxDocTemplate(m_docManager, wxT("Text"), wxT("*.txt;*.text"), wxT(""), wxT("txt;text"), wxT("Text Doc"), wxT("Text View"),
         CLASSINFO(TextEditDocument), CLASSINFO(TextEditView));
 #ifdef __WXMAC__
         wxFileName::MacRegisterDefaultTypeAndCreator( wxT("txt") , 'TEXT' , 'WXMA' ) ;
@@ -95,54 +95,54 @@ bool MyApp::OnInit(void)
     }
     
     //// Create the main frame window
-    frame = new MyFrame(m_docManager, (wxFrame *) NULL, wxID_ANY, _T("DocView Demo"), wxPoint(0, 0), wxSize(500, 400), wxDEFAULT_FRAME_STYLE);
+    frame = new MyFrame(m_docManager, (wxFrame *) NULL, wxID_ANY, wxT("DocView Demo"), wxPoint(0, 0), wxSize(500, 400), wxDEFAULT_FRAME_STYLE);
     
     //// Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
-    frame->SetIcon(wxIcon(_T("doc_icn")));
+    frame->SetIcon(wxIcon(wxT("doc_icn")));
 #endif
     
     //// Make a menubar
     wxMenu *file_menu = new wxMenu;
     wxMenu *edit_menu = (wxMenu *) NULL;
     
-    file_menu->Append(wxID_NEW, _T("&New..."));
-    file_menu->Append(wxID_OPEN, _T("&Open..."));
+    file_menu->Append(wxID_NEW, wxT("&New..."));
+    file_menu->Append(wxID_OPEN, wxT("&Open..."));
     
     if (singleWindowMode)
     {
-        file_menu->Append(wxID_CLOSE, _T("&Close"));
-        file_menu->Append(wxID_SAVE, _T("&Save"));
-        file_menu->Append(wxID_SAVEAS, _T("Save &As..."));
+        file_menu->Append(wxID_CLOSE, wxT("&Close"));
+        file_menu->Append(wxID_SAVE, wxT("&Save"));
+        file_menu->Append(wxID_SAVEAS, wxT("Save &As..."));
         file_menu->AppendSeparator();
-        file_menu->Append(wxID_PRINT, _T("&Print..."));
-        file_menu->Append(wxID_PRINT_SETUP, _T("Print &Setup..."));
-        file_menu->Append(wxID_PREVIEW, _T("Print Pre&view"));
+        file_menu->Append(wxID_PRINT, wxT("&Print..."));
+        file_menu->Append(wxID_PRINT_SETUP, wxT("Print &Setup..."));
+        file_menu->Append(wxID_PREVIEW, wxT("Print Pre&view"));
         
         edit_menu = new wxMenu;
-        edit_menu->Append(wxID_UNDO, _T("&Undo"));
-        edit_menu->Append(wxID_REDO, _T("&Redo"));
+        edit_menu->Append(wxID_UNDO, wxT("&Undo"));
+        edit_menu->Append(wxID_REDO, wxT("&Redo"));
         edit_menu->AppendSeparator();
-        edit_menu->Append(DOCVIEW_CUT, _T("&Cut last segment"));
+        edit_menu->Append(DOCVIEW_CUT, wxT("&Cut last segment"));
         
         frame->editMenu = edit_menu;
     }
     
     file_menu->AppendSeparator();
-    file_menu->Append(wxID_EXIT, _T("E&xit"));
+    file_menu->Append(wxID_EXIT, wxT("E&xit"));
     
     // A nice touch: a history of files visited. Use this menu.
     m_docManager->FileHistoryUseMenu(file_menu);
     
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(DOCVIEW_ABOUT, _T("&About"));
+    help_menu->Append(DOCVIEW_ABOUT, wxT("&About"));
     
     wxMenuBar *menu_bar = new wxMenuBar;
     
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
     if (edit_menu)
-        menu_bar->Append(edit_menu, _T("&Edit"));
-    menu_bar->Append(help_menu, _T("&Help"));
+        menu_bar->Append(edit_menu, wxT("&Edit"));
+    menu_bar->Append(help_menu, wxT("&Help"));
     
     if (singleWindowMode)
         frame->canvas = frame->CreateCanvas((wxView *) NULL, frame);
@@ -172,28 +172,28 @@ int MyApp::OnExit(void)
 wxFrame *MyApp::CreateChildFrame(wxDocument *doc, wxView *view, bool isCanvas)
 {
     //// Make a child frame
-    wxDocChildFrame *subframe = new wxDocChildFrame(doc, view, GetMainFrame(), wxID_ANY, _T("Child Frame"),
+    wxDocChildFrame *subframe = new wxDocChildFrame(doc, view, GetMainFrame(), wxID_ANY, wxT("Child Frame"),
         wxPoint(10, 10), wxSize(300, 300), wxDEFAULT_FRAME_STYLE);
     
 #ifdef __WXMSW__
-    subframe->SetIcon(wxString(isCanvas ? _T("chrt_icn") : _T("notepad_icn")));
+    subframe->SetIcon(wxString(isCanvas ? wxT("chrt_icn") : wxT("notepad_icn")));
 #endif
     
     //// Make a menubar
     wxMenu *file_menu = new wxMenu;
     
-    file_menu->Append(wxID_NEW, _T("&New..."));
-    file_menu->Append(wxID_OPEN, _T("&Open..."));
-    file_menu->Append(wxID_CLOSE, _T("&Close"));
-    file_menu->Append(wxID_SAVE, _T("&Save"));
-    file_menu->Append(wxID_SAVEAS, _T("Save &As..."));
+    file_menu->Append(wxID_NEW, wxT("&New..."));
+    file_menu->Append(wxID_OPEN, wxT("&Open..."));
+    file_menu->Append(wxID_CLOSE, wxT("&Close"));
+    file_menu->Append(wxID_SAVE, wxT("&Save"));
+    file_menu->Append(wxID_SAVEAS, wxT("Save &As..."));
     
     if (isCanvas)
     {
         file_menu->AppendSeparator();
-        file_menu->Append(wxID_PRINT, _T("&Print..."));
-        file_menu->Append(wxID_PRINT_SETUP, _T("Print &Setup..."));
-        file_menu->Append(wxID_PREVIEW, _T("Print Pre&view"));
+        file_menu->Append(wxID_PRINT, wxT("&Print..."));
+        file_menu->Append(wxID_PRINT_SETUP, wxT("Print &Setup..."));
+        file_menu->Append(wxID_PREVIEW, wxT("Print Pre&view"));
     }
     
     wxMenu *edit_menu = (wxMenu *) NULL;
@@ -201,23 +201,23 @@ wxFrame *MyApp::CreateChildFrame(wxDocum
     if (isCanvas)
     {
         edit_menu = new wxMenu;
-        edit_menu->Append(wxID_UNDO, _T("&Undo"));
-        edit_menu->Append(wxID_REDO, _T("&Redo"));
+        edit_menu->Append(wxID_UNDO, wxT("&Undo"));
+        edit_menu->Append(wxID_REDO, wxT("&Redo"));
         edit_menu->AppendSeparator();
-        edit_menu->Append(DOCVIEW_CUT, _T("&Cut last segment"));
+        edit_menu->Append(DOCVIEW_CUT, wxT("&Cut last segment"));
         
         doc->GetCommandProcessor()->SetEditMenu(edit_menu);
     }
     
     wxMenu *help_menu = new wxMenu;
-    help_menu->Append(DOCVIEW_ABOUT, _T("&About"));
+    help_menu->Append(DOCVIEW_ABOUT, wxT("&About"));
     
     wxMenuBar *menu_bar = new wxMenuBar;
     
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
     if (isCanvas)
-        menu_bar->Append(edit_menu, _T("&Edit"));
-    menu_bar->Append(help_menu, _T("&Help"));
+        menu_bar->Append(edit_menu, wxT("&Edit"));
+    menu_bar->Append(help_menu, wxT("&Help"));
     
     //// Associate the menu bar with the frame
     subframe->SetMenuBar(menu_bar);
@@ -247,7 +247,7 @@ wxDocParentFrame(manager, frame, id, tit
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    (void)wxMessageBox(_T("DocView Demo\nAuthor: Julian Smart\nUsage: docview.exe [-single]"), _T("About DocView"));
+    (void)wxMessageBox(wxT("DocView Demo\nAuthor: Julian Smart\nUsage: docview.exe [-single]"), wxT("About DocView"));
 }
 
 // Creates a canvas. Called either from view.cc when a new drawing
--- samples/docview/view.cpp-orig	2009-06-18 18:26:48.777015000 -0500
+++ samples/docview/view.cpp	2009-06-18 18:26:56.434372000 -0500
@@ -46,7 +46,7 @@ bool DrawingView::OnCreate(wxDocument *d
     {
         // Multiple windows
         frame = wxGetApp().CreateChildFrame(doc, this, true);
-        frame->SetTitle(_T("DrawingView"));
+        frame->SetTitle(wxT("DrawingView"));
         
         canvas = GetMainFrame()->CreateCanvas(this, frame);
 #ifdef __X__
@@ -146,7 +146,7 @@ bool DrawingView::OnClose(bool deleteWin
 void DrawingView::OnCut(wxCommandEvent& WXUNUSED(event) )
 {
     DrawingDocument *doc = (DrawingDocument *)GetDocument();
-    doc->GetCommandProcessor()->Submit(new DrawingCommand(_T("Cut Last Segment"), DOODLE_CUT, doc, (DoodleSegment *) NULL));
+    doc->GetCommandProcessor()->Submit(new DrawingCommand(wxT("Cut Last Segment"), DOODLE_CUT, doc, (DoodleSegment *) NULL));
 }
 
 IMPLEMENT_DYNAMIC_CLASS(TextEditView, wxView)
@@ -158,7 +158,7 @@ bool TextEditView::OnCreate(wxDocument *
     int width, height;
     frame->GetClientSize(&width, &height);
     textsw = new MyTextWindow(this, frame, wxPoint(0, 0), wxSize(width, height), wxTE_MULTILINE);
-    frame->SetTitle(_T("TextEditView"));
+    frame->SetTitle(wxT("TextEditView"));
     
 #ifdef __X__
     // X seems to require a forced resize
@@ -247,7 +247,7 @@ void MyCanvas::OnMouseEvent(wxMouseEvent
             // We've got a valid segment on mouse left up, so store it.
             DrawingDocument *doc = (DrawingDocument *)view->GetDocument();
             
-            doc->GetCommandProcessor()->Submit(new DrawingCommand(_T("Add Segment"), DOODLE_ADD, doc, currentSegment));
+            doc->GetCommandProcessor()->Submit(new DrawingCommand(wxT("Add Segment"), DOODLE_ADD, doc, currentSegment));
             
             view->GetDocument()->Modify(true);
             currentSegment = (DoodleSegment *) NULL;
@@ -274,7 +274,7 @@ void MyCanvas::OnMouseEvent(wxMouseEvent
 
 // Define a constructor for my text subwindow
 MyTextWindow::MyTextWindow(wxView *v, wxFrame *frame, const wxPoint& pos, const wxSize& size, const long style):
-    wxTextCtrl(frame, wxID_ANY, _T(""), pos, size, style)
+    wxTextCtrl(frame, wxID_ANY, wxT(""), pos, size, style)
 {
     view = v;
 }
--- samples/mfc/mfctest.cpp-orig	2009-06-18 18:25:35.011317000 -0500
+++ samples/mfc/mfctest.cpp	2009-06-18 18:25:42.243951000 -0500
@@ -121,14 +121,14 @@ IMPLEMENT_APP_NO_MAIN(MyApp)
 
 CMainWindow::CMainWindow()
 {
-    LoadAccelTable( _T("MainAccelTable") );
-    Create( NULL, _T("Hello Foundation Application"),
-        WS_OVERLAPPEDWINDOW, rectDefault, NULL, _T("MainMenu") );
+    LoadAccelTable( wxT("MainAccelTable") );
+    Create( NULL, wxT("Hello Foundation Application"),
+        WS_OVERLAPPEDWINDOW, rectDefault, NULL, wxT("MainMenu") );
 }
 
 void CMainWindow::OnPaint()
 {
-    CString s = _T("Hello, Windows!");
+    CString s = wxT("Hello, Windows!");
     CPaintDC dc( this );
     CRect rect;
 
@@ -142,13 +142,13 @@ void CMainWindow::OnPaint()
 
 void CMainWindow::OnAbout()
 {
-    CDialog about( _T("AboutBox"), this );
+    CDialog about( wxT("AboutBox"), this );
     about.DoModal();
 }
 
 void CMainWindow::OnTest()
 {
-    wxMessageBox(_T("This is a wxWidgets message box.\nWe're about to create a new wxWidgets frame."), _T("wxWidgets"), wxOK);
+    wxMessageBox(wxT("This is a wxWidgets message box.\nWe're about to create a new wxWidgets frame."), wxT("wxWidgets"), wxOK);
     wxGetApp().CreateFrame();
 }
 
@@ -255,10 +255,10 @@ void MyApp::ExitMainLoop()
 
 wxFrame *MyApp::CreateFrame()
 {
-    MyChild *subframe = new MyChild(NULL, _T("Canvas Frame"), wxPoint(10, 10), wxSize(300, 300),
+    MyChild *subframe = new MyChild(NULL, wxT("Canvas Frame"), wxPoint(10, 10), wxSize(300, 300),
         wxDEFAULT_FRAME_STYLE);
 
-    subframe->SetTitle(_T("wxWidgets canvas frame"));
+    subframe->SetTitle(wxT("wxWidgets canvas frame"));
 
     // Give it a status line
     subframe->CreateStatusBar();
@@ -266,12 +266,12 @@ wxFrame *MyApp::CreateFrame()
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(HELLO_NEW, _T("&New MFC Window"));
-    file_menu->Append(HELLO_QUIT, _T("&Close"));
+    file_menu->Append(HELLO_NEW, wxT("&New MFC Window"));
+    file_menu->Append(HELLO_QUIT, wxT("&Close"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
 
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     // Associate the menu bar with the frame
     subframe->SetMenuBar(menu_bar);
@@ -316,7 +316,7 @@ void MyCanvas::OnPaint(wxPaintEvent& WXU
 
     dc.DrawEllipse(250, 250, 100, 50);
     dc.DrawLine(50, 230, 200, 230);
-    dc.DrawText(_T("This is a test string"), 50, 230);
+    dc.DrawText(wxT("This is a test string"), 50, 230);
 }
 
 // This implements a tiny doodling program! Drag the mouse using
--- samples/xrc/myframe.cpp-orig	2009-06-18 18:26:01.536694000 -0500
+++ samples/xrc/myframe.cpp	2009-06-18 18:26:10.075315000 -0500
@@ -136,18 +136,18 @@ MyFrame::MyFrame(wxWindow* parent)
 void MyFrame::OnUnloadResourceMenuCommand(wxCommandEvent& WXUNUSED(event))
 {
     if ( wxXmlResource::Get()->Unload(wxT("rc/basicdlg.xrc")) )
-        wxLogMessage(_T("Basic dialog resource has now been unloaded, you ")
-                     _T("won't be able to use it before loading it again"));
+        wxLogMessage(wxT("Basic dialog resource has now been unloaded, you ")
+                     wxT("won't be able to use it before loading it again"));
     else
-        wxLogWarning(_T("Failed to unload basic dialog resource"));
+        wxLogWarning(wxT("Failed to unload basic dialog resource"));
 }
 
 void MyFrame::OnReloadResourceMenuCommand(wxCommandEvent& WXUNUSED(event))
 {
     if ( wxXmlResource::Get()->Load(wxT("rc/basicdlg.xrc")) )
-        wxLogStatus(_T("Basic dialog resource has been loaded."));
+        wxLogStatus(wxT("Basic dialog resource has been loaded."));
     else
-        wxLogError(_T("Failed to load basic dialog resource"));
+        wxLogError(wxT("Failed to load basic dialog resource"));
 }
 
 void MyFrame::OnExitToolOrMenuCommand(wxCommandEvent& WXUNUSED(event))
@@ -309,8 +309,8 @@ void MyFrame::OnVariableExpansionToolOrM
 void MyFrame::OnAboutToolOrMenuCommand(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is the about dialog of XML resources demo.\n")
-                _T("Welcome to %s"), wxVERSION_STRING);
+    msg.Printf( wxT("This is the about dialog of XML resources demo.\n")
+                wxT("Welcome to %s"), wxVERSION_STRING);
 
     wxMessageBox(msg, _("About XML resources demo"), wxOK | wxICON_INFORMATION, this);
 }
--- samples/richtext/richtext.cpp-orig	2009-06-18 18:25:00.065087000 -0500
+++ samples/richtext/richtext.cpp	2009-06-18 18:25:13.269174000 -0500
@@ -376,7 +376,7 @@ bool MyApp::OnInit()
 #endif
 
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxRichTextCtrl Sample"), wxID_ANY, wxDefaultPosition, wxSize(700, 600));
+    MyFrame *frame = new MyFrame(wxT("wxRichTextCtrl Sample"), wxID_ANY, wxDefaultPosition, wxSize(700, 600));
 
     m_printing->SetParentWindow(frame);
 
@@ -564,21 +564,21 @@ MyFrame::MyFrame(const wxString& title, 
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(ID_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(ID_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    fileMenu->Append(wxID_OPEN, _T("&Open\tCtrl+O"), _T("Open a file"));
-    fileMenu->Append(wxID_SAVE, _T("&Save\tCtrl+S"), _T("Save a file"));
-    fileMenu->Append(wxID_SAVEAS, _T("&Save As...\tF12"), _T("Save to a new file"));
+    fileMenu->Append(wxID_OPEN, wxT("&Open\tCtrl+O"), wxT("Open a file"));
+    fileMenu->Append(wxID_SAVE, wxT("&Save\tCtrl+S"), wxT("Save a file"));
+    fileMenu->Append(wxID_SAVEAS, wxT("&Save As...\tF12"), wxT("Save to a new file"));
     fileMenu->AppendSeparator();
-    fileMenu->Append(ID_RELOAD, _T("&Reload Text\tF2"), _T("Reload the initial text"));
+    fileMenu->Append(ID_RELOAD, wxT("&Reload Text\tF2"), wxT("Reload the initial text"));
     fileMenu->AppendSeparator();
-    fileMenu->Append(ID_PAGE_SETUP, _T("Page Set&up..."), _T("Page setup"));
-    fileMenu->Append(ID_PRINT, _T("&Print...\tCtrl+P"), _T("Print"));
-    fileMenu->Append(ID_PREVIEW, _T("Print Pre&view"), _T("Print preview"));
+    fileMenu->Append(ID_PAGE_SETUP, wxT("Page Set&up..."), wxT("Page setup"));
+    fileMenu->Append(ID_PRINT, wxT("&Print...\tCtrl+P"), wxT("Print"));
+    fileMenu->Append(ID_PREVIEW, wxT("Print Pre&view"), wxT("Print preview"));
     fileMenu->AppendSeparator();
-    fileMenu->Append(ID_VIEW_HTML, _T("&View as HTML"), _T("View HTML"));
+    fileMenu->Append(ID_VIEW_HTML, wxT("&View as HTML"), wxT("View HTML"));
     fileMenu->AppendSeparator();
-    fileMenu->Append(ID_Quit, _T("E&xit\tAlt+X"), _T("Quit this program"));
+    fileMenu->Append(ID_Quit, wxT("E&xit\tAlt+X"), wxT("Quit this program"));
 
     wxMenu* editMenu = new wxMenu;
     editMenu->Append(wxID_UNDO, _("&Undo\tCtrl+Z"));
@@ -638,12 +638,12 @@ MyFrame::MyFrame(const wxString& title, 
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(editMenu, _T("&Edit"));
-    menuBar->Append(formatMenu, _T("F&ormat"));
-    menuBar->Append(listsMenu, _T("&Lists"));
-    menuBar->Append(insertMenu, _T("&Insert"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(editMenu, wxT("&Edit"));
+    menuBar->Append(formatMenu, wxT("F&ormat"));
+    menuBar->Append(listsMenu, wxT("&Lists"));
+    menuBar->Append(insertMenu, wxT("&Insert"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -656,7 +656,7 @@ MyFrame::MyFrame(const wxString& title, 
     if ( !is_pda )
     {
         CreateStatusBar(2);
-        SetStatusText(_T("Welcome to wxRichTextCtrl!"));
+        SetStatusText(wxT("Welcome to wxRichTextCtrl!"));
     }
 #endif
 
@@ -938,8 +938,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("This is a demo for wxRichTextCtrl, a control for editing styled text.\n(c) Julian Smart, 2005"));
-    wxMessageBox(msg, _T("About wxRichTextCtrl Sample"), wxOK | wxICON_INFORMATION, this);
+    msg.Printf( wxT("This is a demo for wxRichTextCtrl, a control for editing styled text.\n(c) Julian Smart, 2005"));
+    wxMessageBox(msg, wxT("About wxRichTextCtrl Sample"), wxOK | wxICON_INFORMATION, this);
 }
 
 // Forward command events to the current rich text control, if any
--- samples/console/console.cpp-orig	2009-06-18 18:24:45.997340000 -0500
+++ samples/console/console.cpp	2009-06-18 18:24:52.255116000 -0500
@@ -114,9 +114,9 @@
 static wxString MakePrintable(const wxChar *s)
 {
     wxString str(s);
-    (void)str.Replace(_T("\t"), _T("\\t"));
-    (void)str.Replace(_T("\n"), _T("\\n"));
-    (void)str.Replace(_T("\r"), _T("\\r"));
+    (void)str.Replace(wxT("\t"), wxT("\\t"));
+    (void)str.Replace(wxT("\n"), wxT("\\n"));
+    (void)str.Replace(wxT("\r"), wxT("\\r"));
 
     return str;
 }
@@ -136,7 +136,7 @@ static wxString MakePrintable(const wxCh
 
 static void ShowCmdLine(const wxCmdLineParser& parser)
 {
-    wxString s = _T("Command line parsed successfully:\nInput files: ");
+    wxString s = wxT("Command line parsed successfully:\nInput files: ");
 
     size_t count = parser.GetParamCount();
     for ( size_t param = 0; param < count; param++ )
@@ -145,22 +145,22 @@ static void ShowCmdLine(const wxCmdLineP
     }
 
     s << '\n'
-      << _T("Verbose:\t") << (parser.Found(_T("v")) ? _T("yes") : _T("no")) << '\n'
-      << _T("Quiet:\t") << (parser.Found(_T("q")) ? _T("yes") : _T("no")) << '\n';
+      << wxT("Verbose:\t") << (parser.Found(wxT("v")) ? wxT("yes") : wxT("no")) << '\n'
+      << wxT("Quiet:\t") << (parser.Found(wxT("q")) ? wxT("yes") : wxT("no")) << '\n';
 
     wxString strVal;
     long lVal;
     wxDateTime dt;
-    if ( parser.Found(_T("o"), &strVal) )
-        s << _T("Output file:\t") << strVal << '\n';
-    if ( parser.Found(_T("i"), &strVal) )
-        s << _T("Input dir:\t") << strVal << '\n';
-    if ( parser.Found(_T("s"), &lVal) )
-        s << _T("Size:\t") << lVal << '\n';
-    if ( parser.Found(_T("d"), &dt) )
-        s << _T("Date:\t") << dt.FormatISODate() << '\n';
-    if ( parser.Found(_T("project_name"), &strVal) )
-        s << _T("Project:\t") << strVal << '\n';
+    if ( parser.Found(wxT("o"), &strVal) )
+        s << wxT("Output file:\t") << strVal << '\n';
+    if ( parser.Found(wxT("i"), &strVal) )
+        s << wxT("Input dir:\t") << strVal << '\n';
+    if ( parser.Found(wxT("s"), &lVal) )
+        s << wxT("Size:\t") << lVal << '\n';
+    if ( parser.Found(wxT("d"), &dt) )
+        s << wxT("Date:\t") << dt.FormatISODate() << '\n';
+    if ( parser.Found(wxT("project_name"), &strVal) )
+        s << wxT("Project:\t") << strVal << '\n';
 
     wxLogMessage(s);
 }
@@ -171,22 +171,22 @@ static void TestCmdLineConvert()
 {
     static const wxChar *cmdlines[] =
     {
-        _T("arg1 arg2"),
-        _T("-a \"-bstring 1\" -c\"string 2\" \"string 3\""),
-        _T("literal \\\" and \"\""),
+        wxT("arg1 arg2"),
+        wxT("-a \"-bstring 1\" -c\"string 2\" \"string 3\""),
+        wxT("literal \\\" and \"\""),
     };
 
     for ( size_t n = 0; n < WXSIZEOF(cmdlines); n++ )
     {
         const wxChar *cmdline = cmdlines[n];
-        wxPrintf(_T("Parsing: %s\n"), cmdline);
+        wxPrintf(wxT("Parsing: %s\n"), cmdline);
         wxArrayString args = wxCmdLineParser::ConvertStringToArgs(cmdline);
 
         size_t count = args.GetCount();
-        wxPrintf(_T("\targc = %u\n"), count);
+        wxPrintf(wxT("\targc = %u\n"), count);
         for ( size_t arg = 0; arg < count; arg++ )
         {
-            wxPrintf(_T("\targv[%u] = %s\n"), arg, args[arg].c_str());
+            wxPrintf(wxT("\targv[%u] = %s\n"), arg, args[arg].c_str());
         }
     }
 }
@@ -202,11 +202,11 @@ static void TestCmdLineConvert()
 #include "wx/dir.h"
 
 #ifdef __UNIX__
-    static const wxChar *ROOTDIR = _T("/");
-    static const wxChar *TESTDIR = _T("/usr/local/share");
+    static const wxChar *ROOTDIR = wxT("/");
+    static const wxChar *TESTDIR = wxT("/usr/local/share");
 #elif defined(__WXMSW__) || defined(__DOS__) || defined(__OS2__)
-    static const wxChar *ROOTDIR = _T("c:\\");
-    static const wxChar *TESTDIR = _T("d:\\");
+    static const wxChar *ROOTDIR = wxT("c:\\");
+    static const wxChar *TESTDIR = wxT("d:\\");
 #else
     #error "don't know where the root directory is"
 #endif
@@ -223,7 +223,7 @@ static void TestDirEnumHelper(wxDir& dir
     bool cont = dir.GetFirst(&filename, filespec, flags);
     while ( cont )
     {
-        wxPrintf(_T("\t%s\n"), filename.c_str());
+        wxPrintf(wxT("\t%s\n"), filename.c_str());
 
         cont = dir.GetNext(&filename);
     }
@@ -235,56 +235,56 @@ static void TestDirEnumHelper(wxDir& dir
 
 static void TestDirEnum()
 {
-    wxPuts(_T("*** Testing wxDir::GetFirst/GetNext ***"));
+    wxPuts(wxT("*** Testing wxDir::GetFirst/GetNext ***"));
 
     wxString cwd = wxGetCwd();
     if ( !wxDir::Exists(cwd) )
     {
-        wxPrintf(_T("ERROR: current directory '%s' doesn't exist?\n"), cwd.c_str());
+        wxPrintf(wxT("ERROR: current directory '%s' doesn't exist?\n"), cwd.c_str());
         return;
     }
 
     wxDir dir(cwd);
     if ( !dir.IsOpened() )
     {
-        wxPrintf(_T("ERROR: failed to open current directory '%s'.\n"), cwd.c_str());
+        wxPrintf(wxT("ERROR: failed to open current directory '%s'.\n"), cwd.c_str());
         return;
     }
 
-    wxPuts(_T("Enumerating everything in current directory:"));
+    wxPuts(wxT("Enumerating everything in current directory:"));
     TestDirEnumHelper(dir);
 
-    wxPuts(_T("Enumerating really everything in current directory:"));
+    wxPuts(wxT("Enumerating really everything in current directory:"));
     TestDirEnumHelper(dir, wxDIR_DEFAULT | wxDIR_DOTDOT);
 
-    wxPuts(_T("Enumerating object files in current directory:"));
-    TestDirEnumHelper(dir, wxDIR_DEFAULT, _T("*.o*"));
+    wxPuts(wxT("Enumerating object files in current directory:"));
+    TestDirEnumHelper(dir, wxDIR_DEFAULT, wxT("*.o*"));
 
-    wxPuts(_T("Enumerating directories in current directory:"));
+    wxPuts(wxT("Enumerating directories in current directory:"));
     TestDirEnumHelper(dir, wxDIR_DIRS);
 
-    wxPuts(_T("Enumerating files in current directory:"));
+    wxPuts(wxT("Enumerating files in current directory:"));
     TestDirEnumHelper(dir, wxDIR_FILES);
 
-    wxPuts(_T("Enumerating files including hidden in current directory:"));
+    wxPuts(wxT("Enumerating files including hidden in current directory:"));
     TestDirEnumHelper(dir, wxDIR_FILES | wxDIR_HIDDEN);
 
     dir.Open(ROOTDIR);
 
-    wxPuts(_T("Enumerating everything in root directory:"));
+    wxPuts(wxT("Enumerating everything in root directory:"));
     TestDirEnumHelper(dir, wxDIR_DEFAULT);
 
-    wxPuts(_T("Enumerating directories in root directory:"));
+    wxPuts(wxT("Enumerating directories in root directory:"));
     TestDirEnumHelper(dir, wxDIR_DIRS);
 
-    wxPuts(_T("Enumerating files in root directory:"));
+    wxPuts(wxT("Enumerating files in root directory:"));
     TestDirEnumHelper(dir, wxDIR_FILES);
 
-    wxPuts(_T("Enumerating files including hidden in root directory:"));
+    wxPuts(wxT("Enumerating files including hidden in root directory:"));
     TestDirEnumHelper(dir, wxDIR_FILES | wxDIR_HIDDEN);
 
-    wxPuts(_T("Enumerating files in non existing directory:"));
-    wxDir dirNo(_T("nosuchdir"));
+    wxPuts(wxT("Enumerating files in non existing directory:"));
+    wxDir dirNo(wxT("nosuchdir"));
     TestDirEnumHelper(dirNo);
 }
 
@@ -304,16 +304,16 @@ public:
         wxSplitPath(dirname, &path, &name, &ext);
 
         if ( !ext.empty() )
-            name << _T('.') << ext;
+            name << wxT('.') << ext;
 
         wxString indent;
         for ( const wxChar *p = path.c_str(); *p; p++ )
         {
             if ( wxIsPathSeparator(*p) )
-                indent += _T("    ");
+                indent += wxT("    ");
         }
 
-        wxPrintf(_T("%s%s\n"), indent.c_str(), name.c_str());
+        wxPrintf(wxT("%s%s\n"), indent.c_str(), name.c_str());
 
         return wxDIR_CONTINUE;
     }
@@ -321,20 +321,20 @@ public:
 
 static void TestDirTraverse()
 {
-    wxPuts(_T("*** Testing wxDir::Traverse() ***"));
+    wxPuts(wxT("*** Testing wxDir::Traverse() ***"));
 
     // enum all files
     wxArrayString files;
     size_t n = wxDir::GetAllFiles(TESTDIR, &files);
-    wxPrintf(_T("There are %u files under '%s'\n"), n, TESTDIR);
+    wxPrintf(wxT("There are %u files under '%s'\n"), n, TESTDIR);
     if ( n > 1 )
     {
-        wxPrintf(_T("First one is '%s'\n"), files[0u].c_str());
-        wxPrintf(_T(" last one is '%s'\n"), files[n - 1].c_str());
+        wxPrintf(wxT("First one is '%s'\n"), files[0u].c_str());
+        wxPrintf(wxT(" last one is '%s'\n"), files[n - 1].c_str());
     }
 
     // enum again with custom traverser
-    wxPuts(_T("Now enumerating directories:"));
+    wxPuts(wxT("Now enumerating directories:"));
     wxDir dir(TESTDIR);
     DirPrintTraverser traverser;
     dir.Traverse(traverser, wxEmptyString, wxDIR_DIRS | wxDIR_HIDDEN);
@@ -344,34 +344,34 @@ static void TestDirTraverse()
 
 static void TestDirExists()
 {
-    wxPuts(_T("*** Testing wxDir::Exists() ***"));
+    wxPuts(wxT("*** Testing wxDir::Exists() ***"));
 
     static const wxChar *dirnames[] =
     {
-        _T("."),
+        wxT("."),
 #if defined(__WXMSW__)
-        _T("c:"),
-        _T("c:\\"),
-        _T("\\\\share\\file"),
-        _T("c:\\dos"),
-        _T("c:\\dos\\"),
-        _T("c:\\dos\\\\"),
-        _T("c:\\autoexec.bat"),
+        wxT("c:"),
+        wxT("c:\\"),
+        wxT("\\\\share\\file"),
+        wxT("c:\\dos"),
+        wxT("c:\\dos\\"),
+        wxT("c:\\dos\\\\"),
+        wxT("c:\\autoexec.bat"),
 #elif defined(__UNIX__)
-        _T("/"),
-        _T("//"),
-        _T("/usr/bin"),
-        _T("/usr//bin"),
-        _T("/usr///bin"),
+        wxT("/"),
+        wxT("//"),
+        wxT("/usr/bin"),
+        wxT("/usr//bin"),
+        wxT("/usr///bin"),
 #endif
     };
 
     for ( size_t n = 0; n < WXSIZEOF(dirnames); n++ )
     {
-        wxPrintf(_T("%-40s: %s\n"),
+        wxPrintf(wxT("%-40s: %s\n"),
                  dirnames[n],
-                 wxDir::Exists(dirnames[n]) ? _T("exists")
-                                            : _T("doesn't exist"));
+                 wxDir::Exists(dirnames[n]) ? wxT("exists")
+                                            : wxT("doesn't exist"));
     }
 }
 
@@ -390,22 +390,22 @@ static void TestDirExists()
 static void TestDllLoad()
 {
 #if defined(__WXMSW__)
-    static const wxChar *LIB_NAME = _T("kernel32.dll");
-    static const wxChar *FUNC_NAME = _T("lstrlenA");
+    static const wxChar *LIB_NAME = wxT("kernel32.dll");
+    static const wxChar *FUNC_NAME = wxT("lstrlenA");
 #elif defined(__UNIX__)
     // weird: using just libc.so does *not* work!
-    static const wxChar *LIB_NAME = _T("/lib/libc.so.6");
-    static const wxChar *FUNC_NAME = _T("strlen");
+    static const wxChar *LIB_NAME = wxT("/lib/libc.so.6");
+    static const wxChar *FUNC_NAME = wxT("strlen");
 #else
     #error "don't know how to test wxDllLoader on this platform"
 #endif
 
-    wxPuts(_T("*** testing basic wxDynamicLibrary functions ***\n"));
+    wxPuts(wxT("*** testing basic wxDynamicLibrary functions ***\n"));
 
     wxDynamicLibrary lib(LIB_NAME);
     if ( !lib.IsLoaded() )
     {
-        wxPrintf(_T("ERROR: failed to load '%s'.\n"), LIB_NAME);
+        wxPrintf(wxT("ERROR: failed to load '%s'.\n"), LIB_NAME);
     }
     else
     {
@@ -413,40 +413,40 @@ static void TestDllLoad()
         wxStrlenType pfnStrlen = (wxStrlenType)lib.GetSymbol(FUNC_NAME);
         if ( !pfnStrlen )
         {
-            wxPrintf(_T("ERROR: function '%s' wasn't found in '%s'.\n"),
+            wxPrintf(wxT("ERROR: function '%s' wasn't found in '%s'.\n"),
                      FUNC_NAME, LIB_NAME);
         }
         else
         {
-            wxPrintf(_T("Calling %s dynamically loaded from %s "),
+            wxPrintf(wxT("Calling %s dynamically loaded from %s "),
                      FUNC_NAME, LIB_NAME);
 
             if ( pfnStrlen("foo") != 3 )
             {
-                wxPrintf(_T("ERROR: loaded function is not wxStrlen()!\n"));
+                wxPrintf(wxT("ERROR: loaded function is not wxStrlen()!\n"));
             }
             else
             {
-                wxPuts(_T("... ok"));
+                wxPuts(wxT("... ok"));
             }
         }
 
 #ifdef __WXMSW__
-        static const wxChar *FUNC_NAME_AW = _T("lstrlen");
+        static const wxChar *FUNC_NAME_AW = wxT("lstrlen");
 
         typedef int (wxSTDCALL *wxStrlenTypeAorW)(const wxChar *);
         wxStrlenTypeAorW
             pfnStrlenAorW = (wxStrlenTypeAorW)lib.GetSymbolAorW(FUNC_NAME_AW);
         if ( !pfnStrlenAorW )
         {
-            wxPrintf(_T("ERROR: function '%s' wasn't found in '%s'.\n"),
+            wxPrintf(wxT("ERROR: function '%s' wasn't found in '%s'.\n"),
                      FUNC_NAME_AW, LIB_NAME);
         }
         else
         {
-            if ( pfnStrlenAorW(_T("foobar")) != 6 )
+            if ( pfnStrlenAorW(wxT("foobar")) != 6 )
             {
-                wxPrintf(_T("ERROR: loaded function is not wxStrlen()!\n"));
+                wxPrintf(wxT("ERROR: loaded function is not wxStrlen()!\n"));
             }
         }
 #endif // __WXMSW__
@@ -457,7 +457,7 @@ static void TestDllLoad()
 
 static void TestDllListLoaded()
 {
-    wxPuts(_T("*** testing wxDynamicLibrary::ListLoaded() ***\n"));
+    wxPuts(wxT("*** testing wxDynamicLibrary::ListLoaded() ***\n"));
 
     puts("\nLoaded modules:");
     wxDynamicLibraryDetailsArray dlls = wxDynamicLibrary::ListLoaded();
@@ -495,27 +495,27 @@ static wxString MyGetEnv(const wxString&
 {
     wxString val;
     if ( !wxGetEnv(var, &val) )
-        val = _T("<empty>");
+        val = wxT("<empty>");
     else
-        val = wxString(_T('\'')) + val + _T('\'');
+        val = wxString(wxT('\'')) + val + wxT('\'');
 
     return val;
 }
 
 static void TestEnvironment()
 {
-    const wxChar *var = _T("wxTestVar");
+    const wxChar *var = wxT("wxTestVar");
 
-    wxPuts(_T("*** testing environment access functions ***"));
+    wxPuts(wxT("*** testing environment access functions ***"));
 
-    wxPrintf(_T("Initially getenv(%s) = %s\n"), var, MyGetEnv(var).c_str());
-    wxSetEnv(var, _T("value for wxTestVar"));
-    wxPrintf(_T("After wxSetEnv: getenv(%s) = %s\n"),  var, MyGetEnv(var).c_str());
-    wxSetEnv(var, _T("another value"));
-    wxPrintf(_T("After 2nd wxSetEnv: getenv(%s) = %s\n"),  var, MyGetEnv(var).c_str());
+    wxPrintf(wxT("Initially getenv(%s) = %s\n"), var, MyGetEnv(var).c_str());
+    wxSetEnv(var, wxT("value for wxTestVar"));
+    wxPrintf(wxT("After wxSetEnv: getenv(%s) = %s\n"),  var, MyGetEnv(var).c_str());
+    wxSetEnv(var, wxT("another value"));
+    wxPrintf(wxT("After 2nd wxSetEnv: getenv(%s) = %s\n"),  var, MyGetEnv(var).c_str());
     wxUnsetEnv(var);
-    wxPrintf(_T("After wxUnsetEnv: getenv(%s) = %s\n"),  var, MyGetEnv(var).c_str());
-    wxPrintf(_T("PATH = %s\n"),  MyGetEnv(_T("PATH")).c_str());
+    wxPrintf(wxT("After wxUnsetEnv: getenv(%s) = %s\n"),  var, MyGetEnv(var).c_str());
+    wxPrintf(wxT("PATH = %s\n"),  MyGetEnv(wxT("PATH")).c_str());
 }
 
 #endif // TEST_ENVIRON
@@ -530,7 +530,7 @@ static void TestEnvironment()
 
 static void TestExecute()
 {
-    wxPuts(_T("*** testing wxExecute ***"));
+    wxPuts(wxT("*** testing wxExecute ***"));
 
 #ifdef __UNIX__
     #define COMMAND "cat -n ../../Makefile" // "echo hi"
@@ -544,44 +544,44 @@ static void TestExecute()
     #error "no command to exec"
 #endif // OS
 
-    wxPrintf(_T("Testing wxShell: "));
+    wxPrintf(wxT("Testing wxShell: "));
     fflush(stdout);
-    if ( wxShell(_T(SHELL_COMMAND)) )
-        wxPuts(_T("Ok."));
+    if ( wxShell(wxT(SHELL_COMMAND)) )
+        wxPuts(wxT("Ok."));
     else
-        wxPuts(_T("ERROR."));
+        wxPuts(wxT("ERROR."));
 
-    wxPrintf(_T("Testing wxExecute: "));
+    wxPrintf(wxT("Testing wxExecute: "));
     fflush(stdout);
-    if ( wxExecute(_T(COMMAND), true /* sync */) == 0 )
-        wxPuts(_T("Ok."));
+    if ( wxExecute(wxT(COMMAND), true /* sync */) == 0 )
+        wxPuts(wxT("Ok."));
     else
-        wxPuts(_T("ERROR."));
+        wxPuts(wxT("ERROR."));
 
 #if 0 // no, it doesn't work (yet?)
-    wxPrintf(_T("Testing async wxExecute: "));
+    wxPrintf(wxT("Testing async wxExecute: "));
     fflush(stdout);
     if ( wxExecute(COMMAND) != 0 )
-        wxPuts(_T("Ok (command launched)."));
+        wxPuts(wxT("Ok (command launched)."));
     else
-        wxPuts(_T("ERROR."));
+        wxPuts(wxT("ERROR."));
 #endif // 0
 
-    wxPrintf(_T("Testing wxExecute with redirection:\n"));
+    wxPrintf(wxT("Testing wxExecute with redirection:\n"));
     wxArrayString output;
-    if ( wxExecute(_T(REDIRECT_COMMAND), output) != 0 )
+    if ( wxExecute(wxT(REDIRECT_COMMAND), output) != 0 )
     {
-        wxPuts(_T("ERROR."));
+        wxPuts(wxT("ERROR."));
     }
     else
     {
         size_t count = output.GetCount();
         for ( size_t n = 0; n < count; n++ )
         {
-            wxPrintf(_T("\t%s\n"), output[n].c_str());
+            wxPrintf(wxT("\t%s\n"), output[n].c_str());
         }
 
-        wxPuts(_T("Ok."));
+        wxPuts(wxT("Ok."));
     }
 }
 
@@ -599,14 +599,14 @@ static void TestExecute()
 
 static void TestFileRead()
 {
-    wxPuts(_T("*** wxFile read test ***"));
+    wxPuts(wxT("*** wxFile read test ***"));
 
-    wxFile file(_T("testdata.fc"));
+    wxFile file(wxT("testdata.fc"));
     if ( file.IsOpened() )
     {
-        wxPrintf(_T("File length: %lu\n"), file.Length());
+        wxPrintf(wxT("File length: %lu\n"), file.Length());
 
-        wxPuts(_T("File dump:\n----------"));
+        wxPuts(wxT("File dump:\n----------"));
 
         static const size_t len = 1024;
         wxChar buf[len];
@@ -615,7 +615,7 @@ static void TestFileRead()
             size_t nRead = file.Read(buf, len);
             if ( nRead == (size_t)wxInvalidOffset )
             {
-                wxPrintf(_T("Failed to read the file."));
+                wxPrintf(wxT("Failed to read the file."));
                 break;
             }
 
@@ -625,11 +625,11 @@ static void TestFileRead()
                 break;
         }
 
-        wxPuts(_T("----------"));
+        wxPuts(wxT("----------"));
     }
     else
     {
-        wxPrintf(_T("ERROR: can't open test file.\n"));
+        wxPrintf(wxT("ERROR: can't open test file.\n"));
     }
 
     wxPuts(wxEmptyString);
@@ -637,35 +637,35 @@ static void TestFileRead()
 
 static void TestTextFileRead()
 {
-    wxPuts(_T("*** wxTextFile read test ***"));
+    wxPuts(wxT("*** wxTextFile read test ***"));
 
-    wxTextFile file(_T("testdata.fc"));
+    wxTextFile file(wxT("testdata.fc"));
     if ( file.Open() )
     {
-        wxPrintf(_T("Number of lines: %u\n"), file.GetLineCount());
-        wxPrintf(_T("Last line: '%s'\n"), file.GetLastLine().c_str());
+        wxPrintf(wxT("Number of lines: %u\n"), file.GetLineCount());
+        wxPrintf(wxT("Last line: '%s'\n"), file.GetLastLine().c_str());
 
         wxString s;
 
-        wxPuts(_T("\nDumping the entire file:"));
+        wxPuts(wxT("\nDumping the entire file:"));
         for ( s = file.GetFirstLine(); !file.Eof(); s = file.GetNextLine() )
         {
-            wxPrintf(_T("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
+            wxPrintf(wxT("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
         }
-        wxPrintf(_T("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
+        wxPrintf(wxT("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
 
-        wxPuts(_T("\nAnd now backwards:"));
+        wxPuts(wxT("\nAnd now backwards:"));
         for ( s = file.GetLastLine();
               file.GetCurrentLine() != 0;
               s = file.GetPrevLine() )
         {
-            wxPrintf(_T("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
+            wxPrintf(wxT("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
         }
-        wxPrintf(_T("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
+        wxPrintf(wxT("%6u: %s\n"), file.GetCurrentLine() + 1, s.c_str());
     }
     else
     {
-        wxPrintf(_T("ERROR: can't open '%s'\n"), file.GetName());
+        wxPrintf(wxT("ERROR: can't open '%s'\n"), file.GetName());
     }
 
     wxPuts(wxEmptyString);
@@ -673,40 +673,40 @@ static void TestTextFileRead()
 
 static void TestFileCopy()
 {
-    wxPuts(_T("*** Testing wxCopyFile ***"));
+    wxPuts(wxT("*** Testing wxCopyFile ***"));
 
-    static const wxChar *filename1 = _T("testdata.fc");
-    static const wxChar *filename2 = _T("test2");
+    static const wxChar *filename1 = wxT("testdata.fc");
+    static const wxChar *filename2 = wxT("test2");
     if ( !wxCopyFile(filename1, filename2) )
     {
-        wxPuts(_T("ERROR: failed to copy file"));
+        wxPuts(wxT("ERROR: failed to copy file"));
     }
     else
     {
-        wxFFile f1(filename1, _T("rb")),
-                f2(filename2, _T("rb"));
+        wxFFile f1(filename1, wxT("rb")),
+                f2(filename2, wxT("rb"));
 
         if ( !f1.IsOpened() || !f2.IsOpened() )
         {
-            wxPuts(_T("ERROR: failed to open file(s)"));
+            wxPuts(wxT("ERROR: failed to open file(s)"));
         }
         else
         {
             wxString s1, s2;
             if ( !f1.ReadAll(&s1) || !f2.ReadAll(&s2) )
             {
-                wxPuts(_T("ERROR: failed to read file(s)"));
+                wxPuts(wxT("ERROR: failed to read file(s)"));
             }
             else
             {
                 if ( (s1.length() != s2.length()) ||
                      (memcmp(s1.c_str(), s2.c_str(), s1.length()) != 0) )
                 {
-                    wxPuts(_T("ERROR: copy error!"));
+                    wxPuts(wxT("ERROR: copy error!"));
                 }
                 else
                 {
-                    wxPuts(_T("File was copied ok."));
+                    wxPuts(wxT("File was copied ok."));
                 }
             }
         }
@@ -714,7 +714,7 @@ static void TestFileCopy()
 
     if ( !wxRemoveFile(filename2) )
     {
-        wxPuts(_T("ERROR: failed to remove the file"));
+        wxPuts(wxT("ERROR: failed to remove the file"));
     }
 
     wxPuts(wxEmptyString);
@@ -722,17 +722,17 @@ static void TestFileCopy()
 
 static void TestTempFile()
 {
-    wxPuts(_T("*** wxTempFile test ***"));
+    wxPuts(wxT("*** wxTempFile test ***"));
 
     wxTempFile tmpFile;
-    if ( tmpFile.Open(_T("test2")) && tmpFile.Write(_T("the answer is 42")) )
+    if ( tmpFile.Open(wxT("test2")) && tmpFile.Write(wxT("the answer is 42")) )
     {
         if ( tmpFile.Commit() )
-            wxPuts(_T("File committed."));
+            wxPuts(wxT("File committed."));
         else
-            wxPuts(_T("ERROR: could't commit temp file."));
+            wxPuts(wxT("ERROR: could't commit temp file."));
 
-        wxRemoveFile(_T("test2"));
+        wxRemoveFile(wxT("test2"));
     }
 
     wxPuts(wxEmptyString);
@@ -755,56 +755,56 @@ static const struct FileConfTestData
     const wxChar *value;     // the value from the file
 } fcTestData[] =
 {
-    { _T("value1"),                       _T("one") },
-    { _T("value2"),                       _T("two") },
-    { _T("novalue"),                      _T("default") },
+    { wxT("value1"),                       wxT("one") },
+    { wxT("value2"),                       wxT("two") },
+    { wxT("novalue"),                      wxT("default") },
 };
 
 static void TestFileConfRead()
 {
-    wxPuts(_T("*** testing wxFileConfig loading/reading ***"));
+    wxPuts(wxT("*** testing wxFileConfig loading/reading ***"));
 
-    wxFileConfig fileconf(_T("test"), wxEmptyString,
-                          _T("testdata.fc"), wxEmptyString,
+    wxFileConfig fileconf(wxT("test"), wxEmptyString,
+                          wxT("testdata.fc"), wxEmptyString,
                           wxCONFIG_USE_RELATIVE_PATH);
 
     // test simple reading
-    wxPuts(_T("\nReading config file:"));
-    wxString defValue(_T("default")), value;
+    wxPuts(wxT("\nReading config file:"));
+    wxString defValue(wxT("default")), value;
     for ( size_t n = 0; n < WXSIZEOF(fcTestData); n++ )
     {
         const FileConfTestData& data = fcTestData[n];
         value = fileconf.Read(data.name, defValue);
-        wxPrintf(_T("\t%s = %s "), data.name, value.c_str());
+        wxPrintf(wxT("\t%s = %s "), data.name, value.c_str());
         if ( value == data.value )
         {
-            wxPuts(_T("(ok)"));
+            wxPuts(wxT("(ok)"));
         }
         else
         {
-            wxPrintf(_T("(ERROR: should be %s)\n"), data.value);
+            wxPrintf(wxT("(ERROR: should be %s)\n"), data.value);
         }
     }
 
     // test enumerating the entries
-    wxPuts(_T("\nEnumerating all root entries:"));
+    wxPuts(wxT("\nEnumerating all root entries:"));
     long dummy;
     wxString name;
     bool cont = fileconf.GetFirstEntry(name, dummy);
     while ( cont )
     {
-        wxPrintf(_T("\t%s = %s\n"),
+        wxPrintf(wxT("\t%s = %s\n"),
                name.c_str(),
-               fileconf.Read(name.c_str(), _T("ERROR")).c_str());
+               fileconf.Read(name.c_str(), wxT("ERROR")).c_str());
 
         cont = fileconf.GetNextEntry(name, dummy);
     }
 
-    static const wxChar *testEntry = _T("TestEntry");
-    wxPrintf(_T("\nTesting deletion of newly created \"Test\" entry: "));
-    fileconf.Write(testEntry, _T("A value"));
+    static const wxChar *testEntry = wxT("TestEntry");
+    wxPrintf(wxT("\nTesting deletion of newly created \"Test\" entry: "));
+    fileconf.Write(testEntry, wxT("A value"));
     fileconf.DeleteEntry(testEntry);
-    wxPrintf(fileconf.HasEntry(testEntry) ? _T("ERROR\n") : _T("ok\n"));
+    wxPrintf(fileconf.HasEntry(testEntry) ? wxT("ERROR\n") : wxT("ok\n"));
 }
 
 #endif // TEST_FILECONF
@@ -827,44 +827,44 @@ static void DumpFileName(const wxChar *d
     wxString vol, path, name, ext;
     wxFileName::SplitPath(full, &vol, &path, &name, &ext);
 
-    wxPrintf(_T("'%s'-> vol '%s', path '%s', name '%s', ext '%s'\n"),
+    wxPrintf(wxT("'%s'-> vol '%s', path '%s', name '%s', ext '%s'\n"),
              full.c_str(), vol.c_str(), path.c_str(), name.c_str(), ext.c_str());
 
     wxFileName::SplitPath(full, &path, &name, &ext);
-    wxPrintf(_T("or\t\t-> path '%s', name '%s', ext '%s'\n"),
+    wxPrintf(wxT("or\t\t-> path '%s', name '%s', ext '%s'\n"),
              path.c_str(), name.c_str(), ext.c_str());
 
-    wxPrintf(_T("path is also:\t'%s'\n"), fn.GetPath().c_str());
-    wxPrintf(_T("with volume: \t'%s'\n"),
+    wxPrintf(wxT("path is also:\t'%s'\n"), fn.GetPath().c_str());
+    wxPrintf(wxT("with volume: \t'%s'\n"),
              fn.GetPath(wxPATH_GET_VOLUME).c_str());
-    wxPrintf(_T("with separator:\t'%s'\n"),
+    wxPrintf(wxT("with separator:\t'%s'\n"),
              fn.GetPath(wxPATH_GET_SEPARATOR).c_str());
-    wxPrintf(_T("with both:   \t'%s'\n"),
+    wxPrintf(wxT("with both:   \t'%s'\n"),
              fn.GetPath(wxPATH_GET_SEPARATOR | wxPATH_GET_VOLUME).c_str());
 
-    wxPuts(_T("The directories in the path are:"));
+    wxPuts(wxT("The directories in the path are:"));
     wxArrayString dirs = fn.GetDirs();
     size_t count = dirs.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
-        wxPrintf(_T("\t%u: %s\n"), n, dirs[n].c_str());
+        wxPrintf(wxT("\t%u: %s\n"), n, dirs[n].c_str());
     }
 }
 #endif
 
 static void TestFileNameTemp()
 {
-    wxPuts(_T("*** testing wxFileName temp file creation ***"));
+    wxPuts(wxT("*** testing wxFileName temp file creation ***"));
 
     static const wxChar *tmpprefixes[] =
     {
-        _T(""),
-        _T("foo"),
-        _T(".."),
-        _T("../bar"),
+        wxT(""),
+        wxT("foo"),
+        wxT(".."),
+        wxT("../bar"),
 #ifdef __UNIX__
-        _T("/tmp/foo"),
-        _T("/tmp/foo/bar"), // this one must be an error
+        wxT("/tmp/foo"),
+        wxT("/tmp/foo/bar"), // this one must be an error
 #endif // __UNIX__
     };
 
@@ -874,16 +874,16 @@ static void TestFileNameTemp()
         if ( path.empty() )
         {
             // "error" is not in upper case because it may be ok
-            wxPrintf(_T("Prefix '%s'\t-> error\n"), tmpprefixes[n]);
+            wxPrintf(wxT("Prefix '%s'\t-> error\n"), tmpprefixes[n]);
         }
         else
         {
-            wxPrintf(_T("Prefix '%s'\t-> temp file '%s'\n"),
+            wxPrintf(wxT("Prefix '%s'\t-> temp file '%s'\n"),
                    tmpprefixes[n], path.c_str());
 
             if ( !wxRemoveFile(path) )
             {
-                wxLogWarning(_T("Failed to remove temp file '%s'"),
+                wxLogWarning(wxT("Failed to remove temp file '%s'"),
                              path.c_str());
             }
         }
@@ -923,32 +923,32 @@ static void TestFileNameCwd()
 
 static void TestFileGetTimes()
 {
-    wxFileName fn(_T("testdata.fc"));
+    wxFileName fn(wxT("testdata.fc"));
 
     wxDateTime dtAccess, dtMod, dtCreate;
     if ( !fn.GetTimes(&dtAccess, &dtMod, &dtCreate) )
     {
-        wxPrintf(_T("ERROR: GetTimes() failed.\n"));
+        wxPrintf(wxT("ERROR: GetTimes() failed.\n"));
     }
     else
     {
-        static const wxChar *fmt = _T("%Y-%b-%d %H:%M:%S");
+        static const wxChar *fmt = wxT("%Y-%b-%d %H:%M:%S");
 
-        wxPrintf(_T("File times for '%s':\n"), fn.GetFullPath().c_str());
-        wxPrintf(_T("Creation:    \t%s\n"), dtCreate.Format(fmt).c_str());
-        wxPrintf(_T("Last read:   \t%s\n"), dtAccess.Format(fmt).c_str());
-        wxPrintf(_T("Last write:  \t%s\n"), dtMod.Format(fmt).c_str());
+        wxPrintf(wxT("File times for '%s':\n"), fn.GetFullPath().c_str());
+        wxPrintf(wxT("Creation:    \t%s\n"), dtCreate.Format(fmt).c_str());
+        wxPrintf(wxT("Last read:   \t%s\n"), dtAccess.Format(fmt).c_str());
+        wxPrintf(wxT("Last write:  \t%s\n"), dtMod.Format(fmt).c_str());
     }
 }
 
 #if 0
 static void TestFileSetTimes()
 {
-    wxFileName fn(_T("testdata.fc"));
+    wxFileName fn(wxT("testdata.fc"));
 
     if ( !fn.Touch() )
     {
-        wxPrintf(_T("ERROR: Touch() failed.\n"));
+        wxPrintf(wxT("ERROR: Touch() failed.\n"));
     }
 }
 #endif
@@ -971,264 +971,264 @@ static const wxChar *GetLangName(int lan
 {
     static const wxChar *languageNames[] =
     {
-        _T("DEFAULT"),
-        _T("UNKNOWN"),
-        _T("ABKHAZIAN"),
-        _T("AFAR"),
-        _T("AFRIKAANS"),
-        _T("ALBANIAN"),
-        _T("AMHARIC"),
-        _T("ARABIC"),
-        _T("ARABIC_ALGERIA"),
-        _T("ARABIC_BAHRAIN"),
-        _T("ARABIC_EGYPT"),
-        _T("ARABIC_IRAQ"),
-        _T("ARABIC_JORDAN"),
-        _T("ARABIC_KUWAIT"),
-        _T("ARABIC_LEBANON"),
-        _T("ARABIC_LIBYA"),
-        _T("ARABIC_MOROCCO"),
-        _T("ARABIC_OMAN"),
-        _T("ARABIC_QATAR"),
-        _T("ARABIC_SAUDI_ARABIA"),
-        _T("ARABIC_SUDAN"),
-        _T("ARABIC_SYRIA"),
-        _T("ARABIC_TUNISIA"),
-        _T("ARABIC_UAE"),
-        _T("ARABIC_YEMEN"),
-        _T("ARMENIAN"),
-        _T("ASSAMESE"),
-        _T("AYMARA"),
-        _T("AZERI"),
-        _T("AZERI_CYRILLIC"),
-        _T("AZERI_LATIN"),
-        _T("BASHKIR"),
-        _T("BASQUE"),
-        _T("BELARUSIAN"),
-        _T("BENGALI"),
-        _T("BHUTANI"),
-        _T("BIHARI"),
-        _T("BISLAMA"),
-        _T("BRETON"),
-        _T("BULGARIAN"),
-        _T("BURMESE"),
-        _T("CAMBODIAN"),
-        _T("CATALAN"),
-        _T("CHINESE"),
-        _T("CHINESE_SIMPLIFIED"),
-        _T("CHINESE_TRADITIONAL"),
-        _T("CHINESE_HONGKONG"),
-        _T("CHINESE_MACAU"),
-        _T("CHINESE_SINGAPORE"),
-        _T("CHINESE_TAIWAN"),
-        _T("CORSICAN"),
-        _T("CROATIAN"),
-        _T("CZECH"),
-        _T("DANISH"),
-        _T("DUTCH"),
-        _T("DUTCH_BELGIAN"),
-        _T("ENGLISH"),
-        _T("ENGLISH_UK"),
-        _T("ENGLISH_US"),
-        _T("ENGLISH_AUSTRALIA"),
-        _T("ENGLISH_BELIZE"),
-        _T("ENGLISH_BOTSWANA"),
-        _T("ENGLISH_CANADA"),
-        _T("ENGLISH_CARIBBEAN"),
-        _T("ENGLISH_DENMARK"),
-        _T("ENGLISH_EIRE"),
-        _T("ENGLISH_JAMAICA"),
-        _T("ENGLISH_NEW_ZEALAND"),
-        _T("ENGLISH_PHILIPPINES"),
-        _T("ENGLISH_SOUTH_AFRICA"),
-        _T("ENGLISH_TRINIDAD"),
-        _T("ENGLISH_ZIMBABWE"),
-        _T("ESPERANTO"),
-        _T("ESTONIAN"),
-        _T("FAEROESE"),
-        _T("FARSI"),
-        _T("FIJI"),
-        _T("FINNISH"),
-        _T("FRENCH"),
-        _T("FRENCH_BELGIAN"),
-        _T("FRENCH_CANADIAN"),
-        _T("FRENCH_LUXEMBOURG"),
-        _T("FRENCH_MONACO"),
-        _T("FRENCH_SWISS"),
-        _T("FRISIAN"),
-        _T("GALICIAN"),
-        _T("GEORGIAN"),
-        _T("GERMAN"),
-        _T("GERMAN_AUSTRIAN"),
-        _T("GERMAN_BELGIUM"),
-        _T("GERMAN_LIECHTENSTEIN"),
-        _T("GERMAN_LUXEMBOURG"),
-        _T("GERMAN_SWISS"),
-        _T("GREEK"),
-        _T("GREENLANDIC"),
-        _T("GUARANI"),
-        _T("GUJARATI"),
-        _T("HAUSA"),
-        _T("HEBREW"),
-        _T("HINDI"),
-        _T("HUNGARIAN"),
-        _T("ICELANDIC"),
-        _T("INDONESIAN"),
-        _T("INTERLINGUA"),
-        _T("INTERLINGUE"),
-        _T("INUKTITUT"),
-        _T("INUPIAK"),
-        _T("IRISH"),
-        _T("ITALIAN"),
-        _T("ITALIAN_SWISS"),
-        _T("JAPANESE"),
-        _T("JAVANESE"),
-        _T("KANNADA"),
-        _T("KASHMIRI"),
-        _T("KASHMIRI_INDIA"),
-        _T("KAZAKH"),
-        _T("KERNEWEK"),
-        _T("KINYARWANDA"),
-        _T("KIRGHIZ"),
-        _T("KIRUNDI"),
-        _T("KONKANI"),
-        _T("KOREAN"),
-        _T("KURDISH"),
-        _T("LAOTHIAN"),
-        _T("LATIN"),
-        _T("LATVIAN"),
-        _T("LINGALA"),
-        _T("LITHUANIAN"),
-        _T("MACEDONIAN"),
-        _T("MALAGASY"),
-        _T("MALAY"),
-        _T("MALAYALAM"),
-        _T("MALAY_BRUNEI_DARUSSALAM"),
-        _T("MALAY_MALAYSIA"),
-        _T("MALTESE"),
-        _T("MANIPURI"),
-        _T("MAORI"),
-        _T("MARATHI"),
-        _T("MOLDAVIAN"),
-        _T("MONGOLIAN"),
-        _T("NAURU"),
-        _T("NEPALI"),
-        _T("NEPALI_INDIA"),
-        _T("NORWEGIAN_BOKMAL"),
-        _T("NORWEGIAN_NYNORSK"),
-        _T("OCCITAN"),
-        _T("ORIYA"),
-        _T("OROMO"),
-        _T("PASHTO"),
-        _T("POLISH"),
-        _T("PORTUGUESE"),
-        _T("PORTUGUESE_BRAZILIAN"),
-        _T("PUNJABI"),
-        _T("QUECHUA"),
-        _T("RHAETO_ROMANCE"),
-        _T("ROMANIAN"),
-        _T("RUSSIAN"),
-        _T("RUSSIAN_UKRAINE"),
-        _T("SAMOAN"),
-        _T("SANGHO"),
-        _T("SANSKRIT"),
-        _T("SCOTS_GAELIC"),
-        _T("SERBIAN"),
-        _T("SERBIAN_CYRILLIC"),
-        _T("SERBIAN_LATIN"),
-        _T("SERBO_CROATIAN"),
-        _T("SESOTHO"),
-        _T("SETSWANA"),
-        _T("SHONA"),
-        _T("SINDHI"),
-        _T("SINHALESE"),
-        _T("SISWATI"),
-        _T("SLOVAK"),
-        _T("SLOVENIAN"),
-        _T("SOMALI"),
-        _T("SPANISH"),
-        _T("SPANISH_ARGENTINA"),
-        _T("SPANISH_BOLIVIA"),
-        _T("SPANISH_CHILE"),
-        _T("SPANISH_COLOMBIA"),
-        _T("SPANISH_COSTA_RICA"),
-        _T("SPANISH_DOMINICAN_REPUBLIC"),
-        _T("SPANISH_ECUADOR"),
-        _T("SPANISH_EL_SALVADOR"),
-        _T("SPANISH_GUATEMALA"),
-        _T("SPANISH_HONDURAS"),
-        _T("SPANISH_MEXICAN"),
-        _T("SPANISH_MODERN"),
-        _T("SPANISH_NICARAGUA"),
-        _T("SPANISH_PANAMA"),
-        _T("SPANISH_PARAGUAY"),
-        _T("SPANISH_PERU"),
-        _T("SPANISH_PUERTO_RICO"),
-        _T("SPANISH_URUGUAY"),
-        _T("SPANISH_US"),
-        _T("SPANISH_VENEZUELA"),
-        _T("SUNDANESE"),
-        _T("SWAHILI"),
-        _T("SWEDISH"),
-        _T("SWEDISH_FINLAND"),
-        _T("TAGALOG"),
-        _T("TAJIK"),
-        _T("TAMIL"),
-        _T("TATAR"),
-        _T("TELUGU"),
-        _T("THAI"),
-        _T("TIBETAN"),
-        _T("TIGRINYA"),
-        _T("TONGA"),
-        _T("TSONGA"),
-        _T("TURKISH"),
-        _T("TURKMEN"),
-        _T("TWI"),
-        _T("UIGHUR"),
-        _T("UKRAINIAN"),
-        _T("URDU"),
-        _T("URDU_INDIA"),
-        _T("URDU_PAKISTAN"),
-        _T("UZBEK"),
-        _T("UZBEK_CYRILLIC"),
-        _T("UZBEK_LATIN"),
-        _T("VIETNAMESE"),
-        _T("VOLAPUK"),
-        _T("WELSH"),
-        _T("WOLOF"),
-        _T("XHOSA"),
-        _T("YIDDISH"),
-        _T("YORUBA"),
-        _T("ZHUANG"),
-        _T("ZULU"),
+        wxT("DEFAULT"),
+        wxT("UNKNOWN"),
+        wxT("ABKHAZIAN"),
+        wxT("AFAR"),
+        wxT("AFRIKAANS"),
+        wxT("ALBANIAN"),
+        wxT("AMHARIC"),
+        wxT("ARABIC"),
+        wxT("ARABIC_ALGERIA"),
+        wxT("ARABIC_BAHRAIN"),
+        wxT("ARABIC_EGYPT"),
+        wxT("ARABIC_IRAQ"),
+        wxT("ARABIC_JORDAN"),
+        wxT("ARABIC_KUWAIT"),
+        wxT("ARABIC_LEBANON"),
+        wxT("ARABIC_LIBYA"),
+        wxT("ARABIC_MOROCCO"),
+        wxT("ARABIC_OMAN"),
+        wxT("ARABIC_QATAR"),
+        wxT("ARABIC_SAUDI_ARABIA"),
+        wxT("ARABIC_SUDAN"),
+        wxT("ARABIC_SYRIA"),
+        wxT("ARABIC_TUNISIA"),
+        wxT("ARABIC_UAE"),
+        wxT("ARABIC_YEMEN"),
+        wxT("ARMENIAN"),
+        wxT("ASSAMESE"),
+        wxT("AYMARA"),
+        wxT("AZERI"),
+        wxT("AZERI_CYRILLIC"),
+        wxT("AZERI_LATIN"),
+        wxT("BASHKIR"),
+        wxT("BASQUE"),
+        wxT("BELARUSIAN"),
+        wxT("BENGALI"),
+        wxT("BHUTANI"),
+        wxT("BIHARI"),
+        wxT("BISLAMA"),
+        wxT("BRETON"),
+        wxT("BULGARIAN"),
+        wxT("BURMESE"),
+        wxT("CAMBODIAN"),
+        wxT("CATALAN"),
+        wxT("CHINESE"),
+        wxT("CHINESE_SIMPLIFIED"),
+        wxT("CHINESE_TRADITIONAL"),
+        wxT("CHINESE_HONGKONG"),
+        wxT("CHINESE_MACAU"),
+        wxT("CHINESE_SINGAPORE"),
+        wxT("CHINESE_TAIWAN"),
+        wxT("CORSICAN"),
+        wxT("CROATIAN"),
+        wxT("CZECH"),
+        wxT("DANISH"),
+        wxT("DUTCH"),
+        wxT("DUTCH_BELGIAN"),
+        wxT("ENGLISH"),
+        wxT("ENGLISH_UK"),
+        wxT("ENGLISH_US"),
+        wxT("ENGLISH_AUSTRALIA"),
+        wxT("ENGLISH_BELIZE"),
+        wxT("ENGLISH_BOTSWANA"),
+        wxT("ENGLISH_CANADA"),
+        wxT("ENGLISH_CARIBBEAN"),
+        wxT("ENGLISH_DENMARK"),
+        wxT("ENGLISH_EIRE"),
+        wxT("ENGLISH_JAMAICA"),
+        wxT("ENGLISH_NEW_ZEALAND"),
+        wxT("ENGLISH_PHILIPPINES"),
+        wxT("ENGLISH_SOUTH_AFRICA"),
+        wxT("ENGLISH_TRINIDAD"),
+        wxT("ENGLISH_ZIMBABWE"),
+        wxT("ESPERANTO"),
+        wxT("ESTONIAN"),
+        wxT("FAEROESE"),
+        wxT("FARSI"),
+        wxT("FIJI"),
+        wxT("FINNISH"),
+        wxT("FRENCH"),
+        wxT("FRENCH_BELGIAN"),
+        wxT("FRENCH_CANADIAN"),
+        wxT("FRENCH_LUXEMBOURG"),
+        wxT("FRENCH_MONACO"),
+        wxT("FRENCH_SWISS"),
+        wxT("FRISIAN"),
+        wxT("GALICIAN"),
+        wxT("GEORGIAN"),
+        wxT("GERMAN"),
+        wxT("GERMAN_AUSTRIAN"),
+        wxT("GERMAN_BELGIUM"),
+        wxT("GERMAN_LIECHTENSTEIN"),
+        wxT("GERMAN_LUXEMBOURG"),
+        wxT("GERMAN_SWISS"),
+        wxT("GREEK"),
+        wxT("GREENLANDIC"),
+        wxT("GUARANI"),
+        wxT("GUJARATI"),
+        wxT("HAUSA"),
+        wxT("HEBREW"),
+        wxT("HINDI"),
+        wxT("HUNGARIAN"),
+        wxT("ICELANDIC"),
+        wxT("INDONESIAN"),
+        wxT("INTERLINGUA"),
+        wxT("INTERLINGUE"),
+        wxT("INUKTITUT"),
+        wxT("INUPIAK"),
+        wxT("IRISH"),
+        wxT("ITALIAN"),
+        wxT("ITALIAN_SWISS"),
+        wxT("JAPANESE"),
+        wxT("JAVANESE"),
+        wxT("KANNADA"),
+        wxT("KASHMIRI"),
+        wxT("KASHMIRI_INDIA"),
+        wxT("KAZAKH"),
+        wxT("KERNEWEK"),
+        wxT("KINYARWANDA"),
+        wxT("KIRGHIZ"),
+        wxT("KIRUNDI"),
+        wxT("KONKANI"),
+        wxT("KOREAN"),
+        wxT("KURDISH"),
+        wxT("LAOTHIAN"),
+        wxT("LATIN"),
+        wxT("LATVIAN"),
+        wxT("LINGALA"),
+        wxT("LITHUANIAN"),
+        wxT("MACEDONIAN"),
+        wxT("MALAGASY"),
+        wxT("MALAY"),
+        wxT("MALAYALAM"),
+        wxT("MALAY_BRUNEI_DARUSSALAM"),
+        wxT("MALAY_MALAYSIA"),
+        wxT("MALTESE"),
+        wxT("MANIPURI"),
+        wxT("MAORI"),
+        wxT("MARATHI"),
+        wxT("MOLDAVIAN"),
+        wxT("MONGOLIAN"),
+        wxT("NAURU"),
+        wxT("NEPALI"),
+        wxT("NEPALI_INDIA"),
+        wxT("NORWEGIAN_BOKMAL"),
+        wxT("NORWEGIAN_NYNORSK"),
+        wxT("OCCITAN"),
+        wxT("ORIYA"),
+        wxT("OROMO"),
+        wxT("PASHTO"),
+        wxT("POLISH"),
+        wxT("PORTUGUESE"),
+        wxT("PORTUGUESE_BRAZILIAN"),
+        wxT("PUNJABI"),
+        wxT("QUECHUA"),
+        wxT("RHAETO_ROMANCE"),
+        wxT("ROMANIAN"),
+        wxT("RUSSIAN"),
+        wxT("RUSSIAN_UKRAINE"),
+        wxT("SAMOAN"),
+        wxT("SANGHO"),
+        wxT("SANSKRIT"),
+        wxT("SCOTS_GAELIC"),
+        wxT("SERBIAN"),
+        wxT("SERBIAN_CYRILLIC"),
+        wxT("SERBIAN_LATIN"),
+        wxT("SERBO_CROATIAN"),
+        wxT("SESOTHO"),
+        wxT("SETSWANA"),
+        wxT("SHONA"),
+        wxT("SINDHI"),
+        wxT("SINHALESE"),
+        wxT("SISWATI"),
+        wxT("SLOVAK"),
+        wxT("SLOVENIAN"),
+        wxT("SOMALI"),
+        wxT("SPANISH"),
+        wxT("SPANISH_ARGENTINA"),
+        wxT("SPANISH_BOLIVIA"),
+        wxT("SPANISH_CHILE"),
+        wxT("SPANISH_COLOMBIA"),
+        wxT("SPANISH_COSTA_RICA"),
+        wxT("SPANISH_DOMINICAN_REPUBLIC"),
+        wxT("SPANISH_ECUADOR"),
+        wxT("SPANISH_EL_SALVADOR"),
+        wxT("SPANISH_GUATEMALA"),
+        wxT("SPANISH_HONDURAS"),
+        wxT("SPANISH_MEXICAN"),
+        wxT("SPANISH_MODERN"),
+        wxT("SPANISH_NICARAGUA"),
+        wxT("SPANISH_PANAMA"),
+        wxT("SPANISH_PARAGUAY"),
+        wxT("SPANISH_PERU"),
+        wxT("SPANISH_PUERTO_RICO"),
+        wxT("SPANISH_URUGUAY"),
+        wxT("SPANISH_US"),
+        wxT("SPANISH_VENEZUELA"),
+        wxT("SUNDANESE"),
+        wxT("SWAHILI"),
+        wxT("SWEDISH"),
+        wxT("SWEDISH_FINLAND"),
+        wxT("TAGALOG"),
+        wxT("TAJIK"),
+        wxT("TAMIL"),
+        wxT("TATAR"),
+        wxT("TELUGU"),
+        wxT("THAI"),
+        wxT("TIBETAN"),
+        wxT("TIGRINYA"),
+        wxT("TONGA"),
+        wxT("TSONGA"),
+        wxT("TURKISH"),
+        wxT("TURKMEN"),
+        wxT("TWI"),
+        wxT("UIGHUR"),
+        wxT("UKRAINIAN"),
+        wxT("URDU"),
+        wxT("URDU_INDIA"),
+        wxT("URDU_PAKISTAN"),
+        wxT("UZBEK"),
+        wxT("UZBEK_CYRILLIC"),
+        wxT("UZBEK_LATIN"),
+        wxT("VIETNAMESE"),
+        wxT("VOLAPUK"),
+        wxT("WELSH"),
+        wxT("WOLOF"),
+        wxT("XHOSA"),
+        wxT("YIDDISH"),
+        wxT("YORUBA"),
+        wxT("ZHUANG"),
+        wxT("ZULU"),
     };
 
     if ( (size_t)lang < WXSIZEOF(languageNames) )
         return languageNames[lang];
     else
-        return _T("INVALID");
+        return wxT("INVALID");
 }
 
 static void TestDefaultLang()
 {
-    wxPuts(_T("*** Testing wxLocale::GetSystemLanguage ***"));
+    wxPuts(wxT("*** Testing wxLocale::GetSystemLanguage ***"));
 
     static const wxChar *langStrings[] =
     {
         NULL,               // system default
-        _T("C"),
-        _T("fr"),
-        _T("fr_FR"),
-        _T("en"),
-        _T("en_GB"),
-        _T("en_US"),
-        _T("de_DE.iso88591"),
-        _T("german"),
-        _T("?"),            // invalid lang spec
-        _T("klingonese"),   // I bet on some systems it does exist...
+        wxT("C"),
+        wxT("fr"),
+        wxT("fr_FR"),
+        wxT("en"),
+        wxT("en_GB"),
+        wxT("en_US"),
+        wxT("de_DE.iso88591"),
+        wxT("german"),
+        wxT("?"),            // invalid lang spec
+        wxT("klingonese"),   // I bet on some systems it does exist...
     };
 
-    wxPrintf(_T("The default system encoding is %s (%d)\n"),
+    wxPrintf(wxT("The default system encoding is %s (%d)\n"),
              wxLocale::GetSystemEncodingName().c_str(),
              wxLocale::GetSystemEncoding());
 
@@ -1239,12 +1239,12 @@ static void TestDefaultLang()
         {
             // FIXME: this doesn't do anything at all under Windows, we need
             //        to create a new wxLocale!
-            wxSetEnv(_T("LC_ALL"), langStr);
+            wxSetEnv(wxT("LC_ALL"), langStr);
         }
 
         int lang = gs_localeDefault.GetSystemLanguage();
-        wxPrintf(_T("Locale for '%s' is %s.\n"),
-                 langStr ? langStr : _T("system default"), GetLangName(lang));
+        wxPrintf(wxT("Locale for '%s' is %s.\n"),
+                 langStr ? langStr : wxT("system default"), GetLangName(lang));
     }
 }
 
@@ -1260,13 +1260,13 @@ static void TestDefaultLang()
 
 static void TestMimeEnum()
 {
-    wxPuts(_T("*** Testing wxMimeTypesManager::EnumAllFileTypes() ***\n"));
+    wxPuts(wxT("*** Testing wxMimeTypesManager::EnumAllFileTypes() ***\n"));
 
     wxArrayString mimetypes;
 
     size_t count = wxTheMimeTypesManager->EnumAllFileTypes(mimetypes);
 
-    wxPrintf(_T("*** All %u known filetypes: ***\n"), count);
+    wxPrintf(wxT("*** All %u known filetypes: ***\n"), count);
 
     wxArrayString exts;
     wxString desc;
@@ -1277,7 +1277,7 @@ static void TestMimeEnum()
             wxTheMimeTypesManager->GetFileTypeFromMimeType(mimetypes[n]);
         if ( !filetype )
         {
-            wxPrintf(_T("nothing known about the filetype '%s'!\n"),
+            wxPrintf(wxT("nothing known about the filetype '%s'!\n"),
                    mimetypes[n].c_str());
             continue;
         }
@@ -1291,11 +1291,11 @@ static void TestMimeEnum()
         for ( size_t e = 0; e < exts.GetCount(); e++ )
         {
             if ( e > 0 )
-                extsAll << _T(", ");
+                extsAll << wxT(", ");
             extsAll += exts[e];
         }
 
-        wxPrintf(_T("\t%s: %s (%s)\n"),
+        wxPrintf(wxT("\t%s: %s (%s)\n"),
                mimetypes[n].c_str(), desc.c_str(), extsAll.c_str());
     }
 
@@ -1304,25 +1304,25 @@ static void TestMimeEnum()
 
 static void TestMimeOverride()
 {
-    wxPuts(_T("*** Testing wxMimeTypesManager additional files loading ***\n"));
+    wxPuts(wxT("*** Testing wxMimeTypesManager additional files loading ***\n"));
 
-    static const wxChar *mailcap = _T("/tmp/mailcap");
-    static const wxChar *mimetypes = _T("/tmp/mime.types");
+    static const wxChar *mailcap = wxT("/tmp/mailcap");
+    static const wxChar *mimetypes = wxT("/tmp/mime.types");
 
     if ( wxFile::Exists(mailcap) )
-        wxPrintf(_T("Loading mailcap from '%s': %s\n"),
+        wxPrintf(wxT("Loading mailcap from '%s': %s\n"),
                  mailcap,
-                 wxTheMimeTypesManager->ReadMailcap(mailcap) ? _T("ok") : _T("ERROR"));
+                 wxTheMimeTypesManager->ReadMailcap(mailcap) ? wxT("ok") : wxT("ERROR"));
     else
-        wxPrintf(_T("WARN: mailcap file '%s' doesn't exist, not loaded.\n"),
+        wxPrintf(wxT("WARN: mailcap file '%s' doesn't exist, not loaded.\n"),
                  mailcap);
 
     if ( wxFile::Exists(mimetypes) )
-        wxPrintf(_T("Loading mime.types from '%s': %s\n"),
+        wxPrintf(wxT("Loading mime.types from '%s': %s\n"),
                  mimetypes,
-                 wxTheMimeTypesManager->ReadMimeTypes(mimetypes) ? _T("ok") : _T("ERROR"));
+                 wxTheMimeTypesManager->ReadMimeTypes(mimetypes) ? wxT("ok") : wxT("ERROR"));
     else
-        wxPrintf(_T("WARN: mime.types file '%s' doesn't exist, not loaded.\n"),
+        wxPrintf(wxT("WARN: mime.types file '%s' doesn't exist, not loaded.\n"),
                  mimetypes);
 
     wxPuts(wxEmptyString);
@@ -1330,39 +1330,39 @@ static void TestMimeOverride()
 
 static void TestMimeFilename()
 {
-    wxPuts(_T("*** Testing MIME type from filename query ***\n"));
+    wxPuts(wxT("*** Testing MIME type from filename query ***\n"));
 
     static const wxChar *filenames[] =
     {
-        _T("readme.txt"),
-        _T("document.pdf"),
-        _T("image.gif"),
-        _T("picture.jpeg"),
+        wxT("readme.txt"),
+        wxT("document.pdf"),
+        wxT("image.gif"),
+        wxT("picture.jpeg"),
     };
 
     for ( size_t n = 0; n < WXSIZEOF(filenames); n++ )
     {
         const wxString fname = filenames[n];
-        wxString ext = fname.AfterLast(_T('.'));
+        wxString ext = fname.AfterLast(wxT('.'));
         wxFileType *ft = wxTheMimeTypesManager->GetFileTypeFromExtension(ext);
         if ( !ft )
         {
-            wxPrintf(_T("WARNING: extension '%s' is unknown.\n"), ext.c_str());
+            wxPrintf(wxT("WARNING: extension '%s' is unknown.\n"), ext.c_str());
         }
         else
         {
             wxString desc;
             if ( !ft->GetDescription(&desc) )
-                desc = _T("<no description>");
+                desc = wxT("<no description>");
 
             wxString cmd;
             if ( !ft->GetOpenCommand(&cmd,
                                      wxFileType::MessageParameters(fname, wxEmptyString)) )
-                cmd = _T("<no command available>");
+                cmd = wxT("<no command available>");
             else
-                cmd = wxString(_T('"')) + cmd + _T('"');
+                cmd = wxString(wxT('"')) + cmd + wxT('"');
 
-            wxPrintf(_T("To open %s (%s) do %s.\n"),
+            wxPrintf(wxT("To open %s (%s) do %s.\n"),
                      fname.c_str(), desc.c_str(), cmd.c_str());
 
             delete ft;
@@ -1374,22 +1374,22 @@ static void TestMimeFilename()
 
 static void TestMimeAssociate()
 {
-    wxPuts(_T("*** Testing creation of filetype association ***\n"));
+    wxPuts(wxT("*** Testing creation of filetype association ***\n"));
 
     wxFileTypeInfo ftInfo(
-                            _T("application/x-xyz"),
-                            _T("xyzview '%s'"), // open cmd
-                            _T(""),             // print cmd
-                            _T("XYZ File"),     // description
-                            _T(".xyz"),         // extensions
+                            wxT("application/x-xyz"),
+                            wxT("xyzview '%s'"), // open cmd
+                            wxT(""),             // print cmd
+                            wxT("XYZ File"),     // description
+                            wxT(".xyz"),         // extensions
                             NULL                // end of extensions
                          );
-    ftInfo.SetShortDesc(_T("XYZFile")); // used under Win32 only
+    ftInfo.SetShortDesc(wxT("XYZFile")); // used under Win32 only
 
     wxFileType *ft = wxTheMimeTypesManager->Associate(ftInfo);
     if ( !ft )
     {
-        wxPuts(_T("ERROR: failed to create association!"));
+        wxPuts(wxT("ERROR: failed to create association!"));
     }
     else
     {
@@ -1413,8 +1413,8 @@ static void TestMimeAssociate()
 class wxTestModule : public wxModule
 {
 protected:
-    virtual bool OnInit() { wxPrintf(_T("Load module: %s\n"), GetClassInfo()->GetClassName()); return true; }
-    virtual void OnExit() { wxPrintf(_T("Unload module: %s\n"), GetClassInfo()->GetClassName()); }
+    virtual bool OnInit() { wxPrintf(wxT("Load module: %s\n"), GetClassInfo()->GetClassName()); return true; }
+    virtual void OnExit() { wxPrintf(wxT("Unload module: %s\n"), GetClassInfo()->GetClassName()); }
 };
 
 class wxTestModuleA : public wxTestModule
@@ -1487,12 +1487,12 @@ wxTestModuleB::wxTestModuleB()
 #if TEST_INTERACTIVE
 static void TestDiskInfo()
 {
-    wxPuts(_T("*** Testing wxGetDiskSpace() ***"));
+    wxPuts(wxT("*** Testing wxGetDiskSpace() ***"));
 
     for ( ;; )
     {
         wxChar pathname[128];
-        wxPrintf(_T("\nEnter a directory name: "));
+        wxPrintf(wxT("\nEnter a directory name: "));
         if ( !wxFgets(pathname, WXSIZEOF(pathname), stdin) )
             break;
 
@@ -1502,11 +1502,11 @@ static void TestDiskInfo()
         wxLongLong total, free;
         if ( !wxGetDiskSpace(pathname, &total, &free) )
         {
-            wxPuts(_T("ERROR: wxGetDiskSpace failed."));
+            wxPuts(wxT("ERROR: wxGetDiskSpace failed."));
         }
         else
         {
-            wxPrintf(_T("%sKb total, %sKb free on '%s'.\n"),
+            wxPrintf(wxT("%sKb total, %sKb free on '%s'.\n"),
                     (total / 1024).ToString().c_str(),
                     (free / 1024).ToString().c_str(),
                     pathname);
@@ -1517,16 +1517,16 @@ static void TestDiskInfo()
 
 static void TestOsInfo()
 {
-    wxPuts(_T("*** Testing OS info functions ***\n"));
+    wxPuts(wxT("*** Testing OS info functions ***\n"));
 
     int major, minor;
     wxGetOsVersion(&major, &minor);
-    wxPrintf(_T("Running under: %s, version %d.%d\n"),
+    wxPrintf(wxT("Running under: %s, version %d.%d\n"),
             wxGetOsDescription().c_str(), major, minor);
 
-    wxPrintf(_T("%ld free bytes of memory left.\n"), wxGetFreeMemory().ToLong());
+    wxPrintf(wxT("%ld free bytes of memory left.\n"), wxGetFreeMemory().ToLong());
 
-    wxPrintf(_T("Host name is %s (%s).\n"),
+    wxPrintf(wxT("Host name is %s (%s).\n"),
            wxGetHostName().c_str(), wxGetFullHostName().c_str());
 
     wxPuts(wxEmptyString);
@@ -1534,29 +1534,29 @@ static void TestOsInfo()
 
 static void TestPlatformInfo()
 {
-    wxPuts(_T("*** Testing wxPlatformInfo functions ***\n"));
+    wxPuts(wxT("*** Testing wxPlatformInfo functions ***\n"));
 
     // get this platform
     wxPlatformInfo plat;
 
-    wxPrintf(_T("Operating system family name is: %s\n"), plat.GetOperatingSystemFamilyName().c_str());
-    wxPrintf(_T("Operating system name is: %s\n"), plat.GetOperatingSystemIdName().c_str());
-    wxPrintf(_T("Port ID name is: %s\n"), plat.GetPortIdName().c_str());
-    wxPrintf(_T("Port ID short name is: %s\n"), plat.GetPortIdShortName().c_str());
-    wxPrintf(_T("Architecture is: %s\n"), plat.GetArchName().c_str());
-    wxPrintf(_T("Endianness is: %s\n"), plat.GetEndiannessName().c_str());
+    wxPrintf(wxT("Operating system family name is: %s\n"), plat.GetOperatingSystemFamilyName().c_str());
+    wxPrintf(wxT("Operating system name is: %s\n"), plat.GetOperatingSystemIdName().c_str());
+    wxPrintf(wxT("Port ID name is: %s\n"), plat.GetPortIdName().c_str());
+    wxPrintf(wxT("Port ID short name is: %s\n"), plat.GetPortIdShortName().c_str());
+    wxPrintf(wxT("Architecture is: %s\n"), plat.GetArchName().c_str());
+    wxPrintf(wxT("Endianness is: %s\n"), plat.GetEndiannessName().c_str());
 
     wxPuts(wxEmptyString);
 }
 
 static void TestUserInfo()
 {
-    wxPuts(_T("*** Testing user info functions ***\n"));
+    wxPuts(wxT("*** Testing user info functions ***\n"));
 
-    wxPrintf(_T("User id is:\t%s\n"), wxGetUserId().c_str());
-    wxPrintf(_T("User name is:\t%s\n"), wxGetUserName().c_str());
-    wxPrintf(_T("Home dir is:\t%s\n"), wxGetHomeDir().c_str());
-    wxPrintf(_T("Email address:\t%s\n"), wxGetEmailAddress().c_str());
+    wxPrintf(wxT("User id is:\t%s\n"), wxGetUserId().c_str());
+    wxPrintf(wxT("User name is:\t%s\n"), wxGetUserName().c_str());
+    wxPrintf(wxT("Home dir is:\t%s\n"), wxGetHomeDir().c_str());
+    wxPrintf(wxT("Email address:\t%s\n"), wxGetEmailAddress().c_str());
 
     wxPuts(wxEmptyString);
 }
@@ -1570,25 +1570,25 @@ static void TestUserInfo()
 #ifdef TEST_PATHLIST
 
 #ifdef __UNIX__
-    #define CMD_IN_PATH _T("ls")
+    #define CMD_IN_PATH wxT("ls")
 #else
-    #define CMD_IN_PATH _T("command.com")
+    #define CMD_IN_PATH wxT("command.com")
 #endif
 
 static void TestPathList()
 {
-    wxPuts(_T("*** Testing wxPathList ***\n"));
+    wxPuts(wxT("*** Testing wxPathList ***\n"));
 
     wxPathList pathlist;
-    pathlist.AddEnvList(_T("PATH"));
+    pathlist.AddEnvList(wxT("PATH"));
     wxString path = pathlist.FindValidPath(CMD_IN_PATH);
     if ( path.empty() )
     {
-        wxPrintf(_T("ERROR: command not found in the path.\n"));
+        wxPrintf(wxT("ERROR: command not found in the path.\n"));
     }
     else
     {
-        wxPrintf(_T("Command found in the path as '%s'.\n"), path.c_str());
+        wxPrintf(wxT("Command found in the path as '%s'.\n"), path.c_str());
     }
 }
 
@@ -1604,12 +1604,12 @@ static void TestPathList()
 
 static void TestRegExInteractive()
 {
-    wxPuts(_T("*** Testing RE interactively ***"));
+    wxPuts(wxT("*** Testing RE interactively ***"));
 
     for ( ;; )
     {
         wxChar pattern[128];
-        wxPrintf(_T("\nEnter a pattern: "));
+        wxPrintf(wxT("\nEnter a pattern: "));
         if ( !wxFgets(pattern, WXSIZEOF(pattern), stdin) )
             break;
 
@@ -1625,7 +1625,7 @@ static void TestRegExInteractive()
         wxChar text[128];
         for ( ;; )
         {
-            wxPrintf(_T("Enter text to match: "));
+            wxPrintf(wxT("Enter text to match: "));
             if ( !wxFgets(text, WXSIZEOF(text), stdin) )
                 break;
 
@@ -1634,11 +1634,11 @@ static void TestRegExInteractive()
 
             if ( !re.Matches(text) )
             {
-                wxPrintf(_T("No match.\n"));
+                wxPrintf(wxT("No match.\n"));
             }
             else
             {
-                wxPrintf(_T("Pattern matches at '%s'\n"), re.GetMatch(text).c_str());
+                wxPrintf(wxT("Pattern matches at '%s'\n"), re.GetMatch(text).c_str());
 
                 size_t start, len;
                 for ( size_t n = 1; ; n++ )
@@ -1648,7 +1648,7 @@ static void TestRegExInteractive()
                         break;
                     }
 
-                    wxPrintf(_T("Subexpr %u matched '%s'\n"),
+                    wxPrintf(wxT("Subexpr %u matched '%s'\n"),
                              n, wxString(text + start, len).c_str());
                 }
             }
@@ -1712,25 +1712,25 @@ static void rfg2 (void);
 static void
 fmtchk (const wxChar *fmt)
 {
-  (void) wxPrintf(_T("%s:\t`"), fmt);
+  (void) wxPrintf(wxT("%s:\t`"), fmt);
   (void) wxPrintf(fmt, 0x12);
-  (void) wxPrintf(_T("'\n"));
+  (void) wxPrintf(wxT("'\n"));
 }
 
 static void
 fmtst1chk (const wxChar *fmt)
 {
-  (void) wxPrintf(_T("%s:\t`"), fmt);
+  (void) wxPrintf(wxT("%s:\t`"), fmt);
   (void) wxPrintf(fmt, 4, 0x12);
-  (void) wxPrintf(_T("'\n"));
+  (void) wxPrintf(wxT("'\n"));
 }
 
 static void
 fmtst2chk (const wxChar *fmt)
 {
-  (void) wxPrintf(_T("%s:\t`"), fmt);
+  (void) wxPrintf(wxT("%s:\t`"), fmt);
   (void) wxPrintf(fmt, 4, 4, 0x12);
-  (void) wxPrintf(_T("'\n"));
+  (void) wxPrintf(wxT("'\n"));
 }
 
 /* This page is covered by the following copyright: */
@@ -1766,125 +1766,125 @@ fp_test (void)
   wxChar *prefix = buf;
   wxChar tp[20];
 
-  wxPuts(_T("\nFormatted output test"));
-  wxPrintf(_T("prefix  6d      6o      6x      6X      6u\n"));
-  wxStrcpy(prefix, _T("%"));
+  wxPuts(wxT("\nFormatted output test"));
+  wxPrintf(wxT("prefix  6d      6o      6x      6X      6u\n"));
+  wxStrcpy(prefix, wxT("%"));
   for (i = 0; i < 2; i++) {
     for (j = 0; j < 2; j++) {
       for (k = 0; k < 2; k++) {
         for (l = 0; l < 2; l++) {
-          wxStrcpy(prefix, _T("%"));
-          if (i == 0) wxStrcat(prefix, _T("-"));
-          if (j == 0) wxStrcat(prefix, _T("+"));
-          if (k == 0) wxStrcat(prefix, _T("#"));
-          if (l == 0) wxStrcat(prefix, _T("0"));
-          wxPrintf(_T("%5s |"), prefix);
+          wxStrcpy(prefix, wxT("%"));
+          if (i == 0) wxStrcat(prefix, wxT("-"));
+          if (j == 0) wxStrcat(prefix, wxT("+"));
+          if (k == 0) wxStrcat(prefix, wxT("#"));
+          if (l == 0) wxStrcat(prefix, wxT("0"));
+          wxPrintf(wxT("%5s |"), prefix);
           wxStrcpy(tp, prefix);
-          wxStrcat(tp, _T("6d |"));
+          wxStrcat(tp, wxT("6d |"));
           wxPrintf(tp, DEC);
           wxStrcpy(tp, prefix);
-          wxStrcat(tp, _T("6o |"));
+          wxStrcat(tp, wxT("6o |"));
           wxPrintf(tp, INT);
           wxStrcpy(tp, prefix);
-          wxStrcat(tp, _T("6x |"));
+          wxStrcat(tp, wxT("6x |"));
           wxPrintf(tp, INT);
           wxStrcpy(tp, prefix);
-          wxStrcat(tp, _T("6X |"));
+          wxStrcat(tp, wxT("6X |"));
           wxPrintf(tp, INT);
           wxStrcpy(tp, prefix);
-          wxStrcat(tp, _T("6u |"));
+          wxStrcat(tp, wxT("6u |"));
           wxPrintf(tp, UNS);
-          wxPrintf(_T("\n"));
+          wxPrintf(wxT("\n"));
         }
       }
     }
   }
-  wxPrintf(_T("%10s\n"), PointerNull);
-  wxPrintf(_T("%-10s\n"), PointerNull);
+  wxPrintf(wxT("%10s\n"), PointerNull);
+  wxPrintf(wxT("%-10s\n"), PointerNull);
 }
 
 static void TestPrintf()
 {
-  static wxChar shortstr[] = _T("Hi, Z.");
-  static wxChar longstr[] = _T("Good morning, Doctor Chandra.  This is Hal.  \
+  static wxChar shortstr[] = wxT("Hi, Z.");
+  static wxChar longstr[] = wxT("Good morning, Doctor Chandra.  This is Hal.  \
 I am ready for my first lesson today.");
   int result = 0;
   wxString test_format;
 
-  fmtchk(_T("%.4x"));
-  fmtchk(_T("%04x"));
-  fmtchk(_T("%4.4x"));
-  fmtchk(_T("%04.4x"));
-  fmtchk(_T("%4.3x"));
-  fmtchk(_T("%04.3x"));
-
-  fmtst1chk(_T("%.*x"));
-  fmtst1chk(_T("%0*x"));
-  fmtst2chk(_T("%*.*x"));
-  fmtst2chk(_T("%0*.*x"));
+  fmtchk(wxT("%.4x"));
+  fmtchk(wxT("%04x"));
+  fmtchk(wxT("%4.4x"));
+  fmtchk(wxT("%04.4x"));
+  fmtchk(wxT("%4.3x"));
+  fmtchk(wxT("%04.3x"));
+
+  fmtst1chk(wxT("%.*x"));
+  fmtst1chk(wxT("%0*x"));
+  fmtst2chk(wxT("%*.*x"));
+  fmtst2chk(wxT("%0*.*x"));
 
-  wxString bad_format = _T("bad format:\t\"%b\"\n");
+  wxString bad_format = wxT("bad format:\t\"%b\"\n");
   wxPrintf(bad_format.c_str());
-  wxPrintf(_T("nil pointer (padded):\t\"%10p\"\n"), (void *) NULL);
+  wxPrintf(wxT("nil pointer (padded):\t\"%10p\"\n"), (void *) NULL);
 
-  wxPrintf(_T("decimal negative:\t\"%d\"\n"), -2345);
-  wxPrintf(_T("octal negative:\t\"%o\"\n"), -2345);
-  wxPrintf(_T("hex negative:\t\"%x\"\n"), -2345);
-  wxPrintf(_T("long decimal number:\t\"%ld\"\n"), -123456L);
-  wxPrintf(_T("long octal negative:\t\"%lo\"\n"), -2345L);
-  wxPrintf(_T("long unsigned decimal number:\t\"%lu\"\n"), -123456L);
-  wxPrintf(_T("zero-padded LDN:\t\"%010ld\"\n"), -123456L);
-  test_format = _T("left-adjusted ZLDN:\t\"%-010ld\"\n");
+  wxPrintf(wxT("decimal negative:\t\"%d\"\n"), -2345);
+  wxPrintf(wxT("octal negative:\t\"%o\"\n"), -2345);
+  wxPrintf(wxT("hex negative:\t\"%x\"\n"), -2345);
+  wxPrintf(wxT("long decimal number:\t\"%ld\"\n"), -123456L);
+  wxPrintf(wxT("long octal negative:\t\"%lo\"\n"), -2345L);
+  wxPrintf(wxT("long unsigned decimal number:\t\"%lu\"\n"), -123456L);
+  wxPrintf(wxT("zero-padded LDN:\t\"%010ld\"\n"), -123456L);
+  test_format = wxT("left-adjusted ZLDN:\t\"%-010ld\"\n");
   wxPrintf(test_format.c_str(), -123456);
-  wxPrintf(_T("space-padded LDN:\t\"%10ld\"\n"), -123456L);
-  wxPrintf(_T("left-adjusted SLDN:\t\"%-10ld\"\n"), -123456L);
+  wxPrintf(wxT("space-padded LDN:\t\"%10ld\"\n"), -123456L);
+  wxPrintf(wxT("left-adjusted SLDN:\t\"%-10ld\"\n"), -123456L);
 
-  test_format = _T("zero-padded string:\t\"%010s\"\n");
+  test_format = wxT("zero-padded string:\t\"%010s\"\n");
   wxPrintf(test_format.c_str(), shortstr);
-  test_format = _T("left-adjusted Z string:\t\"%-010s\"\n");
+  test_format = wxT("left-adjusted Z string:\t\"%-010s\"\n");
   wxPrintf(test_format.c_str(), shortstr);
-  wxPrintf(_T("space-padded string:\t\"%10s\"\n"), shortstr);
-  wxPrintf(_T("left-adjusted S string:\t\"%-10s\"\n"), shortstr);
-  wxPrintf(_T("null string:\t\"%s\"\n"), PointerNull);
-  wxPrintf(_T("limited string:\t\"%.22s\"\n"), longstr);
-
-  wxPrintf(_T("e-style >= 1:\t\"%e\"\n"), 12.34);
-  wxPrintf(_T("e-style >= .1:\t\"%e\"\n"), 0.1234);
-  wxPrintf(_T("e-style < .1:\t\"%e\"\n"), 0.001234);
-  wxPrintf(_T("e-style big:\t\"%.60e\"\n"), 1e20);
-  wxPrintf(_T("e-style == .1:\t\"%e\"\n"), 0.1);
-  wxPrintf(_T("f-style >= 1:\t\"%f\"\n"), 12.34);
-  wxPrintf(_T("f-style >= .1:\t\"%f\"\n"), 0.1234);
-  wxPrintf(_T("f-style < .1:\t\"%f\"\n"), 0.001234);
-  wxPrintf(_T("g-style >= 1:\t\"%g\"\n"), 12.34);
-  wxPrintf(_T("g-style >= .1:\t\"%g\"\n"), 0.1234);
-  wxPrintf(_T("g-style < .1:\t\"%g\"\n"), 0.001234);
-  wxPrintf(_T("g-style big:\t\"%.60g\"\n"), 1e20);
-
-  wxPrintf (_T(" %6.5f\n"), .099999999860301614);
-  wxPrintf (_T(" %6.5f\n"), .1);
-  wxPrintf (_T("x%5.4fx\n"), .5);
+  wxPrintf(wxT("space-padded string:\t\"%10s\"\n"), shortstr);
+  wxPrintf(wxT("left-adjusted S string:\t\"%-10s\"\n"), shortstr);
+  wxPrintf(wxT("null string:\t\"%s\"\n"), PointerNull);
+  wxPrintf(wxT("limited string:\t\"%.22s\"\n"), longstr);
+
+  wxPrintf(wxT("e-style >= 1:\t\"%e\"\n"), 12.34);
+  wxPrintf(wxT("e-style >= .1:\t\"%e\"\n"), 0.1234);
+  wxPrintf(wxT("e-style < .1:\t\"%e\"\n"), 0.001234);
+  wxPrintf(wxT("e-style big:\t\"%.60e\"\n"), 1e20);
+  wxPrintf(wxT("e-style == .1:\t\"%e\"\n"), 0.1);
+  wxPrintf(wxT("f-style >= 1:\t\"%f\"\n"), 12.34);
+  wxPrintf(wxT("f-style >= .1:\t\"%f\"\n"), 0.1234);
+  wxPrintf(wxT("f-style < .1:\t\"%f\"\n"), 0.001234);
+  wxPrintf(wxT("g-style >= 1:\t\"%g\"\n"), 12.34);
+  wxPrintf(wxT("g-style >= .1:\t\"%g\"\n"), 0.1234);
+  wxPrintf(wxT("g-style < .1:\t\"%g\"\n"), 0.001234);
+  wxPrintf(wxT("g-style big:\t\"%.60g\"\n"), 1e20);
+
+  wxPrintf (wxT(" %6.5f\n"), .099999999860301614);
+  wxPrintf (wxT(" %6.5f\n"), .1);
+  wxPrintf (wxT("x%5.4fx\n"), .5);
 
-  wxPrintf (_T("%#03x\n"), 1);
+  wxPrintf (wxT("%#03x\n"), 1);
 
-  //wxPrintf (_T("something really insane: %.10000f\n"), 1.0);
+  //wxPrintf (wxT("something really insane: %.10000f\n"), 1.0);
 
   {
     double d = FLT_MIN;
     int niter = 17;
 
     while (niter-- != 0)
-      wxPrintf (_T("%.17e\n"), d / 2);
+      wxPrintf (wxT("%.17e\n"), d / 2);
     fflush (stdout);
   }
 
 #ifndef __WATCOMC__
   // Open Watcom cause compiler error here
   // Error! E173: col(24) floating-point constant too small to represent
-  wxPrintf (_T("%15.5e\n"), 4.9406564584124654e-324);
+  wxPrintf (wxT("%15.5e\n"), 4.9406564584124654e-324);
 #endif
 
-#define FORMAT _T("|%12.4f|%12.4e|%12.4g|\n")
+#define FORMAT wxT("|%12.4f|%12.4e|%12.4g|\n")
   wxPrintf (FORMAT, 0.0, 0.0, 0.0);
   wxPrintf (FORMAT, 1.0, 1.0, 1.0);
   wxPrintf (FORMAT, -1.0, -1.0, -1.0);
@@ -1898,9 +1898,9 @@ I am ready for my first lesson today.");
 
   {
     wxChar buf[20];
-    int rc = wxSnprintf (buf, WXSIZEOF(buf), _T("%30s"), _T("foo"));
+    int rc = wxSnprintf (buf, WXSIZEOF(buf), wxT("%30s"), wxT("foo"));
 
-    wxPrintf(_T("snprintf (\"%%30s\", \"foo\") == %d, \"%.*s\"\n"),
+    wxPrintf(wxT("snprintf (\"%%30s\", \"foo\") == %d, \"%.*s\"\n"),
              rc, WXSIZEOF(buf), buf);
 #if 0
     wxChar buf2[512];
@@ -1911,54 +1911,54 @@ I am ready for my first lesson today.");
 
   fp_test ();
 
-  wxPrintf (_T("%e should be 1.234568e+06\n"), 1234567.8);
-  wxPrintf (_T("%f should be 1234567.800000\n"), 1234567.8);
-  wxPrintf (_T("%g should be 1.23457e+06\n"), 1234567.8);
-  wxPrintf (_T("%g should be 123.456\n"), 123.456);
-  wxPrintf (_T("%g should be 1e+06\n"), 1000000.0);
-  wxPrintf (_T("%g should be 10\n"), 10.0);
-  wxPrintf (_T("%g should be 0.02\n"), 0.02);
+  wxPrintf (wxT("%e should be 1.234568e+06\n"), 1234567.8);
+  wxPrintf (wxT("%f should be 1234567.800000\n"), 1234567.8);
+  wxPrintf (wxT("%g should be 1.23457e+06\n"), 1234567.8);
+  wxPrintf (wxT("%g should be 123.456\n"), 123.456);
+  wxPrintf (wxT("%g should be 1e+06\n"), 1000000.0);
+  wxPrintf (wxT("%g should be 10\n"), 10.0);
+  wxPrintf (wxT("%g should be 0.02\n"), 0.02);
 
   {
     double x=1.0;
-    wxPrintf(_T("%.17f\n"),(1.0/x/10.0+1.0)*x-x);
+    wxPrintf(wxT("%.17f\n"),(1.0/x/10.0+1.0)*x-x);
   }
 
   {
     wxChar buf[200];
 
-    wxSprintf(buf,_T("%*s%*s%*s"),-1,_T("one"),-20,_T("two"),-30,_T("three"));
+    wxSprintf(buf,wxT("%*s%*s%*s"),-1,wxT("one"),-20,wxT("two"),-30,wxT("three"));
 
     result |= wxStrcmp (buf,
-                      _T("onetwo                 three                         "));
+                      wxT("onetwo                 three                         "));
 
-    wxPuts (result != 0 ? _T("Test failed!") : _T("Test ok."));
+    wxPuts (result != 0 ? wxT("Test failed!") : wxT("Test ok."));
   }
 
 #ifdef wxLongLong_t
   {
       wxChar buf[200];
 
-      wxSprintf(buf, _T("%07") wxLongLongFmtSpec _T("o"), wxLL(040000000000));
+      wxSprintf(buf, wxT("%07") wxLongLongFmtSpec wxT("o"), wxLL(040000000000));
       #if 0
         // for some reason below line fails under Borland
-      wxPrintf (_T("sprintf (buf, \"%%07Lo\", 040000000000ll) = %s"), buf);
+      wxPrintf (wxT("sprintf (buf, \"%%07Lo\", 040000000000ll) = %s"), buf);
       #endif
 
-      if (wxStrcmp (buf, _T("40000000000")) != 0)
+      if (wxStrcmp (buf, wxT("40000000000")) != 0)
       {
           result = 1;
-          wxPuts (_T("\tFAILED"));
+          wxPuts (wxT("\tFAILED"));
       }
       wxUnusedVar(result);
       wxPuts (wxEmptyString);
   }
 #endif // wxLongLong_t
 
-  wxPrintf (_T("printf (\"%%hhu\", %u) = %hhu\n"), UCHAR_MAX + 2, UCHAR_MAX + 2);
-  wxPrintf (_T("printf (\"%%hu\", %u) = %hu\n"), USHRT_MAX + 2, USHRT_MAX + 2);
+  wxPrintf (wxT("printf (\"%%hhu\", %u) = %hhu\n"), UCHAR_MAX + 2, UCHAR_MAX + 2);
+  wxPrintf (wxT("printf (\"%%hu\", %u) = %hu\n"), USHRT_MAX + 2, USHRT_MAX + 2);
 
-  wxPuts (_T("--- Should be no further output. ---"));
+  wxPuts (wxT("--- Should be no further output. ---"));
   rfg1 ();
   rfg2 ();
 
@@ -1968,16 +1968,16 @@ I am ready for my first lesson today.");
     wxChar buf[20];
 
     memset (bytes, '\xff', sizeof bytes);
-    wxSprintf (buf, _T("foo%hhn\n"), &bytes[3]);
+    wxSprintf (buf, wxT("foo%hhn\n"), &bytes[3]);
     if (bytes[0] != '\xff' || bytes[1] != '\xff' || bytes[2] != '\xff'
         || bytes[4] != '\xff' || bytes[5] != '\xff' || bytes[6] != '\xff')
       {
-        wxPuts (_T("%hhn overwrite more bytes"));
+        wxPuts (wxT("%hhn overwrite more bytes"));
         result = 1;
       }
     if (bytes[3] != 3)
       {
-        wxPuts (_T("%hhn wrote incorrect value"));
+        wxPuts (wxT("%hhn wrote incorrect value"));
         result = 1;
       }
   }
@@ -1989,24 +1989,24 @@ rfg1 (void)
 {
   wxChar buf[100];
 
-  wxSprintf (buf, _T("%5.s"), _T("xyz"));
-  if (wxStrcmp (buf, _T("     ")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("     "));
-  wxSprintf (buf, _T("%5.f"), 33.3);
-  if (wxStrcmp (buf, _T("   33")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("   33"));
-  wxSprintf (buf, _T("%8.e"), 33.3e7);
-  if (wxStrcmp (buf, _T("   3e+08")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("   3e+08"));
-  wxSprintf (buf, _T("%8.E"), 33.3e7);
-  if (wxStrcmp (buf, _T("   3E+08")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("   3E+08"));
-  wxSprintf (buf, _T("%.g"), 33.3);
-  if (wxStrcmp (buf, _T("3e+01")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("3e+01"));
-  wxSprintf (buf, _T("%.G"), 33.3);
-  if (wxStrcmp (buf, _T("3E+01")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("3E+01"));
+  wxSprintf (buf, wxT("%5.s"), wxT("xyz"));
+  if (wxStrcmp (buf, wxT("     ")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("     "));
+  wxSprintf (buf, wxT("%5.f"), 33.3);
+  if (wxStrcmp (buf, wxT("   33")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("   33"));
+  wxSprintf (buf, wxT("%8.e"), 33.3e7);
+  if (wxStrcmp (buf, wxT("   3e+08")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("   3e+08"));
+  wxSprintf (buf, wxT("%8.E"), 33.3e7);
+  if (wxStrcmp (buf, wxT("   3E+08")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("   3E+08"));
+  wxSprintf (buf, wxT("%.g"), 33.3);
+  if (wxStrcmp (buf, wxT("3e+01")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("3e+01"));
+  wxSprintf (buf, wxT("%.G"), 33.3);
+  if (wxStrcmp (buf, wxT("3E+01")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("3E+01"));
 }
 
 static void
@@ -2017,37 +2017,37 @@ rfg2 (void)
   wxString test_format;
 
   prec = 0;
-  wxSprintf (buf, _T("%.*g"), prec, 3.3);
-  if (wxStrcmp (buf, _T("3")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("3"));
+  wxSprintf (buf, wxT("%.*g"), prec, 3.3);
+  if (wxStrcmp (buf, wxT("3")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("3"));
   prec = 0;
-  wxSprintf (buf, _T("%.*G"), prec, 3.3);
-  if (wxStrcmp (buf, _T("3")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("3"));
+  wxSprintf (buf, wxT("%.*G"), prec, 3.3);
+  if (wxStrcmp (buf, wxT("3")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("3"));
   prec = 0;
-  wxSprintf (buf, _T("%7.*G"), prec, 3.33);
-  if (wxStrcmp (buf, _T("      3")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("      3"));
+  wxSprintf (buf, wxT("%7.*G"), prec, 3.33);
+  if (wxStrcmp (buf, wxT("      3")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("      3"));
   prec = 3;
-  test_format = _T("%04.*o");
+  test_format = wxT("%04.*o");
   wxSprintf (buf, test_format.c_str(), prec, 33);
-  if (wxStrcmp (buf, _T(" 041")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T(" 041"));
+  if (wxStrcmp (buf, wxT(" 041")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT(" 041"));
   prec = 7;
-  test_format = _T("%09.*u");
+  test_format = wxT("%09.*u");
   wxSprintf (buf, test_format.c_str(), prec, 33);
-  if (wxStrcmp (buf, _T("  0000033")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T("  0000033"));
+  if (wxStrcmp (buf, wxT("  0000033")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT("  0000033"));
   prec = 3;
-  test_format = _T("%04.*x");
+  test_format = wxT("%04.*x");
   wxSprintf (buf, test_format.c_str(), prec, 33);
-  if (wxStrcmp (buf, _T(" 021")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T(" 021"));
+  if (wxStrcmp (buf, wxT(" 021")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT(" 021"));
   prec = 3;
-  test_format = _T("%04.*X");
+  test_format = wxT("%04.*X");
   wxSprintf (buf, test_format.c_str(), prec, 33);
-  if (wxStrcmp (buf, _T(" 021")) != 0)
-    wxPrintf (_T("got: '%s', expected: '%s'\n"), buf, _T(" 021"));
+  if (wxStrcmp (buf, wxT(" 021")) != 0)
+    wxPrintf (wxT("got: '%s', expected: '%s'\n"), buf, wxT(" 021"));
 }
 
 #endif // TEST_PRINTF
@@ -2070,22 +2070,22 @@ rfg2 (void)
 #if 0
 static void TestRegConfWrite()
 {
-    wxConfig *config = new wxConfig(_T("myapp"));
-    config->SetPath(_T("/group1"));
-    config->Write(_T("entry1"), _T("foo"));
-    config->SetPath(_T("/group2"));
-    config->Write(_T("entry1"), _T("bar"));
+    wxConfig *config = new wxConfig(wxT("myapp"));
+    config->SetPath(wxT("/group1"));
+    config->Write(wxT("entry1"), wxT("foo"));
+    config->SetPath(wxT("/group2"));
+    config->Write(wxT("entry1"), wxT("bar"));
 }
 #endif
 
 static void TestRegConfRead()
 {
-    wxConfig *config = new wxConfig(_T("myapp"));
+    wxConfig *config = new wxConfig(wxT("myapp"));
 
     wxString str;
     long dummy;
-    config->SetPath(_T("/"));
-    wxPuts(_T("Enumerating / subgroups:"));
+    config->SetPath(wxT("/"));
+    wxPuts(wxT("Enumerating / subgroups:"));
     bool bCont = config->GetFirstGroup(str, dummy);
     while(bCont)
     {
@@ -2103,17 +2103,17 @@ static void TestRegConfRead()
 // I chose this one because I liked its name, but it probably only exists under
 // NT
 static const wxChar *TESTKEY =
-    _T("HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\CrashControl");
+    wxT("HKEY_LOCAL_MACHINE\\SYSTEM\\ControlSet001\\Control\\CrashControl");
 
 static void TestRegistryRead()
 {
-    wxPuts(_T("*** testing registry reading ***"));
+    wxPuts(wxT("*** testing registry reading ***"));
 
     wxRegKey key(TESTKEY);
-    wxPrintf(_T("The test key name is '%s'.\n"), key.GetName().c_str());
+    wxPrintf(wxT("The test key name is '%s'.\n"), key.GetName().c_str());
     if ( !key.Open() )
     {
-        wxPuts(_T("ERROR: test key can't be opened, aborting test."));
+        wxPuts(wxT("ERROR: test key can't be opened, aborting test."));
 
         return;
     }
@@ -2121,43 +2121,43 @@ static void TestRegistryRead()
     size_t nSubKeys, nValues;
     if ( key.GetKeyInfo(&nSubKeys, NULL, &nValues, NULL) )
     {
-        wxPrintf(_T("It has %u subkeys and %u values.\n"), nSubKeys, nValues);
+        wxPrintf(wxT("It has %u subkeys and %u values.\n"), nSubKeys, nValues);
     }
 
-    wxPrintf(_T("Enumerating values:\n"));
+    wxPrintf(wxT("Enumerating values:\n"));
 
     long dummy;
     wxString value;
     bool cont = key.GetFirstValue(value, dummy);
     while ( cont )
     {
-        wxPrintf(_T("Value '%s': type "), value.c_str());
+        wxPrintf(wxT("Value '%s': type "), value.c_str());
         switch ( key.GetValueType(value) )
         {
-            case wxRegKey::Type_None:   wxPrintf(_T("ERROR (none)")); break;
-            case wxRegKey::Type_String: wxPrintf(_T("SZ")); break;
-            case wxRegKey::Type_Expand_String: wxPrintf(_T("EXPAND_SZ")); break;
-            case wxRegKey::Type_Binary: wxPrintf(_T("BINARY")); break;
-            case wxRegKey::Type_Dword: wxPrintf(_T("DWORD")); break;
-            case wxRegKey::Type_Multi_String: wxPrintf(_T("MULTI_SZ")); break;
-            default: wxPrintf(_T("other (unknown)")); break;
+            case wxRegKey::Type_None:   wxPrintf(wxT("ERROR (none)")); break;
+            case wxRegKey::Type_String: wxPrintf(wxT("SZ")); break;
+            case wxRegKey::Type_Expand_String: wxPrintf(wxT("EXPAND_SZ")); break;
+            case wxRegKey::Type_Binary: wxPrintf(wxT("BINARY")); break;
+            case wxRegKey::Type_Dword: wxPrintf(wxT("DWORD")); break;
+            case wxRegKey::Type_Multi_String: wxPrintf(wxT("MULTI_SZ")); break;
+            default: wxPrintf(wxT("other (unknown)")); break;
         }
 
-        wxPrintf(_T(", value = "));
+        wxPrintf(wxT(", value = "));
         if ( key.IsNumericValue(value) )
         {
             long val;
             key.QueryValue(value, &val);
-            wxPrintf(_T("%ld"), val);
+            wxPrintf(wxT("%ld"), val);
         }
         else // string
         {
             wxString val;
             key.QueryValue(value, val);
-            wxPrintf(_T("'%s'"), val.c_str());
+            wxPrintf(wxT("'%s'"), val.c_str());
 
             key.QueryRawValue(value, val);
-            wxPrintf(_T(" (raw value '%s')"), val.c_str());
+            wxPrintf(wxT(" (raw value '%s')"), val.c_str());
         }
 
         wxPutchar('\n');
@@ -2176,26 +2176,26 @@ static void TestRegistryAssociation()
 
     wxRegKey key;
 
-    key.SetName(_T("HKEY_CLASSES_ROOT\\.ddf") );
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\.ddf") );
     key.Create();
-    key = _T("ddxf_auto_file") ;
-    key.SetName(_T("HKEY_CLASSES_ROOT\\.flo") );
+    key = wxT("ddxf_auto_file") ;
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\.flo") );
     key.Create();
-    key = _T("ddxf_auto_file") ;
-    key.SetName(_T("HKEY_CLASSES_ROOT\\ddxf_auto_file\\DefaultIcon"));
+    key = wxT("ddxf_auto_file") ;
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\ddxf_auto_file\\DefaultIcon"));
     key.Create();
-    key = _T("program,0") ;
-    key.SetName(_T("HKEY_CLASSES_ROOT\\ddxf_auto_file\\shell\\open\\command"));
+    key = wxT("program,0") ;
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\ddxf_auto_file\\shell\\open\\command"));
     key.Create();
-    key = _T("program \"%1\"") ;
+    key = wxT("program \"%1\"") ;
 
-    key.SetName(_T("HKEY_CLASSES_ROOT\\.ddf") );
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\.ddf") );
     key.DeleteSelf();
-    key.SetName(_T("HKEY_CLASSES_ROOT\\.flo") );
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\.flo") );
     key.DeleteSelf();
-    key.SetName(_T("HKEY_CLASSES_ROOT\\ddxf_auto_file\\DefaultIcon"));
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\ddxf_auto_file\\DefaultIcon"));
     key.DeleteSelf();
-    key.SetName(_T("HKEY_CLASSES_ROOT\\ddxf_auto_file\\shell\\open\\command"));
+    key.SetName(wxT("HKEY_CLASSES_ROOT\\ddxf_auto_file\\shell\\open\\command"));
     key.DeleteSelf();
 }
 
@@ -2249,7 +2249,7 @@ static void TestScopeGuard()
 
 static void TestSocketServer()
 {
-    wxPuts(_T("*** Testing wxSocketServer ***\n"));
+    wxPuts(wxT("*** Testing wxSocketServer ***\n"));
 
     static const int PORT = 3000;
 
@@ -2259,7 +2259,7 @@ static void TestSocketServer()
     wxSocketServer *server = new wxSocketServer(addr);
     if ( !server->Ok() )
     {
-        wxPuts(_T("ERROR: failed to bind"));
+        wxPuts(wxT("ERROR: failed to bind"));
 
         return;
     }
@@ -2267,16 +2267,16 @@ static void TestSocketServer()
     bool quit = false;
     while ( !quit )
     {
-        wxPrintf(_T("Server: waiting for connection on port %d...\n"), PORT);
+        wxPrintf(wxT("Server: waiting for connection on port %d...\n"), PORT);
 
         wxSocketBase *socket = server->Accept();
         if ( !socket )
         {
-            wxPuts(_T("ERROR: wxSocketServer::Accept() failed."));
+            wxPuts(wxT("ERROR: wxSocketServer::Accept() failed."));
             break;
         }
 
-        wxPuts(_T("Server: got a client."));
+        wxPuts(wxT("Server: got a client."));
 
         server->SetTimeout(60); // 1 min
 
@@ -2284,7 +2284,7 @@ static void TestSocketServer()
         while ( !close && socket->IsConnected() )
         {
             wxString s;
-            wxChar ch = _T('\0');
+            wxChar ch = wxT('\0');
             for ( ;; )
             {
                 if ( socket->Read(&ch, sizeof(ch)).Error() )
@@ -2292,7 +2292,7 @@ static void TestSocketServer()
                     // don't log error if the client just close the connection
                     if ( socket->IsConnected() )
                     {
-                        wxPuts(_T("ERROR: in wxSocket::Read."));
+                        wxPuts(wxT("ERROR: in wxSocket::Read."));
                     }
 
                     break;
@@ -2312,31 +2312,31 @@ static void TestSocketServer()
                 break;
             }
 
-            wxPrintf(_T("Server: got '%s'.\n"), s.c_str());
-            if ( s == _T("close") )
+            wxPrintf(wxT("Server: got '%s'.\n"), s.c_str());
+            if ( s == wxT("close") )
             {
-                wxPuts(_T("Closing connection"));
+                wxPuts(wxT("Closing connection"));
 
                 close = true;
             }
-            else if ( s == _T("quit") )
+            else if ( s == wxT("quit") )
             {
                 close =
                 quit = true;
 
-                wxPuts(_T("Shutting down the server"));
+                wxPuts(wxT("Shutting down the server"));
             }
             else // not a special command
             {
                 socket->Write(s.MakeUpper().c_str(), s.length());
                 socket->Write("\r\n", 2);
-                wxPrintf(_T("Server: wrote '%s'.\n"), s.c_str());
+                wxPrintf(wxT("Server: wrote '%s'.\n"), s.c_str());
             }
         }
 
         if ( !close )
         {
-            wxPuts(_T("Server: lost a client unexpectedly."));
+            wxPuts(wxT("Server: lost a client unexpectedly."));
         }
 
         socket->Destroy();
@@ -2348,36 +2348,36 @@ static void TestSocketServer()
 
 static void TestSocketClient()
 {
-    wxPuts(_T("*** Testing wxSocketClient ***\n"));
+    wxPuts(wxT("*** Testing wxSocketClient ***\n"));
 
-    static const wxChar *hostname = _T("www.wxwidgets.org");
+    static const wxChar *hostname = wxT("www.wxwidgets.org");
 
     wxIPV4address addr;
     addr.Hostname(hostname);
     addr.Service(80);
 
-    wxPrintf(_T("--- Attempting to connect to %s:80...\n"), hostname);
+    wxPrintf(wxT("--- Attempting to connect to %s:80...\n"), hostname);
 
     wxSocketClient client;
     if ( !client.Connect(addr) )
     {
-        wxPrintf(_T("ERROR: failed to connect to %s\n"), hostname);
+        wxPrintf(wxT("ERROR: failed to connect to %s\n"), hostname);
     }
     else
     {
-        wxPrintf(_T("--- Connected to %s:%u...\n"),
+        wxPrintf(wxT("--- Connected to %s:%u...\n"),
                addr.Hostname().c_str(), addr.Service());
 
         wxChar buf[8192];
 
         // could use simply "GET" here I suppose
         wxString cmdGet =
-            wxString::Format(_T("GET http://%s/\r\n"), hostname);
+            wxString::Format(wxT("GET http://%s/\r\n"), hostname);
         client.Write(cmdGet, cmdGet.length());
-        wxPrintf(_T("--- Sent command '%s' to the server\n"),
+        wxPrintf(wxT("--- Sent command '%s' to the server\n"),
                MakePrintable(cmdGet).c_str());
         client.Read(buf, WXSIZEOF(buf));
-        wxPrintf(_T("--- Server replied:\n%s"), buf);
+        wxPrintf(wxT("--- Server replied:\n%s"), buf);
     }
 }
 
@@ -2396,21 +2396,21 @@ static wxFTP ftp;
 #define FTP_ANONYMOUS
 
 #ifdef FTP_ANONYMOUS
-    static const wxChar *directory = _T("/pub");
-    static const wxChar *filename = _T("welcome.msg");
+    static const wxChar *directory = wxT("/pub");
+    static const wxChar *filename = wxT("welcome.msg");
 #else
-    static const wxChar *directory = _T("/etc");
-    static const wxChar *filename = _T("issue");
+    static const wxChar *directory = wxT("/etc");
+    static const wxChar *filename = wxT("issue");
 #endif
 
 static bool TestFtpConnect()
 {
-    wxPuts(_T("*** Testing FTP connect ***"));
+    wxPuts(wxT("*** Testing FTP connect ***"));
 
 #ifdef FTP_ANONYMOUS
-    static const wxChar *hostname = _T("ftp.wxwidgets.org");
+    static const wxChar *hostname = wxT("ftp.wxwidgets.org");
 
-    wxPrintf(_T("--- Attempting to connect to %s:21 anonymously...\n"), hostname);
+    wxPrintf(wxT("--- Attempting to connect to %s:21 anonymously...\n"), hostname);
 #else // !FTP_ANONYMOUS
     static const wxChar *hostname = "localhost";
 
@@ -2420,23 +2420,23 @@ static bool TestFtpConnect()
     ftp.SetUser(user);
 
     wxChar password[256];
-    wxPrintf(_T("Password for %s: "), password);
+    wxPrintf(wxT("Password for %s: "), password);
     wxFgets(password, WXSIZEOF(password), stdin);
     password[wxStrlen(password) - 1] = '\0'; // chop off '\n'
     ftp.SetPassword(password);
 
-    wxPrintf(_T("--- Attempting to connect to %s:21 as %s...\n"), hostname, user);
+    wxPrintf(wxT("--- Attempting to connect to %s:21 as %s...\n"), hostname, user);
 #endif // FTP_ANONYMOUS/!FTP_ANONYMOUS
 
     if ( !ftp.Connect(hostname) )
     {
-        wxPrintf(_T("ERROR: failed to connect to %s\n"), hostname);
+        wxPrintf(wxT("ERROR: failed to connect to %s\n"), hostname);
 
         return false;
     }
     else
     {
-        wxPrintf(_T("--- Connected to %s, current directory is '%s'\n"),
+        wxPrintf(wxT("--- Connected to %s, current directory is '%s'\n"),
                  hostname, ftp.Pwd().c_str());
         ftp.Close();
     }
@@ -2448,32 +2448,32 @@ static bool TestFtpConnect()
 static void TestFtpWuFtpd()
 {
     wxFTP ftp;
-    static const wxChar *hostname = _T("ftp.eudora.com");
+    static const wxChar *hostname = wxT("ftp.eudora.com");
     if ( !ftp.Connect(hostname) )
     {
-        wxPrintf(_T("ERROR: failed to connect to %s\n"), hostname);
+        wxPrintf(wxT("ERROR: failed to connect to %s\n"), hostname);
     }
     else
     {
-        static const wxChar *filename = _T("eudora/pubs/draft-gellens-submit-09.txt");
+        static const wxChar *filename = wxT("eudora/pubs/draft-gellens-submit-09.txt");
         wxInputStream *in = ftp.GetInputStream(filename);
         if ( !in )
         {
-            wxPrintf(_T("ERROR: couldn't get input stream for %s\n"), filename);
+            wxPrintf(wxT("ERROR: couldn't get input stream for %s\n"), filename);
         }
         else
         {
             size_t size = in->GetSize();
-            wxPrintf(_T("Reading file %s (%u bytes)..."), filename, size);
+            wxPrintf(wxT("Reading file %s (%u bytes)..."), filename, size);
 
             wxChar *data = new wxChar[size];
             if ( !in->Read(data, size) )
             {
-                wxPuts(_T("ERROR: read error"));
+                wxPuts(wxT("ERROR: read error"));
             }
             else
             {
-                wxPrintf(_T("Successfully retrieved the file.\n"));
+                wxPrintf(wxT("Successfully retrieved the file.\n"));
             }
 
             delete [] data;
@@ -2484,80 +2484,80 @@ static void TestFtpWuFtpd()
 
 static void TestFtpList()
 {
-    wxPuts(_T("*** Testing wxFTP file listing ***\n"));
+    wxPuts(wxT("*** Testing wxFTP file listing ***\n"));
 
     // test CWD
     if ( !ftp.ChDir(directory) )
     {
-        wxPrintf(_T("ERROR: failed to cd to %s\n"), directory);
+        wxPrintf(wxT("ERROR: failed to cd to %s\n"), directory);
     }
 
-    wxPrintf(_T("Current directory is '%s'\n"), ftp.Pwd().c_str());
+    wxPrintf(wxT("Current directory is '%s'\n"), ftp.Pwd().c_str());
 
     // test NLIST and LIST
     wxArrayString files;
     if ( !ftp.GetFilesList(files) )
     {
-        wxPuts(_T("ERROR: failed to get NLIST of files"));
+        wxPuts(wxT("ERROR: failed to get NLIST of files"));
     }
     else
     {
-        wxPrintf(_T("Brief list of files under '%s':\n"), ftp.Pwd().c_str());
+        wxPrintf(wxT("Brief list of files under '%s':\n"), ftp.Pwd().c_str());
         size_t count = files.GetCount();
         for ( size_t n = 0; n < count; n++ )
         {
-            wxPrintf(_T("\t%s\n"), files[n].c_str());
+            wxPrintf(wxT("\t%s\n"), files[n].c_str());
         }
-        wxPuts(_T("End of the file list"));
+        wxPuts(wxT("End of the file list"));
     }
 
     if ( !ftp.GetDirList(files) )
     {
-        wxPuts(_T("ERROR: failed to get LIST of files"));
+        wxPuts(wxT("ERROR: failed to get LIST of files"));
     }
     else
     {
-        wxPrintf(_T("Detailed list of files under '%s':\n"), ftp.Pwd().c_str());
+        wxPrintf(wxT("Detailed list of files under '%s':\n"), ftp.Pwd().c_str());
         size_t count = files.GetCount();
         for ( size_t n = 0; n < count; n++ )
         {
-            wxPrintf(_T("\t%s\n"), files[n].c_str());
+            wxPrintf(wxT("\t%s\n"), files[n].c_str());
         }
-        wxPuts(_T("End of the file list"));
+        wxPuts(wxT("End of the file list"));
     }
 
-    if ( !ftp.ChDir(_T("..")) )
+    if ( !ftp.ChDir(wxT("..")) )
     {
-        wxPuts(_T("ERROR: failed to cd to .."));
+        wxPuts(wxT("ERROR: failed to cd to .."));
     }
 
-    wxPrintf(_T("Current directory is '%s'\n"), ftp.Pwd().c_str());
+    wxPrintf(wxT("Current directory is '%s'\n"), ftp.Pwd().c_str());
 }
 
 static void TestFtpDownload()
 {
-    wxPuts(_T("*** Testing wxFTP download ***\n"));
+    wxPuts(wxT("*** Testing wxFTP download ***\n"));
 
     // test RETR
     wxInputStream *in = ftp.GetInputStream(filename);
     if ( !in )
     {
-        wxPrintf(_T("ERROR: couldn't get input stream for %s\n"), filename);
+        wxPrintf(wxT("ERROR: couldn't get input stream for %s\n"), filename);
     }
     else
     {
         size_t size = in->GetSize();
-        wxPrintf(_T("Reading file %s (%u bytes)..."), filename, size);
+        wxPrintf(wxT("Reading file %s (%u bytes)..."), filename, size);
         fflush(stdout);
 
         wxChar *data = new wxChar[size];
         if ( !in->Read(data, size) )
         {
-            wxPuts(_T("ERROR: read error"));
+            wxPuts(wxT("ERROR: read error"));
         }
         else
         {
-            wxPrintf(_T("\nContents of %s:\n%s\n"), filename, data);
+            wxPrintf(wxT("\nContents of %s:\n%s\n"), filename, data);
         }
 
         delete [] data;
@@ -2567,62 +2567,62 @@ static void TestFtpDownload()
 
 static void TestFtpFileSize()
 {
-    wxPuts(_T("*** Testing FTP SIZE command ***"));
+    wxPuts(wxT("*** Testing FTP SIZE command ***"));
 
     if ( !ftp.ChDir(directory) )
     {
-        wxPrintf(_T("ERROR: failed to cd to %s\n"), directory);
+        wxPrintf(wxT("ERROR: failed to cd to %s\n"), directory);
     }
 
-    wxPrintf(_T("Current directory is '%s'\n"), ftp.Pwd().c_str());
+    wxPrintf(wxT("Current directory is '%s'\n"), ftp.Pwd().c_str());
 
     if ( ftp.FileExists(filename) )
     {
         int size = ftp.GetFileSize(filename);
         if ( size == -1 )
-            wxPrintf(_T("ERROR: couldn't get size of '%s'\n"), filename);
+            wxPrintf(wxT("ERROR: couldn't get size of '%s'\n"), filename);
         else
-            wxPrintf(_T("Size of '%s' is %d bytes.\n"), filename, size);
+            wxPrintf(wxT("Size of '%s' is %d bytes.\n"), filename, size);
     }
     else
     {
-        wxPrintf(_T("ERROR: '%s' doesn't exist\n"), filename);
+        wxPrintf(wxT("ERROR: '%s' doesn't exist\n"), filename);
     }
 }
 
 static void TestFtpMisc()
 {
-    wxPuts(_T("*** Testing miscellaneous wxFTP functions ***"));
+    wxPuts(wxT("*** Testing miscellaneous wxFTP functions ***"));
 
-    if ( ftp.SendCommand(_T("STAT")) != '2' )
+    if ( ftp.SendCommand(wxT("STAT")) != '2' )
     {
-        wxPuts(_T("ERROR: STAT failed"));
+        wxPuts(wxT("ERROR: STAT failed"));
     }
     else
     {
-        wxPrintf(_T("STAT returned:\n\n%s\n"), ftp.GetLastResult().c_str());
+        wxPrintf(wxT("STAT returned:\n\n%s\n"), ftp.GetLastResult().c_str());
     }
 
-    if ( ftp.SendCommand(_T("HELP SITE")) != '2' )
+    if ( ftp.SendCommand(wxT("HELP SITE")) != '2' )
     {
-        wxPuts(_T("ERROR: HELP SITE failed"));
+        wxPuts(wxT("ERROR: HELP SITE failed"));
     }
     else
     {
-        wxPrintf(_T("The list of site-specific commands:\n\n%s\n"),
+        wxPrintf(wxT("The list of site-specific commands:\n\n%s\n"),
                ftp.GetLastResult().c_str());
     }
 }
 
 static void TestFtpInteractive()
 {
-    wxPuts(_T("\n*** Interactive wxFTP test ***"));
+    wxPuts(wxT("\n*** Interactive wxFTP test ***"));
 
     wxChar buf[128];
 
     for ( ;; )
     {
-        wxPrintf(_T("Enter FTP command: "));
+        wxPrintf(wxT("Enter FTP command: "));
         if ( !wxFgets(buf, WXSIZEOF(buf), stdin) )
             break;
 
@@ -2632,75 +2632,75 @@ static void TestFtpInteractive()
         // special handling of LIST and NLST as they require data connection
         wxString start(buf, 4);
         start.MakeUpper();
-        if ( start == _T("LIST") || start == _T("NLST") )
+        if ( start == wxT("LIST") || start == wxT("NLST") )
         {
             wxString wildcard;
             if ( wxStrlen(buf) > 4 )
                 wildcard = buf + 5;
 
             wxArrayString files;
-            if ( !ftp.GetList(files, wildcard, start == _T("LIST")) )
+            if ( !ftp.GetList(files, wildcard, start == wxT("LIST")) )
             {
-                wxPrintf(_T("ERROR: failed to get %s of files\n"), start.c_str());
+                wxPrintf(wxT("ERROR: failed to get %s of files\n"), start.c_str());
             }
             else
             {
-                wxPrintf(_T("--- %s of '%s' under '%s':\n"),
+                wxPrintf(wxT("--- %s of '%s' under '%s':\n"),
                        start.c_str(), wildcard.c_str(), ftp.Pwd().c_str());
                 size_t count = files.GetCount();
                 for ( size_t n = 0; n < count; n++ )
                 {
-                    wxPrintf(_T("\t%s\n"), files[n].c_str());
+                    wxPrintf(wxT("\t%s\n"), files[n].c_str());
                 }
-                wxPuts(_T("--- End of the file list"));
+                wxPuts(wxT("--- End of the file list"));
             }
         }
         else // !list
         {
             wxChar ch = ftp.SendCommand(buf);
-            wxPrintf(_T("Command %s"), ch ? _T("succeeded") : _T("failed"));
+            wxPrintf(wxT("Command %s"), ch ? wxT("succeeded") : wxT("failed"));
             if ( ch )
             {
-                wxPrintf(_T(" (return code %c)"), ch);
+                wxPrintf(wxT(" (return code %c)"), ch);
             }
 
-            wxPrintf(_T(", server reply:\n%s\n\n"), ftp.GetLastResult().c_str());
+            wxPrintf(wxT(", server reply:\n%s\n\n"), ftp.GetLastResult().c_str());
         }
     }
 
-    wxPuts(_T("\n*** done ***"));
+    wxPuts(wxT("\n*** done ***"));
 }
 
 static void TestFtpUpload()
 {
-    wxPuts(_T("*** Testing wxFTP uploading ***\n"));
+    wxPuts(wxT("*** Testing wxFTP uploading ***\n"));
 
     // upload a file
-    static const wxChar *file1 = _T("test1");
-    static const wxChar *file2 = _T("test2");
+    static const wxChar *file1 = wxT("test1");
+    static const wxChar *file2 = wxT("test2");
     wxOutputStream *out = ftp.GetOutputStream(file1);
     if ( out )
     {
-        wxPrintf(_T("--- Uploading to %s ---\n"), file1);
+        wxPrintf(wxT("--- Uploading to %s ---\n"), file1);
         out->Write("First hello", 11);
         delete out;
     }
 
     // send a command to check the remote file
-    if ( ftp.SendCommand(wxString(_T("STAT ")) + file1) != '2' )
+    if ( ftp.SendCommand(wxString(wxT("STAT ")) + file1) != '2' )
     {
-        wxPrintf(_T("ERROR: STAT %s failed\n"), file1);
+        wxPrintf(wxT("ERROR: STAT %s failed\n"), file1);
     }
     else
     {
-        wxPrintf(_T("STAT %s returned:\n\n%s\n"),
+        wxPrintf(wxT("STAT %s returned:\n\n%s\n"),
                file1, ftp.GetLastResult().c_str());
     }
 
     out = ftp.GetOutputStream(file2);
     if ( out )
     {
-        wxPrintf(_T("--- Uploading to %s ---\n"), file1);
+        wxPrintf(wxT("--- Uploading to %s ---\n"), file1);
         out->Write("Second hello", 12);
         delete out;
     }
@@ -2728,7 +2728,7 @@ public:
 
     virtual void Walk(size_t skip = 1)
     {
-        wxPuts(_T("Stack dump:"));
+        wxPuts(wxT("Stack dump:"));
 
         wxStackWalker::Walk(skip);
     }
@@ -2767,7 +2767,7 @@ protected:
 
 static void TestStackWalk(const char *argv0)
 {
-    wxPuts(_T("*** Testing wxStackWalker ***\n"));
+    wxPuts(wxT("*** Testing wxStackWalker ***\n"));
 
     StackDump dump(argv0);
     dump.Walk();
@@ -2787,27 +2787,27 @@ static void TestStackWalk(const char *ar
 
 static void TestStandardPaths()
 {
-    wxPuts(_T("*** Testing wxStandardPaths ***\n"));
+    wxPuts(wxT("*** Testing wxStandardPaths ***\n"));
 
-    wxTheApp->SetAppName(_T("console"));
+    wxTheApp->SetAppName(wxT("console"));
 
     wxStandardPathsBase& stdp = wxStandardPaths::Get();
-    wxPrintf(_T("Config dir (sys):\t%s\n"), stdp.GetConfigDir().c_str());
-    wxPrintf(_T("Config dir (user):\t%s\n"), stdp.GetUserConfigDir().c_str());
-    wxPrintf(_T("Data dir (sys):\t\t%s\n"), stdp.GetDataDir().c_str());
-    wxPrintf(_T("Data dir (sys local):\t%s\n"), stdp.GetLocalDataDir().c_str());
-    wxPrintf(_T("Data dir (user):\t%s\n"), stdp.GetUserDataDir().c_str());
-    wxPrintf(_T("Data dir (user local):\t%s\n"), stdp.GetUserLocalDataDir().c_str());
-    wxPrintf(_T("Documents dir:\t\t%s\n"), stdp.GetDocumentsDir().c_str());
-    wxPrintf(_T("Executable path:\t%s\n"), stdp.GetExecutablePath().c_str());
-    wxPrintf(_T("Plugins dir:\t\t%s\n"), stdp.GetPluginsDir().c_str());
-    wxPrintf(_T("Resources dir:\t\t%s\n"), stdp.GetResourcesDir().c_str());
-    wxPrintf(_T("Localized res. dir:\t%s\n"),
-             stdp.GetLocalizedResourcesDir(_T("fr")).c_str());
-    wxPrintf(_T("Message catalogs dir:\t%s\n"),
+    wxPrintf(wxT("Config dir (sys):\t%s\n"), stdp.GetConfigDir().c_str());
+    wxPrintf(wxT("Config dir (user):\t%s\n"), stdp.GetUserConfigDir().c_str());
+    wxPrintf(wxT("Data dir (sys):\t\t%s\n"), stdp.GetDataDir().c_str());
+    wxPrintf(wxT("Data dir (sys local):\t%s\n"), stdp.GetLocalDataDir().c_str());
+    wxPrintf(wxT("Data dir (user):\t%s\n"), stdp.GetUserDataDir().c_str());
+    wxPrintf(wxT("Data dir (user local):\t%s\n"), stdp.GetUserLocalDataDir().c_str());
+    wxPrintf(wxT("Documents dir:\t\t%s\n"), stdp.GetDocumentsDir().c_str());
+    wxPrintf(wxT("Executable path:\t%s\n"), stdp.GetExecutablePath().c_str());
+    wxPrintf(wxT("Plugins dir:\t\t%s\n"), stdp.GetPluginsDir().c_str());
+    wxPrintf(wxT("Resources dir:\t\t%s\n"), stdp.GetResourcesDir().c_str());
+    wxPrintf(wxT("Localized res. dir:\t%s\n"),
+             stdp.GetLocalizedResourcesDir(wxT("fr")).c_str());
+    wxPrintf(wxT("Message catalogs dir:\t%s\n"),
              stdp.GetLocalizedResourcesDir
                   (
-                    _T("fr"),
+                    wxT("fr"),
                     wxStandardPaths::ResourceCat_Messages
                   ).c_str());
 }
@@ -2825,9 +2825,9 @@ static void TestStandardPaths()
 
 static void TestFileStream()
 {
-    wxPuts(_T("*** Testing wxFileInputStream ***"));
+    wxPuts(wxT("*** Testing wxFileInputStream ***"));
 
-    static const wxString filename = _T("testdata.fs");
+    static const wxString filename = wxT("testdata.fs");
     {
         wxFileOutputStream fsOut(filename);
         fsOut.Write("foo", 3);
@@ -2835,7 +2835,7 @@ static void TestFileStream()
 
     {
         wxFileInputStream fsIn(filename);
-        wxPrintf(_T("File stream size: %u\n"), fsIn.GetSize());
+        wxPrintf(wxT("File stream size: %u\n"), fsIn.GetSize());
         while ( !fsIn.Eof() )
         {
             wxPutchar(fsIn.GetC());
@@ -2844,41 +2844,41 @@ static void TestFileStream()
 
     if ( !wxRemoveFile(filename) )
     {
-        wxPrintf(_T("ERROR: failed to remove the file '%s'.\n"), filename.c_str());
+        wxPrintf(wxT("ERROR: failed to remove the file '%s'.\n"), filename.c_str());
     }
 
-    wxPuts(_T("\n*** wxFileInputStream test done ***"));
+    wxPuts(wxT("\n*** wxFileInputStream test done ***"));
 }
 
 static void TestMemoryStream()
 {
-    wxPuts(_T("*** Testing wxMemoryOutputStream ***"));
+    wxPuts(wxT("*** Testing wxMemoryOutputStream ***"));
 
     wxMemoryOutputStream memOutStream;
-    wxPrintf(_T("Initially out stream offset: %lu\n"),
+    wxPrintf(wxT("Initially out stream offset: %lu\n"),
              (unsigned long)memOutStream.TellO());
 
-    for ( const wxChar *p = _T("Hello, stream!"); *p; p++ )
+    for ( const wxChar *p = wxT("Hello, stream!"); *p; p++ )
     {
         memOutStream.PutC(*p);
     }
 
-    wxPrintf(_T("Final out stream offset: %lu\n"),
+    wxPrintf(wxT("Final out stream offset: %lu\n"),
              (unsigned long)memOutStream.TellO());
 
-    wxPuts(_T("*** Testing wxMemoryInputStream ***"));
+    wxPuts(wxT("*** Testing wxMemoryInputStream ***"));
 
     wxChar buf[1024];
     size_t len = memOutStream.CopyTo(buf, WXSIZEOF(buf));
 
     wxMemoryInputStream memInpStream(buf, len);
-    wxPrintf(_T("Memory stream size: %u\n"), memInpStream.GetSize());
+    wxPrintf(wxT("Memory stream size: %u\n"), memInpStream.GetSize());
     while ( !memInpStream.Eof() )
     {
         wxPutchar(memInpStream.GetC());
     }
 
-    wxPuts(_T("\n*** wxMemoryInputStream test done ***"));
+    wxPuts(wxT("\n*** wxMemoryInputStream test done ***"));
 }
 
 #endif // TEST_STREAMS
@@ -2894,35 +2894,35 @@ static void TestMemoryStream()
 
 static void TestStopWatch()
 {
-    wxPuts(_T("*** Testing wxStopWatch ***\n"));
+    wxPuts(wxT("*** Testing wxStopWatch ***\n"));
 
     wxStopWatch sw;
     sw.Pause();
-    wxPrintf(_T("Initially paused, after 2 seconds time is..."));
+    wxPrintf(wxT("Initially paused, after 2 seconds time is..."));
     fflush(stdout);
     wxSleep(2);
-    wxPrintf(_T("\t%ldms\n"), sw.Time());
+    wxPrintf(wxT("\t%ldms\n"), sw.Time());
 
-    wxPrintf(_T("Resuming stopwatch and sleeping 3 seconds..."));
+    wxPrintf(wxT("Resuming stopwatch and sleeping 3 seconds..."));
     fflush(stdout);
     sw.Resume();
     wxSleep(3);
-    wxPrintf(_T("\telapsed time: %ldms\n"), sw.Time());
+    wxPrintf(wxT("\telapsed time: %ldms\n"), sw.Time());
 
     sw.Pause();
-    wxPrintf(_T("Pausing agan and sleeping 2 more seconds..."));
+    wxPrintf(wxT("Pausing agan and sleeping 2 more seconds..."));
     fflush(stdout);
     wxSleep(2);
-    wxPrintf(_T("\telapsed time: %ldms\n"), sw.Time());
+    wxPrintf(wxT("\telapsed time: %ldms\n"), sw.Time());
 
     sw.Resume();
-    wxPrintf(_T("Finally resuming and sleeping 2 more seconds..."));
+    wxPrintf(wxT("Finally resuming and sleeping 2 more seconds..."));
     fflush(stdout);
     wxSleep(2);
-    wxPrintf(_T("\telapsed time: %ldms\n"), sw.Time());
+    wxPrintf(wxT("\telapsed time: %ldms\n"), sw.Time());
 
     wxStopWatch sw2;
-    wxPuts(_T("\nChecking for 'backwards clock' bug..."));
+    wxPuts(wxT("\nChecking for 'backwards clock' bug..."));
     for ( size_t n = 0; n < 70; n++ )
     {
         sw2.Start();
@@ -2931,7 +2931,7 @@ static void TestStopWatch()
         {
             if ( sw.Time() < 0 || sw2.Time() < 0 )
             {
-                wxPuts(_T("\ntime is negative - ERROR!"));
+                wxPuts(wxT("\ntime is negative - ERROR!"));
             }
         }
 
@@ -2939,7 +2939,7 @@ static void TestStopWatch()
         fflush(stdout);
     }
 
-    wxPuts(_T(", ok."));
+    wxPuts(wxT(", ok."));
 }
 
 #endif // TEST_TIMER
@@ -2958,8 +2958,8 @@ static void DumpVObject(size_t level, co
     wxVCardObject *vcObj = vcard.GetFirstProp(&cookie);
     while ( vcObj )
     {
-        wxPrintf(_T("%s%s"),
-               wxString(_T('\t'), level).c_str(),
+        wxPrintf(wxT("%s%s"),
+               wxString(wxT('\t'), level).c_str(),
                vcObj->GetName().c_str());
 
         wxString value;
@@ -2970,7 +2970,7 @@ static void DumpVObject(size_t level, co
                 {
                     wxString val;
                     vcObj->GetValue(&val);
-                    value << _T('"') << val << _T('"');
+                    value << wxT('"') << val << wxT('"');
                 }
                 break;
 
@@ -2978,7 +2978,7 @@ static void DumpVObject(size_t level, co
                 {
                     unsigned int i;
                     vcObj->GetValue(&i);
-                    value.Printf(_T("%u"), i);
+                    value.Printf(wxT("%u"), i);
                 }
                 break;
 
@@ -2986,7 +2986,7 @@ static void DumpVObject(size_t level, co
                 {
                     unsigned long l;
                     vcObj->GetValue(&l);
-                    value.Printf(_T("%lu"), l);
+                    value.Printf(wxT("%lu"), l);
                 }
                 break;
 
@@ -2994,15 +2994,15 @@ static void DumpVObject(size_t level, co
                 break;
 
             case wxVCardObject::Object:
-                value = _T("<node>");
+                value = wxT("<node>");
                 break;
 
             default:
-                value = _T("<unknown value type>");
+                value = wxT("<unknown value type>");
         }
 
         if ( !!value )
-            wxPrintf(_T(" = %s"), value.c_str());
+            wxPrintf(wxT(" = %s"), value.c_str());
         wxPutchar('\n');
 
         DumpVObject(level + 1, *vcObj);
@@ -3014,7 +3014,7 @@ static void DumpVObject(size_t level, co
 
 static void DumpVCardAddresses(const wxVCard& vcard)
 {
-    wxPuts(_T("\nShowing all addresses from vCard:\n"));
+    wxPuts(wxT("\nShowing all addresses from vCard:\n"));
 
     size_t nAdr = 0;
     void *cookie;
@@ -3025,30 +3025,30 @@ static void DumpVCardAddresses(const wxV
         int flags = addr->GetFlags();
         if ( flags & wxVCardAddress::Domestic )
         {
-            flagsStr << _T("domestic ");
+            flagsStr << wxT("domestic ");
         }
         if ( flags & wxVCardAddress::Intl )
         {
-            flagsStr << _T("international ");
+            flagsStr << wxT("international ");
         }
         if ( flags & wxVCardAddress::Postal )
         {
-            flagsStr << _T("postal ");
+            flagsStr << wxT("postal ");
         }
         if ( flags & wxVCardAddress::Parcel )
         {
-            flagsStr << _T("parcel ");
+            flagsStr << wxT("parcel ");
         }
         if ( flags & wxVCardAddress::Home )
         {
-            flagsStr << _T("home ");
+            flagsStr << wxT("home ");
         }
         if ( flags & wxVCardAddress::Work )
         {
-            flagsStr << _T("work ");
+            flagsStr << wxT("work ");
         }
 
-        wxPrintf(_T("Address %u:\n")
+        wxPrintf(wxT("Address %u:\n")
                "\tflags = %s\n"
                "\tvalue = %s;%s;%s;%s;%s;%s;%s\n",
                ++nAdr,
@@ -3069,7 +3069,7 @@ static void DumpVCardAddresses(const wxV
 
 static void DumpVCardPhoneNumbers(const wxVCard& vcard)
 {
-    wxPuts(_T("\nShowing all phone numbers from vCard:\n"));
+    wxPuts(wxT("\nShowing all phone numbers from vCard:\n"));
 
     size_t nPhone = 0;
     void *cookie;
@@ -3080,30 +3080,30 @@ static void DumpVCardPhoneNumbers(const 
         int flags = phone->GetFlags();
         if ( flags & wxVCardPhoneNumber::Voice )
         {
-            flagsStr << _T("voice ");
+            flagsStr << wxT("voice ");
         }
         if ( flags & wxVCardPhoneNumber::Fax )
         {
-            flagsStr << _T("fax ");
+            flagsStr << wxT("fax ");
         }
         if ( flags & wxVCardPhoneNumber::Cellular )
         {
-            flagsStr << _T("cellular ");
+            flagsStr << wxT("cellular ");
         }
         if ( flags & wxVCardPhoneNumber::Modem )
         {
-            flagsStr << _T("modem ");
+            flagsStr << wxT("modem ");
         }
         if ( flags & wxVCardPhoneNumber::Home )
         {
-            flagsStr << _T("home ");
+            flagsStr << wxT("home ");
         }
         if ( flags & wxVCardPhoneNumber::Work )
         {
-            flagsStr << _T("work ");
+            flagsStr << wxT("work ");
         }
 
-        wxPrintf(_T("Phone number %u:\n")
+        wxPrintf(wxT("Phone number %u:\n")
                "\tflags = %s\n"
                "\tvalue = %s\n",
                ++nPhone,
@@ -3118,12 +3118,12 @@ static void DumpVCardPhoneNumbers(const 
 
 static void TestVCardRead()
 {
-    wxPuts(_T("*** Testing wxVCard reading ***\n"));
+    wxPuts(wxT("*** Testing wxVCard reading ***\n"));
 
-    wxVCard vcard(_T("vcard.vcf"));
+    wxVCard vcard(wxT("vcard.vcf"));
     if ( !vcard.IsOk() )
     {
-        wxPuts(_T("ERROR: couldn't load vCard."));
+        wxPuts(wxT("ERROR: couldn't load vCard."));
     }
     else
     {
@@ -3137,25 +3137,25 @@ static void TestVCardRead()
         }
         else
         {
-            value = _T("<none>");
+            value = wxT("<none>");
         }
 
-        wxPrintf(_T("Full name retrieved directly: %s\n"), value.c_str());
+        wxPrintf(wxT("Full name retrieved directly: %s\n"), value.c_str());
 
 
         if ( !vcard.GetFullName(&value) )
         {
-            value = _T("<none>");
+            value = wxT("<none>");
         }
 
-        wxPrintf(_T("Full name from wxVCard API: %s\n"), value.c_str());
+        wxPrintf(wxT("Full name from wxVCard API: %s\n"), value.c_str());
 
         // now show how to deal with multiply occurring properties
         DumpVCardAddresses(vcard);
         DumpVCardPhoneNumbers(vcard);
 
         // and finally show all
-        wxPuts(_T("\nNow dumping the entire vCard:\n")
+        wxPuts(wxT("\nNow dumping the entire vCard:\n")
              "-----------------------------\n");
 
         DumpVObject(0, vcard);
@@ -3164,12 +3164,12 @@ static void TestVCardRead()
 
 static void TestVCardWrite()
 {
-    wxPuts(_T("*** Testing wxVCard writing ***\n"));
+    wxPuts(wxT("*** Testing wxVCard writing ***\n"));
 
     wxVCard vcard;
     if ( !vcard.IsOk() )
     {
-        wxPuts(_T("ERROR: couldn't create vCard."));
+        wxPuts(wxT("ERROR: couldn't create vCard."));
     }
     else
     {
@@ -3179,7 +3179,7 @@ static void TestVCardWrite()
         vcard.SetOrganization("wxWidgets", "R&D");
 
         // just dump the vCard back
-        wxPuts(_T("Entire vCard follows:\n"));
+        wxPuts(wxT("Entire vCard follows:\n"));
         wxPuts(vcard.Write());
     }
 }
@@ -3200,46 +3200,46 @@ static void TestVCardWrite()
 
 static const wxChar *volumeKinds[] =
 {
-    _T("floppy"),
-    _T("hard disk"),
-    _T("CD-ROM"),
-    _T("DVD-ROM"),
-    _T("network volume"),
-    _T("other volume"),
+    wxT("floppy"),
+    wxT("hard disk"),
+    wxT("CD-ROM"),
+    wxT("DVD-ROM"),
+    wxT("network volume"),
+    wxT("other volume"),
 };
 
 static void TestFSVolume()
 {
-    wxPuts(_T("*** Testing wxFSVolume class ***"));
+    wxPuts(wxT("*** Testing wxFSVolume class ***"));
 
     wxArrayString volumes = wxFSVolume::GetVolumes();
     size_t count = volumes.GetCount();
 
     if ( !count )
     {
-        wxPuts(_T("ERROR: no mounted volumes?"));
+        wxPuts(wxT("ERROR: no mounted volumes?"));
         return;
     }
 
-    wxPrintf(_T("%u mounted volumes found:\n"), count);
+    wxPrintf(wxT("%u mounted volumes found:\n"), count);
 
     for ( size_t n = 0; n < count; n++ )
     {
         wxFSVolume vol(volumes[n]);
         if ( !vol.IsOk() )
         {
-            wxPuts(_T("ERROR: couldn't create volume"));
+            wxPuts(wxT("ERROR: couldn't create volume"));
             continue;
         }
 
-        wxPrintf(_T("%u: %s (%s), %s, %s, %s\n"),
+        wxPrintf(wxT("%u: %s (%s), %s, %s, %s\n"),
                  n + 1,
                  vol.GetDisplayName().c_str(),
                  vol.GetName().c_str(),
                  volumeKinds[vol.GetKind()],
-                 vol.IsWritable() ? _T("rw") : _T("ro"),
-                 vol.GetFlags() & wxFS_VOL_REMOVABLE ? _T("removable")
-                                                     : _T("fixed"));
+                 vol.IsWritable() ? wxT("rw") : wxT("ro"),
+                 vol.GetFlags() & wxFS_VOL_REMOVABLE ? wxT("removable")
+                                                     : wxT("fixed"));
     }
 }
 
@@ -3293,14 +3293,14 @@ static const struct Utf8Data
     wxFontEncoding encoding;
 } utf8data[] =
 {
-    { utf8Invalid, WXSIZEOF(utf8Invalid), _T("iso8859-1"), wxFONTENCODING_ISO8859_1 },
-    { utf8koi8r, WXSIZEOF(utf8koi8r), _T("koi8-r"), wxFONTENCODING_KOI8 },
-    { utf8iso8859_1, WXSIZEOF(utf8iso8859_1), _T("iso8859-1"), wxFONTENCODING_ISO8859_1 },
+    { utf8Invalid, WXSIZEOF(utf8Invalid), wxT("iso8859-1"), wxFONTENCODING_ISO8859_1 },
+    { utf8koi8r, WXSIZEOF(utf8koi8r), wxT("koi8-r"), wxFONTENCODING_KOI8 },
+    { utf8iso8859_1, WXSIZEOF(utf8iso8859_1), wxT("iso8859-1"), wxFONTENCODING_ISO8859_1 },
 };
 
 static void TestUtf8()
 {
-    wxPuts(_T("*** Testing UTF8 support ***\n"));
+    wxPuts(wxT("*** Testing UTF8 support ***\n"));
 
     char buf[1024];
     wchar_t wbuf[1024];
@@ -3311,25 +3311,25 @@ static void TestUtf8()
         if ( wxConvUTF8.MB2WC(wbuf, (const char *)u8d.text,
                               WXSIZEOF(wbuf)) == (size_t)-1 )
         {
-            wxPuts(_T("ERROR: UTF-8 decoding failed."));
+            wxPuts(wxT("ERROR: UTF-8 decoding failed."));
         }
         else
         {
             wxCSConv conv(u8d.charset);
             if ( conv.WC2MB(buf, wbuf, WXSIZEOF(buf)) == (size_t)-1 )
             {
-                wxPrintf(_T("ERROR: conversion to %s failed.\n"), u8d.charset);
+                wxPrintf(wxT("ERROR: conversion to %s failed.\n"), u8d.charset);
             }
             else
             {
-                wxPrintf(_T("String in %s: %s\n"), u8d.charset, buf);
+                wxPrintf(wxT("String in %s: %s\n"), u8d.charset, buf);
             }
         }
 
         wxString s(wxConvUTF8.cMB2WC((const char *)u8d.text));
         if ( s.empty() )
-            s = _T("<< conversion failed >>");
-        wxPrintf(_T("String in current cset: %s\n"), s.c_str());
+            s = wxT("<< conversion failed >>");
+        wxPrintf(wxT("String in current cset: %s\n"), s.c_str());
 
     }
 
@@ -3338,7 +3338,7 @@ static void TestUtf8()
 
 static void TestEncodingConverter()
 {
-    wxPuts(_T("*** Testing wxEncodingConverter ***\n"));
+    wxPuts(wxT("*** Testing wxEncodingConverter ***\n"));
 
     // using wxEncodingConverter should give the same result as above
     char buf[1024];
@@ -3346,14 +3346,14 @@ static void TestEncodingConverter()
     if ( wxConvUTF8.MB2WC(wbuf, (const char *)utf8koi8r,
                           WXSIZEOF(utf8koi8r)) == (size_t)-1 )
     {
-        wxPuts(_T("ERROR: UTF-8 decoding failed."));
+        wxPuts(wxT("ERROR: UTF-8 decoding failed."));
     }
     else
     {
         wxEncodingConverter ec;
         ec.Init(wxFONTENCODING_UNICODE, wxFONTENCODING_KOI8);
         ec.Convert(wbuf, buf);
-        wxPrintf(_T("The same KOI8-R string using wxEC: %s\n"), buf);
+        wxPrintf(wxT("The same KOI8-R string using wxEC: %s\n"), buf);
     }
 
     wxPuts(wxEmptyString);
@@ -3371,48 +3371,48 @@ static void TestEncodingConverter()
 #include "wx/fs_zip.h"
 #include "wx/zipstrm.h"
 
-static const wxChar *TESTFILE_ZIP = _T("testdata.zip");
+static const wxChar *TESTFILE_ZIP = wxT("testdata.zip");
 
 static void TestZipStreamRead()
 {
-    wxPuts(_T("*** Testing ZIP reading ***\n"));
+    wxPuts(wxT("*** Testing ZIP reading ***\n"));
 
-    static const wxString filename = _T("foo");
+    static const wxString filename = wxT("foo");
     wxZipInputStream istr(TESTFILE_ZIP, filename);
-    wxPrintf(_T("Archive size: %u\n"), istr.GetSize());
+    wxPrintf(wxT("Archive size: %u\n"), istr.GetSize());
 
-    wxPrintf(_T("Dumping the file '%s':\n"), filename.c_str());
+    wxPrintf(wxT("Dumping the file '%s':\n"), filename.c_str());
     while ( !istr.Eof() )
     {
         wxPutchar(istr.GetC());
         fflush(stdout);
     }
 
-    wxPuts(_T("\n----- done ------"));
+    wxPuts(wxT("\n----- done ------"));
 }
 
 static void DumpZipDirectory(wxFileSystem& fs,
                              const wxString& dir,
                              const wxString& indent)
 {
-    wxString prefix = wxString::Format(_T("%s#zip:%s"),
+    wxString prefix = wxString::Format(wxT("%s#zip:%s"),
                                          TESTFILE_ZIP, dir.c_str());
-    wxString wildcard = prefix + _T("/*");
+    wxString wildcard = prefix + wxT("/*");
 
     wxString dirname = fs.FindFirst(wildcard, wxDIR);
     while ( !dirname.empty() )
     {
-        if ( !dirname.StartsWith(prefix + _T('/'), &dirname) )
+        if ( !dirname.StartsWith(prefix + wxT('/'), &dirname) )
         {
-            wxPrintf(_T("ERROR: unexpected wxFileSystem::FindNext result\n"));
+            wxPrintf(wxT("ERROR: unexpected wxFileSystem::FindNext result\n"));
 
             break;
         }
 
-        wxPrintf(_T("%s%s\n"), indent.c_str(), dirname.c_str());
+        wxPrintf(wxT("%s%s\n"), indent.c_str(), dirname.c_str());
 
         DumpZipDirectory(fs, dirname,
-                         indent + wxString(_T(' '), 4));
+                         indent + wxString(wxT(' '), 4));
 
         dirname = fs.FindNext();
     }
@@ -3422,12 +3422,12 @@ static void DumpZipDirectory(wxFileSyste
     {
         if ( !filename.StartsWith(prefix, &filename) )
         {
-            wxPrintf(_T("ERROR: unexpected wxFileSystem::FindNext result\n"));
+            wxPrintf(wxT("ERROR: unexpected wxFileSystem::FindNext result\n"));
 
             break;
         }
 
-        wxPrintf(_T("%s%s\n"), indent.c_str(), filename.c_str());
+        wxPrintf(wxT("%s%s\n"), indent.c_str(), filename.c_str());
 
         filename = fs.FindNext();
     }
@@ -3435,13 +3435,13 @@ static void DumpZipDirectory(wxFileSyste
 
 static void TestZipFileSystem()
 {
-    wxPuts(_T("*** Testing ZIP file system ***\n"));
+    wxPuts(wxT("*** Testing ZIP file system ***\n"));
 
     wxFileSystem::AddHandler(new wxZipFSHandler);
     wxFileSystem fs;
-    wxPrintf(_T("Dumping all files in the archive %s:\n"), TESTFILE_ZIP);
+    wxPrintf(wxT("Dumping all files in the archive %s:\n"), TESTFILE_ZIP);
 
-    DumpZipDirectory(fs, _T(""), wxString(_T(' '), 4));
+    DumpZipDirectory(fs, wxT(""), wxString(wxT(' '), 4));
 }
 
 #endif // TEST_ZIP
@@ -3461,17 +3461,17 @@ static void TestZipFileSystem()
 
 static void TestTimeStatic()
 {
-    wxPuts(_T("\n*** wxDateTime static methods test ***"));
+    wxPuts(wxT("\n*** wxDateTime static methods test ***"));
 
     // some info about the current date
     int year = wxDateTime::GetCurrentYear();
-    wxPrintf(_T("Current year %d is %sa leap one and has %d days.\n"),
+    wxPrintf(wxT("Current year %d is %sa leap one and has %d days.\n"),
            year,
            wxDateTime::IsLeapYear(year) ? "" : "not ",
            wxDateTime::GetNumberOfDays(year));
 
     wxDateTime::Month month = wxDateTime::GetCurrentMonth();
-    wxPrintf(_T("Current month is '%s' ('%s') and it has %d days\n"),
+    wxPrintf(wxT("Current month is '%s' ('%s') and it has %d days\n"),
            wxDateTime::GetMonthName(month, wxDateTime::Name_Abbr).c_str(),
            wxDateTime::GetMonthName(month).c_str(),
            wxDateTime::GetNumberOfDays(month));
@@ -3480,23 +3480,23 @@ static void TestTimeStatic()
 // test time zones stuff
 static void TestTimeZones()
 {
-    wxPuts(_T("\n*** wxDateTime timezone test ***"));
+    wxPuts(wxT("\n*** wxDateTime timezone test ***"));
 
     wxDateTime now = wxDateTime::Now();
 
-    wxPrintf(_T("Current GMT time:\t%s\n"), now.Format(_T("%c"), wxDateTime::GMT0).c_str());
-    wxPrintf(_T("Unix epoch (GMT):\t%s\n"), wxDateTime((time_t)0).Format(_T("%c"), wxDateTime::GMT0).c_str());
-    wxPrintf(_T("Unix epoch (EST):\t%s\n"), wxDateTime((time_t)0).Format(_T("%c"), wxDateTime::EST).c_str());
-    wxPrintf(_T("Current time in Paris:\t%s\n"), now.Format(_T("%c"), wxDateTime::CET).c_str());
-    wxPrintf(_T("               Moscow:\t%s\n"), now.Format(_T("%c"), wxDateTime::MSK).c_str());
-    wxPrintf(_T("             New York:\t%s\n"), now.Format(_T("%c"), wxDateTime::EST).c_str());
+    wxPrintf(wxT("Current GMT time:\t%s\n"), now.Format(wxT("%c"), wxDateTime::GMT0).c_str());
+    wxPrintf(wxT("Unix epoch (GMT):\t%s\n"), wxDateTime((time_t)0).Format(wxT("%c"), wxDateTime::GMT0).c_str());
+    wxPrintf(wxT("Unix epoch (EST):\t%s\n"), wxDateTime((time_t)0).Format(wxT("%c"), wxDateTime::EST).c_str());
+    wxPrintf(wxT("Current time in Paris:\t%s\n"), now.Format(wxT("%c"), wxDateTime::CET).c_str());
+    wxPrintf(wxT("               Moscow:\t%s\n"), now.Format(wxT("%c"), wxDateTime::MSK).c_str());
+    wxPrintf(wxT("             New York:\t%s\n"), now.Format(wxT("%c"), wxDateTime::EST).c_str());
 
-    wxPrintf(_T("%s\n"), wxDateTime::Now().Format(_T("Our timezone is %Z")).c_str());
+    wxPrintf(wxT("%s\n"), wxDateTime::Now().Format(wxT("Our timezone is %Z")).c_str());
 
     wxDateTime::Tm tm = now.GetTm();
     if ( wxDateTime(tm) != now )
     {
-        wxPrintf(_T("ERROR: got %s instead of %s\n"),
+        wxPrintf(wxT("ERROR: got %s instead of %s\n"),
                  wxDateTime(tm).Format().c_str(), now.Format().c_str());
     }
 }
@@ -3504,33 +3504,33 @@ static void TestTimeZones()
 // test some minimal support for the dates outside the standard range
 static void TestTimeRange()
 {
-    wxPuts(_T("\n*** wxDateTime out-of-standard-range dates test ***"));
+    wxPuts(wxT("\n*** wxDateTime out-of-standard-range dates test ***"));
 
-    static const wxChar *fmt = _T("%d-%b-%Y %H:%M:%S");
+    static const wxChar *fmt = wxT("%d-%b-%Y %H:%M:%S");
 
-    wxPrintf(_T("Unix epoch:\t%s\n"),
+    wxPrintf(wxT("Unix epoch:\t%s\n"),
              wxDateTime(2440587.5).Format(fmt).c_str());
-    wxPrintf(_T("Feb 29, 0: \t%s\n"),
+    wxPrintf(wxT("Feb 29, 0: \t%s\n"),
              wxDateTime(29, wxDateTime::Feb, 0).Format(fmt).c_str());
-    wxPrintf(_T("JDN 0:     \t%s\n"),
+    wxPrintf(wxT("JDN 0:     \t%s\n"),
              wxDateTime(0.0).Format(fmt).c_str());
-    wxPrintf(_T("Jan 1, 1AD:\t%s\n"),
+    wxPrintf(wxT("Jan 1, 1AD:\t%s\n"),
              wxDateTime(1, wxDateTime::Jan, 1).Format(fmt).c_str());
-    wxPrintf(_T("May 29, 2099:\t%s\n"),
+    wxPrintf(wxT("May 29, 2099:\t%s\n"),
              wxDateTime(29, wxDateTime::May, 2099).Format(fmt).c_str());
 }
 
 // test DST calculations
 static void TestTimeDST()
 {
-    wxPuts(_T("\n*** wxDateTime DST test ***"));
+    wxPuts(wxT("\n*** wxDateTime DST test ***"));
 
-    wxPrintf(_T("DST is%s in effect now.\n\n"),
-             wxDateTime::Now().IsDST() ? wxEmptyString : _T(" not"));
+    wxPrintf(wxT("DST is%s in effect now.\n\n"),
+             wxDateTime::Now().IsDST() ? wxEmptyString : wxT(" not"));
 
     for ( int year = 1990; year < 2005; year++ )
     {
-        wxPrintf(_T("DST period in Europe for year %d: from %s to %s\n"),
+        wxPrintf(wxT("DST period in Europe for year %d: from %s to %s\n"),
                  year,
                  wxDateTime::GetBeginDST(year, wxDateTime::Country_EEC).Format().c_str(),
                  wxDateTime::GetEndDST(year, wxDateTime::Country_EEC).Format().c_str());
@@ -3543,13 +3543,13 @@ static void TestTimeDST()
 
 static void TestDateTimeInteractive()
 {
-    wxPuts(_T("\n*** interactive wxDateTime tests ***"));
+    wxPuts(wxT("\n*** interactive wxDateTime tests ***"));
 
     wxChar buf[128];
 
     for ( ;; )
     {
-        wxPrintf(_T("Enter a date: "));
+        wxPrintf(wxT("Enter a date: "));
         if ( !wxFgets(buf, WXSIZEOF(buf), stdin) )
             break;
 
@@ -3560,24 +3560,24 @@ static void TestDateTimeInteractive()
         const wxChar *p = dt.ParseDate(buf);
         if ( !p )
         {
-            wxPrintf(_T("ERROR: failed to parse the date '%s'.\n"), buf);
+            wxPrintf(wxT("ERROR: failed to parse the date '%s'.\n"), buf);
 
             continue;
         }
         else if ( *p )
         {
-            wxPrintf(_T("WARNING: parsed only first %u characters.\n"), p - buf);
+            wxPrintf(wxT("WARNING: parsed only first %u characters.\n"), p - buf);
         }
 
-        wxPrintf(_T("%s: day %u, week of month %u/%u, week of year %u\n"),
-                 dt.Format(_T("%b %d, %Y")).c_str(),
+        wxPrintf(wxT("%s: day %u, week of month %u/%u, week of year %u\n"),
+                 dt.Format(wxT("%b %d, %Y")).c_str(),
                  dt.GetDayOfYear(),
                  dt.GetWeekOfMonth(wxDateTime::Monday_First),
                  dt.GetWeekOfMonth(wxDateTime::Sunday_First),
                  dt.GetWeekOfYear(wxDateTime::Monday_First));
     }
 
-    wxPuts(_T("\n*** done ***"));
+    wxPuts(wxT("\n*** done ***"));
 }
 
 #endif // TEST_INTERACTIVE
@@ -3586,39 +3586,39 @@ static void TestDateTimeInteractive()
 
 static void TestTimeMS()
 {
-    wxPuts(_T("*** testing millisecond-resolution support in wxDateTime ***"));
+    wxPuts(wxT("*** testing millisecond-resolution support in wxDateTime ***"));
 
     wxDateTime dt1 = wxDateTime::Now(),
                dt2 = wxDateTime::UNow();
 
-    wxPrintf(_T("Now = %s\n"), dt1.Format(_T("%H:%M:%S:%l")).c_str());
-    wxPrintf(_T("UNow = %s\n"), dt2.Format(_T("%H:%M:%S:%l")).c_str());
-    wxPrintf(_T("Dummy loop: "));
+    wxPrintf(wxT("Now = %s\n"), dt1.Format(wxT("%H:%M:%S:%l")).c_str());
+    wxPrintf(wxT("UNow = %s\n"), dt2.Format(wxT("%H:%M:%S:%l")).c_str());
+    wxPrintf(wxT("Dummy loop: "));
     for ( int i = 0; i < 6000; i++ )
     {
         //for ( int j = 0; j < 10; j++ )
         {
             wxString s;
-            s.Printf(_T("%g"), sqrt((float)i));
+            s.Printf(wxT("%g"), sqrt((float)i));
         }
 
         if ( !(i % 100) )
             wxPutchar('.');
     }
-    wxPuts(_T(", done"));
+    wxPuts(wxT(", done"));
 
     dt1 = dt2;
     dt2 = wxDateTime::UNow();
-    wxPrintf(_T("UNow = %s\n"), dt2.Format(_T("%H:%M:%S:%l")).c_str());
+    wxPrintf(wxT("UNow = %s\n"), dt2.Format(wxT("%H:%M:%S:%l")).c_str());
 
-    wxPrintf(_T("Loop executed in %s ms\n"), (dt2 - dt1).Format(_T("%l")).c_str());
+    wxPrintf(wxT("Loop executed in %s ms\n"), (dt2 - dt1).Format(wxT("%l")).c_str());
 
-    wxPuts(_T("\n*** done ***"));
+    wxPuts(wxT("\n*** done ***"));
 }
 
 static void TestTimeHolidays()
 {
-    wxPuts(_T("\n*** testing wxDateTimeHolidayAuthority ***\n"));
+    wxPuts(wxT("\n*** testing wxDateTimeHolidayAuthority ***\n"));
 
     wxDateTime::Tm tm = wxDateTime(29, wxDateTime::May, 2000).GetTm();
     wxDateTime dtStart(1, tm.mon, tm.year),
@@ -3627,15 +3627,15 @@ static void TestTimeHolidays()
     wxDateTimeArray hol;
     wxDateTimeHolidayAuthority::GetHolidaysInRange(dtStart, dtEnd, hol);
 
-    const wxChar *format = _T("%d-%b-%Y (%a)");
+    const wxChar *format = wxT("%d-%b-%Y (%a)");
 
-    wxPrintf(_T("All holidays between %s and %s:\n"),
+    wxPrintf(wxT("All holidays between %s and %s:\n"),
            dtStart.Format(format).c_str(), dtEnd.Format(format).c_str());
 
     size_t count = hol.GetCount();
     for ( size_t n = 0; n < count; n++ )
     {
-        wxPrintf(_T("\t%s\n"), hol[n].Format(format).c_str());
+        wxPrintf(wxT("\t%s\n"), hol[n].Format(format).c_str());
     }
 
     wxPuts(wxEmptyString);
@@ -3643,13 +3643,13 @@ static void TestTimeHolidays()
 
 static void TestTimeZoneBug()
 {
-    wxPuts(_T("\n*** testing for DST/timezone bug ***\n"));
+    wxPuts(wxT("\n*** testing for DST/timezone bug ***\n"));
 
     wxDateTime date = wxDateTime(1, wxDateTime::Mar, 2000);
     for ( int i = 0; i < 31; i++ )
     {
-        wxPrintf(_T("Date %s: week day %s.\n"),
-               date.Format(_T("%d-%m-%Y")).c_str(),
+        wxPrintf(wxT("Date %s: week day %s.\n"),
+               date.Format(wxT("%d-%m-%Y")).c_str(),
                date.GetWeekDayName(date.GetWeekDay()).c_str());
 
         date += wxDateSpan::Day();
@@ -3660,24 +3660,24 @@ static void TestTimeZoneBug()
 
 static void TestTimeSpanFormat()
 {
-    wxPuts(_T("\n*** wxTimeSpan tests ***"));
+    wxPuts(wxT("\n*** wxTimeSpan tests ***"));
 
     static const wxChar *formats[] =
     {
-        _T("(default) %H:%M:%S"),
-        _T("%E weeks and %D days"),
-        _T("%l milliseconds"),
-        _T("(with ms) %H:%M:%S:%l"),
-        _T("100%% of minutes is %M"),       // test "%%"
-        _T("%D days and %H hours"),
-        _T("or also %S seconds"),
+        wxT("(default) %H:%M:%S"),
+        wxT("%E weeks and %D days"),
+        wxT("%l milliseconds"),
+        wxT("(with ms) %H:%M:%S:%l"),
+        wxT("100%% of minutes is %M"),       // test "%%"
+        wxT("%D days and %H hours"),
+        wxT("or also %S seconds"),
     };
 
     wxTimeSpan ts1(1, 2, 3, 4),
                 ts2(111, 222, 333);
     for ( size_t n = 0; n < WXSIZEOF(formats); n++ )
     {
-        wxPrintf(_T("ts1 = %s\tts2 = %s\n"),
+        wxPrintf(wxT("ts1 = %s\tts2 = %s\n"),
                ts1.Format(formats[n]).c_str(),
                ts2.Format(formats[n]).c_str());
     }
@@ -3700,13 +3700,13 @@ static void TestTimeSpanFormat()
 
 static void TestTextInputStream()
 {
-    wxPuts(_T("\n*** wxTextInputStream test ***"));
+    wxPuts(wxT("\n*** wxTextInputStream test ***"));
 
-    wxString filename = _T("testdata.fc");
+    wxString filename = wxT("testdata.fc");
     wxFileInputStream fsIn(filename);
     if ( !fsIn.Ok() )
     {
-        wxPuts(_T("ERROR: couldn't open file."));
+        wxPuts(wxT("ERROR: couldn't open file."));
     }
     else
     {
@@ -3722,7 +3722,7 @@ static void TestTextInputStream()
             if ( fsIn.Eof() && s.empty() )
                 break;
 
-            wxPrintf(_T("Line %d: %s\n"), line++, s.c_str());
+            wxPrintf(wxT("Line %d: %s\n"), line++, s.c_str());
         }
     }
 }
@@ -3823,7 +3823,7 @@ wxThread::ExitCode MyDetachedThread::Ent
 
 void MyDetachedThread::OnExit()
 {
-    wxLogTrace(_T("thread"), _T("Thread %ld is in OnExit"), GetId());
+    wxLogTrace(wxT("thread"), wxT("Thread %ld is in OnExit"), GetId());
 
     wxCriticalSectionLocker lock(gs_critsect);
     if ( !--gs_counter && !m_cancelled )
@@ -3832,7 +3832,7 @@ void MyDetachedThread::OnExit()
 
 static void TestDetachedThreads()
 {
-    wxPuts(_T("\n*** Testing detached threads ***"));
+    wxPuts(wxT("\n*** Testing detached threads ***"));
 
     static const size_t nThreads = 3;
     MyDetachedThread *threads[nThreads];
@@ -3858,19 +3858,19 @@ static void TestDetachedThreads()
 
 static void TestJoinableThreads()
 {
-    wxPuts(_T("\n*** Testing a joinable thread (a loooong calculation...) ***"));
+    wxPuts(wxT("\n*** Testing a joinable thread (a loooong calculation...) ***"));
 
     // calc 10! in the background
     MyJoinableThread thread(10);
     thread.Run();
 
-    wxPrintf(_T("\nThread terminated with exit code %lu.\n"),
+    wxPrintf(wxT("\nThread terminated with exit code %lu.\n"),
              (unsigned long)thread.Wait());
 }
 
 static void TestThreadSuspend()
 {
-    wxPuts(_T("\n*** Testing thread suspend/resume functions ***"));
+    wxPuts(wxT("\n*** Testing thread suspend/resume functions ***"));
 
     MyDetachedThread *thread = new MyDetachedThread(15, 'X');
 
@@ -3888,18 +3888,18 @@ static void TestThreadSuspend()
     {
         thread->Pause();
 
-        wxPuts(_T("\nThread suspended"));
+        wxPuts(wxT("\nThread suspended"));
         if ( n > 0 )
         {
             // don't sleep but resume immediately the first time
             wxThread::Sleep(300);
         }
-        wxPuts(_T("Going to resume the thread"));
+        wxPuts(wxT("Going to resume the thread"));
 
         thread->Resume();
     }
 
-    wxPuts(_T("Waiting until it terminates now"));
+    wxPuts(wxT("Waiting until it terminates now"));
 
     // wait until the thread terminates
     gs_cond.Wait();
@@ -3914,13 +3914,13 @@ static void TestThreadDelete()
     // running when we delete it - deleting a detached thread which already
     // terminated will lead to a crash!
 
-    wxPuts(_T("\n*** Testing thread delete function ***"));
+    wxPuts(wxT("\n*** Testing thread delete function ***"));
 
     MyDetachedThread *thread0 = new MyDetachedThread(30, 'W');
 
     thread0->Delete();
 
-    wxPuts(_T("\nDeleted a thread which didn't start to run yet."));
+    wxPuts(wxT("\nDeleted a thread which didn't start to run yet."));
 
     MyDetachedThread *thread1 = new MyDetachedThread(30, 'Y');
 
@@ -3930,7 +3930,7 @@ static void TestThreadDelete()
 
     thread1->Delete();
 
-    wxPuts(_T("\nDeleted a running thread."));
+    wxPuts(wxT("\nDeleted a running thread."));
 
     MyDetachedThread *thread2 = new MyDetachedThread(30, 'Z');
 
@@ -3942,14 +3942,14 @@ static void TestThreadDelete()
 
     thread2->Delete();
 
-    wxPuts(_T("\nDeleted a sleeping thread."));
+    wxPuts(wxT("\nDeleted a sleeping thread."));
 
     MyJoinableThread thread3(20);
     thread3.Run();
 
     thread3.Delete();
 
-    wxPuts(_T("\nDeleted a joinable thread."));
+    wxPuts(wxT("\nDeleted a joinable thread."));
 
     MyJoinableThread thread4(2);
     thread4.Run();
@@ -3958,7 +3958,7 @@ static void TestThreadDelete()
 
     thread4.Delete();
 
-    wxPuts(_T("\nDeleted a joinable thread which already terminated."));
+    wxPuts(wxT("\nDeleted a joinable thread which already terminated."));
 
     wxPuts(wxEmptyString);
 }
@@ -3976,19 +3976,19 @@ public:
 
     virtual ExitCode Entry()
     {
-        wxPrintf(_T("Thread %lu has started running.\n"), GetId());
+        wxPrintf(wxT("Thread %lu has started running.\n"), GetId());
         fflush(stdout);
 
         gs_cond.Post();
 
-        wxPrintf(_T("Thread %lu starts to wait...\n"), GetId());
+        wxPrintf(wxT("Thread %lu starts to wait...\n"), GetId());
         fflush(stdout);
 
         m_mutex->Lock();
         m_condition->Wait();
         m_mutex->Unlock();
 
-        wxPrintf(_T("Thread %lu finished to wait, exiting.\n"), GetId());
+        wxPrintf(wxT("Thread %lu finished to wait, exiting.\n"), GetId());
         fflush(stdout);
 
         return 0;
@@ -4006,7 +4006,7 @@ static void TestThreadConditions()
 
     // otherwise its difficult to understand which log messages pertain to
     // which condition
-    //wxLogTrace(_T("thread"), _T("Local condition var is %08x, gs_cond = %08x"),
+    //wxLogTrace(wxT("thread"), wxT("Local condition var is %08x, gs_cond = %08x"),
     //           condition.GetId(), gs_cond.GetId());
 
     // create and launch threads
@@ -4024,7 +4024,7 @@ static void TestThreadConditions()
     }
 
     // wait until all threads run
-    wxPuts(_T("Main thread is waiting for the other threads to start"));
+    wxPuts(wxT("Main thread is waiting for the other threads to start"));
     fflush(stdout);
 
     size_t nRunning = 0;
@@ -4034,18 +4034,18 @@ static void TestThreadConditions()
 
         nRunning++;
 
-        wxPrintf(_T("Main thread: %u already running\n"), nRunning);
+        wxPrintf(wxT("Main thread: %u already running\n"), nRunning);
         fflush(stdout);
     }
 
-    wxPuts(_T("Main thread: all threads started up."));
+    wxPuts(wxT("Main thread: all threads started up."));
     fflush(stdout);
 
     wxThread::Sleep(500);
 
 #if 1
     // now wake one of them up
-    wxPrintf(_T("Main thread: about to signal the condition.\n"));
+    wxPrintf(wxT("Main thread: about to signal the condition.\n"));
     fflush(stdout);
     condition.Signal();
 #endif
@@ -4053,7 +4053,7 @@ static void TestThreadConditions()
     wxThread::Sleep(200);
 
     // wake all the (remaining) threads up, so that they can exit
-    wxPrintf(_T("Main thread: about to broadcast the condition.\n"));
+    wxPrintf(wxT("Main thread: about to broadcast the condition.\n"));
     fflush(stdout);
     condition.Broadcast();
 
@@ -4083,15 +4083,15 @@ private:
 
 static void TestThreadExec()
 {
-    wxPuts(_T("*** Testing wxExecute interaction with threads ***\n"));
+    wxPuts(wxT("*** Testing wxExecute interaction with threads ***\n"));
 
-    MyExecThread thread(_T("true"));
+    MyExecThread thread(wxT("true"));
     thread.Run();
 
-    wxPrintf(_T("Main program exit code: %ld.\n"),
-             wxExecute(_T("false"), wxEXEC_SYNC));
+    wxPrintf(wxT("Main program exit code: %ld.\n"),
+             wxExecute(wxT("false"), wxEXEC_SYNC));
 
-    wxPrintf(_T("Thread exit code: %ld.\n"), (long)thread.Wait());
+    wxPrintf(wxT("Thread exit code: %ld.\n"), (long)thread.Wait());
 }
 
 // semaphore tests
@@ -4110,17 +4110,17 @@ public:
 
     virtual ExitCode Entry()
     {
-        wxPrintf(_T("%s: Thread #%d (%ld) starting to wait for semaphore...\n"),
+        wxPrintf(wxT("%s: Thread #%d (%ld) starting to wait for semaphore...\n"),
                  wxDateTime::Now().FormatTime().c_str(), m_i, (long)GetId());
 
         m_sem->Wait();
 
-        wxPrintf(_T("%s: Thread #%d (%ld) acquired the semaphore.\n"),
+        wxPrintf(wxT("%s: Thread #%d (%ld) acquired the semaphore.\n"),
                  wxDateTime::Now().FormatTime().c_str(), m_i, (long)GetId());
 
         Sleep(1000);
 
-        wxPrintf(_T("%s: Thread #%d (%ld) releasing the semaphore.\n"),
+        wxPrintf(wxT("%s: Thread #%d (%ld) releasing the semaphore.\n"),
                  wxDateTime::Now().FormatTime().c_str(), m_i, (long)GetId());
 
         m_sem->Post();
@@ -4137,7 +4137,7 @@ WX_DEFINE_ARRAY_PTR(wxThread *, ArrayThr
 
 static void TestSemaphore()
 {
-    wxPuts(_T("*** Testing wxSemaphore class. ***"));
+    wxPuts(wxT("*** Testing wxSemaphore class. ***"));
 
     static const int SEM_LIMIT = 3;
 
@@ -4199,22 +4199,22 @@ int main(int argc, char **argv)
 
 #ifdef TEST_SNGLINST
     wxSingleInstanceChecker checker;
-    if ( checker.Create(_T(".wxconsole.lock")) )
+    if ( checker.Create(wxT(".wxconsole.lock")) )
     {
         if ( checker.IsAnotherRunning() )
         {
-            wxPrintf(_T("Another instance of the program is running, exiting.\n"));
+            wxPrintf(wxT("Another instance of the program is running, exiting.\n"));
 
             return 1;
         }
 
         // wait some time to give time to launch another instance
-        wxPrintf(_T("Press \"Enter\" to continue..."));
+        wxPrintf(wxT("Press \"Enter\" to continue..."));
         wxFgetc(stdin);
     }
     else // failed to create
     {
-        wxPrintf(_T("Failed to init wxSingleInstanceChecker.\n"));
+        wxPrintf(wxT("Failed to init wxSingleInstanceChecker.\n"));
     }
 #endif // TEST_SNGLINST
 
@@ -4224,19 +4224,19 @@ int main(int argc, char **argv)
 #if wxUSE_CMDLINE_PARSER
     static const wxCmdLineEntryDesc cmdLineDesc[] =
     {
-        { wxCMD_LINE_SWITCH, _T("h"), _T("help"), _T("show this help message"),
+        { wxCMD_LINE_SWITCH, wxT("h"), wxT("help"), wxT("show this help message"),
             wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
-        { wxCMD_LINE_SWITCH, _T("v"), _T("verbose"), _T("be verbose") },
-        { wxCMD_LINE_SWITCH, _T("q"), _T("quiet"),   _T("be quiet") },
+        { wxCMD_LINE_SWITCH, wxT("v"), wxT("verbose"), wxT("be verbose") },
+        { wxCMD_LINE_SWITCH, wxT("q"), wxT("quiet"),   wxT("be quiet") },
 
-        { wxCMD_LINE_OPTION, _T("o"), _T("output"),  _T("output file") },
-        { wxCMD_LINE_OPTION, _T("i"), _T("input"),   _T("input dir") },
-        { wxCMD_LINE_OPTION, _T("s"), _T("size"),    _T("output block size"),
+        { wxCMD_LINE_OPTION, wxT("o"), wxT("output"),  wxT("output file") },
+        { wxCMD_LINE_OPTION, wxT("i"), wxT("input"),   wxT("input dir") },
+        { wxCMD_LINE_OPTION, wxT("s"), wxT("size"),    wxT("output block size"),
             wxCMD_LINE_VAL_NUMBER },
-        { wxCMD_LINE_OPTION, _T("d"), _T("date"),    _T("output file date"),
+        { wxCMD_LINE_OPTION, wxT("d"), wxT("date"),    wxT("output file date"),
             wxCMD_LINE_VAL_DATE },
 
-        { wxCMD_LINE_PARAM,  NULL, NULL, _T("input file"),
+        { wxCMD_LINE_PARAM,  NULL, NULL, wxT("input file"),
             wxCMD_LINE_VAL_STRING, wxCMD_LINE_PARAM_MULTIPLE },
 
         { wxCMD_LINE_NONE }
@@ -4244,14 +4244,14 @@ int main(int argc, char **argv)
 
     wxCmdLineParser parser(cmdLineDesc, argc, wxArgv);
 
-    parser.AddOption(_T("project_name"), _T(""), _T("full path to project file"),
+    parser.AddOption(wxT("project_name"), wxT(""), wxT("full path to project file"),
                      wxCMD_LINE_VAL_STRING,
                      wxCMD_LINE_OPTION_MANDATORY | wxCMD_LINE_NEEDS_SEPARATOR);
 
     switch ( parser.Parse() )
     {
         case -1:
-            wxLogMessage(_T("Help was given, terminating."));
+            wxLogMessage(wxT("Help was given, terminating."));
             break;
 
         case 0:
@@ -4259,7 +4259,7 @@ int main(int argc, char **argv)
             break;
 
         default:
-            wxLogMessage(_T("Syntax error detected, aborting."));
+            wxLogMessage(wxT("Syntax error detected, aborting."));
             break;
     }
 #endif // wxUSE_CMDLINE_PARSER
@@ -4296,19 +4296,19 @@ int main(int argc, char **argv)
 #endif // TEST_LOCALE
 
 #ifdef TEST_LOG
-    wxPuts(_T("*** Testing wxLog ***"));
+    wxPuts(wxT("*** Testing wxLog ***"));
 
     wxString s;
     for ( size_t n = 0; n < 8000; n++ )
     {
-        s << (wxChar)(_T('A') + (n % 26));
+        s << (wxChar)(wxT('A') + (n % 26));
     }
 
-    wxLogWarning(_T("The length of the string is %lu"),
+    wxLogWarning(wxT("The length of the string is %lu"),
                  (unsigned long)s.length());
 
     wxString msg;
-    msg.Printf(_T("A very very long message: '%s', the end!\n"), s.c_str());
+    msg.Printf(wxT("A very very long message: '%s', the end!\n"), s.c_str());
 
     // this one shouldn't be truncated
     wxPrintf(msg);
@@ -4316,7 +4316,7 @@ int main(int argc, char **argv)
     // but this one will because log functions use fixed size buffer
     // (note that it doesn't need '\n' at the end neither - will be added
     //  by wxLog anyhow)
-    wxLogMessage(_T("A very very long message 2: '%s', the end!"), s.c_str());
+    wxLogMessage(wxT("A very very long message 2: '%s', the end!"), s.c_str());
 #endif // TEST_LOG
 
 #ifdef TEST_FILE
@@ -4365,7 +4365,7 @@ int main(int argc, char **argv)
 #endif // TEST_FTP
 
 #ifdef TEST_MIME
-    wxLog::AddTraceMask(_T("mime"));
+    wxLog::AddTraceMask(wxT("mime"));
     #if TEST_ALL
         TestMimeEnum();
     #endif
@@ -4430,7 +4430,7 @@ int main(int argc, char **argv)
 
 #ifdef TEST_THREADS
     int nCPUs = wxThread::GetCPUCount();
-    wxPrintf(_T("This system has %d CPUs\n"), nCPUs);
+    wxPrintf(wxT("This system has %d CPUs\n"), nCPUs);
     if ( nCPUs != -1 )
         wxThread::SetConcurrency(nCPUs);
 
@@ -4484,7 +4484,7 @@ int main(int argc, char **argv)
 #endif
 
 #ifdef TEST_USLEEP
-    wxPuts(_T("Sleeping for 3 seconds... z-z-z-z-z..."));
+    wxPuts(wxT("Sleeping for 3 seconds... z-z-z-z-z..."));
     wxUsleep(3000);
 #endif // TEST_USLEEP
 
--- samples/minifram/minifram.h-orig	2009-06-18 18:24:05.783770000 -0500
+++ samples/minifram/minifram.h	2009-06-18 18:24:20.586265000 -0500
@@ -23,7 +23,7 @@ class MyApp: public wxApp
 class MyMiniFrame: public wxMiniFrame
 {
 public:
-    MyMiniFrame(wxFrame *parent, wxWindowID id = wxID_ANY, const wxString& title = _T("wxToolBar Sample"),
+    MyMiniFrame(wxFrame *parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("wxToolBar Sample"),
         const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize );
 
     void OnCloseWindow(wxCloseEvent& event);
@@ -36,7 +36,7 @@ DECLARE_EVENT_TABLE()
 class MyMainFrame: public wxFrame
 {
 public:
-    MyMainFrame(wxFrame *parent, wxWindowID id = wxID_ANY, const wxString& title = _T("wxToolBar Sample"),
+    MyMainFrame(wxFrame *parent, wxWindowID id = wxID_ANY, const wxString& title = wxT("wxToolBar Sample"),
         const wxPoint& pos = wxDefaultPosition, const wxSize& size = wxDefaultSize );
 
     void OnCloseWindow(wxCloseEvent& event);
--- samples/minifram/minifram.cpp-orig	2009-06-18 18:24:11.598390000 -0500
+++ samples/minifram/minifram.cpp	2009-06-18 18:24:39.377245000 -0500
@@ -58,20 +58,20 @@ wxButton      *button     = (wxButton*) 
 bool MyApp::OnInit()
 {
   // Create the main frame window
-  main_frame = new MyMainFrame((wxFrame *) NULL, wxID_ANY, _T("wxFrame sample"),
+  main_frame = new MyMainFrame((wxFrame *) NULL, wxID_ANY, wxT("wxFrame sample"),
      wxPoint(100, 100), wxSize(300, 200));
 
   main_frame->SetSizeHints( 100,100, 400,400 );
 
   wxMenu *file_menu = new wxMenu;
-  file_menu->Append(wxID_EXIT, _T("E&xit\tAlt-Q"));
-  file_menu->Append(ID_SET_SIZE_TO_150_150, _T("Set frame size to 150,150\tF2"));
-  file_menu->Append(ID_SET_SIZE_TO_200_200, _T("Set frame size to 200,200\tF3"));
-  file_menu->Append(ID_SET_MAX_SIZE_TO_150_150, _T("Set frame max size to 150,150\tF4"));
-  file_menu->Append(ID_SET_MAX_SIZE_TO_300_300, _T("Set frame max size to 300,300\tF5"));
+  file_menu->Append(wxID_EXIT, wxT("E&xit\tAlt-Q"));
+  file_menu->Append(ID_SET_SIZE_TO_150_150, wxT("Set frame size to 150,150\tF2"));
+  file_menu->Append(ID_SET_SIZE_TO_200_200, wxT("Set frame size to 200,200\tF3"));
+  file_menu->Append(ID_SET_MAX_SIZE_TO_150_150, wxT("Set frame max size to 150,150\tF4"));
+  file_menu->Append(ID_SET_MAX_SIZE_TO_300_300, wxT("Set frame max size to 300,300\tF5"));
   
   wxMenuBar *menu_bar = new wxMenuBar;
-  menu_bar->Append(file_menu, _T("&File"));
+  menu_bar->Append(file_menu, wxT("&File"));
   main_frame->SetMenuBar(menu_bar);
 
   main_frame->Connect( ID_SET_SIZE_TO_150_150,  wxID_ANY,
@@ -86,10 +86,10 @@ bool MyApp::OnInit()
   main_frame->CreateToolBar(wxNO_BORDER|wxTB_VERTICAL, ID_TOOLBAR);
   InitToolbar(main_frame->GetToolBar());
 
-  button = new wxButton( main_frame, ID_REPARENT, _T("Press to reparent!") );
+  button = new wxButton( main_frame, ID_REPARENT, wxT("Press to reparent!") );
 
   // Create the mini frame window
-  mini_frame = new MyMiniFrame( main_frame, wxID_ANY, _T("wxMiniFrame sample"),
+  mini_frame = new MyMiniFrame( main_frame, wxID_ANY, wxT("wxMiniFrame sample"),
      wxPoint(100, 100), wxSize(220, 100));
   mini_frame_exists = true;
 
@@ -127,24 +127,24 @@ bool MyApp::InitToolbar(wxToolBar* toolB
   int width = 16;
   int currentX = 5;
 
-  toolBar->AddTool(wxID_NEW, *(toolBarBitmaps[0]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("New file"));
+  toolBar->AddTool(wxID_NEW, *(toolBarBitmaps[0]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("New file"));
   currentX += width + 5;
-  toolBar->AddTool(wxID_OPEN, *(toolBarBitmaps[1]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Open file"));
+  toolBar->AddTool(wxID_OPEN, *(toolBarBitmaps[1]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Open file"));
   currentX += width + 5;
-  toolBar->AddTool(wxID_SAVE, *(toolBarBitmaps[2]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Save file"));
+  toolBar->AddTool(wxID_SAVE, *(toolBarBitmaps[2]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Save file"));
   currentX += width + 5;
   toolBar->AddSeparator();
-  toolBar->AddTool(wxID_COPY, *(toolBarBitmaps[3]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Copy"));
+  toolBar->AddTool(wxID_COPY, *(toolBarBitmaps[3]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Copy"));
   currentX += width + 5;
-  toolBar->AddTool(wxID_CUT, *(toolBarBitmaps[4]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Cut"));
+  toolBar->AddTool(wxID_CUT, *(toolBarBitmaps[4]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Cut"));
   currentX += width + 5;
-  toolBar->AddTool(wxID_PASTE, *(toolBarBitmaps[5]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Paste"));
+  toolBar->AddTool(wxID_PASTE, *(toolBarBitmaps[5]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Paste"));
   currentX += width + 5;
   toolBar->AddSeparator();
-  toolBar->AddTool(wxID_PRINT, *(toolBarBitmaps[6]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Reparent the button"));
+  toolBar->AddTool(wxID_PRINT, *(toolBarBitmaps[6]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Reparent the button"));
   currentX += width + 5;
   toolBar->AddSeparator();
-  toolBar->AddTool(wxID_HELP, *(toolBarBitmaps[7]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, _T("Help"));
+  toolBar->AddTool(wxID_HELP, *(toolBarBitmaps[7]), wxNullBitmap, false, currentX, wxDefaultCoord, (wxObject *) NULL, wxT("Help"));
 
   toolBar->Realize();
 
@@ -211,9 +211,9 @@ void MyMainFrame::OnReparent(wxCommandEv
   // practical jokers might find satisfaction in reparenting the button
   // after closing the mini_frame. We'll have the last laugh.
   if (! mini_frame_exists)
-    wxMessageBox(_T("The miniframe no longer exists.\n")
-                 _T("You don't want to make this button an orphan, do you?"),
-                 _T("You got to be kidding"));
+    wxMessageBox(wxT("The miniframe no longer exists.\n")
+                 wxT("You don't want to make this button an orphan, do you?"),
+                 wxT("You got to be kidding"));
   else
   {
     button->Reparent( mini_frame );
--- samples/thread/thread.cpp-orig	2009-06-18 18:23:49.156966000 -0500
+++ samples/thread/thread.cpp	2009-06-18 18:23:54.398258000 -0500
@@ -368,39 +368,39 @@ bool MyApp::OnInit()
     //wxLog::AddTraceMask("thread");
 
     // Create the main frame window
-    MyFrame *frame = new MyFrame((wxFrame *)NULL, _T("wxWidgets threads sample"),
+    MyFrame *frame = new MyFrame((wxFrame *)NULL, wxT("wxWidgets threads sample"),
                                  50, 50, 450, 340);
 
     // Make a menubar
     wxMenuBar *menuBar = new wxMenuBar;
 
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(THREAD_CLEAR, _T("&Clear log\tCtrl-L"));
+    menuFile->Append(THREAD_CLEAR, wxT("&Clear log\tCtrl-L"));
     menuFile->AppendSeparator();
-    menuFile->Append(THREAD_QUIT, _T("E&xit\tAlt-X"));
-    menuBar->Append(menuFile, _T("&File"));
+    menuFile->Append(THREAD_QUIT, wxT("E&xit\tAlt-X"));
+    menuBar->Append(menuFile, wxT("&File"));
 
     wxMenu *menuThread = new wxMenu;
-    menuThread->Append(THREAD_START_THREAD, _T("&Start a new thread\tCtrl-N"));
-    menuThread->Append(THREAD_START_THREADS, _T("Start &many threads at once"));
-    menuThread->Append(THREAD_STOP_THREAD, _T("S&top a running thread\tCtrl-S"));
+    menuThread->Append(THREAD_START_THREAD, wxT("&Start a new thread\tCtrl-N"));
+    menuThread->Append(THREAD_START_THREADS, wxT("Start &many threads at once"));
+    menuThread->Append(THREAD_STOP_THREAD, wxT("S&top a running thread\tCtrl-S"));
     menuThread->AppendSeparator();
-    menuThread->Append(THREAD_PAUSE_THREAD, _T("&Pause a running thread\tCtrl-P"));
-    menuThread->Append(THREAD_RESUME_THREAD, _T("&Resume suspended thread\tCtrl-R"));
+    menuThread->Append(THREAD_PAUSE_THREAD, wxT("&Pause a running thread\tCtrl-P"));
+    menuThread->Append(THREAD_RESUME_THREAD, wxT("&Resume suspended thread\tCtrl-R"));
     menuThread->AppendSeparator();
-    menuThread->Append(THREAD_START_WORKER, _T("Start &worker thread\tCtrl-W"));
-    menuBar->Append(menuThread, _T("&Thread"));
+    menuThread->Append(THREAD_START_WORKER, wxT("Start &worker thread\tCtrl-W"));
+    menuBar->Append(menuThread, wxT("&Thread"));
 
     wxMenu *menuExec = new wxMenu;
-    menuExec->Append(THREAD_EXEC_MAIN, _T("&Launch a program from main thread\tF5"));
-    menuExec->Append(THREAD_EXEC_THREAD, _T("L&aunch a program from a thread\tCtrl-F5"));
-    menuBar->Append(menuExec, _T("&Execute"));
+    menuExec->Append(THREAD_EXEC_MAIN, wxT("&Launch a program from main thread\tF5"));
+    menuExec->Append(THREAD_EXEC_THREAD, wxT("L&aunch a program from a thread\tCtrl-F5"));
+    menuBar->Append(menuExec, wxT("&Execute"));
 
     wxMenu *menuHelp = new wxMenu;
-    menuHelp->Append(THREAD_SHOWCPUS, _T("&Show CPU count"));
+    menuHelp->Append(THREAD_SHOWCPUS, wxT("&Show CPU count"));
     menuHelp->AppendSeparator();
-    menuHelp->Append(THREAD_ABOUT, _T("&About..."));
-    menuBar->Append(menuHelp, _T("&Help"));
+    menuHelp->Append(THREAD_ABOUT, wxT("&About..."));
+    menuBar->Append(menuHelp, wxT("&Help"));
 
     frame->SetMenuBar(menuBar);
     
@@ -427,7 +427,7 @@ MyFrame::MyFrame(wxFrame *frame, const w
     CreateStatusBar(2);
 #endif // wxUSE_STATUSBAR
 
-    m_txtctrl = new wxTextCtrl(this, wxID_ANY, _T(""), wxPoint(0, 0), wxSize(0, 0),
+    m_txtctrl = new wxTextCtrl(this, wxID_ANY, wxT(""), wxPoint(0, 0), wxSize(0, 0),
                                wxTE_MULTILINE | wxTE_READONLY);
 
 }
@@ -496,8 +496,8 @@ void MyFrame::OnStartThreads(wxCommandEv
 {
     static long s_num;
 
-    s_num = wxGetNumberFromUser(_T("How many threads to start: "), _T(""),
-                                _T("wxThread sample"), s_num, 1, 10000, this);
+    s_num = wxGetNumberFromUser(wxT("How many threads to start: "), wxT(""),
+                                wxT("wxThread sample"), s_num, 1, 10000, this);
     if ( s_num == -1 )
     {
         s_num = 10;
@@ -550,7 +550,7 @@ void MyFrame::OnStartThread(wxCommandEve
     }
 
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("New thread started."), 1);
+    SetStatusText(wxT("New thread started."), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -577,7 +577,7 @@ void MyFrame::OnStopThread(wxCommandEven
         thread->Delete();
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("Thread stopped."), 1);
+        SetStatusText(wxT("Thread stopped."), 1);
 #endif // wxUSE_STATUSBAR
     }
 }
@@ -600,7 +600,7 @@ void MyFrame::OnResumeThread(wxCommandEv
         wxGetApp().m_threads[n]->Resume();
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("Thread resumed."), 1);
+        SetStatusText(wxT("Thread resumed."), 1);
 #endif // wxUSE_STATUSBAR
     }
 }
@@ -623,7 +623,7 @@ void MyFrame::OnPauseThread(wxCommandEve
         wxGetApp().m_threads[n]->Pause();
 
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("Thread paused."), 1);
+        SetStatusText(wxT("Thread paused."), 1);
 #endif // wxUSE_STATUSBAR
     }
 }
@@ -662,7 +662,7 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnExecMain(wxCommandEvent& WXUNUSED(event))
 {
     wxLogMessage(wxT("The exit code from the main program is %ld"),
-                 EXEC(_T("/bin/echo \"main program\"")));
+                 EXEC(wxT("/bin/echo \"main program\"")));
 }
 
 void MyFrame::OnExecThread(wxCommandEvent& WXUNUSED(event))
@@ -682,15 +682,15 @@ void MyFrame::OnShowCPUs(wxCommandEvent&
     switch ( nCPUs )
     {
         case -1:
-            msg = _T("Unknown number of CPUs");
+            msg = wxT("Unknown number of CPUs");
             break;
 
         case 0:
-            msg = _T("WARNING: you're running without any CPUs!");
+            msg = wxT("WARNING: you're running without any CPUs!");
             break;
 
         case 1:
-            msg = _T("This system only has one CPU.");
+            msg = wxT("This system only has one CPU.");
             break;
 
         default:
@@ -703,11 +703,11 @@ void MyFrame::OnShowCPUs(wxCommandEvent&
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
     wxMessageDialog dialog(this,
-                           _T("wxWidgets multithreaded application sample\n")
-                           _T("(c) 1998 Julian Smart, Guilhem Lavaux\n")
-                           _T("(c) 1999 Vadim Zeitlin\n")
-                           _T("(c) 2000 Robert Roebling"),
-                           _T("About wxThread sample"),
+                           wxT("wxWidgets multithreaded application sample\n")
+                           wxT("(c) 1998 Julian Smart, Guilhem Lavaux\n")
+                           wxT("(c) 1999 Vadim Zeitlin\n")
+                           wxT("(c) 2000 Robert Roebling"),
+                           wxT("About wxThread sample"),
                            wxOK | wxICON_INFORMATION);
 
     dialog.ShowModal();
@@ -735,8 +735,8 @@ void MyFrame::OnStartWorker(wxCommandEve
 
     m_dlgProgress = new wxProgressDialog
                         (
-                         _T("Progress dialog"),
-                         _T("Wait until the thread terminates or press [Cancel]"),
+                         wxT("Progress dialog"),
+                         wxT("Wait until the thread terminates or press [Cancel]"),
                          100,
                          this,
                          wxPD_CAN_ABORT |
@@ -755,9 +755,9 @@ void MyFrame::OnStartWorker(wxCommandEve
 void MyFrame::OnWorkerEvent(wxCommandEvent& event)
 {
 #if 0
-    WriteText( _T("Got message from worker thread: ") );
+    WriteText( wxT("Got message from worker thread: ") );
     WriteText( event.GetString() );
-    WriteText( _T("\n") );
+    WriteText( wxT("\n") );
 #else
     int n = event.GetInt();
     if ( n == -1 )
--- samples/validate/validate.cpp-orig	2009-06-18 18:23:19.337635000 -0500
+++ samples/validate/validate.cpp	2009-06-18 18:23:29.499313000 -0500
@@ -100,7 +100,7 @@ MyFrame::MyFrame(wxFrame *frame, const w
 
     // Create a listbox to display the validated data.
     m_listbox = new wxListBox(this, wxID_ANY);
-    m_listbox->Append(wxString(_T("Try 'File|Test' to see how validators work.")));
+    m_listbox->Append(wxString(wxT("Try 'File|Test' to see how validators work.")));
 
     wxMenu *file_menu = new wxMenu;
 
@@ -144,17 +144,17 @@ void MyFrame::OnTestDialog(wxCommandEven
         // automatically transferred to the variables we specified
         // when we created the validators.
         m_listbox->Clear();
-        m_listbox->Append(wxString(_T("string: ")) + g_data.m_string);
+        m_listbox->Append(wxString(wxT("string: ")) + g_data.m_string);
         for(unsigned int i = 0; i < g_data.m_listbox_choices.GetCount(); ++i)
         {
             int j = g_data.m_listbox_choices[i];
-            m_listbox->Append(wxString(_T("listbox choice(s): ")) + g_listbox_choices[j]);
+            m_listbox->Append(wxString(wxT("listbox choice(s): ")) + g_listbox_choices[j]);
         }
 
-        wxString checkbox_state(g_data.m_checkbox_state ? _T("checked") : _T("unchecked"));
-        m_listbox->Append(wxString(_T("checkbox: ")) + checkbox_state);
-        m_listbox->Append(wxString(_T("combobox: ")) + g_data.m_combobox_choice);
-        m_listbox->Append(wxString(_T("radiobox: ")) + g_radiobox_choices[g_data.m_radiobox_choice]);
+        wxString checkbox_state(g_data.m_checkbox_state ? wxT("checked") : wxT("unchecked"));
+        m_listbox->Append(wxString(wxT("checkbox: ")) + checkbox_state);
+        m_listbox->Append(wxString(wxT("combobox: ")) + g_data.m_combobox_choice);
+        m_listbox->Append(wxString(wxT("radiobox: ")) + g_radiobox_choices[g_data.m_radiobox_choice]);
     }
 }
 
--- samples/oleauto/oleauto.cpp-orig	2009-06-18 18:23:01.057629000 -0500
+++ samples/oleauto/oleauto.cpp	2009-06-18 18:23:10.003497000 -0500
@@ -126,7 +126,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // Create the main application window
-    MyFrame *frame = new MyFrame(_T("OleAuto wxWidgets App"),
+    MyFrame *frame = new MyFrame(wxT("OleAuto wxWidgets App"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // Show it and tell the application that it's our main window
@@ -154,14 +154,14 @@ MyFrame::MyFrame(const wxString& title, 
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
 
-    menuFile->Append(OleAuto_Test, _T("&Test Excel Automation..."));
-    menuFile->Append(OleAuto_About, _T("&About..."));
+    menuFile->Append(OleAuto_Test, wxT("&Test Excel Automation..."));
+    menuFile->Append(OleAuto_About, wxT("&About..."));
     menuFile->AppendSeparator();
-    menuFile->Append(OleAuto_Quit, _T("E&xit"));
+    menuFile->Append(OleAuto_Quit, wxT("E&xit"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(menuFile, _T("&File"));
+    menuBar->Append(menuFile, wxT("&File"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -169,7 +169,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -184,8 +184,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("This is an OLE Automation sample"),
-                 _T("About OleAuto"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(wxT("This is an OLE Automation sample"),
+                 wxT("About OleAuto"), wxOK | wxICON_INFORMATION, this);
 }
 
 /* Tests OLE automation by making the active Excel cell bold,
@@ -193,25 +193,25 @@ void MyFrame::OnAbout(wxCommandEvent& WX
  */
 void MyFrame::OnTest(wxCommandEvent& WXUNUSED(event))
 {
-    wxMessageBox(_T("Please ensure Excel is running, then press OK.\nThe active cell should then say 'wxWidgets automation test!' in bold."));
+    wxMessageBox(wxT("Please ensure Excel is running, then press OK.\nThe active cell should then say 'wxWidgets automation test!' in bold."));
 
     wxAutomationObject excelObject, rangeObject;
-    if (!excelObject.GetInstance(_T("Excel.Application")))
+    if (!excelObject.GetInstance(wxT("Excel.Application")))
     {
-        if (!excelObject.CreateInstance(_T("Excel.Application")))
+        if (!excelObject.CreateInstance(wxT("Excel.Application")))
         {
-            wxMessageBox(_T("Could not create Excel object."));
+            wxMessageBox(wxT("Could not create Excel object."));
             return;
         }
     }
-    if (!excelObject.PutProperty(_T("ActiveCell.Value"), _T("wxWidgets automation test!")))
+    if (!excelObject.PutProperty(wxT("ActiveCell.Value"), wxT("wxWidgets automation test!")))
     {
-        wxMessageBox(_T("Could not set active cell value."));
+        wxMessageBox(wxT("Could not set active cell value."));
         return;
     }
-    if (!excelObject.PutProperty(_T("ActiveCell.Font.Bold"), wxVariant(true)) )
+    if (!excelObject.PutProperty(wxT("ActiveCell.Font.Bold"), wxVariant(true)) )
     {
-        wxMessageBox(_T("Could not put Bold property to active cell."));
+        wxMessageBox(wxT("Could not put Bold property to active cell."));
         return;
     }
 }
--- samples/opengl/isosurf/isosurf.cpp-orig	2009-06-18 18:22:25.330814000 -0500
+++ samples/opengl/isosurf/isosurf.cpp	2009-06-18 18:22:31.414209000 -0500
@@ -76,10 +76,10 @@ static GLfloat yrot;
 
 static void read_surface( const wxChar *filename )
 {
-    FILE *f = wxFopen(filename,_T("r"));
+    FILE *f = wxFopen(filename,wxT("r"));
     if (!f)
     {
-        wxString msg = _T("Couldn't read ");
+        wxString msg = wxT("Couldn't read ");
         msg += filename;
         wxMessageBox(msg);
         return;
@@ -96,7 +96,7 @@ static void read_surface( const wxChar *
 
     numverts--;
 
-    wxPrintf(_T("%d vertices, %d triangles\n"), numverts, numverts-2);
+    wxPrintf(wxT("%d vertices, %d triangles\n"), numverts, numverts-2);
 
     fclose(f);
 }
@@ -211,26 +211,26 @@ static GLenum Args(int argc, wxChar **ar
 
     for (i = 1; i < argc; i++)
     {
-        if (wxStrcmp(argv[i], _T("-sb")) == 0)
+        if (wxStrcmp(argv[i], wxT("-sb")) == 0)
         {
             doubleBuffer = GL_FALSE;
         }
-        else if (wxStrcmp(argv[i], _T("-db")) == 0)
+        else if (wxStrcmp(argv[i], wxT("-db")) == 0)
         {
             doubleBuffer = GL_TRUE;
         }
-        else if (wxStrcmp(argv[i], _T("-speed")) == 0)
+        else if (wxStrcmp(argv[i], wxT("-speed")) == 0)
         {
             speed_test = GL_TRUE;
             doubleBuffer = GL_TRUE;
         }
-        else if (wxStrcmp(argv[i], _T("-va")) == 0)
+        else if (wxStrcmp(argv[i], wxT("-va")) == 0)
         {
             use_vertex_arrays = GL_TRUE;
         }
         else
         {
-            wxString msg = _T("Bad option: ");
+            wxString msg = wxT("Bad option: ");
             msg += argv[i];
             wxMessageBox(msg);
             return GL_FALSE;
@@ -260,9 +260,9 @@ bool MyApp::OnInit()
     // Make a menubar
     wxMenu *fileMenu = new wxMenu;
 
-    fileMenu->Append(wxID_EXIT, _T("E&xit"));
+    fileMenu->Append(wxID_EXIT, wxT("E&xit"));
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(fileMenu, _T("&File"));
+    menuBar->Append(fileMenu, wxT("&File"));
     frame->SetMenuBar(menuBar);
 
   // Make a TestGLCanvas
@@ -291,13 +291,13 @@ bool MyApp::OnInit()
     }
 
     frame->m_canvas = new TestGLCanvas(frame, wxID_ANY, wxDefaultPosition,
-        wxDefaultSize, 0, _T("TestGLCanvas"), gl_attrib );
+        wxDefaultSize, 0, wxT("TestGLCanvas"), gl_attrib );
 
   // Show the frame
     frame->Show(true);
 
     frame->m_canvas->SetCurrent();
-    read_surface( _T("isosurf.dat") );
+    read_surface( wxT("isosurf.dat") );
 
     Init();
 
--- samples/opengl/isosurf/isosurf.h-orig	2009-06-18 18:22:41.852348000 -0500
+++ samples/opengl/isosurf/isosurf.h	2009-06-18 18:22:46.671159000 -0500
@@ -27,7 +27,7 @@ public:
     TestGLCanvas(wxWindow *parent, wxWindowID id = wxID_ANY,
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize, long style = 0,
-        const wxString& name = _T("TestGLCanvas"), int *gl_attrib = NULL);
+        const wxString& name = wxT("TestGLCanvas"), int *gl_attrib = NULL);
 
    ~TestGLCanvas(){};
 
--- samples/opengl/cube/cube.h-orig	2009-06-18 18:21:42.663395000 -0500
+++ samples/opengl/cube/cube.h	2009-06-18 18:22:00.554787000 -0500
@@ -54,12 +54,12 @@ public:
     TestGLCanvas( wxWindow *parent, wxWindowID id = wxID_ANY,
         const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize,
-        long style = 0, const wxString& name = _T("TestGLCanvas") );
+        long style = 0, const wxString& name = wxT("TestGLCanvas") );
 
     TestGLCanvas( wxWindow *parent, const TestGLCanvas *other,
         wxWindowID id = wxID_ANY, const wxPoint& pos = wxDefaultPosition,
         const wxSize& size = wxDefaultSize, long style = 0,
-        const wxString& name = _T("TestGLCanvas") );
+        const wxString& name = wxT("TestGLCanvas") );
 
     ~TestGLCanvas();
 
--- samples/opengl/cube/cube.cpp-orig	2009-06-18 18:21:50.899111000 -0500
+++ samples/opengl/cube/cube.cpp	2009-06-18 18:22:13.369823000 -0500
@@ -103,18 +103,18 @@ ScanCodeDialog::ScanCodeDialog( wxWindow
     const int code, const wxString &descr, const wxString& title )
     : wxDialog( parent, id, title, wxDefaultPosition, wxSize(96*2,76*2) )
 {
-    new wxStaticText( this, wxID_ANY, _T("Scancode"), wxPoint(4*2,3*2),
+    new wxStaticText( this, wxID_ANY, wxT("Scancode"), wxPoint(4*2,3*2),
         wxSize(31*2,12*2) );
     m_ScanCode = new ScanCodeCtrl( this, wxID_ANY, code, wxPoint(37*2,6*2),
         wxSize(53*2,14*2) );
 
-    new wxStaticText( this, wxID_ANY, _T("Description"), wxPoint(4*2,24*2),
+    new wxStaticText( this, wxID_ANY, wxT("Description"), wxPoint(4*2,24*2),
         wxSize(32*2,12*2) );
     m_Description = new wxTextCtrl( this, wxID_ANY, descr, wxPoint(37*2,27*2),
         wxSize(53*2,14*2) );
 
-    new wxButton( this, wxID_OK, _T("Ok"), wxPoint(20*2,50*2), wxSize(20*2,13*2) );
-    new wxButton( this, wxID_CANCEL, _T("Cancel"), wxPoint(44*2,50*2),
+    new wxButton( this, wxID_OK, wxT("Ok"), wxPoint(20*2,50*2), wxSize(20*2,13*2) );
+    new wxButton( this, wxID_CANCEL, wxT("Cancel"), wxPoint(44*2,50*2),
         wxSize(25*2,13*2) );
 }
 
@@ -122,7 +122,7 @@ int ScanCodeDialog::GetValue()
 {
     int code;
     wxString buf = m_ScanCode->GetValue();
-    wxSscanf( buf.c_str(), _T("%i"), &code );
+    wxSscanf( buf.c_str(), wxT("%i"), &code );
     return code;
 }
 
@@ -457,15 +457,15 @@ void MyFrame::OnExit( wxCommandEvent& WX
     // Make a menubar
     wxMenu *winMenu = new wxMenu;
 
-    winMenu->Append(wxID_EXIT, _T("&Close"));
-    winMenu->Append(ID_NEW_WINDOW, _T("&New") );
+    winMenu->Append(wxID_EXIT, wxT("&Close"));
+    winMenu->Append(ID_NEW_WINDOW, wxT("&New") );
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(winMenu, _T("&Window"));
+    menuBar->Append(winMenu, wxT("&Window"));
 
     winMenu = new wxMenu;
-    winMenu->Append(ID_DEF_ROTATE_LEFT_KEY, _T("Rotate &left"));
-    winMenu->Append(ID_DEF_ROTATE_RIGHT_KEY, _T("Rotate &right"));
-    menuBar->Append(winMenu, _T("&Key"));
+    winMenu->Append(ID_DEF_ROTATE_LEFT_KEY, wxT("Rotate &left"));
+    winMenu->Append(ID_DEF_ROTATE_RIGHT_KEY, wxT("Rotate &right"));
+    menuBar->Append(winMenu, wxT("&Key"));
 
     frame->SetMenuBar(menuBar);
 
@@ -494,7 +494,7 @@ void MyFrame::OnNewWindow( wxCommandEven
 void MyFrame::OnDefRotateLeftKey( wxCommandEvent& WXUNUSED(event) )
 {
     ScanCodeDialog dial( this, wxID_ANY, m_canvas->m_rleft,
-        wxString(_T("Left")), _T("Define key") );
+        wxString(wxT("Left")), wxT("Define key") );
 
     int result = dial.ShowModal();
 
@@ -505,7 +505,7 @@ void MyFrame::OnDefRotateLeftKey( wxComm
 void MyFrame::OnDefRotateRightKey( wxCommandEvent& WXUNUSED(event) )
 {
     ScanCodeDialog dial( this, wxID_ANY, m_canvas->m_rright,
-        wxString(_T("Right")), _T("Define key") );
+        wxString(wxT("Right")), wxT("Define key") );
 
     int result = dial.ShowModal();
 
--- samples/toolbar/toolbar.cpp-orig	2009-06-18 18:21:22.927069000 -0500
+++ samples/toolbar/toolbar.cpp	2009-06-18 18:21:29.281571000 -0500
@@ -97,7 +97,7 @@ class MyFrame: public wxFrame
 public:
     MyFrame(wxFrame *parent,
             wxWindowID id = wxID_ANY,
-            const wxString& title = _T("wxToolBar Sample"),
+            const wxString& title = wxT("wxToolBar Sample"),
             const wxPoint& pos = wxDefaultPosition,
             const wxSize& size = wxDefaultSize,
             long style = wxDEFAULT_FRAME_STYLE|wxCLIP_CHILDREN|wxNO_FULL_REPAINT_ON_RESIZE);
@@ -281,13 +281,13 @@ bool MyApp::OnInit()
 {
     // Create the main frame window
     MyFrame* frame = new MyFrame((wxFrame *) NULL, wxID_ANY,
-                                 _T("wxToolBar Sample"),
+                                 wxT("wxToolBar Sample"),
                                   wxPoint(100, 100), wxSize(550, 300));
 
     frame->Show(true);
 
 #if wxUSE_STATUSBAR
-    frame->SetStatusText(_T("Hello, wxWidgets"));
+    frame->SetStatusText(wxT("Hello, wxWidgets"));
 #endif
 
     wxInitAllImageHandlers();
@@ -396,12 +396,12 @@ void MyFrame::PopulateToolbar(wxToolBarB
 
     toolBar->SetToolBitmapSize(wxSize(w, h));
 
-    toolBar->AddTool(wxID_NEW, _T("New"),
+    toolBar->AddTool(wxID_NEW, wxT("New"),
                      toolBarBitmaps[Tool_new], wxNullBitmap, wxITEM_NORMAL,
-                     _T("New file"), _T("This is help for new file tool"));
-    toolBar->AddTool(wxID_OPEN, _T("Open"),
+                     wxT("New file"), wxT("This is help for new file tool"));
+    toolBar->AddTool(wxID_OPEN, wxT("Open"),
                      toolBarBitmaps[Tool_open], wxNullBitmap, wxITEM_NORMAL,
-                     _T("Open file"), _T("This is help for open file tool"));
+                     wxT("Open file"), wxT("This is help for open file tool"));
 
     // the generic toolbar doesn't really support this
 #if wxUSE_TOOLBAR_NATIVE && !defined(__WXX11__) || defined(__WXUNIVERSAL__)
@@ -409,11 +409,11 @@ void MyFrame::PopulateToolbar(wxToolBarB
     if ( !( toolBar->IsVertical() ) )
     {
         wxComboBox *combo = new wxComboBox(toolBar, ID_COMBO, wxEmptyString, wxDefaultPosition, wxSize(100,-1) );
-        combo->Append(_T("This"));
-        combo->Append(_T("is a"));
-        combo->Append(_T("combobox"));
-        combo->Append(_T("in a"));
-        combo->Append(_T("toolbar"));
+        combo->Append(wxT("This"));
+        combo->Append(wxT("is a"));
+        combo->Append(wxT("combobox"));
+        combo->Append(wxT("in a"));
+        combo->Append(wxT("toolbar"));
         toolBar->AddControl(combo);
 
         wxSpinCtrl *spin = new wxSpinCtrl( toolBar, ID_SPIN, wxT("0"), wxDefaultPosition, wxSize(80,wxDefaultCoord), 0, 0, 100 );
@@ -427,10 +427,10 @@ void MyFrame::PopulateToolbar(wxToolBarB
     }
 #endif // toolbars which don't support controls
 
-    toolBar->AddTool(wxID_SAVE, _T("Save"), toolBarBitmaps[Tool_save], _T("Toggle button 1"), wxITEM_CHECK);
-    toolBar->AddTool(wxID_COPY, _T("Copy"), toolBarBitmaps[Tool_copy], _T("Toggle button 2"), wxITEM_CHECK);
-    toolBar->AddTool(wxID_CUT, _T("Cut"), toolBarBitmaps[Tool_cut], _T("Toggle/Untoggle help button"));
-    toolBar->AddTool(wxID_PASTE, _T("Paste"), toolBarBitmaps[Tool_paste], _T("Paste"));
+    toolBar->AddTool(wxID_SAVE, wxT("Save"), toolBarBitmaps[Tool_save], wxT("Toggle button 1"), wxITEM_CHECK);
+    toolBar->AddTool(wxID_COPY, wxT("Copy"), toolBarBitmaps[Tool_copy], wxT("Toggle button 2"), wxITEM_CHECK);
+    toolBar->AddTool(wxID_CUT, wxT("Cut"), toolBarBitmaps[Tool_cut], wxT("Toggle/Untoggle help button"));
+    toolBar->AddTool(wxID_PASTE, wxT("Paste"), toolBarBitmaps[Tool_paste], wxT("Paste"));
 
     if ( m_useCustomDisabled )
     {
@@ -445,17 +445,17 @@ void MyFrame::PopulateToolbar(wxToolBarB
             dc.DrawLine(0, 0, w, h);
         }
 
-        toolBar->AddTool(wxID_PRINT, _T("Print"), toolBarBitmaps[Tool_print],
+        toolBar->AddTool(wxID_PRINT, wxT("Print"), toolBarBitmaps[Tool_print],
                          bmpDisabled);
     }
     else
     {
-        toolBar->AddTool(wxID_PRINT, _T("Print"), toolBarBitmaps[Tool_print],
-                         _T("Delete this tool. This is a very long tooltip to test whether it does the right thing when the tooltip is more than Windows can cope with."));
+        toolBar->AddTool(wxID_PRINT, wxT("Print"), toolBarBitmaps[Tool_print],
+                         wxT("Delete this tool. This is a very long tooltip to test whether it does the right thing when the tooltip is more than Windows can cope with."));
     }
 
     toolBar->AddSeparator();
-    toolBar->AddTool(wxID_HELP, _T("Help"), toolBarBitmaps[Tool_help], _T("Help button"), wxITEM_CHECK);
+    toolBar->AddTool(wxID_HELP, wxT("Help"), toolBarBitmaps[Tool_help], wxT("Help button"), wxITEM_CHECK);
 
     if ( !m_pathBmp.empty() )
     {
@@ -467,7 +467,7 @@ void MyFrame::PopulateToolbar(wxToolBarB
                 img = img.GetSubImage(wxRect(0, 0, w, h));
 
             toolBar->AddSeparator();
-            toolBar->AddTool(wxID_ANY, _T("Custom"), img);
+            toolBar->AddTool(wxID_ANY, wxT("Custom"), img);
         }
     }
 
@@ -512,77 +512,77 @@ MyFrame::MyFrame(wxFrame* parent,
     // Make a menubar
     wxMenu *tbarMenu = new wxMenu;
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLE_TOOLBAR,
-                              _T("Toggle &toolbar\tCtrl-Z"),
-                              _T("Show or hide the toolbar"));
+                              wxT("Toggle &toolbar\tCtrl-Z"),
+                              wxT("Show or hide the toolbar"));
 
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLE_ANOTHER_TOOLBAR,
-                              _T("Toggle &another toolbar\tCtrl-A"),
-                              _T("Show/hide another test toolbar"));
+                              wxT("Toggle &another toolbar\tCtrl-A"),
+                              wxT("Show/hide another test toolbar"));
 
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLE_HORIZONTAL_TEXT,
-                              _T("Toggle hori&zontal text\tCtrl-H"),
-                              _T("Show text under/alongside the icon"));
+                              wxT("Toggle hori&zontal text\tCtrl-H"),
+                              wxT("Show text under/alongside the icon"));
 
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLETOOLBARSIZE,
-                              _T("&Toggle toolbar size\tCtrl-S"),
-                              _T("Toggle between big/small toolbar"));
+                              wxT("&Toggle toolbar size\tCtrl-S"),
+                              wxT("Toggle between big/small toolbar"));
 
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLETOOLBARROWS,
-                              _T("Toggle number of &rows\tCtrl-R"),
-                              _T("Toggle number of toolbar rows between 1 and 2"));
+                              wxT("Toggle number of &rows\tCtrl-R"),
+                              wxT("Toggle number of toolbar rows between 1 and 2"));
 
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLETOOLTIPS,
-                              _T("Show &tooltips\tCtrl-L"),
-                              _T("Show tooltips for the toolbar tools"));
+                              wxT("Show &tooltips\tCtrl-L"),
+                              wxT("Show tooltips for the toolbar tools"));
 
     tbarMenu->AppendCheckItem(IDM_TOOLBAR_TOGGLECUSTOMDISABLED,
-                              _T("Use c&ustom disabled images\tCtrl-U"),
-                              _T("Switch between using system-generated and custom disabled images"));
+                              wxT("Use c&ustom disabled images\tCtrl-U"),
+                              wxT("Switch between using system-generated and custom disabled images"));
 
 
     tbarMenu->AppendSeparator();
     tbarMenu->AppendRadioItem(IDM_TOOLBAR_TOP_ORIENTATION,
-                              _T("Set toolbar at the top of the window"),
-                              _T("Set toolbar at the top of the window"));
+                              wxT("Set toolbar at the top of the window"),
+                              wxT("Set toolbar at the top of the window"));
     tbarMenu->AppendRadioItem(IDM_TOOLBAR_LEFT_ORIENTATION,
-                              _T("Set toolbar at the left of the window"),
-                              _T("Set toolbar at the left of the window"));
+                              wxT("Set toolbar at the left of the window"),
+                              wxT("Set toolbar at the left of the window"));
     tbarMenu->AppendRadioItem(IDM_TOOLBAR_BOTTOM_ORIENTATION,
-                              _T("Set toolbar at the bottom of the window"),
-                              _T("Set toolbar at the bottom of the window"));
+                              wxT("Set toolbar at the bottom of the window"),
+                              wxT("Set toolbar at the bottom of the window"));
     tbarMenu->AppendRadioItem(IDM_TOOLBAR_RIGHT_ORIENTATION,
-                              _T("Set toolbar at the right edge of the window"),
-                              _T("Set toolbar at the right edge of the window"));
+                              wxT("Set toolbar at the right edge of the window"),
+                              wxT("Set toolbar at the right edge of the window"));
     tbarMenu->AppendSeparator();
 
-    tbarMenu->Append(IDM_TOOLBAR_ENABLEPRINT, _T("&Enable print button\tCtrl-E"));
-    tbarMenu->Append(IDM_TOOLBAR_DELETEPRINT, _T("&Delete print button\tCtrl-D"));
-    tbarMenu->Append(IDM_TOOLBAR_INSERTPRINT, _T("&Insert print button\tCtrl-I"));
-    tbarMenu->Append(IDM_TOOLBAR_TOGGLEHELP, _T("Toggle &help button\tCtrl-T"));
+    tbarMenu->Append(IDM_TOOLBAR_ENABLEPRINT, wxT("&Enable print button\tCtrl-E"));
+    tbarMenu->Append(IDM_TOOLBAR_DELETEPRINT, wxT("&Delete print button\tCtrl-D"));
+    tbarMenu->Append(IDM_TOOLBAR_INSERTPRINT, wxT("&Insert print button\tCtrl-I"));
+    tbarMenu->Append(IDM_TOOLBAR_TOGGLEHELP, wxT("Toggle &help button\tCtrl-T"));
     tbarMenu->AppendSeparator();
-    tbarMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN1, _T("Toggle &1st radio button\tCtrl-1"));
-    tbarMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN2, _T("Toggle &2nd radio button\tCtrl-2"));
-    tbarMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN3, _T("Toggle &3rd radio button\tCtrl-3"));
+    tbarMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN1, wxT("Toggle &1st radio button\tCtrl-1"));
+    tbarMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN2, wxT("Toggle &2nd radio button\tCtrl-2"));
+    tbarMenu->Append(IDM_TOOLBAR_TOGGLERADIOBTN3, wxT("Toggle &3rd radio button\tCtrl-3"));
     tbarMenu->AppendSeparator();
-    tbarMenu->Append(IDM_TOOLBAR_CHANGE_TOOLTIP, _T("Change tool tip"));
+    tbarMenu->Append(IDM_TOOLBAR_CHANGE_TOOLTIP, wxT("Change tool tip"));
     tbarMenu->AppendSeparator();
-    tbarMenu->AppendRadioItem(IDM_TOOLBAR_SHOW_TEXT, _T("Show &text\tCtrl-Alt-T"));
-    tbarMenu->AppendRadioItem(IDM_TOOLBAR_SHOW_ICONS, _T("Show &icons\tCtrl-Alt-I"));
-    tbarMenu->AppendRadioItem(IDM_TOOLBAR_SHOW_BOTH, _T("Show &both\tCtrl-Alt-B"));
+    tbarMenu->AppendRadioItem(IDM_TOOLBAR_SHOW_TEXT, wxT("Show &text\tCtrl-Alt-T"));
+    tbarMenu->AppendRadioItem(IDM_TOOLBAR_SHOW_ICONS, wxT("Show &icons\tCtrl-Alt-I"));
+    tbarMenu->AppendRadioItem(IDM_TOOLBAR_SHOW_BOTH, wxT("Show &both\tCtrl-Alt-B"));
     tbarMenu->AppendSeparator();
-    tbarMenu->Append(IDM_TOOLBAR_CUSTOM_PATH, _T("Custom &bitmap...\tCtrl-B"));
+    tbarMenu->Append(IDM_TOOLBAR_CUSTOM_PATH, wxT("Custom &bitmap...\tCtrl-B"));
 
     wxMenu *fileMenu = new wxMenu;
-    fileMenu->Append(wxID_EXIT, _T("E&xit\tAlt-X"), _T("Quit toolbar sample") );
+    fileMenu->Append(wxID_EXIT, wxT("E&xit\tAlt-X"), wxT("Quit toolbar sample") );
 
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(wxID_HELP, _T("&About"), _T("About toolbar sample"));
+    helpMenu->Append(wxID_HELP, wxT("&About"), wxT("About toolbar sample"));
 
     wxMenuBar* menuBar = new wxMenuBar( wxMB_DOCKABLE );
 
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(tbarMenu, _T("&Toolbar"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(tbarMenu, wxT("&Toolbar"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // Associate the menu bar with the frame
     SetMenuBar(menuBar);
@@ -686,11 +686,11 @@ void MyFrame::OnToggleAnotherToolbar(wxC
 
         m_tbar->SetMargins(4, 4);
 
-        m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_1, _T("First"), wxBITMAP(new));
-        m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_2, _T("Second"), wxBITMAP(open));
-        m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_3, _T("Third"), wxBITMAP(save));
+        m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_1, wxT("First"), wxBITMAP(new));
+        m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_2, wxT("Second"), wxBITMAP(open));
+        m_tbar->AddRadioTool(IDM_TOOLBAR_OTHER_3, wxT("Third"), wxBITMAP(save));
         m_tbar->AddSeparator();
-        m_tbar->AddTool(wxID_HELP, _T("Help"), wxBITMAP(help));
+        m_tbar->AddTool(wxID_HELP, wxT("Help"), wxBITMAP(help));
 
         m_tbar->Realize();
     }
@@ -757,17 +757,17 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& event)
 {
     if ( event.IsChecked() )
-        m_textWindow->WriteText( _T("Help button down now.\n") );
+        m_textWindow->WriteText( wxT("Help button down now.\n") );
     else
-        m_textWindow->WriteText( _T("Help button up now.\n") );
+        m_textWindow->WriteText( wxT("Help button up now.\n") );
 
-    (void)wxMessageBox(_T("wxWidgets toolbar sample"), _T("About wxToolBar"));
+    (void)wxMessageBox(wxT("wxWidgets toolbar sample"), wxT("About wxToolBar"));
 }
 
 void MyFrame::OnToolLeftClick(wxCommandEvent& event)
 {
     wxString str;
-    str.Printf( _T("Clicked on tool %d\n"), event.GetId());
+    str.Printf( wxT("Clicked on tool %d\n"), event.GetId());
     m_textWindow->WriteText( str );
 
     if (event.GetId() == wxID_COPY)
@@ -789,13 +789,13 @@ void MyFrame::OnToolLeftClick(wxCommandE
 void MyFrame::OnToolRightClick(wxCommandEvent& event)
 {
     m_textWindow->AppendText(
-            wxString::Format(_T("Tool %d right clicked.\n"),
+            wxString::Format(wxT("Tool %d right clicked.\n"),
                              (int) event.GetInt()));
 }
 
 void MyFrame::OnCombo(wxCommandEvent& event)
 {
-    wxLogStatus(_T("Combobox string '%s' selected"), event.GetString().c_str());
+    wxLogStatus(wxT("Combobox string '%s' selected"), event.GetString().c_str());
 }
 
 void MyFrame::DoEnablePrint()
@@ -839,7 +839,7 @@ void MyFrame::OnUpdateToggleHorzText(wxU
 
 void MyFrame::OnChangeToolTip(wxCommandEvent& WXUNUSED(event))
 {
-    GetToolBar()->SetToolShortHelp(wxID_NEW, _T("New toolbar button"));
+    GetToolBar()->SetToolShortHelp(wxID_NEW, wxT("New toolbar button"));
 }
 
 void MyFrame::OnToolbarStyle(wxCommandEvent& event)
@@ -866,7 +866,7 @@ void MyFrame::OnToolbarStyle(wxCommandEv
 
 void MyFrame::OnToolbarCustomBitmap(wxCommandEvent& WXUNUSED(event))
 {
-    m_pathBmp = wxFileSelector(_T("Custom bitmap path"));
+    m_pathBmp = wxFileSelector(wxT("Custom bitmap path"));
 
     RecreateToolbar();
 }
@@ -876,11 +876,11 @@ void MyFrame::OnInsertPrint(wxCommandEve
     m_nPrint++;
 
     wxToolBarBase *tb = GetToolBar();
-    tb->InsertTool(0, wxID_PRINT, _T("New print"),
+    tb->InsertTool(0, wxID_PRINT, wxT("New print"),
                    wxBITMAP(print), wxNullBitmap,
                    wxITEM_NORMAL,
-                   _T("Delete this tool"),
-                   _T("This button was inserted into the toolbar"));
+                   wxT("Delete this tool"),
+                   wxT("This button was inserted into the toolbar"));
 
     // must call Realize() after adding a new button
     tb->Realize();
--- samples/internat/internat.cpp-orig	2009-06-18 18:21:08.325945000 -0500
+++ samples/internat/internat.cpp	2009-06-18 18:21:15.964470000 -0500
@@ -113,23 +113,23 @@ static const wxLanguage langIds[] =
 // shown before we set the locale anyhow
 const wxString langNames[] =
 {
-    _T("System default"),
-    _T("French"),
-    _T("German"),
-    _T("Russian"),
-    _T("Bulgarian"),
-    _T("Czech"),
-    _T("Polish"),
-    _T("Swedish"),
+    wxT("System default"),
+    wxT("French"),
+    wxT("German"),
+    wxT("Russian"),
+    wxT("Bulgarian"),
+    wxT("Czech"),
+    wxT("Polish"),
+    wxT("Swedish"),
 #if wxUSE_UNICODE || defined(__WXMOTIF__)
-    _T("Japanese"),
+    wxT("Japanese"),
 #endif
 #if wxUSE_UNICODE
-    _T("Georgian"),
-    _T("English"),
-    _T("English (U.S.)"),
-    _T("Arabic"),
-    _T("Arabic (Egypt)")
+    wxT("Georgian"),
+    wxT("English"),
+    wxT("English (U.S.)"),
+    wxT("Arabic"),
+    wxT("Arabic (Egypt)")
 #endif
 };
 
@@ -179,8 +179,8 @@ bool MyApp::OnInit()
     {
         lng = wxGetSingleChoiceIndex
               (
-                _T("Please choose language:"),
-                _T("Language"),
+                wxT("Please choose language:"),
+                wxT("Language"),
                 WXSIZEOF(langNames),
                 langNames
               );
@@ -192,7 +192,7 @@ bool MyApp::OnInit()
         // false just because it failed to load wxstd catalog
         if ( !m_locale.Init(langIds[lng], wxLOCALE_CONV_ENCODING) )
         {
-            wxLogError(_T("This language is not supported by the system."));
+            wxLogError(wxT("This language is not supported by the system."));
             return false;
         }
     }
@@ -213,7 +213,7 @@ bool MyApp::OnInit()
 #ifdef __LINUX__
     {
         wxLogNull noLog;
-        m_locale.AddCatalog(_T("fileutils"));
+        m_locale.AddCatalog(wxT("fileutils"));
     }
 #endif
 
@@ -320,9 +320,9 @@ void MyFrame::OnPlay(wxCommandEvent& WXU
     }
     else if ( num == 9 )
     {
-        // this message is not translated (not in catalog) because we used _T()
+        // this message is not translated (not in catalog) because we used wxT()
         // and not _() around it
-        str = _T("You've found a bug in this program!");
+        str = wxT("You've found a bug in this program!");
     }
     else if ( num == 17 )
     {
@@ -339,7 +339,7 @@ void MyFrame::OnPlay(wxCommandEvent& WXU
         // you must ensure that the strings get extracted in the message
         // catalog as by default xgettext won't do it (it only knows of _(),
         // not wxGetTranslation())
-        str = wxGetTranslation(_T("Bad luck! try again..."));
+        str = wxGetTranslation(wxT("Bad luck! try again..."));
     }
 
     wxMessageBox(str, _("Result"), wxOK | wxICON_INFORMATION);
@@ -388,8 +388,8 @@ void MyFrame::OnTest1(wxCommandEvent& WX
     {
         wxString v = d.GetValue();
         wxString s(title);
-        s << _T("\n") << v << _T(" -> ")
-            << wxGetTranslation(v.c_str()) << _T("\n");
+        s << wxT("\n") << v << wxT(" -> ")
+            << wxGetTranslation(v.c_str()) << wxT("\n");
         wxMessageBox(s);
     }
 }
@@ -399,18 +399,18 @@ void MyFrame::OnTest2(wxCommandEvent& WX
     const wxChar* title = _("Testing _N() (ngettext)");
     wxTextEntryDialog d(this,
         _("Please enter range for plural forms of \"n files deleted\" phrase"),
-        title, _T("0-10"));
+        title, wxT("0-10"));
     if (d.ShowModal() == wxID_OK)
     {
         int first, last;
-        wxSscanf(d.GetValue(), _T("%d-%d"), &first, &last);
+        wxSscanf(d.GetValue(), wxT("%d-%d"), &first, &last);
         wxString s(title);
-        s << _T("\n");
+        s << wxT("\n");
         for (int n = first; n <= last; ++n)
         {
-            s << n << _T(" ") <<
+            s << n << wxT(" ") <<
                 wxPLURAL("file deleted", "files deleted", n) <<
-                _T("\n");
+                wxT("\n");
         }
         wxMessageBox(s);
     }
@@ -425,10 +425,10 @@ void MyFrame::OnTest3(wxCommandEvent& WX
         wxTRANSLATE("line 3"),
     };
     wxString s(_("Testing wxTRANSLATE() (gettext_noop)"));
-    s << _T("\n");
+    s << wxT("\n");
     for (size_t i = 0; i < WXSIZEOF(lines); ++i)
     {
-        s << lines[i] << _T(" -> ") << wxGetTranslation(lines[i]) << _T("\n");
+        s << lines[i] << wxT(" -> ") << wxGetTranslation(lines[i]) << wxT("\n");
     }
     wxMessageBox(s);
 }
--- samples/taskbar/tbtest.cpp-orig	2009-06-18 18:20:47.421391000 -0500
+++ samples/taskbar/tbtest.cpp	2009-06-18 18:20:56.209299000 -0500
@@ -85,14 +85,14 @@ void MyDialog::OnCloseWindow(wxCloseEven
 
 void MyDialog::Init(void)
 {
-  (void)new wxStaticText(this, wxID_ANY, _T("Press 'Hide me' to hide me, Exit to quit."),
+  (void)new wxStaticText(this, wxID_ANY, wxT("Press 'Hide me' to hide me, Exit to quit."),
                          wxPoint(10, 20));
 
-  (void)new wxStaticText(this, wxID_ANY, _T("Double-click on the taskbar icon to show me again."),
+  (void)new wxStaticText(this, wxID_ANY, wxT("Double-click on the taskbar icon to show me again."),
                          wxPoint(10, 40));
 
-  (void)new wxButton(this, wxID_EXIT, _T("Exit"), wxPoint(185, 230), wxSize(80, 25));
-  (new wxButton(this, wxID_OK, _T("Hide me"), wxPoint(100, 230), wxSize(80, 25)))->SetDefault();
+  (void)new wxButton(this, wxID_EXIT, wxT("Exit"), wxPoint(185, 230), wxSize(80, 25));
+  (new wxButton(this, wxID_OK, wxT("Hide me"), wxPoint(100, 230), wxSize(80, 25)))->SetDefault();
   Centre(wxBOTH);
    
   m_taskBarIcon = new MyTaskBarIcon();
@@ -181,21 +181,21 @@ wxMenu *MyTaskBarIcon::CreatePopupMenu()
     // Try creating menus different ways
     // TODO: Probably try calling SetBitmap with some XPMs here
     wxMenu *menu = new wxMenu;
-    menu->Append(PU_RESTORE, _T("&Restore TBTest"));
+    menu->Append(PU_RESTORE, wxT("&Restore TBTest"));
     menu->AppendSeparator();
-    menu->Append(PU_OLD_ICON, _T("&Restore Old Icon"));    
-    menu->Append(PU_NEW_ICON, _T("&Set New Icon"));
+    menu->Append(PU_OLD_ICON, wxT("&Restore Old Icon"));    
+    menu->Append(PU_NEW_ICON, wxT("&Set New Icon"));
     menu->AppendSeparator();
-    menu->Append(PU_CHECKMARK, _T("Checkmark"),wxT(""), wxITEM_CHECK);
+    menu->Append(PU_CHECKMARK, wxT("Checkmark"),wxT(""), wxITEM_CHECK);
     menu->AppendSeparator();
     wxMenu *submenu = new wxMenu;
-    submenu->Append(PU_SUB1, _T("One submenu"));
+    submenu->Append(PU_SUB1, wxT("One submenu"));
     submenu->AppendSeparator();
-    submenu->Append(PU_SUB2, _T("Another submenu"));
-    menu->Append(PU_SUBMAIN, _T("Submenu"), submenu);
+    submenu->Append(PU_SUB2, wxT("Another submenu"));
+    menu->Append(PU_SUBMAIN, wxT("Submenu"), submenu);
 #ifndef __WXMAC_OSX__ /*Mac has built-in quit menu*/
     menu->AppendSeparator();
-    menu->Append(PU_EXIT,    _T("E&xit"));
+    menu->Append(PU_EXIT,    wxT("E&xit"));
 #endif
     return menu;
 }
--- samples/dynamic/dynamic.cpp-orig	2009-06-18 18:20:29.925429000 -0500
+++ samples/dynamic/dynamic.cpp	2009-06-18 18:20:37.782619000 -0500
@@ -67,13 +67,13 @@ IMPLEMENT_APP  (MyApp)
 bool MyApp::OnInit(void)
 {
     // Create the main frame window
-    MyFrame *frame = new MyFrame(NULL, _T("Dynamic wxWidgets App"), 50, 50, 450, 340);
+    MyFrame *frame = new MyFrame(NULL, wxT("Dynamic wxWidgets App"), 50, 50, 450, 340);
 
     // Show the frame
     frame->Show(true);
 
     // Create the main frame window
-    MySecondFrame *frame2 = new MySecondFrame(NULL, _T("Dynamic wxWidgets App"), 150, 150, 450, 340);
+    MySecondFrame *frame2 = new MySecondFrame(NULL, wxT("Dynamic wxWidgets App"), 150, 150, 450, 340);
 
     // Show the frame
     frame2->Show(true);
@@ -102,7 +102,7 @@ MyFrame::MyFrame(wxFrame *frame, wxChar 
 {
     // Give it an icon
 #ifdef __WXMSW__
-    SetIcon(wxIcon(_T("mondrian")));
+    SetIcon(wxIcon(wxT("mondrian")));
 #else
     SetIcon(wxIcon(mondrian_xpm));
 #endif
@@ -110,17 +110,17 @@ MyFrame::MyFrame(wxFrame *frame, wxChar 
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(DYNAMIC_ABOUT, _T("&About"));
-    file_menu->Append(DYNAMIC_TEST, _T("&Test"));
-    file_menu->Append(DYNAMIC_QUIT, _T("E&xit"));
+    file_menu->Append(DYNAMIC_ABOUT, wxT("&About"));
+    file_menu->Append(DYNAMIC_TEST, wxT("&Test"));
+    file_menu->Append(DYNAMIC_QUIT, wxT("E&xit"));
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
     SetMenuBar(menu_bar);
 
     // Make a panel with a message
     wxPanel *panel = new wxPanel(this, wxID_ANY, wxPoint(0, 0), wxSize(400, 200), wxTAB_TRAVERSAL);
 
-    (void)new wxStaticText(panel, 311, _T("Hello!"), wxPoint(10, 10), wxDefaultSize, 0);
+    (void)new wxStaticText(panel, 311, wxT("Hello!"), wxPoint(10, 10), wxDefaultSize, 0);
 
     // You used to have to do some casting for param 4, but now there are type-safe handlers
     Connect( DYNAMIC_QUIT,  wxID_ANY,
@@ -146,8 +146,8 @@ void MyFrame::OnTest(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageDialog dialog(this, _T("This demonstrates dynamic event handling"),
-        _T("About Dynamic"), wxYES_NO|wxCANCEL);
+    wxMessageDialog dialog(this, wxT("This demonstrates dynamic event handling"),
+        wxT("About Dynamic"), wxYES_NO|wxCANCEL);
 
     dialog.ShowModal();
 }
--- samples/docvwmdi/doc.cpp-orig	2009-06-18 18:19:44.323632000 -0500
+++ samples/docvwmdi/doc.cpp	2009-06-18 18:19:51.216129000 -0500
@@ -46,14 +46,14 @@ wxSTD ostream& DrawingDocument::SaveObje
   wxDocument::SaveObject(stream);
 
   wxInt32 n = doodleSegments.GetCount();
-  stream << n << _T('\n');
+  stream << n << wxT('\n');
 
   wxList::compatibility_iterator node = doodleSegments.GetFirst();
   while (node)
   {
     DoodleSegment *segment = (DoodleSegment *)node->GetData();
     segment->SaveObject(stream);
-    stream << _T('\n');
+    stream << wxT('\n');
 
     node = node->GetNext();
   }
@@ -68,14 +68,14 @@ wxOutputStream& DrawingDocument::SaveObj
   wxTextOutputStream text_stream( stream );
 
   wxInt32 n = doodleSegments.GetCount();
-  text_stream << n << _T('\n');
+  text_stream << n << wxT('\n');
 
   wxList::compatibility_iterator node = doodleSegments.GetFirst();
   while (node)
   {
     DoodleSegment *segment = (DoodleSegment *)node->GetData();
     segment->SaveObject(stream);
-    text_stream << _T('\n');
+    text_stream << wxT('\n');
 
     node = node->GetNext();
   }
@@ -150,16 +150,16 @@ DoodleSegment::~DoodleSegment(void)
 wxSTD ostream& DoodleSegment::SaveObject(wxSTD ostream& stream)
 {
   wxInt32 n = lines.GetCount();
-  stream << n << _T('\n');
+  stream << n << wxT('\n');
 
   wxList::compatibility_iterator node = lines.GetFirst();
   while (node)
   {
     DoodleLine *line = (DoodleLine *)node->GetData();
-    stream << line->x1 << _T(" ") <<
-                   line->y1 << _T(" ") <<
-           line->x2 << _T(" ") <<
-           line->y2 << _T("\n");
+    stream << line->x1 << wxT(" ") <<
+                   line->y1 << wxT(" ") <<
+           line->x2 << wxT(" ") <<
+           line->y2 << wxT("\n");
     node = node->GetNext();
   }
 
@@ -171,16 +171,16 @@ wxOutputStream &DoodleSegment::SaveObjec
   wxTextOutputStream text_stream( stream );
 
   wxInt32 n = lines.GetCount();
-  text_stream << n << _T('\n');
+  text_stream << n << wxT('\n');
 
   wxList::compatibility_iterator node = lines.GetFirst();
   while (node)
   {
     DoodleLine *line = (DoodleLine *)node->GetData();
-    text_stream << line->x1 << _T(" ") <<
-                   line->y1 << _T(" ") <<
-           line->x2 << _T(" ") <<
-           line->y2 << _T("\n");
+    text_stream << line->x1 << wxT(" ") <<
+                   line->y1 << wxT(" ") <<
+           line->x2 << wxT(" ") <<
+           line->y2 << wxT("\n");
     node = node->GetNext();
   }
 
--- samples/docvwmdi/docview.cpp-orig	2009-06-18 18:20:00.900780000 -0500
+++ samples/docvwmdi/docview.cpp	2009-06-18 18:20:06.763422000 -0500
@@ -52,48 +52,48 @@ bool MyApp::OnInit(void)
   m_docManager = new wxDocManager;
 
   //// Create a template relating drawing documents to their views
-  (void) new wxDocTemplate((wxDocManager *) m_docManager, _T("Drawing"), _T("*.drw"), _T(""), _T("drw"), _T("Drawing Doc"), _T("Drawing View"),
+  (void) new wxDocTemplate((wxDocManager *) m_docManager, wxT("Drawing"), wxT("*.drw"), wxT(""), wxT("drw"), wxT("Drawing Doc"), wxT("Drawing View"),
           CLASSINFO(DrawingDocument), CLASSINFO(DrawingView));
 
   //// Create a template relating text documents to their views
-  (void) new wxDocTemplate(m_docManager, _T("Text"), _T("*.txt"), _T(""), _T("txt"), _T("Text Doc"), _T("Text View"),
+  (void) new wxDocTemplate(m_docManager, wxT("Text"), wxT("*.txt"), wxT(""), wxT("txt"), wxT("Text Doc"), wxT("Text View"),
           CLASSINFO(TextEditDocument), CLASSINFO(TextEditView));
 
   //// Create the main frame window
   frame = new MyFrame((wxDocManager *) m_docManager, (wxFrame *) NULL,
-                      _T("DocView Demo"), wxPoint(0, 0), wxSize(500, 400),
+                      wxT("DocView Demo"), wxPoint(0, 0), wxSize(500, 400),
                       wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE);
 
   //// Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
-  frame->SetIcon(wxIcon(_T("doc")));
+  frame->SetIcon(wxIcon(wxT("doc")));
 #endif
 #ifdef __X__
-  frame->SetIcon(wxIcon(_T("doc.xbm")));
+  frame->SetIcon(wxIcon(wxT("doc.xbm")));
 #endif
 
   //// Make a menubar
   wxMenu *file_menu = new wxMenu;
   wxMenu *edit_menu = (wxMenu *) NULL;
 
-  file_menu->Append(wxID_NEW, _T("&New...\tCtrl-N"));
-  file_menu->Append(wxID_OPEN, _T("&Open...\tCtrl-X"));
+  file_menu->Append(wxID_NEW, wxT("&New...\tCtrl-N"));
+  file_menu->Append(wxID_OPEN, wxT("&Open...\tCtrl-X"));
 
   file_menu->AppendSeparator();
-  file_menu->Append(wxID_EXIT, _T("E&xit\tAlt-X"));
+  file_menu->Append(wxID_EXIT, wxT("E&xit\tAlt-X"));
   
   // A nice touch: a history of files visited. Use this menu.
   m_docManager->FileHistoryUseMenu(file_menu);
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(DOCVIEW_ABOUT, _T("&About\tF1"));
+  help_menu->Append(DOCVIEW_ABOUT, wxT("&About\tF1"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
+  menu_bar->Append(file_menu, wxT("&File"));
   if (edit_menu)
-    menu_bar->Append(edit_menu, _T("&Edit"));
-  menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(edit_menu, wxT("&Edit"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
 #ifdef __WXMAC__
   wxMenuBar::MacSetCommonMenuBar(menu_bar);
@@ -125,60 +125,60 @@ wxMDIChildFrame *MyApp::CreateChildFrame
 {
   //// Make a child frame
   wxDocMDIChildFrame *subframe =
-      new wxDocMDIChildFrame(doc, view, GetMainFrame(), wxID_ANY, _T("Child Frame"),
+      new wxDocMDIChildFrame(doc, view, GetMainFrame(), wxID_ANY, wxT("Child Frame"),
                              wxPoint(10, 10), wxSize(300, 300),
                              wxDEFAULT_FRAME_STYLE |
                              wxNO_FULL_REPAINT_ON_RESIZE);
 
 #ifdef __WXMSW__
-  subframe->SetIcon(wxString(isCanvas ? _T("chart") : _T("notepad")));
+  subframe->SetIcon(wxString(isCanvas ? wxT("chart") : wxT("notepad")));
 #endif
 #ifdef __X__
-  subframe->SetIcon(wxIcon(_T("doc.xbm")));
+  subframe->SetIcon(wxIcon(wxT("doc.xbm")));
 #endif
 
   //// Make a menubar
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(wxID_NEW, _T("&New..."));
-  file_menu->Append(wxID_OPEN, _T("&Open..."));
-  file_menu->Append(wxID_CLOSE, _T("&Close"));
-  file_menu->Append(wxID_SAVE, _T("&Save"));
-  file_menu->Append(wxID_SAVEAS, _T("Save &As..."));
+  file_menu->Append(wxID_NEW, wxT("&New..."));
+  file_menu->Append(wxID_OPEN, wxT("&Open..."));
+  file_menu->Append(wxID_CLOSE, wxT("&Close"));
+  file_menu->Append(wxID_SAVE, wxT("&Save"));
+  file_menu->Append(wxID_SAVEAS, wxT("Save &As..."));
 
   if (isCanvas)
   {
     file_menu->AppendSeparator();
-    file_menu->Append(wxID_PRINT, _T("&Print..."));
-    file_menu->Append(wxID_PRINT_SETUP, _T("Print &Setup..."));
-    file_menu->Append(wxID_PREVIEW, _T("Print Pre&view"));
+    file_menu->Append(wxID_PRINT, wxT("&Print..."));
+    file_menu->Append(wxID_PRINT_SETUP, wxT("Print &Setup..."));
+    file_menu->Append(wxID_PREVIEW, wxT("Print Pre&view"));
   }
 
   file_menu->AppendSeparator();
-  file_menu->Append(wxID_EXIT, _T("E&xit"));
+  file_menu->Append(wxID_EXIT, wxT("E&xit"));
 
   wxMenu *edit_menu = (wxMenu *) NULL;
 
   if (isCanvas)
   {
     edit_menu = new wxMenu;
-    edit_menu->Append(wxID_UNDO, _T("&Undo"));
-    edit_menu->Append(wxID_REDO, _T("&Redo"));
+    edit_menu->Append(wxID_UNDO, wxT("&Undo"));
+    edit_menu->Append(wxID_REDO, wxT("&Redo"));
     edit_menu->AppendSeparator();
-    edit_menu->Append(DOCVIEW_CUT, _T("&Cut last segment"));
+    edit_menu->Append(DOCVIEW_CUT, wxT("&Cut last segment"));
 
     doc->GetCommandProcessor()->SetEditMenu(edit_menu);
   }
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(DOCVIEW_ABOUT, _T("&About"));
+  help_menu->Append(DOCVIEW_ABOUT, wxT("&About"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
+  menu_bar->Append(file_menu, wxT("&File"));
   if (isCanvas)
-    menu_bar->Append(edit_menu, _T("&Edit"));
-  menu_bar->Append(help_menu, _T("&Help"));
+    menu_bar->Append(edit_menu, wxT("&Edit"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   //// Associate the menu bar with the frame
   subframe->SetMenuBar(menu_bar);
@@ -197,14 +197,14 @@ END_EVENT_TABLE()
 
 MyFrame::MyFrame(wxDocManager *manager, wxFrame *frame, const wxString& title,
     const wxPoint& pos, const wxSize& size, long type):
-  wxDocMDIParentFrame(manager, frame, wxID_ANY, title, pos, size, type, _T("myFrame"))
+  wxDocMDIParentFrame(manager, frame, wxID_ANY, title, pos, size, type, wxT("myFrame"))
 {
   editMenu = (wxMenu *) NULL;
 }
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    (void)wxMessageBox(_T("DocView Demo\nAuthor: Julian Smart\nUsage: docview.exe"), _T("About DocView"));
+    (void)wxMessageBox(wxT("DocView Demo\nAuthor: Julian Smart\nUsage: docview.exe"), wxT("About DocView"));
 }
 
 // Creates a canvas. Called from view.cpp when a new drawing
--- samples/docvwmdi/view.cpp-orig	2009-06-18 18:20:14.523497000 -0500
+++ samples/docvwmdi/view.cpp	2009-06-18 18:20:20.226684000 -0500
@@ -43,7 +43,7 @@ END_EVENT_TABLE()
 bool DrawingView::OnCreate(wxDocument *doc, long WXUNUSED(flags) )
 {
     frame = wxGetApp().CreateChildFrame(doc, this, true);
-    frame->SetTitle(_T("DrawingView"));
+    frame->SetTitle(wxT("DrawingView"));
 
     canvas = GetMainFrame()->CreateCanvas(this, frame);
 #ifdef __X__
@@ -125,7 +125,7 @@ bool DrawingView::OnClose(bool deleteWin
 void DrawingView::OnCut(wxCommandEvent& WXUNUSED(event) )
 {
     DrawingDocument *doc = (DrawingDocument *)GetDocument();
-    doc->GetCommandProcessor()->Submit(new DrawingCommand(_T("Cut Last Segment"), DOODLE_CUT, doc, (DoodleSegment *) NULL));
+    doc->GetCommandProcessor()->Submit(new DrawingCommand(wxT("Cut Last Segment"), DOODLE_CUT, doc, (DoodleSegment *) NULL));
 }
 
 IMPLEMENT_DYNAMIC_CLASS(TextEditView, wxView)
@@ -137,7 +137,7 @@ bool TextEditView::OnCreate(wxDocument *
   int width, height;
   frame->GetClientSize(&width, &height);
   textsw = new MyTextWindow(this, frame, wxPoint(0, 0), wxSize(width, height), wxTE_MULTILINE);
-  frame->SetTitle(_T("TextEditView"));
+  frame->SetTitle(wxT("TextEditView"));
 
 #ifdef __X__
   // X seems to require a forced resize
@@ -226,7 +226,7 @@ void MyCanvas::OnMouseEvent(wxMouseEvent
       // We've got a valid segment on mouse left up, so store it.
       DrawingDocument *doc = (DrawingDocument *)view->GetDocument();
 
-      doc->GetCommandProcessor()->Submit(new DrawingCommand(_T("Add Segment"), DOODLE_ADD, doc, currentSegment));
+      doc->GetCommandProcessor()->Submit(new DrawingCommand(wxT("Add Segment"), DOODLE_ADD, doc, currentSegment));
 
       view->GetDocument()->Modify(true);
       currentSegment = (DoodleSegment *) NULL;
@@ -253,7 +253,7 @@ void MyCanvas::OnMouseEvent(wxMouseEvent
 
 // Define a constructor for my text subwindow
 MyTextWindow::MyTextWindow(wxView *v, wxMDIChildFrame *frame, const wxPoint& pos, const wxSize& size, long style):
- wxTextCtrl(frame, wxID_ANY, _T(""), pos, size, style)
+ wxTextCtrl(frame, wxID_ANY, wxT(""), pos, size, style)
 {
   view = v;
 }
--- samples/dataview/dataview.cpp-orig	2009-06-18 18:19:30.645665000 -0500
+++ samples/dataview/dataview.cpp	2009-06-18 18:19:36.266286000 -0500
@@ -387,10 +387,10 @@ MyFrame::MyFrame(wxFrame *frame, wxChar 
 
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(DYNAMIC_ABOUT, _T("&About"));
-    file_menu->Append(DYNAMIC_QUIT, _T("E&xit"));
+    file_menu->Append(DYNAMIC_ABOUT, wxT("&About"));
+    file_menu->Append(DYNAMIC_QUIT, wxT("E&xit"));
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
     SetMenuBar(menu_bar);
 
     // You used to have to do some casting for param 4, but now there are type-safe handlers
@@ -458,8 +458,8 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageDialog dialog(this, _T("This demonstrates the dataview control handling"),
-        _T("About DataView"), wxOK);
+    wxMessageDialog dialog(this, wxT("This demonstrates the dataview control handling"),
+        wxT("About DataView"), wxOK);
 
     dialog.ShowModal();
 }
@@ -491,10 +491,10 @@ MySortingFrame::MySortingFrame(wxFrame *
 
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(DYNAMIC_ABOUT, _T("&About"));
-    file_menu->Append(DYNAMIC_QUIT, _T("E&xit"));
+    file_menu->Append(DYNAMIC_ABOUT, wxT("&About"));
+    file_menu->Append(DYNAMIC_QUIT, wxT("E&xit"));
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
     SetMenuBar(menu_bar);
 
     // You used to have to do some casting for param 4, but now there are type-safe handlers
@@ -632,8 +632,8 @@ void MySortingFrame::OnQuit(wxCommandEve
 
 void MySortingFrame::OnAbout(wxCommandEvent& WXUNUSED(event) )
 {
-    wxMessageDialog dialog(this, _T("This demonstrates the dataview control sorting"),
-        _T("About DataView"), wxOK);
+    wxMessageDialog dialog(this, wxT("This demonstrates the dataview control sorting"),
+        wxT("About DataView"), wxOK);
 
     dialog.ShowModal();
 }
--- samples/scrollsub/scrollsub.cpp-orig	2009-06-18 18:19:11.450074000 -0500
+++ samples/scrollsub/scrollsub.cpp	2009-06-18 18:19:19.648888000 -0500
@@ -147,7 +147,7 @@ END_EVENT_TABLE()
 
 MyScrolledWindow::MyScrolledWindow( wxWindow *parent, wxWindowID id,
                     const wxPoint &pos, const wxSize &size )
-        : wxScrolledWindow( parent, id, pos, size, wxSUNKEN_BORDER, _T("test canvas") )
+        : wxScrolledWindow( parent, id, pos, size, wxSUNKEN_BORDER, wxT("test canvas") )
 {
     MyTopLabels *top = new MyTopLabels( this, wxID_ANY, wxDefaultPosition, wxSize(wxDefaultCoord,25) );
     MyRightLabels *right = new MyRightLabels( this, wxID_ANY, wxDefaultPosition, wxSize(60,wxDefaultCoord) );
@@ -235,9 +235,9 @@ void MyTopLabels::OnPaint( wxPaintEvent&
     m_owner->GetScrollPixelsPerUnit( &xScrollUnits, 0 );
     dc.SetDeviceOrigin( -xOrigin * xScrollUnits, 0 );
 
-    dc.DrawText( _T("Column 1"), 5, 5 );
-    dc.DrawText( _T("Column 2"), 105, 5 );
-    dc.DrawText( _T("Column 3"), 205, 5 );
+    dc.DrawText( wxT("Column 1"), 5, 5 );
+    dc.DrawText( wxT("Column 2"), 105, 5 );
+    dc.DrawText( wxT("Column 3"), 205, 5 );
 }
 
 // MyRightLabels
@@ -269,12 +269,12 @@ void MyRightLabels::OnPaint( wxPaintEven
     m_owner->GetScrollPixelsPerUnit( 0, &yScrollUnits );
     dc.SetDeviceOrigin( 0, -yOrigin * yScrollUnits );
 
-    dc.DrawText( _T("Row 1"), 5, 5 );
-    dc.DrawText( _T("Row 2"), 5, 30 );
-    dc.DrawText( _T("Row 3"), 5, 55 );
-    dc.DrawText( _T("Row 4"), 5, 80 );
-    dc.DrawText( _T("Row 5"), 5, 105 );
-    dc.DrawText( _T("Row 6"), 5, 130 );
+    dc.DrawText( wxT("Row 1"), 5, 5 );
+    dc.DrawText( wxT("Row 2"), 5, 30 );
+    dc.DrawText( wxT("Row 3"), 5, 55 );
+    dc.DrawText( wxT("Row 4"), 5, 80 );
+    dc.DrawText( wxT("Row 5"), 5, 105 );
+    dc.DrawText( wxT("Row 6"), 5, 130 );
 }
 
 // MyCanvas
@@ -287,22 +287,22 @@ END_EVENT_TABLE()
 
 MyCanvas::MyCanvas( wxScrolledWindow *parent, MyTopLabels *top, MyRightLabels *right,
     wxWindowID id, const wxPoint &pos, const wxSize &size )
-        : wxPanel( parent, id, pos, size, wxSUNKEN_BORDER, _T("test canvas") )
+        : wxPanel( parent, id, pos, size, wxSUNKEN_BORDER, wxT("test canvas") )
 {
     m_owner = parent;
     m_topLabels = top;
     m_rightLabels = right;
 
-    (void)new wxButton( this, wxID_ANY, _T("Hallo I"), wxPoint(0,50), wxSize(100,25) );
-    (void)new wxButton( this, wxID_ANY, _T("Hallo II"), wxPoint(200,50), wxSize(100,25) );
+    (void)new wxButton( this, wxID_ANY, wxT("Hallo I"), wxPoint(0,50), wxSize(100,25) );
+    (void)new wxButton( this, wxID_ANY, wxT("Hallo II"), wxPoint(200,50), wxSize(100,25) );
 
-    (void)new wxTextCtrl( this, wxID_ANY, _T("Text I"), wxPoint(0,100), wxSize(100,25) );
-    (void)new wxTextCtrl( this, wxID_ANY, _T("Text II"), wxPoint(200,100), wxSize(100,25) );
+    (void)new wxTextCtrl( this, wxID_ANY, wxT("Text I"), wxPoint(0,100), wxSize(100,25) );
+    (void)new wxTextCtrl( this, wxID_ANY, wxT("Text II"), wxPoint(200,100), wxSize(100,25) );
 
-    (void)new wxComboBox( this, wxID_ANY, _T("ComboBox I"), wxPoint(0,150), wxSize(100,25));
-    (void)new wxComboBox( this, wxID_ANY, _T("ComboBox II"), wxPoint(200,150), wxSize(100,25));
+    (void)new wxComboBox( this, wxID_ANY, wxT("ComboBox I"), wxPoint(0,150), wxSize(100,25));
+    (void)new wxComboBox( this, wxID_ANY, wxT("ComboBox II"), wxPoint(200,150), wxSize(100,25));
 
-    (void)new wxStaticBox( this, wxID_ANY, _T("StaticBox"), wxPoint(0,200), wxSize(200,60));
+    (void)new wxStaticBox( this, wxID_ANY, wxT("StaticBox"), wxPoint(0,200), wxSize(200,60));
 
     SetBackgroundColour( wxT("WHEAT") );
 
@@ -346,7 +346,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
         {
             wxLogMessage( wxT("Redraw first cell") );
             dc.DrawRectangle( 0, 0, 100, 25 );
-            dc.DrawText( _T("First Cell"), 5, 5 );
+            dc.DrawText( wxT("First Cell"), 5, 5 );
         }
     }
 
@@ -361,7 +361,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
         {
             wxLogMessage( wxT("Redraw second cell") );
             dc.DrawRectangle( 200, 0, 100, 25 );
-            dc.DrawText( _T("Second Cell"), 205, 5 );
+            dc.DrawText( wxT("Second Cell"), 205, 5 );
         }
     }
 
@@ -389,16 +389,16 @@ BEGIN_EVENT_TABLE(MyFrame,wxFrame)
 END_EVENT_TABLE()
 
 MyFrame::MyFrame()
-       : wxFrame( (wxFrame *)NULL, wxID_ANY, _T("wxScrolledWindow sample"),
+       : wxFrame( (wxFrame *)NULL, wxID_ANY, wxT("wxScrolledWindow sample"),
                   wxPoint(20,20), wxSize(470,500) )
 {
     wxMenu *file_menu = new wxMenu();
-    file_menu->Append( ID_ABOUT, _T("&About..."));
-    file_menu->Append( ID_FULL, _T("&Full screen on/off"));
-    file_menu->Append( ID_QUIT, _T("E&xit\tAlt-X"));
+    file_menu->Append( ID_ABOUT, wxT("&About..."));
+    file_menu->Append( ID_FULL, wxT("&Full screen on/off"));
+    file_menu->Append( ID_QUIT, wxT("E&xit\tAlt-X"));
 
     wxMenuBar *menu_bar = new wxMenuBar();
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
     SetMenuBar( menu_bar );
 
@@ -412,7 +412,7 @@ MyFrame::MyFrame()
     m_scrolled->SetScrollbars( 10, 10, 50, 50 );
 
 #if wxUSE_LOG
-    m_log = new wxTextCtrl( this, wxID_ANY, _T("This is the log window.\n"), wxPoint(0,0), wxSize(100,100), wxTE_MULTILINE );
+    m_log = new wxTextCtrl( this, wxID_ANY, wxT("This is the log window.\n"), wxPoint(0,0), wxSize(100,100), wxTE_MULTILINE );
     wxLog *old_log = wxLog::SetActiveTarget( new wxLogTextCtrl( m_log ) );
     delete old_log;
 #endif // wxUSE_LOG
@@ -439,9 +439,9 @@ void MyFrame::OnFullScreen( wxCommandEve
 
 void MyFrame::OnAbout( wxCommandEvent &WXUNUSED(event) )
 {
-  (void)wxMessageBox( _T("wxScroll demo II\n")
-                      _T("Robert Roebling (c) 1998"),
-                      _T("About wxScroll II Demo"), wxICON_INFORMATION | wxOK );
+  (void)wxMessageBox( wxT("wxScroll demo II\n")
+                      wxT("Robert Roebling (c) 1998"),
+                      wxT("About wxScroll II Demo"), wxICON_INFORMATION | wxOK );
 }
 
 //-----------------------------------------------------------------------------
--- samples/controls/controls.cpp-orig	2009-06-18 18:18:49.021344000 -0500
+++ samples/controls/controls.cpp	2009-06-18 18:18:57.274353000 -0500
@@ -239,7 +239,7 @@ public:
 
     void OnDClick(wxMouseEvent& event)
     {
-        wxLogMessage(_T("MyButton::OnDClick"));
+        wxLogMessage(wxT("MyButton::OnDClick"));
 
         event.Skip();
     }
@@ -269,7 +269,7 @@ protected:
     void OnKeyUp(wxKeyEvent& event);
     void OnFocusGot(wxFocusEvent& event)
     {
-        wxLogMessage(_T("MyComboBox::OnFocusGot"));
+        wxLogMessage(wxT("MyComboBox::OnFocusGot"));
 
         event.Skip();
     }
@@ -300,14 +300,14 @@ public:
 protected:
     void OnFocusGot(wxFocusEvent& event)
     {
-        wxLogMessage(_T("MyRadioBox::OnFocusGot"));
+        wxLogMessage(wxT("MyRadioBox::OnFocusGot"));
 
         event.Skip();
     }
 
     void OnFocusLost(wxFocusEvent& event)
     {
-        wxLogMessage(_T("MyRadioBox::OnFocusLost"));
+        wxLogMessage(wxT("MyRadioBox::OnFocusLost"));
 
         event.Skip();
     }
@@ -334,14 +334,14 @@ public:
 protected:
     void OnFocusGot(wxFocusEvent& event)
     {
-        wxLogMessage(_T("MyChoice::OnFocusGot"));
+        wxLogMessage(wxT("MyChoice::OnFocusGot"));
 
         event.Skip();
     }
 
     void OnFocusLost(wxFocusEvent& event)
     {
-        wxLogMessage(_T("MyChoice::OnFocusLost"));
+        wxLogMessage(wxT("MyChoice::OnFocusLost"));
 
         event.Skip();
     }
@@ -404,7 +404,7 @@ bool MyApp::OnInit()
 #endif // wxUSE_HELP
 
     // Create the main frame window
-    MyFrame *frame = new MyFrame(_T("Controls wxWidgets App"), x, y);
+    MyFrame *frame = new MyFrame(wxT("Controls wxWidgets App"), x, y);
     frame->Show(true);
 
     return true;
@@ -630,7 +630,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     m_book = NULL;
     m_label = NULL;
 
-    m_text = new wxTextCtrl(this, wxID_ANY, _T("This is the log window.\n"),
+    m_text = new wxTextCtrl(this, wxID_ANY, wxT("This is the log window.\n"),
                             wxPoint(0, 250), wxSize(100, 50), wxTE_MULTILINE);
 
     m_logTargetOld = wxLog::SetActiveTarget(new wxLogTextCtrl(m_text));
@@ -639,11 +639,11 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 
     wxString choices[] =
     {
-        _T("This"),
-        _T("is one of my"),
-        _T("really"),
-        _T("wonderful"),
-        _T("examples.")
+        wxT("This"),
+        wxT("is one of my"),
+        wxT("really"),
+        wxT("wonderful"),
+        wxT("examples.")
     };
 
 #ifdef USE_XPM
@@ -693,13 +693,13 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 
     static const wxChar *s_iconNames[Image_Max] =
     {
-        _T("list")
-        , _T("choice")
-        , _T("combo")
-        , _T("text")
-        , _T("radio")
+        wxT("list")
+        , wxT("choice")
+        , wxT("combo")
+        , wxT("text")
+        , wxT("radio")
 #if wxUSE_GAUGE
-        , _T("gauge")
+        , wxT("gauge")
 #endif // wxUSE_GAUGE
     };
 
@@ -742,32 +742,32 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 
     m_listbox->SetCursor(*wxCROSS_CURSOR);
 #if wxUSE_TOOLTIPS
-    m_listbox->SetToolTip( _T("This is a list box") );
+    m_listbox->SetToolTip( wxT("This is a list box") );
 #endif // wxUSE_TOOLTIPS
 
-    m_lbSelectNum = new wxButton( panel, ID_LISTBOX_SEL_NUM, _T("Select #&2"), wxPoint(180,30), wxSize(140,30) );
-    m_lbSelectThis = new wxButton( panel, ID_LISTBOX_SEL_STR, _T("&Select 'This'"), wxPoint(340,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_LISTBOX_CLEAR, _T("&Clear"), wxPoint(180,80), wxSize(140,30) );
-    (void)new MyButton( panel, ID_LISTBOX_APPEND, _T("&Append 'Hi!'"), wxPoint(340,80), wxSize(140,30) );
-    (void)new wxButton( panel, ID_LISTBOX_DELETE, _T("D&elete selected item"), wxPoint(180,130), wxSize(140,30) );
-    wxButton *button = new MyButton( panel, ID_LISTBOX_FONT, _T("Set &Italic font"), wxPoint(340,130), wxSize(140,30) );
+    m_lbSelectNum = new wxButton( panel, ID_LISTBOX_SEL_NUM, wxT("Select #&2"), wxPoint(180,30), wxSize(140,30) );
+    m_lbSelectThis = new wxButton( panel, ID_LISTBOX_SEL_STR, wxT("&Select 'This'"), wxPoint(340,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_LISTBOX_CLEAR, wxT("&Clear"), wxPoint(180,80), wxSize(140,30) );
+    (void)new MyButton( panel, ID_LISTBOX_APPEND, wxT("&Append 'Hi!'"), wxPoint(340,80), wxSize(140,30) );
+    (void)new wxButton( panel, ID_LISTBOX_DELETE, wxT("D&elete selected item"), wxPoint(180,130), wxSize(140,30) );
+    wxButton *button = new MyButton( panel, ID_LISTBOX_FONT, wxT("Set &Italic font"), wxPoint(340,130), wxSize(140,30) );
 
     button->SetDefault();
 
 #if wxUSE_TOOLTIPS
-    button->SetToolTip( _T("Press here to set italic font") );
+    button->SetToolTip( wxT("Press here to set italic font") );
 #endif // wxUSE_TOOLTIPS
 
-    m_checkbox = new wxCheckBox( panel, ID_LISTBOX_ENABLE, _T("&Disable"), wxPoint(20,170) );
+    m_checkbox = new wxCheckBox( panel, ID_LISTBOX_ENABLE, wxT("&Disable"), wxPoint(20,170) );
     m_checkbox->SetValue(false);
     button->MoveAfterInTabOrder(m_checkbox);
 #if wxUSE_TOOLTIPS
-    m_checkbox->SetToolTip( _T("Click here to disable the listbox") );
+    m_checkbox->SetToolTip( wxT("Click here to disable the listbox") );
 #endif // wxUSE_TOOLTIPS
-    (void)new wxCheckBox( panel, ID_CHANGE_COLOUR, _T("&Toggle colour"),
+    (void)new wxCheckBox( panel, ID_CHANGE_COLOUR, wxT("&Toggle colour"),
                           wxPoint(110,170) );
     panel->SetCursor(wxCursor(wxCURSOR_HAND));
-    m_book->AddPage(panel, _T("wxListBox"), true, Image_List);
+    m_book->AddPage(panel, wxT("wxListBox"), true, Image_List);
 
 #if wxUSE_CHOICE
     panel = new wxPanel(m_book);
@@ -779,81 +779,81 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     SetChoiceClientData(wxT("choice"), m_choiceSorted);
 
     m_choice->SetSelection(2);
-    (void)new wxButton( panel, ID_CHOICE_SEL_NUM, _T("Select #&2"), wxPoint(180,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_CHOICE_SEL_STR, _T("&Select 'This'"), wxPoint(340,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_CHOICE_CLEAR, _T("&Clear"), wxPoint(180,80), wxSize(140,30) );
-    (void)new wxButton( panel, ID_CHOICE_APPEND, _T("&Append 'Hi!'"), wxPoint(340,80), wxSize(140,30) );
-    (void)new wxButton( panel, ID_CHOICE_DELETE, _T("D&elete selected item"), wxPoint(180,130), wxSize(140,30) );
-    (void)new wxButton( panel, ID_CHOICE_FONT, _T("Set &Italic font"), wxPoint(340,130), wxSize(140,30) );
-    (void)new wxCheckBox( panel, ID_CHOICE_ENABLE, _T("&Disable"), wxPoint(20,130), wxSize(140,30) );
+    (void)new wxButton( panel, ID_CHOICE_SEL_NUM, wxT("Select #&2"), wxPoint(180,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_CHOICE_SEL_STR, wxT("&Select 'This'"), wxPoint(340,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_CHOICE_CLEAR, wxT("&Clear"), wxPoint(180,80), wxSize(140,30) );
+    (void)new wxButton( panel, ID_CHOICE_APPEND, wxT("&Append 'Hi!'"), wxPoint(340,80), wxSize(140,30) );
+    (void)new wxButton( panel, ID_CHOICE_DELETE, wxT("D&elete selected item"), wxPoint(180,130), wxSize(140,30) );
+    (void)new wxButton( panel, ID_CHOICE_FONT, wxT("Set &Italic font"), wxPoint(340,130), wxSize(140,30) );
+    (void)new wxCheckBox( panel, ID_CHOICE_ENABLE, wxT("&Disable"), wxPoint(20,130), wxSize(140,30) );
 
-    m_book->AddPage(panel, _T("wxChoice"), false, Image_Choice);
+    m_book->AddPage(panel, wxT("wxChoice"), false, Image_Choice);
 #endif // wxUSE_CHOICE
 
     panel = new wxPanel(m_book);
-    (void)new wxStaticBox( panel, wxID_ANY, _T("&Box around combobox"),
+    (void)new wxStaticBox( panel, wxID_ANY, wxT("&Box around combobox"),
                            wxPoint(5, 5), wxSize(150, 100));
-    m_combo = new MyComboBox( panel, ID_COMBO, _T("This"),
+    m_combo = new MyComboBox( panel, ID_COMBO, wxT("This"),
                               wxPoint(20,25), wxSize(120, wxDefaultCoord),
                               5, choices,
                               wxTE_PROCESS_ENTER);
 
-    (void)new wxButton( panel, ID_COMBO_SEL_NUM, _T("Select #&2"), wxPoint(180,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_COMBO_SEL_STR, _T("&Select 'This'"), wxPoint(340,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_COMBO_CLEAR, _T("&Clear"), wxPoint(180,80), wxSize(140,30) );
-    (void)new wxButton( panel, ID_COMBO_APPEND, _T("&Append 'Hi!'"), wxPoint(340,80), wxSize(140,30) );
-    (void)new wxButton( panel, ID_COMBO_DELETE, _T("D&elete selected item"), wxPoint(180,130), wxSize(140,30) );
-    (void)new wxButton( panel, ID_COMBO_FONT, _T("Set &Italic font"), wxPoint(340,130), wxSize(140,30) );
-    (void)new wxButton( panel, ID_COMBO_SET_TEXT, _T("Set 'Hi!' at #2"), wxPoint(340,180), wxSize(140,30) );
-    (void)new wxCheckBox( panel, ID_COMBO_ENABLE, _T("&Disable"), wxPoint(20,130), wxSize(140,30) );
-    m_book->AddPage(panel, _T("wxComboBox"), false, Image_Combo);
+    (void)new wxButton( panel, ID_COMBO_SEL_NUM, wxT("Select #&2"), wxPoint(180,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_COMBO_SEL_STR, wxT("&Select 'This'"), wxPoint(340,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_COMBO_CLEAR, wxT("&Clear"), wxPoint(180,80), wxSize(140,30) );
+    (void)new wxButton( panel, ID_COMBO_APPEND, wxT("&Append 'Hi!'"), wxPoint(340,80), wxSize(140,30) );
+    (void)new wxButton( panel, ID_COMBO_DELETE, wxT("D&elete selected item"), wxPoint(180,130), wxSize(140,30) );
+    (void)new wxButton( panel, ID_COMBO_FONT, wxT("Set &Italic font"), wxPoint(340,130), wxSize(140,30) );
+    (void)new wxButton( panel, ID_COMBO_SET_TEXT, wxT("Set 'Hi!' at #2"), wxPoint(340,180), wxSize(140,30) );
+    (void)new wxCheckBox( panel, ID_COMBO_ENABLE, wxT("&Disable"), wxPoint(20,130), wxSize(140,30) );
+    m_book->AddPage(panel, wxT("wxComboBox"), false, Image_Combo);
 
     wxString choices2[] =
     {
-        _T("First"), _T("Second"),
+        wxT("First"), wxT("Second"),
         /* "Third",
         "Fourth", "Fifth", "Sixth",
         "Seventh", "Eighth", "Nineth", "Tenth" */
     };
 
     panel = new wxPanel(m_book);
-    wxRadioBox *radio2 = new MyRadioBox( panel, ID_RADIOBOX, _T("&That"), wxPoint(10,160), wxDefaultSize, WXSIZEOF(choices2), choices2, 1, wxRA_SPECIFY_ROWS );
-    m_radio = new wxRadioBox( panel, ID_RADIOBOX, _T("T&his"), wxPoint(10,10), wxDefaultSize, WXSIZEOF(choices), choices, 1, wxRA_SPECIFY_COLS );
+    wxRadioBox *radio2 = new MyRadioBox( panel, ID_RADIOBOX, wxT("&That"), wxPoint(10,160), wxDefaultSize, WXSIZEOF(choices2), choices2, 1, wxRA_SPECIFY_ROWS );
+    m_radio = new wxRadioBox( panel, ID_RADIOBOX, wxT("T&his"), wxPoint(10,10), wxDefaultSize, WXSIZEOF(choices), choices, 1, wxRA_SPECIFY_COLS );
 
 #if wxUSE_TOOLTIPS
-    m_combo->SetToolTip(_T("This is a natural\ncombobox - can you believe me?"));
-    radio2->SetToolTip(_T("Ever seen a radiobox?"));
+    m_combo->SetToolTip(wxT("This is a natural\ncombobox - can you believe me?"));
+    radio2->SetToolTip(wxT("Ever seen a radiobox?"));
 
-    //m_radio->SetToolTip(_T("Tooltip for the entire radiobox"));
+    //m_radio->SetToolTip(wxT("Tooltip for the entire radiobox"));
     for ( unsigned int nb = 0; nb < WXSIZEOF(choices); nb++ )
     {
-        m_radio->SetItemToolTip(nb, _T("tooltip for\n") + choices[nb]);
+        m_radio->SetItemToolTip(nb, wxT("tooltip for\n") + choices[nb]);
     }
 
     // remove the tooltip for one of the items
-    m_radio->SetItemToolTip(2, _T(""));
+    m_radio->SetItemToolTip(2, wxT(""));
 #endif // wxUSE_TOOLTIPS
 
 #if wxUSE_HELP
     for( unsigned int item = 0; item < WXSIZEOF(choices); ++item )
-        m_radio->SetItemHelpText( item, wxString::Format( _T("Help text for \"%s\""), choices[item].c_str() ) );
+        m_radio->SetItemHelpText( item, wxString::Format( wxT("Help text for \"%s\""), choices[item].c_str() ) );
 
     // erase help text for the second item
-    m_radio->SetItemHelpText( 1, _T("") );
+    m_radio->SetItemHelpText( 1, wxT("") );
     // set default help text for control
-    m_radio->SetHelpText( _T("Default helptext for wxRadioBox") );
+    m_radio->SetHelpText( wxT("Default helptext for wxRadioBox") );
 #endif // wxUSE_HELP
 
-    (void)new wxButton( panel, ID_RADIOBOX_SEL_NUM, _T("Select #&2"), wxPoint(180,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_RADIOBOX_SEL_STR, _T("&Select 'This'"), wxPoint(180,80), wxSize(140,30) );
-    m_fontButton = new wxButton( panel, ID_SET_FONT, _T("Set &more Italic font"), wxPoint(340,30), wxSize(140,30) );
-    (void)new wxButton( panel, ID_RADIOBOX_FONT, _T("Set &Italic font"), wxPoint(340,80), wxSize(140,30) );
-    (void)new wxCheckBox( panel, ID_RADIOBOX_ENABLE, _T("&Disable"), wxPoint(340,130), wxDefaultSize );
+    (void)new wxButton( panel, ID_RADIOBOX_SEL_NUM, wxT("Select #&2"), wxPoint(180,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_RADIOBOX_SEL_STR, wxT("&Select 'This'"), wxPoint(180,80), wxSize(140,30) );
+    m_fontButton = new wxButton( panel, ID_SET_FONT, wxT("Set &more Italic font"), wxPoint(340,30), wxSize(140,30) );
+    (void)new wxButton( panel, ID_RADIOBOX_FONT, wxT("Set &Italic font"), wxPoint(340,80), wxSize(140,30) );
+    (void)new wxCheckBox( panel, ID_RADIOBOX_ENABLE, wxT("&Disable"), wxPoint(340,130), wxDefaultSize );
 
-    wxRadioButton *rb = new wxRadioButton( panel, ID_RADIOBUTTON_1, _T("Radiobutton1"), wxPoint(210,170), wxDefaultSize, wxRB_GROUP );
+    wxRadioButton *rb = new wxRadioButton( panel, ID_RADIOBUTTON_1, wxT("Radiobutton1"), wxPoint(210,170), wxDefaultSize, wxRB_GROUP );
     rb->SetValue( false );
-    (void)new wxRadioButton( panel, ID_RADIOBUTTON_2, _T("&Radiobutton2"), wxPoint(340,170), wxDefaultSize );
-    m_book->AddPage(panel, _T("wxRadioBox"), false, Image_Radio);
+    (void)new wxRadioButton( panel, ID_RADIOBUTTON_2, wxT("&Radiobutton2"), wxPoint(340,170), wxDefaultSize );
+    m_book->AddPage(panel, wxT("wxRadioBox"), false, Image_Radio);
 
 
 #if wxUSE_SLIDER && wxUSE_GAUGE
@@ -862,7 +862,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     wxBoxSizer *main_sizer = new wxBoxSizer( wxHORIZONTAL );
     panel->SetSizer( main_sizer );
 
-    wxStaticBoxSizer *gauge_sizer = new wxStaticBoxSizer( wxHORIZONTAL, panel, _T("&wxGauge and wxSlider") );
+    wxStaticBoxSizer *gauge_sizer = new wxStaticBoxSizer( wxHORIZONTAL, panel, wxT("&wxGauge and wxSlider") );
     main_sizer->Add( gauge_sizer, 0, wxALL, 5 );
     wxBoxSizer *sz = new wxBoxSizer( wxVERTICAL );
     gauge_sizer->Add( sz );
@@ -873,7 +873,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
                              wxSL_AUTOTICKS | wxSL_LABELS);
     m_slider->SetTickFreq(40, 0);
 #if wxUSE_TOOLTIPS
-    m_slider->SetToolTip(_T("This is a sliding slider"));
+    m_slider->SetToolTip(wxT("This is a sliding slider"));
 #endif // wxUSE_TOOLTIPS
     sz->Add( m_slider, 0, wxALL, 10 );
 
@@ -884,7 +884,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 
 
 
-    wxStaticBox *sb = new wxStaticBox( panel, wxID_ANY, _T("&Explanation"),
+    wxStaticBox *sb = new wxStaticBox( panel, wxID_ANY, wxT("&Explanation"),
                            wxDefaultPosition, wxDefaultSize ); //, wxALIGN_CENTER );
     wxStaticBoxSizer *wrapping_sizer = new wxStaticBoxSizer( sb, wxVERTICAL );
     main_sizer->Add( wrapping_sizer, 0, wxALL, 5 );
@@ -892,18 +892,18 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 #ifdef __WXMOTIF__
     // No wrapping text in wxStaticText yet :-(
     m_wrappingText = new wxStaticText( panel, wxID_ANY,
-                            _T("Drag the slider!"),
+                            wxT("Drag the slider!"),
                             wxPoint(250,30),
                             wxSize(240, wxDefaultCoord)
                           );
 #else
     m_wrappingText = new wxStaticText( panel, wxID_ANY,
-                            _T("In order see the gauge (aka progress bar) ")
-                            _T("control do something you have to drag the ")
-                            _T("handle of the slider to the right.")
-                            _T("\n\n")
-                            _T("This is also supposed to demonstrate how ")
-                            _T("to use static controls with line wrapping."),
+                            wxT("In order see the gauge (aka progress bar) ")
+                            wxT("control do something you have to drag the ")
+                            wxT("handle of the slider to the right.")
+                            wxT("\n\n")
+                            wxT("This is also supposed to demonstrate how ")
+                            wxT("to use static controls with line wrapping."),
                             wxDefaultPosition,
                             wxSize(240, wxDefaultCoord)
                           );
@@ -914,7 +914,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     main_sizer->Add( non_wrapping_sizer, 0, wxALL, 5 );
 
     m_nonWrappingText = new wxStaticText( panel, wxID_ANY,
-                            _T("This static text has two lines.\nThey do not wrap."),
+                            wxT("This static text has two lines.\nThey do not wrap."),
                             wxDefaultPosition,
                             wxDefaultSize
                           );
@@ -932,7 +932,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     m_spinbutton->SetValue(initialSpinValue);
 
 #if wxUSE_PROGRESSDLG
-    m_btnProgress = new wxButton( panel, ID_BTNPROGRESS, _T("&Show progress dialog"),
+    m_btnProgress = new wxButton( panel, ID_BTNPROGRESS, wxT("&Show progress dialog"),
                                   wxPoint(300, 160) );
 #endif // wxUSE_PROGRESSDLG
 #endif // wxUSE_SPINBTN
@@ -943,7 +943,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     m_spinctrl->SetValue(15);
 #endif // wxUSE_SPINCTRL
 
-    m_book->AddPage(panel, _T("wxGauge"), false, Image_Gauge);
+    m_book->AddPage(panel, wxT("wxGauge"), false, Image_Gauge);
 #endif // wxUSE_SLIDER && wxUSE_GAUGE
 
 
@@ -965,16 +965,16 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     dc.SetPen(*wxRED_PEN);
     dc.Clear();
     dc.DrawEllipse(5, 5, 90, 90);
-    dc.DrawText(_T("Bitmap"), 30, 40);
+    dc.DrawText(wxT("Bitmap"), 30, 40);
     dc.SelectObject( wxNullBitmap );
 
     (void)new wxBitmapButton(panel, ID_BITMAP_BTN, bitmap, wxPoint(100, 20));
     (void)new wxToggleButton(panel, ID_BITMAP_BTN_ENABLE,
-                             _T("Enable/disable &bitmap"), wxPoint(100, 140));
+                             wxT("Enable/disable &bitmap"), wxPoint(100, 140));
 
 #if defined(__WXMSW__) || defined(__WXMOTIF__)
     // test for masked bitmap display
-    bitmap = wxBitmap(_T("test2.bmp"), wxBITMAP_TYPE_BMP);
+    bitmap = wxBitmap(wxT("test2.bmp"), wxBITMAP_TYPE_BMP);
     if (bitmap.Ok())
     {
        bitmap.SetMask(new wxMask(bitmap, *wxBLUE));
@@ -997,14 +997,14 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     bmpBtn->SetBitmapFocus(bmp3);
 
     (void)new wxToggleButton(panel, ID_BUTTON_LABEL,
-                             _T("&Toggle label"), wxPoint(250, 20));
+                             wxT("&Toggle label"), wxPoint(250, 20));
 
-    m_label = new wxStaticText(panel, wxID_ANY, _T("Label with some long text"),
+    m_label = new wxStaticText(panel, wxID_ANY, wxT("Label with some long text"),
                                wxPoint(250, 60), wxDefaultSize,
                                wxALIGN_RIGHT /*| wxST_NO_AUTORESIZE*/);
     m_label->SetForegroundColour( *wxBLUE );
 
-    m_book->AddPage(panel, _T("wxBitmapXXX"));
+    m_book->AddPage(panel, wxT("wxBitmapXXX"));
 
     // sizer
     panel = new wxPanel(m_book);
@@ -1013,25 +1013,25 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     wxBoxSizer *sizer = new wxBoxSizer( wxVERTICAL );
 
     wxStaticBoxSizer *csizer =
-      new wxStaticBoxSizer (new wxStaticBox (panel, wxID_ANY, _T("Show Buttons")), wxHORIZONTAL );
+      new wxStaticBoxSizer (new wxStaticBox (panel, wxID_ANY, wxT("Show Buttons")), wxHORIZONTAL );
 
     wxCheckBox *check1, *check2, *check3, *check4, *check14, *checkBig;
-    check1 = new wxCheckBox (panel, ID_SIZER_CHECK1, _T("1"));
+    check1 = new wxCheckBox (panel, ID_SIZER_CHECK1, wxT("1"));
     check1->SetValue (true);
     csizer->Add (check1);
-    check2 = new wxCheckBox (panel, ID_SIZER_CHECK2, _T("2"));
+    check2 = new wxCheckBox (panel, ID_SIZER_CHECK2, wxT("2"));
     check2->SetValue (true);
     csizer->Add (check2);
-    check3 = new wxCheckBox (panel, ID_SIZER_CHECK3, _T("3"));
+    check3 = new wxCheckBox (panel, ID_SIZER_CHECK3, wxT("3"));
     check3->SetValue (true);
     csizer->Add (check3);
-    check4 = new wxCheckBox (panel, ID_SIZER_CHECK4, _T("4"));
+    check4 = new wxCheckBox (panel, ID_SIZER_CHECK4, wxT("4"));
     check4->SetValue (true);
     csizer->Add (check4);
-    check14 = new wxCheckBox (panel, ID_SIZER_CHECK14, _T("1-4"));
+    check14 = new wxCheckBox (panel, ID_SIZER_CHECK14, wxT("1-4"));
     check14->SetValue (true);
     csizer->Add (check14);
-    checkBig = new wxCheckBox (panel, ID_SIZER_CHECKBIG, _T("Big"));
+    checkBig = new wxCheckBox (panel, ID_SIZER_CHECKBIG, wxT("Big"));
     checkBig->SetValue (true);
     csizer->Add (checkBig);
 
@@ -1041,27 +1041,27 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 
     m_buttonSizer = new wxBoxSizer (wxVERTICAL);
 
-    m_sizerBtn1 = new wxButton(panel, wxID_ANY, _T("Test Button &1 (tab order 1)") );
+    m_sizerBtn1 = new wxButton(panel, wxID_ANY, wxT("Test Button &1 (tab order 1)") );
     m_buttonSizer->Add( m_sizerBtn1, 0, wxALL, 10 );
-    m_sizerBtn2 = new wxButton(panel, wxID_ANY, _T("Test Button &2 (tab order 3)") );
+    m_sizerBtn2 = new wxButton(panel, wxID_ANY, wxT("Test Button &2 (tab order 3)") );
     m_buttonSizer->Add( m_sizerBtn2, 0, wxALL, 10 );
-    m_sizerBtn3 = new wxButton(panel, wxID_ANY, _T("Test Button &3 (tab order 2)") );
+    m_sizerBtn3 = new wxButton(panel, wxID_ANY, wxT("Test Button &3 (tab order 2)") );
     m_buttonSizer->Add( m_sizerBtn3, 0, wxALL, 10 );
-    m_sizerBtn4 = new wxButton(panel, wxID_ANY, _T("Test Button &4 (tab order 4)") );
+    m_sizerBtn4 = new wxButton(panel, wxID_ANY, wxT("Test Button &4 (tab order 4)") );
     m_buttonSizer->Add( m_sizerBtn4, 0, wxALL, 10 );
 
     m_sizerBtn3->MoveBeforeInTabOrder(m_sizerBtn2);
 
     m_hsizer->Add (m_buttonSizer);
     m_hsizer->Add( 20,20, 1 );
-    m_bigBtn = new wxButton(panel, wxID_ANY, _T("Multiline\nbutton") );
+    m_bigBtn = new wxButton(panel, wxID_ANY, wxT("Multiline\nbutton") );
     m_hsizer->Add( m_bigBtn , 3, wxGROW|wxALL, 10 );
 
     sizer->Add (m_hsizer, 1, wxGROW);
 
     panel->SetSizer( sizer );
 
-    m_book->AddPage(panel, _T("wxSizer"));
+    m_book->AddPage(panel, wxT("wxSizer"));
 
     // set the sizer for the panel itself
     sizer = new wxBoxSizer(wxVERTICAL);
@@ -1087,7 +1087,7 @@ void MyPanel::OnIdle(wxIdleEvent& event)
     {
         if ( s_selCombo != INVALID_SELECTION )
         {
-            wxLogMessage(_T("EVT_IDLE: combobox selection changed from %d to %d"),
+            wxLogMessage(wxT("EVT_IDLE: combobox selection changed from %d to %d"),
                          s_selCombo, sel);
         }
 
@@ -1100,7 +1100,7 @@ void MyPanel::OnIdle(wxIdleEvent& event)
     {
         if ( s_selChoice != INVALID_SELECTION )
         {
-            wxLogMessage(_T("EVT_IDLE: choice selection changed from %d to %d"),
+            wxLogMessage(wxT("EVT_IDLE: choice selection changed from %d to %d"),
                          s_selChoice, sel);
         }
 
@@ -1115,10 +1115,10 @@ void MyPanel::OnPageChanging( wxBookCtrl
     int selOld = event.GetOldSelection();
     if ( selOld == 2 )
     {
-        if ( wxMessageBox(_T("This demonstrates how a program may prevent the\n")
-                          _T("page change from taking place - if you select\n")
-                          _T("[No] the current page will stay the third one\n"),
-                          _T("Control sample"),
+        if ( wxMessageBox(wxT("This demonstrates how a program may prevent the\n")
+                          wxT("page change from taking place - if you select\n")
+                          wxT("[No] the current page will stay the third one\n"),
+                          wxT("Control sample"),
                           wxICON_QUESTION | wxYES_NO, this) != wxYES )
         {
             event.Veto();
@@ -1127,28 +1127,28 @@ void MyPanel::OnPageChanging( wxBookCtrl
         }
     }
 
-    *m_text << _T("Book selection is being changed from ") << selOld
-            << _T(" to ") << event.GetSelection()
-            << _T(" (current page from book is ")
-            << m_book->GetSelection() << _T(")\n");
+    *m_text << wxT("Book selection is being changed from ") << selOld
+            << wxT(" to ") << event.GetSelection()
+            << wxT(" (current page from book is ")
+            << m_book->GetSelection() << wxT(")\n");
 }
 
 void MyPanel::OnPageChanged( wxBookCtrlEvent &event )
 {
-    *m_text << _T("Book selection is now ") << event.GetSelection()
-            << _T(" (from book: ") << m_book->GetSelection()
-            << _T(")\n");
+    *m_text << wxT("Book selection is now ") << event.GetSelection()
+            << wxT(" (from book: ") << m_book->GetSelection()
+            << wxT(")\n");
 }
 
 void MyPanel::OnTestButton(wxCommandEvent& event)
 {
-    wxLogMessage(_T("Button %c clicked."),
-                 event.GetId() == ID_BUTTON_TEST1 ? _T('1') : _T('2'));
+    wxLogMessage(wxT("Button %c clicked."),
+                 event.GetId() == ID_BUTTON_TEST1 ? wxT('1') : wxT('2'));
 }
 
 void MyPanel::OnBmpButton(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("Bitmap button clicked."));
+    wxLogMessage(wxT("Bitmap button clicked."));
 }
 
 void MyPanel::OnBmpButtonToggle(wxCommandEvent& event)
@@ -1187,48 +1187,48 @@ void MyPanel::OnListBox( wxCommandEvent 
 {
     if (event.GetInt() == -1)
     {
-        m_text->AppendText( _T("ListBox has no selections anymore\n") );
+        m_text->AppendText( wxT("ListBox has no selections anymore\n") );
         return;
     }
 
     wxListBox *listbox = event.GetId() == ID_LISTBOX ? m_listbox
                                                      : m_listboxSorted;
 
-    m_text->AppendText( _T("ListBox event selection string is: '") );
+    m_text->AppendText( wxT("ListBox event selection string is: '") );
     m_text->AppendText( event.GetString() );
-    m_text->AppendText( _T("'\n") );
+    m_text->AppendText( wxT("'\n") );
 
     // can't use GetStringSelection() with multiple selections, there could be
     // more than one of them
     if ( !listbox->HasFlag(wxLB_MULTIPLE) )
     {
-        m_text->AppendText( _T("ListBox control selection string is: '") );
+        m_text->AppendText( wxT("ListBox control selection string is: '") );
         m_text->AppendText( listbox->GetStringSelection() );
-        m_text->AppendText( _T("'\n") );
+        m_text->AppendText( wxT("'\n") );
     }
 
     wxStringClientData *obj = ((wxStringClientData *)event.GetClientObject());
-    m_text->AppendText( _T("ListBox event client data string is: '") );
+    m_text->AppendText( wxT("ListBox event client data string is: '") );
     if (obj) // BC++ doesn't like use of '? .. : .. ' in this context
         m_text->AppendText( obj->GetData() );
     else
-        m_text->AppendText( wxString(_T("none")) );
+        m_text->AppendText( wxString(wxT("none")) );
 
-    m_text->AppendText( _T("'\n") );
-    m_text->AppendText( _T("ListBox control client data string is: '") );
+    m_text->AppendText( wxT("'\n") );
+    m_text->AppendText( wxT("ListBox control client data string is: '") );
     obj = (wxStringClientData *)listbox->GetClientObject(event.GetInt());
     if (obj)
         m_text->AppendText( obj->GetData() );
     else
-        m_text->AppendText( wxString(_T("none")) );
-    m_text->AppendText( _T("'\n") );
+        m_text->AppendText( wxString(wxT("none")) );
+    m_text->AppendText( wxT("'\n") );
 }
 
 void MyPanel::OnListBoxDoubleClick( wxCommandEvent &event )
 {
-    m_text->AppendText( _T("ListBox double click string is: ") );
+    m_text->AppendText( wxT("ListBox double click string is: ") );
     m_text->AppendText( event.GetString() );
-    m_text->AppendText( _T("\n") );
+    m_text->AppendText( wxT("\n") );
 }
 
 void MyPanel::OnListBoxButtons( wxCommandEvent &event )
@@ -1237,13 +1237,13 @@ void MyPanel::OnListBoxButtons( wxComman
     {
         case ID_LISTBOX_ENABLE:
             {
-                m_text->AppendText(_T("Checkbox clicked.\n"));
+                m_text->AppendText(wxT("Checkbox clicked.\n"));
 #if wxUSE_TOOLTIPS
                 wxCheckBox *cb = (wxCheckBox*)event.GetEventObject();
                 if (event.GetInt())
-                    cb->SetToolTip( _T("Click to enable listbox") );
+                    cb->SetToolTip( wxT("Click to enable listbox") );
                 else
-                    cb->SetToolTip( _T("Click to disable listbox") );
+                    cb->SetToolTip( wxT("Click to disable listbox") );
 #endif // wxUSE_TOOLTIPS
                 m_listbox->Enable( event.GetInt() == 0 );
                 m_lbSelectThis->Enable( event.GetInt() == 0 );
@@ -1263,10 +1263,10 @@ void MyPanel::OnListBoxButtons( wxComman
             }
         case ID_LISTBOX_SEL_STR:
             {
-                if (m_listbox->FindString(_T("This")) != wxNOT_FOUND)
-                    m_listbox->SetStringSelection( _T("This") );
-                if (m_listboxSorted->FindString(_T("This")) != wxNOT_FOUND)
-                    m_listboxSorted->SetStringSelection( _T("This") );
+                if (m_listbox->FindString(wxT("This")) != wxNOT_FOUND)
+                    m_listbox->SetStringSelection( wxT("This") );
+                if (m_listboxSorted->FindString(wxT("This")) != wxNOT_FOUND)
+                    m_listboxSorted->SetStringSelection( wxT("This") );
                 m_lbSelectNum->WarpPointer( 40, 14 );
                 break;
             }
@@ -1278,8 +1278,8 @@ void MyPanel::OnListBoxButtons( wxComman
             }
         case ID_LISTBOX_APPEND:
             {
-                m_listbox->Append( _T("Hi!") );
-                m_listboxSorted->Append( _T("Hi!") );
+                m_listbox->Append( wxT("Hi!") );
+                m_listboxSorted->Append( wxT("Hi!") );
                 break;
             }
         case ID_LISTBOX_DELETE:
@@ -1308,7 +1308,7 @@ void MyPanel::OnListBoxButtons( wxComman
 static const wxChar *GetDataString(wxClientData *data)
 {
     return data ? wx_static_cast(wxStringClientData *, data)->GetData().c_str()
-                : _T("none");
+                : wxT("none");
 }
 
 void MyPanel::OnChoice( wxCommandEvent &event )
@@ -1321,9 +1321,9 @@ void MyPanel::OnChoice( wxCommandEvent &
     wxClientData *dataEvt = event.GetClientObject(),
                  *dataCtrl = choice->GetClientObject(sel);
 
-    wxLogMessage(_T("EVT_CHOICE: item %d/%d (event/control), ")
-                 _T("string \"%s\"/\"%s\", ")
-                 _T("data \"%s\"/\"%s\""),
+    wxLogMessage(wxT("EVT_CHOICE: item %d/%d (event/control), ")
+                 wxT("string \"%s\"/\"%s\", ")
+                 wxT("data \"%s\"/\"%s\""),
                  (int)event.GetInt(),
                  sel,
                  event.GetString().c_str(),
@@ -1350,8 +1350,8 @@ void MyPanel::OnChoiceButtons( wxCommand
             }
         case ID_CHOICE_SEL_STR:
             {
-                m_choice->SetStringSelection( _T("This") );
-                m_choiceSorted->SetStringSelection( _T("This") );
+                m_choice->SetStringSelection( wxT("This") );
+                m_choiceSorted->SetStringSelection( wxT("This") );
                 break;
             }
         case ID_CHOICE_CLEAR:
@@ -1362,8 +1362,8 @@ void MyPanel::OnChoiceButtons( wxCommand
             }
         case ID_CHOICE_APPEND:
             {
-                m_choice->Append( _T("Hi!") );
-                m_choiceSorted->Append( _T("Hi!") );
+                m_choice->Append( wxT("Hi!") );
+                m_choiceSorted->Append( wxT("Hi!") );
                 break;
             }
         case ID_CHOICE_DELETE:
@@ -1391,7 +1391,7 @@ void MyPanel::OnCombo( wxCommandEvent &e
     if (!m_combo)
         return;
     
-    wxLogMessage(_T("EVT_COMBOBOX: item %d/%d (event/control), string \"%s\"/\"%s\""),
+    wxLogMessage(wxT("EVT_COMBOBOX: item %d/%d (event/control), string \"%s\"/\"%s\""),
                  (int)event.GetInt(),
                  m_combo->GetSelection(),
                  event.GetString().c_str(),
@@ -1409,7 +1409,7 @@ void MyPanel::OnComboTextChanged(wxComma
 void MyPanel::OnComboTextEnter(wxCommandEvent& WXUNUSED(event))
 {
     if (m_combo)
-        wxLogMessage(_T("Enter pressed in the combobox: value is '%s'."),
+        wxLogMessage(wxT("Enter pressed in the combobox: value is '%s'."),
                      m_combo->GetValue().c_str());
 }
 
@@ -1429,7 +1429,7 @@ void MyPanel::OnComboButtons( wxCommandE
             }
         case ID_COMBO_SEL_STR:
             {
-                m_combo->SetStringSelection( _T("This") );
+                m_combo->SetStringSelection( wxT("This") );
                 break;
             }
         case ID_COMBO_CLEAR:
@@ -1439,7 +1439,7 @@ void MyPanel::OnComboButtons( wxCommandE
             }
         case ID_COMBO_APPEND:
             {
-                m_combo->Append( _T("Hi!") );
+                m_combo->Append( wxT("Hi!") );
                 break;
             }
         case ID_COMBO_DELETE:
@@ -1463,19 +1463,19 @@ void MyPanel::OnComboButtons( wxCommandE
 
 void MyPanel::OnRadio( wxCommandEvent &event )
 {
-    m_text->AppendText( _T("RadioBox selection string is: ") );
+    m_text->AppendText( wxT("RadioBox selection string is: ") );
     m_text->AppendText( event.GetString() );
-    m_text->AppendText( _T("\n") );
+    m_text->AppendText( wxT("\n") );
 }
 
 void MyPanel::OnRadioButton1( wxCommandEvent & WXUNUSED(event) )
 {
-    wxMessageBox(_T("First wxRadioButton selected."), _T("wxControl sample"));
+    wxMessageBox(wxT("First wxRadioButton selected."), wxT("wxControl sample"));
 }
 
 void MyPanel::OnRadioButton2( wxCommandEvent & WXUNUSED(event) )
 {
-    m_text->AppendText(_T("Second wxRadioButton selected.\n"));
+    m_text->AppendText(wxT("Second wxRadioButton selected.\n"));
 }
 
 void MyPanel::OnRadioButtons( wxCommandEvent &event )
@@ -1491,7 +1491,7 @@ void MyPanel::OnRadioButtons( wxCommandE
             break;
 
         case ID_RADIOBOX_SEL_STR:
-            m_radio->SetStringSelection( _T("This") );
+            m_radio->SetStringSelection( wxT("This") );
             break;
 
         case ID_RADIOBOX_FONT:
@@ -1508,8 +1508,8 @@ void MyPanel::OnSetFont( wxCommandEvent 
 
 void MyPanel::OnUpdateLabel( wxCommandEvent &event )
 {
-    m_label->SetLabel(event.GetInt() ? _T("Very very very very very long text.")
-                                     : _T("Shorter text."));
+    m_label->SetLabel(event.GetInt() ? wxT("Very very very very very long text.")
+                                     : wxT("Shorter text."));
 }
 
 #if wxUSE_SLIDER
@@ -1531,7 +1531,7 @@ void MyPanel::OnSpinCtrlText(wxCommandEv
     if ( m_spinctrl )
     {
         wxString s;
-        s.Printf( _T("Spin ctrl text changed: now %d (from event: %s)\n"),
+        s.Printf( wxT("Spin ctrl text changed: now %d (from event: %s)\n"),
                  m_spinctrl->GetValue(), event.GetString().c_str() );
         m_text->AppendText(s);
     }
@@ -1542,7 +1542,7 @@ void MyPanel::OnSpinCtrl(wxSpinEvent& ev
     if ( m_spinctrl )
     {
         wxString s;
-        s.Printf( _T("Spin ctrl changed: now %d (from event: %d)\n"),
+        s.Printf( wxT("Spin ctrl changed: now %d (from event: %d)\n"),
                  m_spinctrl->GetValue(), event.GetInt() );
         m_text->AppendText(s);
     }
@@ -1553,7 +1553,7 @@ void MyPanel::OnSpinCtrlUp(wxSpinEvent& 
     if ( m_spinctrl )
     {
         m_text->AppendText( wxString::Format(
-            _T("Spin up: %d (from event: %d)\n"),
+            wxT("Spin up: %d (from event: %d)\n"),
             m_spinctrl->GetValue(), event.GetInt() ) );
     }
 }
@@ -1563,7 +1563,7 @@ void MyPanel::OnSpinCtrlDown(wxSpinEvent
     if ( m_spinctrl )
     {
         m_text->AppendText( wxString::Format(
-            _T("Spin down: %d (from event: %d)\n"),
+            wxT("Spin down: %d (from event: %d)\n"),
             m_spinctrl->GetValue(), event.GetInt() ) );
     }
 }
@@ -1574,12 +1574,12 @@ void MyPanel::OnSpinCtrlDown(wxSpinEvent
 void MyPanel::OnSpinUp( wxSpinEvent &event )
 {
     wxString value;
-    value.Printf( _T("Spin control up: current = %d\n"),
+    value.Printf( wxT("Spin control up: current = %d\n"),
                  m_spinbutton->GetValue());
 
     if ( event.GetPosition() > 17 )
     {
-        value += _T("Preventing the spin button from going above 17.\n");
+        value += wxT("Preventing the spin button from going above 17.\n");
 
         event.Veto();
     }
@@ -1590,12 +1590,12 @@ void MyPanel::OnSpinUp( wxSpinEvent &eve
 void MyPanel::OnSpinDown( wxSpinEvent &event )
 {
     wxString value;
-    value.Printf( _T("Spin control down: current = %d\n"),
+    value.Printf( wxT("Spin control down: current = %d\n"),
                  m_spinbutton->GetValue());
 
     if ( event.GetPosition() < -17 )
     {
-        value += _T("Preventing the spin button from going below -17.\n");
+        value += wxT("Preventing the spin button from going below -17.\n");
 
         event.Veto();
     }
@@ -1606,10 +1606,10 @@ void MyPanel::OnSpinDown( wxSpinEvent &e
 void MyPanel::OnSpinUpdate( wxSpinEvent &event )
 {
     wxString value;
-    value.Printf( _T("%d"), event.GetPosition() );
+    value.Printf( wxT("%d"), event.GetPosition() );
     m_spintext->SetValue( value );
 
-    value.Printf( _T("Spin control range: (%d, %d), current = %d\n"),
+    value.Printf( wxT("Spin control range: (%d, %d), current = %d\n"),
                  m_spinbutton->GetMin(), m_spinbutton->GetMax(),
                  m_spinbutton->GetValue());
 
@@ -1636,12 +1636,12 @@ void MyPanel::OnShowProgress( wxCommandE
 
     if ( max <= 0 )
     {
-        wxLogError(_T("You must set positive range!"));
+        wxLogError(wxT("You must set positive range!"));
         return;
     }
 
-    wxProgressDialog dialog(_T("Progress dialog example"),
-                            _T("An informative message"),
+    wxProgressDialog dialog(wxT("Progress dialog example"),
+                            wxT("An informative message"),
                             max,    // range
                             this,   // parent
                             wxPD_CAN_ABORT |
@@ -1658,11 +1658,11 @@ void MyPanel::OnShowProgress( wxCommandE
         wxSleep(1);
         if ( i == max )
         {
-            cont = dialog.Update(i, _T("That's all, folks!"));
+            cont = dialog.Update(i, wxT("That's all, folks!"));
         }
         else if ( i == max / 2 )
         {
-            cont = dialog.Update(i, _T("Only a half left (very long message)!"));
+            cont = dialog.Update(i, wxT("Only a half left (very long message)!"));
         }
         else
         {
@@ -1672,11 +1672,11 @@ void MyPanel::OnShowProgress( wxCommandE
 
     if ( !cont )
     {
-        *m_text << _T("Progress dialog aborted!\n");
+        *m_text << wxT("Progress dialog aborted!\n");
     }
     else
     {
-        *m_text << _T("Countdown from ") << max << _T(" finished.\n");
+        *m_text << wxT("Countdown from ") << max << wxT(" finished.\n");
     }
 }
 
@@ -1716,7 +1716,7 @@ void MyPanel::OnSizerCheck( wxCommandEve
 
 MyPanel::~MyPanel()
 {
-    //wxLog::RemoveTraceMask(_T("focus"));
+    //wxLog::RemoveTraceMask(wxT("focus"));
     delete wxLog::SetActiveTarget(m_logTargetOld);
 
     delete m_book->GetImageList();
@@ -1749,7 +1749,7 @@ END_EVENT_TABLE()
 MyFrame::MyFrame(const wxChar *title, int x, int y)
        : wxFrame(NULL, wxID_ANY, title, wxPoint(x, y), wxSize(700, 450))
 {
-    SetHelpText( _T("Controls sample demonstrating various widgets") );
+    SetHelpText( wxT("Controls sample demonstrating various widgets") );
 
     // Give it an icon
     // The wxICON() macros loads an icon from a resource under Windows
@@ -1761,31 +1761,31 @@ MyFrame::MyFrame(const wxChar *title, in
 
     wxMenu *file_menu = new wxMenu;
 
-    file_menu->Append(CONTROLS_CLEAR_LOG, _T("&Clear log\tCtrl-L"));
+    file_menu->Append(CONTROLS_CLEAR_LOG, wxT("&Clear log\tCtrl-L"));
     file_menu->AppendSeparator();
-    file_menu->Append(CONTROLS_ABOUT, _T("&About\tF1"));
+    file_menu->Append(CONTROLS_ABOUT, wxT("&About\tF1"));
     file_menu->AppendSeparator();
-    file_menu->Append(CONTROLS_QUIT, _T("E&xit\tAlt-X"), _T("Quit controls sample"));
+    file_menu->Append(CONTROLS_QUIT, wxT("E&xit\tAlt-X"), wxT("Quit controls sample"));
 
     wxMenuBar *menu_bar = new wxMenuBar;
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
 #if wxUSE_TOOLTIPS
     wxMenu *tooltip_menu = new wxMenu;
-    tooltip_menu->Append(CONTROLS_SET_TOOLTIP_DELAY, _T("Set &delay\tCtrl-D"));
+    tooltip_menu->Append(CONTROLS_SET_TOOLTIP_DELAY, wxT("Set &delay\tCtrl-D"));
     tooltip_menu->AppendSeparator();
-    tooltip_menu->Append(CONTROLS_ENABLE_TOOLTIPS, _T("&Toggle tooltips\tCtrl-T"),
-            _T("enable/disable tooltips"), true);
+    tooltip_menu->Append(CONTROLS_ENABLE_TOOLTIPS, wxT("&Toggle tooltips\tCtrl-T"),
+            wxT("enable/disable tooltips"), true);
     tooltip_menu->Check(CONTROLS_ENABLE_TOOLTIPS, true);
-    menu_bar->Append(tooltip_menu, _T("&Tooltips"));
+    menu_bar->Append(tooltip_menu, wxT("&Tooltips"));
 #endif // wxUSE_TOOLTIPS
 
     wxMenu *panel_menu = new wxMenu;
-    panel_menu->Append(CONTROLS_ENABLE_ALL, _T("&Disable all\tCtrl-E"),
-                       _T("Enable/disable all panel controls"), true);
-    panel_menu->Append(CONTROLS_CONTEXT_HELP, _T("&Context help...\tCtrl-H"),
-                       _T("Get context help for a control"));
-    menu_bar->Append(panel_menu, _T("&Panel"));
+    panel_menu->Append(CONTROLS_ENABLE_ALL, wxT("&Disable all\tCtrl-E"),
+                       wxT("Enable/disable all panel controls"), true);
+    panel_menu->Append(CONTROLS_CONTEXT_HELP, wxT("&Context help...\tCtrl-H"),
+                       wxT("Get context help for a control"));
+    menu_bar->Append(panel_menu, wxT("&Panel"));
 
     SetMenuBar(menu_bar);
 
@@ -1805,7 +1805,7 @@ void MyFrame::OnAbout( wxCommandEvent& W
 {
     wxBusyCursor bc;
 
-    wxMessageDialog dialog(this, _T("This is a control sample"), _T("About Controls"), wxOK );
+    wxMessageDialog dialog(this, wxT("This is a control sample"), wxT("About Controls"), wxOK );
     dialog.ShowModal();
 }
 
@@ -1820,20 +1820,20 @@ void MyFrame::OnSetTooltipDelay(wxComman
     static long s_delay = 5000;
 
     wxString delay;
-    delay.Printf( _T("%ld"), s_delay);
+    delay.Printf( wxT("%ld"), s_delay);
 
-    delay = wxGetTextFromUser(_T("Enter delay (in milliseconds)"),
-            _T("Set tooltip delay"),
+    delay = wxGetTextFromUser(wxT("Enter delay (in milliseconds)"),
+            wxT("Set tooltip delay"),
             delay,
             this);
     if ( !delay )
         return; // cancelled
 
-    wxSscanf(delay, _T("%ld"), &s_delay);
+    wxSscanf(delay, wxT("%ld"), &s_delay);
 
     wxToolTip::SetDelay(s_delay);
 
-    wxLogStatus(this, _T("Tooltip delay set to %ld milliseconds"), s_delay);
+    wxLogStatus(this, wxT("Tooltip delay set to %ld milliseconds"), s_delay);
 }
 
 void MyFrame::OnToggleTooltips(wxCommandEvent& WXUNUSED(event))
@@ -1844,7 +1844,7 @@ void MyFrame::OnToggleTooltips(wxCommand
 
     wxToolTip::Enable(s_enabled);
 
-    wxLogStatus(this, _T("Tooltips %sabled"), s_enabled ? _T("en") : _T("dis") );
+    wxLogStatus(this, wxT("Tooltips %sabled"), s_enabled ? wxT("en") : wxT("dis") );
 }
 #endif // tooltips
 
@@ -1873,14 +1873,14 @@ void MyFrame::OnMove( wxMoveEvent& event
 
 void MyFrame::OnIconized( wxIconizeEvent& event )
 {
-    wxLogMessage(_T("Frame %s"), event.Iconized() ? _T("iconized")
-                                                  : _T("restored"));
+    wxLogMessage(wxT("Frame %s"), event.Iconized() ? wxT("iconized")
+                                                  : wxT("restored"));
     event.Skip();
 }
 
 void MyFrame::OnMaximized( wxMaximizeEvent& WXUNUSED(event) )
 {
-    wxLogMessage(_T("Frame maximized"));
+    wxLogMessage(wxT("Frame maximized"));
 }
 
 void MyFrame::OnSize( wxSizeEvent& event )
@@ -1904,9 +1904,9 @@ void MyFrame::OnIdle( wxIdleEvent& WXUNU
         wxString msg;
         msg.Printf(
 #ifdef __WXMSW__
-                _T("Focus: %s, HWND = %08x"),
+                wxT("Focus: %s, HWND = %08x"),
 #else
-                _T("Focus: %s"),
+                wxT("Focus: %s"),
 #endif
                 s_windowFocus->GetClassInfo()->GetClassName()
 #ifdef __WXMSW__
@@ -1922,27 +1922,27 @@ void MyFrame::OnIdle( wxIdleEvent& WXUNU
 
 void MyComboBox::OnChar(wxKeyEvent& event)
 {
-    wxLogMessage(_T("MyComboBox::OnChar"));
+    wxLogMessage(wxT("MyComboBox::OnChar"));
 
     if ( event.GetKeyCode() == 'w' )
-        wxLogMessage(_T("MyComboBox: 'w' will be ignored."));
+        wxLogMessage(wxT("MyComboBox: 'w' will be ignored."));
     else
         event.Skip();
 }
 
 void MyComboBox::OnKeyDown(wxKeyEvent& event)
 {
-    wxLogMessage(_T("MyComboBox::OnKeyDown"));
+    wxLogMessage(wxT("MyComboBox::OnKeyDown"));
 
     if ( event.GetKeyCode() == 'w' )
-        wxLogMessage(_T("MyComboBox: 'w' will be ignored."));
+        wxLogMessage(wxT("MyComboBox: 'w' will be ignored."));
     else
         event.Skip();
 }
 
 void MyComboBox::OnKeyUp(wxKeyEvent& event)
 {
-    wxLogMessage(_T("MyComboBox::OnKeyUp"));
+    wxLogMessage(wxT("MyComboBox::OnKeyUp"));
 
     event.Skip();
 }
--- samples/combo/combo.cpp-orig	2009-06-18 18:18:29.811213000 -0500
+++ samples/combo/combo.cpp	2009-06-18 18:18:41.764791000 -0500
@@ -155,7 +155,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("wxComboCtrl and wxOwnerDrawnComboBox Sample"));
+    MyFrame *frame = new MyFrame(wxT("wxComboCtrl and wxOwnerDrawnComboBox Sample"));
 
     // and show it (the frames, unlike simple controls, are not shown when
     // created initially)
@@ -720,17 +720,17 @@ MyFrame::MyFrame(const wxString& title)
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(ComboControl_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(ComboControl_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    fileMenu->Append(ComboControl_Compare, _T("&Compare against wxComboBox..."),
-        _T("Show some wxOwnerDrawnComboBoxes side-by-side with native wxComboBoxes."));
+    fileMenu->Append(ComboControl_Compare, wxT("&Compare against wxComboBox..."),
+        wxT("Show some wxOwnerDrawnComboBoxes side-by-side with native wxComboBoxes."));
     fileMenu->AppendSeparator();
-    fileMenu->Append(ComboControl_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    fileMenu->Append(ComboControl_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(fileMenu, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(fileMenu, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -1198,14 +1198,14 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxMessageBox(wxString::Format(
-                    _T("Welcome to %s!\n")
-                    _T("\n")
-                    _T("This is the wxWidgets wxComboCtrl and wxOwnerDrawnComboBox sample\n")
-                    _T("running under %s."),
+                    wxT("Welcome to %s!\n")
+                    wxT("\n")
+                    wxT("This is the wxWidgets wxComboCtrl and wxOwnerDrawnComboBox sample\n")
+                    wxT("running under %s."),
                     wxVERSION_STRING,
                     wxGetOsDescription().c_str()
                  ),
-                 _T("About wxComboCtrl sample"),
+                 wxT("About wxComboCtrl sample"),
                  wxOK | wxICON_INFORMATION,
                  this);
 }
--- samples/sashtest/sashtest.cpp-orig	2009-06-18 18:17:57.112348000 -0500
+++ samples/sashtest/sashtest.cpp	2009-06-18 18:18:04.534365000 -0500
@@ -42,30 +42,30 @@ bool MyApp::OnInit(void)
 {
   // Create the main frame window
 
-  frame = new MyFrame(NULL, wxID_ANY, _T("Sash Demo"), wxPoint(0, 0), wxSize(500, 400),
+  frame = new MyFrame(NULL, wxID_ANY, wxT("Sash Demo"), wxPoint(0, 0), wxSize(500, 400),
                       wxDEFAULT_FRAME_STYLE |
                       wxNO_FULL_REPAINT_ON_RESIZE |
                       wxHSCROLL | wxVSCROLL);
 
   // Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
-  frame->SetIcon(wxIcon(_T("sashtest_icn")));
+  frame->SetIcon(wxIcon(wxT("sashtest_icn")));
 #endif
 
   // Make a menubar
   wxMenu *file_menu = new wxMenu;
 
-  file_menu->Append(SASHTEST_NEW_WINDOW, _T("&New window"));
-  file_menu->Append(SASHTEST_TOGGLE_WINDOW, _T("&Toggle window"));
-  file_menu->Append(SASHTEST_QUIT, _T("&Exit"));
+  file_menu->Append(SASHTEST_NEW_WINDOW, wxT("&New window"));
+  file_menu->Append(SASHTEST_TOGGLE_WINDOW, wxT("&Toggle window"));
+  file_menu->Append(SASHTEST_QUIT, wxT("&Exit"));
 
   wxMenu *help_menu = new wxMenu;
-  help_menu->Append(SASHTEST_ABOUT, _T("&About"));
+  help_menu->Append(SASHTEST_ABOUT, wxT("&About"));
 
   wxMenuBar *menu_bar = new wxMenuBar;
 
-  menu_bar->Append(file_menu, _T("&File"));
-  menu_bar->Append(help_menu, _T("&Help"));
+  menu_bar->Append(file_menu, wxT("&File"));
+  menu_bar->Append(help_menu, wxT("&Help"));
 
   // Associate the menu bar with the frame
   frame->SetMenuBar(menu_bar);
@@ -138,7 +138,7 @@ MyFrame::MyFrame(wxWindow *parent, const
   wxTextCtrl* textWindow = new wxTextCtrl(win, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize,
         wxTE_MULTILINE|wxSUNKEN_BORDER);
 //        wxTE_MULTILINE|wxNO_BORDER);
-  textWindow->SetValue(_T("A help window"));
+  textWindow->SetValue(wxT("A help window"));
 
   m_leftWindow1 = win;
 
@@ -162,7 +162,7 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-      (void)wxMessageBox(_T("wxWidgets 2.0 Sash Demo\nAuthor: Julian Smart (c) 1998"), _T("About Sash Demo"));
+      (void)wxMessageBox(wxT("wxWidgets 2.0 Sash Demo\nAuthor: Julian Smart (c) 1998"), wxT("About Sash Demo"));
 }
 
 void MyFrame::OnToggleWindow(wxCommandEvent& WXUNUSED(event))
@@ -222,17 +222,17 @@ void MyFrame::OnSashDrag(wxSashEvent& ev
 void MyFrame::OnNewWindow(wxCommandEvent& WXUNUSED(event))
 {
       // Make another frame, containing a canvas
-      MyChild *subframe = new MyChild(frame, _T("Canvas Frame"),
+      MyChild *subframe = new MyChild(frame, wxT("Canvas Frame"),
                                       wxPoint(10, 10), wxSize(300, 300),
                                       wxDEFAULT_FRAME_STYLE |
                                       wxNO_FULL_REPAINT_ON_RESIZE);
 
-      subframe->SetTitle(wxString::Format(_T("Canvas Frame %d"), winNumber));
+      subframe->SetTitle(wxString::Format(wxT("Canvas Frame %d"), winNumber));
       winNumber ++;
 
       // Give it an icon (this is ignored in MDI mode: uses resources)
 #ifdef __WXMSW__
-      subframe->SetIcon(wxIcon(_T("sashtest_icn")));
+      subframe->SetIcon(wxIcon(wxT("sashtest_icn")));
 #endif
 
 #if wxUSE_STATUSBAR
@@ -243,23 +243,23 @@ void MyFrame::OnNewWindow(wxCommandEvent
       // Make a menubar
       wxMenu *file_menu = new wxMenu;
 
-      file_menu->Append(SASHTEST_NEW_WINDOW, _T("&New window"));
-      file_menu->Append(SASHTEST_CHILD_QUIT, _T("&Close child"));
-      file_menu->Append(SASHTEST_QUIT, _T("&Exit"));
+      file_menu->Append(SASHTEST_NEW_WINDOW, wxT("&New window"));
+      file_menu->Append(SASHTEST_CHILD_QUIT, wxT("&Close child"));
+      file_menu->Append(SASHTEST_QUIT, wxT("&Exit"));
 
       wxMenu *option_menu = new wxMenu;
 
       // Dummy option
-      option_menu->Append(SASHTEST_REFRESH, _T("&Refresh picture"));
+      option_menu->Append(SASHTEST_REFRESH, wxT("&Refresh picture"));
 
       wxMenu *help_menu = new wxMenu;
-      help_menu->Append(SASHTEST_ABOUT, _T("&About"));
+      help_menu->Append(SASHTEST_ABOUT, wxT("&About"));
 
       wxMenuBar *menu_bar = new wxMenuBar;
 
-      menu_bar->Append(file_menu, _T("&File"));
-      menu_bar->Append(option_menu, _T("&Options"));
-      menu_bar->Append(help_menu, _T("&Help"));
+      menu_bar->Append(file_menu, wxT("&File"));
+      menu_bar->Append(option_menu, wxT("&Options"));
+      menu_bar->Append(help_menu, wxT("&Help"));
 
       // Associate the menu bar with the frame
       subframe->SetMenuBar(menu_bar);
@@ -306,7 +306,7 @@ void MyCanvas::OnDraw(wxDC& dc)
     dc.DrawSpline(50, 200, 50, 100, 200, 10);
 #endif // wxUSE_SPLINES
     dc.DrawLine(50, 230, 200, 230);
-    dc.DrawText(_T("This is a test string"), 50, 230);
+    dc.DrawText(wxT("This is a test string"), 50, 230);
 
     wxPoint points[3];
     points[0].x = 200; points[0].y = 300;
--- samples/font/font.cpp-orig	2009-06-18 18:18:14.648632000 -0500
+++ samples/font/font.cpp	2009-06-18 18:18:21.379718000 -0500
@@ -40,7 +40,7 @@
 #endif
 
 // used as title for several dialog boxes
-static const wxChar SAMPLE_TITLE[] = _T("wxWidgets Font Sample");
+static const wxChar SAMPLE_TITLE[] = wxT("wxWidgets Font Sample");
 
 // ----------------------------------------------------------------------------
 // private classes
@@ -866,7 +866,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     fontInfo.Printf(wxT("Style: %s, weight: %s, fixed width: %s"),
                     m_font.GetStyleString().c_str(),
                     m_font.GetWeightString().c_str(),
-                    m_font.IsFixedWidth() ? _T("yes") : _T("no"));
+                    m_font.IsFixedWidth() ? wxT("yes") : wxT("no"));
 
     dc.DrawText(fontInfo, x, y);
     y += hLine;
@@ -916,7 +916,7 @@ void MyCanvas::OnPaint( wxPaintEvent &WX
     }
 
     // draw the lines between them
-    dc.SetPen(wxPen(wxColour(_T("blue")), 1, wxSOLID));
+    dc.SetPen(wxPen(wxColour(wxT("blue")), 1, wxSOLID));
     int l;
 
     // horizontal
--- samples/keyboard/keyboard.cpp-orig	2009-06-18 18:17:39.360983000 -0500
+++ samples/keyboard/keyboard.cpp	2009-06-18 18:17:46.589112000 -0500
@@ -154,19 +154,19 @@ public:
     void SetShowRaw(bool show) { m_showRaw = show; }
 
 protected:
-    void OnKeyDown(wxKeyEvent& event) { LogEvent(_T("Key down"), event); }
-    void OnKeyUp(wxKeyEvent& event) { LogEvent(_T("Key up"), event); }
-    void OnChar(wxKeyEvent& event) { LogEvent(_T("Char"), event); }
+    void OnKeyDown(wxKeyEvent& event) { LogEvent(wxT("Key down"), event); }
+    void OnKeyUp(wxKeyEvent& event) { LogEvent(wxT("Key up"), event); }
+    void OnChar(wxKeyEvent& event) { LogEvent(wxT("Char"), event); }
 
     void OnPaint(wxPaintEvent& WXUNUSED(event))
     {
         wxPaintDC dc(this);
         dc.SetTextForeground(*wxWHITE);
-        dc.DrawLabel(_T("Press keys here"), GetClientRect(), wxALIGN_CENTER);
+        dc.DrawLabel(wxT("Press keys here"), GetClientRect(), wxALIGN_CENTER);
     }
 
 private:
-    static inline wxChar GetChar(bool on, wxChar c) { return on ? c : _T('-'); }
+    static inline wxChar GetChar(bool on, wxChar c) { return on ? c : wxT('-'); }
 
     void LogEvent(const wxChar *name, wxKeyEvent& event);
 
@@ -241,7 +241,7 @@ IMPLEMENT_APP(MyApp)
 bool MyApp::OnInit()
 {
     // create the main application window
-    MyFrame *frame = new MyFrame(_T("Keyboard wxWidgets App"),
+    MyFrame *frame = new MyFrame(wxT("Keyboard wxWidgets App"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
     // and show it (the frames, unlike simple controls, are not shown when
@@ -266,24 +266,24 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_MENUS
     // create a menu bar
     wxMenu *menuFile = new wxMenu;
-    menuFile->Append(Keyboard_Clear, _T("&Clear log\tCtrl-L"));
+    menuFile->Append(Keyboard_Clear, wxT("&Clear log\tCtrl-L"));
     menuFile->AppendSeparator();
-    menuFile->Append(Keyboard_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Keyboard_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     wxMenu *menuKeys = new wxMenu;
-    menuKeys->AppendCheckItem(Keyboard_ShowRaw, _T("Show &raw keys\tCtrl-R"));
+    menuKeys->AppendCheckItem(Keyboard_ShowRaw, wxT("Show &raw keys\tCtrl-R"));
     menuKeys->AppendSeparator();
-    menuKeys->AppendCheckItem(Keyboard_Skip, _T("&Skip key down\tCtrl-S"));
+    menuKeys->AppendCheckItem(Keyboard_Skip, wxT("&Skip key down\tCtrl-S"));
 
     // the "About" item should be in the help menu
     wxMenu *menuHelp = new wxMenu;
-    menuHelp->Append(Keyboard_About, _T("&About...\tF1"), _T("Show about dialog"));
+    menuHelp->Append(Keyboard_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(menuKeys, _T("&Keys"));
-    menuBar->Append(menuHelp, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(menuKeys, wxT("&Keys"));
+    menuBar->Append(menuHelp, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -304,7 +304,7 @@ MyFrame::MyFrame(const wxString& title, 
 #if wxUSE_STATUSBAR
     // create a status bar just for fun (by default with 1 pane only)
     CreateStatusBar(2);
-    SetStatusText(_T("Welcome to wxWidgets!"));
+    SetStatusText(wxT("Welcome to wxWidgets!"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -318,10 +318,10 @@ void MyFrame::OnQuit(wxCommandEvent& WXU
 
 void MyFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
-    wxString msg = _T("Demonstrates keyboard event processing in wxWidgets\n")
-                   _T("(c) 2002 Vadim Zeitlin");
+    wxString msg = wxT("Demonstrates keyboard event processing in wxWidgets\n")
+                   wxT("(c) 2002 Vadim Zeitlin");
 
-    wxMessageBox(msg, _T("About wxKeyboard"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About wxKeyboard"), wxOK | wxICON_INFORMATION, this);
 }
 
 void MyFrame::OnClear(wxCommandEvent& WXUNUSED(event))
@@ -359,105 +359,105 @@ void TextWindow::LogEvent(const wxChar *
     long keycode = event.GetKeyCode();
     switch ( keycode )
     {
-        case WXK_BACK: key = _T("BACK"); break;
-        case WXK_TAB: key = _T("TAB"); break;
-        case WXK_RETURN: key = _T("RETURN"); break;
-        case WXK_ESCAPE: key = _T("ESCAPE"); break;
-        case WXK_SPACE: key = _T("SPACE"); break;
-        case WXK_DELETE: key = _T("DELETE"); break;
-        case WXK_START: key = _T("START"); break;
-        case WXK_LBUTTON: key = _T("LBUTTON"); break;
-        case WXK_RBUTTON: key = _T("RBUTTON"); break;
-        case WXK_CANCEL: key = _T("CANCEL"); break;
-        case WXK_MBUTTON: key = _T("MBUTTON"); break;
-        case WXK_CLEAR: key = _T("CLEAR"); break;
-        case WXK_SHIFT: key = _T("SHIFT"); break;
-        case WXK_ALT: key = _T("ALT"); break;
-        case WXK_CONTROL: key = _T("CONTROL"); break;
-        case WXK_MENU: key = _T("MENU"); break;
-        case WXK_PAUSE: key = _T("PAUSE"); break;
-        case WXK_CAPITAL: key = _T("CAPITAL"); break;
-        case WXK_END: key = _T("END"); break;
-        case WXK_HOME: key = _T("HOME"); break;
-        case WXK_LEFT: key = _T("LEFT"); break;
-        case WXK_UP: key = _T("UP"); break;
-        case WXK_RIGHT: key = _T("RIGHT"); break;
-        case WXK_DOWN: key = _T("DOWN"); break;
-        case WXK_SELECT: key = _T("SELECT"); break;
-        case WXK_PRINT: key = _T("PRINT"); break;
-        case WXK_EXECUTE: key = _T("EXECUTE"); break;
-        case WXK_SNAPSHOT: key = _T("SNAPSHOT"); break;
-        case WXK_INSERT: key = _T("INSERT"); break;
-        case WXK_HELP: key = _T("HELP"); break;
-        case WXK_NUMPAD0: key = _T("NUMPAD0"); break;
-        case WXK_NUMPAD1: key = _T("NUMPAD1"); break;
-        case WXK_NUMPAD2: key = _T("NUMPAD2"); break;
-        case WXK_NUMPAD3: key = _T("NUMPAD3"); break;
-        case WXK_NUMPAD4: key = _T("NUMPAD4"); break;
-        case WXK_NUMPAD5: key = _T("NUMPAD5"); break;
-        case WXK_NUMPAD6: key = _T("NUMPAD6"); break;
-        case WXK_NUMPAD7: key = _T("NUMPAD7"); break;
-        case WXK_NUMPAD8: key = _T("NUMPAD8"); break;
-        case WXK_NUMPAD9: key = _T("NUMPAD9"); break;
-        case WXK_MULTIPLY: key = _T("MULTIPLY"); break;
-        case WXK_ADD: key = _T("ADD"); break;
-        case WXK_SEPARATOR: key = _T("SEPARATOR"); break;
-        case WXK_SUBTRACT: key = _T("SUBTRACT"); break;
-        case WXK_DECIMAL: key = _T("DECIMAL"); break;
-        case WXK_DIVIDE: key = _T("DIVIDE"); break;
-        case WXK_F1: key = _T("F1"); break;
-        case WXK_F2: key = _T("F2"); break;
-        case WXK_F3: key = _T("F3"); break;
-        case WXK_F4: key = _T("F4"); break;
-        case WXK_F5: key = _T("F5"); break;
-        case WXK_F6: key = _T("F6"); break;
-        case WXK_F7: key = _T("F7"); break;
-        case WXK_F8: key = _T("F8"); break;
-        case WXK_F9: key = _T("F9"); break;
-        case WXK_F10: key = _T("F10"); break;
-        case WXK_F11: key = _T("F11"); break;
-        case WXK_F12: key = _T("F12"); break;
-        case WXK_F13: key = _T("F13"); break;
-        case WXK_F14: key = _T("F14"); break;
-        case WXK_F15: key = _T("F15"); break;
-        case WXK_F16: key = _T("F16"); break;
-        case WXK_F17: key = _T("F17"); break;
-        case WXK_F18: key = _T("F18"); break;
-        case WXK_F19: key = _T("F19"); break;
-        case WXK_F20: key = _T("F20"); break;
-        case WXK_F21: key = _T("F21"); break;
-        case WXK_F22: key = _T("F22"); break;
-        case WXK_F23: key = _T("F23"); break;
-        case WXK_F24: key = _T("F24"); break;
-        case WXK_NUMLOCK: key = _T("NUMLOCK"); break;
-        case WXK_SCROLL: key = _T("SCROLL"); break;
-        case WXK_PAGEUP: key = _T("PAGEUP"); break;
-        case WXK_PAGEDOWN: key = _T("PAGEDOWN"); break;
-        case WXK_NUMPAD_SPACE: key = _T("NUMPAD_SPACE"); break;
-        case WXK_NUMPAD_TAB: key = _T("NUMPAD_TAB"); break;
-        case WXK_NUMPAD_ENTER: key = _T("NUMPAD_ENTER"); break;
-        case WXK_NUMPAD_F1: key = _T("NUMPAD_F1"); break;
-        case WXK_NUMPAD_F2: key = _T("NUMPAD_F2"); break;
-        case WXK_NUMPAD_F3: key = _T("NUMPAD_F3"); break;
-        case WXK_NUMPAD_F4: key = _T("NUMPAD_F4"); break;
-        case WXK_NUMPAD_HOME: key = _T("NUMPAD_HOME"); break;
-        case WXK_NUMPAD_LEFT: key = _T("NUMPAD_LEFT"); break;
-        case WXK_NUMPAD_UP: key = _T("NUMPAD_UP"); break;
-        case WXK_NUMPAD_RIGHT: key = _T("NUMPAD_RIGHT"); break;
-        case WXK_NUMPAD_DOWN: key = _T("NUMPAD_DOWN"); break;
-        case WXK_NUMPAD_PAGEUP: key = _T("NUMPAD_PAGEUP"); break;
-        case WXK_NUMPAD_PAGEDOWN: key = _T("NUMPAD_PAGEDOWN"); break;
-        case WXK_NUMPAD_END: key = _T("NUMPAD_END"); break;
-        case WXK_NUMPAD_BEGIN: key = _T("NUMPAD_BEGIN"); break;
-        case WXK_NUMPAD_INSERT: key = _T("NUMPAD_INSERT"); break;
-        case WXK_NUMPAD_DELETE: key = _T("NUMPAD_DELETE"); break;
-        case WXK_NUMPAD_EQUAL: key = _T("NUMPAD_EQUAL"); break;
-        case WXK_NUMPAD_MULTIPLY: key = _T("NUMPAD_MULTIPLY"); break;
-        case WXK_NUMPAD_ADD: key = _T("NUMPAD_ADD"); break;
-        case WXK_NUMPAD_SEPARATOR: key = _T("NUMPAD_SEPARATOR"); break;
-        case WXK_NUMPAD_SUBTRACT: key = _T("NUMPAD_SUBTRACT"); break;
-        case WXK_NUMPAD_DECIMAL: key = _T("NUMPAD_DECIMAL"); break;
-        case WXK_NUMPAD_DIVIDE: key = _T("NUMPAD_DIVIDE"); break;
+        case WXK_BACK: key = wxT("BACK"); break;
+        case WXK_TAB: key = wxT("TAB"); break;
+        case WXK_RETURN: key = wxT("RETURN"); break;
+        case WXK_ESCAPE: key = wxT("ESCAPE"); break;
+        case WXK_SPACE: key = wxT("SPACE"); break;
+        case WXK_DELETE: key = wxT("DELETE"); break;
+        case WXK_START: key = wxT("START"); break;
+        case WXK_LBUTTON: key = wxT("LBUTTON"); break;
+        case WXK_RBUTTON: key = wxT("RBUTTON"); break;
+        case WXK_CANCEL: key = wxT("CANCEL"); break;
+        case WXK_MBUTTON: key = wxT("MBUTTON"); break;
+        case WXK_CLEAR: key = wxT("CLEAR"); break;
+        case WXK_SHIFT: key = wxT("SHIFT"); break;
+        case WXK_ALT: key = wxT("ALT"); break;
+        case WXK_CONTROL: key = wxT("CONTROL"); break;
+        case WXK_MENU: key = wxT("MENU"); break;
+        case WXK_PAUSE: key = wxT("PAUSE"); break;
+        case WXK_CAPITAL: key = wxT("CAPITAL"); break;
+        case WXK_END: key = wxT("END"); break;
+        case WXK_HOME: key = wxT("HOME"); break;
+        case WXK_LEFT: key = wxT("LEFT"); break;
+        case WXK_UP: key = wxT("UP"); break;
+        case WXK_RIGHT: key = wxT("RIGHT"); break;
+        case WXK_DOWN: key = wxT("DOWN"); break;
+        case WXK_SELECT: key = wxT("SELECT"); break;
+        case WXK_PRINT: key = wxT("PRINT"); break;
+        case WXK_EXECUTE: key = wxT("EXECUTE"); break;
+        case WXK_SNAPSHOT: key = wxT("SNAPSHOT"); break;
+        case WXK_INSERT: key = wxT("INSERT"); break;
+        case WXK_HELP: key = wxT("HELP"); break;
+        case WXK_NUMPAD0: key = wxT("NUMPAD0"); break;
+        case WXK_NUMPAD1: key = wxT("NUMPAD1"); break;
+        case WXK_NUMPAD2: key = wxT("NUMPAD2"); break;
+        case WXK_NUMPAD3: key = wxT("NUMPAD3"); break;
+        case WXK_NUMPAD4: key = wxT("NUMPAD4"); break;
+        case WXK_NUMPAD5: key = wxT("NUMPAD5"); break;
+        case WXK_NUMPAD6: key = wxT("NUMPAD6"); break;
+        case WXK_NUMPAD7: key = wxT("NUMPAD7"); break;
+        case WXK_NUMPAD8: key = wxT("NUMPAD8"); break;
+        case WXK_NUMPAD9: key = wxT("NUMPAD9"); break;
+        case WXK_MULTIPLY: key = wxT("MULTIPLY"); break;
+        case WXK_ADD: key = wxT("ADD"); break;
+        case WXK_SEPARATOR: key = wxT("SEPARATOR"); break;
+        case WXK_SUBTRACT: key = wxT("SUBTRACT"); break;
+        case WXK_DECIMAL: key = wxT("DECIMAL"); break;
+        case WXK_DIVIDE: key = wxT("DIVIDE"); break;
+        case WXK_F1: key = wxT("F1"); break;
+        case WXK_F2: key = wxT("F2"); break;
+        case WXK_F3: key = wxT("F3"); break;
+        case WXK_F4: key = wxT("F4"); break;
+        case WXK_F5: key = wxT("F5"); break;
+        case WXK_F6: key = wxT("F6"); break;
+        case WXK_F7: key = wxT("F7"); break;
+        case WXK_F8: key = wxT("F8"); break;
+        case WXK_F9: key = wxT("F9"); break;
+        case WXK_F10: key = wxT("F10"); break;
+        case WXK_F11: key = wxT("F11"); break;
+        case WXK_F12: key = wxT("F12"); break;
+        case WXK_F13: key = wxT("F13"); break;
+        case WXK_F14: key = wxT("F14"); break;
+        case WXK_F15: key = wxT("F15"); break;
+        case WXK_F16: key = wxT("F16"); break;
+        case WXK_F17: key = wxT("F17"); break;
+        case WXK_F18: key = wxT("F18"); break;
+        case WXK_F19: key = wxT("F19"); break;
+        case WXK_F20: key = wxT("F20"); break;
+        case WXK_F21: key = wxT("F21"); break;
+        case WXK_F22: key = wxT("F22"); break;
+        case WXK_F23: key = wxT("F23"); break;
+        case WXK_F24: key = wxT("F24"); break;
+        case WXK_NUMLOCK: key = wxT("NUMLOCK"); break;
+        case WXK_SCROLL: key = wxT("SCROLL"); break;
+        case WXK_PAGEUP: key = wxT("PAGEUP"); break;
+        case WXK_PAGEDOWN: key = wxT("PAGEDOWN"); break;
+        case WXK_NUMPAD_SPACE: key = wxT("NUMPAD_SPACE"); break;
+        case WXK_NUMPAD_TAB: key = wxT("NUMPAD_TAB"); break;
+        case WXK_NUMPAD_ENTER: key = wxT("NUMPAD_ENTER"); break;
+        case WXK_NUMPAD_F1: key = wxT("NUMPAD_F1"); break;
+        case WXK_NUMPAD_F2: key = wxT("NUMPAD_F2"); break;
+        case WXK_NUMPAD_F3: key = wxT("NUMPAD_F3"); break;
+        case WXK_NUMPAD_F4: key = wxT("NUMPAD_F4"); break;
+        case WXK_NUMPAD_HOME: key = wxT("NUMPAD_HOME"); break;
+        case WXK_NUMPAD_LEFT: key = wxT("NUMPAD_LEFT"); break;
+        case WXK_NUMPAD_UP: key = wxT("NUMPAD_UP"); break;
+        case WXK_NUMPAD_RIGHT: key = wxT("NUMPAD_RIGHT"); break;
+        case WXK_NUMPAD_DOWN: key = wxT("NUMPAD_DOWN"); break;
+        case WXK_NUMPAD_PAGEUP: key = wxT("NUMPAD_PAGEUP"); break;
+        case WXK_NUMPAD_PAGEDOWN: key = wxT("NUMPAD_PAGEDOWN"); break;
+        case WXK_NUMPAD_END: key = wxT("NUMPAD_END"); break;
+        case WXK_NUMPAD_BEGIN: key = wxT("NUMPAD_BEGIN"); break;
+        case WXK_NUMPAD_INSERT: key = wxT("NUMPAD_INSERT"); break;
+        case WXK_NUMPAD_DELETE: key = wxT("NUMPAD_DELETE"); break;
+        case WXK_NUMPAD_EQUAL: key = wxT("NUMPAD_EQUAL"); break;
+        case WXK_NUMPAD_MULTIPLY: key = wxT("NUMPAD_MULTIPLY"); break;
+        case WXK_NUMPAD_ADD: key = wxT("NUMPAD_ADD"); break;
+        case WXK_NUMPAD_SEPARATOR: key = wxT("NUMPAD_SEPARATOR"); break;
+        case WXK_NUMPAD_SUBTRACT: key = wxT("NUMPAD_SUBTRACT"); break;
+        case WXK_NUMPAD_DECIMAL: key = wxT("NUMPAD_DECIMAL"); break;
+        case WXK_NUMPAD_DIVIDE: key = wxT("NUMPAD_DIVIDE"); break;
 
         default:
         {
@@ -468,40 +468,40 @@ void TextWindow::LogEvent(const wxChar *
 #if wxUSE_UNICODE
                     const wxChar u = event.GetUnicodeKey();
                     if ( u )
-                        key.Printf(_T("Unicode char '%c' (U+%04x)"), u, u);
+                        key.Printf(wxT("Unicode char '%c' (U+%04x)"), u, u);
                     else
 #endif
-                        key.Printf(_T("NUL"));
+                        key.Printf(wxT("NUL"));
                 }
                 else if ( keycode < 27 )
                 {
-                    key.Printf(_T("Ctrl-%c"),
-                                (unsigned char)(_T('A') + keycode - 1));
+                    key.Printf(wxT("Ctrl-%c"),
+                                (unsigned char)(wxT('A') + keycode - 1));
                 }
                 else
                 {
-                    key.Printf(_T("'%c'"), (unsigned char)keycode);
+                    key.Printf(wxT("'%c'"), (unsigned char)keycode);
                 }
             }
             else
             {
-                key.Printf(_T("unknown (%ld)"), keycode);
+                key.Printf(wxT("unknown (%ld)"), keycode);
             }
         }
     }
 
     wxString msg;
-    msg.Printf(_T("%s event: %s (flags = %c%c%c%c)"),
+    msg.Printf(wxT("%s event: %s (flags = %c%c%c%c)"),
                name,
                key.c_str(),
-               GetChar(event.ControlDown(), _T('C')),
-               GetChar(event.AltDown(), _T('A')),
-               GetChar(event.ShiftDown(), _T('S')),
-               GetChar(event.MetaDown(), _T('M')));
+               GetChar(event.ControlDown(), wxT('C')),
+               GetChar(event.AltDown(), wxT('A')),
+               GetChar(event.ShiftDown(), wxT('S')),
+               GetChar(event.MetaDown(), wxT('M')));
 
     if ( m_showRaw )
     {
-        msg += wxString::Format(_T(" (raw key code/flags: %lu and 0x%lx)"),
+        msg += wxString::Format(wxT(" (raw key code/flags: %lu and 0x%lx)"),
                                 (unsigned long)event.GetRawKeyCode(),
                                 (unsigned long)event.GetRawKeyFlags());
     }
--- samples/notebook/notebook.cpp-orig	2009-06-18 18:17:24.479107000 -0500
+++ samples/notebook/notebook.cpp	2009-06-18 18:17:31.326078000 -0500
@@ -197,7 +197,7 @@ wxPanel *CreatePage(wxBookCtrlBase *pare
     if ( pageName == MAXIMIZED_BUTTON_PAGE_NAME )
         return CreateBigButtonPage(parent);
 
-    wxFAIL_MSG( _T("unknown page name") );
+    wxFAIL_MSG( wxT("unknown page name") );
 
     return NULL;
 }
@@ -388,7 +388,7 @@ MyFrame::~MyFrame()
         CASE_TOOLBOOK(before toolb after)                                        \
                                                                               \
         default:                                                              \
-            wxFAIL_MSG( _T("unknown book control type") );                    \
+            wxFAIL_MSG( wxT("unknown book control type") );                    \
     }
 
 int MyFrame::TranslateBookFlag(int nb, int lb, int chb, int tbk, int toolbk) const
@@ -573,7 +573,7 @@ void MyFrame::AddFlagStrIfFlagPresent(wx
     if( (flags & flag) == flag )
     {
         if( !flagStr.empty() )
-            flagStr += _T(" | ");
+            flagStr += wxT(" | ");
         flagStr += flagName;
     }
 }
@@ -588,10 +588,10 @@ void MyFrame::OnHitTest(wxCommandEvent& 
 
     wxString flagsStr;
 
-    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_NOWHERE, _T("wxBK_HITTEST_NOWHERE") );
-    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_ONICON,  _T("wxBK_HITTEST_ONICON") );
-    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_ONLABEL, _T("wxBK_HITTEST_ONLABEL") );
-    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_ONPAGE,  _T("wxBK_HITTEST_ONPAGE") );
+    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_NOWHERE, wxT("wxBK_HITTEST_NOWHERE") );
+    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_ONICON,  wxT("wxBK_HITTEST_ONICON") );
+    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_ONLABEL, wxT("wxBK_HITTEST_ONLABEL") );
+    AddFlagStrIfFlagPresent( flagsStr, flags, wxBK_HITTEST_ONPAGE,  wxT("wxBK_HITTEST_ONPAGE") );
 
     wxLogMessage(wxT("HitTest at (%d,%d): %d: %s"),
                  pt.x,
@@ -639,7 +639,7 @@ void MyFrame::OnMulti(wxCommandEvent& ev
     m_multi = event.IsChecked();
     RecreateBook();
     m_sizerFrame->Layout();
-    wxLogMessage(_T("Multiline setting works only in wxNotebook."));
+    wxLogMessage(wxT("Multiline setting works only in wxNotebook."));
 }
 
 void MyFrame::OnExit(wxCommandEvent& WXUNUSED(event))
@@ -706,7 +706,7 @@ void MyFrame::OnAddSubPage(wxCommandEven
         const int selPos = currBook->GetSelection();
         if ( selPos == wxNOT_FOUND )
         {
-            wxLogError(_T("Select the parent page first!"));
+            wxLogError(wxT("Select the parent page first!"));
             return;
         }
 
@@ -734,7 +734,7 @@ void MyFrame::OnAddPageBefore(wxCommandE
         const int selPos = currBook->GetSelection();
         if ( selPos == wxNOT_FOUND )
         {
-            wxLogError(_T("Select the parent page first!"));
+            wxLogError(wxT("Select the parent page first!"));
             return;
         }
 
@@ -865,35 +865,35 @@ void MyFrame::OnBookCtrl(wxBookCtrlBaseE
         {
             wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGED,
             wxEVT_COMMAND_NOTEBOOK_PAGE_CHANGING,
-            _T("wxNotebook")
+            wxT("wxNotebook")
         },
 #endif // wxUSE_NOTEBOOK
 #if wxUSE_LISTBOOK
         {
             wxEVT_COMMAND_LISTBOOK_PAGE_CHANGED,
             wxEVT_COMMAND_LISTBOOK_PAGE_CHANGING,
-            _T("wxListbook")
+            wxT("wxListbook")
         },
 #endif // wxUSE_LISTBOOK
 #if wxUSE_CHOICEBOOK
         {
             wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGED,
             wxEVT_COMMAND_CHOICEBOOK_PAGE_CHANGING,
-            _T("wxChoicebook")
+            wxT("wxChoicebook")
         },
 #endif // wxUSE_CHOICEBOOK
 #if wxUSE_TREEBOOK
         {
             wxEVT_COMMAND_TREEBOOK_PAGE_CHANGED,
             wxEVT_COMMAND_TREEBOOK_PAGE_CHANGING,
-            _T("wxTreebook")
+            wxT("wxTreebook")
         },
 #endif // wxUSE_TREEBOOK
 #if wxUSE_TOOLBOOK
         {
             wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGED,
             wxEVT_COMMAND_TOOLBOOK_PAGE_CHANGING,
-            _T("wxToolbook")
+            wxT("wxToolbook")
         },
 #endif // wxUSE_TOOLBOOK
     };
@@ -931,7 +931,7 @@ void MyFrame::OnBookCtrl(wxBookCtrlBaseE
                      ) != wxYES )
                 {
                     event.Veto();
-                    veto = _T(" (vetoed)");
+                    veto = wxT(" (vetoed)");
                 }
             }
 
--- samples/text/text.cpp-orig	2009-06-18 18:17:07.592545000 -0500
+++ samples/text/text.cpp	2009-06-18 18:17:14.600623000 -0500
@@ -93,7 +93,7 @@ public:
     static bool ms_logClip;
 
 private:
-    static inline wxChar GetChar(bool on, wxChar c) { return on ? c : _T('-'); }
+    static inline wxChar GetChar(bool on, wxChar c) { return on ? c : wxT('-'); }
 
     void LogKeyEvent(const wxChar *name, wxKeyEvent& event) const;
     void LogClipEvent(const wxChar *what, wxClipboardTextEvent& event);
@@ -172,12 +172,12 @@ public:
 #if wxUSE_CLIPBOARD
     void OnPasteFromClipboard( wxCommandEvent& WXUNUSED(event) )
     {
-        wxLogMessage(_T("Pasting text from clipboard."));
+        wxLogMessage(wxT("Pasting text from clipboard."));
         m_panel->DoPasteFromClipboard();
     }
     void OnCopyToClipboard( wxCommandEvent& WXUNUSED(event) )
     {
-        wxLogMessage(_T("Copying text to clipboard."));
+        wxLogMessage(wxT("Copying text to clipboard."));
         m_panel->DoCopyToClipboard();
     }
 
@@ -213,25 +213,25 @@ public:
     void OnScrollLineDown(wxCommandEvent& WXUNUSED(event))
     {
         if ( !m_panel->m_textrich->LineDown() )
-            wxLogMessage(_T("Already at the bottom"));
+            wxLogMessage(wxT("Already at the bottom"));
     }
 
     void OnScrollLineUp(wxCommandEvent& WXUNUSED(event))
     {
         if ( !m_panel->m_textrich->LineUp() )
-            wxLogMessage(_T("Already at the top"));
+            wxLogMessage(wxT("Already at the top"));
     }
 
     void OnScrollPageDown(wxCommandEvent& WXUNUSED(event))
     {
         if ( !m_panel->m_textrich->PageDown() )
-            wxLogMessage(_T("Already at the bottom"));
+            wxLogMessage(wxT("Already at the bottom"));
     }
 
     void OnScrollPageUp(wxCommandEvent& WXUNUSED(event))
     {
         if ( !m_panel->m_textrich->PageUp() )
-            wxLogMessage(_T("Already at the top"));
+            wxLogMessage(wxT("Already at the top"));
     }
 
     void OnGetLine(wxCommandEvent& WXUNUSED(event))
@@ -297,12 +297,12 @@ public:
 
     void OnSetText(wxCommandEvent& WXUNUSED(event))
     {
-        m_panel->m_text->SetValue(_T("Hello, world! (what else did you expect?)"));
+        m_panel->m_text->SetValue(wxT("Hello, world! (what else did you expect?)"));
     }
 
     void OnChangeText(wxCommandEvent& WXUNUSED(event))
     {
-        m_panel->m_text->ChangeValue(_T("Changed, not set: no event"));
+        m_panel->m_text->ChangeValue(wxT("Changed, not set: no event"));
     }
 
     void OnIdle( wxIdleEvent& event );
@@ -427,84 +427,84 @@ bool MyApp::OnInit()
 {
     // Create the main frame window
     MyFrame *frame = new MyFrame((wxFrame *) NULL,
-            _T("Text wxWidgets sample"), 50, 50, 700, 550);
+            wxT("Text wxWidgets sample"), 50, 50, 700, 550);
     frame->SetSizeHints( 500, 400 );
 
     wxMenu *file_menu = new wxMenu;
-    file_menu->Append(TEXT_SAVE, _T("&Save file\tCtrl-S"),
-                      _T("Save the text control contents to file"));
-    file_menu->Append(TEXT_LOAD, _T("&Load file\tCtrl-O"),
-                      _T("Load the sample file into text control"));
+    file_menu->Append(TEXT_SAVE, wxT("&Save file\tCtrl-S"),
+                      wxT("Save the text control contents to file"));
+    file_menu->Append(TEXT_LOAD, wxT("&Load file\tCtrl-O"),
+                      wxT("Load the sample file into text control"));
     file_menu->AppendSeparator();
-    file_menu->Append(TEXT_RICH_TEXT_TEST, _T("Show Rich Text Editor"));
+    file_menu->Append(TEXT_RICH_TEXT_TEST, wxT("Show Rich Text Editor"));
     file_menu->AppendSeparator();
-    file_menu->Append(TEXT_ABOUT, _T("&About\tAlt-A"));
+    file_menu->Append(TEXT_ABOUT, wxT("&About\tAlt-A"));
     file_menu->AppendSeparator();
-    file_menu->Append(TEXT_QUIT, _T("E&xit\tAlt-X"), _T("Quit this sample"));
+    file_menu->Append(TEXT_QUIT, wxT("E&xit\tAlt-X"), wxT("Quit this sample"));
 
     wxMenuBar *menu_bar = new wxMenuBar( wxMB_DOCKABLE );
-    menu_bar->Append(file_menu, _T("&File"));
+    menu_bar->Append(file_menu, wxT("&File"));
 
 #if wxUSE_TOOLTIPS
     wxMenu *tooltip_menu = new wxMenu;
-    tooltip_menu->Append(TEXT_TOOLTIPS_SETDELAY, _T("Set &delay\tCtrl-D"));
+    tooltip_menu->Append(TEXT_TOOLTIPS_SETDELAY, wxT("Set &delay\tCtrl-D"));
     tooltip_menu->AppendSeparator();
-    tooltip_menu->Append(TEXT_TOOLTIPS_ENABLE, _T("&Toggle tooltips\tCtrl-T"),
-            _T("enable/disable tooltips"), true);
+    tooltip_menu->Append(TEXT_TOOLTIPS_ENABLE, wxT("&Toggle tooltips\tCtrl-T"),
+            wxT("enable/disable tooltips"), true);
     tooltip_menu->Check(TEXT_TOOLTIPS_ENABLE, true);
-    menu_bar->Append(tooltip_menu, _T("&Tooltips"));
+    menu_bar->Append(tooltip_menu, wxT("&Tooltips"));
 #endif // wxUSE_TOOLTIPS
 
 #if wxUSE_CLIPBOARD
     // notice that we use non default accelerators on purpose here to compare
     // their behaviour with the built in handling of standard Ctrl/Cmd-C/V
     wxMenu *menuClipboard = new wxMenu;
-    menuClipboard->Append(TEXT_CLIPBOARD_COPY, _T("&Copy\tCtrl-Shift-C"),
-                          _T("Copy the selection to the clipboard"));
-    menuClipboard->Append(TEXT_CLIPBOARD_PASTE, _T("&Paste\tCtrl-Shift-V"),
-                          _T("Paste from clipboard to the text control"));
+    menuClipboard->Append(TEXT_CLIPBOARD_COPY, wxT("&Copy\tCtrl-Shift-C"),
+                          wxT("Copy the selection to the clipboard"));
+    menuClipboard->Append(TEXT_CLIPBOARD_PASTE, wxT("&Paste\tCtrl-Shift-V"),
+                          wxT("Paste from clipboard to the text control"));
     menuClipboard->AppendSeparator();
-    menuClipboard->AppendCheckItem(TEXT_CLIPBOARD_VETO, _T("Vet&o\tCtrl-Shift-O"),
-                                   _T("Veto all clipboard operations"));
-    menu_bar->Append(menuClipboard, _T("&Clipboard"));
+    menuClipboard->AppendCheckItem(TEXT_CLIPBOARD_VETO, wxT("Vet&o\tCtrl-Shift-O"),
+                                   wxT("Veto all clipboard operations"));
+    menu_bar->Append(menuClipboard, wxT("&Clipboard"));
 #endif // wxUSE_CLIPBOARD
 
     wxMenu *menuText = new wxMenu;
-    menuText->Append(TEXT_ADD_SOME, _T("&Append some text\tCtrl-A"));
-    menuText->Append(TEXT_ADD_FREEZE, _T("&Append text with freeze/thaw\tShift-Ctrl-A"));
-    menuText->Append(TEXT_REMOVE, _T("&Remove first 10 characters\tCtrl-Y"));
-    menuText->Append(TEXT_REPLACE, _T("&Replace characters 4 to 8 with ABC\tCtrl-R"));
-    menuText->Append(TEXT_SELECT, _T("&Select characters 4 to 8\tCtrl-I"));
-    menuText->Append(TEXT_SET, _T("&Set the first text zone value\tCtrl-E"));
-    menuText->Append(TEXT_CHANGE, _T("&Change the first text zone value\tShift-Ctrl-E"));
+    menuText->Append(TEXT_ADD_SOME, wxT("&Append some text\tCtrl-A"));
+    menuText->Append(TEXT_ADD_FREEZE, wxT("&Append text with freeze/thaw\tShift-Ctrl-A"));
+    menuText->Append(TEXT_REMOVE, wxT("&Remove first 10 characters\tCtrl-Y"));
+    menuText->Append(TEXT_REPLACE, wxT("&Replace characters 4 to 8 with ABC\tCtrl-R"));
+    menuText->Append(TEXT_SELECT, wxT("&Select characters 4 to 8\tCtrl-I"));
+    menuText->Append(TEXT_SET, wxT("&Set the first text zone value\tCtrl-E"));
+    menuText->Append(TEXT_CHANGE, wxT("&Change the first text zone value\tShift-Ctrl-E"));
     menuText->AppendSeparator();
-    menuText->Append(TEXT_MOVE_ENDTEXT, _T("Move cursor to the end of &text"));
-    menuText->Append(TEXT_MOVE_ENDENTRY, _T("Move cursor to the end of &entry"));
-    menuText->AppendCheckItem(TEXT_SET_EDITABLE, _T("Toggle &editable state"));
-    menuText->AppendCheckItem(TEXT_SET_ENABLED, _T("Toggle e&nabled state"));
+    menuText->Append(TEXT_MOVE_ENDTEXT, wxT("Move cursor to the end of &text"));
+    menuText->Append(TEXT_MOVE_ENDENTRY, wxT("Move cursor to the end of &entry"));
+    menuText->AppendCheckItem(TEXT_SET_EDITABLE, wxT("Toggle &editable state"));
+    menuText->AppendCheckItem(TEXT_SET_ENABLED, wxT("Toggle e&nabled state"));
     menuText->Check(TEXT_SET_EDITABLE, true);
     menuText->Check(TEXT_SET_ENABLED, true);
     menuText->AppendSeparator();
-    menuText->Append(TEXT_LINE_DOWN, _T("Scroll text one line down"));
-    menuText->Append(TEXT_LINE_UP, _T("Scroll text one line up"));
-    menuText->Append(TEXT_PAGE_DOWN, _T("Scroll text one page down"));
-    menuText->Append(TEXT_PAGE_UP, _T("Scroll text one page up"));
+    menuText->Append(TEXT_LINE_DOWN, wxT("Scroll text one line down"));
+    menuText->Append(TEXT_LINE_UP, wxT("Scroll text one line up"));
+    menuText->Append(TEXT_PAGE_DOWN, wxT("Scroll text one page down"));
+    menuText->Append(TEXT_PAGE_UP, wxT("Scroll text one page up"));
     menuText->AppendSeparator();
-    menuText->Append(TEXT_GET_LINE, _T("Get the text of a line of the tabbed multiline"));
-    menuText->Append(TEXT_GET_LINELENGTH, _T("Get the length of a line of the tabbed multiline"));
-    menu_bar->Append(menuText, _T("Te&xt"));
+    menuText->Append(TEXT_GET_LINE, wxT("Get the text of a line of the tabbed multiline"));
+    menuText->Append(TEXT_GET_LINELENGTH, wxT("Get the length of a line of the tabbed multiline"));
+    menu_bar->Append(menuText, wxT("Te&xt"));
 
 #if wxUSE_LOG
     wxMenu *menuLog = new wxMenu;
-    menuLog->AppendCheckItem(TEXT_LOG_KEY, _T("Log &key events"));
-    menuLog->AppendCheckItem(TEXT_LOG_CHAR, _T("Log &char events"));
-    menuLog->AppendCheckItem(TEXT_LOG_MOUSE, _T("Log &mouse events"));
-    menuLog->AppendCheckItem(TEXT_LOG_TEXT, _T("Log &text events"));
-    menuLog->AppendCheckItem(TEXT_LOG_FOCUS, _T("Log &focus events"));
-    menuLog->AppendCheckItem(TEXT_LOG_CLIP, _T("Log clip&board events"));
+    menuLog->AppendCheckItem(TEXT_LOG_KEY, wxT("Log &key events"));
+    menuLog->AppendCheckItem(TEXT_LOG_CHAR, wxT("Log &char events"));
+    menuLog->AppendCheckItem(TEXT_LOG_MOUSE, wxT("Log &mouse events"));
+    menuLog->AppendCheckItem(TEXT_LOG_TEXT, wxT("Log &text events"));
+    menuLog->AppendCheckItem(TEXT_LOG_FOCUS, wxT("Log &focus events"));
+    menuLog->AppendCheckItem(TEXT_LOG_CLIP, wxT("Log clip&board events"));
     menuLog->AppendSeparator();
-    menuLog->Append(TEXT_CLEAR, _T("&Clear the log\tCtrl-L"),
-                    _T("Clear the log window contents"));
+    menuLog->Append(TEXT_CLEAR, wxT("&Clear the log\tCtrl-L"),
+                    wxT("Clear the log window contents"));
 
     // select only the interesting events by default
     MyTextCtrl::ms_logClip =
@@ -514,7 +514,7 @@ bool MyApp::OnInit()
     menuLog->Check(TEXT_LOG_CHAR, MyTextCtrl::ms_logChar);
     menuLog->Check(TEXT_LOG_TEXT, MyTextCtrl::ms_logText);
 
-    menu_bar->Append(menuLog, _T("&Log"));
+    menu_bar->Append(menuLog, wxT("&Log"));
 #endif // wxUSE_LOG
 
     frame->SetMenuBar(menu_bar);
@@ -564,128 +564,128 @@ void MyTextCtrl::LogKeyEvent(const wxCha
     {
         switch ( keycode )
         {
-            case WXK_BACK: key = _T("BACK"); break;
-            case WXK_TAB: key = _T("TAB"); break;
-            case WXK_RETURN: key = _T("RETURN"); break;
-            case WXK_ESCAPE: key = _T("ESCAPE"); break;
-            case WXK_SPACE: key = _T("SPACE"); break;
-            case WXK_DELETE: key = _T("DELETE"); break;
-            case WXK_START: key = _T("START"); break;
-            case WXK_LBUTTON: key = _T("LBUTTON"); break;
-            case WXK_RBUTTON: key = _T("RBUTTON"); break;
-            case WXK_CANCEL: key = _T("CANCEL"); break;
-            case WXK_MBUTTON: key = _T("MBUTTON"); break;
-            case WXK_CLEAR: key = _T("CLEAR"); break;
-            case WXK_SHIFT: key = _T("SHIFT"); break;
-            case WXK_ALT: key = _T("ALT"); break;
-            case WXK_CONTROL: key = _T("CONTROL"); break;
-            case WXK_MENU: key = _T("MENU"); break;
-            case WXK_PAUSE: key = _T("PAUSE"); break;
-            case WXK_CAPITAL: key = _T("CAPITAL"); break;
-            case WXK_END: key = _T("END"); break;
-            case WXK_HOME: key = _T("HOME"); break;
-            case WXK_LEFT: key = _T("LEFT"); break;
-            case WXK_UP: key = _T("UP"); break;
-            case WXK_RIGHT: key = _T("RIGHT"); break;
-            case WXK_DOWN: key = _T("DOWN"); break;
-            case WXK_SELECT: key = _T("SELECT"); break;
-            case WXK_PRINT: key = _T("PRINT"); break;
-            case WXK_EXECUTE: key = _T("EXECUTE"); break;
-            case WXK_SNAPSHOT: key = _T("SNAPSHOT"); break;
-            case WXK_INSERT: key = _T("INSERT"); break;
-            case WXK_HELP: key = _T("HELP"); break;
-            case WXK_NUMPAD0: key = _T("NUMPAD0"); break;
-            case WXK_NUMPAD1: key = _T("NUMPAD1"); break;
-            case WXK_NUMPAD2: key = _T("NUMPAD2"); break;
-            case WXK_NUMPAD3: key = _T("NUMPAD3"); break;
-            case WXK_NUMPAD4: key = _T("NUMPAD4"); break;
-            case WXK_NUMPAD5: key = _T("NUMPAD5"); break;
-            case WXK_NUMPAD6: key = _T("NUMPAD6"); break;
-            case WXK_NUMPAD7: key = _T("NUMPAD7"); break;
-            case WXK_NUMPAD8: key = _T("NUMPAD8"); break;
-            case WXK_NUMPAD9: key = _T("NUMPAD9"); break;
-            case WXK_MULTIPLY: key = _T("MULTIPLY"); break;
-            case WXK_ADD: key = _T("ADD"); break;
-            case WXK_SEPARATOR: key = _T("SEPARATOR"); break;
-            case WXK_SUBTRACT: key = _T("SUBTRACT"); break;
-            case WXK_DECIMAL: key = _T("DECIMAL"); break;
-            case WXK_DIVIDE: key = _T("DIVIDE"); break;
-            case WXK_F1: key = _T("F1"); break;
-            case WXK_F2: key = _T("F2"); break;
-            case WXK_F3: key = _T("F3"); break;
-            case WXK_F4: key = _T("F4"); break;
-            case WXK_F5: key = _T("F5"); break;
-            case WXK_F6: key = _T("F6"); break;
-            case WXK_F7: key = _T("F7"); break;
-            case WXK_F8: key = _T("F8"); break;
-            case WXK_F9: key = _T("F9"); break;
-            case WXK_F10: key = _T("F10"); break;
-            case WXK_F11: key = _T("F11"); break;
-            case WXK_F12: key = _T("F12"); break;
-            case WXK_F13: key = _T("F13"); break;
-            case WXK_F14: key = _T("F14"); break;
-            case WXK_F15: key = _T("F15"); break;
-            case WXK_F16: key = _T("F16"); break;
-            case WXK_F17: key = _T("F17"); break;
-            case WXK_F18: key = _T("F18"); break;
-            case WXK_F19: key = _T("F19"); break;
-            case WXK_F20: key = _T("F20"); break;
-            case WXK_F21: key = _T("F21"); break;
-            case WXK_F22: key = _T("F22"); break;
-            case WXK_F23: key = _T("F23"); break;
-            case WXK_F24: key = _T("F24"); break;
-            case WXK_NUMLOCK: key = _T("NUMLOCK"); break;
-            case WXK_SCROLL: key = _T("SCROLL"); break;
-            case WXK_PAGEUP: key = _T("PAGEUP"); break;
-            case WXK_PAGEDOWN: key = _T("PAGEDOWN"); break;
-            case WXK_NUMPAD_SPACE: key = _T("NUMPAD_SPACE"); break;
-            case WXK_NUMPAD_TAB: key = _T("NUMPAD_TAB"); break;
-            case WXK_NUMPAD_ENTER: key = _T("NUMPAD_ENTER"); break;
-            case WXK_NUMPAD_F1: key = _T("NUMPAD_F1"); break;
-            case WXK_NUMPAD_F2: key = _T("NUMPAD_F2"); break;
-            case WXK_NUMPAD_F3: key = _T("NUMPAD_F3"); break;
-            case WXK_NUMPAD_F4: key = _T("NUMPAD_F4"); break;
-            case WXK_NUMPAD_HOME: key = _T("NUMPAD_HOME"); break;
-            case WXK_NUMPAD_LEFT: key = _T("NUMPAD_LEFT"); break;
-            case WXK_NUMPAD_UP: key = _T("NUMPAD_UP"); break;
-            case WXK_NUMPAD_RIGHT: key = _T("NUMPAD_RIGHT"); break;
-            case WXK_NUMPAD_DOWN: key = _T("NUMPAD_DOWN"); break;
-            case WXK_NUMPAD_PAGEUP: key = _T("NUMPAD_PAGEUP"); break;
-            case WXK_NUMPAD_PAGEDOWN: key = _T("NUMPAD_PAGEDOWN"); break;
-            case WXK_NUMPAD_END: key = _T("NUMPAD_END"); break;
-            case WXK_NUMPAD_BEGIN: key = _T("NUMPAD_BEGIN"); break;
-            case WXK_NUMPAD_INSERT: key = _T("NUMPAD_INSERT"); break;
-            case WXK_NUMPAD_DELETE: key = _T("NUMPAD_DELETE"); break;
-            case WXK_NUMPAD_EQUAL: key = _T("NUMPAD_EQUAL"); break;
-            case WXK_NUMPAD_MULTIPLY: key = _T("NUMPAD_MULTIPLY"); break;
-            case WXK_NUMPAD_ADD: key = _T("NUMPAD_ADD"); break;
-            case WXK_NUMPAD_SEPARATOR: key = _T("NUMPAD_SEPARATOR"); break;
-            case WXK_NUMPAD_SUBTRACT: key = _T("NUMPAD_SUBTRACT"); break;
-            case WXK_NUMPAD_DECIMAL: key = _T("NUMPAD_DECIMAL"); break;
+            case WXK_BACK: key = wxT("BACK"); break;
+            case WXK_TAB: key = wxT("TAB"); break;
+            case WXK_RETURN: key = wxT("RETURN"); break;
+            case WXK_ESCAPE: key = wxT("ESCAPE"); break;
+            case WXK_SPACE: key = wxT("SPACE"); break;
+            case WXK_DELETE: key = wxT("DELETE"); break;
+            case WXK_START: key = wxT("START"); break;
+            case WXK_LBUTTON: key = wxT("LBUTTON"); break;
+            case WXK_RBUTTON: key = wxT("RBUTTON"); break;
+            case WXK_CANCEL: key = wxT("CANCEL"); break;
+            case WXK_MBUTTON: key = wxT("MBUTTON"); break;
+            case WXK_CLEAR: key = wxT("CLEAR"); break;
+            case WXK_SHIFT: key = wxT("SHIFT"); break;
+            case WXK_ALT: key = wxT("ALT"); break;
+            case WXK_CONTROL: key = wxT("CONTROL"); break;
+            case WXK_MENU: key = wxT("MENU"); break;
+            case WXK_PAUSE: key = wxT("PAUSE"); break;
+            case WXK_CAPITAL: key = wxT("CAPITAL"); break;
+            case WXK_END: key = wxT("END"); break;
+            case WXK_HOME: key = wxT("HOME"); break;
+            case WXK_LEFT: key = wxT("LEFT"); break;
+            case WXK_UP: key = wxT("UP"); break;
+            case WXK_RIGHT: key = wxT("RIGHT"); break;
+            case WXK_DOWN: key = wxT("DOWN"); break;
+            case WXK_SELECT: key = wxT("SELECT"); break;
+            case WXK_PRINT: key = wxT("PRINT"); break;
+            case WXK_EXECUTE: key = wxT("EXECUTE"); break;
+            case WXK_SNAPSHOT: key = wxT("SNAPSHOT"); break;
+            case WXK_INSERT: key = wxT("INSERT"); break;
+            case WXK_HELP: key = wxT("HELP"); break;
+            case WXK_NUMPAD0: key = wxT("NUMPAD0"); break;
+            case WXK_NUMPAD1: key = wxT("NUMPAD1"); break;
+            case WXK_NUMPAD2: key = wxT("NUMPAD2"); break;
+            case WXK_NUMPAD3: key = wxT("NUMPAD3"); break;
+            case WXK_NUMPAD4: key = wxT("NUMPAD4"); break;
+            case WXK_NUMPAD5: key = wxT("NUMPAD5"); break;
+            case WXK_NUMPAD6: key = wxT("NUMPAD6"); break;
+            case WXK_NUMPAD7: key = wxT("NUMPAD7"); break;
+            case WXK_NUMPAD8: key = wxT("NUMPAD8"); break;
+            case WXK_NUMPAD9: key = wxT("NUMPAD9"); break;
+            case WXK_MULTIPLY: key = wxT("MULTIPLY"); break;
+            case WXK_ADD: key = wxT("ADD"); break;
+            case WXK_SEPARATOR: key = wxT("SEPARATOR"); break;
+            case WXK_SUBTRACT: key = wxT("SUBTRACT"); break;
+            case WXK_DECIMAL: key = wxT("DECIMAL"); break;
+            case WXK_DIVIDE: key = wxT("DIVIDE"); break;
+            case WXK_F1: key = wxT("F1"); break;
+            case WXK_F2: key = wxT("F2"); break;
+            case WXK_F3: key = wxT("F3"); break;
+            case WXK_F4: key = wxT("F4"); break;
+            case WXK_F5: key = wxT("F5"); break;
+            case WXK_F6: key = wxT("F6"); break;
+            case WXK_F7: key = wxT("F7"); break;
+            case WXK_F8: key = wxT("F8"); break;
+            case WXK_F9: key = wxT("F9"); break;
+            case WXK_F10: key = wxT("F10"); break;
+            case WXK_F11: key = wxT("F11"); break;
+            case WXK_F12: key = wxT("F12"); break;
+            case WXK_F13: key = wxT("F13"); break;
+            case WXK_F14: key = wxT("F14"); break;
+            case WXK_F15: key = wxT("F15"); break;
+            case WXK_F16: key = wxT("F16"); break;
+            case WXK_F17: key = wxT("F17"); break;
+            case WXK_F18: key = wxT("F18"); break;
+            case WXK_F19: key = wxT("F19"); break;
+            case WXK_F20: key = wxT("F20"); break;
+            case WXK_F21: key = wxT("F21"); break;
+            case WXK_F22: key = wxT("F22"); break;
+            case WXK_F23: key = wxT("F23"); break;
+            case WXK_F24: key = wxT("F24"); break;
+            case WXK_NUMLOCK: key = wxT("NUMLOCK"); break;
+            case WXK_SCROLL: key = wxT("SCROLL"); break;
+            case WXK_PAGEUP: key = wxT("PAGEUP"); break;
+            case WXK_PAGEDOWN: key = wxT("PAGEDOWN"); break;
+            case WXK_NUMPAD_SPACE: key = wxT("NUMPAD_SPACE"); break;
+            case WXK_NUMPAD_TAB: key = wxT("NUMPAD_TAB"); break;
+            case WXK_NUMPAD_ENTER: key = wxT("NUMPAD_ENTER"); break;
+            case WXK_NUMPAD_F1: key = wxT("NUMPAD_F1"); break;
+            case WXK_NUMPAD_F2: key = wxT("NUMPAD_F2"); break;
+            case WXK_NUMPAD_F3: key = wxT("NUMPAD_F3"); break;
+            case WXK_NUMPAD_F4: key = wxT("NUMPAD_F4"); break;
+            case WXK_NUMPAD_HOME: key = wxT("NUMPAD_HOME"); break;
+            case WXK_NUMPAD_LEFT: key = wxT("NUMPAD_LEFT"); break;
+            case WXK_NUMPAD_UP: key = wxT("NUMPAD_UP"); break;
+            case WXK_NUMPAD_RIGHT: key = wxT("NUMPAD_RIGHT"); break;
+            case WXK_NUMPAD_DOWN: key = wxT("NUMPAD_DOWN"); break;
+            case WXK_NUMPAD_PAGEUP: key = wxT("NUMPAD_PAGEUP"); break;
+            case WXK_NUMPAD_PAGEDOWN: key = wxT("NUMPAD_PAGEDOWN"); break;
+            case WXK_NUMPAD_END: key = wxT("NUMPAD_END"); break;
+            case WXK_NUMPAD_BEGIN: key = wxT("NUMPAD_BEGIN"); break;
+            case WXK_NUMPAD_INSERT: key = wxT("NUMPAD_INSERT"); break;
+            case WXK_NUMPAD_DELETE: key = wxT("NUMPAD_DELETE"); break;
+            case WXK_NUMPAD_EQUAL: key = wxT("NUMPAD_EQUAL"); break;
+            case WXK_NUMPAD_MULTIPLY: key = wxT("NUMPAD_MULTIPLY"); break;
+            case WXK_NUMPAD_ADD: key = wxT("NUMPAD_ADD"); break;
+            case WXK_NUMPAD_SEPARATOR: key = wxT("NUMPAD_SEPARATOR"); break;
+            case WXK_NUMPAD_SUBTRACT: key = wxT("NUMPAD_SUBTRACT"); break;
+            case WXK_NUMPAD_DECIMAL: key = wxT("NUMPAD_DECIMAL"); break;
 
             default:
             {
                if ( wxIsprint((int)keycode) )
-                   key.Printf(_T("'%c'"), (char)keycode);
+                   key.Printf(wxT("'%c'"), (char)keycode);
                else if ( keycode > 0 && keycode < 27 )
-                   key.Printf(_("Ctrl-%c"), _T('A') + keycode - 1);
+                   key.Printf(_("Ctrl-%c"), wxT('A') + keycode - 1);
                else
-                   key.Printf(_T("unknown (%ld)"), keycode);
+                   key.Printf(wxT("unknown (%ld)"), keycode);
             }
         }
     }
 
 #if wxUSE_UNICODE
-    key += wxString::Format(_T(" (Unicode: %#04x)"), event.GetUnicodeKey());
+    key += wxString::Format(wxT(" (Unicode: %#04x)"), event.GetUnicodeKey());
 #endif // wxUSE_UNICODE
 
-    wxLogMessage( _T("%s event: %s (flags = %c%c%c%c)"),
+    wxLogMessage( wxT("%s event: %s (flags = %c%c%c%c)"),
                   name,
                   key.c_str(),
-                  GetChar( event.ControlDown(), _T('C') ),
-                  GetChar( event.AltDown(), _T('A') ),
-                  GetChar( event.ShiftDown(), _T('S') ),
-                  GetChar( event.MetaDown(), _T('M') ) );
+                  GetChar( event.ControlDown(), wxT('C') ),
+                  GetChar( event.AltDown(), wxT('A') ),
+                  GetChar( event.ShiftDown(), wxT('S') ),
+                  GetChar( event.MetaDown(), wxT('M') ) );
 }
 
 static wxString GetMouseEventDesc(const wxMouseEvent& ev)
@@ -695,31 +695,31 @@ static wxString GetMouseEventDesc(const 
     bool dbl, up;
     if ( ev.LeftDown() || ev.LeftUp() || ev.LeftDClick() )
     {
-        button = _T("Left");
+        button = wxT("Left");
         dbl = ev.LeftDClick();
         up = ev.LeftUp();
     }
     else if ( ev.MiddleDown() || ev.MiddleUp() || ev.MiddleDClick() )
     {
-        button = _T("Middle");
+        button = wxT("Middle");
         dbl = ev.MiddleDClick();
         up = ev.MiddleUp();
     }
     else if ( ev.RightDown() || ev.RightUp() || ev.RightDClick() )
     {
-        button = _T("Right");
+        button = wxT("Right");
         dbl = ev.RightDClick();
         up = ev.RightUp();
     }
     else
     {
-        return _T("Unknown mouse event");
+        return wxT("Unknown mouse event");
     }
 
-    return wxString::Format(_T("%s mouse button %s"),
+    return wxString::Format(wxT("%s mouse button %s"),
                             button.c_str(),
-                            dbl ? _T("double clicked")
-                                : up ? _T("released") : _T("clicked"));
+                            dbl ? wxT("double clicked")
+                                : up ? wxT("released") : wxT("clicked"));
 }
 
 void MyTextCtrl::OnMouseEvent(wxMouseEvent& ev)
@@ -734,35 +734,35 @@ void MyTextCtrl::OnMouseEvent(wxMouseEve
         wxString msg;
         if ( ev.Entering() )
         {
-            msg = _T("Mouse entered the window");
+            msg = wxT("Mouse entered the window");
         }
         else if ( ev.Leaving() )
         {
-            msg = _T("Mouse left the window");
+            msg = wxT("Mouse left the window");
         }
         else
         {
             msg = GetMouseEventDesc(ev);
         }
 
-        msg << _T(" at (") << ev.GetX() << _T(", ") << ev.GetY() << _T(") ");
+        msg << wxT(" at (") << ev.GetX() << wxT(", ") << ev.GetY() << wxT(") ");
 
         long pos;
         wxTextCtrlHitTestResult rc = HitTest(ev.GetPosition(), &pos);
         if ( rc != wxTE_HT_UNKNOWN )
         {
-            msg << _T("at position ") << pos << _T(' ');
+            msg << wxT("at position ") << pos << wxT(' ');
         }
 
-        msg << _T("[Flags: ")
-            << GetChar( ev.LeftIsDown(), _T('1') )
-            << GetChar( ev.MiddleIsDown(), _T('2') )
-            << GetChar( ev.RightIsDown(), _T('3') )
-            << GetChar( ev.ControlDown(), _T('C') )
-            << GetChar( ev.AltDown(), _T('A') )
-            << GetChar( ev.ShiftDown(), _T('S') )
-            << GetChar( ev.MetaDown(), _T('M') )
-            << _T(']');
+        msg << wxT("[Flags: ")
+            << GetChar( ev.LeftIsDown(), wxT('1') )
+            << GetChar( ev.MiddleIsDown(), wxT('2') )
+            << GetChar( ev.RightIsDown(), wxT('3') )
+            << GetChar( ev.ControlDown(), wxT('C') )
+            << GetChar( ev.AltDown(), wxT('A') )
+            << GetChar( ev.ShiftDown(), wxT('S') )
+            << GetChar( ev.MetaDown(), wxT('M') )
+            << wxT(']');
 
         wxLogMessage(msg);
     }
@@ -791,16 +791,16 @@ void MyTextCtrl::OnText(wxCommandEvent& 
         return;
 
     MyTextCtrl *win = (MyTextCtrl *)event.GetEventObject();
-    const wxChar *changeVerb = win->IsModified() ? _T("changed")
-                                                 : _T("set by program");
+    const wxChar *changeVerb = win->IsModified() ? wxT("changed")
+                                                 : wxT("set by program");
     const wxChar *data = (const wxChar *)(win->GetClientData());
     if ( data )
     {
-        wxLogMessage(_T("Text %s in control \"%s\""), changeVerb, data);
+        wxLogMessage(wxT("Text %s in control \"%s\""), changeVerb, data);
     }
     else
     {
-        wxLogMessage(_T("Text %s in some control"), changeVerb);
+        wxLogMessage(wxT("Text %s in some control"), changeVerb);
     }
 }
 
@@ -813,39 +813,39 @@ void MyTextCtrl::OnTextEnter(wxCommandEv
     const wxChar *data = (const wxChar *)(win->GetClientData());
     if ( data )
     {
-        wxLogMessage(_T("Enter pressed in control '%s'"), data);
+        wxLogMessage(wxT("Enter pressed in control '%s'"), data);
     }
     else
     {
-        wxLogMessage(_T("Enter pressed in some control"));
+        wxLogMessage(wxT("Enter pressed in some control"));
     }
 }
 
 void MyTextCtrl::OnTextMaxLen(wxCommandEvent& WXUNUSED(event))
 {
-    wxLogMessage(_T("You can't enter more characters into this control."));
+    wxLogMessage(wxT("You can't enter more characters into this control."));
 }
 
 
 void MyTextCtrl::OnTextCut(wxClipboardTextEvent& event)
 {
-    LogClipEvent(_T("cut to"), event);
+    LogClipEvent(wxT("cut to"), event);
 }
 
 void MyTextCtrl::OnTextCopy(wxClipboardTextEvent& event)
 {
-    LogClipEvent(_T("copied to"), event);
+    LogClipEvent(wxT("copied to"), event);
 }
 
 void MyTextCtrl::OnTextPaste(wxClipboardTextEvent& event)
 {
-    LogClipEvent(_T("pasted from"), event);
+    LogClipEvent(wxT("pasted from"), event);
 }
 
 void MyTextCtrl::LogClipEvent(const wxChar *what, wxClipboardTextEvent& event)
 {
     wxFrame *frame = wxDynamicCast(wxGetTopLevelParent(this), wxFrame);
-    wxCHECK_RET( frame, _T("no parent frame?") );
+    wxCHECK_RET( frame, wxT("no parent frame?") );
 
     const bool veto = frame->GetMenuBar()->IsChecked(TEXT_CLIPBOARD_VETO);
     if ( !veto )
@@ -853,8 +853,8 @@ void MyTextCtrl::LogClipEvent(const wxCh
 
     if ( ms_logClip )
     {
-        wxLogMessage(_T("Text %s%s the clipboard."),
-                     veto ? _T("not ") : _T(""), what);
+        wxLogMessage(wxT("Text %s%s the clipboard."),
+                     veto ? wxT("not ") : wxT(""), what);
     }
 }
 
@@ -870,7 +870,7 @@ void MyTextCtrl::OnTextURL(wxTextUrlEven
     long start = event.GetURLStart(),
          end = event.GetURLEnd();
 
-    wxLogMessage(_T("Mouse event over URL '%s': %s"),
+    wxLogMessage(wxT("Mouse event over URL '%s': %s"),
                  GetValue().Mid(start, end - start).c_str(),
                  GetMouseEventDesc(ev).c_str());
 }
@@ -878,7 +878,7 @@ void MyTextCtrl::OnTextURL(wxTextUrlEven
 void MyTextCtrl::OnChar(wxKeyEvent& event)
 {
     if ( ms_logChar )
-        LogKeyEvent( _T("Char"), event);
+        LogKeyEvent( wxT("Char"), event);
 
     event.Skip();
 }
@@ -886,7 +886,7 @@ void MyTextCtrl::OnChar(wxKeyEvent& even
 void MyTextCtrl::OnKeyUp(wxKeyEvent& event)
 {
     if ( ms_logKey )
-        LogKeyEvent( _T("Key up"), event);
+        LogKeyEvent( wxT("Key up"), event);
 
     event.Skip();
 }
@@ -901,7 +901,7 @@ void MyTextCtrl::OnKeyDown(wxKeyEvent& e
                 long line, column, pos = GetInsertionPoint();
                 PositionToXY(pos, &column, &line);
 
-                wxLogMessage(_T("Current position: %ld\nCurrent line, column: (%ld, %ld)\nNumber of lines: %ld\nCurrent line length: %ld\nTotal text length: %u (%ld)"),
+                wxLogMessage(wxT("Current position: %ld\nCurrent line, column: (%ld, %ld)\nNumber of lines: %ld\nCurrent line length: %ld\nTotal text length: %u (%ld)"),
                         pos,
                         line, column,
                         (long) GetNumberOfLines(),
@@ -914,8 +914,8 @@ void MyTextCtrl::OnKeyDown(wxKeyEvent& e
 
                 wxString sel = GetStringSelection();
 
-                wxLogMessage(_T("Selection: from %ld to %ld."), from, to);
-                wxLogMessage(_T("Selection = '%s' (len = %u)"),
+                wxLogMessage(wxT("Selection: from %ld to %ld."), from, to);
+                wxLogMessage(wxT("Selection = '%s' (len = %u)"),
                              sel.c_str(),
                              (unsigned int) sel.length());
             }
@@ -948,38 +948,38 @@ void MyTextCtrl::OnKeyDown(wxKeyEvent& e
 
         case WXK_F5:
             // insert a blank line
-            WriteText(_T("\n"));
+            WriteText(wxT("\n"));
             break;
 
         case WXK_F6:
-            wxLogMessage(_T("IsModified() before SetValue(): %d"),
+            wxLogMessage(wxT("IsModified() before SetValue(): %d"),
                          IsModified());
-            ChangeValue(_T("ChangeValue() has been called"));
-            wxLogMessage(_T("IsModified() after SetValue(): %d"),
+            ChangeValue(wxT("ChangeValue() has been called"));
+            wxLogMessage(wxT("IsModified() after SetValue(): %d"),
                          IsModified());
             break;
 
         case WXK_F7:
-            wxLogMessage(_T("Position 10 should be now visible."));
+            wxLogMessage(wxT("Position 10 should be now visible."));
             ShowPosition(10);
             break;
 
         case WXK_F8:
-            wxLogMessage(_T("Control has been cleared"));
+            wxLogMessage(wxT("Control has been cleared"));
             Clear();
             break;
 
         case WXK_F9:
-            WriteText(_T("WriteText() has been called"));
+            WriteText(wxT("WriteText() has been called"));
             break;
 
         case WXK_F10:
-            AppendText(_T("AppendText() has been called"));
+            AppendText(wxT("AppendText() has been called"));
             break;
 
         case WXK_F11:
             DiscardEdits();
-            wxLogMessage(_T("Control marked as non modified"));
+            wxLogMessage(wxT("Control marked as non modified"));
             break;
     }
 
@@ -997,7 +997,7 @@ MyPanel::MyPanel( wxFrame *frame, int x,
        : wxPanel( frame, wxID_ANY, wxPoint(x, y), wxSize(w, h) )
 {
 #if wxUSE_LOG
-    m_log = new wxTextCtrl( this, wxID_ANY, _T("This is the log window.\n"),
+    m_log = new wxTextCtrl( this, wxID_ANY, wxT("This is the log window.\n"),
                             wxPoint(5,260), wxSize(630,100),
                             wxTE_MULTILINE | wxTE_READONLY /* | wxTE_RICH */);
 
@@ -1006,28 +1006,28 @@ MyPanel::MyPanel( wxFrame *frame, int x,
 
     // single line text controls
 
-    m_text = new MyTextCtrl( this, wxID_ANY, _T("Single line."),
+    m_text = new MyTextCtrl( this, wxID_ANY, wxT("Single line."),
                              wxDefaultPosition, wxDefaultSize,
                              wxTE_PROCESS_ENTER);
     m_text->SetForegroundColour(*wxBLUE);
     m_text->SetBackgroundColour(*wxLIGHT_GREY);
-    (*m_text) << _T(" Appended.");
+    (*m_text) << wxT(" Appended.");
     m_text->SetInsertionPoint(0);
-    m_text->WriteText( _T("Prepended. ") );
+    m_text->WriteText( wxT("Prepended. ") );
 
-    m_password = new MyTextCtrl( this, wxID_ANY, _T(""),
+    m_password = new MyTextCtrl( this, wxID_ANY, wxT(""),
       wxPoint(10,50), wxSize(140,wxDefaultCoord), wxTE_PASSWORD );
 
-    m_readonly = new MyTextCtrl( this, wxID_ANY, _T("Read only"),
+    m_readonly = new MyTextCtrl( this, wxID_ANY, wxT("Read only"),
       wxPoint(10,90), wxSize(140,wxDefaultCoord), wxTE_READONLY );
 
-    m_limited = new MyTextCtrl(this, wxID_ANY, _T("Max 8 ch"),
+    m_limited = new MyTextCtrl(this, wxID_ANY, wxT("Max 8 ch"),
                               wxPoint(10, 130), wxSize(140, wxDefaultCoord));
     m_limited->SetMaxLength(8);
 
     // multi line text controls
 
-    m_horizontal = new MyTextCtrl( this, wxID_ANY, _T("Multiline text control with a horizontal scrollbar.\n"),
+    m_horizontal = new MyTextCtrl( this, wxID_ANY, wxT("Multiline text control with a horizontal scrollbar.\n"),
       wxPoint(10,170), wxSize(140,70), wxTE_MULTILINE | wxHSCROLL);
 
     // a little hack to use the command line argument for encoding testing
@@ -1037,21 +1037,21 @@ MyPanel::MyPanel( wxFrame *frame, int x,
         {
             case '2':
                 m_horizontal->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL,
-                                             false, _T(""),
+                                             false, wxT(""),
                                              wxFONTENCODING_ISO8859_2));
-                m_horizontal->AppendText(_T("\256lu\273ou\350k\375 k\371\362 zb\354sile \350e\271tina \253\273"));
+                m_horizontal->AppendText(wxT("\256lu\273ou\350k\375 k\371\362 zb\354sile \350e\271tina \253\273"));
                 break;
 
             case '1':
                 m_horizontal->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL,
-                                             false, _T(""),
+                                             false, wxT(""),
                                              wxFONTENCODING_CP1251));
-                m_horizontal->AppendText(_T("\317\360\350\342\345\362!"));
+                m_horizontal->AppendText(wxT("\317\360\350\342\345\362!"));
                 break;
 
             case '8':
                 m_horizontal->SetFont(wxFont(18, wxSWISS, wxNORMAL, wxNORMAL,
-                                             false, _T(""),
+                                             false, wxT(""),
                                              wxFONTENCODING_CP1251));
 #if wxUSE_UNICODE
                 m_horizontal->AppendText(L"\x0412\x0430\x0434\x0438\x043c \x0426");
@@ -1062,37 +1062,37 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     }
     else
     {
-        m_horizontal->AppendText(_T("Text in default encoding"));
+        m_horizontal->AppendText(wxT("Text in default encoding"));
     }
 
-    m_multitext = new MyTextCtrl( this, wxID_ANY, _T("Multi line."),
+    m_multitext = new MyTextCtrl( this, wxID_ANY, wxT("Multi line."),
       wxPoint(180,10), wxSize(200,70), wxTE_MULTILINE );
     m_multitext->SetFont(*wxITALIC_FONT);
-    (*m_multitext) << _T(" Appended.");
+    (*m_multitext) << wxT(" Appended.");
     m_multitext->SetInsertionPoint(0);
-    m_multitext->WriteText( _T("Prepended. ") );
+    m_multitext->WriteText( wxT("Prepended. ") );
     m_multitext->SetForegroundColour(*wxRED);
     m_multitext->SetBackgroundColour(*wxLIGHT_GREY);
 
 #if wxUSE_TOOLTIPS
-    m_multitext->SetToolTip(_T("Press Fn function keys here"));
+    m_multitext->SetToolTip(wxT("Press Fn function keys here"));
 #endif
 
-    m_tab = new MyTextCtrl( this, 100, _T("Multiline, allow <TAB> processing."),
+    m_tab = new MyTextCtrl( this, 100, wxT("Multiline, allow <TAB> processing."),
       wxPoint(180,90), wxSize(200,70), wxTE_MULTILINE |  wxTE_PROCESS_TAB );
-    m_tab->SetClientData((void *)_T("tab"));
+    m_tab->SetClientData((void *)wxT("tab"));
 
-    m_enter = new MyTextCtrl( this, 100, _T("Multiline, allow <ENTER> processing."),
+    m_enter = new MyTextCtrl( this, 100, wxT("Multiline, allow <ENTER> processing."),
       wxPoint(180,170), wxSize(200,70), wxTE_MULTILINE);
-    m_enter->SetClientData((void *)_T("enter"));
+    m_enter->SetClientData((void *)wxT("enter"));
 
-    m_textrich = new MyTextCtrl(this, wxID_ANY, _T("Allows more than 30Kb of text\n")
-                                _T("(even under broken Win9x)\n")
-                                _T("and a very very very very very ")
-                                _T("very very very long line to test ")
-                                _T("wxHSCROLL style\n")
-                                _T("\nAnd here is a link in quotation marks to ")
-                                _T("test wxTE_AUTO_URL: \"http://www.wxwidgets.org\""),
+    m_textrich = new MyTextCtrl(this, wxID_ANY, wxT("Allows more than 30Kb of text\n")
+                                wxT("(even under broken Win9x)\n")
+                                wxT("and a very very very very very ")
+                                wxT("very very very long line to test ")
+                                wxT("wxHSCROLL style\n")
+                                wxT("\nAnd here is a link in quotation marks to ")
+                                wxT("test wxTE_AUTO_URL: \"http://www.wxwidgets.org\""),
                                 wxPoint(450, 10), wxSize(200, 230),
                                 wxTE_RICH | wxTE_MULTILINE | wxTE_AUTO_URL);
     m_textrich->SetStyle(0, 10, *wxRED);
@@ -1100,15 +1100,15 @@ MyPanel::MyPanel( wxFrame *frame, int x,
     m_textrich->SetStyle(30, 40,
                          wxTextAttr(*wxGREEN, wxNullColour, *wxITALIC_FONT));
     m_textrich->SetDefaultStyle(wxTextAttr());
-    m_textrich->AppendText(_T("\n\nFirst 10 characters should be in red\n"));
-    m_textrich->AppendText(_T("Next 10 characters should be in blue\n"));
-    m_textrich->AppendText(_T("Next 10 characters should be normal\n"));
-    m_textrich->AppendText(_T("And the next 10 characters should be green and italic\n"));
+    m_textrich->AppendText(wxT("\n\nFirst 10 characters should be in red\n"));
+    m_textrich->AppendText(wxT("Next 10 characters should be in blue\n"));
+    m_textrich->AppendText(wxT("Next 10 characters should be normal\n"));
+    m_textrich->AppendText(wxT("And the next 10 characters should be green and italic\n"));
     m_textrich->SetDefaultStyle(wxTextAttr(*wxCYAN, *wxBLUE));
-    m_textrich->AppendText(_T("This text should be cyan on blue\n"));
+    m_textrich->AppendText(wxT("This text should be cyan on blue\n"));
     m_textrich->SetDefaultStyle(wxTextAttr(*wxBLUE, *wxWHITE));
-    m_textrich->AppendText(_T("And this should be in blue and the text you ")
-                           _T("type should be in blue as well"));
+    m_textrich->AppendText(wxT("And this should be in blue and the text you ")
+                           wxT("type should be in blue as well"));
 
 
     // lay out the controls
@@ -1159,14 +1159,14 @@ void MyPanel::DoPasteFromClipboard()
     if (!wxTheClipboard->Open())
     {
 #if wxUSE_LOG
-        *m_log << _T("Error opening the clipboard.\n");
+        *m_log << wxT("Error opening the clipboard.\n");
 #endif // wxUSE_LOG
         return;
     }
     else
     {
 #if wxUSE_LOG
-        *m_log << _T("Successfully opened the clipboard.\n");
+        *m_log << wxT("Successfully opened the clipboard.\n");
 #endif // wxUSE_LOG
     }
 
@@ -1175,34 +1175,34 @@ void MyPanel::DoPasteFromClipboard()
     if (wxTheClipboard->IsSupported( data.GetFormat() ))
     {
 #if wxUSE_LOG
-        *m_log << _T("Clipboard supports requested format.\n");
+        *m_log << wxT("Clipboard supports requested format.\n");
 #endif // wxUSE_LOG
 
         if (wxTheClipboard->GetData( data ))
         {
 #if wxUSE_LOG
-            *m_log << _T("Successfully retrieved data from the clipboard.\n");
+            *m_log << wxT("Successfully retrieved data from the clipboard.\n");
 #endif // wxUSE_LOG
             GetFocusedText()->AppendText(data.GetText());
         }
         else
         {
 #if wxUSE_LOG
-            *m_log << _T("Error getting data from the clipboard.\n");
+            *m_log << wxT("Error getting data from the clipboard.\n");
 #endif // wxUSE_LOG
         }
     }
     else
     {
 #if wxUSE_LOG
-        *m_log << _T("Clipboard doesn't support requested format.\n");
+        *m_log << wxT("Clipboard doesn't support requested format.\n");
 #endif // wxUSE_LOG
     }
 
     wxTheClipboard->Close();
 
 #if wxUSE_LOG
-    *m_log << _T("Closed the clipboard.\n");
+    *m_log << wxT("Closed the clipboard.\n");
 #endif // wxUSE_LOG
 }
 
@@ -1218,7 +1218,7 @@ void MyPanel::DoCopyToClipboard()
     if (text.IsEmpty())
     {
 #if wxUSE_LOG
-        *m_log << _T("No text to copy.\n");
+        *m_log << wxT("No text to copy.\n");
 #endif // wxUSE_LOG
 
         return;
@@ -1227,7 +1227,7 @@ void MyPanel::DoCopyToClipboard()
     if (!wxTheClipboard->Open())
     {
 #if wxUSE_LOG
-        *m_log << _T("Error opening the clipboard.\n");
+        *m_log << wxT("Error opening the clipboard.\n");
 #endif // wxUSE_LOG
 
         return;
@@ -1235,7 +1235,7 @@ void MyPanel::DoCopyToClipboard()
     else
     {
 #if wxUSE_LOG
-        *m_log << _T("Successfully opened the clipboard.\n");
+        *m_log << wxT("Successfully opened the clipboard.\n");
 #endif // wxUSE_LOG
     }
 
@@ -1244,20 +1244,20 @@ void MyPanel::DoCopyToClipboard()
     if (!wxTheClipboard->SetData( data ))
     {
 #if wxUSE_LOG
-        *m_log << _T("Error while copying to the clipboard.\n");
+        *m_log << wxT("Error while copying to the clipboard.\n");
 #endif // wxUSE_LOG
     }
     else
     {
 #if wxUSE_LOG
-        *m_log << _T("Successfully copied data to the clipboard.\n");
+        *m_log << wxT("Successfully copied data to the clipboard.\n");
 #endif // wxUSE_LOG
     }
 
     wxTheClipboard->Close();
 
 #if wxUSE_LOG
-    *m_log << _T("Closed the clipboard.\n");
+    *m_log << wxT("Closed the clipboard.\n");
 #endif // wxUSE_LOG
 }
 
@@ -1282,7 +1282,7 @@ void MyPanel::DoRemoveText()
 
 void MyPanel::DoReplaceText()
 {
-    GetFocusedText()->Replace(3, 8, _T("ABC"));
+    GetFocusedText()->Replace(3, 8, wxT("ABC"));
 }
 
 void MyPanel::DoSelectText()
@@ -1369,12 +1369,12 @@ void MyFrame::OnAbout( wxCommandEvent& W
     wxBeginBusyCursor();
 
     wxMessageDialog dialog(this,
-      _T("This is a text control sample. It demonstrates the many different\n")
-      _T("text control styles, the use of the clipboard, setting and handling\n")
-      _T("tooltips and intercepting key and char events.\n")
-      _T("\n")
-        _T("Copyright (c) 1999, Robert Roebling, Julian Smart, Vadim Zeitlin"),
-        _T("About wxTextCtrl Sample"),
+      wxT("This is a text control sample. It demonstrates the many different\n")
+      wxT("text control styles, the use of the clipboard, setting and handling\n")
+      wxT("tooltips and intercepting key and char events.\n")
+      wxT("\n")
+        wxT("Copyright (c) 1999, Robert Roebling, Julian Smart, Vadim Zeitlin"),
+        wxT("About wxTextCtrl Sample"),
         wxOK | wxICON_INFORMATION);
 
     dialog.ShowModal();
@@ -1389,20 +1389,20 @@ void MyFrame::OnSetTooltipDelay(wxComman
     static long s_delay = 5000;
 
     wxString delay;
-    delay.Printf( _T("%ld"), s_delay);
+    delay.Printf( wxT("%ld"), s_delay);
 
-    delay = wxGetTextFromUser(_T("Enter delay (in milliseconds)"),
-                              _T("Set tooltip delay"),
+    delay = wxGetTextFromUser(wxT("Enter delay (in milliseconds)"),
+                              wxT("Set tooltip delay"),
                               delay,
                               this);
     if ( !delay )
         return; // cancelled
 
-    wxSscanf(delay, _T("%ld"), &s_delay);
+    wxSscanf(delay, wxT("%ld"), &s_delay);
 
     wxToolTip::SetDelay(s_delay);
 
-    wxLogStatus(this, _T("Tooltip delay set to %ld milliseconds"), s_delay);
+    wxLogStatus(this, wxT("Tooltip delay set to %ld milliseconds"), s_delay);
 }
 
 void MyFrame::OnToggleTooltips(wxCommandEvent& WXUNUSED(event))
@@ -1413,7 +1413,7 @@ void MyFrame::OnToggleTooltips(wxCommand
 
     wxToolTip::Enable(s_enabled);
 
-    wxLogStatus(this, _T("Tooltips %sabled"), s_enabled ? _T("en") : _T("dis") );
+    wxLogStatus(this, wxT("Tooltips %sabled"), s_enabled ? wxT("en") : wxT("dis") );
 }
 #endif // tooltips
 
@@ -1450,32 +1450,32 @@ void MyFrame::OnSetEnabled(wxCommandEven
 
 void MyFrame::OnFileSave(wxCommandEvent& WXUNUSED(event))
 {
-    if ( m_panel->m_textrich->SaveFile(_T("dummy.txt")) )
+    if ( m_panel->m_textrich->SaveFile(wxT("dummy.txt")) )
     {
 #if wxUSE_FILE
         // verify that the fil length is correct (it wasn't under Win95)
         wxFile file(wxT("dummy.txt"));
         wxLogStatus(this,
-                    _T("Successfully saved file (text len = %lu, file size = %ld)"),
+                    wxT("Successfully saved file (text len = %lu, file size = %ld)"),
                     (unsigned long)m_panel->m_textrich->GetValue().length(),
                     (long) file.Length());
 #endif
     }
     else
-        wxLogStatus(this, _T("Couldn't save the file"));
+        wxLogStatus(this, wxT("Couldn't save the file"));
 }
 
 void MyFrame::OnFileLoad(wxCommandEvent& WXUNUSED(event))
 {
-    if ( m_panel->m_textrich->LoadFile(_T("dummy.txt")) )
-        wxLogStatus(this, _T("Successfully loaded file"));
+    if ( m_panel->m_textrich->LoadFile(wxT("dummy.txt")) )
+        wxLogStatus(this, wxT("Successfully loaded file"));
     else
-        wxLogStatus(this, _T("Couldn't load the file"));
+        wxLogStatus(this, wxT("Couldn't load the file"));
 }
 
 void MyFrame::OnRichTextTest(wxCommandEvent& WXUNUSED(event))
 {
-    RichTextFrame* frame = new RichTextFrame(this, _T("Rich Text Editor"));
+    RichTextFrame* frame = new RichTextFrame(this, wxT("Rich Text Editor"));
     frame->Show(true);
 }
 
@@ -1491,9 +1491,9 @@ void MyFrame::OnIdle( wxIdleEvent& event
         wxString msg;
         msg.Printf(
 #ifdef __WXMSW__
-                _T("Focus: wxWindow = %p, HWND = %08x"),
+                wxT("Focus: wxWindow = %p, HWND = %08x"),
 #else
-                _T("Focus: wxWindow = %p"),
+                wxT("Focus: wxWindow = %p"),
 #endif
                 s_windowFocus
 #ifdef __WXMSW__
@@ -1677,7 +1677,7 @@ void RichTextFrame::OnChangeTextColour(w
     }
 
     wxColourDialog dialog(this, &data);
-    dialog.SetTitle(_T("Choose the text colour"));
+    dialog.SetTitle(wxT("Choose the text colour"));
     if (dialog.ShowModal() == wxID_OK)
     {
         wxColourData retData = dialog.GetColourData();
@@ -1706,7 +1706,7 @@ void RichTextFrame::OnChangeBackgroundCo
     }
 
     wxColourDialog dialog(this, &data);
-    dialog.SetTitle(_T("Choose the text background colour"));
+    dialog.SetTitle(wxT("Choose the text background colour"));
     if (dialog.ShowModal() == wxID_OK)
     {
         wxColourData retData = dialog.GetColourData();
@@ -1783,7 +1783,7 @@ void RichTextFrame::OnTabStops(wxCommand
 
     wxArrayInt tabs;
 
-    wxStringTokenizer tokens(tabsStr, _T(" "));
+    wxStringTokenizer tokens(tabsStr, wxT(" "));
     while (tokens.HasMoreTokens())
     {
         wxString token = tokens.GetNextToken();
--- samples/splitter/splitter.cpp-orig	2009-06-18 18:16:49.707007000 -0500
+++ samples/splitter/splitter.cpp	2009-06-18 18:16:59.359384000 -0500
@@ -179,7 +179,7 @@ END_EVENT_TABLE()
 
 // My frame constructor
 MyFrame::MyFrame()
-       : wxFrame(NULL, wxID_ANY, _T("wxSplitterWindow sample"),
+       : wxFrame(NULL, wxID_ANY, wxT("wxSplitterWindow sample"),
                  wxDefaultPosition, wxSize(420, 300),
                  wxDEFAULT_FRAME_STYLE | wxNO_FULL_REPAINT_ON_RESIZE)
 {
@@ -190,39 +190,39 @@ MyFrame::MyFrame()
     // Make a menubar
     wxMenu *splitMenu = new wxMenu;
     splitMenu->Append(SPLIT_VERTICAL,
-                      _T("Split &Vertically\tCtrl-V"),
-                      _T("Split vertically"));
+                      wxT("Split &Vertically\tCtrl-V"),
+                      wxT("Split vertically"));
     splitMenu->Append(SPLIT_HORIZONTAL,
-                      _T("Split &Horizontally\tCtrl-H"),
-                      _T("Split horizontally"));
+                      wxT("Split &Horizontally\tCtrl-H"),
+                      wxT("Split horizontally"));
     splitMenu->Append(SPLIT_UNSPLIT,
-                      _T("&Unsplit\tCtrl-U"),
-                      _T("Unsplit"));
+                      wxT("&Unsplit\tCtrl-U"),
+                      wxT("Unsplit"));
     splitMenu->AppendSeparator();
 
     splitMenu->AppendCheckItem(SPLIT_LIVE,
-                               _T("&Live update\tCtrl-L"),
-                               _T("Toggle live update mode"));
+                               wxT("&Live update\tCtrl-L"),
+                               wxT("Toggle live update mode"));
     splitMenu->Append(SPLIT_SETPOSITION,
-                      _T("Set splitter &position\tCtrl-P"),
-                      _T("Set the splitter position"));
+                      wxT("Set splitter &position\tCtrl-P"),
+                      wxT("Set the splitter position"));
     splitMenu->Append(SPLIT_SETMINSIZE,
-                      _T("Set &min size\tCtrl-M"),
-                      _T("Set minimum pane size"));
+                      wxT("Set &min size\tCtrl-M"),
+                      wxT("Set minimum pane size"));
     splitMenu->Append(SPLIT_SETGRAVITY,
-                      _T("Set &gravity\tCtrl-G"),
-                      _T("Set gravity of sash"));
+                      wxT("Set &gravity\tCtrl-G"),
+                      wxT("Set gravity of sash"));
     splitMenu->AppendSeparator();
 
     splitMenu->Append(SPLIT_REPLACE,
-                      _T("&Replace right window"),
-                      _T("Replace right window"));
+                      wxT("&Replace right window"),
+                      wxT("Replace right window"));
     splitMenu->AppendSeparator();
 
-    splitMenu->Append(SPLIT_QUIT, _T("E&xit\tAlt-X"), _T("Exit"));
+    splitMenu->Append(SPLIT_QUIT, wxT("E&xit\tAlt-X"), wxT("Exit"));
 
     wxMenuBar *menuBar = new wxMenuBar;
-    menuBar->Append(splitMenu, _T("&Splitter"));
+    menuBar->Append(splitMenu, wxT("&Splitter"));
 
     SetMenuBar(menuBar);
 
@@ -241,8 +241,8 @@ MyFrame::MyFrame()
     m_right->SetBackgroundColour(*wxCYAN);
     m_right->SetScrollbars(20, 20, 5, 5);
 #else // for testing kbd navigation inside the splitter
-    m_left = new wxTextCtrl(m_splitter, wxID_ANY, _T("first text"));
-    m_right = new wxTextCtrl(m_splitter, wxID_ANY, _T("second text"));
+    m_left = new wxTextCtrl(m_splitter, wxID_ANY, wxT("first text"));
+    m_right = new wxTextCtrl(m_splitter, wxID_ANY, wxT("second text"));
 #endif
 
     // you can also do this to start with a single window
@@ -255,7 +255,7 @@ MyFrame::MyFrame()
 #endif
 
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("Min pane size = 0"), 1);
+    SetStatusText(wxT("Min pane size = 0"), 1);
 #endif // wxUSE_STATUSBAR
 
     m_replacewindow = (wxWindow *)0;
@@ -285,7 +285,7 @@ void MyFrame::SplitHorizontal(wxCommandE
     m_splitter->SplitHorizontally( m_left, m_right );
 
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("Splitter split horizontally"), 1);
+    SetStatusText(wxT("Splitter split horizontally"), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -298,7 +298,7 @@ void MyFrame::SplitVertical(wxCommandEve
     m_splitter->SplitVertically( m_left, m_right );
 
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("Splitter split vertically"), 1);
+    SetStatusText(wxT("Splitter split vertically"), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -307,7 +307,7 @@ void MyFrame::Unsplit(wxCommandEvent& WX
     if ( m_splitter->IsSplit() )
         m_splitter->Unsplit();
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("No splitter"));
+    SetStatusText(wxT("No splitter"));
 #endif // wxUSE_STATUSBAR
 }
 
@@ -326,27 +326,27 @@ void MyFrame::SetPosition(wxCommandEvent
 {
     wxString str;
     str.Printf( wxT("%d"), m_splitter->GetSashPosition());
-    str = wxGetTextFromUser(_T("Enter splitter position:"), _T(""), str, this);
+    str = wxGetTextFromUser(wxT("Enter splitter position:"), wxT(""), str, this);
     if ( str.empty() )
         return;
 
     long pos;
     if ( !str.ToLong(&pos) )
     {
-        wxLogError(_T("The splitter position should be an integer."));
+        wxLogError(wxT("The splitter position should be an integer."));
         return;
     }
 
     m_splitter->SetSashPosition(pos);
 
-    wxLogStatus(this, _T("Splitter position set to %ld"), pos);
+    wxLogStatus(this, wxT("Splitter position set to %ld"), pos);
 }
 
 void MyFrame::SetMinSize(wxCommandEvent& WXUNUSED(event) )
 {
     wxString str;
     str.Printf( wxT("%d"), m_splitter->GetMinimumPaneSize());
-    str = wxGetTextFromUser(_T("Enter minimal size for panes:"), _T(""), str, this);
+    str = wxGetTextFromUser(wxT("Enter minimal size for panes:"), wxT(""), str, this);
     if ( str.empty() )
         return;
 
@@ -361,7 +361,7 @@ void MyFrame::SetGravity(wxCommandEvent&
 {
     wxString str;
     str.Printf( wxT("%g"), m_splitter->GetSashGravity());
-    str = wxGetTextFromUser(_T("Enter sash gravity (0,1):"), _T(""), str, this);
+    str = wxGetTextFromUser(wxT("Enter sash gravity (0,1):"), wxT(""), str, this);
     if ( str.empty() )
         return;
 
@@ -429,7 +429,7 @@ MySplitterWindow::MySplitterWindow(wxFra
 
 void MySplitterWindow::OnPositionChanged(wxSplitterEvent& event)
 {
-    wxLogStatus(m_frame, _T("Position has changed, now = %d (or %d)"),
+    wxLogStatus(m_frame, wxT("Position has changed, now = %d (or %d)"),
                 event.GetSashPosition(), GetSashPosition());
 
     event.Skip();
@@ -437,7 +437,7 @@ void MySplitterWindow::OnPositionChanged
 
 void MySplitterWindow::OnPositionChanging(wxSplitterEvent& event)
 {
-    wxLogStatus(m_frame, _T("Position is changing, now = %d (or %d)"),
+    wxLogStatus(m_frame, wxT("Position is changing, now = %d (or %d)"),
                 event.GetSashPosition(), GetSashPosition());
 
     event.Skip();
@@ -446,7 +446,7 @@ void MySplitterWindow::OnPositionChangin
 void MySplitterWindow::OnDClick(wxSplitterEvent& event)
 {
 #if wxUSE_STATUSBAR
-    m_frame->SetStatusText(_T("Splitter double clicked"), 1);
+    m_frame->SetStatusText(wxT("Splitter double clicked"), 1);
 #endif // wxUSE_STATUSBAR
 
     event.Skip();
@@ -455,7 +455,7 @@ void MySplitterWindow::OnDClick(wxSplitt
 void MySplitterWindow::OnUnsplitEvent(wxSplitterEvent& event)
 {
 #if wxUSE_STATUSBAR
-    m_frame->SetStatusText(_T("Splitter unsplit"), 1);
+    m_frame->SetStatusText(wxT("Splitter unsplit"), 1);
 #endif // wxUSE_STATUSBAR
 
     event.Skip();
@@ -480,7 +480,7 @@ void MyCanvas::OnDraw(wxDC& dcOrig)
     dc.DrawLine(0, 0, 100, 200);
 
     dc.SetBackgroundMode(wxTRANSPARENT);
-    dc.DrawText(_T("Testing"), 50, 50);
+    dc.DrawText(wxT("Testing"), 50, 50);
 
     dc.SetPen(*wxRED_PEN);
     dc.SetBrush(*wxGREEN_BRUSH);
--- src/univ/themes/gtk.cpp-orig	2009-06-18 19:43:57.117248000 -0500
+++ src/univ/themes/gtk.cpp	2009-06-18 19:44:02.925691000 -0500
@@ -715,7 +715,7 @@ wxColour wxGTKColourScheme::Get(wxGTKCol
 
         case MAX:
         default:
-            wxFAIL_MSG(_T("invalid standard colour"));
+            wxFAIL_MSG(wxT("invalid standard colour"));
             return *wxBLACK;
     }
 }
@@ -771,7 +771,7 @@ void wxGTKRenderer::DrawAntiShadedRectSi
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown rectangle side"));
+            wxFAIL_MSG(wxT("unknown rectangle side"));
     }
 }
 
@@ -1154,7 +1154,7 @@ wxBitmap wxGTKRenderer::GetLineWrapBitma
         wxBitmap bmpLineWrap(line_wrap_bits, line_wrap_width, line_wrap_height);
         if ( !bmpLineWrap.Ok() )
         {
-            wxFAIL_MSG( _T("Failed to create line wrap XBM") );
+            wxFAIL_MSG( wxT("Failed to create line wrap XBM") );
         }
         else
         {
@@ -1302,7 +1302,7 @@ void wxGTKRenderer::DrawTab(wxDC& dc,
         switch ( dir )
         {
             default:
-                wxFAIL_MSG(_T("invaild notebook tab orientation"));
+                wxFAIL_MSG(wxT("invaild notebook tab orientation"));
                 // fall through
 
             case wxTOP:
@@ -1702,7 +1702,7 @@ void wxGTKRenderer::DoDrawMenuItem(wxDC&
     if ( !accel.empty() )
     {
         // menubar items shouldn't have them
-        wxCHECK_RET( geometryInfo, _T("accel strings only valid for menus") );
+        wxCHECK_RET( geometryInfo, wxT("accel strings only valid for menus") );
 
         rect.x = geometryInfo->GetAccelOffset();
         rect.SetRight(geometryInfo->GetSize().x);
@@ -1714,7 +1714,7 @@ void wxGTKRenderer::DoDrawMenuItem(wxDC&
     // draw the submenu indicator
     if ( flags & wxCONTROL_ISSUBMENU )
     {
-        wxCHECK_RET( geometryInfo, _T("wxCONTROL_ISSUBMENU only valid for menus") );
+        wxCHECK_RET( geometryInfo, wxT("wxCONTROL_ISSUBMENU only valid for menus") );
 
         rect.x = geometryInfo->GetSize().x - MENU_RIGHT_MARGIN;
         rect.width = MENU_RIGHT_MARGIN;
@@ -1949,7 +1949,7 @@ void wxGTKRenderer::DrawArrowBorder(wxDC
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown arrow direction"));
+            wxFAIL_MSG(wxT("unknown arrow direction"));
             return;
     }
 
@@ -2084,7 +2084,7 @@ void wxGTKRenderer::DrawArrow(wxDC& dc,
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown arrow direction"));
+            wxFAIL_MSG(wxT("unknown arrow direction"));
     }
 
     dc.DrawPolygon(WXSIZEOF(ptArrow), ptArrow);
@@ -2161,7 +2161,7 @@ void wxGTKRenderer::DrawArrow(wxDC& dc,
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown arrow direction"));
+            wxFAIL_MSG(wxT("unknown arrow direction"));
             return;
     }
 }
--- src/univ/themes/win32.cpp-orig	2009-06-18 19:44:07.701306000 -0500
+++ src/univ/themes/win32.cpp	2009-06-18 19:44:13.061011000 -0500
@@ -1323,7 +1323,7 @@ wxColour wxWin32ColourScheme::Get(wxWin3
 
         case MAX:
         default:
-            wxFAIL_MSG(_T("invalid standard colour"));
+            wxFAIL_MSG(wxT("invalid standard colour"));
             return *wxBLACK;
     }
 }
@@ -1563,7 +1563,7 @@ void wxWin32Renderer::DrawFrameWithLabel
                                          int indexAccel)
 {
     wxString label2;
-    label2 << _T(' ') << label << _T(' ');
+    label2 << wxT(' ') << label << wxT(' ');
     if ( indexAccel != -1 )
     {
         // adjust it as we prepended a space
@@ -1782,7 +1782,7 @@ void wxWin32Renderer::DrawTab(wxDC& dc,
         switch ( dir )
         {
             default:
-                wxFAIL_MSG(_T("invaild notebook tab orientation"));
+                wxFAIL_MSG(wxT("invaild notebook tab orientation"));
                 // fall through
 
             case wxTOP:
@@ -3502,7 +3502,7 @@ bool wxWin32StatusBarInputHandler::IsOnG
             parentTLW = wxDynamicCast(statbar->GetParent(), wxTopLevelWindow);
 
         wxCHECK_MSG( parentTLW, false,
-                     _T("the status bar should be a child of a TLW") );
+                     wxT("the status bar should be a child of a TLW") );
 
         // a maximized window can't be resized anyhow
         if ( !parentTLW->IsMaximized() )
@@ -3610,7 +3610,7 @@ wxWin32SystemMenuEvtHandler(wxWin32Frame
 
 void wxWin32SystemMenuEvtHandler::Attach(wxInputConsumer *consumer)
 {
-    wxASSERT_MSG( m_wnd == NULL, _T("can't attach the handler twice!") );
+    wxASSERT_MSG( m_wnd == NULL, wxT("can't attach the handler twice!") );
 
     m_wnd = wxStaticCast(consumer->GetInputWindow(), wxTopLevelWindow);
     m_wnd->PushEventHandler(this);
--- src/univ/themes/mono.cpp-orig	2009-06-18 19:44:17.989800000 -0500
+++ src/univ/themes/mono.cpp	2009-06-18 19:44:23.408851000 -0500
@@ -606,7 +606,7 @@ wxColour wxMonoColourScheme::Get(wxMonoC
 
         case MAX:
         default:
-            wxFAIL_MSG(_T("invalid standard colour"));
+            wxFAIL_MSG(wxT("invalid standard colour"));
             // fall through
 
         case SHADOW_DARK:
@@ -659,7 +659,7 @@ wxRect wxMonoRenderer::GetBorderDimensio
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown border type"));
+            wxFAIL_MSG(wxT("unknown border type"));
             // fall through
 
         case wxBORDER_DEFAULT:
@@ -810,19 +810,19 @@ void wxMonoRenderer::DrawToolBarButton(w
                                        long WXUNUSED(style),
                                        int WXUNUSED(tbarStyle))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 wxSize wxMonoRenderer::GetToolBarButtonSize(wxCoord *WXUNUSED(separator)) const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
 
 wxSize wxMonoRenderer::GetToolBarMargin() const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
@@ -843,19 +843,19 @@ void wxMonoRenderer::DrawTab(wxDC& WXUNU
                              int WXUNUSED(flags),
                              int WXUNUSED(indexAccel))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 wxSize wxMonoRenderer::GetTabIndent() const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
 
 wxSize wxMonoRenderer::GetTabPadding() const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
@@ -873,7 +873,7 @@ void wxMonoRenderer::GetComboBitmaps(wxB
                                      wxBitmap *WXUNUSED(bmpPressed),
                                      wxBitmap *WXUNUSED(bmpDisabled))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 #endif // wxUSE_COMBOBOX
@@ -890,7 +890,7 @@ void wxMonoRenderer::DrawMenuBarItem(wxD
                                      int WXUNUSED(flags),
                                      int WXUNUSED(indexAccel))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 void wxMonoRenderer::DrawMenuItem(wxDC& WXUNUSED(dc),
@@ -902,19 +902,19 @@ void wxMonoRenderer::DrawMenuItem(wxDC& 
                                   int WXUNUSED(flags),
                                   int WXUNUSED(indexAccel))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 void wxMonoRenderer::DrawMenuSeparator(wxDC& WXUNUSED(dc),
                                        wxCoord WXUNUSED(y),
                                        const wxMenuGeometryInfo& WXUNUSED(geomInfo))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 wxSize wxMonoRenderer::GetMenuBarItemSize(const wxSize& WXUNUSED(sizeText)) const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
@@ -922,7 +922,7 @@ wxSize wxMonoRenderer::GetMenuBarItemSiz
 wxMenuGeometryInfo *wxMonoRenderer::GetMenuGeometry(wxWindow *WXUNUSED(win),
                                                     const wxMenu& WXUNUSED(menu)) const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return NULL;
 }
@@ -943,7 +943,7 @@ void wxMonoRenderer::DrawSliderShaft(wxD
                                      long WXUNUSED(style),
                                      wxRect *WXUNUSED(rectShaft))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 
@@ -953,7 +953,7 @@ void wxMonoRenderer::DrawSliderThumb(wxD
                                      int WXUNUSED(flags),
                                      long WXUNUSED(style))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 void wxMonoRenderer::DrawSliderTicks(wxDC& WXUNUSED(dc),
@@ -966,19 +966,19 @@ void wxMonoRenderer::DrawSliderTicks(wxD
                                      int WXUNUSED(flags),
                                      long WXUNUSED(style))
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 }
 
 wxCoord wxMonoRenderer::GetSliderDim() const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return 0;
 }
 
 wxCoord wxMonoRenderer::GetSliderTickLen() const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return 0;
 }
@@ -989,7 +989,7 @@ wxRect wxMonoRenderer::GetSliderShaftRec
                                           wxOrientation WXUNUSED(orient),
                                           long WXUNUSED(style)) const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxRect();
 }
@@ -998,7 +998,7 @@ wxSize wxMonoRenderer::GetSliderThumbSiz
                                           int WXUNUSED(lenThumb),
                                           wxOrientation WXUNUSED(orient)) const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
@@ -1007,7 +1007,7 @@ wxSize wxMonoRenderer::GetSliderThumbSiz
 
 wxSize wxMonoRenderer::GetProgressBarStep() const
 {
-    wxFAIL_MSG(_T("TODO"));
+    wxFAIL_MSG(wxT("TODO"));
 
     return wxSize();
 }
@@ -1023,7 +1023,7 @@ void wxMonoRenderer::DrawArrow(wxDC& dc,
                                int WXUNUSED(flags))
 {
     ArrowDirection arrowDir = GetArrowDirection(dir);
-    wxCHECK_RET( arrowDir != Arrow_Max, _T("invalid arrow direction") );
+    wxCHECK_RET( arrowDir != Arrow_Max, wxT("invalid arrow direction") );
 
     wxBitmap& bmp = m_bmpArrows[arrowDir];
     if ( !bmp.Ok() )
--- src/univ/themes/metal.cpp-orig	2009-06-18 19:44:27.744150000 -0500
+++ src/univ/themes/metal.cpp	2009-06-18 19:44:34.032296000 -0500
@@ -146,7 +146,7 @@ private:
 class wxMetalTheme : public wxDelegateTheme
 {
 public:
-    wxMetalTheme() : wxDelegateTheme(_T("win32")), m_renderer(NULL) {}
+    wxMetalTheme() : wxDelegateTheme(wxT("win32")), m_renderer(NULL) {}
     ~wxMetalTheme() { delete m_renderer; }
 
 protected:
@@ -426,7 +426,7 @@ void wxMetalRenderer::DrawArrow(wxDC& dc
         case wxDOWN:    arrowDir = Arrow_Down; break;
 
         default:
-            wxFAIL_MSG(_T("unknown arrow direction"));
+            wxFAIL_MSG(wxT("unknown arrow direction"));
             return;
     }
 
--- src/univ/stdrend.cpp-orig	2009-06-18 19:41:40.158065000 -0500
+++ src/univ/stdrend.cpp	2009-06-18 19:41:49.537448000 -0500
@@ -151,7 +151,7 @@ wxStdRenderer::ArrowDirection wxStdRende
             return Arrow_Down;
 
         default:
-            wxFAIL_MSG(_T("unknown arrow direction"));
+            wxFAIL_MSG(wxT("unknown arrow direction"));
     }
 
     return Arrow_Max;
@@ -437,7 +437,7 @@ void wxStdRenderer::DrawBorder(wxDC& dc,
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown border type"));
+            wxFAIL_MSG(wxT("unknown border type"));
             // fall through
 
         case wxBORDER_DEFAULT:
@@ -470,7 +470,7 @@ wxRect wxStdRenderer::GetBorderDimension
             break;
 #endif
         default:
-            wxFAIL_MSG(_T("unknown border type"));
+            wxFAIL_MSG(wxT("unknown border type"));
             // fall through
 
         case wxBORDER_DEFAULT:
@@ -860,7 +860,7 @@ wxSize wxStdRenderer::GetStatusBarBorder
     wxRect flat = GetBorderDimensions(wxBORDER_STATIC);
     wxASSERT_MSG( raised.x == raised.width && raised.y == raised.height &&
                   flat.x == flat.width && flat.y == flat.height,
-                  _T("this code expects uniform borders, you must override GetStatusBarBorders") );
+                  wxT("this code expects uniform borders, you must override GetStatusBarBorders") );
 
     // take the larger of flat/raised values:
     wxSize border(wxMax(raised.x, flat.x), wxMax(raised.y, flat.y));
--- src/univ/statusbr.cpp-orig	2009-06-18 19:41:55.473942000 -0500
+++ src/univ/statusbr.cpp	2009-06-18 19:42:02.438149000 -0500
@@ -162,7 +162,7 @@ void wxStatusBarUniv::RefreshField(int i
 void wxStatusBarUniv::SetStatusText(const wxString& text, int number)
 {
     wxCHECK_RET( number >= 0 && number < m_nFields,
-                 _T("invalid status bar field index in SetStatusText()") );
+                 wxT("invalid status bar field index in SetStatusText()") );
 
     if ( text == m_statusText[number] )
     {
@@ -178,7 +178,7 @@ void wxStatusBarUniv::SetStatusText(cons
 wxString wxStatusBarUniv::GetStatusText(int number) const
 {
     wxCHECK_MSG( number >= 0 && number < m_nFields, wxEmptyString,
-                 _T("invalid status bar field index") );
+                 wxT("invalid status bar field index") );
 
     return m_statusText[number];
 }
@@ -249,7 +249,7 @@ void wxStatusBarUniv::OnSize(wxSizeEvent
 bool wxStatusBarUniv::GetFieldRect(int n, wxRect& rect) const
 {
     wxCHECK_MSG( n >= 0 && n < m_nFields, false,
-                 _T("invalid field index in GetFieldRect()") );
+                 wxT("invalid field index in GetFieldRect()") );
 
     // this is a fix for a bug exhibited by the statbar sample: if
     // GetFieldRect() is called from the derived class OnSize() handler, then
@@ -272,7 +272,7 @@ wxRect wxStatusBarUniv::DoGetFieldRect(i
     // it's the caller responsability to check this, if unsure - call
     // GetFieldRect() instead
     wxCHECK_MSG( !m_widthsAbs.IsEmpty(), rect,
-                 _T("can't be called if we don't have the widths") );
+                 wxT("can't be called if we don't have the widths") );
 
     for ( int i = 0; i <= n; i++ )
     {
--- src/univ/listbox.cpp-orig	2009-06-18 19:42:08.196796000 -0500
+++ src/univ/listbox.cpp	2009-06-18 19:42:22.668312000 -0500
@@ -271,7 +271,7 @@ void wxListBox::DoInsertItems(const wxAr
 {
     // the position of the item being added to a sorted listbox can't be
     // specified
-    wxCHECK_RET( !IsSorted(), _T("can't insert items into sorted listbox") );
+    wxCHECK_RET( !IsSorted(), wxT("can't insert items into sorted listbox") );
 
     unsigned int count = items.GetCount();
     for ( unsigned int n = 0; n < count; n++ )
@@ -318,7 +318,7 @@ void wxListBox::DoSetItems(const wxArray
 
 void wxListBox::SetString(unsigned int n, const wxString& s)
 {
-    wxCHECK_RET( !IsSorted(), _T("can't set string in sorted listbox") );
+    wxCHECK_RET( !IsSorted(), wxT("can't set string in sorted listbox") );
 
     (*m_strings)[n] = s;
 
@@ -384,7 +384,7 @@ void wxListBox::Clear()
 void wxListBox::Delete(unsigned int n)
 {
     wxCHECK_RET( IsValid(n),
-                 _T("invalid index in wxListBox::Delete") );
+                 wxT("invalid index in wxListBox::Delete") );
 
     // do it before removing the index as otherwise the last item will not be
     // refreshed (as GetCount() will be decremented)
@@ -515,7 +515,7 @@ void wxListBox::DoSetSelection(int n, bo
     // sanity check: a single selection listbox can't have more than one item
     // selected
     wxASSERT_MSG( HasMultipleSelection() || (m_selections.GetCount() < 2),
-                  _T("multiple selected items in single selection lbox?") );
+                  wxT("multiple selected items in single selection lbox?") );
 
     if ( select )
     {
@@ -527,7 +527,7 @@ void wxListBox::DoSetSelection(int n, bo
 int wxListBox::GetSelection() const
 {
     wxCHECK_MSG( !HasMultipleSelection(), wxNOT_FOUND,
-                 _T("use wxListBox::GetSelections for ths listbox") );
+                 wxT("use wxListBox::GetSelections for ths listbox") );
 
     return m_selections.IsEmpty() ? wxNOT_FOUND : m_selections[0];
 }
@@ -694,7 +694,7 @@ void wxListBox::UpdateItems()
     if ( m_updateCount == -1 )
     {
         // refresh all
-        wxLogTrace(_T("listbox"), _T("Refreshing all"));
+        wxLogTrace(wxT("listbox"), wxT("Refreshing all"));
 
         Refresh();
     }
@@ -711,7 +711,7 @@ void wxListBox::UpdateItems()
         // entire line(s)
         CalcScrolledPosition(0, rect.y, NULL, &rect.y);
 
-        wxLogTrace(_T("listbox"), _T("Refreshing items %d..%d (%d-%d)"),
+        wxLogTrace(wxT("listbox"), wxT("Refreshing items %d..%d (%d-%d)"),
                    m_updateFrom, m_updateFrom + m_updateCount - 1,
                    rect.GetTop(), rect.GetBottom());
 
@@ -781,7 +781,7 @@ void wxListBox::DoDraw(wxControlRenderer
         itemLast = itemMax;
 
     // do draw them
-    wxLogTrace(_T("listbox"), _T("Repainting items %d..%d"),
+    wxLogTrace(wxT("listbox"), wxT("Repainting items %d..%d"),
                itemFirst, itemLast);
 
     DoDrawRange(renderer, itemFirst, itemLast);
@@ -1002,7 +1002,7 @@ bool wxListBox::FindItem(const wxString&
     int last = first == 0 ? count - 1 : first - 1;
 
     // if this is not true we'd never exit from the loop below!
-    wxASSERT_MSG( first < (int)count && last < (int)count, _T("logic error") );
+    wxASSERT_MSG( first < (int)count && last < (int)count, wxT("logic error") );
 
     // precompute it outside the loop
     size_t len = prefix.length();
@@ -1248,7 +1248,7 @@ bool wxListBox::PerformAction(const wxCo
         AnchorSelection(item == -1 ? m_current : item);
     else if ( action == wxACTION_LISTBOX_SELECTALL ||
               action == wxACTION_LISTBOX_SELTOGGLE )
-        wxFAIL_MSG(_T("unimplemented yet"));
+        wxFAIL_MSG(wxT("unimplemented yet"));
     else
         return wxControl::PerformAction(action, numArg, strArg);
 
@@ -1559,7 +1559,7 @@ bool wxStdListboxInputHandler::HandleMou
         {
             // pass something into strArg to tell the listbox that it shouldn't
             // send the notification message: see PerformAction() above
-            lbox->PerformAction(m_actionMouse, item, _T("no"));
+            lbox->PerformAction(m_actionMouse, item, wxT("no"));
         }
         // else: don't pass invalid index to the listbox
     }
--- src/univ/notebook.cpp-orig	2009-06-18 19:42:27.585440000 -0500
+++ src/univ/notebook.cpp	2009-06-18 19:42:33.392111000 -0500
@@ -166,14 +166,14 @@ bool wxNotebook::Create(wxWindow *parent
 
 wxString wxNotebook::GetPageText(size_t nPage) const
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxEmptyString, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxEmptyString, wxT("invalid notebook page") );
 
     return m_titles[nPage];
 }
 
 bool wxNotebook::SetPageText(size_t nPage, const wxString& strText)
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), false, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), false, wxT("invalid notebook page") );
 
     if ( strText != m_titles[nPage] )
     {
@@ -196,17 +196,17 @@ bool wxNotebook::SetPageText(size_t nPag
 
 int wxNotebook::GetPageImage(size_t nPage) const
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("invalid notebook page") );
 
     return m_images[nPage];
 }
 
 bool wxNotebook::SetPageImage(size_t nPage, int nImage)
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), false, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), false, wxT("invalid notebook page") );
 
     wxCHECK_MSG( m_imageList && nImage < m_imageList->GetImageCount(), false,
-                 _T("invalid image index in SetPageImage()") );
+                 wxT("invalid image index in SetPageImage()") );
 
     if ( nImage != m_images[nPage] )
     {
@@ -235,7 +235,7 @@ wxNotebook::~wxNotebook()
 
 int wxNotebook::DoSetSelection(size_t nPage, int flags)
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("invalid notebook page") );
 
     if ( (size_t)nPage == m_sel )
     {
@@ -316,7 +316,7 @@ bool wxNotebook::InsertPage(size_t nPage
 {
     size_t nPages = GetPageCount();
     wxCHECK_MSG( nPage == nPages || IS_VALID_PAGE(nPage), false,
-                 _T("invalid notebook page in InsertPage()") );
+                 wxT("invalid notebook page in InsertPage()") );
 
     // modify the data
     m_pages.Insert(pPage, nPage);
@@ -393,7 +393,7 @@ bool wxNotebook::DeleteAllPages()
 
 wxNotebookPage *wxNotebook::DoRemovePage(size_t nPage)
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), NULL, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), NULL, wxT("invalid notebook page") );
 
     wxNotebookPage *page = m_pages[nPage];
     m_pages.RemoveAt(nPage);
@@ -454,7 +454,7 @@ void wxNotebook::RefreshCurrent()
 
 void wxNotebook::RefreshTab(int page, bool forceSelected)
 {
-    wxCHECK_RET( IS_VALID_PAGE(page), _T("invalid notebook page") );
+    wxCHECK_RET( IS_VALID_PAGE(page), wxT("invalid notebook page") );
 
     wxRect rect = GetTabRect(page);
     if ( forceSelected || ((size_t)page == m_sel) )
@@ -621,7 +621,7 @@ int wxNotebook::HitTest(const wxPoint& p
     switch ( GetTabOrientation() )
     {
         default:
-            wxFAIL_MSG(_T("unknown tab orientation"));
+            wxFAIL_MSG(wxT("unknown tab orientation"));
             // fall through
 
         case wxTOP:
@@ -694,7 +694,7 @@ wxDirection wxNotebook::GetTabOrientatio
 wxRect wxNotebook::GetTabRect(int page) const
 {
     wxRect rect;
-    wxCHECK_MSG( IS_VALID_PAGE(page), rect, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(page), rect, wxT("invalid notebook page") );
 
     // calc the size of this tab and of the preceding ones
     wxCoord widthThis, widthBefore;
@@ -797,7 +797,7 @@ wxRect wxNotebook::GetTabsPart() const
 
 void wxNotebook::GetTabSize(int page, wxCoord *w, wxCoord *h) const
 {
-    wxCHECK_RET( w && h, _T("NULL pointer in GetTabSize") );
+    wxCHECK_RET( w && h, wxT("NULL pointer in GetTabSize") );
 
     if ( IsVertical() )
     {
@@ -816,7 +816,7 @@ void wxNotebook::GetTabSize(int page, wx
 
 void wxNotebook::SetTabSize(const wxSize& sz)
 {
-    wxCHECK_RET( FixedSizeTabs(), _T("SetTabSize() ignored") );
+    wxCHECK_RET( FixedSizeTabs(), wxT("SetTabSize() ignored") );
 
     if ( IsVertical() )
     {
@@ -837,7 +837,7 @@ wxSize wxNotebook::CalcTabSize(int page)
 
     wxSize size;
 
-    wxCHECK_MSG( IS_VALID_PAGE(page), size, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(page), size, wxT("invalid notebook page") );
 
     GetTextExtent(m_titles[page], &size.x, &size.y);
 
@@ -1178,7 +1178,7 @@ void wxNotebook::PositionSpinBtn()
     switch ( GetTabOrientation() )
     {
         default:
-            wxFAIL_MSG(_T("unknown tab orientation"));
+            wxFAIL_MSG(wxT("unknown tab orientation"));
             // fall through
 
         case wxTOP:
@@ -1211,7 +1211,7 @@ void wxNotebook::PositionSpinBtn()
 
 void wxNotebook::ScrollTo(int page)
 {
-    wxCHECK_RET( IS_VALID_PAGE(page), _T("invalid notebook page") );
+    wxCHECK_RET( IS_VALID_PAGE(page), wxT("invalid notebook page") );
 
     // set the first visible tab and offset (easy)
     m_firstVisible = (size_t)page;
@@ -1229,7 +1229,7 @@ void wxNotebook::ScrollTo(int page)
 
 void wxNotebook::ScrollLastTo(int page)
 {
-    wxCHECK_RET( IS_VALID_PAGE(page), _T("invalid notebook page") );
+    wxCHECK_RET( IS_VALID_PAGE(page), wxT("invalid notebook page") );
 
     // go backwards until we find the first tab which can be made visible
     // without hiding the given one
@@ -1265,7 +1265,7 @@ void wxNotebook::ScrollLastTo(int page)
     ScrollTo(m_firstVisible);
 
     // consitency check: the page we were asked to show should be shown
-    wxASSERT_MSG( (size_t)page < m_lastVisible, _T("bug in ScrollLastTo") );
+    wxASSERT_MSG( (size_t)page < m_lastVisible, wxT("bug in ScrollLastTo") );
 }
 
 // ----------------------------------------------------------------------------
--- src/univ/textctrl.cpp-orig	2009-06-18 19:42:39.972775000 -0500
+++ src/univ/textctrl.cpp	2009-06-18 19:42:46.550846000 -0500
@@ -212,8 +212,8 @@ static inline void OrderPositions(wxText
 // ----------------------------------------------------------------------------
 
 // names of text ctrl commands
-#define wxTEXT_COMMAND_INSERT _T("insert")
-#define wxTEXT_COMMAND_REMOVE _T("remove")
+#define wxTEXT_COMMAND_INSERT wxT("insert")
+#define wxTEXT_COMMAND_REMOVE wxT("remove")
 
 // the value which is never used for text position, even not -1 which is
 // sometimes used for some special meaning
@@ -318,7 +318,7 @@ public:
     // for the first one)
     wxTextCoord GetRowStart(wxTextCoord row) const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return row ? m_rowsStart[row - 1] : 0;
     }
@@ -328,7 +328,7 @@ public:
     // be given to us)
     wxTextCoord GetRowLength(wxTextCoord row, wxTextCoord lenLine) const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         // note that m_rowsStart[row] is the same as GetRowStart(row + 1) (but
         // slightly more efficient) and lenLine is the same as the start of the
@@ -340,7 +340,7 @@ public:
     // return the width of the row in pixels
     wxCoord GetRowWidth(wxTextCoord row) const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return m_rowsWidth[row];
     }
@@ -348,7 +348,7 @@ public:
     // return the number of rows
     size_t GetRowCount() const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return m_rowsStart.GetCount() + 1;
     }
@@ -356,7 +356,7 @@ public:
     // return the number of additional (i.e. after the first one) rows
     size_t GetExtraRowCount() const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return m_rowsStart.GetCount();
     }
@@ -364,7 +364,7 @@ public:
     // return the first row of this line
     wxTextCoord GetFirstRow() const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return m_rowFirst;
     }
@@ -372,7 +372,7 @@ public:
     // return the first row of the next line
     wxTextCoord GetNextRow() const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return m_rowFirst + m_rowsStart.GetCount() + 1;
     }
@@ -380,7 +380,7 @@ public:
     // this just provides direct access to m_rowsStart aerray for efficiency
     wxTextCoord GetExtraRowStart(wxTextCoord row) const
     {
-        wxASSERT_MSG( IsValid(), _T("this line hadn't been laid out") );
+        wxASSERT_MSG( IsValid(), wxT("this line hadn't been laid out") );
 
         return m_rowsStart[row];
     }
@@ -411,14 +411,14 @@ public:
                                                 : GetRowStart(n + 1);
 
                 wxASSERT_MSG( colRowEnd < colNextRowStart,
-                              _T("this column is not in this row at all!") );
+                              wxT("this column is not in this row at all!") );
 
                 return colRowEnd == colNextRowStart - 1;
             }
         }
 
         // caller got it wrong
-        wxFAIL_MSG( _T("this column is not in the start of the row!") );
+        wxFAIL_MSG( wxT("this column is not in the start of the row!") );
 
         return false;
     }
@@ -525,8 +525,8 @@ public:
 
     // we don't use these methods as they don't make sense for us as we need a
     // wxTextCtrl to be applied
-    virtual bool Do() { wxFAIL_MSG(_T("shouldn't be called")); return false; }
-    virtual bool Undo() { wxFAIL_MSG(_T("shouldn't be called")); return false; }
+    virtual bool Do() { wxFAIL_MSG(wxT("shouldn't be called")); return false; }
+    virtual bool Undo() { wxFAIL_MSG(wxT("shouldn't be called")); return false; }
 
     // instead, our command processor uses these methods
     virtual bool Do(wxTextCtrl *text) = 0;
@@ -745,7 +745,7 @@ bool wxTextCtrl::Create(wxWindow *parent
         // we might support it but it's quite useless and other ports don't
         // support it anyhow
         wxASSERT_MSG( !(style & wxTE_PASSWORD),
-                      _T("wxTE_PASSWORD can't be used with multiline ctrls") );
+                      wxT("wxTE_PASSWORD can't be used with multiline ctrls") );
     }
 
     RecalcFontMetrics();
@@ -835,7 +835,7 @@ wxString wxTextCtrl::GetValue() const
         size_t count = lines.GetCount();
         for ( size_t n = 1; n < count; n++ )
         {
-            self->m_value << _T('\n') << lines[n];
+            self->m_value << wxT('\n') << lines[n];
         }
     }
 
@@ -950,7 +950,7 @@ void wxTextCtrl::Replace(wxTextPos from,
          !PositionToXY(from, &colStart, &lineStart) ||
          !PositionToXY(to, &colEnd, &lineEnd) )
     {
-        wxFAIL_MSG(_T("invalid range in wxTextCtrl::Replace"));
+        wxFAIL_MSG(wxT("invalid range in wxTextCtrl::Replace"));
 
         return;
     }
@@ -1037,7 +1037,7 @@ void wxTextCtrl::Replace(wxTextPos from,
             if ( line > lineStart )
             {
                 // from the previous line
-                textOrig += _T('\n');
+                textOrig += wxT('\n');
             }
 
             textOrig += linesOld[line];
@@ -1058,7 +1058,7 @@ void wxTextCtrl::Replace(wxTextPos from,
         if ( (size_t)colStart == linesOld[lineStart].length() )
         {
             // text appended, refresh just enough to show the new text
-            widthNewText = GetTextWidth(text.BeforeFirst(_T('\n')));
+            widthNewText = GetTextWidth(text.BeforeFirst(wxT('\n')));
         }
         else // text inserted, refresh till the end of line
         {
@@ -1084,7 +1084,7 @@ void wxTextCtrl::Replace(wxTextPos from,
         for ( const wxChar *p = textNew.c_str(); ; p++ )
         {
             // end of line/text?
-            if ( !*p || *p == _T('\n') )
+            if ( !*p || *p == wxT('\n') )
             {
                 lines.Add(wxString(curLineStart, p));
                 if ( !*p )
@@ -1097,7 +1097,7 @@ void wxTextCtrl::Replace(wxTextPos from,
 #ifdef WXDEBUG_TEXT_REPLACE
         // (3a) all empty tokens should be counted as replacing with "foo" and
         //      with "foo\n" should have different effects
-        wxArrayString lines2 = wxStringTokenize(textNew, _T("\n"),
+        wxArrayString lines2 = wxStringTokenize(textNew, wxT("\n"),
                                                 wxTOKEN_RET_EMPTY_ALL);
 
         if ( lines2.IsEmpty() )
@@ -1106,10 +1106,10 @@ void wxTextCtrl::Replace(wxTextPos from,
         }
 
         wxASSERT_MSG( lines.GetCount() == lines2.GetCount(),
-                      _T("Replace() broken") );
+                      wxT("Replace() broken") );
         for ( size_t n = 0; n < lines.GetCount(); n++ )
         {
-            wxASSERT_MSG( lines[n] == lines2[n], _T("Replace() broken") );
+            wxASSERT_MSG( lines[n] == lines2[n], wxT("Replace() broken") );
         }
 #endif // WXDEBUG_TEXT_REPLACE
 
@@ -1240,7 +1240,7 @@ void wxTextCtrl::Replace(wxTextPos from,
 #ifdef WXDEBUG_TEXT_REPLACE
     // optimized code above should give the same result as straightforward
     // computation in the beginning
-    wxASSERT_MSG( GetValue() == textTotalNew, _T("error in Replace()") );
+    wxASSERT_MSG( GetValue() == textTotalNew, wxT("error in Replace()") );
 #endif // WXDEBUG_TEXT_REPLACE
 
     // update the current position: note that we always put the cursor at the
@@ -1296,7 +1296,7 @@ void wxTextCtrl::AppendText(const wxStri
 void wxTextCtrl::SetInsertionPoint(wxTextPos pos)
 {
     wxCHECK_RET( pos >= 0 && pos <= GetLastPosition(),
-                 _T("insertion point position out of range") );
+                 wxT("insertion point position out of range") );
 
     // don't do anything if it didn't change
     if ( pos != m_curPos )
@@ -1326,7 +1326,7 @@ void wxTextCtrl::InitInsertionPoint()
 void wxTextCtrl::MoveInsertionPoint(wxTextPos pos)
 {
     wxASSERT_MSG( pos >= 0 && pos <= GetLastPosition(),
-                 _T("DoSetInsertionPoint() can only be called with valid pos") );
+                 wxT("DoSetInsertionPoint() can only be called with valid pos") );
 
     m_curPos = pos;
     PositionToXY(m_curPos, &m_curCol, &m_curRow);
@@ -1376,7 +1376,7 @@ wxTextPos wxTextCtrl::GetLastPosition() 
         }
 
         // more probable reason of this would be to forget to update m_posLast
-        wxASSERT_MSG( pos == m_posLast, _T("bug in GetLastPosition()") );
+        wxASSERT_MSG( pos == m_posLast, wxT("bug in GetLastPosition()") );
 #endif // WXDEBUG_TEXT
 
         pos = m_posLast;
@@ -1424,12 +1424,12 @@ wxString wxTextCtrl::GetSelectionText() 
             {
                 // take the end of the first line
                 sel = GetLines()[lineStart].c_str() + colStart;
-                sel += _T('\n');
+                sel += wxT('\n');
 
                 // all intermediate ones
                 for ( wxTextCoord line = lineStart + 1; line < lineEnd; line++ )
                 {
-                    sel << GetLines()[line] << _T('\n');
+                    sel << GetLines()[line] << wxT('\n');
                 }
 
                 // and the start of the last one
@@ -1466,7 +1466,7 @@ void wxTextCtrl::SetSelection(wxTextPos 
         OrderPositions(from, to);
 
         wxCHECK_RET( to <= GetLastPosition(),
-                     _T("invalid range in wxTextCtrl::SetSelection") );
+                     wxT("invalid range in wxTextCtrl::SetSelection") );
 
         if ( from != m_selStart || to != m_selEnd )
         {
@@ -1478,7 +1478,7 @@ void wxTextCtrl::SetSelection(wxTextPos 
             m_selStart = from;
             m_selEnd = to;
 
-            wxLogTrace(_T("text"), _T("Selection range is %ld-%ld"),
+            wxLogTrace(wxT("text"), wxT("Selection range is %ld-%ld"),
                        m_selStart, m_selEnd);
 
             // refresh only the part of text which became (un)selected if
@@ -1652,14 +1652,14 @@ int wxTextCtrl::GetLineLength(wxTextCoor
 {
     if ( IsSingleLine() )
     {
-        wxASSERT_MSG( line == 0, _T("invalid GetLineLength() parameter") );
+        wxASSERT_MSG( line == 0, wxT("invalid GetLineLength() parameter") );
 
         return m_value.length();
     }
     else // multiline
     {
         wxCHECK_MSG( (size_t)line < GetLineCount(), -1,
-                     _T("line index out of range") );
+                     wxT("line index out of range") );
 
         return GetLines()[line].length();
     }
@@ -1669,7 +1669,7 @@ wxString wxTextCtrl::GetLineText(wxTextC
 {
     if ( IsSingleLine() )
     {
-        wxASSERT_MSG( line == 0, _T("invalid GetLineLength() parameter") );
+        wxASSERT_MSG( line == 0, wxT("invalid GetLineLength() parameter") );
 
         return m_value;
     }
@@ -1679,7 +1679,7 @@ wxString wxTextCtrl::GetLineText(wxTextC
         if (line == 0 && GetLineCount() == 0) return wxEmptyString ;
 
         wxCHECK_MSG( (size_t)line < GetLineCount(), wxEmptyString,
-                     _T("line index out of range") );
+                     wxT("line index out of range") );
 
         return GetLines()[line];
     }
@@ -1761,7 +1761,7 @@ bool wxTextCtrl::PositionToXY(wxTextPos 
 
 #ifdef WXDEBUG_TEXT
                 wxASSERT_MSG( XYToPosition(pos - posCur, nLine) == pos,
-                              _T("XYToPosition() or PositionToXY() broken") );
+                              wxT("XYToPosition() or PositionToXY() broken") );
 #endif // WXDEBUG_TEXT
 
                 return true;
@@ -1899,7 +1899,7 @@ wxPoint wxTextCtrl::GetCaretPosition() c
     wxCoord xCaret, yCaret;
     if ( !PositionToDeviceXY(m_curPos, &xCaret, &yCaret) )
     {
-        wxFAIL_MSG( _T("Caret can't be beyond the text!") );
+        wxFAIL_MSG( wxT("Caret can't be beyond the text!") );
     }
 
     return wxPoint(xCaret, yCaret);
@@ -2280,7 +2280,7 @@ bool wxTextCtrlInsertCommand::Do(wxTextC
 
 bool wxTextCtrlInsertCommand::Undo(wxTextCtrl *text)
 {
-    wxCHECK_MSG( CanUndo(), false, _T("impossible to undo insert cmd") );
+    wxCHECK_MSG( CanUndo(), false, wxT("impossible to undo insert cmd") );
 
     // remove the text from where we inserted it
     text->Remove(m_from, m_from + m_text.length());
@@ -2317,7 +2317,7 @@ bool wxTextCtrlRemoveCommand::Undo(wxTex
 void wxTextCtrl::Undo()
 {
     // the caller must check it
-    wxASSERT_MSG( CanUndo(), _T("can't call Undo() if !CanUndo()") );
+    wxASSERT_MSG( CanUndo(), wxT("can't call Undo() if !CanUndo()") );
 
     m_cmdProcessor->Undo();
 }
@@ -2325,7 +2325,7 @@ void wxTextCtrl::Undo()
 void wxTextCtrl::Redo()
 {
     // the caller must check it
-    wxASSERT_MSG( CanRedo(), _T("can't call Undo() if !CanUndo()") );
+    wxASSERT_MSG( CanRedo(), wxT("can't call Undo() if !CanUndo()") );
 
     m_cmdProcessor->Redo();
 }
@@ -2456,7 +2456,7 @@ void wxTextCtrl::UpdateLastVisible()
         case wxTE_HT_BELOW:
             */
         default:
-            wxFAIL_MSG(_T("unexpected HitTestLine() return value"));
+            wxFAIL_MSG(wxT("unexpected HitTestLine() return value"));
             // fall through
 
         case wxTE_HT_ON_TEXT:
@@ -2492,7 +2492,7 @@ void wxTextCtrl::UpdateLastVisible()
     // SData().m_colStart, we need an absolute offset into string
     SData().m_colLastVisible += SData().m_colStart;
 
-    wxLogTrace(_T("text"), _T("Last visible column/position is %d/%ld"),
+    wxLogTrace(wxT("text"), wxT("Last visible column/position is %d/%ld"),
                (int) SData().m_colLastVisible, (long) SData().m_posLastVisible);
 }
 
@@ -2564,7 +2564,7 @@ wxTextCoord wxTextCtrl::GetRowInLine(wxT
                                      wxTextCoord col,
                                      wxTextCoord *colRowStart) const
 {
-    wxASSERT_MSG( WrapLines(), _T("shouldn't be called") );
+    wxASSERT_MSG( WrapLines(), wxT("shouldn't be called") );
 
     const wxWrappedLineData& lineData = WData().m_linesData[line];
 
@@ -2592,7 +2592,7 @@ wxTextCoord wxTextCtrl::GetRowInLine(wxT
         *colRowStart = lineData.GetRowStart(row);
 
         // this can't happen, of course
-        wxASSERT_MSG( *colRowStart <= col, _T("GetRowInLine() is broken") );
+        wxASSERT_MSG( *colRowStart <= col, wxT("GetRowInLine() is broken") );
     }
 
     return row;
@@ -2633,12 +2633,12 @@ void wxTextCtrl::LayoutLine(wxTextCoord 
 
 void wxTextCtrl::LayoutLines(wxTextCoord lineLast) const
 {
-    wxASSERT_MSG( WrapLines(), _T("should only be used for line wrapping") );
+    wxASSERT_MSG( WrapLines(), wxT("should only be used for line wrapping") );
 
     // if we were called, some line was dirty and if it was dirty we must have
     // had m_rowFirstInvalid set to something too
     wxTextCoord lineFirst = WData().m_rowFirstInvalid;
-    wxASSERT_MSG( lineFirst != -1, _T("nothing to layout?") );
+    wxASSERT_MSG( lineFirst != -1, wxT("nothing to layout?") );
 
     wxTextCoord rowFirst, rowCur;
     if ( lineFirst )
@@ -2691,7 +2691,7 @@ size_t wxTextCtrl::GetPartOfWrappedLine(
                                         wxCoord *widthReal) const
 {
     // this function is slow, it shouldn't be called unless really needed
-    wxASSERT_MSG( WrapLines(), _T("shouldn't be called") );
+    wxASSERT_MSG( WrapLines(), wxT("shouldn't be called") );
 
     wxString s(text);
     wxTextCoord col;
@@ -2703,7 +2703,7 @@ size_t wxTextCtrl::GetPartOfWrappedLine(
         case wxTE_HT_BELOW:
             */
         default:
-            wxFAIL_MSG(_T("unexpected HitTestLine() return value"));
+            wxFAIL_MSG(wxT("unexpected HitTestLine() return value"));
             // fall through
 
         case wxTE_HT_ON_TEXT:
@@ -2943,7 +2943,7 @@ wxTextCtrlHitTestResult wxTextCtrl::HitT
             }
 
             // this is not supposed to happen
-            wxASSERT_MSG( matchDir, _T("logic error in wxTextCtrl::HitTest") );
+            wxASSERT_MSG( matchDir, wxT("logic error in wxTextCtrl::HitTest") );
 
             if ( matchDir == Match_Right )
                 col++;
@@ -2967,11 +2967,11 @@ wxTextCtrlHitTestResult wxTextCtrl::HitT
             dc.GetTextExtent(text, &width2, NULL);
 
             wxASSERT_MSG( (width1 <= x) && (x < width2),
-                          _T("incorrect HitTestLine() result") );
+                          wxT("incorrect HitTestLine() result") );
         }
         else // we return last char
         {
-            wxASSERT_MSG( x >= width1, _T("incorrect HitTestLine() result") );
+            wxASSERT_MSG( x >= width1, wxT("incorrect HitTestLine() result") );
         }
     }
 #endif // WXDEBUG_TEXT
@@ -3276,7 +3276,7 @@ bool wxTextCtrl::GetLineAndRow(wxTextCoo
 
 void wxTextCtrl::ShowHorzPosition(wxCoord pos)
 {
-    wxASSERT_MSG( IsSingleLine(), _T("doesn't work for multiline") );
+    wxASSERT_MSG( IsSingleLine(), wxT("doesn't work for multiline") );
 
     // pos is the logical position to show
 
@@ -3315,7 +3315,7 @@ void wxTextCtrl::ShowHorzPosition(wxCoor
 void wxTextCtrl::ScrollText(wxTextCoord col)
 {
     wxASSERT_MSG( IsSingleLine(),
-                  _T("ScrollText() is for single line controls only") );
+                  wxT("ScrollText() is for single line controls only") );
 
     // never scroll beyond the left border
     if ( col < 0 )
@@ -3510,7 +3510,7 @@ void wxTextCtrl::RecalcFontMetrics()
 
 void wxTextCtrl::RecalcMaxWidth()
 {
-    wxASSERT_MSG( !IsSingleLine(), _T("only used for multiline") );
+    wxASSERT_MSG( !IsSingleLine(), wxT("only used for multiline") );
 
     MData().m_widthMax = -1;
     (void)GetMaxWidth();
@@ -3544,14 +3544,14 @@ wxCoord wxTextCtrl::GetMaxWidth() const
         }
     }
 
-    wxASSERT_MSG( MData().m_widthMax != -1, _T("should have at least 1 line") );
+    wxASSERT_MSG( MData().m_widthMax != -1, wxT("should have at least 1 line") );
 
     return MData().m_widthMax;
 }
 
 void wxTextCtrl::UpdateScrollbars()
 {
-    wxASSERT_MSG( !IsSingleLine(), _T("only used for multiline") );
+    wxASSERT_MSG( !IsSingleLine(), wxT("only used for multiline") );
 
     wxSize size = GetRealTextArea().GetSize();
 
@@ -3674,7 +3674,7 @@ void wxTextCtrl::RefreshSelection()
 void wxTextCtrl::RefreshLineRange(wxTextCoord lineFirst, wxTextCoord lineLast)
 {
     wxASSERT_MSG( lineFirst <= lineLast || !lineLast,
-                  _T("no lines to refresh") );
+                  wxT("no lines to refresh") );
 
     wxRect rect;
     // rect.x is already 0
@@ -3691,7 +3691,7 @@ void wxTextCtrl::RefreshLineRange(wxText
         // lineFirst may be beyond the last line only if we refresh till
         // the end, otherwise it's illegal
         wxASSERT_MSG( lineFirst == GetNumberOfLines() && !lineLast,
-                      _T("invalid line range") );
+                      wxT("invalid line range") );
 
         rowFirst = GetRowAfterLine(lineFirst - 1);
     }
@@ -3717,7 +3717,7 @@ void wxTextCtrl::RefreshLineRange(wxText
 void wxTextCtrl::RefreshTextRange(wxTextPos start, wxTextPos end)
 {
     wxCHECK_RET( start != -1 && end != -1,
-                 _T("invalid RefreshTextRange() arguments") );
+                 wxT("invalid RefreshTextRange() arguments") );
 
     // accept arguments in any order as it is more conenient for the caller
     OrderPositions(start, end);
@@ -3773,7 +3773,7 @@ void wxTextCtrl::RefreshColRange(wxTextC
     wxString text = GetLineText(line);
 
     wxASSERT_MSG( (size_t)start <= text.length() && count,
-                  _T("invalid RefreshColRange() parameter") );
+                  wxT("invalid RefreshColRange() parameter") );
 
     RefreshPixelRange(line,
                       GetTextWidth(text.Left((size_t)start)),
@@ -3905,7 +3905,7 @@ void wxTextCtrl::RefreshTextRect(const w
     if ( rect.y < m_rectText.y )
         rect.y = m_rectText.y;
 
-    wxLogTrace(_T("text"), _T("Refreshing (%d, %d)-(%d, %d)"),
+    wxLogTrace(wxT("text"), wxT("Refreshing (%d, %d)-(%d, %d)"),
                rect.x, rect.y, rect.x + rect.width, rect.y + rect.height);
 
     Refresh(true, &rect);
@@ -3955,7 +3955,7 @@ wxString wxTextCtrl::GetTextToShow(const
 {
     wxString textShown;
     if ( IsPassword() )
-        textShown = wxString(_T('*'), text.length());
+        textShown = wxString(wxT('*'), text.length());
     else
         textShown = text;
 
@@ -4034,7 +4034,7 @@ void wxTextCtrl::DoDrawTextInRect(wxDC& 
 
         if ( (ht == wxTE_HT_BEYOND) || (ht == wxTE_HT_BELOW) )
         {
-            wxASSERT_MSG( line <= lineEnd, _T("how did we get that far?") );
+            wxASSERT_MSG( line <= lineEnd, wxT("how did we get that far?") );
 
             if ( line == lineEnd )
             {
@@ -4115,7 +4115,7 @@ void wxTextCtrl::DoDrawTextInRect(wxDC& 
         }
 
         // calculate the text coords on screen
-        wxASSERT_MSG( colStart >= colRowStart, _T("invalid string part") );
+        wxASSERT_MSG( colStart >= colRowStart, wxT("invalid string part") );
         wxCoord ofsStart = GetTextWidth(
                                     textLine.Mid(colRowStart,
                                                  colStart - colRowStart));
@@ -4125,7 +4125,7 @@ void wxTextCtrl::DoDrawTextInRect(wxDC& 
         // do draw the text
         renderer->DrawTextLine(dc, text, rectText, selStart, selEnd,
                                GetStateFlags());
-        wxLogTrace(_T("text"), _T("Line %ld: positions %ld-%ld redrawn."),
+        wxLogTrace(wxT("text"), wxT("Line %ld: positions %ld-%ld redrawn."),
                    line, colStart, colEnd);
     }
 }
@@ -4133,7 +4133,7 @@ void wxTextCtrl::DoDrawTextInRect(wxDC& 
 void wxTextCtrl::DoDrawLineWrapMarks(wxDC& dc, const wxRect& rectUpdate)
 {
     wxASSERT_MSG( WrapLines() && WData().m_widthMark,
-                  _T("shouldn't be called at all") );
+                  wxT("shouldn't be called at all") );
 
     wxRenderer *renderer = GetRenderer();
 
@@ -4345,7 +4345,7 @@ size_t wxTextCtrl::GetLinesPerPage() con
 wxTextPos wxTextCtrl::GetPositionAbove()
 {
     wxCHECK_MSG( !IsSingleLine(), INVALID_POS_VALUE,
-                 _T("can't move cursor vertically in a single line control") );
+                 wxT("can't move cursor vertically in a single line control") );
 
     // move the cursor up by one ROW not by one LINE: this means that
     // we should really use HitTest() and not just go to the same
@@ -4378,7 +4378,7 @@ wxTextPos wxTextCtrl::GetPositionAbove()
 wxTextPos wxTextCtrl::GetPositionBelow()
 {
     wxCHECK_MSG( !IsSingleLine(), INVALID_POS_VALUE,
-                 _T("can't move cursor vertically in a single line control") );
+                 wxT("can't move cursor vertically in a single line control") );
 
     // see comments for wxACTION_TEXT_UP
     wxPoint pt = GetCaretPosition() - m_rectText.GetPosition();
@@ -4707,7 +4707,7 @@ bool wxTextCtrl::PerformAction(const wxC
 
     if ( textChanged )
     {
-        wxASSERT_MSG( IsEditable(), _T("non editable control changed?") );
+        wxASSERT_MSG( IsEditable(), wxT("non editable control changed?") );
 
         wxCommandEvent event(wxEVT_COMMAND_TEXT_UPDATED, GetId());
         InitCommandEvent(event);
@@ -4740,7 +4740,7 @@ void wxTextCtrl::OnChar(wxKeyEvent& even
             }
             else // interpret <Enter> normally: insert new line
             {
-                PerformAction(wxACTION_TEXT_INSERT, -1, _T('\n'));
+                PerformAction(wxACTION_TEXT_INSERT, -1, wxT('\n'));
             }
         }
         else if ( keycode < 255 && isprint(keycode) )
@@ -4933,7 +4933,7 @@ bool wxStdTextCtrlInputHandler::HandleMo
 {
     if ( event.LeftDown() )
     {
-        wxASSERT_MSG( !m_winCapture, _T("left button going down twice?") );
+        wxASSERT_MSG( !m_winCapture, wxT("left button going down twice?") );
 
         wxTextCtrl *text = wxStaticCast(consumer->GetInputWindow(), wxTextCtrl);
 
--- src/univ/menu.cpp-orig	2009-06-18 19:42:51.151944000 -0500
+++ src/univ/menu.cpp	2009-06-18 19:42:58.849466000 -0500
@@ -360,7 +360,7 @@ void wxPopupMenuWindow::ChangeCurrent(wx
         if ( nodeOldCurrent )
         {
             wxMenuItem *item = nodeOldCurrent->GetData();
-            wxCHECK_RET( item, _T("no current item?") );
+            wxCHECK_RET( item, wxT("no current item?") );
 
             // if it was the currently opened menu, close it
             if ( item->IsSubMenu() && item->GetSubMenu()->IsShown() )
@@ -432,7 +432,7 @@ void wxPopupMenuWindow::Popup(wxWindow *
     // check that the current item had been properly reset before
     wxASSERT_MSG( !m_nodeCurrent ||
                   m_nodeCurrent == m_menu->GetMenuItems().GetFirst(),
-                  _T("menu current item preselected incorrectly") );
+                  wxT("menu current item preselected incorrectly") );
 
     wxPopupTransientWindow::Popup(focus);
 
@@ -451,13 +451,13 @@ void wxPopupMenuWindow::Popup(wxWindow *
         wxPopupMenuWindow *win = menuParent->m_popupMenu;
 
         // if we're shown, the parent menu must be also shown
-        wxCHECK_RET( win, _T("parent menu is not shown?") );
+        wxCHECK_RET( win, wxT("parent menu is not shown?") );
 
         if ( !::SetWindowPos(GetHwndOf(win), GetHwnd(),
                              0, 0, 0, 0,
                              SWP_NOMOVE | SWP_NOSIZE | SWP_NOREDRAW) )
         {
-            wxLogLastError(_T("SetWindowPos(HWND_TOP)"));
+            wxLogLastError(wxT("SetWindowPos(HWND_TOP)"));
         }
 
         Refresh();
@@ -470,10 +470,10 @@ void wxPopupMenuWindow::Dismiss()
     if ( HasOpenSubmenu() )
     {
         wxMenuItem *item = GetCurrentItem();
-        wxCHECK_RET( item && item->IsSubMenu(), _T("where is our open submenu?") );
+        wxCHECK_RET( item && item->IsSubMenu(), wxT("where is our open submenu?") );
 
         wxPopupMenuWindow *win = item->GetSubMenu()->m_popupMenu;
-        wxCHECK_RET( win, _T("opened submenu is not opened?") );
+        wxCHECK_RET( win, wxT("opened submenu is not opened?") );
 
         win->Dismiss();
         OnSubmenuDismiss( false );
@@ -542,9 +542,9 @@ wxPopupMenuWindow::GetMenuItemFromPoint(
 
 void wxPopupMenuWindow::RefreshItem(wxMenuItem *item)
 {
-    wxCHECK_RET( item, _T("can't refresh NULL item") );
+    wxCHECK_RET( item, wxT("can't refresh NULL item") );
 
-    wxASSERT_MSG( IsShown(), _T("can't refresh menu which is not shown") );
+    wxASSERT_MSG( IsShown(), wxT("can't refresh menu which is not shown") );
 
     // FIXME: -1 here because of SetLogicalOrigin(1, 1) in DoDraw()
     RefreshRect(wxRect(0, item->GetPosition() - 1,
@@ -637,10 +637,10 @@ void wxPopupMenuWindow::DoDraw(wxControl
 
 void wxPopupMenuWindow::ClickItem(wxMenuItem *item)
 {
-    wxCHECK_RET( item, _T("can't click NULL item") );
+    wxCHECK_RET( item, wxT("can't click NULL item") );
 
     wxASSERT_MSG( !item->IsSeparator() && !item->IsSubMenu(),
-                  _T("can't click this item") );
+                  wxT("can't click this item") );
 
     wxMenu* menu = m_menu;
 
@@ -652,10 +652,10 @@ void wxPopupMenuWindow::ClickItem(wxMenu
 
 void wxPopupMenuWindow::OpenSubmenu(wxMenuItem *item, InputMethod how)
 {
-    wxCHECK_RET( item, _T("can't open NULL submenu") );
+    wxCHECK_RET( item, wxT("can't open NULL submenu") );
 
     wxMenu *submenu = item->GetSubMenu();
-    wxCHECK_RET( submenu, _T("can only open submenus!") );
+    wxCHECK_RET( submenu, wxT("can only open submenus!") );
 
     // FIXME: should take into account the border width
     submenu->Popup(ClientToScreen(wxPoint(0, item->GetPosition())),
@@ -710,7 +710,7 @@ bool wxPopupMenuWindow::ProcessLeftDown(
         {
             wxPopupMenuWindow *win = menu->m_popupMenu;
 
-            wxCHECK_MSG( win, false, _T("parent menu not shown?") );
+            wxCHECK_MSG( win, false, wxT("parent menu not shown?") );
 
             pos = ClientToScreen(pos);
             if ( win->GetMenuItemFromPoint(win->ScreenToClient(pos)) )
@@ -799,7 +799,7 @@ void wxPopupMenuWindow::ProcessMouseMove
             wxPopupMenuWindow *win = menuParent->m_popupMenu;
 
             // if we're shown, the parent menu must be also shown
-            wxCHECK_RET( win, _T("parent menu is not shown?") );
+            wxCHECK_RET( win, wxT("parent menu is not shown?") );
 
             win->ProcessMouseMove(win->ScreenToClient(ptScreen));
         }
@@ -834,10 +834,10 @@ void wxPopupMenuWindow::OnMouseLeave(wxM
         if ( HasOpenSubmenu() )
         {
             wxMenuItem *item = GetCurrentItem();
-            wxCHECK_RET( CanOpen(item), _T("where is our open submenu?") );
+            wxCHECK_RET( CanOpen(item), wxT("where is our open submenu?") );
 
             wxPopupMenuWindow *win = item->GetSubMenu()->m_popupMenu;
-            wxCHECK_RET( win, _T("submenu is opened but not shown?") );
+            wxCHECK_RET( win, wxT("submenu is opened but not shown?") );
 
             // only handle this event if the mouse is not inside the submenu
             wxPoint pt = ClientToScreen(event.GetPosition());
@@ -883,7 +883,7 @@ bool wxPopupMenuWindow::ProcessKeyDown(i
     if ( HasOpenSubmenu() )
     {
         wxCHECK_MSG( CanOpen(item), false,
-                     _T("has open submenu but another item selected?") );
+                     wxT("has open submenu but another item selected?") );
 
         if ( item->GetSubMenu()->ProcessKeyDown(key) )
             return true;
@@ -1087,7 +1087,7 @@ const wxMenuGeometryInfo& wxMenu::GetGeo
         }
         else
         {
-            wxFAIL_MSG( _T("can't get geometry without window") );
+            wxFAIL_MSG( wxT("can't get geometry without window") );
         }
     }
 
@@ -1156,7 +1156,7 @@ wxMenuItem* wxMenu::DoAppend(wxMenuItem 
             }
             else
             {
-                wxFAIL_MSG( _T("where is the radio group start item?") );
+                wxFAIL_MSG( wxT("where is the radio group start item?") );
             }
         }
     }
@@ -1207,7 +1207,7 @@ void wxMenu::Attach(wxMenuBarBase *menub
 {
     wxMenuBase::Attach(menubar);
 
-    wxCHECK_RET( m_menuBar, _T("menubar can't be NULL after attaching") );
+    wxCHECK_RET( m_menuBar, wxT("menubar can't be NULL after attaching") );
 
     // unfortunately, we can't use m_menuBar->GetEventHandler() here because,
     // if the menubar is currently showing a menu, its event handler is a
@@ -1263,7 +1263,7 @@ wxWindow *wxMenu::GetRootWindow() const
 
     // we're probably going to crash in the caller anyhow, but try to detect
     // this error as soon as possible
-    wxASSERT_MSG( win, _T("menu without any associated window?") );
+    wxASSERT_MSG( win, wxT("menu without any associated window?") );
 
     // also remember it in this menu so that we don't have to search for it the
     // next time
@@ -1275,7 +1275,7 @@ wxWindow *wxMenu::GetRootWindow() const
 wxRenderer *wxMenu::GetRenderer() const
 {
     // we're going to crash without renderer!
-    wxCHECK_MSG( m_popupMenu, NULL, _T("neither popup nor menubar menu?") );
+    wxCHECK_MSG( m_popupMenu, NULL, wxT("neither popup nor menubar menu?") );
 
     return m_popupMenu->GetRenderer();
 }
@@ -1288,7 +1288,7 @@ void wxMenu::RefreshItem(wxMenuItem *ite
     if ( IsShown() )
     {
         // this would be a bug in IsShown()
-        wxCHECK_RET( m_popupMenu, _T("must have popup window if shown!") );
+        wxCHECK_RET( m_popupMenu, wxT("must have popup window if shown!") );
 
         // recalc geometry to update the item height and such
         (void)GetGeometryInfo();
@@ -1318,7 +1318,7 @@ void wxMenu::OnDismiss(bool dismissParen
         }
         else
         {
-            wxFAIL_MSG( _T("parent menu not shown?") );
+            wxFAIL_MSG( wxT("parent menu not shown?") );
         }
 
         // and if we dismiss everything, propagate to parent
@@ -1338,7 +1338,7 @@ void wxMenu::OnDismiss(bool dismissParen
         }
         else // popup menu
         {
-            wxCHECK_RET( m_invokingWindow, _T("what kind of menu is this?") );
+            wxCHECK_RET( m_invokingWindow, wxT("what kind of menu is this?") );
 
             m_invokingWindow->DismissPopupMenu();
 
@@ -1373,7 +1373,7 @@ void wxMenu::Popup(const wxPoint& pos, c
     // always keep the focus at the originating window
     wxWindow *focus = GetRootWindow();
 
-    wxASSERT_MSG( focus, _T("no window to keep focus on?") );
+    wxASSERT_MSG( focus, wxT("no window to keep focus on?") );
 
     // and show it
     m_popupMenu->Popup(focus);
@@ -1381,7 +1381,7 @@ void wxMenu::Popup(const wxPoint& pos, c
 
 void wxMenu::Dismiss()
 {
-    wxCHECK_RET( IsShown(), _T("can't dismiss hidden menu") );
+    wxCHECK_RET( IsShown(), wxT("can't dismiss hidden menu") );
 
     m_popupMenu->Dismiss();
 }
@@ -1393,7 +1393,7 @@ void wxMenu::Dismiss()
 bool wxMenu::ProcessKeyDown(int key)
 {
     wxCHECK_MSG( m_popupMenu, false,
-                 _T("can't process key events if not shown") );
+                 wxT("can't process key events if not shown") );
 
     return m_popupMenu->ProcessKeyDown(key);
 }
@@ -1539,7 +1539,7 @@ void wxMenuItem::UpdateAccelInfo()
     m_indexAccel = wxControl::FindAccelIndex(m_text);
 
     // will be empty if the text contains no TABs - ok
-    m_strAccel = m_text.AfterFirst(_T('\t'));
+    m_strAccel = m_text.AfterFirst(wxT('\t'));
 }
 
 void wxMenuItem::SetText(const wxString& text)
@@ -1602,7 +1602,7 @@ void wxMenuItem::Check(bool check)
         const wxMenuItemList& items = m_parentMenu->GetMenuItems();
         int pos = items.IndexOf(this);
         wxCHECK_RET( pos != wxNOT_FOUND,
-                     _T("menuitem not found in the menu items list?") );
+                     wxT("menuitem not found in the menu items list?") );
 
         // get the radio group range
         int start,
@@ -1649,7 +1649,7 @@ void wxMenuItem::SetAsRadioGroupStart()
 void wxMenuItem::SetRadioGroupStart(int start)
 {
     wxASSERT_MSG( !m_isRadioGroupStart,
-                  _T("should only be called for the next radio items") );
+                  wxT("should only be called for the next radio items") );
 
     m_radioGroup.start = start;
 }
@@ -1657,7 +1657,7 @@ void wxMenuItem::SetRadioGroupStart(int 
 void wxMenuItem::SetRadioGroupEnd(int end)
 {
     wxASSERT_MSG( m_isRadioGroupStart,
-                  _T("should only be called for the first radio item") );
+                  wxT("should only be called for the first radio item") );
 
     m_radioGroup.end = end;
 }
@@ -1688,7 +1688,7 @@ wxMenuBar::wxMenuBar(size_t n, wxMenu *m
 void wxMenuBar::Attach(wxFrame *frame)
 {
     // maybe you really wanted to call Detach()?
-    wxCHECK_RET( frame, _T("wxMenuBar::Attach(NULL) called") );
+    wxCHECK_RET( frame, wxT("wxMenuBar::Attach(NULL) called") );
 
     wxMenuBarBase::Attach(frame);
 
@@ -1806,7 +1806,7 @@ wxCoord wxMenuBar::GetItemWidth(size_t p
 
 void wxMenuBar::EnableTop(size_t pos, bool enable)
 {
-    wxCHECK_RET( pos < GetCount(), _T("invalid index in EnableTop") );
+    wxCHECK_RET( pos < GetCount(), wxT("invalid index in EnableTop") );
 
     if ( enable != m_menuInfos[pos].IsEnabled() )
     {
@@ -1819,14 +1819,14 @@ void wxMenuBar::EnableTop(size_t pos, bo
 
 bool wxMenuBar::IsEnabledTop(size_t pos) const
 {
-    wxCHECK_MSG( pos < GetCount(), false, _T("invalid index in IsEnabledTop") );
+    wxCHECK_MSG( pos < GetCount(), false, wxT("invalid index in IsEnabledTop") );
 
     return m_menuInfos[pos].IsEnabled();
 }
 
 void wxMenuBar::SetLabelTop(size_t pos, const wxString& label)
 {
-    wxCHECK_RET( pos < GetCount(), _T("invalid index in SetLabelTop") );
+    wxCHECK_RET( pos < GetCount(), wxT("invalid index in SetLabelTop") );
 
     if ( label != m_menuInfos[pos].GetOriginalLabel() )
     {
@@ -1839,7 +1839,7 @@ void wxMenuBar::SetLabelTop(size_t pos, 
 
 wxString wxMenuBar::GetLabelTop(size_t pos) const
 {
-    wxCHECK_MSG( pos < GetCount(), wxEmptyString, _T("invalid index in GetLabelTop") );
+    wxCHECK_MSG( pos < GetCount(), wxEmptyString, wxT("invalid index in GetLabelTop") );
 
     return m_menuInfos[pos].GetLabel();
 }
@@ -1874,7 +1874,7 @@ void wxMenuBar::RefreshAllItemsAfter(siz
 void wxMenuBar::RefreshItem(size_t pos)
 {
     wxCHECK_RET( pos != (size_t)-1,
-                 _T("invalid item in wxMenuBar::RefreshItem") );
+                 wxT("invalid item in wxMenuBar::RefreshItem") );
 
     if ( !IsCreated() )
     {
@@ -1949,8 +1949,8 @@ void wxMenuBar::DoDraw(wxControlRenderer
 
 wxRect wxMenuBar::GetItemRect(size_t pos) const
 {
-    wxASSERT_MSG( pos < GetCount(), _T("invalid menu bar item index") );
-    wxASSERT_MSG( IsCreated(), _T("can't call this method yet") );
+    wxASSERT_MSG( pos < GetCount(), wxT("invalid menu bar item index") );
+    wxASSERT_MSG( IsCreated(), wxT("can't call this method yet") );
 
     wxRect rect;
     rect.x =
@@ -2020,7 +2020,7 @@ int wxMenuBar::GetMenuFromPoint(const wx
 void wxMenuBar::SelectMenu(size_t pos)
 {
     SetFocus();
-    wxLogTrace(_T("mousecapture"), _T("Capturing mouse from wxMenuBar::SelectMenu"));
+    wxLogTrace(wxT("mousecapture"), wxT("Capturing mouse from wxMenuBar::SelectMenu"));
     CaptureMouse();
 
     DoSelectMenu(pos);
@@ -2028,7 +2028,7 @@ void wxMenuBar::SelectMenu(size_t pos)
 
 void wxMenuBar::DoSelectMenu(size_t pos)
 {
-    wxCHECK_RET( pos < GetCount(), _T("invalid menu index in DoSelectMenu") );
+    wxCHECK_RET( pos < GetCount(), wxT("invalid menu index in DoSelectMenu") );
 
     int posOld = m_current;
 
@@ -2056,7 +2056,7 @@ void wxMenuBar::DoSelectMenu(size_t pos)
 
 void wxMenuBar::PopupMenu(size_t pos)
 {
-    wxCHECK_RET( pos < GetCount(), _T("invalid menu index in PopupCurrentMenu") );
+    wxCHECK_RET( pos < GetCount(), wxT("invalid menu index in PopupCurrentMenu") );
 
     SetFocus();
     DoSelectMenu(pos);
@@ -2109,7 +2109,7 @@ void wxMenuBar::OnLeftDown(wxMouseEvent&
         }
         else // on item
         {
-            wxLogTrace(_T("mousecapture"), _T("Capturing mouse from wxMenuBar::OnLeftDown"));
+            wxLogTrace(wxT("mousecapture"), wxT("Capturing mouse from wxMenuBar::OnLeftDown"));
             CaptureMouse();
 
             // show it as selected
@@ -2184,7 +2184,7 @@ void wxMenuBar::OnKeyDown(wxKeyEvent& ev
         {
             // we always maintain a valid current item while we're in modal
             // state (i.e. have the capture)
-            wxFAIL_MSG( _T("how did we manage to lose current item?") );
+            wxFAIL_MSG( wxT("how did we manage to lose current item?") );
 
             return;
         }
@@ -2415,10 +2415,10 @@ bool wxMenuBar::ProcessAccelEvent(const 
 
 void wxMenuBar::PopupCurrentMenu(bool selectFirst)
 {
-    wxCHECK_RET( m_current != -1, _T("no menu to popup") );
+    wxCHECK_RET( m_current != -1, wxT("no menu to popup") );
 
     // forgot to call DismissMenu()?
-    wxASSERT_MSG( !m_menuShown, _T("shouldn't show two menus at once!") );
+    wxASSERT_MSG( !m_menuShown, wxT("shouldn't show two menus at once!") );
 
     // in any case, we should show it - even if we won't
     m_shouldShowMenu = true;
@@ -2453,7 +2453,7 @@ void wxMenuBar::PopupCurrentMenu(bool se
 
 void wxMenuBar::DismissMenu()
 {
-    wxCHECK_RET( m_menuShown, _T("can't dismiss menu if none is shown") );
+    wxCHECK_RET( m_menuShown, wxT("can't dismiss menu if none is shown") );
 
     m_menuShown->Dismiss();
     OnDismissMenu();
@@ -2472,7 +2472,7 @@ void wxMenuBar::OnDismissMenu(bool dismi
 void wxMenuBar::OnDismiss()
 {
     if ( ReleaseMouseCapture() )
-        wxLogTrace(_T("mousecapture"), _T("Releasing mouse from wxMenuBar::OnDismiss"));
+        wxLogTrace(wxT("mousecapture"), wxT("Releasing mouse from wxMenuBar::OnDismiss"));
 
     if ( m_current != -1 )
     {
@@ -2535,7 +2535,7 @@ wxEventLoop *wxWindow::ms_evtLoopPopup =
 bool wxWindow::DoPopupMenu(wxMenu *menu, int x, int y)
 {
     wxCHECK_MSG( !ms_evtLoopPopup, false,
-                 _T("can't show more than one popup menu at a time") );
+                 wxT("can't show more than one popup menu at a time") );
 
 #ifdef __WXMSW__
     // we need to change the cursor before showing the menu as, apparently, no
@@ -2597,7 +2597,7 @@ bool wxWindow::DoPopupMenu(wxMenu *menu,
 
 void wxWindow::DismissPopupMenu()
 {
-    wxCHECK_RET( ms_evtLoopPopup, _T("no popup menu shown") );
+    wxCHECK_RET( ms_evtLoopPopup, wxT("no popup menu shown") );
 
     ms_evtLoopPopup->Exit();
 }
--- src/univ/ctrlrend.cpp-orig	2009-06-18 19:43:04.897044000 -0500
+++ src/univ/ctrlrend.cpp	2009-06-18 19:43:11.307362000 -0500
@@ -208,9 +208,9 @@ void wxControlRenderer::DrawScrollbar(co
 
     {
         wxRect rectUpdate = rgnUpdate.GetBox();
-        wxLogTrace(_T("scrollbar"),
-                   _T("%s redraw: update box is (%d, %d)-(%d, %d)"),
-                   scrollbar->IsVertical() ? _T("vert") : _T("horz"),
+        wxLogTrace(wxT("scrollbar"),
+                   wxT("%s redraw: update box is (%d, %d)-(%d, %d)"),
+                   scrollbar->IsVertical() ? wxT("vert") : wxT("horz"),
                    rectUpdate.GetLeft(),
                    rectUpdate.GetTop(),
                    rectUpdate.GetRight(),
@@ -247,8 +247,8 @@ void wxControlRenderer::DrawScrollbar(co
 
         if ( rgnUpdate.Contains(rectBar) )
         {
-            wxLogTrace(_T("scrollbar"),
-                       _T("drawing bar part %d at (%d, %d)-(%d, %d)"),
+            wxLogTrace(wxT("scrollbar"),
+                       wxT("drawing bar part %d at (%d, %d)-(%d, %d)"),
                        nBar + 1,
                        rectBar.GetLeft(),
                        rectBar.GetTop(),
@@ -271,8 +271,8 @@ void wxControlRenderer::DrawScrollbar(co
         wxRect rectArrow = scrollbar->GetScrollbarRect(elem);
         if ( rgnUpdate.Contains(rectArrow) )
         {
-            wxLogTrace(_T("scrollbar"),
-                       _T("drawing arrow %d at (%d, %d)-(%d, %d)"),
+            wxLogTrace(wxT("scrollbar"),
+                       wxT("drawing arrow %d at (%d, %d)-(%d, %d)"),
                        nArrow + 1,
                        rectArrow.GetLeft(),
                        rectArrow.GetTop(),
@@ -296,8 +296,8 @@ void wxControlRenderer::DrawScrollbar(co
     wxRect rectThumb = scrollbar->GetScrollbarRect(elem);
     if ( rectThumb.width && rectThumb.height && rgnUpdate.Contains(rectThumb) )
     {
-        wxLogTrace(_T("scrollbar"),
-                   _T("drawing thumb at (%d, %d)-(%d, %d)"),
+        wxLogTrace(wxT("scrollbar"),
+                   wxT("drawing thumb at (%d, %d)-(%d, %d)"),
                    rectThumb.GetLeft(),
                    rectThumb.GetTop(),
                    rectThumb.GetRight(),
@@ -315,7 +315,7 @@ void wxControlRenderer::DrawScrollbar(co
 void wxControlRenderer::DrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
 {
     wxASSERT_MSG( x1 == x2 || y1 == y2,
-                  _T("line must be either horizontal or vertical") );
+                  wxT("line must be either horizontal or vertical") );
 
     if ( x1 == x2 )
         m_renderer->DrawVerticalLine(m_dc, x1, y1, y2);
@@ -465,7 +465,7 @@ void wxControlRenderer::DrawProgressBar(
         int step = gauge->IsVertical() ? sizeStep.y : sizeStep.x;
 
         // we divide by it below!
-        wxCHECK_RET( step, _T("invalid wxGauge step") );
+        wxCHECK_RET( step, wxT("invalid wxGauge step") );
 
         // round up to make the progress appear to start faster
         int lenTotal = gauge->IsVertical() ? rect.height : rect.width;
--- src/univ/radiobox.cpp-orig	2009-06-18 19:43:17.640818000 -0500
+++ src/univ/radiobox.cpp	2009-06-18 19:43:26.139158000 -0500
@@ -157,7 +157,7 @@ bool wxRadioBox::Create(wxWindow *parent
         }
         else
         {
-            wxFAIL_MSG( _T("you must specify wxRA_XXX style!") );
+            wxFAIL_MSG( wxT("you must specify wxRA_XXX style!") );
 
             // use default
             style = wxRA_HORIZONTAL | wxRA_LEFTTORIGHT;
@@ -239,7 +239,7 @@ void wxRadioBox::Append(int count, const
 
 void wxRadioBox::SetSelection(int n)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxRadioBox::SetSelection") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxRadioBox::SetSelection") );
 
     m_selection = n;
 
@@ -259,7 +259,7 @@ int wxRadioBox::GetSelection() const
 
 void wxRadioBox::SendRadioEvent()
 {
-    wxCHECK_RET( m_selection != -1, _T("no active radio button") );
+    wxCHECK_RET( m_selection != -1, wxT("no active radio button") );
 
     wxCommandEvent event(wxEVT_COMMAND_RADIOBOX_SELECTED, GetId());
     InitCommandEvent(event);
@@ -272,7 +272,7 @@ void wxRadioBox::SendRadioEvent()
 void wxRadioBox::OnRadioButton(wxEvent& event)
 {
     int n = m_buttons.Index((wxRadioButton *)event.GetEventObject());
-    wxCHECK_RET( n != wxNOT_FOUND, _T("click from alien radio button") );
+    wxCHECK_RET( n != wxNOT_FOUND, wxT("click from alien radio button") );
 
     m_selection = n;
 
@@ -286,42 +286,42 @@ void wxRadioBox::OnRadioButton(wxEvent& 
 wxString wxRadioBox::GetString(unsigned int n) const
 {
     wxCHECK_MSG( IsValid(n), wxEmptyString,
-                 _T("invalid index in wxRadioBox::GetString") );
+                 wxT("invalid index in wxRadioBox::GetString") );
 
     return m_buttons[n]->GetLabel();
 }
 
 void wxRadioBox::SetString(unsigned int n, const wxString& label)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxRadioBox::SetString") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxRadioBox::SetString") );
 
     m_buttons[n]->SetLabel(label);
 }
 
 bool wxRadioBox::Enable(unsigned int n, bool enable)
 {
-    wxCHECK_MSG( IsValid(n), false, _T("invalid index in wxRadioBox::Enable") );
+    wxCHECK_MSG( IsValid(n), false, wxT("invalid index in wxRadioBox::Enable") );
 
     return m_buttons[n]->Enable(enable);
 }
 
 bool wxRadioBox::IsItemEnabled(unsigned int n) const
 {
-    wxCHECK_MSG( IsValid(n), false, _T("invalid index in wxRadioBox::IsItemEnabled") );
+    wxCHECK_MSG( IsValid(n), false, wxT("invalid index in wxRadioBox::IsItemEnabled") );
 
     return m_buttons[n]->IsEnabled();
 }
 
 bool wxRadioBox::Show(unsigned int n, bool show)
 {
-    wxCHECK_MSG( IsValid(n), false, _T("invalid index in wxRadioBox::Show") );
+    wxCHECK_MSG( IsValid(n), false, wxT("invalid index in wxRadioBox::Show") );
 
     return m_buttons[n]->Show(show);
 }
 
 bool wxRadioBox::IsItemShown(unsigned int n) const
 {
-    wxCHECK_MSG( IsValid(n), false, _T("invalid index in wxRadioBox::IsItemShown") );
+    wxCHECK_MSG( IsValid(n), false, wxT("invalid index in wxRadioBox::IsItemShown") );
 
     return m_buttons[n]->IsShown();
 }
--- src/univ/toolbar.cpp-orig	2009-06-18 19:43:31.793077000 -0500
+++ src/univ/toolbar.cpp	2009-06-18 19:43:37.328268000 -0500
@@ -260,7 +260,7 @@ void wxToolBar::SetToolShortHelp(int id,
 {
     wxToolBarToolBase *tool = FindById(id);
 
-    wxCHECK_RET( tool, _T("SetToolShortHelp: no such tool") );
+    wxCHECK_RET( tool, wxT("SetToolShortHelp: no such tool") );
 
     tool->SetShortHelp(help);
 }
@@ -343,7 +343,7 @@ wxRect wxToolBar::GetToolRect(wxToolBarT
 
     wxRect rect;
 
-    wxCHECK_MSG( tool, rect, _T("GetToolRect: NULL tool") );
+    wxCHECK_MSG( tool, rect, wxT("GetToolRect: NULL tool") );
 
     // ensure that we always have the valid tool position
     if ( m_needsLayout )
@@ -439,7 +439,7 @@ void wxToolBar::SetWindowStyleFlag( long
 
 void wxToolBar::DoLayout()
 {
-    wxASSERT_MSG( m_needsLayout, _T("why are we called?") );
+    wxASSERT_MSG( m_needsLayout, wxT("why are we called?") );
 
     m_needsLayout = false;
 
@@ -586,7 +586,7 @@ void wxToolBar::GetRectLimits(const wxRe
                               wxCoord *start,
                               wxCoord *end) const
 {
-    wxCHECK_RET( start && end, _T("NULL pointer in GetRectLimits") );
+    wxCHECK_RET( start && end, wxT("NULL pointer in GetRectLimits") );
 
     if ( IsVertical() )
     {
@@ -738,7 +738,7 @@ bool wxToolBar::PerformAction(const wxCo
     }
     else if ( action == wxACTION_TOOLBAR_PRESS )
     {
-        wxLogTrace(_T("toolbar"), _T("Button '%s' pressed."), tool->GetShortHelp().c_str());
+        wxLogTrace(wxT("toolbar"), wxT("Button '%s' pressed."), tool->GetShortHelp().c_str());
 
         tool->Invert();
 
@@ -746,9 +746,9 @@ bool wxToolBar::PerformAction(const wxCo
     }
     else if ( action == wxACTION_TOOLBAR_RELEASE )
     {
-        wxLogTrace(_T("toolbar"), _T("Button '%s' released."), tool->GetShortHelp().c_str());
+        wxLogTrace(wxT("toolbar"), wxT("Button '%s' released."), tool->GetShortHelp().c_str());
 
-        wxASSERT_MSG( tool->IsInverted(), _T("release unpressed button?") );
+        wxASSERT_MSG( tool->IsInverted(), wxT("release unpressed button?") );
 
         tool->Invert();
 
@@ -773,7 +773,7 @@ bool wxToolBar::PerformAction(const wxCo
     }
     else if ( action == wxACTION_TOOLBAR_ENTER )
     {
-        wxCHECK_MSG( tool, false, _T("no tool to enter?") );
+        wxCHECK_MSG( tool, false, wxT("no tool to enter?") );
 
         if ( HasFlag(wxTB_FLAT) && tool->IsEnabled() )
         {
@@ -785,7 +785,7 @@ bool wxToolBar::PerformAction(const wxCo
     }
     else if ( action == wxACTION_TOOLBAR_LEAVE )
     {
-        wxCHECK_MSG( tool, false, _T("no tool to leave?") );
+        wxCHECK_MSG( tool, false, wxT("no tool to leave?") );
 
         if ( HasFlag(wxTB_FLAT) && tool->IsEnabled() )
         {
--- src/univ/slider.cpp-orig	2009-06-18 19:43:44.909097000 -0500
+++ src/univ/slider.cpp	2009-06-18 19:43:50.231360000 -0500
@@ -210,7 +210,7 @@ bool wxSlider::ChangeValueTo(int value)
 
     // this method is protected and we should only call it with normalized
     // value!
-    wxCHECK_MSG( IsInRange(value), false, _T("invalid slider value") );
+    wxCHECK_MSG( IsInRange(value), false, wxT("invalid slider value") );
 
     m_value = value;
 
@@ -287,14 +287,14 @@ int wxSlider::GetMax() const
 
 void wxSlider::SetLineSize(int lineSize)
 {
-    wxCHECK_RET( lineSize >= 0, _T("invalid slider line size") );
+    wxCHECK_RET( lineSize >= 0, wxT("invalid slider line size") );
 
     m_lineSize = lineSize;
 }
 
 void wxSlider::SetPageSize(int pageSize)
 {
-    wxCHECK_RET( pageSize >= 0, _T("invalid slider page size") );
+    wxCHECK_RET( pageSize >= 0, wxT("invalid slider page size") );
 
     m_pageSize = pageSize;
 }
@@ -323,7 +323,7 @@ int wxSlider::GetPageSize() const
 
 void wxSlider::SetThumbLength(int lenPixels)
 {
-    wxCHECK_RET( lenPixels >= 0, _T("invalid slider thumb size") );
+    wxCHECK_RET( lenPixels >= 0, wxT("invalid slider thumb size") );
 
     // use m_thumbSize here directly and not GetThumbLength() to avoid setting
     // it to the default value as we don't need it
@@ -356,7 +356,7 @@ int wxSlider::GetThumbLength() const
 
 void wxSlider::SetTickFreq(int n, int WXUNUSED(dummy))
 {
-    wxCHECK_RET (n > 0, _T("invalid slider tick frequency"));
+    wxCHECK_RET (n > 0, wxT("invalid slider tick frequency"));
 
     if ( n != m_tickFreq )
     {
@@ -376,7 +376,7 @@ wxSize wxSlider::CalcLabelSize() const
 
     // there is no sense in trying to calc the labels size if we haven't got
     // any, the caller must check for it
-    wxCHECK_MSG( HasLabels(), size, _T("shouldn't be called") );
+    wxCHECK_MSG( HasLabels(), size, wxT("shouldn't be called") );
 
     wxCoord w1, h1, w2, h2;
     GetTextExtent(FormatValue(m_min), &w1, &h1);
@@ -690,7 +690,7 @@ void wxSlider::CalcThumbRect(const wxRec
 
 wxString wxSlider::FormatValue(int value) const
 {
-    return wxString::Format(_T("%d"), value);
+    return wxString::Format(wxT("%d"), value);
 }
 
 void wxSlider::DoDraw(wxControlRenderer *renderer)
--- src/univ/winuniv.cpp-orig	2009-06-18 19:44:41.950621000 -0500
+++ src/univ/winuniv.cpp	2009-06-18 19:44:47.964253000 -0500
@@ -893,7 +893,7 @@ void wxWindow::SetScrollbar(int orient,
 {
 #if wxUSE_SCROLLBAR
     wxASSERT_MSG( pageSize <= range,
-                    _T("page size can't be greater than range") );
+                    wxT("page size can't be greater than range") );
 
     bool hasClientSizeChanged = false;
     wxScrollBar *scrollbar = GetScrollbar(orient);
@@ -1111,7 +1111,7 @@ void wxWindow::ScrollWindow(int dx, int 
 
 wxRect wxWindow::ScrollNoRefresh(int dx, int dy, const wxRect *rectTotal)
 {
-    wxASSERT_MSG( !dx || !dy, _T("can't be used for diag scrolling") );
+    wxASSERT_MSG( !dx || !dy, wxT("can't be used for diag scrolling") );
 
     // the rect to refresh (which we will calculate)
     wxRect rect;
@@ -1126,7 +1126,7 @@ wxRect wxWindow::ScrollNoRefresh(int dx,
     // location
     wxSize sizeTotal = rectTotal ? rectTotal->GetSize() : GetClientSize();
 
-    wxLogTrace(_T("scroll"), _T("rect is %dx%d, scroll by %d, %d"),
+    wxLogTrace(wxT("scroll"), wxT("rect is %dx%d, scroll by %d, %d"),
                sizeTotal.x, sizeTotal.y, dx, dy);
 
     // the initial and end point of the region we move in client coords
@@ -1144,7 +1144,7 @@ wxRect wxWindow::ScrollNoRefresh(int dx,
     if ( size.x <= 0 || size.y <= 0 )
     {
         // just redraw everything as nothing of the displayed image will stay
-        wxLogTrace(_T("scroll"), _T("refreshing everything"));
+        wxLogTrace(wxT("scroll"), wxT("refreshing everything"));
 
         rect = rectTotal ? *rectTotal : wxRect(0, 0, sizeTotal.x, sizeTotal.y);
     }
@@ -1196,8 +1196,8 @@ wxRect wxWindow::ScrollNoRefresh(int dx,
                   );
         dc.Blit(ptDest, size, &dcMem, wxPoint(0,0));
 
-        wxLogTrace(_T("scroll"),
-                   _T("Blit: (%d, %d) of size %dx%d -> (%d, %d)"),
+        wxLogTrace(wxT("scroll"),
+                   wxT("Blit: (%d, %d) of size %dx%d -> (%d, %d)"),
                    ptSource.x, ptSource.y,
                    size.x, size.y,
                    ptDest.x, ptDest.y);
@@ -1228,7 +1228,7 @@ wxRect wxWindow::ScrollNoRefresh(int dx,
 
             rect.height = sizeTotal.y;
 
-            wxLogTrace(_T("scroll"), _T("refreshing (%d, %d)-(%d, %d)"),
+            wxLogTrace(wxT("scroll"), wxT("refreshing (%d, %d)-(%d, %d)"),
                        rect.x, rect.y,
                        rect.GetRight() + 1, rect.GetBottom() + 1);
         }
@@ -1249,7 +1249,7 @@ wxRect wxWindow::ScrollNoRefresh(int dx,
 
             rect.width = sizeTotal.x;
 
-            wxLogTrace(_T("scroll"), _T("refreshing (%d, %d)-(%d, %d)"),
+            wxLogTrace(wxT("scroll"), wxT("refreshing (%d, %d)-(%d, %d)"),
                        rect.x, rect.y,
                        rect.GetRight() + 1, rect.GetBottom() + 1);
         }
--- src/univ/scrolbar.cpp-orig	2009-06-18 19:44:54.239459000 -0500
+++ src/univ/scrolbar.cpp	2009-06-18 19:45:00.416956000 -0500
@@ -243,7 +243,7 @@ int wxScrollBar::GetRange() const
 
 void wxScrollBar::SetThumbPosition(int pos)
 {
-    wxCHECK_RET( pos >= 0 && pos <= m_range, _T("thumb position out of range") );
+    wxCHECK_RET( pos >= 0 && pos <= m_range, wxT("thumb position out of range") );
 
     DoSetThumb(pos);
 }
@@ -513,7 +513,7 @@ wxRect wxScrollBar::GetScrollbarRect(wxS
 
         case wxScrollBar::Element_Max:
         default:
-            wxFAIL_MSG( _T("unknown scrollbar element") );
+            wxFAIL_MSG( wxT("unknown scrollbar element") );
     }
 
     return rect;
@@ -1090,7 +1090,7 @@ bool wxStdScrollBarInputHandler::HandleM
                 // this is not supposed to happen as the button can't go up
                 // without going down previously and then we'd have
                 // m_winCapture by now
-                wxFAIL_MSG( _T("logic error in mouse capturing code") );
+                wxFAIL_MSG( wxT("logic error in mouse capturing code") );
             }
         }
     }
--- src/univ/topluniv.cpp-orig	2009-06-18 19:45:12.128510000 -0500
+++ src/univ/topluniv.cpp	2009-06-18 19:45:18.314021000 -0500
@@ -163,7 +163,7 @@ void wxTopLevelWindow::UseNativeDecorati
 
 void wxTopLevelWindow::UseNativeDecorations(bool native)
 {
-    wxASSERT_MSG( !m_windowStyle, _T("must be called before Create()") );
+    wxASSERT_MSG( !m_windowStyle, wxT("must be called before Create()") );
 
     m_usingNativeDecorations = native;
 }
--- src/univ/checklst.cpp-orig	2009-06-18 19:45:25.943832000 -0500
+++ src/univ/checklst.cpp	2009-06-18 19:45:32.164832000 -0500
@@ -122,7 +122,7 @@ bool wxCheckListBox::Create(wxWindow *pa
 bool wxCheckListBox::IsChecked(unsigned int item) const
 {
     wxCHECK_MSG( IsValid(item), false,
-                 _T("invalid index in wxCheckListBox::IsChecked") );
+                 wxT("invalid index in wxCheckListBox::IsChecked") );
 
     return m_checks[item] != 0;
 }
@@ -130,7 +130,7 @@ bool wxCheckListBox::IsChecked(unsigned 
 void wxCheckListBox::Check(unsigned int item, bool check)
 {
     wxCHECK_RET( IsValid(item),
-                 _T("invalid index in wxCheckListBox::Check") );
+                 wxT("invalid index in wxCheckListBox::Check") );
 
     // intermediate var is needed to avoid compiler warning with VC++
     bool isChecked = m_checks[item] != 0;
@@ -148,7 +148,7 @@ void wxCheckListBox::Check(unsigned int 
 
 void wxCheckListBox::Delete(unsigned int n)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxListBox::Delete") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxListBox::Delete") );
 
     wxListBox::Delete(n);
 
--- src/univ/checkbox.cpp-orig	2009-06-18 19:45:42.181046000 -0500
+++ src/univ/checkbox.cpp	2009-06-18 19:45:46.631222000 -0500
@@ -217,7 +217,7 @@ void wxCheckBox::DoSet3StateValue(wxChec
     {
         case wxCHK_UNCHECKED:    status = Status_Unchecked;   break;
         case wxCHK_CHECKED:      status = Status_Checked; break;
-        default:                 wxFAIL_MSG(_T("Unknown checkbox state"));
+        default:                 wxFAIL_MSG(wxT("Unknown checkbox state"));
         case wxCHK_UNDETERMINED: status = Status_3rdState;  break;
     }
     if ( status != m_status )
--- src/univ/combobox.cpp-orig	2009-06-18 19:45:52.074662000 -0500
+++ src/univ/combobox.cpp	2009-06-18 19:45:58.558160000 -0500
@@ -352,7 +352,7 @@ void wxComboBox::Clear()
 
 void wxComboBox::Delete(unsigned int n)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxComboBox::Delete") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxComboBox::Delete") );
 
     if (GetSelection() == (int)n)
         if ( GetTextCtrl() ) GetTextCtrl()->SetValue(wxEmptyString);
@@ -367,14 +367,14 @@ unsigned int wxComboBox::GetCount() cons
 
 wxString wxComboBox::GetString(unsigned int n) const
 {
-    wxCHECK_MSG( IsValid(n), wxEmptyString, _T("invalid index in wxComboBox::GetString") );
+    wxCHECK_MSG( IsValid(n), wxEmptyString, wxT("invalid index in wxComboBox::GetString") );
 
     return GetLBox()->GetString(n);
 }
 
 void wxComboBox::SetString(unsigned int n, const wxString& s)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxComboBox::SetString") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxComboBox::SetString") );
 
     GetLBox()->SetString(n, s);
 }
@@ -386,7 +386,7 @@ int wxComboBox::FindString(const wxStrin
 
 void wxComboBox::SetSelection(int n)
 {
-    wxCHECK_RET( (n == wxNOT_FOUND || IsValid(n)), _T("invalid index in wxComboBox::Select") );
+    wxCHECK_RET( (n == wxNOT_FOUND || IsValid(n)), wxT("invalid index in wxComboBox::Select") );
 
     GetLBox()->SetSelection(n);
 
--- src/univ/control.cpp-orig	2009-06-18 19:46:03.049029000 -0500
+++ src/univ/control.cpp	2009-06-18 19:46:09.042039000 -0500
@@ -84,7 +84,7 @@ int wxControl::FindAccelIndex(const wxSt
     // the character following MNEMONIC_PREFIX is the accelerator for this
     // control unless it is MNEMONIC_PREFIX too - this allows to insert
     // literal MNEMONIC_PREFIX chars into the label
-    static const wxChar MNEMONIC_PREFIX = _T('&');
+    static const wxChar MNEMONIC_PREFIX = wxT('&');
 
     if ( labelOnly )
     {
@@ -107,7 +107,7 @@ int wxControl::FindAccelIndex(const wxSt
                 }
                 else
                 {
-                    wxFAIL_MSG(_T("duplicate accel char in control label"));
+                    wxFAIL_MSG(wxT("duplicate accel char in control label"));
                 }
             }
         }
--- src/univ/scrarrow.cpp-orig	2009-06-18 19:46:15.536266000 -0500
+++ src/univ/scrarrow.cpp	2009-06-18 19:46:21.510286000 -0500
@@ -123,7 +123,7 @@ wxScrollArrows::wxScrollArrows(wxControl
 wxScrollArrows::~wxScrollArrows()
 {
     // it should have been destroyed
-    wxASSERT_MSG( !m_captureData, _T("memory leak in wxScrollArrows") );
+    wxASSERT_MSG( !m_captureData, wxT("memory leak in wxScrollArrows") );
 }
 
 // ----------------------------------------------------------------------------
--- src/univ/scrthumb.cpp-orig	2009-06-18 19:46:27.244427000 -0500
+++ src/univ/scrthumb.cpp	2009-06-18 19:46:33.338073000 -0500
@@ -101,7 +101,7 @@ public:
                 break;
 
             default:
-                wxFAIL_MSG(_T("unexpected shaft part in wxScrollThumbTimer"));
+                wxFAIL_MSG(wxT("unexpected shaft part in wxScrollThumbTimer"));
                 // fall through
 
             case wxScrollThumb::Shaft_Below:
@@ -144,7 +144,7 @@ wxScrollThumb::wxScrollThumb(wxControlWi
 wxScrollThumb::~wxScrollThumb()
 {
     // it should have been destroyed
-    wxASSERT_MSG( !m_captureData, _T("memory leak in wxScrollThumb") );
+    wxASSERT_MSG( !m_captureData, wxT("memory leak in wxScrollThumb") );
 }
 
 // ----------------------------------------------------------------------------
@@ -284,7 +284,7 @@ wxCoord wxScrollThumb::GetMouseCoord(con
 int wxScrollThumb::GetThumbPos(const wxMouseEvent& event) const
 {
     wxCHECK_MSG( m_captureData && m_captureData->m_shaftPart == Shaft_Thumb, 0,
-                 _T("can't be called when thumb is not dragged") );
+                 wxT("can't be called when thumb is not dragged") );
 
     int x = GetMouseCoord(event) - m_captureData->m_ofsMouse;
     return m_control->PixelToThumbPos(x);
--- src/univ/dialog.cpp-orig	2009-06-18 19:46:37.523475000 -0500
+++ src/univ/dialog.cpp	2009-06-18 19:46:41.838482000 -0500
@@ -186,7 +186,7 @@ int wxDialog::ShowModal()
 
     m_isShowingModal = true;
 
-    wxASSERT_MSG( !m_windowDisabler, _T("disabling windows twice?") );
+    wxASSERT_MSG( !m_windowDisabler, wxT("disabling windows twice?") );
 
 #if defined(__WXGTK__) || defined(__WXMGL__)
     wxBusyCursorSuspender suspender;
@@ -204,7 +204,7 @@ int wxDialog::ShowModal()
 
 void wxDialog::EndModal(int retCode)
 {
-    wxASSERT_MSG( m_eventLoop, _T("wxDialog is not modal") );
+    wxASSERT_MSG( m_eventLoop, wxT("wxDialog is not modal") );
 
     SetReturnCode(retCode);
 
--- src/univ/theme.cpp-orig	2009-06-18 19:46:46.023896000 -0500
+++ src/univ/theme.cpp	2009-06-18 19:46:56.363497000 -0500
@@ -88,7 +88,7 @@ wxThemeInfo::wxThemeInfo(Constructor c,
     wxString nameDefTheme;
 
     // use the environment variable first
-    const wxChar *p = wxGetenv(_T("WXTHEME"));
+    const wxChar *p = wxGetenv(wxT("WXTHEME"));
     if ( p )
     {
         nameDefTheme = p;
--- src/univ/colschem.cpp-orig	2009-06-18 19:47:06.221953000 -0500
+++ src/univ/colschem.cpp	2009-06-18 19:47:10.900263000 -0500
@@ -82,7 +82,7 @@ wxColour wxSystemSettings::GetColour(wxS
     };
 
     wxCHECK_MSG( index < (int)WXSIZEOF(s_mapSysToThemeCol), wxNullColour,
-                 _T("invalid wxSystemColour") );
+                 wxT("invalid wxSystemColour") );
 
     wxColourScheme::StdColour col = s_mapSysToThemeCol[index];
     if ( col == wxColourScheme::MAX )
--- src/generic/filedlgg.cpp-orig	2009-06-18 16:36:04.557435000 -0500
+++ src/generic/filedlgg.cpp	2009-06-18 16:36:11.479163000 -0500
@@ -290,25 +290,25 @@ void wxFileData::ReadData()
     // __WXWINCE__
 
 #if defined(__UNIX__)
-    m_permissions.Printf(_T("%c%c%c%c%c%c%c%c%c"),
-                         buff.st_mode & wxS_IRUSR ? _T('r') : _T('-'),
-                         buff.st_mode & wxS_IWUSR ? _T('w') : _T('-'),
-                         buff.st_mode & wxS_IXUSR ? _T('x') : _T('-'),
-                         buff.st_mode & wxS_IRGRP ? _T('r') : _T('-'),
-                         buff.st_mode & wxS_IWGRP ? _T('w') : _T('-'),
-                         buff.st_mode & wxS_IXGRP ? _T('x') : _T('-'),
-                         buff.st_mode & wxS_IROTH ? _T('r') : _T('-'),
-                         buff.st_mode & wxS_IWOTH ? _T('w') : _T('-'),
-                         buff.st_mode & wxS_IXOTH ? _T('x') : _T('-'));
+    m_permissions.Printf(wxT("%c%c%c%c%c%c%c%c%c"),
+                         buff.st_mode & wxS_IRUSR ? wxT('r') : wxT('-'),
+                         buff.st_mode & wxS_IWUSR ? wxT('w') : wxT('-'),
+                         buff.st_mode & wxS_IXUSR ? wxT('x') : wxT('-'),
+                         buff.st_mode & wxS_IRGRP ? wxT('r') : wxT('-'),
+                         buff.st_mode & wxS_IWGRP ? wxT('w') : wxT('-'),
+                         buff.st_mode & wxS_IXGRP ? wxT('x') : wxT('-'),
+                         buff.st_mode & wxS_IROTH ? wxT('r') : wxT('-'),
+                         buff.st_mode & wxS_IWOTH ? wxT('w') : wxT('-'),
+                         buff.st_mode & wxS_IXOTH ? wxT('x') : wxT('-'));
 #elif defined(__WIN32__)
     DWORD attribs = ::GetFileAttributes(m_filePath.c_str());
     if (attribs != (DWORD)-1)
     {
-        m_permissions.Printf(_T("%c%c%c%c"),
-                             attribs & FILE_ATTRIBUTE_ARCHIVE  ? _T('A') : _T(' '),
-                             attribs & FILE_ATTRIBUTE_READONLY ? _T('R') : _T(' '),
-                             attribs & FILE_ATTRIBUTE_HIDDEN   ? _T('H') : _T(' '),
-                             attribs & FILE_ATTRIBUTE_SYSTEM   ? _T('S') : _T(' '));
+        m_permissions.Printf(wxT("%c%c%c%c"),
+                             attribs & FILE_ATTRIBUTE_ARCHIVE  ? wxT('A') : wxT(' '),
+                             attribs & FILE_ATTRIBUTE_READONLY ? wxT('R') : wxT(' '),
+                             attribs & FILE_ATTRIBUTE_HIDDEN   ? wxT('H') : wxT(' '),
+                             attribs & FILE_ATTRIBUTE_SYSTEM   ? wxT('S') : wxT(' '));
     }
 #endif
 
@@ -402,7 +402,7 @@ wxString wxFileData::GetEntry( fileListF
 #endif // defined(__UNIX__) || defined(__WIN32__)
 
         default:
-            wxFAIL_MSG( _T("unexpected field in wxFileData::GetEntry()") );
+            wxFAIL_MSG( wxT("unexpected field in wxFileData::GetEntry()") );
     }
 
     return s;
@@ -427,7 +427,7 @@ void wxFileData::MakeItem( wxListItem &i
 
     if (IsLink())
     {
-        wxColour dg = wxTheColourDatabase->Find( _T("MEDIUM GREY") );
+        wxColour dg = wxTheColourDatabase->Find( wxT("MEDIUM GREY") );
         if ( dg.Ok() )
             item.SetTextColour(dg);
     }
@@ -1244,7 +1244,7 @@ void wxGenericFileDialog::DoSetFilterInd
     if ( str->Left(2) == wxT("*.") )
     {
         m_filterExtension = str->Mid(1);
-        if (m_filterExtension == _T(".*"))
+        if (m_filterExtension == wxT(".*"))
             m_filterExtension.clear();
     }
     else
--- src/generic/listctrl.cpp-orig	2009-06-18 16:36:24.846853000 -0500
+++ src/generic/listctrl.cpp	2009-06-18 16:36:36.314324000 -0500
@@ -150,7 +150,7 @@ public:
     {
         wxString s = GetText();
         if ( s.empty() )
-            s = _T('H');
+            s = wxT('H');
 
         return s;
     }
@@ -271,7 +271,7 @@ public:
         void ExtendWidth(wxCoord w)
         {
             wxASSERT_MSG( m_rectAll.width <= w,
-                            _T("width can only be increased") );
+                            wxT("width can only be increased") );
 
             m_rectAll.width = w;
             m_rectLabel.x = m_rectAll.x + (w - m_rectLabel.width) / 2;
@@ -337,7 +337,7 @@ public:
 
     bool IsHighlighted() const
     {
-        wxASSERT_MSG( !IsVirtual(), _T("unexpected call to IsHighlighted") );
+        wxASSERT_MSG( !IsVirtual(), wxT("unexpected call to IsHighlighted") );
 
         return m_highlighted;
     }
@@ -501,7 +501,7 @@ public:
                       const wxPoint& pos = wxDefaultPosition,
                       const wxSize& size = wxDefaultSize,
                       long style = 0,
-                      const wxString &name = _T("listctrlmainwindow") );
+                      const wxString &name = wxT("listctrlmainwindow") );
 
     virtual ~wxListMainWindow();
 
@@ -798,7 +798,7 @@ protected:
     // get the line data for the given index
     wxListLineData *GetLine(size_t n) const
     {
-        wxASSERT_MSG( n != (size_t)-1, _T("invalid line index") );
+        wxASSERT_MSG( n != (size_t)-1, wxT("invalid line index") );
 
         if ( IsVirtual() )
         {
@@ -924,7 +924,7 @@ void wxListItemData::SetItem( const wxLi
 
 void wxListItemData::SetPosition( int x, int y )
 {
-    wxCHECK_RET( m_rect, _T("unexpected SetPosition() call") );
+    wxCHECK_RET( m_rect, wxT("unexpected SetPosition() call") );
 
     m_rect->x = x;
     m_rect->y = y;
@@ -932,7 +932,7 @@ void wxListItemData::SetPosition( int x,
 
 void wxListItemData::SetSize( int width, int height )
 {
-    wxCHECK_RET( m_rect, _T("unexpected SetSize() call") );
+    wxCHECK_RET( m_rect, wxT("unexpected SetSize() call") );
 
     if ( width != -1 )
         m_rect->width = width;
@@ -942,35 +942,35 @@ void wxListItemData::SetSize( int width,
 
 bool wxListItemData::IsHit( int x, int y ) const
 {
-    wxCHECK_MSG( m_rect, false, _T("can't be called in this mode") );
+    wxCHECK_MSG( m_rect, false, wxT("can't be called in this mode") );
 
     return wxRect(GetX(), GetY(), GetWidth(), GetHeight()).Contains(x, y);
 }
 
 int wxListItemData::GetX() const
 {
-    wxCHECK_MSG( m_rect, 0, _T("can't be called in this mode") );
+    wxCHECK_MSG( m_rect, 0, wxT("can't be called in this mode") );
 
     return m_rect->x;
 }
 
 int wxListItemData::GetY() const
 {
-    wxCHECK_MSG( m_rect, 0, _T("can't be called in this mode") );
+    wxCHECK_MSG( m_rect, 0, wxT("can't be called in this mode") );
 
     return m_rect->y;
 }
 
 int wxListItemData::GetWidth() const
 {
-    wxCHECK_MSG( m_rect, 0, _T("can't be called in this mode") );
+    wxCHECK_MSG( m_rect, 0, wxT("can't be called in this mode") );
 
     return m_rect->width;
 }
 
 int wxListItemData::GetHeight() const
 {
-    wxCHECK_MSG( m_rect, 0, _T("can't be called in this mode") );
+    wxCHECK_MSG( m_rect, 0, wxT("can't be called in this mode") );
 
     return m_rect->height;
 }
@@ -1150,7 +1150,7 @@ wxListLineData::wxListLineData( wxListMa
 void wxListLineData::CalculateSize( wxDC *dc, int spacing )
 {
     wxListItemDataList::compatibility_iterator node = m_items.GetFirst();
-    wxCHECK_RET( node, _T("no subitems at all??") );
+    wxCHECK_RET( node, wxT("no subitems at all??") );
 
     wxListItemData *item = node->GetData();
 
@@ -1240,11 +1240,11 @@ void wxListLineData::CalculateSize( wxDC
             break;
 
         case wxLC_REPORT:
-            wxFAIL_MSG( _T("unexpected call to SetSize") );
+            wxFAIL_MSG( wxT("unexpected call to SetSize") );
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown mode") );
+            wxFAIL_MSG( wxT("unknown mode") );
             break;
     }
 }
@@ -1252,7 +1252,7 @@ void wxListLineData::CalculateSize( wxDC
 void wxListLineData::SetPosition( int x, int y, int spacing )
 {
     wxListItemDataList::compatibility_iterator node = m_items.GetFirst();
-    wxCHECK_RET( node, _T("no subitems at all??") );
+    wxCHECK_RET( node, wxT("no subitems at all??") );
 
     wxListItemData *item = node->GetData();
 
@@ -1308,11 +1308,11 @@ void wxListLineData::SetPosition( int x,
             break;
 
         case wxLC_REPORT:
-            wxFAIL_MSG( _T("unexpected call to SetPosition") );
+            wxFAIL_MSG( wxT("unexpected call to SetPosition") );
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown mode") );
+            wxFAIL_MSG( wxT("unknown mode") );
             break;
     }
 }
@@ -1326,7 +1326,7 @@ void wxListLineData::InitItems( int num 
 void wxListLineData::SetItem( int index, const wxListItem &info )
 {
     wxListItemDataList::compatibility_iterator node = m_items.Item( index );
-    wxCHECK_RET( node, _T("invalid column index in SetItem") );
+    wxCHECK_RET( node, wxT("invalid column index in SetItem") );
 
     wxListItemData *item = node->GetData();
     item->SetItem( info );
@@ -1369,7 +1369,7 @@ void wxListLineData::SetText( int index,
 void wxListLineData::SetImage( int index, int image )
 {
     wxListItemDataList::compatibility_iterator node = m_items.Item( index );
-    wxCHECK_RET( node, _T("invalid column index in SetImage()") );
+    wxCHECK_RET( node, wxT("invalid column index in SetImage()") );
 
     wxListItemData *item = node->GetData();
     item->SetImage(image);
@@ -1378,7 +1378,7 @@ void wxListLineData::SetImage( int index
 int wxListLineData::GetImage( int index ) const
 {
     wxListItemDataList::compatibility_iterator node = m_items.Item( index );
-    wxCHECK_MSG( node, -1, _T("invalid column index in GetImage()") );
+    wxCHECK_MSG( node, -1, wxT("invalid column index in GetImage()") );
 
     wxListItemData *item = node->GetData();
     return item->GetImage();
@@ -1387,7 +1387,7 @@ int wxListLineData::GetImage( int index 
 wxListItemAttr *wxListLineData::GetAttr() const
 {
     wxListItemDataList::compatibility_iterator node = m_items.GetFirst();
-    wxCHECK_MSG( node, NULL, _T("invalid column index in GetAttr()") );
+    wxCHECK_MSG( node, NULL, wxT("invalid column index in GetAttr()") );
 
     wxListItemData *item = node->GetData();
     return item->GetAttr();
@@ -1396,7 +1396,7 @@ wxListItemAttr *wxListLineData::GetAttr(
 void wxListLineData::SetAttr(wxListItemAttr *attr)
 {
     wxListItemDataList::compatibility_iterator node = m_items.GetFirst();
-    wxCHECK_RET( node, _T("invalid column index in SetAttr()") );
+    wxCHECK_RET( node, wxT("invalid column index in SetAttr()") );
 
     wxListItemData *item = node->GetData();
     item->SetAttr(attr);
@@ -1465,7 +1465,7 @@ bool wxListLineData::SetAttributes(wxDC 
 void wxListLineData::Draw( wxDC *dc )
 {
     wxListItemDataList::compatibility_iterator node = m_items.GetFirst();
-    wxCHECK_RET( node, _T("no subitems at all??") );
+    wxCHECK_RET( node, wxT("no subitems at all??") );
 
     bool highlighted = IsHighlighted();
 
@@ -1606,7 +1606,7 @@ void wxListLineData::DrawTextFormatted(w
     // we don't support displaying multiple lines currently (and neither does
     // wxMSW FWIW) so just merge all the lines
     wxString text(textOrig);
-    text.Replace(_T("\n"), _T(" "));
+    text.Replace(wxT("\n"), wxT(" "));
 
     wxCoord w, h;
     dc->GetTextExtent(text, &w, &h);
@@ -1636,7 +1636,7 @@ void wxListLineData::DrawTextFormatted(w
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown list item format") );
+                wxFAIL_MSG( wxT("unknown list item format") );
                 break;
         }
 
@@ -1678,7 +1678,7 @@ void wxListLineData::DrawTextFormatted(w
 
 bool wxListLineData::Highlight( bool on )
 {
-    wxCHECK_MSG( !IsVirtual(), false, _T("unexpected call to Highlight") );
+    wxCHECK_MSG( !IsVirtual(), false, wxT("unexpected call to Highlight") );
 
     if ( on == m_highlighted )
         return false;
@@ -1868,7 +1868,7 @@ void wxListHeaderWindow::OnPaint( wxPain
         switch ( wLabel < cw ? item.GetAlign() : wxLIST_FORMAT_LEFT )
         {
             default:
-                wxFAIL_MSG( _T("unknown list item format") );
+                wxFAIL_MSG( wxT("unknown list item format") );
                 // fall through
 
             case wxLIST_FORMAT_LEFT:
@@ -2231,7 +2231,7 @@ void wxListTextCtrlWrapper::OnKeyUp( wxK
     wxPoint myPos = m_text->GetPosition();
     wxSize mySize = m_text->GetSize();
     int sx, sy;
-    m_text->GetTextExtent(m_text->GetValue() + _T("MM"), &sx, &sy);
+    m_text->GetTextExtent(m_text->GetValue() + wxT("MM"), &sx, &sy);
     if (myPos.x + sx > parentSize.x)
         sx = parentSize.x - myPos.x;
     if (mySize.x > sx)
@@ -2381,8 +2381,8 @@ void wxListMainWindow::CacheLineData(siz
 
 wxListLineData *wxListMainWindow::GetDummyLine() const
 {
-    wxASSERT_MSG( !IsEmpty(), _T("invalid line index") );
-    wxASSERT_MSG( IsVirtual(), _T("GetDummyLine() shouldn't be called") );
+    wxASSERT_MSG( !IsEmpty(), wxT("invalid line index") );
+    wxASSERT_MSG( IsVirtual(), wxT("GetDummyLine() shouldn't be called") );
 
     wxListMainWindow *self = wxConstCast(this, wxListMainWindow);
 
@@ -2423,7 +2423,7 @@ wxCoord wxListMainWindow::GetLineHeight(
         dc.SetFont( GetFont() );
 
         wxCoord y;
-        dc.GetTextExtent(_T("H"), NULL, &y);
+        dc.GetTextExtent(wxT("H"), NULL, &y);
 
         if ( m_small_image_list && m_small_image_list->GetImageCount() )
         {
@@ -2441,7 +2441,7 @@ wxCoord wxListMainWindow::GetLineHeight(
 
 wxCoord wxListMainWindow::GetLineY(size_t line) const
 {
-    wxASSERT_MSG( InReportView(), _T("only works in report mode") );
+    wxASSERT_MSG( InReportView(), wxT("only works in report mode") );
 
     return LINE_SPACING + line * GetLineHeight();
 }
@@ -2494,7 +2494,7 @@ wxRect wxListMainWindow::GetLineIconRect
         return GetLine(line)->m_gi->m_rectIcon;
 
     wxListLineData *ld = GetLine(line);
-    wxASSERT_MSG( ld->HasImage(), _T("should have an image") );
+    wxASSERT_MSG( ld->HasImage(), wxT("should have an image") );
 
     wxRect rect;
     rect.x = HEADER_OFFSET_X;
@@ -2512,7 +2512,7 @@ wxRect wxListMainWindow::GetLineHighligh
 
 long wxListMainWindow::HitTestLine(size_t line, int x, int y) const
 {
-    wxASSERT_MSG( line < GetItemCount(), _T("invalid line in HitTestLine") );
+    wxASSERT_MSG( line < GetItemCount(), wxT("invalid line in HitTestLine") );
 
     wxListLineData *ld = GetLine(line);
 
@@ -2547,7 +2547,7 @@ bool wxListMainWindow::IsHighlighted(siz
     else // !virtual
     {
         wxListLineData *ld = GetLine(line);
-        wxCHECK_MSG( ld, false, _T("invalid index in IsHighlighted") );
+        wxCHECK_MSG( ld, false, wxT("invalid index in IsHighlighted") );
 
         return ld->IsHighlighted();
     }
@@ -2596,7 +2596,7 @@ bool wxListMainWindow::HighlightLine( si
     else // !virtual
     {
         wxListLineData *ld = GetLine(line);
-        wxCHECK_MSG( ld, false, _T("invalid index in HighlightLine") );
+        wxCHECK_MSG( ld, false, wxT("invalid index in HighlightLine") );
 
         changed = ld->Highlight(highlight);
     }
@@ -2630,9 +2630,9 @@ void wxListMainWindow::RefreshLine( size
 void wxListMainWindow::RefreshLines( size_t lineFrom, size_t lineTo )
 {
     // we suppose that they are ordered by caller
-    wxASSERT_MSG( lineFrom <= lineTo, _T("indices in disorder") );
+    wxASSERT_MSG( lineFrom <= lineTo, wxT("indices in disorder") );
 
-    wxASSERT_MSG( lineTo < GetItemCount(), _T("invalid line range") );
+    wxASSERT_MSG( lineTo < GetItemCount(), wxT("invalid line range") );
 
     if ( InReportView() )
     {
@@ -2729,7 +2729,7 @@ void wxListMainWindow::Freeze()
 
 void wxListMainWindow::Thaw()
 {
-    wxCHECK_RET( m_freezeCount > 0, _T("thawing unfrozen list control?") );
+    wxCHECK_RET( m_freezeCount > 0, wxT("thawing unfrozen list control?") );
 
     if ( --m_freezeCount == 0 )
         Refresh();
@@ -2877,7 +2877,7 @@ void wxListMainWindow::HighlightAll( boo
 {
     if ( IsSingleSel() )
     {
-        wxASSERT_MSG( !on, _T("can't do this in a single selection control") );
+        wxASSERT_MSG( !on, wxT("can't do this in a single selection control") );
 
         // we just have one item to turn off
         if ( HasCurrent() && IsHighlighted(m_current) )
@@ -2956,7 +2956,7 @@ wxTextCtrl *wxListMainWindow::EditLabel(
     le.SetEventObject( GetParent() );
     le.m_itemIndex = item;
     wxListLineData *data = GetLine(itemEdit);
-    wxCHECK_MSG( data, NULL, _T("invalid index in EditLabel()") );
+    wxCHECK_MSG( data, NULL, wxT("invalid index in EditLabel()") );
     data->GetItem( 0, le.m_item );
 
     if ( GetParent()->GetEventHandler()->ProcessEvent( le ) && !le.IsAllowed() )
@@ -2997,7 +2997,7 @@ bool wxListMainWindow::OnRenameAccept(si
 
     wxListLineData *data = GetLine(itemEdit);
 
-    wxCHECK_MSG( data, false, _T("invalid index in OnRenameAccept()") );
+    wxCHECK_MSG( data, false, wxT("invalid index in OnRenameAccept()") );
 
     data->GetItem( 0, le.m_item );
     le.m_item.m_text = value;
@@ -3016,7 +3016,7 @@ void wxListMainWindow::OnRenameCancelled
     le.m_itemIndex = itemEdit;
 
     wxListLineData *data = GetLine(itemEdit);
-    wxCHECK_RET( data, _T("invalid index in OnRenameCancelled()") );
+    wxCHECK_RET( data, wxT("invalid index in OnRenameCancelled()") );
 
     data->GetItem( 0, le.m_item );
     GetEventHandler()->ProcessEvent( le );
@@ -3286,7 +3286,7 @@ void wxListMainWindow::OnMouse( wxMouseE
             else // !ctrl, !shift
             {
                 // test in the enclosing if should make it impossible
-                wxFAIL_MSG( _T("how did we get here?") );
+                wxFAIL_MSG( wxT("how did we get here?") );
             }
         }
 
@@ -3389,7 +3389,7 @@ bool wxListMainWindow::ScrollList(int WX
 void wxListMainWindow::OnArrowChar(size_t newCurrent, const wxKeyEvent& event)
 {
     wxCHECK_RET( newCurrent < (size_t)GetItemCount(),
-                 _T("invalid item index in OnArrowChar()") );
+                 wxT("invalid item index in OnArrowChar()") );
 
     size_t oldCurrent = m_current;
 
@@ -3498,7 +3498,7 @@ void wxListMainWindow::OnChar( wxKeyEven
 
     // don't use m_linesPerPage directly as it might not be computed yet
     const int pageSize = GetCountPerPage();
-    wxCHECK_RET( pageSize, _T("should have non zero page size") );
+    wxCHECK_RET( pageSize, wxT("should have non zero page size") );
 
     if (GetLayoutDirection() == wxLayout_RightToLeft)
     {
@@ -3752,7 +3752,7 @@ void wxListMainWindow::SetColumn( int co
 {
     wxListHeaderDataList::compatibility_iterator node = m_columns.Item( col );
 
-    wxCHECK_RET( node, _T("invalid column index in SetColumn") );
+    wxCHECK_RET( node, wxT("invalid column index in SetColumn") );
 
     if ( item.m_width == wxLIST_AUTOSIZE_USEHEADER )
         item.m_width = GetTextLength( item.m_text );
@@ -3773,10 +3773,10 @@ void wxListMainWindow::SetColumn( int co
 void wxListMainWindow::SetColumnWidth( int col, int width )
 {
     wxCHECK_RET( col >= 0 && col < GetColumnCount(),
-                 _T("invalid column index") );
+                 wxT("invalid column index") );
 
     wxCHECK_RET( InReportView(),
-                 _T("SetColumnWidth() can only be called in report mode.") );
+                 wxT("SetColumnWidth() can only be called in report mode.") );
 
     m_dirty = true;
     wxListHeaderWindow *headerWin = GetListCtrl()->m_headerWin;
@@ -3784,7 +3784,7 @@ void wxListMainWindow::SetColumnWidth( i
         headerWin->m_dirty = true;
 
     wxListHeaderDataList::compatibility_iterator node = m_columns.Item( col );
-    wxCHECK_RET( node, _T("no column?") );
+    wxCHECK_RET( node, wxT("no column?") );
 
     wxListHeaderData *column = node->GetData();
 
@@ -3829,7 +3829,7 @@ void wxListMainWindow::SetColumnWidth( i
                     wxListLineData *line = GetLine( i );
                     wxListItemDataList::compatibility_iterator n = line->m_items.Item( col );
 
-                    wxCHECK_RET( n, _T("no subitem?") );
+                    wxCHECK_RET( n, wxT("no subitem?") );
 
                     wxListItemData *itemData = n->GetData();
                     wxListItem      item;
@@ -3874,7 +3874,7 @@ int wxListMainWindow::GetHeaderWidth() c
 void wxListMainWindow::GetColumn( int col, wxListItem &item ) const
 {
     wxListHeaderDataList::compatibility_iterator node = m_columns.Item( col );
-    wxCHECK_RET( node, _T("invalid column index in GetColumn") );
+    wxCHECK_RET( node, wxT("invalid column index in GetColumn") );
 
     wxListHeaderData *column = node->GetData();
     column->GetItem( item );
@@ -3883,7 +3883,7 @@ void wxListMainWindow::GetColumn( int co
 int wxListMainWindow::GetColumnWidth( int col ) const
 {
     wxListHeaderDataList::compatibility_iterator node = m_columns.Item( col );
-    wxCHECK_MSG( node, 0, _T("invalid column index") );
+    wxCHECK_MSG( node, 0, wxT("invalid column index") );
 
     wxListHeaderData *column = node->GetData();
     return column->GetWidth();
@@ -3897,7 +3897,7 @@ void wxListMainWindow::SetItem( wxListIt
 {
     long id = item.m_itemId;
     wxCHECK_RET( id >= 0 && (size_t)id < GetItemCount(),
-                 _T("invalid item index in SetItem") );
+                 wxT("invalid item index in SetItem") );
 
     if ( !IsVirtual() )
     {
@@ -3977,7 +3977,7 @@ void wxListMainWindow::SetItemState( lon
     }
 
     wxCHECK_RET( litem >= 0 && (size_t)litem < GetItemCount(),
-                 _T("invalid list ctrl item index in SetItem") );
+                 wxT("invalid list ctrl item index in SetItem") );
 
     size_t oldCurrent = m_current;
     size_t item = (size_t)litem;    // safe because of the check above
@@ -4065,7 +4065,7 @@ void wxListMainWindow::SetItemState( lon
 int wxListMainWindow::GetItemState( long item, long stateMask ) const
 {
     wxCHECK_MSG( item >= 0 && (size_t)item < GetItemCount(), 0,
-                 _T("invalid list ctrl item index in GetItemState()") );
+                 wxT("invalid list ctrl item index in GetItemState()") );
 
     int ret = wxLIST_STATE_DONTCARE;
 
@@ -4087,7 +4087,7 @@ int wxListMainWindow::GetItemState( long
 void wxListMainWindow::GetItem( wxListItem &item ) const
 {
     wxCHECK_RET( item.m_itemId >= 0 && (size_t)item.m_itemId < GetItemCount(),
-                 _T("invalid item index in GetItem") );
+                 wxT("invalid item index in GetItem") );
 
     wxListLineData *line = GetLine((size_t)item.m_itemId);
     line->GetItem( item.m_col, item );
@@ -4148,7 +4148,7 @@ int wxListMainWindow::GetSelectedItemCou
 wxRect wxListMainWindow::GetViewRect() const
 {
     wxASSERT_MSG( !HasFlag(wxLC_REPORT | wxLC_LIST),
-                    _T("wxListCtrl::GetViewRect() only works in icon mode") );
+                    wxT("wxListCtrl::GetViewRect() only works in icon mode") );
 
     // we need to find the longest/tallest label
     wxCoord xMax = 0, yMax = 0;
@@ -4188,7 +4188,7 @@ wxRect wxListMainWindow::GetViewRect() c
 void wxListMainWindow::GetItemRect( long index, wxRect &rect ) const
 {
     wxCHECK_RET( index >= 0 && (size_t)index < GetItemCount(),
-                 _T("invalid index in GetItemRect") );
+                 wxT("invalid index in GetItemRect") );
 
     // ensure that we're laid out, otherwise we could return nonsense
     if ( m_dirty )
@@ -4445,7 +4445,7 @@ long wxListMainWindow::GetNextItem( long
     long ret = item,
          max = GetItemCount();
     wxCHECK_MSG( (ret == -1) || (ret < max), -1,
-                 _T("invalid listctrl index in GetNextItem()") );
+                 wxT("invalid listctrl index in GetNextItem()") );
 
     // notice that we start with the next item (or the first one if item == -1)
     // and this is intentional to allow writing a simple loop to iterate over
@@ -4482,7 +4482,7 @@ void wxListMainWindow::DeleteItem( long 
     size_t count = GetItemCount();
 
     wxCHECK_RET( (lindex >= 0) && ((size_t)lindex < count),
-                 _T("invalid item index in DeleteItem") );
+                 wxT("invalid item index in DeleteItem") );
 
     size_t index = (size_t)lindex;
 
@@ -4628,7 +4628,7 @@ void wxListMainWindow::DeleteEverything(
 void wxListMainWindow::EnsureVisible( long index )
 {
     wxCHECK_RET( index >= 0 && (size_t)index < GetItemCount(),
-                 _T("invalid index in EnsureVisible") );
+                 wxT("invalid index in EnsureVisible") );
 
     // We have to call this here because the label in question might just have
     // been added and its position is not known yet
@@ -4741,10 +4741,10 @@ long wxListMainWindow::HitTest( int x, i
 
 void wxListMainWindow::InsertItem( wxListItem &item )
 {
-    wxASSERT_MSG( !IsVirtual(), _T("can't be used with virtual control") );
+    wxASSERT_MSG( !IsVirtual(), wxT("can't be used with virtual control") );
 
     int count = GetItemCount();
-    wxCHECK_RET( item.m_itemId >= 0, _T("invalid item index") );
+    wxCHECK_RET( item.m_itemId >= 0, wxT("invalid item index") );
 
     if (item.m_itemId > count)
         item.m_itemId = count;
@@ -4904,7 +4904,7 @@ void wxListMainWindow::OnScroll(wxScroll
     if ( event.GetOrientation() == wxHORIZONTAL && HasHeader() )
     {
         wxGenericListCtrl* lc = GetListCtrl();
-        wxCHECK_RET( lc, _T("no listctrl window?") );
+        wxCHECK_RET( lc, wxT("no listctrl window?") );
 
         lc->m_headerWin->Refresh();
         lc->m_headerWin->Update();
@@ -4924,7 +4924,7 @@ int wxListMainWindow::GetCountPerPage() 
 
 void wxListMainWindow::GetVisibleLinesRange(size_t *from, size_t *to)
 {
-    wxASSERT_MSG( InReportView(), _T("this is for report mode only") );
+    wxASSERT_MSG( InReportView(), wxT("this is for report mode only") );
 
     if ( m_lineFrom == (size_t)-1 )
     {
@@ -4952,7 +4952,7 @@ void wxListMainWindow::GetVisibleLinesRa
 
     wxASSERT_MSG( IsEmpty() ||
                   (m_lineFrom <= m_lineTo && m_lineTo < GetItemCount()),
-                  _T("GetVisibleLinesRange() returns incorrect result") );
+                  wxT("GetVisibleLinesRange() returns incorrect result") );
 
     if ( from )
         *from = m_lineFrom;
@@ -5108,7 +5108,7 @@ bool wxGenericListCtrl::Create(wxWindow 
 void wxGenericListCtrl::SetSingleStyle( long style, bool add )
 {
     wxASSERT_MSG( !(style & wxLC_VIRTUAL),
-                  _T("wxLC_VIRTUAL can't be [un]set") );
+                  wxT("wxLC_VIRTUAL can't be [un]set") );
 
     long flag = GetWindowStyle();
 
@@ -5604,7 +5604,7 @@ long wxGenericListCtrl::InsertItem( long
 
 long wxGenericListCtrl::InsertColumn( long col, wxListItem &item )
 {
-    wxCHECK_MSG( m_headerWin, -1, _T("can't add column in non report mode") );
+    wxCHECK_MSG( m_headerWin, -1, wxT("can't add column in non report mode") );
 
     m_mainWin->InsertColumn( col, item );
 
@@ -5848,7 +5848,7 @@ wxString wxGenericListCtrl::OnGetItemTex
 {
     // this is a pure virtual function, in fact - which is not really pure
     // because the controls which are not virtual don't need to implement it
-    wxFAIL_MSG( _T("wxGenericListCtrl::OnGetItemText not supposed to be called") );
+    wxFAIL_MSG( wxT("wxGenericListCtrl::OnGetItemText not supposed to be called") );
 
     return wxEmptyString;
 }
@@ -5873,7 +5873,7 @@ wxListItemAttr *
 wxGenericListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
-                  _T("invalid item index in OnGetItemAttr()") );
+                  wxT("invalid item index in OnGetItemAttr()") );
 
     // no attributes by default
     return NULL;
@@ -5881,7 +5881,7 @@ wxGenericListCtrl::OnGetItemAttr(long WX
 
 void wxGenericListCtrl::SetItemCount(long count)
 {
-    wxASSERT_MSG( IsVirtual(), _T("this is for virtual controls only") );
+    wxASSERT_MSG( IsVirtual(), wxT("this is for virtual controls only") );
 
     m_mainWin->SetItemCount(count);
 }
--- src/generic/prntdlgg.cpp-orig	2009-06-18 16:36:49.540332000 -0500
+++ src/generic/prntdlgg.cpp	2009-06-18 16:37:00.694032000 -0500
@@ -350,9 +350,9 @@ bool wxGenericPrintDialog::TransferDataT
              m_fromText->Enable(true);
              m_toText->Enable(true);
              if (m_printDialogData.GetFromPage() > 0)
-                m_fromText->SetValue(wxString::Format(_T("%d"), m_printDialogData.GetFromPage()));
+                m_fromText->SetValue(wxString::Format(wxT("%d"), m_printDialogData.GetFromPage()));
              if (m_printDialogData.GetToPage() > 0)
-                m_toText->SetValue(wxString::Format(_T("%d"), m_printDialogData.GetToPage()));
+                m_toText->SetValue(wxString::Format(wxT("%d"), m_printDialogData.GetToPage()));
              if(m_rangeRadioBox)
              {
                 if (m_printDialogData.GetAllPages() || m_printDialogData.GetFromPage() == 0)
@@ -374,7 +374,7 @@ bool wxGenericPrintDialog::TransferDataT
        }
     }
     m_noCopiesText->SetValue(
-        wxString::Format(_T("%d"), m_printDialogData.GetNoCopies()));
+        wxString::Format(wxT("%d"), m_printDialogData.GetNoCopies()));
 
     m_printToFileCheckBox->SetValue(m_printDialogData.GetPrintToFile());
     m_printToFileCheckBox->Enable(m_printDialogData.GetEnablePrintToFile());
@@ -702,7 +702,7 @@ void wxGenericPrintSetupDialog::OnPrinte
         li.SetMask( wxLIST_MASK_TEXT );
         li.SetId( event.GetIndex() );
         m_printerListCtrl->GetItem( li );
-        m_printerCommandText->SetValue( _T("lpr -P") + li.GetText() );
+        m_printerCommandText->SetValue( wxT("lpr -P") + li.GetText() );
     }
 }
 
--- src/generic/statusbr.cpp-orig	2009-06-18 16:37:33.517270000 -0500
+++ src/generic/statusbr.cpp	2009-06-18 16:37:54.130730000 -0500
@@ -87,7 +87,7 @@ bool wxStatusBarGeneric::Create(wxWindow
         wxClientDC dc(this);
         dc.SetFont(GetFont());
 
-        dc.GetTextExtent(_T("X"), NULL, &y );
+        dc.GetTextExtent(wxT("X"), NULL, &y );
     }
     int height = (int)( (11*y)/10 + 2*GetBorderY());
 
@@ -110,7 +110,7 @@ wxSize wxStatusBarGeneric::DoGetBestSize
     wxClientDC dc((wxWindow*)this);
     dc.SetFont(GetFont());
     wxCoord y;
-    dc.GetTextExtent(_T("X"), NULL, &y );
+    dc.GetTextExtent(wxT("X"), NULL, &y );
     height = (int)( (11*y)/10 + 2*GetBorderY());
 
     return wxSize(width, height);
@@ -118,7 +118,7 @@ wxSize wxStatusBarGeneric::DoGetBestSize
 
 void wxStatusBarGeneric::SetFieldsCount(int number, const int *widths)
 {
-    wxASSERT_MSG( number >= 0, _T("negative number of fields in wxStatusBar?") );
+    wxASSERT_MSG( number >= 0, wxT("negative number of fields in wxStatusBar?") );
 
     int i;
     for(i = m_nFields; i < number; ++i)
@@ -133,13 +133,13 @@ void wxStatusBarGeneric::SetFieldsCount(
     wxStatusBarBase::SetFieldsCount(number, widths);
 
     wxASSERT_MSG( m_nFields == (int)m_statusStrings.GetCount(),
-                  _T("This really should never happen, can we do away with m_nFields here?") );
+                  wxT("This really should never happen, can we do away with m_nFields here?") );
 }
 
 void wxStatusBarGeneric::SetStatusText(const wxString& text, int number)
 {
     wxCHECK_RET( (number >= 0) && (number < m_nFields),
-                 _T("invalid status bar field index") );
+                 wxT("invalid status bar field index") );
 
     wxString oldText = m_statusStrings[number];
     if (oldText != text)
@@ -161,7 +161,7 @@ void wxStatusBarGeneric::SetStatusText(c
 wxString wxStatusBarGeneric::GetStatusText(int n) const
 {
     wxCHECK_MSG( (n >= 0) && (n < m_nFields), wxEmptyString,
-                 _T("invalid status bar field index") );
+                 wxT("invalid status bar field index") );
 
     return m_statusStrings[n];
 }
@@ -169,7 +169,7 @@ wxString wxStatusBarGeneric::GetStatusTe
 void wxStatusBarGeneric::SetStatusWidths(int n, const int widths_field[])
 {
     // only set status widths, when n == number of statuswindows
-    wxCHECK_RET( n == m_nFields, _T("status bar field count mismatch") );
+    wxCHECK_RET( n == m_nFields, wxT("status bar field count mismatch") );
 
     // delete the old widths in any case - this function may be used to reset
     // the widths to the default (all equal)
@@ -330,7 +330,7 @@ void wxStatusBarGeneric::DrawField(wxDC&
 bool wxStatusBarGeneric::GetFieldRect(int n, wxRect& rect) const
 {
     wxCHECK_MSG( (n >= 0) && (n < m_nFields), false,
-                 _T("invalid status bar field index") );
+                 wxT("invalid status bar field index") );
 
     // FIXME: workarounds for OS/2 bugs have nothing to do here (VZ)
     int width, height;
--- src/generic/dirctrlg.cpp-orig	2009-06-18 17:10:10.223537000 -0500
+++ src/generic/dirctrlg.cpp	2009-06-18 17:10:23.217570000 -0500
@@ -1496,14 +1496,14 @@ void wxFileIconsTable::Create()
                                                    wxART_CMN_DIALOG,
                                                    wxSize(16, 16)));
     // executable
-    if (GetIconID(wxEmptyString, _T("application/x-executable")) == file)
+    if (GetIconID(wxEmptyString, wxT("application/x-executable")) == file)
     {
         m_smallImageList->Add(wxArtProvider::GetBitmap(wxART_EXECUTABLE_FILE,
                                                        wxART_CMN_DIALOG,
                                                        wxSize(16, 16)));
-        delete m_HashTable->Get(_T("exe"));
-        m_HashTable->Delete(_T("exe"));
-        m_HashTable->Put(_T("exe"), new wxFileIconEntry(executable));
+        delete m_HashTable->Get(wxT("exe"));
+        m_HashTable->Delete(wxT("exe"));
+        m_HashTable->Put(wxT("exe"), new wxFileIconEntry(executable));
     }
     /* else put into list by GetIconID
        (KDE defines application/x-executable for *.exe and has nice icon)
--- src/generic/vlbox.cpp-orig	2009-06-18 17:10:33.668025000 -0500
+++ src/generic/vlbox.cpp	2009-06-18 17:10:47.549056000 -0500
@@ -123,10 +123,10 @@ bool wxVListBox::IsSelected(size_t line)
 bool wxVListBox::Select(size_t item, bool select)
 {
     wxCHECK_MSG( m_selStore, false,
-                 _T("Select() may only be used with multiselection listbox") );
+                 wxT("Select() may only be used with multiselection listbox") );
 
     wxCHECK_MSG( item < GetItemCount(), false,
-                 _T("Select(): invalid item index") );
+                 wxT("Select(): invalid item index") );
 
     bool changed = m_selStore->SelectItem(item, select);
     if ( changed )
@@ -143,7 +143,7 @@ bool wxVListBox::Select(size_t item, boo
 bool wxVListBox::SelectRange(size_t from, size_t to)
 {
     wxCHECK_MSG( m_selStore, false,
-                 _T("SelectRange() may only be used with multiselection listbox") );
+                 wxT("SelectRange() may only be used with multiselection listbox") );
 
     // make sure items are in correct order
     if ( from > to )
@@ -154,7 +154,7 @@ bool wxVListBox::SelectRange(size_t from
     }
 
     wxCHECK_MSG( to < GetItemCount(), false,
-                    _T("SelectRange(): invalid item index") );
+                    wxT("SelectRange(): invalid item index") );
 
     wxArrayInt changed;
     if ( !m_selStore->SelectRange(from, to, true, &changed) )
@@ -186,7 +186,7 @@ bool wxVListBox::SelectRange(size_t from
 bool wxVListBox::DoSelectAll(bool select)
 {
     wxCHECK_MSG( m_selStore, false,
-                 _T("SelectAll may only be used with multiselection listbox") );
+                 wxT("SelectAll may only be used with multiselection listbox") );
 
     size_t count = GetItemCount();
     if ( count )
@@ -209,7 +209,7 @@ bool wxVListBox::DoSetCurrent(int curren
 {
     wxASSERT_MSG( current == wxNOT_FOUND ||
                     (current >= 0 && (size_t)current < GetItemCount()),
-                  _T("wxVListBox::DoSetCurrent(): invalid item index") );
+                  wxT("wxVListBox::DoSetCurrent(): invalid item index") );
 
     if ( current == m_current )
     {
@@ -249,7 +249,7 @@ bool wxVListBox::DoSetCurrent(int curren
 void wxVListBox::SendSelectedEvent()
 {
     wxASSERT_MSG( m_current != wxNOT_FOUND,
-                    _T("SendSelectedEvent() shouldn't be called") );
+                    wxT("SendSelectedEvent() shouldn't be called") );
 
     wxCommandEvent event(wxEVT_COMMAND_LISTBOX_SELECTED, GetId());
     event.SetEventObject(this);
@@ -262,7 +262,7 @@ void wxVListBox::SetSelection(int select
 {
     wxCHECK_RET( selection == wxNOT_FOUND ||
                   (selection >= 0 && (size_t)selection < GetItemCount()),
-                  _T("wxVListBox::SetSelection(): invalid item index") );
+                  wxT("wxVListBox::SetSelection(): invalid item index") );
 
     if ( HasMultipleSelection() )
     {
@@ -292,7 +292,7 @@ int wxVListBox::GetFirstSelected(unsigne
 int wxVListBox::GetNextSelected(unsigned long& cookie) const
 {
     wxCHECK_MSG( m_selStore, wxNOT_FOUND,
-                  _T("GetFirst/NextSelected() may only be used with multiselection listboxes") );
+                  wxT("GetFirst/NextSelected() may only be used with multiselection listboxes") );
 
     while ( cookie < GetItemCount() )
     {
--- src/generic/calctrl.cpp-orig	2009-06-18 17:10:53.373373000 -0500
+++ src/generic/calctrl.cpp	2009-06-18 17:11:02.200107000 -0500
@@ -220,12 +220,12 @@ bool wxCalendarCtrl::Create(wxWindow *pa
     if ( !HasFlag(wxCAL_SEQUENTIAL_MONTH_SELECTION) )
     {
         CreateYearSpinCtrl();
-        m_staticYear = new wxStaticText(GetParent(), wxID_ANY, m_date.Format(_T("%Y")),
+        m_staticYear = new wxStaticText(GetParent(), wxID_ANY, m_date.Format(wxT("%Y")),
                                         wxDefaultPosition, wxDefaultSize,
                                         wxALIGN_CENTRE);
 
         CreateMonthComboBox();
-        m_staticMonth = new wxStaticText(GetParent(), wxID_ANY, m_date.Format(_T("%B")),
+        m_staticMonth = new wxStaticText(GetParent(), wxID_ANY, m_date.Format(wxT("%B")),
                                          wxDefaultPosition, wxDefaultSize,
                                          wxALIGN_CENTRE);
     }
@@ -269,7 +269,7 @@ void wxCalendarCtrl::SetWindowStyleFlag(
     // created/shown/hidden accordingly
     wxASSERT_MSG( (style & wxCAL_SEQUENTIAL_MONTH_SELECTION) ==
                     (m_windowStyle & wxCAL_SEQUENTIAL_MONTH_SELECTION),
-                  _T("wxCAL_SEQUENTIAL_MONTH_SELECTION can't be changed after creation") );
+                  wxT("wxCAL_SEQUENTIAL_MONTH_SELECTION can't be changed after creation") );
 
     wxControl::SetWindowStyleFlag(style);
 }
@@ -308,7 +308,7 @@ void wxCalendarCtrl::CreateMonthComboBox
 void wxCalendarCtrl::CreateYearSpinCtrl()
 {
     m_spinYear = new wxSpinCtrl(GetParent(), wxID_ANY,
-                                GetDate().Format(_T("%Y")),
+                                GetDate().Format(wxT("%Y")),
                                 wxDefaultPosition,
                                 wxDefaultSize,
                                 wxSP_ARROW_KEYS | wxCLIP_SIBLINGS,
@@ -497,7 +497,7 @@ bool wxCalendarCtrl::SetDate(const wxDat
                     if ( AllowYearChange() )
                     {
                         if ( !m_userChangedYear )
-                            m_spinYear->SetValue(m_date.Format(_T("%Y")));
+                            m_spinYear->SetValue(m_date.Format(wxT("%Y")));
                     }
                 }
 
@@ -1062,7 +1062,7 @@ void wxCalendarCtrl::OnPaint(wxPaintEven
             {
                 // don't use wxDate::Format() which prepends 0s
                 unsigned int day = date.GetDay();
-                wxString dayStr = wxString::Format(_T("%u"), day);
+                wxString dayStr = wxString::Format(wxT("%u"), day);
                 wxCoord width;
                 dc.GetTextExtent(dayStr, &width, (wxCoord *)NULL);
 
@@ -1158,7 +1158,7 @@ void wxCalendarCtrl::OnPaint(wxPaintEven
                             break;
 
                         default:
-                            wxFAIL_MSG(_T("unknown border type"));
+                            wxFAIL_MSG(wxT("unknown border type"));
                     }
                 }
 
@@ -1470,7 +1470,7 @@ void wxCalendarCtrl::OnClick(wxMouseEven
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown hittest code"));
+            wxFAIL_MSG(wxT("unknown hittest code"));
             // fall through
 
         case wxCAL_HITTEST_NOWHERE:
@@ -1666,7 +1666,7 @@ void wxCalendarCtrl::OnChar(wxKeyEvent& 
     wxDateTime target;
     switch ( event.GetKeyCode() )
     {
-        case _T('+'):
+        case wxT('+'):
         case WXK_ADD:
             target = m_date + wxDateSpan::Year();
             if ( ChangeYear(&target) )
@@ -1675,7 +1675,7 @@ void wxCalendarCtrl::OnChar(wxKeyEvent& 
             }
             break;
 
-        case _T('-'):
+        case wxT('-'):
         case WXK_SUBTRACT:
             target = m_date - wxDateSpan::Year();
             if ( ChangeYear(&target) )
@@ -1801,7 +1801,7 @@ void wxCalendarCtrl::SetHolidayAttrs()
 
 void wxCalendarCtrl::SetHoliday(size_t day)
 {
-    wxCHECK_RET( day > 0 && day < 32, _T("invalid day in SetHoliday") );
+    wxCHECK_RET( day > 0 && day < 32, wxT("invalid day in SetHoliday") );
 
     wxCalendarDateAttr *attr = GetAttr(day);
     if ( !attr )
--- src/generic/spinctlg.cpp-orig	2009-06-18 17:11:26.267526000 -0500
+++ src/generic/spinctlg.cpp	2009-06-18 17:11:37.453554000 -0500
@@ -321,9 +321,9 @@ int wxSpinCtrl::GetMax() const
 
 void wxSpinCtrl::SetTextValue(int val)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetTextValue") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetTextValue") );
 
-    m_text->SetValue(wxString::Format(_T("%d"), val));
+    m_text->SetValue(wxString::Format(wxT("%d"), val));
 
     // select all text
     m_text->SetSelection(0, -1);
@@ -350,7 +350,7 @@ void wxSpinCtrl::SetTextValue(int val)
 
 void wxSpinCtrl::SetValue(int val)
 {
-    wxCHECK_RET( m_btn, _T("invalid call to wxSpinCtrl::SetValue") );
+    wxCHECK_RET( m_btn, wxT("invalid call to wxSpinCtrl::SetValue") );
 
     SetTextValue(val);
 
@@ -359,7 +359,7 @@ void wxSpinCtrl::SetValue(int val)
 
 void wxSpinCtrl::SetValue(const wxString& text)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetValue") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetValue") );
 
     long val;
     if ( text.ToLong(&val) && ((val > INT_MIN) && (val < INT_MAX)) )
@@ -375,14 +375,14 @@ void wxSpinCtrl::SetValue(const wxString
 
 void wxSpinCtrl::SetRange(int min, int max)
 {
-    wxCHECK_RET( m_btn, _T("invalid call to wxSpinCtrl::SetRange") );
+    wxCHECK_RET( m_btn, wxT("invalid call to wxSpinCtrl::SetRange") );
 
     m_btn->SetRange(min, max);
 }
 
 void wxSpinCtrl::SetSelection(long from, long to)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetSelection") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetSelection") );
 
     m_text->SetSelection(from, to);
 }
--- src/generic/logg.cpp-orig	2009-06-18 17:11:42.564738000 -0500
+++ src/generic/logg.cpp	2009-06-18 17:11:56.216184000 -0500
@@ -69,7 +69,7 @@
 #include "wx/datetime.h"
 
 // the suffix we add to the button to show that the dialog can be expanded
-#define EXPAND_SUFFIX _T(" >>")
+#define EXPAND_SUFFIX wxT(" >>")
 
 // ----------------------------------------------------------------------------
 // private classes
@@ -87,7 +87,7 @@ static wxString TimeStamp(const wxChar *
     if ( !wxStrftime(buf, WXSIZEOF(buf), format, wxLocaltime_r(&t, &tm)) )
     {
         // buffer is too small?
-        wxFAIL_MSG(_T("strftime() failed"));
+        wxFAIL_MSG(wxT("strftime() failed"));
     }
     return wxString(buf);
 #else // !wxUSE_DATETIME
@@ -802,7 +802,7 @@ wxLogDialog::wxLogDialog(wxWindow *paren
             break;
 
         default:
-            wxFAIL_MSG(_T("incorrect log style"));
+            wxFAIL_MSG(wxT("incorrect log style"));
     }
 
     if (!isPda)
@@ -877,8 +877,8 @@ void wxLogDialog::CreateDetailsControls(
 
     // no need to translate these strings as they're not shown to the
     // user anyhow (we use wxLC_NO_HEADER style)
-    m_listctrl->InsertColumn(0, _T("Message"));
-    m_listctrl->InsertColumn(1, _T("Time"));
+    m_listctrl->InsertColumn(0, wxT("Message"));
+    m_listctrl->InsertColumn(1, wxT("Time"));
 
     // prepare the imagelist
     static const int ICON_SIZE = 16;
@@ -918,7 +918,7 @@ void wxLogDialog::CreateDetailsControls(
     if ( !fmt )
     {
         // default format
-        fmt = _T("%c");
+        fmt = wxT("%c");
     }
 
     size_t count = m_messages.GetCount();
@@ -1004,7 +1004,7 @@ void wxLogDialog::OnSave(wxCommandEvent&
     if ( !fmt )
     {
         // default format
-        fmt = _T("%c");
+        fmt = wxT("%c");
     }
 
     size_t count = m_messages.GetCount();
@@ -1012,7 +1012,7 @@ void wxLogDialog::OnSave(wxCommandEvent&
     {
         wxString line;
         line << TimeStamp(fmt, (time_t)m_times[n])
-             << _T(": ")
+             << wxT(": ")
              << m_messages[n]
              << wxTextFile::GetEOL();
 
@@ -1058,9 +1058,9 @@ void wxLogDialog::OnDetails(wxCommandEve
     else // show details now
     {
 #ifdef __SMARTPHONE__
-        SetRightMenu(wxID_MORE, wxString(_T("<< ")) + ms_details);
+        SetRightMenu(wxID_MORE, wxString(wxT("<< ")) + ms_details);
 #else
-        m_btnDetails->SetLabel(wxString(_T("<< ")) + ms_details);
+        m_btnDetails->SetLabel(wxString(wxT("<< ")) + ms_details);
 #endif
 
         if ( !m_listctrl )
--- src/generic/aboutdlgg.cpp-orig	2009-06-18 17:12:04.228682000 -0500
+++ src/generic/aboutdlgg.cpp	2009-06-18 17:12:20.282455000 -0500
@@ -51,7 +51,7 @@ static wxString AllAsString(const wxArra
     s.reserve(20*count);
     for ( size_t n = 0; n < count; n++ )
     {
-        s << a[n] << (n == count - 1 ? _T("\n") : _T(", "));
+        s << a[n] << (n == count - 1 ? wxT("\n") : wxT(", "));
     }
 
     return s;
@@ -65,19 +65,19 @@ wxString wxAboutDialogInfo::GetDescripti
 {
     wxString s = GetDescription();
     if ( !s.empty() )
-        s << _T('\n');
+        s << wxT('\n');
 
     if ( HasDevelopers() )
-        s << _T('\n') << _("Developed by ") << AllAsString(GetDevelopers());
+        s << wxT('\n') << _("Developed by ") << AllAsString(GetDevelopers());
 
     if ( HasDocWriters() )
-        s << _T('\n') << _("Documentation by ") << AllAsString(GetDocWriters());
+        s << wxT('\n') << _("Documentation by ") << AllAsString(GetDocWriters());
 
     if ( HasArtists() )
-        s << _T('\n') << _("Graphics art by ") << AllAsString(GetArtists());
+        s << wxT('\n') << _("Graphics art by ") << AllAsString(GetArtists());
 
     if ( HasTranslators() )
-        s << _T('\n') << _("Translations by ") << AllAsString(GetTranslators());
+        s << wxT('\n') << _("Translations by ") << AllAsString(GetTranslators());
 
     return s;
 }
@@ -102,8 +102,8 @@ wxString wxAboutDialogInfo::GetCopyright
 
 #if wxUSE_UNICODE
     const wxString copyrightSign = wxString::FromUTF8("\xc2\xa9");
-    ret.Replace(_T("(c)"), copyrightSign);
-    ret.Replace(_T("(C)"), copyrightSign);
+    ret.Replace(wxT("(c)"), copyrightSign);
+    ret.Replace(wxT("(C)"), copyrightSign);
 #endif // wxUSE_UNICODE
 
     return ret;
@@ -123,7 +123,7 @@ bool wxGenericAboutDialog::Create(const 
     m_sizerText = new wxBoxSizer(wxVERTICAL);
     wxString nameAndVersion = info.GetName();
     if ( info.HasVersion() )
-        nameAndVersion << _T(' ') << info.GetVersion();
+        nameAndVersion << wxT(' ') << info.GetVersion();
     wxStaticText *label = new wxStaticText(this, wxID_ANY, nameAndVersion);
     wxFont fontBig(*wxNORMAL_FONT);
     fontBig.SetPointSize(fontBig.GetPointSize() + 2);
@@ -200,8 +200,8 @@ bool wxGenericAboutDialog::Create(const 
 
 void wxGenericAboutDialog::AddControl(wxWindow *win, const wxSizerFlags& flags)
 {
-    wxCHECK_RET( m_sizerText, _T("can only be called after Create()") );
-    wxASSERT_MSG( win, _T("can't add NULL window to about dialog") );
+    wxCHECK_RET( m_sizerText, wxT("can only be called after Create()") );
+    wxASSERT_MSG( win, wxT("can't add NULL window to about dialog") );
 
     m_sizerText->Add(win, flags);
 }
--- src/generic/grid.cpp-orig	2009-06-18 17:12:30.321184000 -0500
+++ src/generic/grid.cpp	2009-06-18 17:12:40.982293000 -0500
@@ -860,7 +860,7 @@ void wxGridCellTextEditor::SetParameters
         }
         else
         {
-            wxLogDebug( _T("Invalid wxGridCellTextEditor parameter string '%s' ignored"), params.c_str() );
+            wxLogDebug( wxT("Invalid wxGridCellTextEditor parameter string '%s' ignored"), params.c_str() );
         }
     }
 }
@@ -922,7 +922,7 @@ void wxGridCellNumberEditor::BeginEdit(i
         wxString sValue = table->GetValue(row, col);
         if (! sValue.ToLong(&m_valueOld) && ! sValue.empty())
         {
-            wxFAIL_MSG( _T("this cell doesn't have numeric value") );
+            wxFAIL_MSG( wxT("this cell doesn't have numeric value") );
             return;
         }
     }
@@ -1055,11 +1055,11 @@ void wxGridCellNumberEditor::SetParamete
     else
     {
         long tmp;
-        if ( params.BeforeFirst(_T(',')).ToLong(&tmp) )
+        if ( params.BeforeFirst(wxT(',')).ToLong(&tmp) )
         {
             m_min = (int)tmp;
 
-            if ( params.AfterFirst(_T(',')).ToLong(&tmp) )
+            if ( params.AfterFirst(wxT(',')).ToLong(&tmp) )
             {
                 m_max = (int)tmp;
 
@@ -1068,7 +1068,7 @@ void wxGridCellNumberEditor::SetParamete
             }
         }
 
-        wxLogDebug(_T("Invalid wxGridCellNumberEditor parameter string '%s' ignored"), params.c_str());
+        wxLogDebug(wxT("Invalid wxGridCellNumberEditor parameter string '%s' ignored"), params.c_str());
     }
 }
 
@@ -1130,7 +1130,7 @@ void wxGridCellFloatEditor::BeginEdit(in
         {
             if ( !value.ToDouble(&m_valueOld) )
             {
-                wxFAIL_MSG( _T("this cell doesn't have float value") );
+                wxFAIL_MSG( wxT("this cell doesn't have float value") );
                 return;
             }
         }
@@ -1190,7 +1190,7 @@ void wxGridCellFloatEditor::StartingKey(
     bool is_decimal_point = ( strbuf ==
        wxLocale::GetInfo(wxLOCALE_DECIMAL_POINT, wxLOCALE_CAT_NUMBER) );
 #else
-    bool is_decimal_point = ( strbuf == _T(".") );
+    bool is_decimal_point = ( strbuf == wxT(".") );
 #endif
 
     if ( wxIsdigit(keycode) || keycode == '+' || keycode == '-'
@@ -1216,11 +1216,11 @@ void wxGridCellFloatEditor::SetParameter
     else
     {
         long tmp;
-        if ( params.BeforeFirst(_T(',')).ToLong(&tmp) )
+        if ( params.BeforeFirst(wxT(',')).ToLong(&tmp) )
         {
             m_width = (int)tmp;
 
-            if ( params.AfterFirst(_T(',')).ToLong(&tmp) )
+            if ( params.AfterFirst(wxT(',')).ToLong(&tmp) )
             {
                 m_precision = (int)tmp;
 
@@ -1229,7 +1229,7 @@ void wxGridCellFloatEditor::SetParameter
             }
         }
 
-        wxLogDebug(_T("Invalid wxGridCellFloatEditor parameter string '%s' ignored"), params.c_str());
+        wxLogDebug(wxT("Invalid wxGridCellFloatEditor parameter string '%s' ignored"), params.c_str());
     }
 }
 
@@ -1239,21 +1239,21 @@ wxString wxGridCellFloatEditor::GetStrin
     if ( m_precision == -1 && m_width != -1)
     {
         // default precision
-        fmt.Printf(_T("%%%d.f"), m_width);
+        fmt.Printf(wxT("%%%d.f"), m_width);
     }
     else if ( m_precision != -1 && m_width == -1)
     {
         // default width
-        fmt.Printf(_T("%%.%df"), m_precision);
+        fmt.Printf(wxT("%%.%df"), m_precision);
     }
     else if ( m_precision != -1 && m_width != -1 )
     {
-        fmt.Printf(_T("%%%d.%df"), m_width, m_precision);
+        fmt.Printf(wxT("%%%d.%df"), m_width, m_precision);
     }
     else
     {
         // default width/precision
-        fmt = _T("%f");
+        fmt = wxT("%f");
     }
 
     return wxString::Format(fmt, m_valueOld);
@@ -1275,7 +1275,7 @@ bool wxGridCellFloatEditor::IsAcceptedKe
             const wxString decimalPoint =
                 wxLocale::GetInfo(wxLOCALE_DECIMAL_POINT, wxLOCALE_CAT_NUMBER);
 #else
-            const wxString decimalPoint(_T('.'));
+            const wxString decimalPoint(wxT('.'));
 #endif
 
             // accept digits, 'e' as in '1e+6', also '-', '+', and '.'
@@ -1302,7 +1302,7 @@ bool wxGridCellFloatEditor::IsAcceptedKe
 // ----------------------------------------------------------------------------
 
 // the default values for GetValue()
-wxString wxGridCellBoolEditor::ms_stringValues[2] = { _T(""), _T("1") };
+wxString wxGridCellBoolEditor::ms_stringValues[2] = { wxT(""), wxT("1") };
 
 void wxGridCellBoolEditor::Create(wxWindow* parent,
                                   wxWindowID id,
@@ -1420,7 +1420,7 @@ void wxGridCellBoolEditor::BeginEdit(int
             // because we'll still overwrite it with something different and
             // this risks to be very surprising for the user code, let them
             // know about it
-            wxFAIL_MSG( _T("invalid value for a cell with bool editor!") );
+            wxFAIL_MSG( wxT("invalid value for a cell with bool editor!") );
         }
     }
 
@@ -1656,7 +1656,7 @@ void wxGridCellChoiceEditor::SetParamete
 
     m_choices.Empty();
 
-    wxStringTokenizer tk(params, _T(','));
+    wxStringTokenizer tk(params, wxT(','));
     while ( tk.HasMoreTokens() )
     {
         m_choices.Add(tk.GetNextToken());
@@ -1925,7 +1925,7 @@ wxSize wxGridCellStringRenderer::DoGetBe
 {
     wxCoord x = 0, y = 0, max_x = 0;
     dc.SetFont(attr.GetFont());
-    wxStringTokenizer tk(text, _T('\n'));
+    wxStringTokenizer tk(text, wxT('\n'));
     while ( tk.HasMoreTokens() )
     {
         dc.GetTextExtent(tk.GetNextToken(), &x, &y);
@@ -2054,7 +2054,7 @@ wxString wxGridCellNumberRenderer::GetSt
     wxString text;
     if ( table->CanGetValueAs(row, col, wxGRID_VALUE_NUMBER) )
     {
-        text.Printf(_T("%ld"), table->GetValueAsLong(row, col));
+        text.Printf(wxT("%ld"), table->GetValueAsLong(row, col));
     }
     else
     {
@@ -2141,21 +2141,21 @@ wxString wxGridCellFloatRenderer::GetStr
                 if ( m_precision == -1 )
                 {
                     // default width/precision
-                    m_format = _T("%f");
+                    m_format = wxT("%f");
                 }
                 else
                 {
-                    m_format.Printf(_T("%%.%df"), m_precision);
+                    m_format.Printf(wxT("%%.%df"), m_precision);
                 }
             }
             else if ( m_precision == -1 )
             {
                 // default precision
-                m_format.Printf(_T("%%%d.f"), m_width);
+                m_format.Printf(wxT("%%%d.f"), m_width);
             }
             else
             {
-                m_format.Printf(_T("%%%d.%df"), m_width, m_precision);
+                m_format.Printf(wxT("%%%d.%df"), m_width, m_precision);
             }
         }
 
@@ -2207,7 +2207,7 @@ void wxGridCellFloatRenderer::SetParamet
     }
     else
     {
-        wxString tmp = params.BeforeFirst(_T(','));
+        wxString tmp = params.BeforeFirst(wxT(','));
         if ( !tmp.empty() )
         {
             long width;
@@ -2217,11 +2217,11 @@ void wxGridCellFloatRenderer::SetParamet
             }
             else
             {
-                wxLogDebug(_T("Invalid wxGridCellFloatRenderer width parameter string '%s ignored"), params.c_str());
+                wxLogDebug(wxT("Invalid wxGridCellFloatRenderer width parameter string '%s ignored"), params.c_str());
             }
         }
 
-        tmp = params.AfterFirst(_T(','));
+        tmp = params.AfterFirst(wxT(','));
         if ( !tmp.empty() )
         {
             long precision;
@@ -2231,7 +2231,7 @@ void wxGridCellFloatRenderer::SetParamet
             }
             else
             {
-                wxLogDebug(_T("Invalid wxGridCellFloatRenderer precision parameter string '%s ignored"), params.c_str());
+                wxLogDebug(wxT("Invalid wxGridCellFloatRenderer precision parameter string '%s ignored"), params.c_str());
             }
         }
     }
@@ -3137,7 +3137,7 @@ int wxGridTypeRegistry::FindOrCloneDataT
     {
         // the first part of the typename is the "real" type, anything after ':'
         // are the parameters for the renderer
-        index = FindDataType(typeName.BeforeFirst(_T(':')));
+        index = FindDataType(typeName.BeforeFirst(wxT(':')));
         if ( index == wxNOT_FOUND )
         {
             return wxNOT_FOUND;
@@ -3154,7 +3154,7 @@ int wxGridTypeRegistry::FindOrCloneDataT
         editorOld->DecRef();
 
         // do it even if there are no parameters to reset them to defaults
-        wxString params = typeName.AfterFirst(_T(':'));
+        wxString params = typeName.AfterFirst(wxT(':'));
         renderer->SetParameters(params);
         editor->SetParameters(params);
 
@@ -3342,7 +3342,7 @@ wxString wxGridTableBase::GetColLabelVal
     unsigned int i, n;
     for ( n = 1; ; n++ )
     {
-        s += (wxChar) (_T('A') + (wxChar)(col % 26));
+        s += (wxChar) (wxT('A') + (wxChar)(col % 26));
         col = col / 26 - 1;
         if ( col < 0 )
             break;
@@ -3487,7 +3487,7 @@ wxString wxGridStringTable::GetValue( in
 {
     wxCHECK_MSG( (row < GetNumberRows()) && (col < GetNumberCols()),
                  wxEmptyString,
-                 _T("invalid row or column index in wxGridStringTable") );
+                 wxT("invalid row or column index in wxGridStringTable") );
 
     return m_data[row][col];
 }
@@ -3495,7 +3495,7 @@ wxString wxGridStringTable::GetValue( in
 void wxGridStringTable::SetValue( int row, int col, const wxString& value )
 {
     wxCHECK_RET( (row < GetNumberRows()) && (col < GetNumberCols()),
-                 _T("invalid row or column index in wxGridStringTable") );
+                 wxT("invalid row or column index in wxGridStringTable") );
 
     m_data[row][col] = value;
 }
@@ -3504,7 +3504,7 @@ bool wxGridStringTable::IsEmptyCell( int
 {
     wxCHECK_MSG( (row < GetNumberRows()) && (col < GetNumberCols()),
                  true,
-                  _T("invalid row or column index in wxGridStringTable") );
+                  wxT("invalid row or column index in wxGridStringTable") );
 
     return (m_data[row][col] == wxEmptyString);
 }
@@ -4330,7 +4330,7 @@ wxGrid::~wxGrid()
 
 #ifdef DEBUG_ATTR_CACHE
     size_t total = gs_nAttrCacheHits + gs_nAttrCacheMisses;
-    wxPrintf(_T("wxGrid attribute cache statistics: "
+    wxPrintf(wxT("wxGrid attribute cache statistics: "
                 "total: %u, hits: %u (%u%%)\n"),
              total, gs_nAttrCacheHits,
              total ? (gs_nAttrCacheHits*100) / total : 0);
@@ -5953,19 +5953,19 @@ void wxGrid::ChangeCursorMode(CursorMode
 #ifdef __WXDEBUG__
     static const wxChar *cursorModes[] =
     {
-        _T("SELECT_CELL"),
-        _T("RESIZE_ROW"),
-        _T("RESIZE_COL"),
-        _T("SELECT_ROW"),
-        _T("SELECT_COL"),
-        _T("MOVE_COL"),
+        wxT("SELECT_CELL"),
+        wxT("RESIZE_ROW"),
+        wxT("RESIZE_COL"),
+        wxT("SELECT_ROW"),
+        wxT("SELECT_COL"),
+        wxT("MOVE_COL"),
     };
 
-    wxLogTrace(_T("grid"),
-               _T("wxGrid cursor mode (mouse capture for %s): %s -> %s"),
-               win == m_colLabelWin ? _T("colLabelWin")
-                                    : win ? _T("rowLabelWin")
-                                          : _T("gridWin"),
+    wxLogTrace(wxT("grid"),
+               wxT("wxGrid cursor mode (mouse capture for %s): %s -> %s"),
+               win == m_colLabelWin ? wxT("colLabelWin")
+                                    : win ? wxT("rowLabelWin")
+                                          : wxT("gridWin"),
                cursorModes[m_cursorMode], cursorModes[mode]);
 #endif
 
@@ -8414,7 +8414,7 @@ void wxGrid::EnableCellEditControl( bool
                 return;
 
             // this should be checked by the caller!
-            wxASSERT_MSG( CanEnableCellControl(), _T("can't enable editing for this cell!") );
+            wxASSERT_MSG( CanEnableCellControl(), wxT("can't enable editing for this cell!") );
 
             // do it before ShowCellEditControl()
             m_cellEditCtrlEnabled = enable;
@@ -8749,7 +8749,7 @@ static int CoordToRowOrCol(int coord, in
     while ( i_max - i_min > 0 )
     {
         wxCHECK_MSG(BorderArray[i_min] <= coord && coord < BorderArray[i_max],
-                    0, _T("wxGrid: internal error in CoordToRowOrCol"));
+                    0, wxT("wxGrid: internal error in CoordToRowOrCol"));
         if (coord >=  BorderArray[ i_max - 1])
             return i_max;
         else
@@ -8816,7 +8816,7 @@ int wxGrid::XToCol( int x, bool clipToMi
     while ( maxPos - minPos > 0 )
     {
         wxCHECK_MSG(m_colRights[GetColAt( minPos )] <= x && x < m_colRights[GetColAt( maxPos )],
-                    0, _T("wxGrid: internal error in XToCol"));
+                    0, wxT("wxGrid: internal error in XToCol"));
 
         if (x >=  m_colRights[GetColAt( maxPos - 1 )])
             return GetColAt( maxPos );
@@ -9855,7 +9855,7 @@ int wxGrid::GetDefaultRowSize()
 
 int wxGrid::GetRowSize( int row )
 {
-    wxCHECK_MSG( row >= 0 && row < m_numRows, 0, _T("invalid row index") );
+    wxCHECK_MSG( row >= 0 && row < m_numRows, 0, wxT("invalid row index") );
 
     return GetRowHeight(row);
 }
@@ -9867,7 +9867,7 @@ int wxGrid::GetDefaultColSize()
 
 int wxGrid::GetColSize( int col )
 {
-    wxCHECK_MSG( col >= 0 && col < m_numCols, 0, _T("invalid column index") );
+    wxCHECK_MSG( col >= 0 && col < m_numCols, 0, wxT("invalid column index") );
 
     return GetColWidth(col);
 }
@@ -10147,8 +10147,8 @@ wxGridCellAttr *wxGrid::GetOrCreateCellA
     wxGridCellAttr *attr = (wxGridCellAttr *)NULL;
     bool canHave = ((wxGrid*)this)->CanHaveAttributes();
 
-    wxCHECK_MSG( canHave, attr, _T("Cell attributes not allowed"));
-    wxCHECK_MSG( m_table, attr, _T("must have a table") );
+    wxCHECK_MSG( canHave, attr, wxT("Cell attributes not allowed"));
+    wxCHECK_MSG( m_table, attr, wxT("must have a table") );
 
     attr = m_table->GetAttr(row, col, wxGridCellAttr::Cell);
     if ( !attr )
@@ -10182,7 +10182,7 @@ void wxGrid::SetColFormatFloat(int col, 
     wxString typeName = wxGRID_VALUE_FLOAT;
     if ( (width != -1) || (precision != -1) )
     {
-        typeName << _T(':') << width << _T(',') << precision;
+        typeName << wxT(':') << width << wxT(',') << precision;
     }
 
     SetColFormatCustom(col, typeName);
@@ -10481,7 +10481,7 @@ void wxGrid::SetDefaultRowSize( int heig
 
 void wxGrid::SetRowSize( int row, int height )
 {
-    wxCHECK_RET( row >= 0 && row < m_numRows, _T("invalid row index") );
+    wxCHECK_RET( row >= 0 && row < m_numRows, wxT("invalid row index") );
 
     // if < 0 then calculate new height from label
     if ( height < 0 )
@@ -10538,7 +10538,7 @@ void wxGrid::SetDefaultColSize( int widt
 
 void wxGrid::SetColSize( int col, int width )
 {
-    wxCHECK_RET( col >= 0 && col < m_numCols, _T("invalid column index") );
+    wxCHECK_RET( col >= 0 && col < m_numCols, wxT("invalid column index") );
 
     // if < 0 then calculate new width from label
     if ( width < 0 )
--- src/generic/helpext.cpp-orig	2009-06-18 17:12:48.217211000 -0500
+++ src/generic/helpext.cpp	2009-06-18 17:12:58.995443000 -0500
@@ -53,7 +53,7 @@
 // ----------------------------------------------------------------------------
 
 /// Name for map file.
-#define WXEXTHELP_MAPFILE   _T("wxhelp.map")
+#define WXEXTHELP_MAPFILE   wxT("wxhelp.map")
 
 /// Character introducing comments/documentation field in map file.
 #define WXEXTHELP_COMMENTCHAR   ';'
@@ -109,7 +109,7 @@ void wxExtHelpController::SetViewer(cons
 bool wxExtHelpController::DisplayHelp(const wxString &relativeURL)
 {
     // construct hte URL to open -- it's just a file
-    wxString url(_T("file://") + m_helpDir);
+    wxString url(wxT("file://") + m_helpDir);
     url << wxFILE_SEP_PATH << relativeURL;
 
     // use the explicit browser program if specified
@@ -124,7 +124,7 @@ bool wxExtHelpController::DisplayHelp(co
                 return true;
         }
 
-        if ( wxExecute(m_BrowserName + _T(' ') + url, wxEXEC_SYNC) != -1 )
+        if ( wxExecute(m_BrowserName + wxT(' ') + url, wxEXEC_SYNC) != -1 )
             return true;
     }
     //else: either no browser explicitly specified or we failed to open it
@@ -177,7 +177,7 @@ bool wxExtHelpController::ParseMapFileLi
         p++;
 
     // skip empty lines and comments
-    if ( *p == _T('\0') || *p == WXEXTHELP_COMMENTCHAR )
+    if ( *p == wxT('\0') || *p == WXEXTHELP_COMMENTCHAR )
         return true;
 
     // the line is of the form "num url" so we must have an integer now
@@ -243,7 +243,7 @@ bool wxExtHelpController::LoadFile(const
         if ( ! dirExists )
         {
             // try without encoding
-            const wxString locNameWithoutEncoding = locName.BeforeLast(_T('.'));
+            const wxString locNameWithoutEncoding = locName.BeforeLast(wxT('.'));
             if ( !locNameWithoutEncoding.empty() )
             {
                 helpDirLoc = helpDir;
@@ -255,7 +255,7 @@ bool wxExtHelpController::LoadFile(const
         if ( !dirExists )
         {
             // try without country part
-            wxString locNameWithoutCountry = locName.BeforeLast(_T('_'));
+            wxString locNameWithoutCountry = locName.BeforeLast(wxT('_'));
             if ( !locNameWithoutCountry.empty() )
             {
                 helpDirLoc = helpDir;
--- src/generic/tipwin.cpp-orig	2009-06-18 17:17:07.724373000 -0500
+++ src/generic/tipwin.cpp	2009-06-18 17:17:15.378425000 -0500
@@ -267,7 +267,7 @@ void wxTipWindowView::Adjust(const wxStr
     bool breakLine = false;
     for ( const wxChar *p = text.c_str(); ; p++ )
     {
-        if ( *p == _T('\n') || *p == _T('\0') )
+        if ( *p == wxT('\n') || *p == wxT('\0') )
         {
             dc.GetTextExtent(current, &width, &height);
             if ( width > widthMax )
@@ -287,7 +287,7 @@ void wxTipWindowView::Adjust(const wxStr
             current.clear();
             breakLine = false;
         }
-        else if ( breakLine && (*p == _T(' ') || *p == _T('\t')) )
+        else if ( breakLine && (*p == wxT(' ') || *p == wxT('\t')) )
         {
             // word boundary - break the line here
             m_parent->m_textLines.Add(current);
--- src/generic/toolbkg.cpp-orig	2009-06-18 17:16:55.995194000 -0500
+++ src/generic/toolbkg.cpp	2009-06-18 17:17:00.925199000 -0500
@@ -203,7 +203,7 @@ wxString wxToolbook::GetPageText(size_t 
 
 int wxToolbook::GetPageImage(size_t WXUNUSED(n)) const
 {
-    wxFAIL_MSG( _T("wxToolbook::GetPageImage() not implemented") );
+    wxFAIL_MSG( wxT("wxToolbook::GetPageImage() not implemented") );
 
     return wxNOT_FOUND;
 }
--- src/generic/htmllbox.cpp-orig	2009-06-18 17:17:23.392280000 -0500
+++ src/generic/htmllbox.cpp	2009-06-18 17:17:36.135570000 -0500
@@ -303,11 +303,11 @@ void wxHtmlListBox::CacheItem(size_t n) 
 
         wxHtmlContainerCell *cell = (wxHtmlContainerCell *)m_htmlParser->
                 Parse(OnGetItemMarkup(n));
-        wxCHECK_RET( cell, _T("wxHtmlParser::Parse() returned NULL?") );
+        wxCHECK_RET( cell, wxT("wxHtmlParser::Parse() returned NULL?") );
 
         // set the cell's ID to item's index so that CellCoordsToPhysical()
         // can quickly find the item:
-        cell->SetId(wxString::Format(_T("%lu"), (unsigned long)n));
+        cell->SetId(wxString::Format(wxT("%lu"), (unsigned long)n));
 
         cell->Layout(GetClientSize().x - 2*GetMargins().x);
 
@@ -361,7 +361,7 @@ void wxHtmlListBox::OnDrawItem(wxDC& dc,
     CacheItem(n);
 
     wxHtmlCell *cell = m_cache->Get(n);
-    wxCHECK_RET( cell, _T("this cell should be cached!") );
+    wxCHECK_RET( cell, wxT("this cell should be cached!") );
 
     wxHtmlRenderingInfo htmlRendInfo;
 
@@ -389,7 +389,7 @@ wxCoord wxHtmlListBox::OnMeasureItem(siz
     CacheItem(n);
 
     wxHtmlCell *cell = m_cache->Get(n);
-    wxCHECK_MSG( cell, 0, _T("this cell should be cached!") );
+    wxCHECK_MSG( cell, 0, wxT("this cell should be cached!") );
 
     return cell->GetHeight() + cell->GetDescent() + 4;
 }
@@ -490,17 +490,17 @@ bool wxHtmlListBox::PhysicalCoordsToCell
 
 size_t wxHtmlListBox::GetItemForCell(const wxHtmlCell *cell) const
 {
-    wxCHECK_MSG( cell, 0, _T("no cell") );
+    wxCHECK_MSG( cell, 0, wxT("no cell") );
 
     cell = cell->GetRootCell();
 
-    wxCHECK_MSG( cell, 0, _T("no root cell") );
+    wxCHECK_MSG( cell, 0, wxT("no root cell") );
 
     // the cell's ID contains item index, see CacheItem():
     unsigned long n;
     if ( !cell->GetId().ToULong(&n) )
     {
-        wxFAIL_MSG( _T("unexpected root cell's ID") );
+        wxFAIL_MSG( wxT("unexpected root cell's ID") );
         return 0;
     }
 
--- src/generic/timer.cpp-orig	2009-06-18 17:17:40.755111000 -0500
+++ src/generic/timer.cpp	2009-06-18 17:17:48.143356000 -0500
@@ -43,7 +43,7 @@
 
     typedef ulong wxTimerTick_t;
 
-    #define wxTimerTickFmtSpec _T("lu")
+    #define wxTimerTickFmtSpec wxT("lu")
     #define wxTimerTickPrintfArg(tt) (tt)
 
     #ifdef __DOS__
@@ -73,10 +73,10 @@
     typedef wxLongLong wxTimerTick_t;
 
     #if wxUSE_LONGLONG_WX
-        #define wxTimerTickFmtSpec wxLongLongFmtSpec _T("d")
+        #define wxTimerTickFmtSpec wxLongLongFmtSpec wxT("d")
         #define wxTimerTickPrintfArg(tt) (tt.GetValue())
     #else // using native wxLongLong
-        #define wxTimerTickFmtSpec _T("s")
+        #define wxTimerTickFmtSpec wxT("s")
         #define wxTimerTickPrintfArg(tt) (tt.ToString().c_str())
     #endif // wx/native long long
 
--- src/generic/msgdlgg.cpp-orig	2009-06-18 17:17:56.832422000 -0500
+++ src/generic/msgdlgg.cpp	2009-06-18 17:18:01.566814000 -0500
@@ -78,7 +78,7 @@ wxGenericMessageDialog::wxGenericMessage
         switch ( style & wxICON_MASK )
         {
             default:
-                wxFAIL_MSG(_T("incorrect log style"));
+                wxFAIL_MSG(wxT("incorrect log style"));
                 // fall through
 
             case wxICON_ERROR:
--- src/generic/odcombo.cpp-orig	2009-06-18 17:18:11.096511000 -0500
+++ src/generic/odcombo.cpp	2009-06-18 17:18:23.784588000 -0500
@@ -938,7 +938,7 @@ void wxOwnerDrawnComboBox::Clear()
 
 void wxOwnerDrawnComboBox::Delete(unsigned int n)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxOwnerDrawnComboBox::Delete") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxOwnerDrawnComboBox::Delete") );
 
     if ( GetSelection() == (int) n )
         SetValue(wxEmptyString);
@@ -956,7 +956,7 @@ unsigned int wxOwnerDrawnComboBox::GetCo
 
 wxString wxOwnerDrawnComboBox::GetString(unsigned int n) const
 {
-    wxCHECK_MSG( IsValid(n), wxEmptyString, _T("invalid index in wxOwnerDrawnComboBox::GetString") );
+    wxCHECK_MSG( IsValid(n), wxEmptyString, wxT("invalid index in wxOwnerDrawnComboBox::GetString") );
 
     if ( !m_popupInterface )
         return m_initChs.Item(n);
@@ -968,7 +968,7 @@ void wxOwnerDrawnComboBox::SetString(uns
 {
     EnsurePopupControl();
 
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxOwnerDrawnComboBox::SetString") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxOwnerDrawnComboBox::SetString") );
 
     GetVListBoxComboPopup()->SetString(n,s);
 }
@@ -985,7 +985,7 @@ void wxOwnerDrawnComboBox::Select(int n)
 {
     EnsurePopupControl();
 
-    wxCHECK_RET( (n == wxNOT_FOUND) || IsValid(n), _T("invalid index in wxOwnerDrawnComboBox::Select") );
+    wxCHECK_RET( (n == wxNOT_FOUND) || IsValid(n), wxT("invalid index in wxOwnerDrawnComboBox::Select") );
 
     GetVListBoxComboPopup()->SetSelection(n);
 
--- src/generic/imaglist.cpp-orig	2009-06-18 17:18:56.100272000 -0500
+++ src/generic/imaglist.cpp	2009-06-18 17:19:02.113840000 -0500
@@ -65,8 +65,8 @@ int wxGenericImageList::Add( const wxBit
 {
     wxASSERT_MSG( (bitmap.GetWidth() >= m_width && bitmap.GetHeight() == m_height)
                   || (m_width == 0 && m_height == 0),
-                  _T("invalid bitmap size in wxImageList: this might work ")
-                  _T("on this platform but definitely won't under Windows.") );
+                  wxT("invalid bitmap size in wxImageList: this might work ")
+                  wxT("on this platform but definitely won't under Windows.") );
 
     const int index = int(m_images.GetCount());
 
--- src/generic/accel.cpp-orig	2009-06-18 17:19:29.020060000 -0500
+++ src/generic/accel.cpp	2009-06-18 17:19:32.675731000 -0500
@@ -152,7 +152,7 @@ void wxAcceleratorTable::Remove(const wx
         node = node->GetNext();
     }
 
-    wxFAIL_MSG(_T("deleting inexistent accel from wxAcceleratorTable"));
+    wxFAIL_MSG(wxT("deleting inexistent accel from wxAcceleratorTable"));
 }
 
 // ----------------------------------------------------------------------------
--- src/generic/vscroll.cpp-orig	2009-06-18 17:19:38.866074000 -0500
+++ src/generic/vscroll.cpp	2009-06-18 17:19:52.647781000 -0500
@@ -264,7 +264,7 @@ void wxVScrolledWindow::RefreshLine(size
 
 void wxVScrolledWindow::RefreshLines(size_t from, size_t to)
 {
-    wxASSERT_MSG( from <= to, _T("RefreshLines(): empty range") );
+    wxASSERT_MSG( from <= to, wxT("RefreshLines(): empty range") );
 
     // clump the range to just the visible lines -- it is useless to refresh
     // the other ones
@@ -483,7 +483,7 @@ void wxVScrolledWindow::OnScroll(wxScrol
 
     else // unknown scroll event?
     {
-        wxFAIL_MSG( _T("unknown scroll event type?") );
+        wxFAIL_MSG( wxT("unknown scroll event type?") );
         return;
     }
 
--- src/generic/treectlg.cpp-orig	2009-06-18 17:19:59.445694000 -0500
+++ src/generic/treectlg.cpp	2009-06-18 17:20:14.479254000 -0500
@@ -362,7 +362,7 @@ wxTreeTextCtrl::wxTreeTextCtrl(wxGeneric
         }
         else
         {
-            wxFAIL_MSG(_T("you must create an image list to use images!"));
+            wxFAIL_MSG(wxT("you must create an image list to use images!"));
         }
     }
 
@@ -468,7 +468,7 @@ void wxTreeTextCtrl::OnKeyUp( wxKeyEvent
         wxPoint myPos = GetPosition();
         wxSize mySize = GetSize();
         int sx, sy;
-        GetTextExtent(GetValue() + _T("M"), &sx, &sy);
+        GetTextExtent(GetValue() + wxT("M"), &sx, &sy);
         if (myPos.x + sx > parentSize.x)
             sx = parentSize.x - myPos.x;
         if (mySize.x > sx)
@@ -1612,9 +1612,9 @@ void wxGenericTreeCtrl::Expand(const wxT
 {
     wxGenericTreeItem *item = (wxGenericTreeItem*) itemId.m_pItem;
 
-    wxCHECK_RET( item, _T("invalid item in wxGenericTreeCtrl::Expand") );
+    wxCHECK_RET( item, wxT("invalid item in wxGenericTreeCtrl::Expand") );
     wxCHECK_RET( !HasFlag(wxTR_HIDE_ROOT) || itemId != GetRootItem(),
-                 _T("can't expand hidden root") );
+                 wxT("can't expand hidden root") );
 
     if ( !item->HasPlus() )
         return;
@@ -1642,7 +1642,7 @@ void wxGenericTreeCtrl::Expand(const wxT
 void wxGenericTreeCtrl::Collapse(const wxTreeItemId& itemId)
 {
     wxCHECK_RET( !HasFlag(wxTR_HIDE_ROOT) || itemId != GetRootItem(),
-                 _T("can't collapse hidden root") );
+                 wxT("can't collapse hidden root") );
 
     wxGenericTreeItem *item = (wxGenericTreeItem*) itemId.m_pItem;
 
@@ -2536,7 +2536,7 @@ void wxGenericTreeCtrl::DrawDropEffect(w
 
 void wxGenericTreeCtrl::DrawBorder(const wxTreeItemId &item)
 {
-    wxCHECK_RET( item.IsOk(), _T("invalid item in wxGenericTreeCtrl::DrawLine") );
+    wxCHECK_RET( item.IsOk(), wxT("invalid item in wxGenericTreeCtrl::DrawLine") );
 
     wxGenericTreeItem *i = (wxGenericTreeItem*) item.m_pItem;
 
@@ -2553,7 +2553,7 @@ void wxGenericTreeCtrl::DrawBorder(const
 
 void wxGenericTreeCtrl::DrawLine(const wxTreeItemId &item, bool below)
 {
-    wxCHECK_RET( item.IsOk(), _T("invalid item in wxGenericTreeCtrl::DrawLine") );
+    wxCHECK_RET( item.IsOk(), wxT("invalid item in wxGenericTreeCtrl::DrawLine") );
 
     wxGenericTreeItem *i = (wxGenericTreeItem*) item.m_pItem;
 
@@ -2940,7 +2940,7 @@ bool wxGenericTreeCtrl::GetBoundingRect(
                                         wxRect& rect,
                                         bool textOnly) const
 {
-    wxCHECK_MSG( item.IsOk(), false, _T("invalid item in wxGenericTreeCtrl::GetBoundingRect") );
+    wxCHECK_MSG( item.IsOk(), false, wxT("invalid item in wxGenericTreeCtrl::GetBoundingRect") );
 
     wxGenericTreeItem *i = (wxGenericTreeItem*) item.m_pItem;
 
@@ -2974,7 +2974,7 @@ bool wxGenericTreeCtrl::GetBoundingRect(
 wxTextCtrl *wxGenericTreeCtrl::EditLabel(const wxTreeItemId& item,
                                   wxClassInfo * WXUNUSED(textCtrlClass))
 {
-    wxCHECK_MSG( item.IsOk(), NULL, _T("can't edit an invalid item") );
+    wxCHECK_MSG( item.IsOk(), NULL, wxT("can't edit an invalid item") );
 
     wxGenericTreeItem *itemEdit = (wxGenericTreeItem *)item.m_pItem;
 
@@ -3014,7 +3014,7 @@ wxTextCtrl* wxGenericTreeCtrl::GetEditCo
 void wxGenericTreeCtrl::EndEditLabel(const wxTreeItemId& WXUNUSED(item),
                                      bool discardChanges)
 {
-    wxCHECK_RET( m_textCtrl, _T("not editing label") );
+    wxCHECK_RET( m_textCtrl, wxT("not editing label") );
 
     m_textCtrl->EndEdit(discardChanges);
 }
@@ -3562,7 +3562,7 @@ void wxGenericTreeCtrl::Freeze()
 
 void wxGenericTreeCtrl::Thaw()
 {
-    wxCHECK_RET( m_freezeCount > 0, _T("thawing unfrozen tree control?") );
+    wxCHECK_RET( m_freezeCount > 0, wxT("thawing unfrozen tree control?") );
 
     if ( --m_freezeCount == 0 )
     {
--- src/generic/choicbkg.cpp-orig	2009-06-18 17:20:21.795867000 -0500
+++ src/generic/choicbkg.cpp	2009-06-18 17:20:28.498788000 -0500
@@ -179,14 +179,14 @@ wxString wxChoicebook::GetPageText(size_
 
 int wxChoicebook::GetPageImage(size_t WXUNUSED(n)) const
 {
-    wxFAIL_MSG( _T("wxChoicebook::GetPageImage() not implemented") );
+    wxFAIL_MSG( wxT("wxChoicebook::GetPageImage() not implemented") );
 
     return wxNOT_FOUND;
 }
 
 bool wxChoicebook::SetPageImage(size_t WXUNUSED(n), int WXUNUSED(imageId))
 {
-    wxFAIL_MSG( _T("wxChoicebook::SetPageImage() not implemented") );
+    wxFAIL_MSG( wxT("wxChoicebook::SetPageImage() not implemented") );
 
     return false;
 }
--- src/generic/animateg.cpp-orig	2009-06-18 17:20:35.768934000 -0500
+++ src/generic/animateg.cpp	2009-06-18 17:20:41.090769000 -0500
@@ -186,7 +186,7 @@ void wxAnimation::AddHandler( wxAnimatio
         // a good reason to add and remove duplicate handlers (and they
         // may) we should probably refcount the duplicates.
 
-        wxLogDebug( _T("Adding duplicate animation handler for '%d' type"),
+        wxLogDebug( wxT("Adding duplicate animation handler for '%d' type"),
                     handler->GetType() );
         delete handler;
     }
@@ -202,7 +202,7 @@ void wxAnimation::InsertHandler( wxAnima
     else
     {
         // see AddHandler for additional comments.
-        wxLogDebug( _T("Inserting duplicate animation handler for '%d' type"),
+        wxLogDebug( wxT("Inserting duplicate animation handler for '%d' type"),
                     handler->GetType() );
         delete handler;
     }
--- src/generic/selstore.cpp-orig	2009-06-18 17:20:46.454854000 -0500
+++ src/generic/selstore.cpp	2009-06-18 17:20:51.428384000 -0500
@@ -84,7 +84,7 @@ bool wxSelectionStore::SelectRange(size_
     // change state
     static const size_t MANY_ITEMS = 100;
 
-    wxASSERT_MSG( itemFrom <= itemTo, _T("should be in order") );
+    wxASSERT_MSG( itemFrom <= itemTo, wxT("should be in order") );
 
     // are we going to have more [un]selected items than the other ones?
     if ( itemTo - itemFrom > m_count/2 )
@@ -208,7 +208,7 @@ void wxSelectionStore::OnItemDelete(size
     while ( i < count )
     {
         // all following elements must be greater than the one we deleted
-        wxASSERT_MSG( m_itemsSel[i] > item, _T("logic error") );
+        wxASSERT_MSG( m_itemsSel[i] > item, wxT("logic error") );
 
         m_itemsSel[i++]--;
     }
--- src/generic/numdlgg.cpp-orig	2009-06-18 17:20:59.022813000 -0500
+++ src/generic/numdlgg.cpp	2009-06-18 17:21:03.517745000 -0500
@@ -134,7 +134,7 @@ void wxNumberEntryDialog::OnOK(wxCommand
 {
 #if !wxUSE_SPINCTRL
     wxString tmp = m_spinctrl->GetValue();
-    if ( wxSscanf(tmp, _T("%ld"), &m_value) != 1 )
+    if ( wxSscanf(tmp, wxT("%ld"), &m_value) != 1 )
         EndModal(wxID_CANCEL);
     else
 #else
--- src/generic/fontdlgg.cpp-orig	2009-06-18 17:21:09.133301000 -0500
+++ src/generic/fontdlgg.cpp	2009-06-18 17:21:14.979702000 -0500
@@ -190,8 +190,8 @@ void wxGenericFontDialog::OnCloseWindow(
 
 bool wxGenericFontDialog::DoCreate(wxWindow *parent)
 {
-    if ( !wxDialog::Create( parent , wxID_ANY , _T("Choose Font") , wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE,
-        _T("fontdialog") ) )
+    if ( !wxDialog::Create( parent , wxID_ANY , wxT("Choose Font") , wxDefaultPosition, wxDefaultSize, wxDEFAULT_DIALOG_STYLE,
+        wxT("fontdialog") ) )
     {
         wxFAIL_MSG( wxT("wxFontDialog creation failed") );
         return false;
--- src/generic/scrlwing.cpp-orig	2009-06-18 17:21:21.892537000 -0500
+++ src/generic/scrlwing.cpp	2009-06-18 17:21:28.174838000 -0500
@@ -291,7 +291,7 @@ bool wxScrollHelperEvtHandler::ProcessEv
 
 wxScrollHelper::wxScrollHelper(wxWindow *win)
 {
-    wxASSERT_MSG( win, _T("associated window can't be NULL in wxScrollHelper") );
+    wxASSERT_MSG( win, wxT("associated window can't be NULL in wxScrollHelper") );
 
     m_xScrollPixelsPerLine =
     m_yScrollPixelsPerLine =
@@ -1269,7 +1269,7 @@ void wxScrollHelper::HandleOnMouseLeave(
                 // but seems to happen sometimes under wxMSW - maybe it's a bug
                 // there but for now just ignore it
 
-                //wxFAIL_MSG( _T("can't understand where has mouse gone") );
+                //wxFAIL_MSG( wxT("can't understand where has mouse gone") );
 
                 return;
             }
--- src/generic/dbgrptg.cpp-orig	2009-06-18 17:21:40.002980000 -0500
+++ src/generic/dbgrptg.cpp	2009-06-18 17:21:58.671566000 -0500
@@ -312,15 +312,15 @@ wxDebugReportDialog::wxDebugReportDialog
     debugDir = debugDirFilename.GetPath();
 #endif
     msg << _("A debug report has been generated in the directory\n")
-        << _T('\n')
-        << _T("             \"") << debugDir << _T("\"\n")
-        << _T('\n')
+        << wxT('\n')
+        << wxT("             \"") << debugDir << wxT("\"\n")
+        << wxT('\n')
         << _("The report contains the files listed below. If any of these files contain private information,\nplease uncheck them and they will be removed from the report.\n")
-        << _T('\n')
+        << wxT('\n')
         << _("If you wish to suppress this debug report completely, please choose the \"Cancel\" button,\nbut be warned that it may hinder improving the program, so if\nat all possible please do continue with the report generation.\n")
-        << _T('\n')
+        << wxT('\n')
         << _("              Thank you and we're sorry for the inconvenience!\n")
-        << _T("\n\n"); // just some white space to separate from other stuff
+        << wxT("\n\n"); // just some white space to separate from other stuff
 
     const wxSizerFlags flagsFixed(SizerFlags(0));
     const wxSizerFlags flagsExpand(SizerFlags(1));
@@ -333,9 +333,9 @@ wxDebugReportDialog::wxDebugReportDialog
     // ... and the list of files in this debug report with buttons to view them
     wxSizer *sizerFileBtns = new wxBoxSizer(wxVERTICAL);
     sizerFileBtns->AddStretchSpacer(1);
-    sizerFileBtns->Add(new wxButton(this, wxID_VIEW_DETAILS, _T("&View...")),
+    sizerFileBtns->Add(new wxButton(this, wxID_VIEW_DETAILS, wxT("&View...")),
                         wxSizerFlags().Border(wxBOTTOM));
-    sizerFileBtns->Add(new wxButton(this, wxID_OPEN, _T("&Open...")),
+    sizerFileBtns->Add(new wxButton(this, wxID_OPEN, wxT("&Open...")),
                         wxSizerFlags().Border(wxTOP));
     sizerFileBtns->AddStretchSpacer(1);
 
@@ -386,7 +386,7 @@ bool wxDebugReportDialog::TransferDataTo
             desc;
         if ( m_dbgrpt.GetFile(n, &name, &desc) )
         {
-            m_checklst->Append(name + _T(" (") + desc + _T(')'));
+            m_checklst->Append(name + wxT(" (") + desc + wxT(')'));
             m_checklst->Check(n);
 
             m_files.Add(name);
@@ -413,7 +413,7 @@ bool wxDebugReportDialog::TransferDataFr
     if ( !notes.empty() )
     {
         // for now filename fixed, could make it configurable in the future...
-        m_dbgrpt.AddText(_T("notes.txt"), notes, _T("user notes"));
+        m_dbgrpt.AddText(wxT("notes.txt"), notes, wxT("user notes"));
     }
 
     return true;
@@ -426,7 +426,7 @@ bool wxDebugReportDialog::TransferDataFr
 void wxDebugReportDialog::OnView(wxCommandEvent& )
 {
     const int sel = m_checklst->GetSelection();
-    wxCHECK_RET( sel != wxNOT_FOUND, _T("invalid selection in OnView()") );
+    wxCHECK_RET( sel != wxNOT_FOUND, wxT("invalid selection in OnView()") );
 
     wxFileName fn(m_dbgrpt.GetDirectory(), m_files[sel]);
     wxString str;
@@ -442,7 +442,7 @@ void wxDebugReportDialog::OnView(wxComma
 void wxDebugReportDialog::OnOpen(wxCommandEvent& )
 {
     const int sel = m_checklst->GetSelection();
-    wxCHECK_RET( sel != wxNOT_FOUND, _T("invalid selection in OnOpen()") );
+    wxCHECK_RET( sel != wxNOT_FOUND, wxT("invalid selection in OnOpen()") );
 
     wxFileName fn(m_dbgrpt.GetDirectory(), m_files[sel]);
 
@@ -471,7 +471,7 @@ void wxDebugReportDialog::OnOpen(wxComma
             if ( !cmd.empty() )
             {
 #if wxUSE_MIMETYPE
-                if ( cmd.find(_T('%')) != wxString::npos )
+                if ( cmd.find(wxT('%')) != wxString::npos )
                 {
                     command = wxFileType::ExpandCommand(cmd, fn.GetFullPath());
                 }
@@ -479,7 +479,7 @@ void wxDebugReportDialog::OnOpen(wxComma
 #endif // wxUSE_MIMETYPE
                 {
                     // append the file name to the end
-                    command << cmd << _T(" \"") << fn.GetFullPath() << _T('"');
+                    command << cmd << wxT(" \"") << fn.GetFullPath() << wxT('"');
                 }
             }
         }
--- src/generic/splitter.cpp-orig	2009-06-18 17:22:04.855497000 -0500
+++ src/generic/splitter.cpp	2009-06-18 17:22:13.491642000 -0500
@@ -463,7 +463,7 @@ void wxSplitterWindow::OnSize(wxSizeEven
 void wxSplitterWindow::SetSashGravity(double gravity)
 {
     wxCHECK_RET( gravity >= 0. && gravity <= 1.,
-                    _T("invalid gravity value") );
+                    wxT("invalid gravity value") );
 
     m_sashGravity = gravity;
 }
@@ -730,7 +730,7 @@ void wxSplitterWindow::SizeWindows()
 void wxSplitterWindow::Initialize(wxWindow *window)
 {
     wxASSERT_MSG( (!window || (window && window->GetParent() == this)),
-                  _T("windows in the splitter should have it as parent!") );
+                  wxT("windows in the splitter should have it as parent!") );
 
     if (window && !window->IsShown())
         window->Show();
@@ -751,10 +751,10 @@ bool wxSplitterWindow::DoSplit(wxSplitMo
         return false;
 
     wxCHECK_MSG( window1 && window2, false,
-                 _T("can not split with NULL window(s)") );
+                 wxT("can not split with NULL window(s)") );
 
     wxCHECK_MSG( window1->GetParent() == this && window2->GetParent() == this, false,
-                  _T("windows in the splitter should have it as parent!") );
+                  wxT("windows in the splitter should have it as parent!") );
 
     if (! window1->IsShown())
         window1->Show();
--- src/generic/wizard.cpp-orig	2009-06-18 17:22:19.559418000 -0500
+++ src/generic/wizard.cpp	2009-06-18 17:22:28.941674000 -0500
@@ -245,10 +245,10 @@ wxSize wxWizardSizer::GetMaxChildSize()
 #ifdef __WXDEBUG__
     if ( m_childSize.IsFullySpecified() && m_childSize != maxOfMin )
     {
-        wxFAIL_MSG( _T("Size changed in wxWizard::GetPageAreaSizer()")
-                    _T("after RunWizard().\n")
-                    _T("Did you forget to call GetSizer()->Fit(this) ")
-                    _T("for some page?")) ;
+        wxFAIL_MSG( wxT("Size changed in wxWizard::GetPageAreaSizer()")
+                    wxT("after RunWizard().\n")
+                    wxT("Did you forget to call GetSizer()->Fit(this) ")
+                    wxT("for some page?")) ;
 
         return m_childSize;
     }
@@ -391,8 +391,8 @@ void wxWizard::AddStaticLine(wxBoxSizer 
 void wxWizard::AddBackNextPair(wxBoxSizer *buttonRow)
 {
     wxASSERT_MSG( m_btnNext && m_btnPrev,
-                  _T("You must create the buttons before calling ")
-                  _T("wxWizard::AddBackNextPair") );
+                  wxT("You must create the buttons before calling ")
+                  wxT("wxWizard::AddBackNextPair") );
 
     // margin between Back and Next buttons
 #ifdef __WXMAC__
@@ -781,7 +781,7 @@ void wxWizard::OnBackOrNext(wxCommandEve
                   (event.GetEventObject() == m_btnPrev),
                   wxT("unknown button") );
 
-    wxCHECK_RET( m_page, _T("should have a valid current page") );
+    wxCHECK_RET( m_page, wxT("should have a valid current page") );
 
     // ask the current page first: notice that we do it before calling
     // GetNext/Prev() because the data transfered from the controls of the page
--- src/generic/treebkg.cpp-orig	2009-06-18 17:22:34.542015000 -0500
+++ src/generic/treebkg.cpp	2009-06-18 17:22:39.129309000 -0500
@@ -231,7 +231,7 @@ bool wxTreebook::DoAddSubPage(wxWindow *
     wxTreeItemId lastNodeId = tree->GetLastChild(rootId);
 
     wxCHECK_MSG( lastNodeId.IsOk(), false,
-                        _T("Can't insert sub page when there are no pages") );
+                        wxT("Can't insert sub page when there are no pages") );
 
     // now calculate its position (should we save/update it too?)
     size_t newPos = tree->GetCount() -
--- src/generic/datectlg.cpp-orig	2009-06-18 17:22:46.039241000 -0500
+++ src/generic/datectlg.cpp	2009-06-18 17:22:54.940194000 -0500
@@ -163,7 +163,7 @@ public:
         else // invalid date
         {
             wxASSERT_MSG( HasDPFlag(wxDP_ALLOWNONE),
-                            _T("this control must have a valid date") );
+                            wxT("this control must have a valid date") );
 
             m_combo->SetText(wxEmptyString);
         }
@@ -301,7 +301,7 @@ private:
         if ( m_combo )
         {
             wxArrayString allowedChars;
-            for ( wxChar c = _T('0'); c <= _T('9'); c++ )
+            for ( wxChar c = wxT('0'); c <= wxT('9'); c++ )
                 allowedChars.Add(wxString(c, 1));
 
             const wxChar *p2 = m_format.c_str();
@@ -396,7 +396,7 @@ bool wxDatePickerCtrlGeneric::Create(wxW
                                      const wxString& name)
 {
     wxASSERT_MSG( !(style & wxDP_SPIN),
-                  _T("wxDP_SPIN style not supported, use wxDP_DEFAULT") );
+                  wxT("wxDP_SPIN style not supported, use wxDP_DEFAULT") );
 
     if ( !wxControl::Create(parent, id, pos, size,
                             style | wxCLIP_CHILDREN | wxWANTS_CHARS | wxBORDER_NONE,
--- src/generic/buttonbar.cpp-orig	2009-06-18 17:23:00.549836000 -0500
+++ src/generic/buttonbar.cpp	2009-06-18 17:23:07.108505000 -0500
@@ -205,7 +205,7 @@ void wxButtonToolBar::GetRectLimits(cons
                               wxCoord *start,
                               wxCoord *end) const
 {
-    wxCHECK_RET( start && end, _T("NULL pointer in GetRectLimits") );
+    wxCHECK_RET( start && end, wxT("NULL pointer in GetRectLimits") );
 
     if ( IsVertical() )
     {
@@ -224,7 +224,7 @@ void wxButtonToolBar::SetToolShortHelp(i
 {
     wxToolBarToolBase *tool = FindById(id);
 
-    wxCHECK_RET( tool, _T("SetToolShortHelp: no such tool") );
+    wxCHECK_RET( tool, wxT("SetToolShortHelp: no such tool") );
 
     // TODO: set tooltip/short help
     tool->SetShortHelp(help);
@@ -286,7 +286,7 @@ wxRect wxButtonToolBar::GetToolRect(wxTo
 
     wxRect rect;
 
-    wxCHECK_MSG( tool, rect, _T("GetToolRect: NULL tool") );
+    wxCHECK_MSG( tool, rect, wxT("GetToolRect: NULL tool") );
 
     // ensure that we always have the valid tool position
     if ( m_needsLayout )
--- src/generic/datavgen.cpp-orig	2009-06-18 17:23:14.308417000 -0500
+++ src/generic/datavgen.cpp	2009-06-18 17:23:25.126417000 -0500
@@ -859,7 +859,7 @@ void wxDataViewTextCtrlWrapper::OnKeyUp(
     wxPoint myPos = m_text->GetPosition();
     wxSize mySize = m_text->GetSize();
     int sx, sy;
-    m_text->GetTextExtent(m_text->GetValue() + _T("MM"), &sx, &sy);
+    m_text->GetTextExtent(m_text->GetValue() + wxT("MM"), &sx, &sy);
     if (myPos.x + sx > parentSize.x)
         sx = parentSize.x - myPos.x;
     if (mySize.x > sx)
@@ -1393,7 +1393,7 @@ void wxDataViewMainWindow::RefreshRowsAf
 void wxDataViewMainWindow::OnArrowChar(unsigned int newCurrent, const wxKeyEvent& event)
 {
     wxCHECK_RET( newCurrent < GetRowCount(),
-                 _T("invalid item index in OnArrowChar()") );
+                 wxT("invalid item index in OnArrowChar()") );
 
     // if there is no selection, we cannot move it anywhere
     if (!HasCurrentRow())
@@ -1459,7 +1459,7 @@ void wxDataViewMainWindow::OnChar( wxKey
 
     // don't use m_linesPerPage directly as it might not be computed yet
     const int pageSize = GetCountPerPage();
-    wxCHECK_RET( pageSize, _T("should have non zero page size") );
+    wxCHECK_RET( pageSize, wxT("should have non zero page size") );
 
     switch ( event.GetKeyCode() )
     {
@@ -1719,7 +1719,7 @@ void wxDataViewMainWindow::OnMouse( wxMo
             else // !ctrl, !shift
             {
                 // test in the enclosing if should make it impossible
-                wxFAIL_MSG( _T("how did we get here?") );
+                wxFAIL_MSG( wxT("how did we get here?") );
             }
         }
 
--- src/generic/listbkg.cpp-orig	2009-06-18 17:23:31.180227000 -0500
+++ src/generic/listbkg.cpp	2009-06-18 17:23:37.375025000 -0500
@@ -236,7 +236,7 @@ wxString wxListbook::GetPageText(size_t 
 
 int wxListbook::GetPageImage(size_t WXUNUSED(n)) const
 {
-    wxFAIL_MSG( _T("wxListbook::GetPageImage() not implemented") );
+    wxFAIL_MSG( wxT("wxListbook::GetPageImage() not implemented") );
 
     return wxNOT_FOUND;
 }
--- src/generic/gridctrl.cpp-orig	2009-06-18 17:23:43.379063000 -0500
+++ src/generic/gridctrl.cpp	2009-06-18 17:23:51.578433000 -0500
@@ -151,7 +151,7 @@ wxString wxGridCellEnumRenderer::GetStri
     if ( table->CanGetValueAs(row, col, wxGRID_VALUE_NUMBER) )
     {
         int choiceno = table->GetValueAsLong(row, col);
-        text.Printf(_T("%s"), m_choices[ choiceno ].c_str() );
+        text.Printf(wxT("%s"), m_choices[ choiceno ].c_str() );
     }
     else
     {
@@ -203,7 +203,7 @@ void wxGridCellEnumRenderer::SetParamete
 
     m_choices.Empty();
 
-    wxStringTokenizer tk(params, _T(','));
+    wxStringTokenizer tk(params, wxT(','));
     while ( tk.HasMoreTokens() )
     {
         m_choices.Add(tk.GetNextToken());
@@ -342,7 +342,7 @@ wxGridCellAutoWrapStringRenderer::GetTex
     wxCoord max_x = rect.GetWidth();
 
     dc.SetFont(attr.GetFont());
-    wxStringTokenizer tk(data , _T(" \n\t\r"));
+    wxStringTokenizer tk(data , wxT(" \n\t\r"));
     wxString thisline = wxEmptyString;
 
     while ( tk.HasMoreTokens() )
@@ -352,7 +352,7 @@ wxGridCellAutoWrapStringRenderer::GetTex
         //       space at the end of the line. But it
         //       is invisible , simplifies the size calculation
         //       and ensures tokens are separated in the display
-        tok += _T(" ");
+        tok += wxT(" ");
 
         dc.GetTextExtent(tok, &x, &y);
         if ( curr_x + x > max_x)
--- src/generic/fdrepdlg.cpp-orig	2009-06-18 17:24:01.914949000 -0500
+++ src/generic/fdrepdlg.cpp	2009-06-18 17:24:09.017102000 -0500
@@ -98,7 +98,7 @@ bool wxGenericFindReplaceDialog::Create(
     SetData(data);
 
     wxCHECK_MSG( m_FindReplaceData, false,
-                 _T("can't create dialog without data") );
+                 wxT("can't create dialog without data") );
 
     bool isPda = (wxSystemSettings::GetScreenType() <= wxSYS_SCREEN_PDA);
 
--- src/mac/carbon/window.cpp-orig	2009-06-21 16:34:37.308533000 -0500
+++ src/mac/carbon/window.cpp	2009-06-21 16:34:49.283624000 -0500
@@ -352,7 +352,7 @@ static pascal OSStatus wxMacWindowContro
                             thisWindow->GetCaret()->OnKillFocus();
 #endif
 
-                        wxLogTrace(_T("Focus"), _T("focus lost(%p)"), wx_static_cast(void*, thisWindow));
+                        wxLogTrace(wxT("Focus"), wxT("focus lost(%p)"), wx_static_cast(void*, thisWindow));
 
                         // remove this as soon as posting the synthesized event works properly
                         static bool inKillFocusEvent = false ;
@@ -373,7 +373,7 @@ static pascal OSStatus wxMacWindowContro
                     {
                         // set focus
                         // panel wants to track the window which was the last to have focus in it
-                        wxLogTrace(_T("Focus"), _T("focus set(%p)"), wx_static_cast(void*, thisWindow));
+                        wxLogTrace(wxT("Focus"), wxT("focus set(%p)"), wx_static_cast(void*, thisWindow));
                         wxChildFocusEvent eventFocus((wxWindow*)thisWindow);
                         thisWindow->GetEventHandler()->ProcessEvent(eventFocus);
 
@@ -446,7 +446,7 @@ static pascal OSStatus wxMacWindowContro
                             thisWindow->GetCaret()->OnKillFocus();
 #endif
 
-                        wxLogTrace(_T("Focus"), _T("focus lost(%p)"), wx_static_cast(void*, thisWindow));
+                        wxLogTrace(wxT("Focus"), wxT("focus lost(%p)"), wx_static_cast(void*, thisWindow));
 
                         static bool inKillFocusEvent = false ;
 
@@ -462,7 +462,7 @@ static pascal OSStatus wxMacWindowContro
                     else
                     {
                         // panel wants to track the window which was the last to have focus in it
-                        wxLogTrace(_T("Focus"), _T("focus set(%p)"), wx_static_cast(void*, thisWindow));
+                        wxLogTrace(wxT("Focus"), wxT("focus set(%p)"), wx_static_cast(void*, thisWindow));
                         wxChildFocusEvent eventFocus((wxWindow*)thisWindow);
                         thisWindow->GetEventHandler()->ProcessEvent(eventFocus);
 
@@ -1278,7 +1278,7 @@ void wxWindowMac::DoSetWindowVariant( wx
             break ;
 
         default:
-            wxFAIL_MSG(_T("unexpected window variant"));
+            wxFAIL_MSG(wxT("unexpected window variant"));
             break ;
     }
 
@@ -1396,10 +1396,10 @@ void wxWindowMac::SetFocus()
     // as we cannot rely on the control features to find out whether we are in full keyboard mode,
     // we can only leave in case of an error
 
-    wxLogTrace(_T("Focus"), _T("SetFocus(%p)"), wx_static_cast(void*, this));
+    wxLogTrace(wxT("Focus"), wxT("SetFocus(%p)"), wx_static_cast(void*, this));
 
     OSStatus err = m_peer->SetFocus( kControlFocusNextPart ) ;
-    wxLogTrace(_T("Focus"), _T("m_peer->SetFocus received %d"), err);
+    wxLogTrace(wxT("Focus"), wxT("m_peer->SetFocus received %d"), err);
 
     if ( err == errCouldntSetFocus )
         return ;
@@ -2897,7 +2897,7 @@ wxWindow *wxWindowBase::DoFindFocus()
 {
     ControlRef control ;
     GetKeyboardFocus( GetUserFocusWindow() , &control ) ;
-    wxLogTrace(_T("Focus"), _T("FindFocus(windowref=%p, peer =%p, wxwindow = %p)"),
+    wxLogTrace(wxT("Focus"), wxT("FindFocus(windowref=%p, peer =%p, wxwindow = %p)"),
                 wx_static_cast(void*, GetUserFocusWindow()), wx_static_cast(void*, control)
                , wx_static_cast(void*, wxFindControlFromMacControl( control )));
     return (wxWindow*)wxFindControlFromMacControl( control ) ;
--- src/mac/carbon/imaglist.cpp-orig	2009-06-21 16:34:56.599442000 -0500
+++ src/mac/carbon/imaglist.cpp	2009-06-21 16:35:02.936980000 -0500
@@ -58,8 +58,8 @@ int wxImageList::Add( const wxIcon &bitm
 {
     wxASSERT_MSG( (bitmap.GetWidth() == m_width && bitmap.GetHeight() == m_height)
                   || (m_width == 0 && m_height == 0),
-                  _T("invalid bitmap size in wxImageList: this might work ")
-                  _T("on this platform but definitely won't under Windows.") );
+                  wxT("invalid bitmap size in wxImageList: this might work ")
+                  wxT("on this platform but definitely won't under Windows.") );
 
     m_images.Append( new wxIcon( bitmap ) );
 
@@ -76,8 +76,8 @@ int wxImageList::Add( const wxBitmap &bi
 {
     wxASSERT_MSG( (bitmap.GetWidth() >= m_width && bitmap.GetHeight() == m_height)
                   || (m_width == 0 && m_height == 0),
-                  _T("invalid bitmap size in wxImageList: this might work ")
-                  _T("on this platform but definitely won't under Windows.") );
+                  wxT("invalid bitmap size in wxImageList: this might work ")
+                  wxT("on this platform but definitely won't under Windows.") );
 
     // Mimic behavior of Windows ImageList_Add that automatically breaks up the added
     // bitmap into sub-images of the correct size
--- src/mac/carbon/spinctrl.cpp-orig	2009-06-21 16:35:10.351069000 -0500
+++ src/mac/carbon/spinctrl.cpp	2009-06-21 16:35:17.529923000 -0500
@@ -373,9 +373,9 @@ int wxSpinCtrl::GetMax() const
 
 void wxSpinCtrl::SetTextValue(int val)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetTextValue") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetTextValue") );
 
-    m_text->SetValue(wxString::Format(_T("%d"), val));
+    m_text->SetValue(wxString::Format(wxT("%d"), val));
 
     // select all text
     m_text->SetSelection(0, -1);
@@ -386,7 +386,7 @@ void wxSpinCtrl::SetTextValue(int val)
 
 void wxSpinCtrl::SetValue(int val)
 {
-    wxCHECK_RET( m_btn, _T("invalid call to wxSpinCtrl::SetValue") );
+    wxCHECK_RET( m_btn, wxT("invalid call to wxSpinCtrl::SetValue") );
 
     SetTextValue(val);
 
@@ -396,7 +396,7 @@ void wxSpinCtrl::SetValue(int val)
 
 void wxSpinCtrl::SetValue(const wxString& text)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetValue") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetValue") );
 
     long val;
     if ( text.ToLong(&val) && ((val > INT_MIN) && (val < INT_MAX)) )
@@ -412,7 +412,7 @@ void wxSpinCtrl::SetValue(const wxString
 
 void wxSpinCtrl::SetRange(int min, int max)
 {
-    wxCHECK_RET( m_btn, _T("invalid call to wxSpinCtrl::SetRange") );
+    wxCHECK_RET( m_btn, wxT("invalid call to wxSpinCtrl::SetRange") );
 
     m_btn->SetRange(min, max);
 }
--- src/mac/carbon/dcclient.cpp-orig	2009-06-21 16:35:22.789064000 -0500
+++ src/mac/carbon/dcclient.cpp	2009-06-21 16:35:29.523590000 -0500
@@ -187,7 +187,7 @@ void wxWindowDC::DoGetSize( int* width, 
     if ( height )
         *height = m_height;
 #else
-    wxCHECK_RET( m_window, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_window, wxT("GetSize() doesn't work without window") );
     m_window->GetSize(width, height);
 #endif
 }
@@ -248,7 +248,7 @@ wxClientDC::wxClientDC()
 wxClientDC::wxClientDC(wxWindow *window) :
     wxWindowDC( window )
 {
-    wxCHECK_RET( window, _T("invalid window in wxClientDC") );
+    wxCHECK_RET( window, wxT("invalid window in wxClientDC") );
     wxPoint origin = window->GetClientAreaOrigin() ;
     m_window->GetClientSize( &m_width , &m_height);
     if ( !m_window->IsShownOnScreen() )
@@ -259,7 +259,7 @@ wxClientDC::wxClientDC(wxWindow *window)
 #else
 wxClientDC::wxClientDC(wxWindow *window)
 {
-    wxCHECK_RET( window, _T("invalid window in wxClientDC") );
+    wxCHECK_RET( window, wxT("invalid window in wxClientDC") );
     m_window = window ;
     wxTopLevelWindowMac* rootwindow = window->MacGetTopLevelWindow() ;
     if (!rootwindow)
@@ -295,7 +295,7 @@ wxClientDC::~wxClientDC()
 #if !wxMAC_USE_CORE_GRAPHICS
 void wxClientDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_window, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_window, wxT("GetSize() doesn't work without window") );
 
     m_window->GetClientSize( width, height );
 }
@@ -372,7 +372,7 @@ wxPaintDC::~wxPaintDC()
 #if !wxMAC_USE_CORE_GRAPHICS
 void wxPaintDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_window, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_window, wxT("GetSize() doesn't work without window") );
 
     m_window->GetClientSize( width, height );
 }
--- src/mac/carbon/textctrl.cpp-orig	2009-06-21 16:35:34.742506000 -0500
+++ src/mac/carbon/textctrl.cpp	2009-06-21 16:35:41.326997000 -0500
@@ -1633,11 +1633,11 @@ wxString wxMacMLTEControl::GetStringValu
                 (((UniChar*)*theText)[actualSize]) = 0 ;
                 wxMBConvUTF16 converter ;
                 size_t noChars = converter.MB2WC( NULL , (const char*)*theText , 0 ) ;
-                wxASSERT_MSG( noChars != wxCONV_FAILED, _T("Unable to count the number of characters in this string!") );
+                wxASSERT_MSG( noChars != wxCONV_FAILED, wxT("Unable to count the number of characters in this string!") );
                 ptr = new wxChar[noChars + 1] ;
 
                 noChars = converter.MB2WC( ptr , (const char*)*theText , noChars + 1 ) ;
-                wxASSERT_MSG( noChars != wxCONV_FAILED, _T("Conversion of string failed!") );
+                wxASSERT_MSG( noChars != wxCONV_FAILED, wxT("Conversion of string failed!") );
                 ptr[noChars] = 0 ;
                 HUnlock( theText ) ;
 #endif
@@ -2241,7 +2241,7 @@ void wxMacMLTEControl::ShowPosition( lon
 
     // there will be an error returned for classic MLTE implementation when the control is
     // invisible, but HITextView works correctly, so we don't assert that one
-    // wxASSERT_MSG( theErr == noErr, _T("TXNScroll returned an error!") );
+    // wxASSERT_MSG( theErr == noErr, wxT("TXNScroll returned an error!") );
 }
 
 void wxMacMLTEControl::SetTXNData( const wxString& st, TXNOffset start, TXNOffset end )
@@ -2254,7 +2254,7 @@ void wxMacMLTEControl::SetTXNData( const
     wxMBConvUTF16 converter ;
     ByteCount byteBufferLen = converter.WC2MB( NULL, st.wc_str(), 0 ) ;
     wxASSERT_MSG( byteBufferLen != wxCONV_FAILED,
-                  _T("Conversion to UTF-16 unexpectedly failed") );
+                  wxT("Conversion to UTF-16 unexpectedly failed") );
     UniChar *unibuf = (UniChar*)malloc( byteBufferLen + 2 ) ; // 2 for NUL in UTF-16
     converter.WC2MB( (char*)unibuf, st.wc_str(), byteBufferLen + 2 ) ;
     TXNSetData( m_txn, kTXNUnicodeTextData, (void*)unibuf, byteBufferLen, start, end ) ;
--- src/mac/carbon/menu.cpp-orig	2009-06-21 16:35:45.810277000 -0500
+++ src/mac/carbon/menu.cpp	2009-06-21 16:35:51.018204000 -0500
@@ -279,7 +279,7 @@ void wxMenu::EndRadioGroup()
 
 wxMenuItem* wxMenu::DoAppend(wxMenuItem *item)
 {
-    wxCHECK_MSG( item, NULL, _T("NULL item in wxMenu::DoAppend") );
+    wxCHECK_MSG( item, NULL, wxT("NULL item in wxMenu::DoAppend") );
 
     bool check = false;
 
@@ -311,7 +311,7 @@ wxMenuItem* wxMenu::DoAppend(wxMenuItem 
             }
             else
             {
-                wxFAIL_MSG( _T("where is the radio group start item?") );
+                wxFAIL_MSG( wxT("where is the radio group start item?") );
             }
         }
     }
@@ -493,7 +493,7 @@ void wxMenu::MacBeforeDisplay( bool isSu
                 {
                     // next (i.e. second as we must be first) item is
                     // the separator to hide
-                    wxASSERT_MSG( pos == 0, _T("should be the menu start") );
+                    wxASSERT_MSG( pos == 0, wxT("should be the menu start") );
                     posSeptoHide = 2;
                 }
                 else if ( GetMenuItems().GetCount() == pos + 1 &&
--- src/mac/carbon/region.cpp-orig	2009-06-21 16:35:55.540116000 -0500
+++ src/mac/carbon/region.cpp	2009-06-21 16:36:00.943971000 -0500
@@ -147,7 +147,7 @@ void wxRegion::Clear()
 // Move the region
 bool wxRegion::DoOffset(wxCoord x, wxCoord y)
 {
-    wxCHECK_MSG( M_REGION, false, _T("invalid wxRegion") );
+    wxCHECK_MSG( M_REGION, false, wxT("invalid wxRegion") );
 
     if ( !x && !y )
         // nothing to do
@@ -162,7 +162,7 @@ bool wxRegion::DoOffset(wxCoord x, wxCoo
 //! Union /e region with this.
 bool wxRegion::DoCombine(const wxRegion& region, wxRegionOp op)
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid wxRegion") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid wxRegion") );
 
     // Don't change shared data
     if (!m_refData)
@@ -209,7 +209,7 @@ bool wxRegion::DoCombine(const wxRegion&
 
 bool wxRegion::DoIsEqual(const wxRegion& region) const
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 
     return false;
 }
--- src/mac/carbon/thread.cpp-orig	2009-06-21 16:36:05.315490000 -0500
+++ src/mac/carbon/thread.cpp	2009-06-21 16:36:09.332483000 -0500
@@ -1342,7 +1342,7 @@ wxThreadError wxThread::Run()
 wxThreadError wxThread::Pause()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't pause itself") );
+                 wxT("a thread can't pause itself") );
 
     wxCriticalSectionLocker lock(m_critsect);
 
--- src/mac/carbon/dirmac.cpp-orig	2009-06-21 16:36:13.824037000 -0500
+++ src/mac/carbon/dirmac.cpp	2009-06-21 16:36:21.013410000 -0500
@@ -77,7 +77,7 @@ wxDirData::wxDirData(const wxString& dir
 {
     // throw away the trailing slashes
     size_t n = m_dirname.length();
-    wxCHECK_RET( n, _T("empty dir name in wxDir") );
+    wxCHECK_RET( n, wxT("empty dir name in wxDir") );
 
     while ( n > 0 && wxIsPathSeparator(m_dirname[--n]) )
         ;
@@ -234,7 +234,7 @@ wxString wxDir::GetName() const
     if ( m_data )
     {
         name = m_data->GetName();
-        if ( !name.empty() && (name.Last() == _T('/')) )
+        if ( !name.empty() && (name.Last() == wxT('/')) )
         {
             // chop off the last (back)slash
             name.Truncate(name.length() - 1);
@@ -258,7 +258,7 @@ bool wxDir::GetFirst(wxString *filename,
                      const wxString& filespec,
                      int flags) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
     m_data->Rewind();
 
@@ -270,9 +270,9 @@ bool wxDir::GetFirst(wxString *filename,
 
 bool wxDir::GetNext(wxString *filename) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
-    wxCHECK_MSG( filename, false, _T("bad pointer in wxDir::GetNext()") );
+    wxCHECK_MSG( filename, false, wxT("bad pointer in wxDir::GetNext()") );
 
     return m_data->Read(filename);
 }
--- src/mac/carbon/cfsocket.cpp-orig	2009-06-21 16:36:26.366815000 -0500
+++ src/mac/carbon/cfsocket.cpp	2009-06-21 16:36:30.704959000 -0500
@@ -75,7 +75,7 @@ WX_CHECK_BUILD_OPTIONS("wxNet")
     #define PROCESS_EVENTS() wxYield()
 #endif // wxUSE_THREADS/!wxUSE_THREADS
 
-#define wxTRACE_Socket _T("wxSocket")
+#define wxTRACE_Socket wxT("wxSocket")
 
 
 IMPLEMENT_CLASS(wxSocketBase, wxObject)
--- src/mac/carbon/app.cpp-orig	2009-06-21 16:36:34.726679000 -0500
+++ src/mac/carbon/app.cpp	2009-06-21 16:36:37.981764000 -0500
@@ -795,7 +795,7 @@ bool wxApp::Initialize(int& argc, wxChar
     // application (otherwise applications would need to handle it)
     if ( argc > 1 )
     {
-        static const wxChar *ARG_PSN = _T("-psn_");
+        static const wxChar *ARG_PSN = wxT("-psn_");
         if ( wxStrncmp(argv[1], ARG_PSN, wxStrlen(ARG_PSN)) == 0 )
         {
             // remove this argument
--- src/mac/carbon/mpthread.cpp-orig	2009-06-21 16:36:43.076987000 -0500
+++ src/mac/carbon/mpthread.cpp	2009-06-21 16:36:54.330356000 -0500
@@ -875,7 +875,7 @@ bool wxThreadInternal::Create(wxThread *
 {
     wxMacMPThreadsInitVerify() ;
     wxASSERT_MSG( m_state == STATE_NEW && !m_tid,
-                    _T("Create()ing thread twice?") );
+                    wxT("Create()ing thread twice?") );
 
 	OSStatus err = noErr ;
 	m_thread = thread;
@@ -946,7 +946,7 @@ wxThreadError wxThreadInternal::Run()
 
 void wxThreadInternal::Wait()
 {
-   wxCHECK_RET( !m_isDetached, _T("can't wait for a detached thread") );
+   wxCHECK_RET( !m_isDetached, wxT("can't wait for a detached thread") );
 
     // if the thread we're waiting for is waiting for the GUI mutex, we will
     // deadlock so make sure we release it temporarily
@@ -1088,7 +1088,7 @@ wxThread::~wxThread()
     if ( m_internal->GetState() != STATE_EXITED &&
          m_internal->GetState() != STATE_NEW )
     {
-        wxLogDebug(_T("The thread %ld is being destroyed although it is still running! The application may crash."), GetId());
+        wxLogDebug(wxT("The thread %ld is being destroyed although it is still running! The application may crash."), GetId());
     }
 
     m_critsect.Leave();
@@ -1132,7 +1132,7 @@ wxThreadError wxThread::Run()
 wxThreadError wxThread::Pause()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't pause itself") );
+                 wxT("a thread can't pause itself") );
 
     wxCriticalSectionLocker lock(m_critsect);
 
@@ -1153,7 +1153,7 @@ wxThreadError wxThread::Pause()
 wxThreadError wxThread::Resume()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't resume itself") );
+                 wxT("a thread can't resume itself") );
 
     wxCriticalSectionLocker lock(m_critsect);
 
@@ -1168,7 +1168,7 @@ wxThreadError wxThread::Resume()
             return wxTHREAD_NO_ERROR;
 
         default:
-            wxLogDebug(_T("Attempt to resume a thread which is not paused."));
+            wxLogDebug(wxT("Attempt to resume a thread which is not paused."));
 
             return wxTHREAD_MISC_ERROR;
     }
@@ -1181,10 +1181,10 @@ wxThreadError wxThread::Resume()
 wxThread::ExitCode wxThread::Wait()
 {
     wxCHECK_MSG( This() != this, (ExitCode)-1,
-                 _T("a thread can't wait for itself") );
+                 wxT("a thread can't wait for itself") );
 
     wxCHECK_MSG( !m_isDetached, (ExitCode)-1,
-                 _T("can't wait for detached thread") );
+                 wxT("can't wait for detached thread") );
 
     m_internal->Wait();
 
@@ -1194,7 +1194,7 @@ wxThread::ExitCode wxThread::Wait()
 wxThreadError wxThread::Delete(ExitCode *rc)
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't delete itself") );
+                 wxT("a thread can't delete itself") );
 
     bool isDetached = m_isDetached;
 
@@ -1247,7 +1247,7 @@ wxThreadError wxThread::Delete(ExitCode 
 wxThreadError wxThread::Kill()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't kill itself") );
+                 wxT("a thread can't kill itself") );
 
     switch ( m_internal->GetState() )
     {
@@ -1287,7 +1287,7 @@ wxThreadError wxThread::Kill()
 void wxThread::Exit(ExitCode status)
 {
     wxASSERT_MSG( This() == this,
-                  _T("wxThread::Exit() can only be called in the context of the same thread") );
+                  wxT("wxThread::Exit() can only be called in the context of the same thread") );
 
     // don't enter m_critsect before calling OnExit() because the user code
     // might deadlock if, for example, it signals a condition in OnExit() (a
@@ -1313,7 +1313,7 @@ void wxThread::Exit(ExitCode status)
 bool wxThread::TestDestroy()
 {
     wxASSERT_MSG( This() == this,
-                  _T("wxThread::TestDestroy() can only be called in the context of the same thread") );
+                  wxT("wxThread::TestDestroy() can only be called in the context of the same thread") );
 
     m_critsect.Enter();
 
--- src/mac/carbon/listctrl_mac.cpp-orig	2009-06-21 16:37:00.701556000 -0500
+++ src/mac/carbon/listctrl_mac.cpp	2009-06-21 16:37:11.789433000 -0500
@@ -485,7 +485,7 @@ void wxListCtrlTextCtrlWrapper::OnKeyUp(
     wxPoint myPos = m_text->GetPosition();
     wxSize mySize = m_text->GetSize();
     int sx, sy;
-    m_text->GetTextExtent(m_text->GetValue() + _T("MM"), &sx, &sy);
+    m_text->GetTextExtent(m_text->GetValue() + wxT("MM"), &sx, &sy);
     if (myPos.x + sx > parentSize.x)
         sx = parentSize.x - myPos.x;
     if (mySize.x > sx)
@@ -928,7 +928,7 @@ bool wxListCtrl::GetColumn(int col, wxLi
     if (m_dbImpl)
     {
         wxColumnList::compatibility_iterator node = m_colsInfo.Item( col );
-        wxASSERT_MSG( node, _T("invalid column index in wxMacListCtrlItem") );
+        wxASSERT_MSG( node, wxT("invalid column index in wxMacListCtrlItem") );
         wxListItem* column = node->GetData();
 
         long mask = column->GetMask();
@@ -1391,7 +1391,7 @@ bool wxListCtrl::SetItemData(long item, 
 wxRect wxListCtrl::GetViewRect() const
 {
     wxASSERT_MSG( !HasFlag(wxLC_REPORT | wxLC_LIST),
-                    _T("wxListCtrl::GetViewRect() only works in icon mode") );
+                    wxT("wxListCtrl::GetViewRect() only works in icon mode") );
 
     if (m_genericImpl)
         return m_genericImpl->GetViewRect();
@@ -2052,7 +2052,7 @@ int wxListCtrl::GetScrollPos(int orient)
 // -1 otherwise.
 long wxListCtrl::InsertItem(wxListItem& info)
 {
-    wxASSERT_MSG( !IsVirtual(), _T("can't be used with virtual controls") );
+    wxASSERT_MSG( !IsVirtual(), wxT("can't be used with virtual controls") );
 
     if (m_genericImpl)
         return m_genericImpl->InsertItem(info);
@@ -2262,7 +2262,7 @@ wxString wxListCtrl::OnGetItemText(long 
 {
     // this is a pure virtual function, in fact - which is not really pure
     // because the controls which are not virtual don't need to implement it
-    wxFAIL_MSG( _T("wxListCtrl::OnGetItemText not supposed to be called") );
+    wxFAIL_MSG( wxT("wxListCtrl::OnGetItemText not supposed to be called") );
 
     return wxEmptyString;
 }
@@ -2286,7 +2286,7 @@ int wxListCtrl::OnGetItemColumnImage(lon
 wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
-                  _T("invalid item index in OnGetItemAttr()") );
+                  wxT("invalid item index in OnGetItemAttr()") );
 
     // no attributes by default
     return NULL;
@@ -2294,7 +2294,7 @@ wxListItemAttr *wxListCtrl::OnGetItemAtt
 
 void wxListCtrl::SetItemCount(long count)
 {
-    wxASSERT_MSG( IsVirtual(), _T("this is for virtual controls only") );
+    wxASSERT_MSG( IsVirtual(), wxT("this is for virtual controls only") );
 
     if (m_genericImpl)
     {
@@ -3182,7 +3182,7 @@ wxMacDataBrowserListCtrlControl::~wxMacD
 void wxMacDataBrowserListCtrlControl::MacSetColumnInfo( unsigned int row, unsigned int column, wxListItem* item )
 {
     wxMacDataItem* dataItem = GetItemFromLine(row);
-    wxASSERT_MSG( dataItem, _T("could not obtain wxMacDataItem for row in MacSetColumnInfo. Is row a valid wxListCtrl row?") );
+    wxASSERT_MSG( dataItem, wxT("could not obtain wxMacDataItem for row in MacSetColumnInfo. Is row a valid wxListCtrl row?") );
     if (dataItem && item)
     {
         wxMacListCtrlItem* listItem = wx_static_cast(wxMacListCtrlItem*,dataItem);
@@ -3224,7 +3224,7 @@ void wxMacDataBrowserListCtrlControl::Up
 void wxMacDataBrowserListCtrlControl::MacGetColumnInfo( unsigned int row, unsigned int column, wxListItem& item )
 {
     wxMacDataItem* dataItem = GetItemFromLine(row);
-    wxASSERT_MSG( dataItem, _T("could not obtain wxMacDataItem in MacGetColumnInfo. Is row a valid wxListCtrl row?") );
+    wxASSERT_MSG( dataItem, wxT("could not obtain wxMacDataItem in MacGetColumnInfo. Is row a valid wxListCtrl row?") );
     // CS should this guard against dataItem = 0 ? , as item is not a pointer if (item) is not appropriate
     if (dataItem)
     {
@@ -3329,7 +3329,7 @@ void wxMacListCtrlItem::SetColumnTextVal
 
 wxListItem* wxMacListCtrlItem::GetColumnInfo( unsigned int column )
 {
-    wxASSERT_MSG( HasColumnInfo(column), _T("invalid column index in wxMacListCtrlItem") );
+    wxASSERT_MSG( HasColumnInfo(column), wxT("invalid column index in wxMacListCtrlItem") );
     return m_rowItems[column]; 
 }
 
--- src/mac/carbon/toplevel.cpp-orig	2009-06-21 16:37:16.792367000 -0500
+++ src/mac/carbon/toplevel.cpp	2009-06-21 16:37:22.420657000 -0500
@@ -61,7 +61,7 @@
 #define kWindowUnifiedTitleAndToolbarAttribute (1 << 7)
 
 // trace mask for activation tracing messages
-static const wxChar *TRACE_ACTIVATE = _T("activation");
+static const wxChar *TRACE_ACTIVATE = wxT("activation");
 
 // ----------------------------------------------------------------------------
 // globals
@@ -1769,7 +1769,7 @@ void wxTopLevelWindowMac::RequestUserAtt
 bool wxTopLevelWindowMac::SetShape(const wxRegion& region)
 {
     wxCHECK_MSG( HasFlag(wxFRAME_SHAPED), false,
-                 _T("Shaped windows must be created with the wxFRAME_SHAPED style."));
+                 wxT("Shaped windows must be created with the wxFRAME_SHAPED style."));
 
     // The empty region signifies that the shape
     // should be removed from the window.
--- src/mac/carbon/fontdlg.cpp-orig	2009-06-21 16:37:27.486367000 -0500
+++ src/mac/carbon/fontdlg.cpp	2009-06-21 16:37:31.802861000 -0500
@@ -462,7 +462,7 @@ void wxFontDialog::CreateControls()
     wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, _("Size:"), wxDefaultPosition, wxDefaultSize, 0 );
     itemFlexGridSizer4->Add(itemStaticText8, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);
 
-    m_sizeCtrl = new wxSpinCtrl( itemDialog1, wxID_FONTDIALOG_FONTSIZE, _T("12"), wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 1, 300, 12 );
+    m_sizeCtrl = new wxSpinCtrl( itemDialog1, wxID_FONTDIALOG_FONTSIZE, wxT("12"), wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 1, 300, 12 );
     m_sizeCtrl->SetHelpText(_("The font size in points."));
     if (ShowToolTips())
         m_sizeCtrl->SetToolTip(_("The font size in points."));
--- src/mac/carbon/dataobj.cpp-orig	2009-06-21 16:37:37.320471000 -0500
+++ src/mac/carbon/dataobj.cpp	2009-06-21 16:37:41.902454000 -0500
@@ -805,7 +805,7 @@ size_t wxBitmapDataObject::GetFormatCoun
 #endif
 }
 
-static wxDataFormat s_pict( _T("com.apple.pict") ); 
+static wxDataFormat s_pict( wxT("com.apple.pict") ); 
 
 void wxBitmapDataObject::GetAllFormats(wxDataFormat *formats,
                                wxDataObjectBase::Direction WXUNUSED(dir) ) const
--- src/mac/carbon/bmpbuttn.cpp-orig	2009-06-21 16:37:50.482326000 -0500
+++ src/mac/carbon/bmpbuttn.cpp	2009-06-21 16:37:54.971749000 -0500
@@ -62,7 +62,7 @@ static wxBitmap wxMakeStdSizeBitmap(cons
         if ( width != sizeStd || height != sizeStd )
         {
             wxASSERT_MSG( width <= sizeStd && height <= sizeStd,
-                          _T("bitmap shouldn't be cropped") );
+                          wxT("bitmap shouldn't be cropped") );
 
             wxImage square_image = bitmap.ConvertToImage();
             newBmp = square_image.Size
--- src/mac/carbon/mdi.cpp-orig	2009-06-21 16:37:58.906935000 -0500
+++ src/mac/carbon/mdi.cpp	2009-06-21 16:38:02.198137000 -0500
@@ -40,7 +40,7 @@ BEGIN_EVENT_TABLE(wxMDIClientWindow, wxW
     EVT_SCROLL(wxMDIClientWindow::OnScroll)
 END_EVENT_TABLE()
 
-static const wxChar *TRACE_MDI = _T("mdi");
+static const wxChar *TRACE_MDI = wxT("mdi");
 
 static const int IDM_WINDOWTILEHOR  = 4001;
 static const int IDM_WINDOWCASCADE = 4002;
--- src/mac/carbon/menuitem.cpp-orig	2009-06-21 16:38:07.088268000 -0500
+++ src/mac/carbon/menuitem.cpp	2009-06-21 16:38:10.898357000 -0500
@@ -206,7 +206,7 @@ void wxMenuItem::Check(bool bDoCheck)
                 const wxMenuItemList& items = m_parentMenu->GetMenuItems();
                 int pos = items.IndexOf(this);
                 wxCHECK_RET( pos != wxNOT_FOUND,
-                             _T("menuitem not found in the menu items list?") );
+                             wxT("menuitem not found in the menu items list?") );
 
                 // get the radio group range
                 int start, end;
--- src/mac/carbon/utils.cpp-orig	2009-06-21 16:38:14.993240000 -0500
+++ src/mac/carbon/utils.cpp	2009-06-21 16:38:18.414187000 -0500
@@ -650,7 +650,7 @@ wxString wxGetOsDescription()
 #ifdef __DARWIN__
     struct utsname name;
     uname(&name);
-	return wxString::Format(_T("Mac OS X (%s %s %s)"),
+	return wxString::Format(wxT("Mac OS X (%s %s %s)"),
 			wxString::FromAscii(name.sysname).c_str(),
 			wxString::FromAscii(name.release).c_str(),
 			wxString::FromAscii(name.machine).c_str());
--- src/mac/carbon/settings.cpp-orig	2009-06-21 16:38:23.243662000 -0500
+++ src/mac/carbon/settings.cpp	2009-06-21 16:38:26.987098000 -0500
@@ -138,7 +138,7 @@ wxColour wxSystemSettingsNative::GetColo
         // case wxSYS_COLOUR_MAX:
         default:
             resultColor = *wxWHITE;
-            // wxCHECK_MSG( index >= wxSYS_COLOUR_MAX, false, _T("unknown system colour index") );
+            // wxCHECK_MSG( index >= wxSYS_COLOUR_MAX, false, wxT("unknown system colour index") );
             break ;
     }
 
--- src/mac/carbon/dcprint.cpp-orig	2009-06-21 16:38:31.548582000 -0500
+++ src/mac/carbon/dcprint.cpp	2009-06-21 16:38:35.279104000 -0500
@@ -393,7 +393,7 @@ void wxPrinterDC::EndPage(void)
 
 void wxPrinterDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_ok , _T("GetSize() doesn't work without a valid wxPrinterDC") );
+    wxCHECK_RET( m_ok , wxT("GetSize() doesn't work without a valid wxPrinterDC") );
     m_nativePrinterDC->GetSize(width,  height ) ;
 }
 
--- src/mac/corefoundation/hid.cpp-orig	2009-06-21 16:33:37.339330000 -0500
+++ src/mac/corefoundation/hid.cpp	2009-06-21 16:33:45.825232000 -0500
@@ -78,7 +78,7 @@ bool wxHIDDevice::Create (int nClass, in
     CFMutableDictionaryRef pDictionary = IOServiceMatching(kIOHIDDeviceKey);
     if(pDictionary == NULL)
     {
-        wxLogSysError( _T("IOServiceMatching(kIOHIDDeviceKey) failed") );
+        wxLogSysError( wxT("IOServiceMatching(kIOHIDDeviceKey) failed") );
         return false;
     }
 
@@ -103,7 +103,7 @@ bool wxHIDDevice::Create (int nClass, in
     if( IOServiceGetMatchingServices(m_pPort,
                         pDictionary, &pIterator) != kIOReturnSuccess )
     {
-        wxLogSysError(_T("No Matching HID Services"));
+        wxLogSysError(wxT("No Matching HID Services"));
         return false;
     }
 
@@ -129,7 +129,7 @@ bool wxHIDDevice::Create (int nClass, in
                 kNilOptions
              ) != KERN_SUCCESS )
         {
-            wxLogDebug(_T("IORegistryEntryCreateCFProperties failed"));
+            wxLogDebug(wxT("IORegistryEntryCreateCFProperties failed"));
         }
 
         //
@@ -194,7 +194,7 @@ bool wxHIDDevice::Create (int nClass, in
 
         //open the HID interface...
         if ( (*m_ppDevice)->open(m_ppDevice, 0) != S_OK )
-            wxLogDebug(_T("HID device: open failed"));
+            wxLogDebug(wxT("HID device: open failed"));
 
         //
         //Now the hard part - in order to scan things we need "cookies"
@@ -241,7 +241,7 @@ size_t wxHIDDevice::GetCount (int nClass
     CFMutableDictionaryRef pDictionary = IOServiceMatching(kIOHIDDeviceKey);
     if(pDictionary == NULL)
     {
-        wxLogSysError( _T("IOServiceMatching(kIOHIDDeviceKey) failed") );
+        wxLogSysError( wxT("IOServiceMatching(kIOHIDDeviceKey) failed") );
         return false;
     }
 
@@ -266,7 +266,7 @@ size_t wxHIDDevice::GetCount (int nClass
     if( IOServiceGetMatchingServices(pPort,
                                      pDictionary, &pIterator) != kIOReturnSuccess )
     {
-        wxLogSysError(_T("No Matching HID Services"));
+        wxLogSysError(wxT("No Matching HID Services"));
         return false;
     }
 
@@ -317,7 +317,7 @@ void wxHIDDevice::AddCookieInQueue(CFTyp
     //3rd Param flags (none yet)
     AddCookie(Data, i);
     if ( (*m_ppQueue)->addElement(m_ppQueue, m_pCookies[i], 0) != S_OK )
-        wxLogDebug(_T("HID device: adding element failed"));
+        wxLogDebug(wxT("HID device: adding element failed"));
 }
 
 // ----------------------------------------------------------------------------
@@ -334,14 +334,14 @@ void wxHIDDevice::InitCookies(size_t dwS
         m_ppQueue = (*m_ppDevice)->allocQueue(m_ppDevice);
         if ( !m_ppQueue )
         {
-            wxLogDebug(_T("HID device: allocQueue failed"));
+            wxLogDebug(wxT("HID device: allocQueue failed"));
             return;
         }
 
         //Param 2, flags, none yet
         if ( (*m_ppQueue)->create(m_ppQueue, 0, 512) != S_OK )
         {
-            wxLogDebug(_T("HID device: create failed"));
+            wxLogDebug(wxT("HID device: create failed"));
         }
     }
 
--- src/mac/corefoundation/cfstring.cpp-orig	2009-06-21 16:33:52.496597000 -0500
+++ src/mac/corefoundation/cfstring.cpp	2009-06-21 16:33:59.121934000 -0500
@@ -698,10 +698,10 @@ wxString wxMacCFStringHolder::AsString(w
     unibuf[cflen] = 0 ;
     wxMBConvUTF16 converter ;
     noChars = converter.MB2WC( NULL , (const char*)unibuf , 0 ) ;
-    wxASSERT_MSG( noChars != wxCONV_FAILED, _T("Unable to count the number of characters in this string!") );
+    wxASSERT_MSG( noChars != wxCONV_FAILED, wxT("Unable to count the number of characters in this string!") );
     buf = new wxChar[ noChars + 1 ] ;
     noChars = converter.MB2WC( buf , (const char*)unibuf , noChars + 1 ) ;
-    wxASSERT_MSG( noChars != wxCONV_FAILED, _T("Conversion of string failed!") );
+    wxASSERT_MSG( noChars != wxCONV_FAILED, wxT("Conversion of string failed!") );
     delete[] unibuf ;
 #endif
 #else
--- src/mac/corefoundation/stdpaths_cf.cpp-orig	2009-06-21 16:34:08.267825000 -0500
+++ src/mac/corefoundation/stdpaths_cf.cpp	2009-06-21 16:34:14.721103000 -0500
@@ -198,7 +198,7 @@ wxString wxStandardPathsCF::GetUserDataD
 #ifdef __WXMAC__
     return AppendAppName(wxMacFindFolder((short)kUserDomain, kApplicationSupportFolderType, kCreateFolder));
 #else
-    return AppendAppName(wxFileName::GetHomeDir() + _T("/Library/Application Support"));
+    return AppendAppName(wxFileName::GetHomeDir() + wxT("/Library/Application Support"));
 #endif
 }
 
@@ -217,7 +217,7 @@ wxStandardPathsCF::GetLocalizedResources
                                             ResourceCat category) const
 {
     return wxStandardPathsBase::
-            GetLocalizedResourcesDir(lang, category) + _T(".lproj");
+            GetLocalizedResourcesDir(lang, category) + wxT(".lproj");
 }
 
 #endif // wxUSE_STDPATHS
--- src/mac/corefoundation/utilsexc_cf.cpp-orig	2009-06-21 16:34:21.864641000 -0500
+++ src/mac/corefoundation/utilsexc_cf.cpp	2009-06-21 16:34:27.578983000 -0500
@@ -258,12 +258,12 @@ extern "C" void WXCF_EndProcessDetector(
 
     if(rc == -1)
     {   // Error.. really shouldn't happen but try to gracefully handle it
-        wxLogLastError(_T("waitpid"));
+        wxLogLastError(wxT("waitpid"));
         proc_data->exitcode = -1;
     }
     else
     {   // Process ended for some reason
-        wxASSERT_MSG(rc == pid, _T("unexpected waitpid() return value"));
+        wxASSERT_MSG(rc == pid, wxT("unexpected waitpid() return value"));
 
         if(WIFEXITED(status))
             proc_data->exitcode = WEXITSTATUS(status);
--- src/mac/classic/window.cpp-orig	2009-06-21 16:29:02.666768000 -0500
+++ src/mac/classic/window.cpp	2009-06-21 16:29:06.686131000 -0500
@@ -191,7 +191,7 @@ bool wxWindowMac::Create(wxWindowMac *pa
     // the correct solution is to create the controls as siblings of the
     // static box
     wxASSERT_MSG( !wxDynamicCast(parent, wxStaticBox),
-                  _T("wxStaticBox can't be used as a window parent!") );
+                  wxT("wxStaticBox can't be used as a window parent!") );
 #endif // wxUSE_STATBOX
 
     if ( !CreateBase(parent, id, pos, size, style, wxDefaultValidator, name) )
--- src/mac/classic/thread.cpp-orig	2009-06-21 16:29:10.856990000 -0500
+++ src/mac/classic/thread.cpp	2009-06-21 16:29:17.407820000 -0500
@@ -105,7 +105,7 @@ public:
     {
         if ( m_locked > 0 )
         {
-            wxLogDebug(_T("Warning: freeing a locked mutex (%ld locks)."), m_locked);
+            wxLogDebug(wxT("Warning: freeing a locked mutex (%ld locks)."), m_locked);
         }
     }
 
@@ -569,7 +569,7 @@ unsigned long wxThread::GetCurrentId()
 
 bool wxThread::SetConcurrency(size_t level)
 {
-    wxASSERT_MSG( IsMain(), _T("should only be called from the main thread") );
+    wxASSERT_MSG( IsMain(), wxT("should only be called from the main thread") );
 
     // ok only for the default one
     if ( level == 0 )
@@ -670,7 +670,7 @@ wxThread::ExitCode wxThread::Wait()
     // although under MacOS we can wait for any thread, it's an error to
     // wait for a detached one in wxWin API
     wxCHECK_MSG( !IsDetached(), (ExitCode)-1,
-                 _T("can't wait for detached thread") );
+                 wxT("can't wait for detached thread") );
 
     ExitCode rc = (ExitCode)-1;
 
--- src/mac/classic/dirmac.cpp-orig	2009-06-21 16:29:22.364901000 -0500
+++ src/mac/classic/dirmac.cpp	2009-06-21 16:29:30.138553000 -0500
@@ -110,7 +110,7 @@ wxDirData::wxDirData(const wxString& dir
 
     // throw away the trailing slashes
     size_t n = m_dirname.length();
-    wxCHECK_RET( n, _T("empty dir name in wxDir") );
+    wxCHECK_RET( n, wxT("empty dir name in wxDir") );
 
     while ( n > 0 && wxIsPathSeparator(m_dirname[--n]) )
         ;
@@ -272,7 +272,7 @@ wxString wxDir::GetName() const
     if ( m_data )
     {
     name = M_DIR->GetName();
-    if ( !name.empty() && (name.Last() == _T('/')) )
+    if ( !name.empty() && (name.Last() == wxT('/')) )
     {
         // chop off the last (back)slash
         name.Truncate(name.length() - 1);
@@ -298,7 +298,7 @@ bool wxDir::GetFirst(wxString *filename,
                      const wxString& filespec,
                      int flags) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
     M_DIR->Rewind();
 
@@ -310,9 +310,9 @@ bool wxDir::GetFirst(wxString *filename,
 
 bool wxDir::GetNext(wxString *filename) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
-    wxCHECK_MSG( filename, false, _T("bad pointer in wxDir::GetNext()") );
+    wxCHECK_MSG( filename, false, wxT("bad pointer in wxDir::GetNext()") );
 
     return M_DIR->Read(filename);
 }
--- src/mac/classic/metafile.cpp-orig	2009-06-21 16:29:35.897693000 -0500
+++ src/mac/classic/metafile.cpp	2009-06-21 16:29:41.501182000 -0500
@@ -149,8 +149,8 @@ wxMetaFileDC::wxMetaFileDC(const wxStrin
                            int width , int height ,
                            const wxString& WXUNUSED(description) )
 {
-    wxASSERT_MSG( width == 0 || height == 0 , _T("no arbitration of metafilesize supported") ) ;
-    wxASSERT_MSG( filename.empty() , _T("no file based metafile support yet")) ;
+    wxASSERT_MSG( width == 0 || height == 0 , wxT("no arbitration of metafilesize supported") ) ;
+    wxASSERT_MSG( filename.empty() , wxT("no file based metafile support yet")) ;
 
     m_metaFile = new wxMetaFile(filename) ;
     Rect r={0,0,height,width} ;
@@ -171,7 +171,7 @@ wxMetaFileDC::~wxMetaFileDC()
 
 void wxMetaFileDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_metaFile , _T("GetSize() doesn't work without a metafile") );
+    wxCHECK_RET( m_metaFile , wxT("GetSize() doesn't work without a metafile") );
 
     wxSize sz = m_metaFile->GetSize() ;
     if (width) (*width) = sz.x;
--- src/mac/classic/app.cpp-orig	2009-06-21 16:29:45.416502000 -0500
+++ src/mac/classic/app.cpp	2009-06-21 16:29:48.717178000 -0500
@@ -663,7 +663,7 @@ bool wxApp::Initialize(int& argc, wxChar
     // application (otherwise applications would need to handle it)
     if ( argc > 1 )
     {
-        static const wxChar *ARG_PSN = _T("-psn_");
+        static const wxChar *ARG_PSN = wxT("-psn_");
         if ( wxStrncmp(argv[1], ARG_PSN, wxStrlen(ARG_PSN)) == 0 )
         {
             // remove this argument
--- src/mac/classic/toplevel.cpp-orig	2009-06-21 16:29:53.417509000 -0500
+++ src/mac/classic/toplevel.cpp	2009-06-21 16:29:57.411546000 -0500
@@ -1296,7 +1296,7 @@ void wxTopLevelWindowMac::MacInvalidate(
 bool wxTopLevelWindowMac::SetShape(const wxRegion& region)
 {
     wxCHECK_MSG( HasFlag(wxFRAME_SHAPED), false,
-                 _T("Shaped windows must be created with the wxFRAME_SHAPED style."));
+                 wxT("Shaped windows must be created with the wxFRAME_SHAPED style."));
 
 #if TARGET_CARBON
     // The empty region signifies that the shape should be removed from the
--- src/mac/classic/checklst.cpp-orig	2009-06-21 16:30:02.247079000 -0500
+++ src/mac/classic/checklst.cpp	2009-06-21 16:30:08.215059000 -0500
@@ -316,7 +316,7 @@ bool wxCheckListBox::Create(wxWindow *pa
 bool wxCheckListBox::IsChecked(unsigned int item) const
 {
     wxCHECK_MSG( IsValid(item), false,
-                 _T("invalid index in wxCheckListBox::IsChecked") );
+                 wxT("invalid index in wxCheckListBox::IsChecked") );
 
     return m_checks[item] != 0;
 }
@@ -324,7 +324,7 @@ bool wxCheckListBox::IsChecked(unsigned 
 void wxCheckListBox::Check(unsigned int item, bool check)
 {
     wxCHECK_RET( IsValid(item),
-                 _T("invalid index in wxCheckListBox::Check") );
+                 wxT("invalid index in wxCheckListBox::Check") );
 
     // intermediate var is needed to avoid compiler warning with VC++
     bool isChecked = m_checks[item] != 0;
@@ -342,7 +342,7 @@ void wxCheckListBox::Check(unsigned int 
 
 void wxCheckListBox::Delete(unsigned int n)
 {
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxListBox::Delete") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxListBox::Delete") );
 
     wxListBox::Delete(n);
 
--- src/mac/classic/mimetmac.cpp-orig	2009-06-21 16:30:13.880585000 -0500
+++ src/mac/classic/mimetmac.cpp	2009-06-21 16:30:20.473212000 -0500
@@ -99,20 +99,20 @@ size_t
 wxFileTypeImpl::GetAllCommands(wxArrayString * verbs, wxArrayString * commands,
                    const wxFileType::MessageParameters& params) const
 {
-    wxFAIL_MSG( _T("wxFileTypeImpl::GetAllCommands() not yet implemented") );
+    wxFAIL_MSG( wxT("wxFileTypeImpl::GetAllCommands() not yet implemented") );
     return 0;
 }
 
 void
 wxMimeTypesManagerImpl::Initialize(int mailcapStyles, const wxString& extraDir)
 {
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::Initialize() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::Initialize() not yet implemented") );
 }
 
 void
 wxMimeTypesManagerImpl::ClearData()
 {
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::ClearData() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::ClearData() not yet implemented") );
 }
 
 // extension -> file type
@@ -199,7 +199,7 @@ wxMimeTypesManagerImpl::GetFileTypeFromM
 size_t wxMimeTypesManagerImpl::EnumAllFileTypes(wxArrayString& mimetypes)
 {
     // VZ: don't know anything about this for Mac
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::EnumAllFileTypes() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::EnumAllFileTypes() not yet implemented") );
 
     return 0;
 }
@@ -207,7 +207,7 @@ size_t wxMimeTypesManagerImpl::EnumAllFi
 wxFileType *
 wxMimeTypesManagerImpl::Associate(const wxFileTypeInfo& ftInfo)
 {
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::Associate() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::Associate() not yet implemented") );
 
     return NULL;
 }
--- src/mac/classic/menuitem.cpp-orig	2009-06-21 16:30:26.092818000 -0500
+++ src/mac/classic/menuitem.cpp	2009-06-21 16:30:31.372822000 -0500
@@ -199,7 +199,7 @@ void wxMenuItem::Check(bool bDoCheck)
                 const wxMenuItemList& items = m_parentMenu->GetMenuItems();
                 int pos = items.IndexOf(this);
                 wxCHECK_RET( pos != wxNOT_FOUND,
-                             _T("menuitem not found in the menu items list?") );
+                             wxT("menuitem not found in the menu items list?") );
 
                 // get the radio group range
                 int start,
@@ -260,7 +260,7 @@ void wxMenuItem::SetAsRadioGroupStart()
 void wxMenuItem::SetRadioGroupStart(int start)
 {
     wxASSERT_MSG( !m_isRadioGroupStart,
-                  _T("should only be called for the next radio items") );
+                  wxT("should only be called for the next radio items") );
 
     m_radioGroup.start = start;
 }
@@ -268,7 +268,7 @@ void wxMenuItem::SetRadioGroupStart(int 
 void wxMenuItem::SetRadioGroupEnd(int end)
 {
     wxASSERT_MSG( m_isRadioGroupStart,
-                  _T("should only be called for the first radio item") );
+                  wxT("should only be called for the first radio item") );
 
     m_radioGroup.end = end;
 }
--- src/mac/classic/spinctrl.cpp-orig	2009-06-21 16:30:36.291866000 -0500
+++ src/mac/classic/spinctrl.cpp	2009-06-21 16:30:42.895895000 -0500
@@ -274,9 +274,9 @@ int wxSpinCtrl::GetMax() const
 
 void wxSpinCtrl::SetTextValue(int val)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetTextValue") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetTextValue") );
 
-    m_text->SetValue(wxString::Format(_T("%d"), val));
+    m_text->SetValue(wxString::Format(wxT("%d"), val));
 
     // select all text
     m_text->SetSelection(0, -1);
@@ -287,7 +287,7 @@ void wxSpinCtrl::SetTextValue(int val)
 
 void wxSpinCtrl::SetValue(int val)
 {
-    wxCHECK_RET( m_btn, _T("invalid call to wxSpinCtrl::SetValue") );
+    wxCHECK_RET( m_btn, wxT("invalid call to wxSpinCtrl::SetValue") );
 
     SetTextValue(val);
 
@@ -296,7 +296,7 @@ void wxSpinCtrl::SetValue(int val)
 
 void wxSpinCtrl::SetValue(const wxString& text)
 {
-    wxCHECK_RET( m_text, _T("invalid call to wxSpinCtrl::SetValue") );
+    wxCHECK_RET( m_text, wxT("invalid call to wxSpinCtrl::SetValue") );
 
     long val;
     if ( text.ToLong(&val) && ((val > INT_MIN) && (val < INT_MAX)) )
@@ -312,7 +312,7 @@ void wxSpinCtrl::SetValue(const wxString
 
 void wxSpinCtrl::SetRange(int min, int max)
 {
-    wxCHECK_RET( m_btn, _T("invalid call to wxSpinCtrl::SetRange") );
+    wxCHECK_RET( m_btn, wxT("invalid call to wxSpinCtrl::SetRange") );
 
     m_btn->SetRange(min, max);
 }
--- src/mac/classic/dcclient.cpp-orig	2009-06-21 16:30:48.825041000 -0500
+++ src/mac/classic/dcclient.cpp	2009-06-21 16:30:55.482500000 -0500
@@ -73,7 +73,7 @@ wxWindowDC::~wxWindowDC()
 
 void wxWindowDC::DoGetSize( int* width, int* height ) const
 {
-    wxCHECK_RET( m_window, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_window, wxT("GetSize() doesn't work without window") );
 
     m_window->GetSize(width, height);
 }
@@ -120,7 +120,7 @@ wxClientDC::~wxClientDC()
 
 void wxClientDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_window, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_window, wxT("GetSize() doesn't work without window") );
 
     m_window->GetClientSize( width, height );
 }
@@ -167,7 +167,7 @@ wxPaintDC::~wxPaintDC()
 
 void wxPaintDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_window, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_window, wxT("GetSize() doesn't work without window") );
 
     m_window->GetClientSize( width, height );
 }
--- src/mac/classic/fontutil.cpp-orig	2009-06-21 16:31:00.773837000 -0500
+++ src/mac/classic/fontutil.cpp	2009-06-21 16:31:07.265278000 -0500
@@ -49,7 +49,7 @@
 
 bool wxNativeEncodingInfo::FromString(const wxString& s)
 {
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     facename = tokenizer.GetNextToken();
     if ( !facename )
@@ -64,7 +64,7 @@ bool wxNativeEncodingInfo::FromString(co
     }
     else
     {
-        if ( wxSscanf(tmp, _T("%u"), &charset) != 1 )
+        if ( wxSscanf(tmp, wxT("%u"), &charset) != 1 )
         {
             // should be a number!
             return FALSE;
@@ -79,7 +79,7 @@ wxString wxNativeEncodingInfo::ToString(
     wxString s(facename);
     if ( charset != 0 )
     {
-        s << _T(';') << charset;
+        s << wxT(';') << charset;
     }
 
     return s;
@@ -92,7 +92,7 @@ wxString wxNativeEncodingInfo::ToString(
 bool wxGetNativeFontEncoding(wxFontEncoding encoding,
                              wxNativeEncodingInfo *info)
 {
-    wxCHECK_MSG( info, FALSE, _T("bad pointer in wxGetNativeFontEncoding") );
+    wxCHECK_MSG( info, FALSE, wxT("bad pointer in wxGetNativeFontEncoding") );
 
     if ( encoding == wxFONTENCODING_DEFAULT )
     {
--- src/mac/classic/menu.cpp-orig	2009-06-21 16:31:12.806574000 -0500
+++ src/mac/classic/menu.cpp	2009-06-21 16:31:17.571177000 -0500
@@ -177,7 +177,7 @@ void wxMenu::EndRadioGroup()
 
 wxMenuItem* wxMenu::DoAppend(wxMenuItem *item)
 {
-    wxCHECK_MSG( item, NULL, _T("NULL item in wxMenu::DoAppend") );
+    wxCHECK_MSG( item, NULL, wxT("NULL item in wxMenu::DoAppend") );
 
     bool check = false;
 
@@ -209,7 +209,7 @@ wxMenuItem* wxMenu::DoAppend(wxMenuItem 
             }
             else
             {
-                wxFAIL_MSG( _T("where is the radio group start item?") );
+                wxFAIL_MSG( wxT("where is the radio group start item?") );
             }
         }
     }
--- src/mac/classic/notebmac.cpp-orig	2009-06-21 16:31:24.468634000 -0500
+++ src/mac/classic/notebmac.cpp	2009-06-21 16:31:32.368000000 -0500
@@ -315,17 +315,17 @@ wxString wxNotebook::GetPageText(size_t 
 
 int wxNotebook::GetPageImage(size_t nPage) const
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), wxNOT_FOUND, wxT("invalid notebook page") );
 
     return m_images[nPage];
 }
 
 bool wxNotebook::SetPageImage(size_t nPage, int nImage)
 {
-    wxCHECK_MSG( IS_VALID_PAGE(nPage), false, _T("invalid notebook page") );
+    wxCHECK_MSG( IS_VALID_PAGE(nPage), false, wxT("invalid notebook page") );
 
     wxCHECK_MSG( m_imageList && nImage < m_imageList->GetImageCount(), false,
-        _T("invalid image index in SetPageImage()") );
+        wxT("invalid image index in SetPageImage()") );
 
     if ( nImage != m_images[nPage] )
     {
@@ -385,7 +385,7 @@ bool wxNotebook::InsertPage(size_t nPage
         return false;
 
     wxASSERT_MSG( pPage->GetParent() == this,
-                    _T("notebook pages must have notebook as parent") );
+                    wxT("notebook pages must have notebook as parent") );
 
     // don't show pages by default (we'll need to adjust their size first)
     pPage->Show( false ) ;
--- src/mac/classic/control.cpp-orig	2009-06-21 16:31:37.180886000 -0500
+++ src/mac/classic/control.cpp	2009-06-21 16:31:41.013361000 -0500
@@ -808,7 +808,7 @@ void wxControl::DoSetWindowVariant( wxWi
             fontStyle.font = kControlFontBigSystemFont;
             break ;
         default:
-            wxFAIL_MSG(_T("unexpected window variant"));
+            wxFAIL_MSG(wxT("unexpected window variant"));
             break ;
     }
     ::SetControlData( (ControlHandle) m_macControl , kControlEntireControl, kControlSizeTag, sizeof( ControlSize ), &size );
--- src/mac/classic/toolbar.cpp-orig	2009-06-21 16:31:45.916088000 -0500
+++ src/mac/classic/toolbar.cpp	2009-06-21 16:31:49.416854000 -0500
@@ -500,7 +500,7 @@ bool wxToolBar::DoInsertTool(size_t WXUN
 
 void wxToolBar::DoSetToggle(wxToolBarToolBase *WXUNUSED(tool), bool WXUNUSED(toggle))
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 bool wxToolBar::DoDeleteTool(size_t WXUNUSED(pos), wxToolBarToolBase *tool)
--- src/mac/classic/textctrl.cpp-orig	2009-06-21 16:31:54.491177000 -0500
+++ src/mac/classic/textctrl.cpp	2009-06-21 16:31:58.386257000 -0500
@@ -1483,7 +1483,7 @@ void wxTextCtrl::ShowPosition(long pos)
             SInt32 dh = desired.h - current.h ;
             TXNShowSelection(  (TXNObject) m_macTXN , true ) ;
             theErr = TXNScroll( (TXNObject) m_macTXN, kTXNScrollUnitsInPixels , kTXNScrollUnitsInPixels , &dv , &dh );
-            wxASSERT_MSG( theErr == noErr, _T("TXNScroll returned an error!") );
+            wxASSERT_MSG( theErr == noErr, wxT("TXNScroll returned an error!") );
         }
     }
 #endif
--- src/mac/classic/bitmap.cpp-orig	2009-06-21 16:32:02.906866000 -0500
+++ src/mac/classic/bitmap.cpp	2009-06-21 16:32:09.751908000 -0500
@@ -1344,7 +1344,7 @@ void *wxBitmap::GetRawData(wxPixelDataBa
 
    if ( M_BITMAPDATA->m_bitmapType != kMacBitmapTypeGrafWorld )
    {
-       wxFAIL_MSG( _T("GetRawData() only supported for GWorlds") );
+       wxFAIL_MSG( wxT("GetRawData() only supported for GWorlds") );
 
        return NULL;
    }
@@ -1352,14 +1352,14 @@ void *wxBitmap::GetRawData(wxPixelDataBa
    GWorldPtr gworld = MAC_WXHBITMAP(M_BITMAPDATA->m_hBitmap);
    PixMapHandle hPixMap = GetGWorldPixMap(gworld);
    wxCHECK_MSG( hPixMap && *hPixMap, NULL,
-                    _T("GetRawData(): failed to get PixMap from GWorld?") );
+                    wxT("GetRawData(): failed to get PixMap from GWorld?") );
 
    wxCHECK_MSG( (*hPixMap)->pixelSize == bpp, NULL,
-                    _T("GetRawData(): pixel format mismatch") );
+                    wxT("GetRawData(): pixel format mismatch") );
 
    if ( !LockPixels(hPixMap) )
    {
-       wxFAIL_MSG( _T("failed to lock PixMap in GetRawData()") );
+       wxFAIL_MSG( wxT("failed to lock PixMap in GetRawData()") );
 
        return NULL;
    }
--- src/mac/classic/stattext.cpp-orig	2009-06-21 16:32:15.874221000 -0500
+++ src/mac/classic/stattext.cpp	2009-06-21 16:32:20.068202000 -0500
@@ -196,7 +196,7 @@ wxSize wxStaticText::DoGetBestSize() con
                 if ( !heightLineDefault )
                     heightLineDefault = heightLine;
                 if ( !heightLineDefault )
-                    GetTextExtent(_T("W"), NULL, &heightLineDefault);
+                    GetTextExtent(wxT("W"), NULL, &heightLineDefault);
 
                 heightTextTotal += heightLineDefault;
 
--- src/mac/classic/choice.cpp-orig	2009-06-21 16:32:24.253981000 -0500
+++ src/mac/classic/choice.cpp	2009-06-21 16:32:27.722534000 -0500
@@ -187,7 +187,7 @@ void wxChoice::SetString(unsigned int n,
 wxString wxChoice::GetString(unsigned int n) const
 {
     wxCHECK_MSG( IsValid(n), wxEmptyString,
-                    _T("wxChoice::GetString(): invalid index") );
+                    wxT("wxChoice::GetString(): invalid index") );
 
     return m_strings[n] ;
 }
--- src/mac/classic/statbrma.cpp-orig	2009-06-21 16:32:33.668193000 -0500
+++ src/mac/classic/statbrma.cpp	2009-06-21 16:32:42.930992000 -0500
@@ -91,7 +91,7 @@ void wxStatusBarMac::DrawField(wxDC& dc,
 void wxStatusBarMac::SetStatusText(const wxString& text, int number)
 {
     wxCHECK_RET( (number >= 0) && (number < m_nFields),
-                 _T("invalid status bar field index") );
+                 wxT("invalid status bar field index") );
 
     m_statusStrings[number] = text;
     wxRect rect;
--- src/mac/classic/settings.cpp-orig	2009-06-21 16:32:48.619666000 -0500
+++ src/mac/classic/settings.cpp	2009-06-21 16:32:52.238433000 -0500
@@ -114,7 +114,7 @@ wxColour wxSystemSettingsNative::GetColo
             return *wxBLACK;
 
         case wxSYS_COLOUR_MAX:
-            wxFAIL_MSG( _T("unknown system colour index") );
+            wxFAIL_MSG( wxT("unknown system colour index") );
             break ;
     }
     return *wxWHITE;
--- src/mac/classic/dialog.cpp-orig	2009-06-21 16:32:56.230601000 -0500
+++ src/mac/classic/dialog.cpp	2009-06-21 16:33:00.559161000 -0500
@@ -159,7 +159,7 @@ extern bool s_macIsInModalLoop ;
 
 void wxDialog::DoShowModal()
 {
-    wxCHECK_RET( !IsModalShowing(), _T("DoShowModal() called twice") );
+    wxCHECK_RET( !IsModalShowing(), wxT("DoShowModal() called twice") );
 
     wxModalDialogs.Append(this);
 
--- src/mac/classic/cursor.cpp-orig	2009-06-21 16:33:04.829536000 -0500
+++ src/mac/classic/cursor.cpp	2009-06-21 16:33:08.511010000 -0500
@@ -142,7 +142,7 @@ void wxCursor::CreateFromImage(const wxI
 
     wxASSERT_MSG( hotSpotX >= 0 && hotSpotX < image_w &&
                   hotSpotY >= 0 && hotSpotY < image_h,
-                  _T("invalid cursor hot spot coordinates") );
+                  wxT("invalid cursor hot spot coordinates") );
 
     wxImage image16(image); // final image of correct size
 
--- src/mac/classic/clipbrd.cpp-orig	2009-06-21 16:33:14.869084000 -0500
+++ src/mac/classic/clipbrd.cpp	2009-06-21 16:33:19.264144000 -0500
@@ -36,7 +36,7 @@
 // the trace mask we use with wxLogTrace() - call
 // wxLog::AddTraceMask(TRACE_CLIPBOARD) to enable the trace messages from here
 // (there will be a *lot* of them!)
-static const wxChar *TRACE_CLIPBOARD = _T("clipboard");
+static const wxChar *TRACE_CLIPBOARD = wxT("clipboard");
 
 void *wxGetClipboardData(wxDataFormat dataFormat, long *len)
 {
--- src/mac/classic/dcprint.cpp-orig	2009-06-21 16:33:24.337985000 -0500
+++ src/mac/classic/dcprint.cpp	2009-06-21 16:33:28.468742000 -0500
@@ -412,7 +412,7 @@ wxRect wxPrinterDC::GetPaperRect()
 
 void wxPrinterDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_ok , _T("GetSize() doesn't work without a valid wxPrinterDC") );
+    wxCHECK_RET( m_ok , wxT("GetSize() doesn't work without a valid wxPrinterDC") );
 
     if ( width )
         * width = m_nativePrinterDC->GetMaxX() ;
--- src/msdos/utilsdos.cpp-orig	2009-06-21 16:19:35.489205000 -0500
+++ src/msdos/utilsdos.cpp	2009-06-21 16:19:41.033250000 -0500
@@ -100,7 +100,7 @@ bool wxSetEnv(const wxString& variable, 
 {
     wxString s = variable;
     if ( value )
-        s << _T('=') << value;
+        s << wxT('=') << value;
 
     // transform to ANSI
     const char *p = s.mb_str();
@@ -168,7 +168,7 @@ const wxChar* wxGetHomeDir(wxString *hom
         {
             strDir = szHome;
             // when msys sets %HOME% it uses '/' (cygwin uses '\\')
-            strDir.Replace(_T("/"), _T("\\"));
+            strDir.Replace(wxT("/"), wxT("\\"));
         }
     }
 
@@ -185,15 +185,15 @@ const wxChar* wxGetHomeDir(wxString *hom
             wxString prog(wxTheApp->argv[0]);
 #ifdef __DJGPP__
             // djgpp startup code switches the slashes around, so restore them
-            prog.Replace(_T("/"), _T("\\"));
+            prog.Replace(wxT("/"), wxT("\\"));
 #endif
             // it needs to be a full path to be usable
-            if ( prog.compare(1, 2, _T(":\\")) == 0 )
+            if ( prog.compare(1, 2, wxT(":\\")) == 0 )
                 wxSplitPath(prog, &strDir, NULL, NULL);
         }
         if ( strDir.empty() )
         {
-            strDir = _T(".");
+            strDir = wxT(".");
         }
     }
 
@@ -207,20 +207,20 @@ wxChar *wxGetUserHome(const wxString& us
     if (user.empty() || user == wxGetUserId())
         return wx_const_cast(wxChar*, wxGetHomeDir(&home));
     else
-        return _T("");
+        return wxT("");
 }
 
 // returns %UserName%, $USER or just "user"
 //
 bool wxGetUserId(wxChar *buf, int n)
 {
-    const wxChar *user = wxGetenv(_T("UserName"));
+    const wxChar *user = wxGetenv(wxT("UserName"));
 
     if (!user)
-        user = wxGetenv(_T("USER"));
+        user = wxGetenv(wxT("USER"));
 
     if (!user)
-        user = _T("user");
+        user = wxT("user");
 
     wxStrncpy(buf, user, n);
     return true;
@@ -235,13 +235,13 @@ bool wxGetUserName(wxChar *buf, int n)
 //
 bool wxGetHostName(wxChar *buf, int n)
 {
-    const wxChar *host = wxGetenv(_T("ComputerName"));
+    const wxChar *host = wxGetenv(wxT("ComputerName"));
 
     if (!host)
-        host = wxGetenv(_T("HOSTNAME"));
+        host = wxGetenv(wxT("HOSTNAME"));
 
     if (!host)
-        host = _T("host");
+        host = wxT("host");
 
     wxStrncpy(buf, host, n);
     return true;
@@ -253,10 +253,10 @@ bool wxGetFullHostName(wxChar *buf, int 
 {
     wxGetHostName(buf, n);
 
-    const wxChar *domain = wxGetenv(_T("UserDnsDomain"));
+    const wxChar *domain = wxGetenv(wxT("UserDnsDomain"));
 
     if (domain)
-        wxStrncat(wxStrncat(buf, _T("."), n), domain, n);
+        wxStrncat(wxStrncat(buf, wxT("."), n), domain, n);
 
     return true;
 }
@@ -282,7 +282,7 @@ int wxKill(long pid, wxSignal sig, wxKil
     }
     else
     {
-        wxLogDebug(_T("wxKill can only send signals to the current process under MSDOS"));
+        wxLogDebug(wxT("wxKill can only send signals to the current process under MSDOS"));
         if (rc)
             *rc = wxKILL_NO_PROCESS;
     }
@@ -326,7 +326,7 @@ class wxTempFileInStream : public wxFFil
 {
 public:
     wxTempFileInStream(const wxString& name)
-        : wxFFileInputStream(name, _T("rt"))
+        : wxFFileInputStream(name, wxT("rt"))
     { }
 
     virtual ~wxTempFileInStream()
@@ -437,14 +437,14 @@ long wxExecute(wxChar **argv, int flags,
     if (redirect)
     {
         // close stdin/out/err and reopen them as files
-        if (!in.Reopen(_T("NUL"), O_RDONLY | O_TEXT))
+        if (!in.Reopen(wxT("NUL"), O_RDONLY | O_TEXT))
             return -1;
 
-        if (!out.Reopen(wxFileName::CreateTempFileName(_T("out")),
+        if (!out.Reopen(wxFileName::CreateTempFileName(wxT("out")),
                         O_CREAT | O_WRONLY | O_TRUNC | O_TEXT))
             return -1;
 
-        if (!err.Reopen(wxFileName::CreateTempFileName(_T("err")),
+        if (!err.Reopen(wxFileName::CreateTempFileName(wxT("err")),
                         O_CREAT | O_WRONLY | O_TRUNC | O_TEXT))
             return -1;
     }
@@ -460,7 +460,7 @@ long wxExecute(wxChar **argv, int flags,
 #if wxUSE_STREAMS
     if (redirect)
         process->SetPipeStreams(new wxTempFileInStream(out.Release()),
-                                new wxFFileOutputStream(_T("NUL"), _T("wt")),
+                                new wxFFileOutputStream(wxT("NUL"), wxT("wt")),
                                 new wxTempFileInStream(err.Release()));
 #endif // wxUSE_STREAMS
 
@@ -474,7 +474,7 @@ long wxExecute(wxChar **argv, int flags,
 
 wxString wxGetOsDescription()
 {
-    wxString osname(_T("DOS"));
+    wxString osname(wxT("DOS"));
     return osname;
 }
 
--- src/msdos/mimetype.cpp-orig	2009-06-21 16:19:46.108583000 -0500
+++ src/msdos/mimetype.cpp	2009-06-21 16:19:53.755739000 -0500
@@ -104,7 +104,7 @@ wxFileTypeImpl::GetAllCommands(wxArraySt
                                wxArrayString * WXUNUSED(commands),
                                const wxFileType::MessageParameters& WXUNUSED(params)) const
 {
-    wxFAIL_MSG( _T("wxFileTypeImpl::GetAllCommands() not yet implemented") );
+    wxFAIL_MSG( wxT("wxFileTypeImpl::GetAllCommands() not yet implemented") );
     return 0;
 }
 
@@ -112,13 +112,13 @@ void
 wxMimeTypesManagerImpl::Initialize(int WXUNUSED(mailcapStyles),
                                    const wxString& WXUNUSED(extraDir))
 {
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::Initialize() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::Initialize() not yet implemented") );
 }
 
 void
 wxMimeTypesManagerImpl::ClearData()
 {
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::ClearData() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::ClearData() not yet implemented") );
 }
 
 // extension -> file type
@@ -205,7 +205,7 @@ wxMimeTypesManagerImpl::GetFileTypeFromM
 size_t wxMimeTypesManagerImpl::EnumAllFileTypes(wxArrayString& WXUNUSED(mimetypes))
 {
     // VZ: don't know anything about this for Mac
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::EnumAllFileTypes() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::EnumAllFileTypes() not yet implemented") );
 
     return 0;
 }
@@ -213,7 +213,7 @@ size_t wxMimeTypesManagerImpl::EnumAllFi
 wxFileType *
 wxMimeTypesManagerImpl::Associate(const wxFileTypeInfo& WXUNUSED(ftInfo))
 {
-    wxFAIL_MSG( _T("wxMimeTypesManagerImpl::Associate() not yet implemented") );
+    wxFAIL_MSG( wxT("wxMimeTypesManagerImpl::Associate() not yet implemented") );
 
     return NULL;
 }
--- src/common/appbase.cpp-orig	2009-06-18 15:36:23.612145000 -0500
+++ src/common/appbase.cpp	2009-06-18 15:37:03.791458000 -0500
@@ -233,7 +233,7 @@ wxAppTraits *wxAppConsole::GetTraits()
     {
         m_traits = CreateTraits();
 
-        wxASSERT_MSG( m_traits, _T("wxApp::CreateTraits() failed?") );
+        wxASSERT_MSG( m_traits, wxT("wxApp::CreateTraits() failed?") );
     }
 
     return m_traits;
@@ -330,7 +330,7 @@ wxAppConsole::HandleEvent(wxEvtHandler *
 
 #if wxUSE_CMDLINE_PARSER
 
-#define OPTION_VERBOSE _T("verbose")
+#define OPTION_VERBOSE wxT("verbose")
 
 void wxAppConsole::OnInitCmdLine(wxCmdLineParser& parser)
 {
@@ -339,8 +339,8 @@ void wxAppConsole::OnInitCmdLine(wxCmdLi
     {
         {
             wxCMD_LINE_SWITCH,
-            _T("h"),
-            _T("help"),
+            wxT("h"),
+            wxT("help"),
             gettext_noop("show this help message"),
             wxCMD_LINE_VAL_NONE,
             wxCMD_LINE_OPTION_HELP
@@ -421,7 +421,7 @@ bool wxAppConsole::CheckBuildOptions(con
         wxString progName = wxString::FromAscii(componentName);
         wxString msg;
 
-        msg.Printf(_T("Mismatch between the program and library build versions detected.\nThe library used %s,\nand %s used %s."),
+        msg.Printf(wxT("Mismatch between the program and library build versions detected.\nThe library used %s,\nand %s used %s."),
                    lib.c_str(), progName.c_str(), prog.c_str());
 
         wxLogFatalError(msg.c_str());
@@ -551,7 +551,7 @@ bool wxAppTraitsBase::ShowAssertDialog(c
 
     const wxString stackTrace = GetAssertStackTrace();
     if ( !stackTrace.empty() )
-        msg << _T("\n\nCall stack:\n") << stackTrace;
+        msg << wxT("\n\nCall stack:\n") << stackTrace;
 #endif // wxUSE_STACKWALKER
 
     return DoShowAssertDialog(msg);
@@ -574,29 +574,29 @@ wxString wxAppTraitsBase::GetAssertStack
         {
             m_stackTrace << wxString::Format
                             (
-                              _T("[%02d] "),
+                              wxT("[%02d] "),
                               wx_truncate_cast(int, frame.GetLevel())
                             );
 
             wxString name = frame.GetName();
             if ( !name.empty() )
             {
-                m_stackTrace << wxString::Format(_T("%-40s"), name.c_str());
+                m_stackTrace << wxString::Format(wxT("%-40s"), name.c_str());
             }
             else
             {
-                m_stackTrace << wxString::Format(_T("%p"), frame.GetAddress());
+                m_stackTrace << wxString::Format(wxT("%p"), frame.GetAddress());
             }
 
             if ( frame.HasSourceLocation() )
             {
-                m_stackTrace << _T('\t')
+                m_stackTrace << wxT('\t')
                              << frame.GetFileName()
-                             << _T(':')
+                             << wxT(':')
                              << frame.GetLine();
             }
 
-            m_stackTrace << _T('\n');
+            m_stackTrace << wxT('\n');
         }
 
     private:
@@ -745,7 +745,7 @@ bool DoShowAssertDialog(const wxString& 
               wxT("You can also choose [Cancel] to suppress ")
               wxT("further warnings.");
 
-    switch ( ::MessageBox(NULL, msgDlg, _T("wxWidgets Debug Alert"),
+    switch ( ::MessageBox(NULL, msgDlg, wxT("wxWidgets Debug Alert"),
                           MB_YESNOCANCEL | MB_ICONSTOP ) )
     {
         case IDYES:
@@ -792,16 +792,16 @@ void ShowAssertDialog(const wxChar *szFi
 
     // add the function name, if any
     if ( szFunc && *szFunc )
-        msg << _T(" in ") << szFunc << _T("()");
+        msg << wxT(" in ") << szFunc << wxT("()");
 
     // and the message itself
     if ( szMsg )
     {
-        msg << _T(": ") << szMsg;
+        msg << wxT(": ") << szMsg;
     }
     else // no message given
     {
-        msg << _T('.');
+        msg << wxT('.');
     }
 
 #if wxUSE_THREADS
@@ -828,7 +828,7 @@ void ShowAssertDialog(const wxChar *szFi
     if ( !s_bNoAsserts )
     {
         // send it to the normal log destination
-        wxLogDebug(_T("%s"), msg.c_str());
+        wxLogDebug(wxT("%s"), msg.c_str());
 
         if ( traits )
         {
--- src/common/cmdline.cpp-orig	2009-06-18 15:48:04.712816000 -0500
+++ src/common/cmdline.cpp	2009-06-18 15:49:53.374978000 -0500
@@ -69,7 +69,7 @@ struct wxCmdLineOption
                     int fl)
     {
         wxASSERT_MSG( !shrt.empty() || !lng.empty(),
-                      _T("option should have at least one name") );
+                      wxT("option should have at least one name") );
 
         wxASSERT_MSG
             (
@@ -103,7 +103,7 @@ struct wxCmdLineOption
 
     void Check(wxCmdLineParamType WXUNUSED_UNLESS_DEBUG(typ)) const
     {
-        wxASSERT_MSG( type == typ, _T("type mismatch in wxCmdLineOption") );
+        wxASSERT_MSG( type == typ, wxT("type mismatch in wxCmdLineOption") );
     }
 
     long GetLongVal() const
@@ -207,9 +207,9 @@ wxCmdLineParserData::wxCmdLineParserData
 {
     m_enableLongOptions = true;
 #ifdef __UNIX_LIKE__
-    m_switchChars = _T("-");
+    m_switchChars = wxT("-");
 #else // !Unix
-    m_switchChars = _T("/-");
+    m_switchChars = wxT("/-");
 #endif
 }
 
@@ -366,7 +366,7 @@ void wxCmdLineParser::SetDesc(const wxCm
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown command line entry type") );
+                wxFAIL_MSG( wxT("unknown command line entry type") );
                 // still fall through
 
             case wxCMD_LINE_NONE:
@@ -381,7 +381,7 @@ void wxCmdLineParser::AddSwitch(const wx
                                 int flags)
 {
     wxASSERT_MSG( m_data->FindOption(shortName) == wxNOT_FOUND,
-                  _T("duplicate switch") );
+                  wxT("duplicate switch") );
 
     wxCmdLineOption *option = new wxCmdLineOption(wxCMD_LINE_SWITCH,
                                                   shortName, longName, desc,
@@ -397,7 +397,7 @@ void wxCmdLineParser::AddOption(const wx
                                 int flags)
 {
     wxASSERT_MSG( m_data->FindOption(shortName) == wxNOT_FOUND,
-                  _T("duplicate option") );
+                  wxT("duplicate option") );
 
     wxCmdLineOption *option = new wxCmdLineOption(wxCMD_LINE_OPTION,
                                                   shortName, longName, desc,
@@ -418,12 +418,12 @@ void wxCmdLineParser::AddParam(const wxS
         wxCmdLineParam& param = m_data->m_paramDesc.Last();
 
         wxASSERT_MSG( !(param.flags & wxCMD_LINE_PARAM_MULTIPLE),
-                      _T("all parameters after the one with wxCMD_LINE_PARAM_MULTIPLE style will be ignored") );
+                      wxT("all parameters after the one with wxCMD_LINE_PARAM_MULTIPLE style will be ignored") );
 
         if ( !(flags & wxCMD_LINE_PARAM_OPTIONAL) )
         {
             wxASSERT_MSG( !(param.flags & wxCMD_LINE_PARAM_OPTIONAL),
-                          _T("a required parameter can't follow an optional one") );
+                          wxT("a required parameter can't follow an optional one") );
         }
     }
 #endif // Debug
@@ -443,7 +443,7 @@ bool wxCmdLineParser::Found(const wxStri
     if ( i == wxNOT_FOUND )
         i = m_data->FindOptionByLongName(name);
 
-    wxCHECK_MSG( i != wxNOT_FOUND, false, _T("unknown switch") );
+    wxCHECK_MSG( i != wxNOT_FOUND, false, wxT("unknown switch") );
 
     wxCmdLineOption& opt = m_data->m_options[(size_t)i];
     if ( !opt.HasValue() )
@@ -458,13 +458,13 @@ bool wxCmdLineParser::Found(const wxStri
     if ( i == wxNOT_FOUND )
         i = m_data->FindOptionByLongName(name);
 
-    wxCHECK_MSG( i != wxNOT_FOUND, false, _T("unknown option") );
+    wxCHECK_MSG( i != wxNOT_FOUND, false, wxT("unknown option") );
 
     wxCmdLineOption& opt = m_data->m_options[(size_t)i];
     if ( !opt.HasValue() )
         return false;
 
-    wxCHECK_MSG( value, false, _T("NULL pointer in wxCmdLineOption::Found") );
+    wxCHECK_MSG( value, false, wxT("NULL pointer in wxCmdLineOption::Found") );
 
     *value = opt.GetStrVal();
 
@@ -477,13 +477,13 @@ bool wxCmdLineParser::Found(const wxStri
     if ( i == wxNOT_FOUND )
         i = m_data->FindOptionByLongName(name);
 
-    wxCHECK_MSG( i != wxNOT_FOUND, false, _T("unknown option") );
+    wxCHECK_MSG( i != wxNOT_FOUND, false, wxT("unknown option") );
 
     wxCmdLineOption& opt = m_data->m_options[(size_t)i];
     if ( !opt.HasValue() )
         return false;
 
-    wxCHECK_MSG( value, false, _T("NULL pointer in wxCmdLineOption::Found") );
+    wxCHECK_MSG( value, false, wxT("NULL pointer in wxCmdLineOption::Found") );
 
     *value = opt.GetLongVal();
 
@@ -497,13 +497,13 @@ bool wxCmdLineParser::Found(const wxStri
     if ( i == wxNOT_FOUND )
         i = m_data->FindOptionByLongName(name);
 
-    wxCHECK_MSG( i != wxNOT_FOUND, false, _T("unknown option") );
+    wxCHECK_MSG( i != wxNOT_FOUND, false, wxT("unknown option") );
 
     wxCmdLineOption& opt = m_data->m_options[(size_t)i];
     if ( !opt.HasValue() )
         return false;
 
-    wxCHECK_MSG( value, false, _T("NULL pointer in wxCmdLineOption::Found") );
+    wxCHECK_MSG( value, false, wxT("NULL pointer in wxCmdLineOption::Found") );
 
     *value = opt.GetDateVal();
 
@@ -518,7 +518,7 @@ size_t wxCmdLineParser::GetParamCount() 
 
 wxString wxCmdLineParser::GetParam(size_t n) const
 {
-    wxCHECK_MSG( n < GetParamCount(), wxEmptyString, _T("invalid param index") );
+    wxCHECK_MSG( n < GetParamCount(), wxEmptyString, wxT("invalid param index") );
 
     return m_data->m_parameters[n];
 }
@@ -562,7 +562,7 @@ int wxCmdLineParser::Parse(bool showUsag
         // special case: "--" should be discarded and all following arguments
         // should be considered as parameters, even if they start with '-' and
         // not like options (this is POSIX-like)
-        if ( arg == _T("--") )
+        if ( arg == wxT("--") )
         {
             maybeOption = false;
 
@@ -578,7 +578,7 @@ int wxCmdLineParser::Parse(bool showUsag
             int optInd = wxNOT_FOUND;   // init to suppress warnings
 
             // an option or a switch: find whether it's a long or a short one
-            if ( arg[0u] == _T('-') && arg[1u] == _T('-') )
+            if ( arg[0u] == wxT('-') && arg[1u] == wxT('-') )
             {
                 // a long one
                 isLong = true;
@@ -596,7 +596,7 @@ int wxCmdLineParser::Parse(bool showUsag
                     if ( optInd == wxNOT_FOUND )
                     {
                         errorMsg << wxString::Format(_("Unknown long option '%s'"), name.c_str())
-                                 << _T('\n');
+                                 << wxT('\n');
                     }
                 }
                 else
@@ -606,7 +606,7 @@ int wxCmdLineParser::Parse(bool showUsag
                     // Print the argument including leading "--"
                     name.Prepend( wxT("--") );
                     errorMsg << wxString::Format(_("Unknown option '%s'"), name.c_str())
-                             << _T('\n');
+                             << wxT('\n');
                 }
 
             }
@@ -628,7 +628,7 @@ int wxCmdLineParser::Parse(bool showUsag
                         // we couldn't find a valid option name in the
                         // beginning of this string
                         errorMsg << wxString::Format(_("Unknown option '%s'"), name.c_str())
-                                 << _T('\n');
+                                 << wxT('\n');
 
                         break;
                     }
@@ -686,10 +686,10 @@ int wxCmdLineParser::Parse(bool showUsag
             if ( opt.kind == wxCMD_LINE_SWITCH )
             {
                 // we must check that there is no value following the switch
-                if ( *p != _T('\0') )
+                if ( *p != wxT('\0') )
                 {
                     errorMsg << wxString::Format(_("Unexpected characters following option '%s'."), name.c_str())
-                             << _T('\n');
+                             << wxT('\n');
                     ok = false;
                 }
                 else // no value, as expected
@@ -711,10 +711,10 @@ int wxCmdLineParser::Parse(bool showUsag
                 // get the value
                 if ( isLong )
                 {
-                    if ( *p++ != _T('=') )
+                    if ( *p++ != wxT('=') )
                     {
                         errorMsg << wxString::Format(_("Option '%s' requires a value, '=' expected."), name.c_str())
-                                 << _T('\n');
+                                 << wxT('\n');
 
                         ok = false;
                     }
@@ -723,8 +723,8 @@ int wxCmdLineParser::Parse(bool showUsag
                 {
                     switch ( *p )
                     {
-                        case _T('='):
-                        case _T(':'):
+                        case wxT('='):
+                        case wxT(':'):
                             // the value follows
                             p++;
                             break;
@@ -736,7 +736,7 @@ int wxCmdLineParser::Parse(bool showUsag
                                 // ... but there is none
                                 errorMsg << wxString::Format(_("Option '%s' requires a value."),
                                                              name.c_str())
-                                         << _T('\n');
+                                         << wxT('\n');
 
                                 ok = false;
                             }
@@ -754,7 +754,7 @@ int wxCmdLineParser::Parse(bool showUsag
                             {
                                 errorMsg << wxString::Format(_("Separator expected after the option '%s'."),
                                                              name.c_str())
-                                        << _T('\n');
+                                        << wxT('\n');
 
                                 ok = false;
                             }
@@ -767,7 +767,7 @@ int wxCmdLineParser::Parse(bool showUsag
                     switch ( opt.type )
                     {
                         default:
-                            wxFAIL_MSG( _T("unknown option type") );
+                            wxFAIL_MSG( wxT("unknown option type") );
                             // still fall through
 
                         case wxCMD_LINE_VAL_STRING:
@@ -785,7 +785,7 @@ int wxCmdLineParser::Parse(bool showUsag
                                 {
                                     errorMsg << wxString::Format(_("'%s' is not a correct numeric value for option '%s'."),
                                                                  value.c_str(), name.c_str())
-                                             << _T('\n');
+                                             << wxT('\n');
 
                                     ok = false;
                                 }
@@ -801,7 +801,7 @@ int wxCmdLineParser::Parse(bool showUsag
                                 {
                                     errorMsg << wxString::Format(_("Option '%s': '%s' cannot be converted to a date."),
                                                                  name.c_str(), value.c_str())
-                                             << _T('\n');
+                                             << wxT('\n');
 
                                     ok = false;
                                 }
@@ -833,7 +833,7 @@ int wxCmdLineParser::Parse(bool showUsag
                 else
                 {
                     wxASSERT_MSG( currentParam == countParam - 1,
-                                  _T("all parameters after the one with wxCMD_LINE_PARAM_MULTIPLE style are ignored") );
+                                  wxT("all parameters after the one with wxCMD_LINE_PARAM_MULTIPLE style are ignored") );
 
                     // remember that we did have this last repeatable parameter
                     hadRepeatableParam = true;
@@ -842,7 +842,7 @@ int wxCmdLineParser::Parse(bool showUsag
             else
             {
                 errorMsg << wxString::Format(_("Unexpected parameter '%s'"), arg.c_str())
-                         << _T('\n');
+                         << wxT('\n');
 
                 ok = false;
             }
@@ -880,7 +880,7 @@ int wxCmdLineParser::Parse(bool showUsag
 
                 errorMsg << wxString::Format(_("The value for the option '%s' must be specified."),
                                              optName.c_str())
-                         << _T('\n');
+                         << wxT('\n');
 
                 ok = false;
             }
@@ -902,7 +902,7 @@ int wxCmdLineParser::Parse(bool showUsag
             {
                 errorMsg << wxString::Format(_("The required parameter '%s' was not specified."),
                                              param.description.c_str())
-                         << _T('\n');
+                         << wxT('\n');
 
                 ok = false;
             }
@@ -924,7 +924,7 @@ int wxCmdLineParser::Parse(bool showUsag
         }
         else
         {
-            wxFAIL_MSG( _T("no wxMessageOutput object?") );
+            wxFAIL_MSG( wxT("no wxMessageOutput object?") );
         }
     }
 
@@ -944,7 +944,7 @@ void wxCmdLineParser::Usage()
     }
     else
     {
-        wxFAIL_MSG( _T("no wxMessageOutput object?") );
+        wxFAIL_MSG( wxT("no wxMessageOutput object?") );
     }
 }
 
@@ -969,14 +969,14 @@ wxString wxCmdLineParser::GetUsageString
 
     if ( !m_data->m_logo.empty() )
     {
-        usage << m_data->m_logo << _T('\n');
+        usage << m_data->m_logo << wxT('\n');
     }
 
     usage << wxString::Format(_("Usage: %s"), appname.c_str());
 
     // the switch char is usually '-' but this can be changed with
     // SetSwitchChars() and then the first one of possible chars is used
-    wxChar chSwitch = !m_data->m_switchChars ? _T('-')
+    wxChar chSwitch = !m_data->m_switchChars ? wxT('-')
                                              : m_data->m_switchChars[0u];
 
     bool areLongOptionsEnabled = AreLongOptionsEnabled();
@@ -985,10 +985,10 @@ wxString wxCmdLineParser::GetUsageString
     {
         wxCmdLineOption& opt = m_data->m_options[n];
 
-        usage << _T(' ');
+        usage << wxT(' ');
         if ( !(opt.flags & wxCMD_LINE_OPTION_MANDATORY) )
         {
-            usage << _T('[');
+            usage << wxT('[');
         }
 
         if ( !opt.shortName.empty() )
@@ -997,7 +997,7 @@ wxString wxCmdLineParser::GetUsageString
         }
         else if ( areLongOptionsEnabled && !opt.longName.empty() )
         {
-            usage << _T("--") << opt.longName;
+            usage << wxT("--") << opt.longName;
         }
         else
         {
@@ -1008,7 +1008,7 @@ wxString wxCmdLineParser::GetUsageString
             }
             else
             {
-                wxFAIL_MSG( _T("option without neither short nor long name") );
+                wxFAIL_MSG( wxT("option without neither short nor long name") );
             }
         }
 
@@ -1016,26 +1016,26 @@ wxString wxCmdLineParser::GetUsageString
 
         if ( !opt.shortName.empty() )
         {
-            option << _T("  ") << chSwitch << opt.shortName;
+            option << wxT("  ") << chSwitch << opt.shortName;
         }
 
         if ( areLongOptionsEnabled && !opt.longName.empty() )
         {
-            option << (option.empty() ? _T("  ") : _T(", "))
-                   << _T("--") << opt.longName;
+            option << (option.empty() ? wxT("  ") : wxT(", "))
+                   << wxT("--") << opt.longName;
         }
 
         if ( opt.kind != wxCMD_LINE_SWITCH )
         {
             wxString val;
-            val << _T('<') << GetTypeName(opt.type) << _T('>');
-            usage << _T(' ') << val;
-            option << (!opt.longName ? _T(':') : _T('=')) << val;
+            val << wxT('<') << GetTypeName(opt.type) << wxT('>');
+            usage << wxT(' ') << val;
+            option << (!opt.longName ? wxT(':') : wxT('=')) << val;
         }
 
         if ( !(opt.flags & wxCMD_LINE_OPTION_MANDATORY) )
         {
-            usage << _T(']');
+            usage << wxT(']');
         }
 
         namesOptions.push_back(option);
@@ -1047,26 +1047,26 @@ wxString wxCmdLineParser::GetUsageString
     {
         wxCmdLineParam& param = m_data->m_paramDesc[n];
 
-        usage << _T(' ');
+        usage << wxT(' ');
         if ( param.flags & wxCMD_LINE_PARAM_OPTIONAL )
         {
-            usage << _T('[');
+            usage << wxT('[');
         }
 
         usage << param.description;
 
         if ( param.flags & wxCMD_LINE_PARAM_MULTIPLE )
         {
-            usage << _T("...");
+            usage << wxT("...");
         }
 
         if ( param.flags & wxCMD_LINE_PARAM_OPTIONAL )
         {
-            usage << _T(']');
+            usage << wxT(']');
         }
     }
 
-    usage << _T('\n');
+    usage << wxT('\n');
 
     // now construct the detailed help message
     size_t len, lenMax = 0;
@@ -1082,9 +1082,9 @@ wxString wxCmdLineParser::GetUsageString
     {
         len = namesOptions[n].length();
         usage << namesOptions[n]
-              << wxString(_T(' '), lenMax - len) << _T('\t')
+              << wxString(wxT(' '), lenMax - len) << wxT('\t')
               << descOptions[n]
-              << _T('\n');
+              << wxT('\n');
     }
 
     return usage;
@@ -1100,7 +1100,7 @@ static wxString GetTypeName(wxCmdLinePar
     switch ( type )
     {
         default:
-            wxFAIL_MSG( _T("unknown option type") );
+            wxFAIL_MSG( wxT("unknown option type") );
             // still fall through
 
         case wxCMD_LINE_VAL_STRING:
@@ -1187,11 +1187,11 @@ wxArrayString wxCmdLineParser::ConvertSt
     for ( ;; )
     {
         // skip white space
-        while ( *p == _T(' ') || *p == _T('\t') )
+        while ( *p == wxT(' ') || *p == wxT('\t') )
             p++;
 
         // anything left?
-        if ( *p == _T('\0') )
+        if ( *p == wxT('\0') )
             break;
 
         // parse this parameter
@@ -1201,7 +1201,7 @@ wxArrayString wxCmdLineParser::ConvertSt
         {
             switch ( *p )
             {
-                case _T('"'):
+                case wxT('"'):
                     if ( !lastBS )
                     {
                         isInsideQuotes = !isInsideQuotes;
@@ -1214,8 +1214,8 @@ wxArrayString wxCmdLineParser::ConvertSt
                     //      Windows does
                     break;
 
-                case _T(' '):
-                case _T('\t'):
+                case wxT(' '):
+                case wxT('\t'):
                     // backslash does *not* quote the space, only quotes do
                     if ( isInsideQuotes )
                     {
@@ -1224,7 +1224,7 @@ wxArrayString wxCmdLineParser::ConvertSt
                     }
                     // fall through
 
-                case _T('\0'):
+                case wxT('\0'):
                     endParam = true;
 
                     break;
@@ -1235,7 +1235,7 @@ wxArrayString wxCmdLineParser::ConvertSt
                 break;
             }
 
-            lastBS = !lastBS && *p == _T('\\');
+            lastBS = !lastBS && *p == wxT('\\');
 
             arg += *p;
         }
--- src/common/config.cpp-orig	2009-06-18 15:50:07.453910000 -0500
+++ src/common/config.cpp	2009-06-18 15:50:34.286976000 -0500
@@ -107,7 +107,7 @@ wxConfigBase *wxConfigBase::Create()
 #define IMPLEMENT_READ_FOR_TYPE(name, type, deftype, extra)                 \
     bool wxConfigBase::Read(const wxString& key, type *val) const           \
     {                                                                       \
-        wxCHECK_MSG( val, false, _T("wxConfig::Read(): NULL parameter") );  \
+        wxCHECK_MSG( val, false, wxT("wxConfig::Read(): NULL parameter") );  \
                                                                             \
         if ( !DoRead##name(key, val) )                                      \
             return false;                                                   \
@@ -121,7 +121,7 @@ wxConfigBase *wxConfigBase::Create()
                             type *val,                                      \
                             deftype defVal) const                           \
     {                                                                       \
-        wxCHECK_MSG( val, false, _T("wxConfig::Read(): NULL parameter") );  \
+        wxCHECK_MSG( val, false, wxT("wxConfig::Read(): NULL parameter") );  \
                                                                             \
         bool read = DoRead##name(key, val);                                 \
         if ( !read )                                                        \
@@ -152,13 +152,13 @@ IMPLEMENT_READ_FOR_TYPE(Bool, bool, bool
 // but can be overridden in the derived ones
 bool wxConfigBase::DoReadInt(const wxString& key, int *pi) const
 {
-    wxCHECK_MSG( pi, false, _T("wxConfig::Read(): NULL parameter") );
+    wxCHECK_MSG( pi, false, wxT("wxConfig::Read(): NULL parameter") );
 
     long l;
     if ( !DoReadLong(key, &l) )
         return false;
 
-    wxASSERT_MSG( l < INT_MAX, _T("overflow in wxConfig::DoReadInt") );
+    wxASSERT_MSG( l < INT_MAX, wxT("overflow in wxConfig::DoReadInt") );
 
     *pi = (int)l;
 
@@ -167,13 +167,13 @@ bool wxConfigBase::DoReadInt(const wxStr
 
 bool wxConfigBase::DoReadBool(const wxString& key, bool* val) const
 {
-    wxCHECK_MSG( val, false, _T("wxConfig::Read(): NULL parameter") );
+    wxCHECK_MSG( val, false, wxT("wxConfig::Read(): NULL parameter") );
 
     long l;
     if ( !DoReadLong(key, &l) )
         return false;
 
-    wxASSERT_MSG( l == 0 || l == 1, _T("bad bool value in wxConfig::DoReadInt") );
+    wxASSERT_MSG( l == 0 || l == 1, wxT("bad bool value in wxConfig::DoReadInt") );
 
     *val = l != 0;
 
@@ -208,7 +208,7 @@ wxString wxConfigBase::ExpandEnvVars(con
 
 bool wxConfigBase::DoWriteDouble(const wxString& key, double val)
 {
-    return DoWriteString(key, wxString::Format(_T("%g"), val));
+    return DoWriteString(key, wxString::Format(wxT("%g"), val));
 }
 
 bool wxConfigBase::DoWriteInt(const wxString& key, int value)
@@ -257,7 +257,7 @@ wxConfigPathChanger::wxConfigPathChanger
            pConfig->SetPath(wxT("MySettings"));
            pConfig->SetPath(wxT(".."));
            int value;
-           pConfig->Read(_T("MainWindowX"), & value);
+           pConfig->Read(wxT("MainWindowX"), & value);
         */
         m_strOldPath = (const wxChar*) m_pContainer->GetPath();
         if ( *m_strOldPath.c_str() != wxCONFIG_PATH_SEPARATOR )
--- src/common/datetime.cpp-orig	2009-06-18 15:50:44.610251000 -0500
+++ src/common/datetime.cpp	2009-06-18 15:58:16.786223000 -0500
@@ -350,7 +350,7 @@ extern const wxChar *wxDumpDate(const wx
 {
     static wxChar buf[128];
 
-    wxStrcpy(buf, dt->Format(_T("%Y-%m-%d (%a) %H:%M:%S")));
+    wxStrcpy(buf, dt->Format(wxT("%Y-%m-%d (%a) %H:%M:%S")));
 
     return buf;
 }
@@ -417,7 +417,7 @@ static long GetTruncatedJDN(wxDateTime::
       (year > JDN_0_YEAR) ||
       ((year == JDN_0_YEAR) && (mon > JDN_0_MONTH)) ||
       ((year == JDN_0_YEAR) && (mon == JDN_0_MONTH) && (day >= JDN_0_DAY)),
-      _T("date out of range - can't convert to JDN")
+      wxT("date out of range - can't convert to JDN")
                 );
 
     // make the year positive to avoid problems with negative numbers division
@@ -456,7 +456,7 @@ static wxString CallStrftime(const wxCha
     if ( !wxStrftime(buf, WXSIZEOF(buf), format, tm) )
     {
         // buffer is too small?
-        wxFAIL_MSG(_T("strftime() failed"));
+        wxFAIL_MSG(wxT("strftime() failed"));
     }
 
     s = buf;
@@ -699,7 +699,7 @@ void wxDateTime::Tm::AddMonths(int monDi
 
     mon = (wxDateTime::Month)(mon + monDiff);
 
-    wxASSERT_MSG( mon >= 0 && mon < MONTHS_IN_YEAR, _T("logic error") );
+    wxASSERT_MSG( mon >= 0 && mon < MONTHS_IN_YEAR, wxT("logic error") );
 
     // NB: we don't check here that the resulting date is valid, this function
     //     is private and the caller must check it if needed
@@ -724,7 +724,7 @@ void wxDateTime::Tm::AddDays(int dayDiff
     }
 
     wxASSERT_MSG( mday > 0 && mday <= GetNumOfDaysInMonth(year, mon),
-                  _T("logic error") );
+                  wxT("logic error") );
 }
 
 // ----------------------------------------------------------------------------
@@ -779,7 +779,7 @@ wxDateTime::TimeZone::TimeZone(wxDateTim
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown time zone") );
+            wxFAIL_MSG( wxT("unknown time zone") );
     }
 }
 
@@ -808,7 +808,7 @@ bool wxDateTime::IsLeapYear(int year, wx
     }
     else
     {
-        wxFAIL_MSG(_T("unknown calendar"));
+        wxFAIL_MSG(wxT("unknown calendar"));
 
         return false;
     }
@@ -836,11 +836,11 @@ int wxDateTime::GetCurrentYear(wxDateTim
             return Now().GetYear();
 
         case Julian:
-            wxFAIL_MSG(_T("TODO"));
+            wxFAIL_MSG(wxT("TODO"));
             break;
 
         default:
-            wxFAIL_MSG(_T("unsupported calendar"));
+            wxFAIL_MSG(wxT("unsupported calendar"));
             break;
     }
 
@@ -856,11 +856,11 @@ wxDateTime::Month wxDateTime::GetCurrent
             return Now().GetMonth();
 
         case Julian:
-            wxFAIL_MSG(_T("TODO"));
+            wxFAIL_MSG(wxT("TODO"));
             break;
 
         default:
-            wxFAIL_MSG(_T("unsupported calendar"));
+            wxFAIL_MSG(wxT("unsupported calendar"));
             break;
     }
 
@@ -883,7 +883,7 @@ wxDateTime::wxDateTime_t wxDateTime::Get
             return IsLeapYear(year) ? 366 : 365;
 
         default:
-            wxFAIL_MSG(_T("unsupported calendar"));
+            wxFAIL_MSG(wxT("unsupported calendar"));
             break;
     }
 
@@ -895,7 +895,7 @@ wxDateTime::wxDateTime_t wxDateTime::Get
                                                      int year,
                                                      wxDateTime::Calendar cal)
 {
-    wxCHECK_MSG( month < MONTHS_IN_YEAR, 0, _T("invalid month") );
+    wxCHECK_MSG( month < MONTHS_IN_YEAR, 0, wxT("invalid month") );
 
     if ( cal == Gregorian || cal == Julian )
     {
@@ -909,7 +909,7 @@ wxDateTime::wxDateTime_t wxDateTime::Get
     }
     else
     {
-        wxFAIL_MSG(_T("unsupported calendar"));
+        wxFAIL_MSG(wxT("unsupported calendar"));
 
         return 0;
     }
@@ -919,7 +919,7 @@ wxDateTime::wxDateTime_t wxDateTime::Get
 wxString wxDateTime::GetMonthName(wxDateTime::Month month,
                                   wxDateTime::NameFlags flags)
 {
-    wxCHECK_MSG( month != Inv_Month, wxEmptyString, _T("invalid month") );
+    wxCHECK_MSG( month != Inv_Month, wxEmptyString, wxT("invalid month") );
 #ifdef HAVE_STRFTIME
     // notice that we must set all the fields to avoid confusing libc (GNU one
     // gets confused to a crash if we don't do this)
@@ -927,7 +927,7 @@ wxString wxDateTime::GetMonthName(wxDate
     InitTm(tm);
     tm.tm_mon = month;
 
-    return CallStrftime(flags == Name_Abbr ? _T("%b") : _T("%B"), &tm);
+    return CallStrftime(flags == Name_Abbr ? wxT("%b") : wxT("%B"), &tm);
 #else // !HAVE_STRFTIME
     wxString ret;
     switch(month)
@@ -977,7 +977,7 @@ wxString wxDateTime::GetMonthName(wxDate
 wxString wxDateTime::GetWeekDayName(wxDateTime::WeekDay wday,
                                     wxDateTime::NameFlags flags)
 {
-    wxCHECK_MSG( wday != Inv_WeekDay, wxEmptyString, _T("invalid weekday") );
+    wxCHECK_MSG( wday != Inv_WeekDay, wxEmptyString, wxT("invalid weekday") );
 #ifdef HAVE_STRFTIME
     // take some arbitrary Sunday (but notice that the day should be such that
     // after adding wday to it below we still have a valid date, e.g. don't
@@ -995,7 +995,7 @@ wxString wxDateTime::GetWeekDayName(wxDa
     (void)mktime(&tm);
 
     // ... and call strftime()
-    return CallStrftime(flags == Name_Abbr ? _T("%a") : _T("%A"), &tm);
+    return CallStrftime(flags == Name_Abbr ? wxT("%a") : wxT("%A"), &tm);
 #else // !HAVE_STRFTIME
     wxString ret;
     switch(wday)
@@ -1042,7 +1042,7 @@ void wxDateTime::GetAmPmStrings(wxString
     // assert, even though it is a perfectly legal use.
     if ( am )
     {
-        if (wxStrftime(buffer, sizeof(buffer)/sizeof(wxChar), _T("%p"), &tm) > 0)
+        if (wxStrftime(buffer, sizeof(buffer)/sizeof(wxChar), wxT("%p"), &tm) > 0)
             *am = wxString(buffer);
         else
             *am = wxString();
@@ -1050,7 +1050,7 @@ void wxDateTime::GetAmPmStrings(wxString
     if ( pm )
     {
         tm.tm_hour = 13;
-        if (wxStrftime(buffer, sizeof(buffer)/sizeof(wxChar), _T("%p"), &tm) > 0)
+        if (wxStrftime(buffer, sizeof(buffer)/sizeof(wxChar), wxT("%p"), &tm) > 0)
             *pm = wxString(buffer);
         else
             *pm = wxString();
@@ -1074,24 +1074,24 @@ wxDateTime::Country wxDateTime::GetCount
         struct tm tmstruct;
         struct tm *tm = wxLocaltime_r(&t, &tmstruct);
 
-        wxString tz = CallStrftime(_T("%Z"), tm);
-        if ( tz == _T("WET") || tz == _T("WEST") )
+        wxString tz = CallStrftime(wxT("%Z"), tm);
+        if ( tz == wxT("WET") || tz == wxT("WEST") )
         {
             ms_country = UK;
         }
-        else if ( tz == _T("CET") || tz == _T("CEST") )
+        else if ( tz == wxT("CET") || tz == wxT("CEST") )
         {
             ms_country = Country_EEC;
         }
-        else if ( tz == _T("MSK") || tz == _T("MSD") )
+        else if ( tz == wxT("MSK") || tz == wxT("MSD") )
         {
             ms_country = Russia;
         }
-        else if ( tz == _T("AST") || tz == _T("ADT") ||
-                  tz == _T("EST") || tz == _T("EDT") ||
-                  tz == _T("CST") || tz == _T("CDT") ||
-                  tz == _T("MST") || tz == _T("MDT") ||
-                  tz == _T("PST") || tz == _T("PDT") )
+        else if ( tz == wxT("AST") || tz == wxT("ADT") ||
+                  tz == wxT("EST") || tz == wxT("EDT") ||
+                  tz == wxT("CST") || tz == wxT("CDT") ||
+                  tz == wxT("MST") || tz == wxT("MDT") ||
+                  tz == wxT("PST") || tz == wxT("PDT") )
         {
             ms_country = USA;
         }
@@ -1190,7 +1190,7 @@ wxDateTime wxDateTime::GetBeginDST(int y
         if ( !dt.SetToLastWeekDay(Sun, Mar, year) )
         {
             // weird...
-            wxFAIL_MSG( _T("no last Sunday in March?") );
+            wxFAIL_MSG( wxT("no last Sunday in March?") );
         }
 
         dt += wxTimeSpan::Hours(1);
@@ -1236,7 +1236,7 @@ wxDateTime wxDateTime::GetBeginDST(int y
                         if ( !dt.SetToLastWeekDay(Sun, Apr, year) )
                         {
                             // weird...
-                            wxFAIL_MSG( _T("no first Sunday in April?") );
+                            wxFAIL_MSG( wxT("no first Sunday in April?") );
                         }
                     }
                     else if ( year > 2006 )
@@ -1247,7 +1247,7 @@ wxDateTime wxDateTime::GetBeginDST(int y
                         if ( !dt.SetToWeekDay(Sun, 2, Mar, year) )
                         {
                             // weird...
-                            wxFAIL_MSG( _T("no second Sunday in March?") );
+                            wxFAIL_MSG( wxT("no second Sunday in March?") );
                         }
                     }
                     else
@@ -1255,7 +1255,7 @@ wxDateTime wxDateTime::GetBeginDST(int y
                         if ( !dt.SetToWeekDay(Sun, 1, Apr, year) )
                         {
                             // weird...
-                            wxFAIL_MSG( _T("no first Sunday in April?") );
+                            wxFAIL_MSG( wxT("no first Sunday in April?") );
                         }
                     }
 
@@ -1302,7 +1302,7 @@ wxDateTime wxDateTime::GetEndDST(int yea
         if ( !dt.SetToLastWeekDay(Sun, Oct, year) )
         {
             // weirder and weirder...
-            wxFAIL_MSG( _T("no last Sunday in October?") );
+            wxFAIL_MSG( wxT("no last Sunday in October?") );
         }
 
         dt += wxTimeSpan::Hours(1);
@@ -1338,7 +1338,7 @@ wxDateTime wxDateTime::GetEndDST(int yea
                         if ( !dt.SetToWeekDay(Sun, 1, Nov, year) )
                         {
                             // weird...
-                            wxFAIL_MSG( _T("no first Sunday in November?") );
+                            wxFAIL_MSG( wxT("no first Sunday in November?") );
                         }
                     }
                     else
@@ -1348,7 +1348,7 @@ wxDateTime wxDateTime::GetEndDST(int yea
                         if ( !dt.SetToLastWeekDay(Sun, Oct, year) )
                         {
                             // weirder and weirder...
-                            wxFAIL_MSG( _T("no last Sunday in October?") );
+                            wxFAIL_MSG( wxT("no last Sunday in October?") );
                         }
                     }
 
@@ -1395,7 +1395,7 @@ wxDateTime& wxDateTime::Set(const struct
                        tm2.tm_sec));
         }
 
-        wxFAIL_MSG( _T("mktime() failed") );
+        wxFAIL_MSG( wxT("mktime() failed") );
 
         *this = wxInvalidDateTime;
 
@@ -1418,13 +1418,13 @@ wxDateTime& wxDateTime::Set(wxDateTime_t
                       second < 62 &&
                       minute < 60 &&
                       millisec < 1000,
-                      _T("Invalid time in wxDateTime::Set()") );
+                      wxT("Invalid time in wxDateTime::Set()") );
 
     // get the current date from system
     struct tm tmstruct;
     struct tm *tm = GetTmNow(&tmstruct);
 
-    wxDATETIME_CHECK( tm, _T("wxLocaltime_r() failed") );
+    wxDATETIME_CHECK( tm, wxT("wxLocaltime_r() failed") );
 
     // make a copy so it isn't clobbered by the call to mktime() below
     struct tm tm1(*tm);
@@ -1458,12 +1458,12 @@ wxDateTime& wxDateTime::Set(wxDateTime_t
                       second < 62 &&
                       minute < 60 &&
                       millisec < 1000,
-                      _T("Invalid time in wxDateTime::Set()") );
+                      wxT("Invalid time in wxDateTime::Set()") );
 
     ReplaceDefaultYearMonthWithCurrent(&year, &month);
 
     wxDATETIME_CHECK( (0 < day) && (day <= GetNumberOfDays(month, year)),
-                      _T("Invalid date in wxDateTime::Set()") );
+                      wxT("Invalid date in wxDateTime::Set()") );
 
     // the range of time_t type (inclusive)
     static const int yearMinInRange = 1970;
@@ -1602,7 +1602,7 @@ unsigned long wxDateTime::GetAsDOS() con
     time_t ticks = GetTicks();
     struct tm tmstruct;
     struct tm *tm = wxLocaltime_r(&ticks, &tmstruct);
-    wxCHECK_MSG( tm, ULONG_MAX, _T("time can't be represented in DOS format") );
+    wxCHECK_MSG( tm, ULONG_MAX, wxT("time can't be represented in DOS format") );
 
     long year = tm->tm_year;
     year -= 80;
@@ -1634,7 +1634,7 @@ unsigned long wxDateTime::GetAsDOS() con
 
 wxDateTime::Tm wxDateTime::GetTm(const TimeZone& tz) const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     time_t time = GetTicks();
     if ( time != (time_t)-1 )
@@ -1648,7 +1648,7 @@ wxDateTime::Tm wxDateTime::GetTm(const T
             tm = wxLocaltime_r(&time, &tmstruct);
 
             // should never happen
-            wxCHECK_MSG( tm, Tm(), _T("wxLocaltime_r() failed") );
+            wxCHECK_MSG( tm, Tm(), wxT("wxLocaltime_r() failed") );
         }
         else
         {
@@ -1663,7 +1663,7 @@ wxDateTime::Tm wxDateTime::GetTm(const T
                 tm = wxGmtime_r(&time, &tmstruct);
 
                 // should never happen
-                wxCHECK_MSG( tm, Tm(), _T("wxGmtime_r() failed") );
+                wxCHECK_MSG( tm, Tm(), wxT("wxGmtime_r() failed") );
             }
             else
             {
@@ -1706,7 +1706,7 @@ wxDateTime::Tm wxDateTime::GetTm(const T
 
     // CREDIT: code below is by Scott E. Lee (but bugs are mine)
 
-    wxASSERT_MSG( jdn > -2, _T("JDN out of range") );
+    wxASSERT_MSG( jdn > -2, wxT("JDN out of range") );
 
     // calculate the century
     long temp = (jdn + JDN_OFFSET) * 4 - 1;
@@ -1737,8 +1737,8 @@ wxDateTime::Tm wxDateTime::GetTm(const T
     year -= 4800;
 
     // check that the algorithm gave us something reasonable
-    wxASSERT_MSG( (0 < month) && (month <= 12), _T("invalid month") );
-    wxASSERT_MSG( (1 <= day) && (day < 32), _T("invalid day") );
+    wxASSERT_MSG( (0 < month) && (month <= 12), wxT("invalid month") );
+    wxASSERT_MSG( (1 <= day) && (day < 32), wxT("invalid day") );
 
     // construct Tm from these values
     Tm tm;
@@ -1763,7 +1763,7 @@ wxDateTime::Tm wxDateTime::GetTm(const T
 
 wxDateTime& wxDateTime::SetYear(int year)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     Tm tm(GetTm());
     tm.year = year;
@@ -1774,7 +1774,7 @@ wxDateTime& wxDateTime::SetYear(int year
 
 wxDateTime& wxDateTime::SetMonth(Month month)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     Tm tm(GetTm());
     tm.mon = month;
@@ -1785,7 +1785,7 @@ wxDateTime& wxDateTime::SetMonth(Month m
 
 wxDateTime& wxDateTime::SetDay(wxDateTime_t mday)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     Tm tm(GetTm());
     tm.mday = mday;
@@ -1796,7 +1796,7 @@ wxDateTime& wxDateTime::SetDay(wxDateTim
 
 wxDateTime& wxDateTime::SetHour(wxDateTime_t hour)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     Tm tm(GetTm());
     tm.hour = hour;
@@ -1807,7 +1807,7 @@ wxDateTime& wxDateTime::SetHour(wxDateTi
 
 wxDateTime& wxDateTime::SetMinute(wxDateTime_t min)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     Tm tm(GetTm());
     tm.min = min;
@@ -1818,7 +1818,7 @@ wxDateTime& wxDateTime::SetMinute(wxDate
 
 wxDateTime& wxDateTime::SetSecond(wxDateTime_t sec)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     Tm tm(GetTm());
     tm.sec = sec;
@@ -1829,7 +1829,7 @@ wxDateTime& wxDateTime::SetSecond(wxDate
 
 wxDateTime& wxDateTime::SetMillisecond(wxDateTime_t millisecond)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime") );
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime") );
 
     // we don't need to use GetTm() for this one
     m_time -= m_time % 1000l;
@@ -1867,7 +1867,7 @@ wxDateTime& wxDateTime::Add(const wxDate
     Set(tm);
 
     wxASSERT_MSG( IsSameTime(tm),
-                  _T("Add(wxDateSpan) shouldn't modify time") );
+                  wxT("Add(wxDateSpan) shouldn't modify time") );
 
     return *this;
 }
@@ -1887,7 +1887,7 @@ wxDateTime
 wxDateTime::SetToWeekOfYear(int year, wxDateTime_t numWeek, WeekDay wd)
 {
     wxASSERT_MSG( numWeek > 0,
-                  _T("invalid week number: weeks are counted from 1") );
+                  wxT("invalid week number: weeks are counted from 1") );
 
     // Jan 4 always lies in the 1st week of the year
     wxDateTime dt(4, Jan, year);
@@ -1951,7 +1951,7 @@ wxDateTime& wxDateTime::SetToLastMonthDa
 
 wxDateTime& wxDateTime::SetToWeekDayInSameWeek(WeekDay weekday, WeekFlags flags)
 {
-    wxDATETIME_CHECK( weekday != Inv_WeekDay, _T("invalid weekday") );
+    wxDATETIME_CHECK( weekday != Inv_WeekDay, wxT("invalid weekday") );
 
     int wdayDst = weekday,
         wdayThis = GetWeekDay();
@@ -1991,7 +1991,7 @@ wxDateTime& wxDateTime::SetToWeekDayInSa
 
 wxDateTime& wxDateTime::SetToNextWeekDay(WeekDay weekday)
 {
-    wxDATETIME_CHECK( weekday != Inv_WeekDay, _T("invalid weekday") );
+    wxDATETIME_CHECK( weekday != Inv_WeekDay, wxT("invalid weekday") );
 
     int diff;
     WeekDay wdayThis = GetWeekDay();
@@ -2015,7 +2015,7 @@ wxDateTime& wxDateTime::SetToNextWeekDay
 
 wxDateTime& wxDateTime::SetToPrevWeekDay(WeekDay weekday)
 {
-    wxDATETIME_CHECK( weekday != Inv_WeekDay, _T("invalid weekday") );
+    wxDATETIME_CHECK( weekday != Inv_WeekDay, wxT("invalid weekday") );
 
     int diff;
     WeekDay wdayThis = GetWeekDay();
@@ -2042,7 +2042,7 @@ bool wxDateTime::SetToWeekDay(WeekDay we
                               Month month,
                               int year)
 {
-    wxCHECK_MSG( weekday != Inv_WeekDay, false, _T("invalid weekday") );
+    wxCHECK_MSG( weekday != Inv_WeekDay, false, wxT("invalid weekday") );
 
     // we don't check explicitly that -5 <= n <= 5 because we will return false
     // anyhow in such case - but may be should still give an assert for it?
@@ -2199,7 +2199,7 @@ wxDateTime& wxDateTime::SetToYearDay(wxD
 {
     int year = GetYear();
     wxDATETIME_CHECK( (0 < yday) && (yday <= GetNumberOfDays(year)),
-                      _T("invalid year day") );
+                      wxT("invalid year day") );
 
     bool isLeap = IsLeapYear(year);
     for ( Month mon = Jan; mon < Inv_Month; wxNextMonth(mon) )
@@ -2240,7 +2240,7 @@ double wxDateTime::GetRataDie() const
 int wxDateTime::IsDST(wxDateTime::Country country) const
 {
     wxCHECK_MSG( country == Country_Default, -1,
-                 _T("country support not implemented") );
+                 wxT("country support not implemented") );
 
     // use the C RTL for the dates in the standard range
     time_t timet = GetTicks();
@@ -2249,7 +2249,7 @@ int wxDateTime::IsDST(wxDateTime::Countr
         struct tm tmstruct;
         tm *tm = wxLocaltime_r(&timet, &tmstruct);
 
-        wxCHECK_MSG( tm, -1, _T("wxLocaltime_r() failed") );
+        wxCHECK_MSG( tm, -1, wxT("wxLocaltime_r() failed") );
 
         return tm->tm_isdst;
     }
@@ -2303,14 +2303,14 @@ wxDateTime& wxDateTime::MakeFromTimezone
 
 wxString wxDateTime::Format(const wxChar *format, const TimeZone& tz) const
 {
-    wxCHECK_MSG( format, wxEmptyString, _T("NULL format in wxDateTime::Format") );
+    wxCHECK_MSG( format, wxEmptyString, wxT("NULL format in wxDateTime::Format") );
 
     time_t time = GetTicks();
 
     // we have to use our own implementation if the date is out of range of
     // strftime() or if we use non standard specificators
 #ifdef HAVE_STRFTIME
-    if ( (time != (time_t)-1) && !wxStrstr(format, _T("%l")) )
+    if ( (time != (time_t)-1) && !wxStrstr(format, wxT("%l")) )
     {
         // use strftime()
         struct tm tmstruct;
@@ -2321,7 +2321,7 @@ wxString wxDateTime::Format(const wxChar
             tm = wxLocaltime_r(&time, &tmstruct);
 
             // should never happen
-            wxCHECK_MSG( tm, wxEmptyString, _T("wxLocaltime_r() failed") );
+            wxCHECK_MSG( tm, wxEmptyString, wxT("wxLocaltime_r() failed") );
         }
         else
         {
@@ -2337,7 +2337,7 @@ wxString wxDateTime::Format(const wxChar
                 tm = wxGmtime_r(&time, &tmstruct);
 
                 // should never happen
-                wxCHECK_MSG( tm, wxEmptyString, _T("wxGmtime_r() failed") );
+                wxCHECK_MSG( tm, wxEmptyString, wxT("wxGmtime_r() failed") );
             }
             else
             {
@@ -2373,7 +2373,7 @@ wxString wxDateTime::Format(const wxChar
     wxString tmp, res, fmt;
     for ( const wxChar *p = format; *p; p++ )
     {
-        if ( *p != _T('%') )
+        if ( *p != wxT('%') )
         {
             // copy as is
             res += *p;
@@ -2384,17 +2384,17 @@ wxString wxDateTime::Format(const wxChar
         // set the default format
         switch ( *++p )
         {
-            case _T('Y'):               // year has 4 digits
-                fmt = _T("%04d");
+            case wxT('Y'):               // year has 4 digits
+                fmt = wxT("%04d");
                 break;
 
-            case _T('j'):               // day of year has 3 digits
-            case _T('l'):               // milliseconds have 3 digits
-                fmt = _T("%03d");
+            case wxT('j'):               // day of year has 3 digits
+            case wxT('l'):               // milliseconds have 3 digits
+                fmt = wxT("%03d");
                 break;
 
-            case _T('w'):               // week day as number has only one
-                fmt = _T("%d");
+            case wxT('w'):               // week day as number has only one
+                fmt = wxT("%d");
                 break;
 
             default:
@@ -2402,7 +2402,7 @@ wxString wxDateTime::Format(const wxChar
                 // the format is "%02d" (for all the rest) or we have the
                 // field width preceding the format in which case it will
                 // override the default format anyhow
-                fmt = _T("%02d");
+                fmt = wxT("%02d");
         }
 
         bool restart = true;
@@ -2413,21 +2413,21 @@ wxString wxDateTime::Format(const wxChar
             // start of the format specification
             switch ( *p )
             {
-                case _T('a'):       // a weekday name
-                case _T('A'):
+                case wxT('a'):       // a weekday name
+                case wxT('A'):
                     // second parameter should be true for abbreviated names
                     res += GetWeekDayName(tm.GetWeekDay(),
-                                          *p == _T('a') ? Name_Abbr : Name_Full);
+                                          *p == wxT('a') ? Name_Abbr : Name_Full);
                     break;
 
-                case _T('b'):       // a month name
-                case _T('B'):
+                case wxT('b'):       // a month name
+                case wxT('B'):
                     res += GetMonthName(tm.mon,
-                                        *p == _T('b') ? Name_Abbr : Name_Full);
+                                        *p == wxT('b') ? Name_Abbr : Name_Full);
                     break;
 
-                case _T('c'):       // locale default date and time  representation
-                case _T('x'):       // locale default date representation
+                case wxT('c'):       // locale default date and time  representation
+                case wxT('x'):       // locale default date representation
 #ifdef HAVE_STRFTIME
                     //
                     // the problem: there is no way to know what do these format
@@ -2497,11 +2497,11 @@ wxString wxDateTime::Format(const wxChar
                         if (year>=2000) year-=28;
                         // at any rate, we couldn't go further than 1988 + 9 + 28!
                         wxASSERT_MSG( year < 2030,
-                                      _T("logic error in wxDateTime::Format") );
+                                      wxT("logic error in wxDateTime::Format") );
 
                         wxString strYear, strYear2;
-                        strYear.Printf(_T("%d"), year);
-                        strYear2.Printf(_T("%d"), year % 100);
+                        strYear.Printf(wxT("%d"), year);
+                        strYear2.Printf(wxT("%d"), year % 100);
 
                         // find four strings not occurring in format (this is surely
                         // not the optimal way of doing it... improvements welcome!)
@@ -2546,8 +2546,8 @@ wxString wxDateTime::Format(const wxChar
                         tmAdjusted.tm_mon = tm.mon;
                         tmAdjusted.tm_year = year - 1900;
                         tmAdjusted.tm_isdst = 0; // no DST, already adjusted
-                        wxString str = CallStrftime(*p == _T('c') ? _T("%c")
-                                                                  : _T("%x"),
+                        wxString str = CallStrftime(*p == wxT('c') ? wxT("%c")
+                                                                  : wxT("%x"),
                                                     &tmAdjusted);
 
                         // now replace the occurrence of 1999 with the real year
@@ -2556,8 +2556,8 @@ wxString wxDateTime::Format(const wxChar
                         // Any day,month hours and minutes components should be safe due
                         // to ensuring the range of the years.
                         wxString strYearReal, strYearReal2;
-                        strYearReal.Printf(_T("%04d"), yearReal);
-                        strYearReal2.Printf(_T("%02d"), yearReal % 100);
+                        strYearReal.Printf(wxT("%04d"), yearReal);
+                        strYearReal2.Printf(wxT("%02d"), yearReal % 100);
                         str.Replace(strYear, replacement3);
                         str.Replace(strYear2,replacement4);
                         str.Replace(replacement3, strYearReal);
@@ -2579,15 +2579,15 @@ wxString wxDateTime::Format(const wxChar
 #endif // HAVE_STRFTIME/!HAVE_STRFTIME
                     break;
 
-                case _T('d'):       // day of a month (01-31)
+                case wxT('d'):       // day of a month (01-31)
                     res += wxString::Format(fmt, tm.mday);
                     break;
 
-                case _T('H'):       // hour in 24h format (00-23)
+                case wxT('H'):       // hour in 24h format (00-23)
                     res += wxString::Format(fmt, tm.hour);
                     break;
 
-                case _T('I'):       // hour in 12h format (01-12)
+                case wxT('I'):       // hour in 12h format (01-12)
                     {
                         // 24h -> 12h, 0h -> 12h too
                         int hour12 = tm.hour > 12 ? tm.hour - 12
@@ -2596,76 +2596,76 @@ wxString wxDateTime::Format(const wxChar
                     }
                     break;
 
-                case _T('j'):       // day of the year
+                case wxT('j'):       // day of the year
                     res += wxString::Format(fmt, GetDayOfYear(tz));
                     break;
 
-                case _T('l'):       // milliseconds (NOT STANDARD)
+                case wxT('l'):       // milliseconds (NOT STANDARD)
                     res += wxString::Format(fmt, GetMillisecond(tz));
                     break;
 
-                case _T('m'):       // month as a number (01-12)
+                case wxT('m'):       // month as a number (01-12)
                     res += wxString::Format(fmt, tm.mon + 1);
                     break;
 
-                case _T('M'):       // minute as a decimal number (00-59)
+                case wxT('M'):       // minute as a decimal number (00-59)
                     res += wxString::Format(fmt, tm.min);
                     break;
 
-                case _T('p'):       // AM or PM string
+                case wxT('p'):       // AM or PM string
 #ifdef HAVE_STRFTIME
-                    res += CallStrftime(_T("%p"), &tmTimeOnly);
+                    res += CallStrftime(wxT("%p"), &tmTimeOnly);
 #else // !HAVE_STRFTIME
                     res += (tmTimeOnly.tm_hour > 12) ? wxT("pm") : wxT("am");
 #endif // HAVE_STRFTIME/!HAVE_STRFTIME
                     break;
 
-                case _T('S'):       // second as a decimal number (00-61)
+                case wxT('S'):       // second as a decimal number (00-61)
                     res += wxString::Format(fmt, tm.sec);
                     break;
 
-                case _T('U'):       // week number in the year (Sunday 1st week day)
+                case wxT('U'):       // week number in the year (Sunday 1st week day)
                     res += wxString::Format(fmt, GetWeekOfYear(Sunday_First, tz));
                     break;
 
-                case _T('W'):       // week number in the year (Monday 1st week day)
+                case wxT('W'):       // week number in the year (Monday 1st week day)
                     res += wxString::Format(fmt, GetWeekOfYear(Monday_First, tz));
                     break;
 
-                case _T('w'):       // weekday as a number (0-6), Sunday = 0
+                case wxT('w'):       // weekday as a number (0-6), Sunday = 0
                     res += wxString::Format(fmt, tm.GetWeekDay());
                     break;
 
-                // case _T('x'): -- handled with "%c"
+                // case wxT('x'): -- handled with "%c"
 
-                case _T('X'):       // locale default time representation
+                case wxT('X'):       // locale default time representation
                     // just use strftime() to format the time for us
 #ifdef HAVE_STRFTIME
-                    res += CallStrftime(_T("%X"), &tmTimeOnly);
+                    res += CallStrftime(wxT("%X"), &tmTimeOnly);
 #else // !HAVE_STRFTIME
                     res += wxString::Format(wxT("%02d:%02d:%02d"),tm.hour, tm.min, tm.sec);
 #endif // HAVE_STRFTIME/!HAVE_STRFTIME
                     break;
 
-                case _T('y'):       // year without century (00-99)
+                case wxT('y'):       // year without century (00-99)
                     res += wxString::Format(fmt, tm.year % 100);
                     break;
 
-                case _T('Y'):       // year with century
+                case wxT('Y'):       // year with century
                     res += wxString::Format(fmt, tm.year);
                     break;
 
-                case _T('Z'):       // timezone name
+                case wxT('Z'):       // timezone name
 #ifdef HAVE_STRFTIME
-                    res += CallStrftime(_T("%Z"), &tmTimeOnly);
+                    res += CallStrftime(wxT("%Z"), &tmTimeOnly);
 #endif
                     break;
 
                 default:
                     // is it the format width?
                     fmt.Empty();
-                    while ( *p == _T('-') || *p == _T('+') ||
-                            *p == _T(' ') || wxIsdigit(*p) )
+                    while ( *p == wxT('-') || *p == wxT('+') ||
+                            *p == wxT(' ') || wxIsdigit(*p) )
                     {
                         fmt += *p;
                     }
@@ -2673,8 +2673,8 @@ wxString wxDateTime::Format(const wxChar
                     if ( !fmt.empty() )
                     {
                         // we've only got the flags and width so far in fmt
-                        fmt.Prepend(_T('%'));
-                        fmt.Append(_T('d'));
+                        fmt.Prepend(wxT('%'));
+                        fmt.Append(wxT('d'));
 
                         restart = true;
 
@@ -2682,19 +2682,19 @@ wxString wxDateTime::Format(const wxChar
                     }
 
                     // no, it wasn't the width
-                    wxFAIL_MSG(_T("unknown format specificator"));
+                    wxFAIL_MSG(wxT("unknown format specificator"));
 
                     // fall through and just copy it nevertheless
 
-                case _T('%'):       // a percent sign
+                case wxT('%'):       // a percent sign
                     res += *p;
                     break;
 
                 case 0:             // the end of string
-                    wxFAIL_MSG(_T("missing format at the end of string"));
+                    wxFAIL_MSG(wxT("missing format at the end of string"));
 
                     // just put the '%' which was the last char in format
-                    res += _T('%');
+                    res += wxT('%');
                     break;
             }
         }
@@ -2713,10 +2713,10 @@ wxString wxDateTime::Format(const wxChar
 // TODO a great candidate for using reg exps
 const wxChar *wxDateTime::ParseRfc822Date(const wxChar* date)
 {
-    wxCHECK_MSG( date, (wxChar *)NULL, _T("NULL pointer in wxDateTime::Parse") );
+    wxCHECK_MSG( date, (wxChar *)NULL, wxT("NULL pointer in wxDateTime::Parse") );
 
     const wxChar *p = date;
-    const wxChar *comma = wxStrchr(p, _T(','));
+    const wxChar *comma = wxStrchr(p, wxT(','));
     if ( comma )
     {
         // the part before comma is the weekday
@@ -2725,9 +2725,9 @@ const wxChar *wxDateTime::ParseRfc822Dat
         // corresponds to the specfied date
         p = comma + 1;
 
-        if ( *p != _T(' ') )
+        if ( *p != wxT(' ') )
         {
-            wxLogDebug(_T("no space after weekday in RFC822 time spec"));
+            wxLogDebug(wxT("no space after weekday in RFC822 time spec"));
 
             return (wxChar *)NULL;
         }
@@ -2738,19 +2738,19 @@ const wxChar *wxDateTime::ParseRfc822Dat
     // the following 1 or 2 digits are the day number
     if ( !wxIsdigit(*p) )
     {
-        wxLogDebug(_T("day number expected in RFC822 time spec, none found"));
+        wxLogDebug(wxT("day number expected in RFC822 time spec, none found"));
 
         return (wxChar *)NULL;
     }
 
-    wxDateTime_t day = (wxDateTime_t)(*p++ - _T('0'));
+    wxDateTime_t day = (wxDateTime_t)(*p++ - wxT('0'));
     if ( wxIsdigit(*p) )
     {
         day *= 10;
-        day = (wxDateTime_t)(day + (*p++ - _T('0')));
+        day = (wxDateTime_t)(day + (*p++ - wxT('0')));
     }
 
-    if ( *p++ != _T(' ') )
+    if ( *p++ != wxT(' ') )
     {
         return (wxChar *)NULL;
     }
@@ -2758,40 +2758,40 @@ const wxChar *wxDateTime::ParseRfc822Dat
     // the following 3 letters specify the month
     wxString monName(p, 3);
     Month mon;
-    if ( monName == _T("Jan") )
+    if ( monName == wxT("Jan") )
         mon = Jan;
-    else if ( monName == _T("Feb") )
+    else if ( monName == wxT("Feb") )
         mon = Feb;
-    else if ( monName == _T("Mar") )
+    else if ( monName == wxT("Mar") )
         mon = Mar;
-    else if ( monName == _T("Apr") )
+    else if ( monName == wxT("Apr") )
         mon = Apr;
-    else if ( monName == _T("May") )
+    else if ( monName == wxT("May") )
         mon = May;
-    else if ( monName == _T("Jun") )
+    else if ( monName == wxT("Jun") )
         mon = Jun;
-    else if ( monName == _T("Jul") )
+    else if ( monName == wxT("Jul") )
         mon = Jul;
-    else if ( monName == _T("Aug") )
+    else if ( monName == wxT("Aug") )
         mon = Aug;
-    else if ( monName == _T("Sep") )
+    else if ( monName == wxT("Sep") )
         mon = Sep;
-    else if ( monName == _T("Oct") )
+    else if ( monName == wxT("Oct") )
         mon = Oct;
-    else if ( monName == _T("Nov") )
+    else if ( monName == wxT("Nov") )
         mon = Nov;
-    else if ( monName == _T("Dec") )
+    else if ( monName == wxT("Dec") )
         mon = Dec;
     else
     {
-        wxLogDebug(_T("Invalid RFC 822 month name '%s'"), monName.c_str());
+        wxLogDebug(wxT("Invalid RFC 822 month name '%s'"), monName.c_str());
 
         return (wxChar *)NULL;
     }
 
     p += 3;
 
-    if ( *p++ != _T(' ') )
+    if ( *p++ != wxT(' ') )
     {
         return (wxChar *)NULL;
     }
@@ -2803,7 +2803,7 @@ const wxChar *wxDateTime::ParseRfc822Dat
         return (wxChar *)NULL;
     }
 
-    int year = *p++ - _T('0');
+    int year = *p++ - wxT('0');
 
     if ( !wxIsdigit(*p) )
     {
@@ -2812,13 +2812,13 @@ const wxChar *wxDateTime::ParseRfc822Dat
     }
 
     year *= 10;
-    year += *p++ - _T('0');
+    year += *p++ - wxT('0');
 
     // is it a 2 digit year (as per original RFC 822) or a 4 digit one?
     if ( wxIsdigit(*p) )
     {
         year *= 10;
-        year += *p++ - _T('0');
+        year += *p++ - wxT('0');
 
         if ( !wxIsdigit(*p) )
         {
@@ -2827,10 +2827,10 @@ const wxChar *wxDateTime::ParseRfc822Dat
         }
 
         year *= 10;
-        year += *p++ - _T('0');
+        year += *p++ - wxT('0');
     }
 
-    if ( *p++ != _T(' ') )
+    if ( *p++ != wxT(' ') )
     {
         return (wxChar *)NULL;
     }
@@ -2841,7 +2841,7 @@ const wxChar *wxDateTime::ParseRfc822Dat
         return (wxChar *)NULL;
     }
 
-    wxDateTime_t hour = (wxDateTime_t)(*p++ - _T('0'));
+    wxDateTime_t hour = (wxDateTime_t)(*p++ - wxT('0'));
 
     if ( !wxIsdigit(*p) )
     {
@@ -2849,9 +2849,9 @@ const wxChar *wxDateTime::ParseRfc822Dat
     }
 
     hour *= 10;
-    hour = (wxDateTime_t)(hour + (*p++ - _T('0')));
+    hour = (wxDateTime_t)(hour + (*p++ - wxT('0')));
 
-    if ( *p++ != _T(':') )
+    if ( *p++ != wxT(':') )
     {
         return (wxChar *)NULL;
     }
@@ -2861,7 +2861,7 @@ const wxChar *wxDateTime::ParseRfc822Dat
         return (wxChar *)NULL;
     }
 
-    wxDateTime_t min = (wxDateTime_t)(*p++ - _T('0'));
+    wxDateTime_t min = (wxDateTime_t)(*p++ - wxT('0'));
 
     if ( !wxIsdigit(*p) )
     {
@@ -2869,10 +2869,10 @@ const wxChar *wxDateTime::ParseRfc822Dat
     }
 
     min *= 10;
-    min = (wxDateTime_t)(min + *p++ - _T('0'));
+    min = (wxDateTime_t)(min + *p++ - wxT('0'));
 
     wxDateTime_t sec = 0;
-    if ( *p == _T(':') )
+    if ( *p == wxT(':') )
     {
         p++;
         if ( !wxIsdigit(*p) )
@@ -2880,7 +2880,7 @@ const wxChar *wxDateTime::ParseRfc822Dat
             return (wxChar *)NULL;
         }
 
-        sec = (wxDateTime_t)(*p++ - _T('0'));
+        sec = (wxDateTime_t)(*p++ - wxT('0'));
 
         if ( !wxIsdigit(*p) )
         {
@@ -2888,20 +2888,20 @@ const wxChar *wxDateTime::ParseRfc822Dat
         }
 
         sec *= 10;
-        sec = (wxDateTime_t)(sec + *p++ - _T('0'));
+        sec = (wxDateTime_t)(sec + *p++ - wxT('0'));
     }
 
-    if ( *p++ != _T(' ') )
+    if ( *p++ != wxT(' ') )
     {
         return (wxChar *)NULL;
     }
 
     // and now the interesting part: the timezone
     int offset wxDUMMY_INITIALIZE(0);
-    if ( *p == _T('-') || *p == _T('+') )
+    if ( *p == wxT('-') || *p == wxT('+') )
     {
         // the explicit offset given: it has the form of hhmm
-        bool plus = *p++ == _T('+');
+        bool plus = *p++ == wxT('+');
 
         if ( !wxIsdigit(*p) || !wxIsdigit(*(p + 1)) )
         {
@@ -2909,7 +2909,7 @@ const wxChar *wxDateTime::ParseRfc822Dat
         }
 
         // hours
-        offset = MIN_PER_HOUR*(10*(*p - _T('0')) + (*(p + 1) - _T('0')));
+        offset = MIN_PER_HOUR*(10*(*p - wxT('0')) + (*(p + 1) - wxT('0')));
 
         p += 2;
 
@@ -2919,7 +2919,7 @@ const wxChar *wxDateTime::ParseRfc822Dat
         }
 
         // minutes
-        offset += 10*(*p - _T('0')) + (*(p + 1) - _T('0'));
+        offset += 10*(*p - wxT('0')) + (*(p + 1) - wxT('0'));
 
         if ( !plus )
         {
@@ -2943,44 +2943,44 @@ const wxChar *wxDateTime::ParseRfc822Dat
                 +1, +2, +3, +4, +5, +6, +7, +8, +9, +10, +11, +12, 0
             };
 
-            if ( *p < _T('A') || *p > _T('Z') || *p == _T('J') )
+            if ( *p < wxT('A') || *p > wxT('Z') || *p == wxT('J') )
             {
-                wxLogDebug(_T("Invalid militaty timezone '%c'"), *p);
+                wxLogDebug(wxT("Invalid militaty timezone '%c'"), *p);
 
                 return (wxChar *)NULL;
             }
 
-            offset = offsets[*p++ - _T('A')];
+            offset = offsets[*p++ - wxT('A')];
         }
         else
         {
             // abbreviation
             wxString tz = p;
-            if ( tz == _T("UT") || tz == _T("UTC") || tz == _T("GMT") )
+            if ( tz == wxT("UT") || tz == wxT("UTC") || tz == wxT("GMT") )
                 offset = 0;
-            else if ( tz == _T("AST") )
+            else if ( tz == wxT("AST") )
                 offset = AST - GMT0;
-            else if ( tz == _T("ADT") )
+            else if ( tz == wxT("ADT") )
                 offset = ADT - GMT0;
-            else if ( tz == _T("EST") )
+            else if ( tz == wxT("EST") )
                 offset = EST - GMT0;
-            else if ( tz == _T("EDT") )
+            else if ( tz == wxT("EDT") )
                 offset = EDT - GMT0;
-            else if ( tz == _T("CST") )
+            else if ( tz == wxT("CST") )
                 offset = CST - GMT0;
-            else if ( tz == _T("CDT") )
+            else if ( tz == wxT("CDT") )
                 offset = CDT - GMT0;
-            else if ( tz == _T("MST") )
+            else if ( tz == wxT("MST") )
                 offset = MST - GMT0;
-            else if ( tz == _T("MDT") )
+            else if ( tz == wxT("MDT") )
                 offset = MDT - GMT0;
-            else if ( tz == _T("PST") )
+            else if ( tz == wxT("PST") )
                 offset = PST - GMT0;
-            else if ( tz == _T("PDT") )
+            else if ( tz == wxT("PDT") )
                 offset = PDT - GMT0;
             else
             {
-                wxLogDebug(_T("Unknown RFC 822 timezone '%s'"), p);
+                wxLogDebug(wxT("Unknown RFC 822 timezone '%s'"), p);
 
                 return (wxChar *)NULL;
             }
@@ -3026,7 +3026,7 @@ static wxString GetLocaleDateFormat()
         wxChar fmt[81];
         if ( ::GetLocaleInfo(lcid, LOCALE_SSHORTDATE, fmt, WXSIZEOF(fmt)) )
         {
-            wxChar chLast = _T('\0');
+            wxChar chLast = wxT('\0');
             size_t lastCount = 0;
             for ( const wxChar *p = fmt; /* NUL handled inside */; p++ )
             {
@@ -3039,10 +3039,10 @@ static wxString GetLocaleDateFormat()
                 switch ( *p )
                 {
                     // these characters come in groups, start counting them
-                    case _T('d'):
-                    case _T('M'):
-                    case _T('y'):
-                    case _T('g'):
+                    case wxT('d'):
+                    case wxT('M'):
+                    case wxT('y'):
+                    case wxT('g'):
                         chLast = *p;
                         lastCount = 1;
                         break;
@@ -3053,7 +3053,7 @@ static wxString GetLocaleDateFormat()
                         {
                             switch ( chLast )
                             {
-                                case _T('d'):
+                                case wxT('d'):
                                     switch ( lastCount )
                                     {
                                         case 1: // d
@@ -3061,91 +3061,91 @@ static wxString GetLocaleDateFormat()
                                             // these two are the same as we
                                             // don't distinguish between 1 and
                                             // 2 digits for days
-                                            fmtWX += _T("%d");
+                                            fmtWX += wxT("%d");
                                             break;
 
                                         case 3: // ddd
-                                            fmtWX += _T("%a");
+                                            fmtWX += wxT("%a");
                                             break;
 
                                         case 4: // dddd
-                                            fmtWX += _T("%A");
+                                            fmtWX += wxT("%A");
                                             break;
 
                                         default:
-                                            wxFAIL_MSG( _T("too many 'd's") );
+                                            wxFAIL_MSG( wxT("too many 'd's") );
                                     }
                                     break;
 
-                                case _T('M'):
+                                case wxT('M'):
                                     switch ( lastCount )
                                     {
                                         case 1: // M
                                         case 2: // MM
                                             // as for 'd' and 'dd' above
-                                            fmtWX += _T("%m");
+                                            fmtWX += wxT("%m");
                                             break;
 
                                         case 3:
-                                            fmtWX += _T("%b");
+                                            fmtWX += wxT("%b");
                                             break;
 
                                         case 4:
-                                            fmtWX += _T("%B");
+                                            fmtWX += wxT("%B");
                                             break;
 
                                         default:
-                                            wxFAIL_MSG( _T("too many 'M's") );
+                                            wxFAIL_MSG( wxT("too many 'M's") );
                                     }
                                     break;
 
-                                case _T('y'):
+                                case wxT('y'):
                                     switch ( lastCount )
                                     {
                                         case 1: // y
                                         case 2: // yy
-                                            fmtWX += _T("%y");
+                                            fmtWX += wxT("%y");
                                             break;
 
                                         case 4: // yyyy
-                                            fmtWX += _T("%Y");
+                                            fmtWX += wxT("%Y");
                                             break;
 
                                         default:
-                                            wxFAIL_MSG( _T("wrong number of 'y's") );
+                                            wxFAIL_MSG( wxT("wrong number of 'y's") );
                                     }
                                     break;
 
-                                case _T('g'):
+                                case wxT('g'):
                                     // strftime() doesn't have era string,
                                     // ignore this format
                                     wxASSERT_MSG( lastCount <= 2,
-                                                  _T("too many 'g's") );
+                                                  wxT("too many 'g's") );
                                     break;
 
                                 default:
-                                    wxFAIL_MSG( _T("unreachable") );
+                                    wxFAIL_MSG( wxT("unreachable") );
                             }
 
-                            chLast = _T('\0');
+                            chLast = wxT('\0');
                             lastCount = 0;
                         }
 
                         // not a special character so must be just a separator,
                         // treat as is
-                        if ( *p != _T('\0') )
+                        if ( *p != wxT('\0') )
                         {
-                            if ( *p == _T('%') )
+                            if ( *p == wxT('%') )
                             {
                                 // this one needs to be escaped
-                                fmtWX += _T('%');
+                                fmtWX += wxT('%');
                             }
 
                             fmtWX += *p;
                         }
                 }
 
-                if ( *p == _T('\0') )
+                if ( *p == wxT('\0') )
                     break;
             }
         }
@@ -3164,7 +3164,7 @@ const wxChar *wxDateTime::ParseFormat(co
                                       const wxDateTime& dateDef)
 {
     wxCHECK_MSG( date && format, (wxChar *)NULL,
-                 _T("NULL pointer in wxDateTime::ParseFormat()") );
+                 wxT("NULL pointer in wxDateTime::ParseFormat()") );
 
     wxString str;
     unsigned long num;
@@ -3195,7 +3195,7 @@ const wxChar *wxDateTime::ParseFormat(co
     const wxChar *input = date;
     for ( const wxChar *fmt = format; *fmt; fmt++ )
     {
-        if ( *fmt != _T('%') )
+        if ( *fmt != wxT('%') )
         {
             if ( wxIsspace(*fmt) )
             {
@@ -3228,7 +3228,7 @@ const wxChar *wxDateTime::ParseFormat(co
         while ( wxIsdigit(*++fmt) )
         {
             width *= 10;
-            width += *fmt - _T('0');
+            width += *fmt - wxT('0');
         }
 
         // the default widths for the various fields
@@ -3236,16 +3236,16 @@ const wxChar *wxDateTime::ParseFormat(co
         {
             switch ( *fmt )
             {
-                case _T('Y'):               // year has 4 digits
+                case wxT('Y'):               // year has 4 digits
                     width = 4;
                     break;
 
-                case _T('j'):               // day of year has 3 digits
-                case _T('l'):               // milliseconds have 3 digits
+                case wxT('j'):               // day of year has 3 digits
+                case wxT('l'):               // milliseconds have 3 digits
                     width = 3;
                     break;
 
-                case _T('w'):               // week day as number has only one
+                case wxT('w'):               // week day as number has only one
                     width = 1;
                     break;
 
@@ -3258,10 +3258,10 @@ const wxChar *wxDateTime::ParseFormat(co
         // then the format itself
         switch ( *fmt )
         {
-            case _T('a'):       // a weekday name
-            case _T('A'):
+            case wxT('a'):       // a weekday name
+            case wxT('A'):
                 {
-                    int flag = *fmt == _T('a') ? Name_Abbr : Name_Full;
+                    int flag = *fmt == wxT('a') ? Name_Abbr : Name_Full;
                     wday = GetWeekDayFromName(GetAlphaToken(input), flag);
                     if ( wday == Inv_WeekDay )
                     {
@@ -3272,10 +3272,10 @@ const wxChar *wxDateTime::ParseFormat(co
                 haveWDay = true;
                 break;
 
-            case _T('b'):       // a month name
-            case _T('B'):
+            case wxT('b'):       // a month name
+            case wxT('B'):
                 {
-                    int flag = *fmt == _T('b') ? Name_Abbr : Name_Full;
+                    int flag = *fmt == wxT('b') ? Name_Abbr : Name_Full;
                     mon = GetMonthFromName(GetAlphaToken(input), flag);
                     if ( mon == Inv_Month )
                     {
@@ -3286,23 +3286,23 @@ const wxChar *wxDateTime::ParseFormat(co
                 haveMon = true;
                 break;
 
-            case _T('c'):       // locale default date and time  representation
+            case wxT('c'):       // locale default date and time  representation
                 {
                     wxDateTime dt;
 
                     // this is the format which corresponds to ctime() output
                     // and strptime("%c") should parse it, so try it first
-                    static const wxChar *fmtCtime = _T("%a %b %d %H:%M:%S %Y");
+                    static const wxChar *fmtCtime = wxT("%a %b %d %H:%M:%S %Y");
 
                     const wxChar *result = dt.ParseFormat(input, fmtCtime);
                     if ( !result )
                     {
-                        result = dt.ParseFormat(input, _T("%x %X"));
+                        result = dt.ParseFormat(input, wxT("%x %X"));
                     }
 
                     if ( !result )
                     {
-                        result = dt.ParseFormat(input, _T("%X %x"));
+                        result = dt.ParseFormat(input, wxT("%X %x"));
                     }
 
                     if ( !result )
@@ -3328,7 +3328,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 }
                 break;
 
-            case _T('d'):       // day of a month (01-31)
+            case wxT('d'):       // day of a month (01-31)
                 if ( !GetNumericToken(width, input, &num) ||
                         (num > 31) || (num < 1) )
                 {
@@ -3342,7 +3342,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 mday = (wxDateTime_t)num;
                 break;
 
-            case _T('H'):       // hour in 24h format (00-23)
+            case wxT('H'):       // hour in 24h format (00-23)
                 if ( !GetNumericToken(width, input, &num) || (num > 23) )
                 {
                     // no match
@@ -3353,7 +3353,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 hour = (wxDateTime_t)num;
                 break;
 
-            case _T('I'):       // hour in 12h format (01-12)
+            case wxT('I'):       // hour in 12h format (01-12)
                 if ( !GetNumericToken(width, input, &num) || !num || (num > 12) )
                 {
                     // no match
@@ -3365,7 +3365,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 hour = (wxDateTime_t)(num % 12);        // 12 should be 0
                 break;
 
-            case _T('j'):       // day of the year
+            case wxT('j'):       // day of the year
                 if ( !GetNumericToken(width, input, &num) || !num || (num > 366) )
                 {
                     // no match
@@ -3376,7 +3376,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 yday = (wxDateTime_t)num;
                 break;
 
-            case _T('m'):       // month as a number (01-12)
+            case wxT('m'):       // month as a number (01-12)
                 if ( !GetNumericToken(width, input, &num) || !num || (num > 12) )
                 {
                     // no match
@@ -3387,7 +3387,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 mon = (Month)(num - 1);
                 break;
 
-            case _T('M'):       // minute as a decimal number (00-59)
+            case wxT('M'):       // minute as a decimal number (00-59)
                 if ( !GetNumericToken(width, input, &num) || (num > 59) )
                 {
                     // no match
@@ -3398,7 +3398,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 min = (wxDateTime_t)num;
                 break;
 
-            case _T('p'):       // AM or PM string
+            case wxT('p'):       // AM or PM string
                 {
                     wxString am, pm, token = GetAlphaToken(input);
 
@@ -3417,10 +3417,10 @@ const wxChar *wxDateTime::ParseFormat(co
                 }
                 break;
 
-            case _T('r'):       // time as %I:%M:%S %p
+            case wxT('r'):       // time as %I:%M:%S %p
                 {
                     wxDateTime dt;
-                    input = dt.ParseFormat(input, _T("%I:%M:%S %p"));
+                    input = dt.ParseFormat(input, wxT("%I:%M:%S %p"));
                     if ( !input )
                     {
                         // no match
@@ -3436,10 +3436,10 @@ const wxChar *wxDateTime::ParseFormat(co
                 }
                 break;
 
-            case _T('R'):       // time as %H:%M
+            case wxT('R'):       // time as %H:%M
                 {
                     wxDateTime dt;
-                    input = dt.ParseFormat(input, _T("%H:%M"));
+                    input = dt.ParseFormat(input, wxT("%H:%M"));
                     if ( !input )
                     {
                         // no match
@@ -3454,7 +3454,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 }
                 break;
 
-            case _T('S'):       // second as a decimal number (00-61)
+            case wxT('S'):       // second as a decimal number (00-61)
                 if ( !GetNumericToken(width, input, &num) || (num > 61) )
                 {
                     // no match
@@ -3465,10 +3465,10 @@ const wxChar *wxDateTime::ParseFormat(co
                 sec = (wxDateTime_t)num;
                 break;
 
-            case _T('T'):       // time as %H:%M:%S
+            case wxT('T'):       // time as %H:%M:%S
                 {
                     wxDateTime dt;
-                    input = dt.ParseFormat(input, _T("%H:%M:%S"));
+                    input = dt.ParseFormat(input, wxT("%H:%M:%S"));
                     if ( !input )
                     {
                         // no match
@@ -3484,7 +3484,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 }
                 break;
 
-            case _T('w'):       // weekday as a number (0-6), Sunday = 0
+            case wxT('w'):       // weekday as a number (0-6), Sunday = 0
                 if ( !GetNumericToken(width, input, &num) || (wday > 6) )
                 {
                     // no match
@@ -3495,7 +3495,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 wday = (WeekDay)num;
                 break;
 
-            case _T('x'):       // locale default date representation
+            case wxT('x'):       // locale default date representation
 #ifdef HAVE_STRPTIME
                 // try using strptime() -- it may fail even if the input is
                 // correct but the date is out of range, so we will fall back
@@ -3534,13 +3534,13 @@ const wxChar *wxDateTime::ParseFormat(co
                         if ( IsWestEuropeanCountry(GetCountry()) ||
                              GetCountry() == Russia )
                         {
-                            fmtDate = _T("%d/%m/%y");
-                            fmtDateAlt = _T("%m/%d/%y");
+                            fmtDate = wxT("%d/%m/%y");
+                            fmtDateAlt = wxT("%m/%d/%y");
                         }
                         else // assume USA
                         {
-                            fmtDate = _T("%m/%d/%y");
-                            fmtDateAlt = _T("%d/%m/%y");
+                            fmtDate = wxT("%m/%d/%y");
+                            fmtDateAlt = wxT("%d/%m/%y");
                         }
                     }
 
@@ -3571,7 +3571,7 @@ const wxChar *wxDateTime::ParseFormat(co
 
                 break;
 
-            case _T('X'):       // locale default time representation
+            case wxT('X'):       // locale default time representation
 #ifdef HAVE_STRPTIME
                 {
                     // use strptime() to do it for us (FIXME !Unicode friendly)
@@ -3598,10 +3598,10 @@ const wxChar *wxDateTime::ParseFormat(co
                     // common cases
                     wxDateTime dt;
 
-                    const wxChar *result = dt.ParseFormat(input, _T("%T"));
+                    const wxChar *result = dt.ParseFormat(input, wxT("%T"));
                     if ( !result )
                     {
-                        result = dt.ParseFormat(input, _T("%r"));
+                        result = dt.ParseFormat(input, wxT("%r"));
                     }
 
                     if ( !result )
@@ -3622,7 +3622,7 @@ const wxChar *wxDateTime::ParseFormat(co
 #endif // HAVE_STRPTIME/!HAVE_STRPTIME
                 break;
 
-            case _T('y'):       // year without century (00-99)
+            case wxT('y'):       // year without century (00-99)
                 if ( !GetNumericToken(width, input, &num) || (num > 99) )
                 {
                     // no match
@@ -3636,7 +3636,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 year = (num > 30 ? 1900 : 2000) + (wxDateTime_t)num;
                 break;
 
-            case _T('Y'):       // year with century
+            case wxT('Y'):       // year with century
                 if ( !GetNumericToken(width, input, &num) )
                 {
                     // no match
@@ -3647,12 +3647,12 @@ const wxChar *wxDateTime::ParseFormat(co
                 year = (wxDateTime_t)num;
                 break;
 
-            case _T('Z'):       // timezone name
-                wxFAIL_MSG(_T("TODO"));
+            case wxT('Z'):       // timezone name
+                wxFAIL_MSG(wxT("TODO"));
                 break;
 
-            case _T('%'):       // a percent sign
-                if ( *input++ != _T('%') )
+            case wxT('%'):       // a percent sign
+                if ( *input++ != wxT('%') )
                 {
                     // no match
                     return (wxChar *)NULL;
@@ -3660,7 +3660,7 @@ const wxChar *wxDateTime::ParseFormat(co
                 break;
 
             case 0:             // the end of string
-                wxFAIL_MSG(_T("unexpected format end"));
+                wxFAIL_MSG(wxT("unexpected format end"));
 
                 // fall through
 
@@ -3702,7 +3702,7 @@ const wxChar *wxDateTime::ParseFormat(co
     {
         if ( mday > GetNumOfDaysInMonth(tm.year, mon) )
         {
-            wxLogDebug(_T("bad month day in wxDateTime::ParseFormat"));
+            wxLogDebug(wxT("bad month day in wxDateTime::ParseFormat"));
 
             return (wxChar *)NULL;
         }
@@ -3714,7 +3714,7 @@ const wxChar *wxDateTime::ParseFormat(co
     {
         if ( yday > GetNumberOfDays(tm.year) )
         {
-            wxLogDebug(_T("bad year day in wxDateTime::ParseFormat"));
+            wxLogDebug(wxT("bad year day in wxDateTime::ParseFormat"));
 
             return (wxChar *)NULL;
         }
@@ -3754,7 +3754,7 @@ const wxChar *wxDateTime::ParseFormat(co
     // finally check that the week day is consistent -- if we had it
     if ( haveWDay && GetWeekDay() != wday )
     {
-        wxLogDebug(_T("inconsistsnet week day in wxDateTime::ParseFormat()"));
+        wxLogDebug(wxT("inconsistsnet week day in wxDateTime::ParseFormat()"));
 
         return NULL;
     }
@@ -3764,7 +3764,7 @@ const wxChar *wxDateTime::ParseFormat(co
 
 const wxChar *wxDateTime::ParseDateTime(const wxChar *date)
 {
-    wxCHECK_MSG( date, (wxChar *)NULL, _T("NULL pointer in wxDateTime::Parse") );
+    wxCHECK_MSG( date, (wxChar *)NULL, wxT("NULL pointer in wxDateTime::Parse") );
 
     // Set to current day and hour, so strings like '14:00' becomes today at
     // 14, not some other random date
@@ -3816,7 +3816,7 @@ const wxChar *wxDateTime::ParseDate(cons
     // "today" (for wxDate compatibility) and digits only otherwise (and not
     // all esoteric constructions ParseDateTime() knows about)
 
-    wxCHECK_MSG( date, (wxChar *)NULL, _T("NULL pointer in wxDateTime::Parse") );
+    wxCHECK_MSG( date, (wxChar *)NULL, wxT("NULL pointer in wxDateTime::Parse") );
 
     const wxChar *p = date;
     while ( wxIsspace(*p) )
@@ -3877,7 +3877,7 @@ const wxChar *wxDateTime::ParseDate(cons
 
     // tokenize the string
     size_t nPosCur = 0;
-    static const wxChar *dateDelimiters = _T(".,/-\t\r\n ");
+    static const wxChar *dateDelimiters = wxT(".,/-\t\r\n ");
     wxStringTokenizer tok(p, dateDelimiters);
     while ( tok.HasMoreTokens() )
     {
@@ -4066,7 +4066,7 @@ const wxChar *wxDateTime::ParseDate(cons
     // parse - in any case, see if we can construct a date from what we have
     if ( !haveDay && !haveWDay )
     {
-        wxLogDebug(_T("ParseDate: no day, no weekday hence no date."));
+        wxLogDebug(wxT("ParseDate: no day, no weekday hence no date."));
 
         return NULL;
     }
@@ -4105,7 +4105,7 @@ const wxChar *wxDateTime::ParseDate(cons
         if ( !haveMon )
         {
             // if we give the year, month and day must be given too
-            wxLogDebug(_T("ParseDate: day and month should be specified if year is."));
+            wxLogDebug(wxT("ParseDate: day and month should be specified if year is."));
 
             return NULL;
         }
@@ -4136,7 +4136,7 @@ const wxChar *wxDateTime::ParseDate(cons
             if ( GetWeekDay() != wday )
             {
                 // inconsistency detected
-                wxLogDebug(_T("ParseDate: inconsistent day/weekday."));
+                wxLogDebug(wxT("ParseDate: inconsistent day/weekday."));
 
                 return (wxChar *)NULL;
             }
@@ -4163,7 +4163,7 @@ const wxChar *wxDateTime::ParseDate(cons
 
 const wxChar *wxDateTime::ParseTime(const wxChar *time)
 {
-    wxCHECK_MSG( time, (wxChar *)NULL, _T("NULL pointer in wxDateTime::Parse") );
+    wxCHECK_MSG( time, (wxChar *)NULL, wxT("NULL pointer in wxDateTime::Parse") );
 
     // first try some extra things
     static const struct
@@ -4194,43 +4194,43 @@ const wxChar *wxDateTime::ParseTime(cons
     // shortest
 
     // 12hour with AM/PM?
-    const wxChar *result = ParseFormat(time, _T("%I:%M:%S %p"));
+    const wxChar *result = ParseFormat(time, wxT("%I:%M:%S %p"));
 
     if ( !result )
     {
         // normally, it's the same, but why not try it?
-        result = ParseFormat(time, _T("%H:%M:%S"));
+        result = ParseFormat(time, wxT("%H:%M:%S"));
     }
 
     if ( !result )
     {
         // 12hour with AM/PM but without seconds?
-        result = ParseFormat(time, _T("%I:%M %p"));
+        result = ParseFormat(time, wxT("%I:%M %p"));
     }
 
     if ( !result )
     {
         // without seconds?
-        result = ParseFormat(time, _T("%H:%M"));
+        result = ParseFormat(time, wxT("%H:%M"));
     }
 
     if ( !result )
     {
         // just the hour and AM/PM?
-        result = ParseFormat(time, _T("%I %p"));
+        result = ParseFormat(time, wxT("%I %p"));
     }
 
     if ( !result )
     {
         // just the hour?
-        result = ParseFormat(time, _T("%H"));
+        result = ParseFormat(time, wxT("%H"));
     }
 
     if ( !result )
     {
         // parse the standard format: normally it is one of the formats above
         // but it may be set to something completely different by the user
-        result = ParseFormat(time, _T("%X"));
+        result = ParseFormat(time, wxT("%X"));
     }
 
     // TODO: parse timezones
@@ -4302,11 +4302,11 @@ wxString wxTimeSpan::Format(const wxChar
     if ( IsNegative() )
     {
         wxString str(Negate().Format(format));
-        return _T("-") + str;
+        return wxT("-") + str;
     }
 
     wxCHECK_MSG( format, wxEmptyString,
-                 _T("NULL format in wxTimeSpan::Format") );
+                 wxT("NULL format in wxTimeSpan::Format") );
 
     wxString str;
     str.Alloc(wxStrlen(format));
@@ -4331,10 +4331,10 @@ wxString wxTimeSpan::Format(const wxChar
     {
         wxChar ch = *pch;
 
-        if ( ch == _T('%') )
+        if ( ch == wxT('%') )
         {
             // the start of the format specification of the printf() below
-            wxString fmtPrefix(_T('%'));
+            wxString fmtPrefix(wxT('%'));
 
             // the number
             long n;
@@ -4346,16 +4346,16 @@ wxString wxTimeSpan::Format(const wxChar
             switch ( ch )
             {
                 default:
-                    wxFAIL_MSG( _T("invalid format character") );
+                    wxFAIL_MSG( wxT("invalid format character") );
                     // fall through
 
-                case _T('%'):
+                case wxT('%'):
                     str += ch;
 
                     // skip the part below switch
                     continue;
 
-                case _T('D'):
+                case wxT('D'):
                     n = GetDays();
                     if ( partBiggest < Part_Day )
                     {
@@ -4367,12 +4367,12 @@ wxString wxTimeSpan::Format(const wxChar
                     }
                     break;
 
-                case _T('E'):
+                case wxT('E'):
                     partBiggest = Part_Week;
                     n = GetWeeks();
                     break;
 
-                case _T('H'):
+                case wxT('H'):
                     n = GetHours();
                     if ( partBiggest < Part_Hour )
                     {
@@ -4386,7 +4386,7 @@ wxString wxTimeSpan::Format(const wxChar
                     digits = 2;
                     break;
 
-                case _T('l'):
+                case wxT('l'):
                     n = GetMilliseconds().ToLong();
                     if ( partBiggest < Part_MSec )
                     {
@@ -4398,7 +4398,7 @@ wxString wxTimeSpan::Format(const wxChar
                     digits = 3;
                     break;
 
-                case _T('M'):
+                case wxT('M'):
                     n = GetMinutes();
                     if ( partBiggest < Part_Min )
                     {
@@ -4412,7 +4412,7 @@ wxString wxTimeSpan::Format(const wxChar
                     digits = 2;
                     break;
 
-                case _T('S'):
+                case wxT('S'):
                     n = GetSeconds().ToLong();
                     if ( partBiggest < Part_Sec )
                     {
@@ -4429,10 +4429,10 @@ wxString wxTimeSpan::Format(const wxChar
 
             if ( digits )
             {
-                fmtPrefix << _T("0") << digits;
+                fmtPrefix << wxT("0") << digits;
             }
 
-            str += wxString::Format(fmtPrefix + _T("ld"), n);
+            str += wxString::Format(fmtPrefix + wxT("ld"), n);
         }
         else
         {
@@ -4539,7 +4539,7 @@ size_t wxDateTimeWorkDays::DoGetHolidays
 {
     if ( dtStart > dtEnd )
     {
-        wxFAIL_MSG( _T("invalid date range in GetHolidaysInRange") );
+        wxFAIL_MSG( wxT("invalid date range in GetHolidaysInRange") );
 
         return 0u;
     }
@@ -4579,7 +4579,7 @@ size_t wxDateTimeWorkDays::DoGetHolidays
 
 WXDLLIMPEXP_BASE void wxNextMonth(wxDateTime::Month& m)
 {
-    wxASSERT_MSG( m < wxDateTime::Inv_Month, _T("invalid month") );
+    wxASSERT_MSG( m < wxDateTime::Inv_Month, wxT("invalid month") );
 
     // no wrapping or the for loop above would never end!
     m = (wxDateTime::Month)(m + 1);
@@ -4587,7 +4587,7 @@ WXDLLIMPEXP_BASE void wxNextMonth(wxDate
 
 WXDLLIMPEXP_BASE void wxPrevMonth(wxDateTime::Month& m)
 {
-    wxASSERT_MSG( m < wxDateTime::Inv_Month, _T("invalid month") );
+    wxASSERT_MSG( m < wxDateTime::Inv_Month, wxT("invalid month") );
 
     m = m == wxDateTime::Jan ? wxDateTime::Inv_Month
                              : (wxDateTime::Month)(m - 1);
@@ -4595,7 +4595,7 @@ WXDLLIMPEXP_BASE void wxPrevMonth(wxDate
 
 WXDLLIMPEXP_BASE void wxNextWDay(wxDateTime::WeekDay& wd)
 {
-    wxASSERT_MSG( wd < wxDateTime::Inv_WeekDay, _T("invalid week day") );
+    wxASSERT_MSG( wd < wxDateTime::Inv_WeekDay, wxT("invalid week day") );
 
     // no wrapping or the for loop above would never end!
     wd = (wxDateTime::WeekDay)(wd + 1);
@@ -4603,7 +4603,7 @@ WXDLLIMPEXP_BASE void wxNextWDay(wxDateT
 
 WXDLLIMPEXP_BASE void wxPrevWDay(wxDateTime::WeekDay& wd)
 {
-    wxASSERT_MSG( wd < wxDateTime::Inv_WeekDay, _T("invalid week day") );
+    wxASSERT_MSG( wd < wxDateTime::Inv_WeekDay, wxT("invalid week day") );
 
     wd = wd == wxDateTime::Sun ? wxDateTime::Inv_WeekDay
                                : (wxDateTime::WeekDay)(wd - 1);
--- src/common/dynlib.cpp-orig	2009-06-18 15:58:30.254300000 -0500
+++ src/common/dynlib.cpp	2009-06-18 15:58:54.488999000 -0500
@@ -59,7 +59,7 @@ WX_DEFINE_USER_EXPORTED_OBJARRAY(wxDynam
 // ---------------------------------------------------------------------------
 
 #if defined(__WXPM__) || defined(__EMX__)
-    const wxChar *wxDynamicLibrary::ms_dllext = _T(".dll");
+    const wxChar *wxDynamicLibrary::ms_dllext = wxT(".dll");
 #elif defined(__WXMAC__) && !defined(__DARWIN__)
     const wxChar *wxDynamicLibrary::ms_dllext = wxEmptyString;
 #endif
@@ -78,7 +78,7 @@ wxDllType wxDynamicLibrary::GetProgramHa
 
 bool wxDynamicLibrary::Load(const wxString& libnameOrig, int flags)
 {
-    wxASSERT_MSG(m_handle == 0, _T("Library already loaded."));
+    wxASSERT_MSG(m_handle == 0, wxT("Library already loaded."));
 
     // add the proper extension for the DLL ourselves unless told not to
     wxString libname = libnameOrig;
@@ -159,7 +159,7 @@ void wxDynamicLibrary::Unload(wxDllType 
 void *wxDynamicLibrary::DoGetSymbol(const wxString &name, bool *success) const
 {
     wxCHECK_MSG( IsLoaded(), NULL,
-                 _T("Can't load symbol from unloaded library") );
+                 wxT("Can't load symbol from unloaded library") );
 
     void    *symbol = 0;
 
@@ -220,7 +220,7 @@ wxDynamicLibrary::CanonicalizeName(const
     switch ( cat )
     {
         default:
-            wxFAIL_MSG( _T("unknown wxDynamicLibraryCategory value") );
+            wxFAIL_MSG( wxT("unknown wxDynamicLibraryCategory value") );
             // fall through
 
         case wxDL_MODULE:
@@ -229,7 +229,7 @@ wxDynamicLibrary::CanonicalizeName(const
 
         case wxDL_LIBRARY:
             // library names should start with "lib" under Unix
-            nameCanonic = _T("lib");
+            nameCanonic = wxT("lib");
             break;
     }
 #else // !__UNIX__
@@ -250,14 +250,14 @@ wxString wxDynamicLibrary::CanonicalizeP
         suffix = wxPlatformInfo::Get().GetPortIdShortName();
     }
 #if wxUSE_UNICODE
-    suffix << _T('u');
+    suffix << wxT('u');
 #endif
 #ifdef __WXDEBUG__
-    suffix << _T('d');
+    suffix << wxT('d');
 #endif
 
     if ( !suffix.empty() )
-        suffix = wxString(_T("_")) + suffix;
+        suffix = wxString(wxT("_")) + suffix;
 
 #define WXSTRINGIZE(x)  #x
 #if defined(__UNIX__) && !defined(__EMX__)
@@ -282,13 +282,13 @@ wxString wxDynamicLibrary::CanonicalizeP
 #ifdef __WINDOWS__
     // Add compiler identification:
     #if defined(__GNUG__)
-        suffix << _T("_gcc");
+        suffix << wxT("_gcc");
     #elif defined(__VISUALC__)
-        suffix << _T("_vc");
+        suffix << wxT("_vc");
     #elif defined(__WATCOMC__)
-        suffix << _T("_wat");
+        suffix << wxT("_wat");
     #elif defined(__BORLANDC__)
-        suffix << _T("_bcc");
+        suffix << wxT("_bcc");
     #endif
 #endif
 
--- src/common/fileconf.cpp-orig	2009-06-18 16:00:42.769175000 -0500
+++ src/common/fileconf.cpp	2009-06-18 16:01:29.138434000 -0500
@@ -71,7 +71,7 @@
     #define MAX_PATH 512
 #endif
 
-#define FILECONF_TRACE_MASK _T("fileconf")
+#define FILECONF_TRACE_MASK wxT("fileconf")
 
 // ----------------------------------------------------------------------------
 // global functions declarations
@@ -440,7 +440,7 @@ wxFileConfig::wxFileConfig(const wxStrin
         m_strLocalFile = GetLocalFileName(GetAppName());
 #if defined(__UNIX__) && !defined(__VMS)
         if ( style & wxCONFIG_USE_SUBDIR )
-            m_strLocalFile << wxFILE_SEP_PATH << GetAppName() << _T(".conf");
+            m_strLocalFile << wxFILE_SEP_PATH << GetAppName() << wxT(".conf");
 #endif
     }
 
@@ -972,7 +972,7 @@ bool wxFileConfig::DoWriteString(const w
     wxString                strName = path.Name();
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("  Writing String '%s' = '%s' to Group '%s'"),
+                wxT("  Writing String '%s' = '%s' to Group '%s'"),
                 strName.c_str(),
                 szValue.c_str(),
                 GetPath().c_str() );
@@ -986,7 +986,7 @@ bool wxFileConfig::DoWriteString(const w
             // ... except if it's empty in which case it's a way to force it's creation
 
         wxLogTrace( FILECONF_TRACE_MASK,
-                    _T("  Creating group %s"),
+                    wxT("  Creating group %s"),
                     m_pCurrentGroup->Name().c_str() );
 
         SetDirty();
@@ -1010,13 +1010,13 @@ bool wxFileConfig::DoWriteString(const w
         if ( pEntry == 0 )
         {
             wxLogTrace( FILECONF_TRACE_MASK,
-                        _T("  Adding Entry %s"),
+                        wxT("  Adding Entry %s"),
                         strName.c_str() );
             pEntry = m_pCurrentGroup->AddEntry(strName);
         }
 
         wxLogTrace( FILECONF_TRACE_MASK,
-                    _T("  Setting value %s"),
+                    wxT("  Setting value %s"),
                     szValue.c_str() );
         pEntry->SetValue(szValue);
 
@@ -1028,7 +1028,7 @@ bool wxFileConfig::DoWriteString(const w
 
 bool wxFileConfig::DoWriteLong(const wxString& key, long lValue)
 {
-  return Write(key, wxString::Format(_T("%ld"), lValue));
+  return Write(key, wxString::Format(wxT("%ld"), lValue));
 }
 
 bool wxFileConfig::Flush(bool /* bCurrentOnly */)
@@ -1111,7 +1111,7 @@ bool wxFileConfig::RenameEntry(const wxS
                                const wxString& newName)
 {
     wxASSERT_MSG( !wxStrchr(oldName, wxCONFIG_PATH_SEPARATOR),
-                   _T("RenameEntry(): paths are not supported") );
+                   wxT("RenameEntry(): paths are not supported") );
 
     // check that the entry exists
     wxFileConfigEntry *oldEntry = m_pCurrentGroup->FindEntry(oldName);
@@ -1221,13 +1221,13 @@ bool wxFileConfig::DeleteAll()
 wxFileConfigLineList *wxFileConfig::LineListAppend(const wxString& str)
 {
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("    ** Adding Line '%s'"),
+                wxT("    ** Adding Line '%s'"),
                 str.c_str() );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        head: %s"),
+                wxT("        head: %s"),
                 ((m_linesHead) ? m_linesHead->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        tail: %s"),
+                wxT("        tail: %s"),
                 ((m_linesTail) ? m_linesTail->Text().c_str() : wxEmptyString) );
 
     wxFileConfigLineList *pLine = new wxFileConfigLineList(str);
@@ -1247,10 +1247,10 @@ wxFileConfigLineList *wxFileConfig::Line
     m_linesTail = pLine;
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        head: %s"),
+                wxT("        head: %s"),
                 ((m_linesHead) ? m_linesHead->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        tail: %s"),
+                wxT("        tail: %s"),
                 ((m_linesTail) ? m_linesTail->Text().c_str() : wxEmptyString) );
 
     return m_linesTail;
@@ -1261,14 +1261,14 @@ wxFileConfigLineList *wxFileConfig::Line
                                                    wxFileConfigLineList *pLine)
 {
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("    ** Inserting Line '%s' after '%s'"),
+                wxT("    ** Inserting Line '%s' after '%s'"),
                 str.c_str(),
                 ((pLine) ? pLine->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        head: %s"),
+                wxT("        head: %s"),
                 ((m_linesHead) ? m_linesHead->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        tail: %s"),
+                wxT("        tail: %s"),
                 ((m_linesTail) ? m_linesTail->Text().c_str() : wxEmptyString) );
 
     if ( pLine == m_linesTail )
@@ -1293,10 +1293,10 @@ wxFileConfigLineList *wxFileConfig::Line
     }
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        head: %s"),
+                wxT("        head: %s"),
                 ((m_linesHead) ? m_linesHead->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        tail: %s"),
+                wxT("        tail: %s"),
                 ((m_linesTail) ? m_linesTail->Text().c_str() : wxEmptyString) );
 
     return pNewLine;
@@ -1305,13 +1305,13 @@ wxFileConfigLineList *wxFileConfig::Line
 void wxFileConfig::LineListRemove(wxFileConfigLineList *pLine)
 {
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("    ** Removing Line '%s'"),
+                wxT("    ** Removing Line '%s'"),
                 pLine->Text().c_str() );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        head: %s"),
+                wxT("        head: %s"),
                 ((m_linesHead) ? m_linesHead->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        tail: %s"),
+                wxT("        tail: %s"),
                 ((m_linesTail) ? m_linesTail->Text().c_str() : wxEmptyString) );
 
     wxFileConfigLineList    *pPrev = pLine->Prev(),
@@ -1335,10 +1335,10 @@ void wxFileConfig::LineListRemove(wxFile
         m_pRootGroup->SetLine(m_linesHead);
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        head: %s"),
+                wxT("        head: %s"),
                 ((m_linesHead) ? m_linesHead->Text().c_str() : wxEmptyString) );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("        tail: %s"),
+                wxT("        tail: %s"),
                 ((m_linesTail) ? m_linesTail->Text().c_str() : wxEmptyString) );
 
     delete pLine;
@@ -1396,7 +1396,7 @@ void wxFileConfigGroup::SetLine(wxFileCo
     // for a normal (i.e. not root) group this method shouldn't be called twice
     // unless we are resetting the line
     wxASSERT_MSG( !m_pParent || !m_pLine || !pLine,
-                   _T("changing line for a non-root group?") );
+                   wxT("changing line for a non-root group?") );
 
     m_pLine = pLine;
 }
@@ -1438,13 +1438,13 @@ void wxFileConfigGroup::SetLine(wxFileCo
 wxFileConfigLineList *wxFileConfigGroup::GetGroupLine()
 {
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("  GetGroupLine() for Group '%s'"),
+                wxT("  GetGroupLine() for Group '%s'"),
                 Name().c_str() );
 
     if ( !m_pLine )
     {
         wxLogTrace( FILECONF_TRACE_MASK,
-                    _T("    Getting Line item pointer") );
+                    wxT("    Getting Line item pointer") );
 
         wxFileConfigGroup   *pParent = Parent();
 
@@ -1452,7 +1452,7 @@ wxFileConfigLineList *wxFileConfigGroup:
         if ( pParent )
         {
             wxLogTrace( FILECONF_TRACE_MASK,
-                        _T("    checking parent '%s'"),
+                        wxT("    checking parent '%s'"),
                         pParent->Name().c_str() );
 
             wxString    strFullName;
@@ -1483,7 +1483,7 @@ wxFileConfigLineList *wxFileConfigGroup:
     {
         wxFileConfigLineList *pLine = m_pLastGroup->GetLastGroupLine();
 
-        wxASSERT_MSG( pLine, _T("last group must have !NULL associated line") );
+        wxASSERT_MSG( pLine, wxT("last group must have !NULL associated line") );
 
         return pLine;
     }
@@ -1498,14 +1498,14 @@ wxFileConfigLineList *wxFileConfigGroup:
 wxFileConfigLineList *wxFileConfigGroup::GetLastEntryLine()
 {
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("  GetLastEntryLine() for Group '%s'"),
+                wxT("  GetLastEntryLine() for Group '%s'"),
                 Name().c_str() );
 
     if ( m_pLastEntry )
     {
         wxFileConfigLineList    *pLine = m_pLastEntry->GetLine();
 
-        wxASSERT_MSG( pLine, _T("last entry must have !NULL associated line") );
+        wxASSERT_MSG( pLine, wxT("last entry must have !NULL associated line") );
 
         return pLine;
     }
@@ -1523,7 +1523,7 @@ void wxFileConfigGroup::SetLastEntry(wxF
         // the only situation in which a group without its own line can have
         // an entry is when the first entry is added to the initially empty
         // root pseudo-group
-        wxASSERT_MSG( !m_pParent, _T("unexpected for non root group") );
+        wxASSERT_MSG( !m_pParent, wxT("unexpected for non root group") );
 
         // let the group know that it does have a line in the file now
         m_pLine = pEntry->GetLine();
@@ -1538,10 +1538,10 @@ void wxFileConfigGroup::UpdateGroupAndSu
 {
     // update the line of this group
     wxFileConfigLineList *line = GetGroupLine();
-    wxCHECK_RET( line, _T("a non root group must have a corresponding line!") );
+    wxCHECK_RET( line, wxT("a non root group must have a corresponding line!") );
 
     // +1: skip the leading '/'
-    line->SetText(wxString::Format(_T("[%s]"), GetFullName().c_str() + 1));
+    line->SetText(wxString::Format(wxT("[%s]"), GetFullName().c_str() + 1));
 
 
     // also update all subgroups as they have this groups name in their lines
@@ -1554,7 +1554,7 @@ void wxFileConfigGroup::UpdateGroupAndSu
 
 void wxFileConfigGroup::Rename(const wxString& newName)
 {
-    wxCHECK_RET( m_pParent, _T("the root group can't be renamed") );
+    wxCHECK_RET( m_pParent, wxT("the root group can't be renamed") );
 
     if ( newName == m_strName )
         return;
@@ -1693,27 +1693,27 @@ bool wxFileConfigGroup::DeleteSubgroupBy
 // other data structures.
 bool wxFileConfigGroup::DeleteSubgroup(wxFileConfigGroup *pGroup)
 {
-    wxCHECK_MSG( pGroup, false, _T("deleting non existing group?") );
+    wxCHECK_MSG( pGroup, false, wxT("deleting non existing group?") );
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("Deleting group '%s' from '%s'"),
+                wxT("Deleting group '%s' from '%s'"),
                 pGroup->Name().c_str(),
                 Name().c_str() );
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("  (m_pLine) = prev: %p, this %p, next %p"),
+                wxT("  (m_pLine) = prev: %p, this %p, next %p"),
                 m_pLine ? wx_static_cast(void*, m_pLine->Prev()) : 0,
                 wx_static_cast(void*, m_pLine),
                 m_pLine ? wx_static_cast(void*, m_pLine->Next()) : 0 );
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("  text: '%s'"),
+                wxT("  text: '%s'"),
                 m_pLine ? m_pLine->Text().c_str() : wxEmptyString );
 
     // delete all entries...
     size_t nCount = pGroup->m_aEntries.Count();
 
     wxLogTrace(FILECONF_TRACE_MASK,
-               _T("Removing %lu entries"), (unsigned long)nCount );
+               wxT("Removing %lu entries"), (unsigned long)nCount );
 
     for ( size_t nEntry = 0; nEntry < nCount; nEntry++ )
     {
@@ -1722,7 +1722,7 @@ bool wxFileConfigGroup::DeleteSubgroup(w
         if ( pLine )
         {
             wxLogTrace( FILECONF_TRACE_MASK,
-                        _T("    '%s'"),
+                        wxT("    '%s'"),
                         pLine->Text().c_str() );
             m_pConfig->LineListRemove(pLine);
         }
@@ -1732,7 +1732,7 @@ bool wxFileConfigGroup::DeleteSubgroup(w
     nCount = pGroup->m_aSubgroups.Count();
 
     wxLogTrace( FILECONF_TRACE_MASK,
-                _T("Removing %lu subgroups"), (unsigned long)nCount );
+                wxT("Removing %lu subgroups"), (unsigned long)nCount );
 
     for ( size_t nGroup = 0; nGroup < nCount; nGroup++ )
     {
@@ -1744,11 +1744,11 @@ bool wxFileConfigGroup::DeleteSubgroup(w
     if ( pLine )
     {
         wxLogTrace( FILECONF_TRACE_MASK,
-                    _T("  Removing line for group '%s' : '%s'"),
+                    wxT("  Removing line for group '%s' : '%s'"),
                     pGroup->Name().c_str(),
                     pLine->Text().c_str() );
         wxLogTrace( FILECONF_TRACE_MASK,
-                    _T("  Removing from group '%s' : '%s'"),
+                    wxT("  Removing from group '%s' : '%s'"),
                     Name().c_str(),
                     ((m_pLine) ? m_pLine->Text().c_str() : wxEmptyString) );
 
@@ -1757,7 +1757,7 @@ bool wxFileConfigGroup::DeleteSubgroup(w
         if ( pGroup == m_pLastGroup )
         {
             wxLogTrace( FILECONF_TRACE_MASK,
-                        _T("  Removing last group") );
+                        wxT("  Removing last group") );
 
             // our last entry is being deleted, so find the last one which
             // stays by going back until we find a subgroup or reach the
@@ -1791,7 +1791,7 @@ bool wxFileConfigGroup::DeleteSubgroup(w
     else
     {
         wxLogTrace( FILECONF_TRACE_MASK,
-                    _T("  No line entry for Group '%s'?"),
+                    wxT("  No line entry for Group '%s'?"),
                     pGroup->Name().c_str() );
     }
 
@@ -2078,7 +2078,7 @@ static wxString FilterInEntryName(const 
   for ( const wxChar *pc = str.c_str(); *pc != '\0'; pc++ ) {
     if ( *pc == wxT('\\') ) {
       // we need to test it here or we'd skip past the NUL in the loop line
-      if ( *++pc == _T('\0') )
+      if ( *++pc == wxT('\0') )
         break;
     }
 
--- src/common/filefn.cpp-orig	2009-06-18 16:01:47.822955000 -0500
+++ src/common/filefn.cpp	2009-06-18 16:02:09.689047000 -0500
@@ -991,8 +991,8 @@ wxDos2UnixFilename (wxChar *s)
   if (s)
     while (*s)
       {
-        if (*s == _T('\\'))
-          *s = _T('/');
+        if (*s == wxT('\\'))
+          *s = wxT('/');
 #ifdef __WXMSW__
         else
           *s = (wxChar)wxTolower (*s);        // Case INDEPENDENT
@@ -1291,7 +1291,7 @@ bool wxDirExists(const wxChar *pszPathNa
     while ( wxEndsWithPathSeparator(strPath) )
     {
         size_t len = strPath.length();
-        if ( len == 1 || (len == 3 && strPath[len - 2] == _T(':')) )
+        if ( len == 1 || (len == 3 && strPath[len - 2] == wxT(':')) )
             break;
 
         strPath.Truncate(len - 1);
@@ -1300,8 +1300,8 @@ bool wxDirExists(const wxChar *pszPathNa
 
 #ifdef __OS2__
     // OS/2 can't handle "d:", it wants either "d:\" or "d:."
-    if (strPath.length() == 2 && strPath[1u] == _T(':'))
-        strPath << _T('.');
+    if (strPath.length() == 2 && strPath[1u] == wxT(':'))
+        strPath << wxT('.');
 #endif
 
 #if defined(__WXPALMOS__)
@@ -1431,11 +1431,11 @@ wxChar *wxDoGetCwd(wxChar *buf, int sz)
 {
 #if defined(__WXPALMOS__)
     // TODO
-    if(buf && sz>0) buf[0] = _T('\0');
+    if(buf && sz>0) buf[0] = wxT('\0');
     return buf;
 #elif defined(__WXWINCE__)
     // TODO
-    if(buf && sz>0) buf[0] = _T('\0');
+    if(buf && sz>0) buf[0] = wxT('\0');
     return buf;
 #else
     if ( !buf )
@@ -1519,7 +1519,7 @@ wxChar *wxDoGetCwd(wxChar *buf, int sz)
         //     sense at all to me - empty string is a better error indicator
         //     (NULL might be even better but I'm afraid this could lead to
         //     problems with the old code assuming the return is never NULL)
-        buf[0] = _T('\0');
+        buf[0] = wxT('\0');
     }
     else // ok, but we might need to massage the path into the right format
     {
@@ -1577,7 +1577,7 @@ bool wxSetWorkingDirectory(const wxStrin
 #if defined(__OS2__)
     if (d[1] == ':')
     {
-        ::DosSetDefaultDisk(1 + wxToupper(d[0]) - _T('A'));
+        ::DosSetDefaultDisk(1 + wxToupper(d[0]) - wxT('A'));
     // do not call DosSetCurrentDir when just changing drive,
     // since it requires e.g. "d:." instead of "d:"!
     if (d.length() == 2)
@@ -1652,7 +1652,7 @@ bool wxFindFileInPath(wxString *pStr, co
 {
     // we assume that it's not empty
     wxCHECK_MSG( !wxIsEmpty(pszFile), false,
-                 _T("empty file name in wxFindFileInPath"));
+                 wxT("empty file name in wxFindFileInPath"));
 
     // skip path separator in the beginning of the file name if present
     if ( wxIsPathSeparator(*pszFile) )
@@ -1743,7 +1743,7 @@ int WXDLLEXPORT wxParseCommonDialogsFilt
             }
             else
             {
-                wxFAIL_MSG( _T("missing '|' in the wildcard string!") );
+                wxFAIL_MSG( wxT("missing '|' in the wildcard string!") );
             }
 
             break;
@@ -1794,13 +1794,13 @@ int WXDLLEXPORT wxParseCommonDialogsFilt
                 {
                     wxString before = descriptions[k].Left(pos);
                     wxString after = descriptions[k].Mid(pos+filters[k].Len());
-                    pos = before.Find(_T('('),true);
-                    if (pos>before.Find(_T(')'),true))
+                    pos = before.Find(wxT('('),true);
+                    if (pos>before.Find(wxT(')'),true))
                     {
                         before = before.Left(pos+1);
                         before << filters[k];
-                        pos = after.Find(_T(')'));
-                        int pos1 = after.Find(_T('('));
+                        pos = after.Find(wxT(')'));
+                        int pos1 = after.Find(wxT('('));
                         if (pos != wxNOT_FOUND && (pos<pos1 || pos1==wxNOT_FOUND))
                         {
                             before << after.Mid(pos);
--- src/common/filename.cpp-orig	2009-06-18 16:02:28.179309000 -0500
+++ src/common/filename.cpp	2009-06-18 16:03:17.116869000 -0500
@@ -219,13 +219,13 @@ static void ConvertFileTimeToWx(wxDateTi
     FILETIME ftLocal;
     if ( !::FileTimeToLocalFileTime(&ftcopy, &ftLocal) )
     {
-        wxLogLastError(_T("FileTimeToLocalFileTime"));
+        wxLogLastError(wxT("FileTimeToLocalFileTime"));
     }
 
     SYSTEMTIME st;
     if ( !::FileTimeToSystemTime(&ftLocal, &st) )
     {
-        wxLogLastError(_T("FileTimeToSystemTime"));
+        wxLogLastError(wxT("FileTimeToSystemTime"));
     }
 
     dt->Set(st.wDay, wxDateTime::Month(st.wMonth - 1), st.wYear,
@@ -246,12 +246,12 @@ static void ConvertWxToFileTime(FILETIME
     FILETIME ftLocal;
     if ( !::SystemTimeToFileTime(&st, &ftLocal) )
     {
-        wxLogLastError(_T("SystemTimeToFileTime"));
+        wxLogLastError(wxT("SystemTimeToFileTime"));
     }
 
     if ( !::LocalFileTimeToFileTime(&ftLocal, ft) )
     {
-        wxLogLastError(_T("LocalFileTimeToFileTime"));
+        wxLogLastError(wxT("LocalFileTimeToFileTime"));
     }
 }
 
@@ -401,12 +401,12 @@ void wxFileName::SetPath( const wxString
             break;
 
         default:
-            wxFAIL_MSG( _T("Unknown path format") );
+            wxFAIL_MSG( wxT("Unknown path format") );
             // !! Fall through !!
 
         case wxPATH_UNIX:
             // the paths of the form "~" or "~username" are absolute
-            m_relative = leadingChar != wxT('/') && leadingChar != _T('~');
+            m_relative = leadingChar != wxT('/') && leadingChar != wxT('~');
             break;
 
         case wxPATH_DOS:
@@ -473,12 +473,12 @@ void wxFileName::Assign(const wxString& 
     SplitPath(fullname, &volDummy, &pathDummy, &name, &ext, &hasExt, format);
 
     wxASSERT_MSG( volDummy.empty() && pathDummy.empty(),
-                  _T("the file name shouldn't contain the path") );
+                  wxT("the file name shouldn't contain the path") );
 
     SplitPath(fullpath, &volume, &path, &nameDummy, &extDummy, format);
 
     wxASSERT_MSG( nameDummy.empty() && extDummy.empty(),
-                  _T("the path shouldn't contain file name nor extension") );
+                  wxT("the path shouldn't contain file name nor extension") );
 
 #else // !__WXDEBUG__
     SplitPath(fullname, NULL /* no volume */, NULL /* no path */,
@@ -676,7 +676,7 @@ static bool wxTempOpen(wxFFile *file, co
 {
 #ifndef wx_fdopen
     *deleteOnClose = false;
-    return file->Open(path, _T("w+b"));
+    return file->Open(path, wxT("w+b"));
 #else // wx_fdopen
     int fd = wxTempOpen(path, deleteOnClose);
     if (fd == -1)
@@ -743,7 +743,7 @@ static wxString wxCreateTempImpl(
 #elif defined(__WINDOWS__) && !defined(__WXMICROWIN__)
     if ( !::GetTempFileName(dir, name, 0, wxStringBuffer(path, MAX_PATH + 1)) )
     {
-        wxLogLastError(_T("GetTempFileName"));
+        wxLogLastError(wxT("GetTempFileName"));
 
         path.clear();
     }
@@ -761,7 +761,7 @@ static wxString wxCreateTempImpl(
 
 #if defined(HAVE_MKSTEMP)
     // scratch space for mkstemp()
-    path += _T("XXXXXX");
+    path += wxT("XXXXXX");
 
     // we need to copy the path to the buffer in which mkstemp() can modify it
     wxCharBuffer buf( wxConvFile.cWX2MB( path ) );
@@ -793,7 +793,7 @@ static wxString wxCreateTempImpl(
         #ifdef wx_fdopen
             ffileTemp->Attach(wx_fdopen(fdTemp, "r+b"));
         #else
-            ffileTemp->Open(path, _T("r+b"));
+            ffileTemp->Open(path, wxT("r+b"));
             close(fdTemp);
         #endif
         }
@@ -808,7 +808,7 @@ static wxString wxCreateTempImpl(
 
 #ifdef HAVE_MKTEMP
     // same as above
-    path += _T("XXXXXX");
+    path += wxT("XXXXXX");
 
     wxCharBuffer buf = wxConvFile.cWX2MB( path );
     if ( !mktemp( (char*)(const char*) buf ) )
@@ -831,7 +831,7 @@ static wxString wxCreateTempImpl(
     for ( size_t n = 0; n < numTries; n++ )
     {
         // 3 hex digits is enough for numTries == 1000 < 4096
-        pathTry = path + wxString::Format(_T("%.03x"), (unsigned int) n);
+        pathTry = path + wxString::Format(wxT("%.03x"), (unsigned int) n);
         if ( !wxFileName::FileExists(pathTry) )
         {
             break;
@@ -1022,13 +1022,13 @@ wxFileName::CreateTempFileName(const wxS
 wxString wxFileName::GetTempDir()
 {
     wxString dir;
-    dir = wxGetenv(_T("TMPDIR"));
+    dir = wxGetenv(wxT("TMPDIR"));
     if (dir.empty())
     {
-        dir = wxGetenv(_T("TMP"));
+        dir = wxGetenv(wxT("TMP"));
         if (dir.empty())
         {
-            dir = wxGetenv(_T("TEMP"));
+            dir = wxGetenv(wxT("TEMP"));
         }
     }
 
@@ -1045,13 +1045,13 @@ wxString wxFileName::GetTempDir()
     {
         if ( !::GetTempPath(MAX_PATH, wxStringBuffer(dir, MAX_PATH + 1)) )
         {
-            wxLogLastError(_T("GetTempPath"));
+            wxLogLastError(wxT("GetTempPath"));
         }
 
         if ( dir.empty() )
         {
             // GetTempFileName() fails if we pass it an empty string
-            dir = _T('.');
+            dir = wxT('.');
         }
     }
 #else // !Windows
@@ -1060,11 +1060,11 @@ wxString wxFileName::GetTempDir()
     {
         // default
 #if defined(__DOS__) || defined(__OS2__)
-        dir = _T(".");
+        dir = wxT(".");
 #elif defined(__WXMAC__)
         dir = wxMacFindFolder(short(kOnSystemDisk), kTemporaryFolderType, kCreateFolder);
 #else
-        dir = _T("/tmp");
+        dir = wxT("/tmp");
 #endif
     }
 #endif
@@ -1180,7 +1180,7 @@ bool wxFileName::Normalize(int flags,
         if ( !dirs.IsEmpty() )
         {
             wxString dir = dirs[0u];
-            if ( !dir.empty() && dir[0u] == _T('~') )
+            if ( !dir.empty() && dir[0u] == wxT('~') )
             {
                 // to make the path absolute use the home directory
                 curDir.AssignDir(wxGetUserHome(dir.c_str() + 1));
@@ -1453,7 +1453,7 @@ bool wxFileName::MakeRelativeTo(const wx
         // files)
         if ( m_dirs.IsEmpty() && IsDir() )
         {
-            m_dirs.Add(_T('.'));
+            m_dirs.Add(wxT('.'));
         }
     }
 
@@ -1560,7 +1560,7 @@ wxString wxFileName::GetPathSeparators(w
             break;
 
         default:
-            wxFAIL_MSG( _T("Unknown wxPATH_XXX style") );
+            wxFAIL_MSG( wxT("Unknown wxPATH_XXX style") );
             // fall through
 
         case wxPATH_UNIX:
@@ -1586,7 +1586,7 @@ wxString wxFileName::GetPathTerminators(
 
     // under VMS the end of the path is ']', not the path separator used to
     // separate the components
-    return format == wxPATH_VMS ? wxString(_T(']')) : GetPathSeparators(format);
+    return format == wxPATH_VMS ? wxString(wxT(']')) : GetPathSeparators(format);
 }
 
 /* static */
@@ -1594,7 +1594,7 @@ bool wxFileName::IsPathSeparator(wxChar 
 {
     // wxString::Find() doesn't work as expected with NUL - it will always find
     // it, so test for it separately
-    return ch != _T('\0') && GetPathSeparators(format).Find(ch) != wxNOT_FOUND;
+    return ch != wxT('\0') && GetPathSeparators(format).Find(ch) != wxNOT_FOUND;
 }
 
 // ----------------------------------------------------------------------------
@@ -1605,7 +1605,7 @@ bool wxFileName::IsPathSeparator(wxChar 
 {
     if ( dir.empty() )
     {
-        wxFAIL_MSG( _T("empty directory passed to wxFileName::InsertDir()") );
+        wxFAIL_MSG( wxT("empty directory passed to wxFileName::InsertDir()") );
 
         return false;
     }
@@ -1615,7 +1615,7 @@ bool wxFileName::IsPathSeparator(wxChar 
     {
         if ( dir[n] == GetVolumeSeparator() || IsPathSeparator(dir[n]) )
         {
-            wxFAIL_MSG( _T("invalid directory component in wxFileName") );
+            wxFAIL_MSG( wxT("invalid directory component in wxFileName") );
 
             return false;
         }
@@ -1702,7 +1702,7 @@ wxString wxFileName::GetPath( int flags,
                 // normally the absolute file names start with a slash
                 // with one exception: the ones like "~/foo.bar" don't
                 // have it
-                if ( m_dirs.IsEmpty() || m_dirs[0u] != _T('~') )
+                if ( m_dirs.IsEmpty() || m_dirs[0u] != wxT('~') )
                 {
                     fullpath += wxFILE_SEP_PATH_UNIX;
                 }
@@ -1836,13 +1836,13 @@ wxString wxFileName::GetLongPath() const
         {
             s_triedToLoad = true;
 
-            wxDynamicLibrary dllKernel(_T("kernel32"));
+            wxDynamicLibrary dllKernel(wxT("kernel32"));
 
-            const wxChar* GetLongPathName = _T("GetLongPathName")
+            const wxChar* GetLongPathName = wxT("GetLongPathName")
 #if wxUSE_UNICODE
-                              _T("W");
+                              wxT("W");
 #else // ANSI
-                              _T("A");
+                              wxT("A");
 #endif // Unicode/ANSI
 
             if ( dllKernel.HasSymbol(GetLongPathName) )
@@ -2030,7 +2030,7 @@ void wxFileName::SplitPath(const wxStrin
     if ( (posLastDot != wxString::npos) &&
          (posLastDot == 0 ||
             IsPathSeparator(fullpath[posLastDot - 1]) ||
-            (format == wxPATH_VMS && fullpath[posLastDot - 1] == _T(']'))) )
+            (format == wxPATH_VMS && fullpath[posLastDot - 1] == wxT(']'))) )
     {
         // dot may be (and commonly -- at least under Unix -- is) the first
         // character of the filename, don't treat the entire filename as
@@ -2072,7 +2072,7 @@ void wxFileName::SplitPath(const wxStrin
             // special VMS hack: remove the initial bracket
             if ( format == wxPATH_VMS )
             {
-                if ( (*pstrPath)[0u] == _T('[') )
+                if ( (*pstrPath)[0u] == wxT('[') )
                     pstrPath->erase(0, 1);
             }
         }
@@ -2153,7 +2153,7 @@ bool wxFileName::SetTimes(const wxDateTi
     if ( IsDir() )
     {
         // VZ: please let me know how to do this if you can
-        wxFAIL_MSG( _T("SetTimes() not implemented for the directories") );
+        wxFAIL_MSG( wxT("SetTimes() not implemented for the directories") );
     }
     else // file
     {
--- src/common/filesys.cpp-orig	2009-06-18 16:03:27.755119000 -0500
+++ src/common/filesys.cpp	2009-06-18 16:03:35.469357000 -0500
@@ -77,31 +77,31 @@ wxString wxFileSystemHandler::GetMimeTyp
         {
             static const wxFileTypeInfo fallbacks[] =
             {
-                wxFileTypeInfo(_T("image/jpeg"),
+                wxFileTypeInfo(wxT("image/jpeg"),
                     wxEmptyString,
                     wxEmptyString,
-                    _T("JPEG image (from fallback)"),
-                    _T("jpg"), _T("jpeg"), _T("JPG"), _T("JPEG"), NULL),
-                    wxFileTypeInfo(_T("image/gif"),
+                    wxT("JPEG image (from fallback)"),
+                    wxT("jpg"), wxT("jpeg"), wxT("JPG"), wxT("JPEG"), NULL),
+                    wxFileTypeInfo(wxT("image/gif"),
                     wxEmptyString,
                     wxEmptyString,
-                    _T("GIF image (from fallback)"),
-                    _T("gif"), _T("GIF"), NULL),
-                    wxFileTypeInfo(_T("image/png"),
+                    wxT("GIF image (from fallback)"),
+                    wxT("gif"), wxT("GIF"), NULL),
+                    wxFileTypeInfo(wxT("image/png"),
                     wxEmptyString,
                     wxEmptyString,
-                    _T("PNG image (from fallback)"),
-                    _T("png"), _T("PNG"), NULL),
-                    wxFileTypeInfo(_T("image/bmp"),
+                    wxT("PNG image (from fallback)"),
+                    wxT("png"), wxT("PNG"), NULL),
+                    wxFileTypeInfo(wxT("image/bmp"),
                     wxEmptyString,
                     wxEmptyString,
-                    _T("windows bitmap image (from fallback)"),
-                    _T("bmp"), _T("BMP"), NULL),
-                    wxFileTypeInfo(_T("text/html"),
+                    wxT("windows bitmap image (from fallback)"),
+                    wxT("bmp"), wxT("BMP"), NULL),
+                    wxFileTypeInfo(wxT("text/html"),
                     wxEmptyString,
                     wxEmptyString,
-                    _T("HTML document (from fallback)"),
-                    _T("htm"), _T("html"), _T("HTM"), _T("HTML"), NULL),
+                    wxT("HTML document (from fallback)"),
+                    wxT("htm"), wxT("html"), wxT("HTM"), wxT("HTML"), NULL),
                     // must terminate the table with this!
                     wxFileTypeInfo()
             };
@@ -122,9 +122,9 @@ wxString wxFileSystemHandler::GetMimeTyp
     else
 #endif
     {
-        if ( ext.IsSameAs(wxT("htm"), false) || ext.IsSameAs(_T("html"), false) )
+        if ( ext.IsSameAs(wxT("htm"), false) || ext.IsSameAs(wxT("html"), false) )
             return wxT("text/html");
-        if ( ext.IsSameAs(wxT("jpg"), false) || ext.IsSameAs(_T("jpeg"), false) )
+        if ( ext.IsSameAs(wxT("jpg"), false) || ext.IsSameAs(wxT("jpeg"), false) )
             return wxT("image/jpeg");
         if ( ext.IsSameAs(wxT("gif"), false) )
             return wxT("image/gif");
@@ -521,7 +521,7 @@ bool wxFileSystem::FindFileInPath(wxStri
 {
     // we assume that it's not empty
     wxCHECK_MSG( !wxIsEmpty(basename), false,
-                _T("empty file name in wxFileSystem::FindFileInPath"));
+                wxT("empty file name in wxFileSystem::FindFileInPath"));
 
     // skip path separator in the beginning of the file name if present
     if ( wxIsPathSeparator(*basename) )
--- src/common/fmapbase.cpp-orig	2009-06-18 16:04:11.752731000 -0500
+++ src/common/fmapbase.cpp	2009-06-18 16:04:21.891080000 -0500
@@ -159,21 +159,21 @@ static const wxChar* gs_encodingNames[WX
 {
     // names from the columns correspond to these OS:
     //      Linux        Solaris and IRIX       HP-UX             AIX
-    { _T("ISO-8859-1"),  _T("ISO8859-1"),  _T("iso88591"),  _T("8859-1"), wxT("iso_8859_1"), NULL },
-    { _T("ISO-8859-2"),  _T("ISO8859-2"),  _T("iso88592"),  _T("8859-2"), NULL },
-    { _T("ISO-8859-3"),  _T("ISO8859-3"),  _T("iso88593"),  _T("8859-3"), NULL },
-    { _T("ISO-8859-4"),  _T("ISO8859-4"),  _T("iso88594"),  _T("8859-4"), NULL },
-    { _T("ISO-8859-5"),  _T("ISO8859-5"),  _T("iso88595"),  _T("8859-5"), NULL },
-    { _T("ISO-8859-6"),  _T("ISO8859-6"),  _T("iso88596"),  _T("8859-6"), NULL },
-    { _T("ISO-8859-7"),  _T("ISO8859-7"),  _T("iso88597"),  _T("8859-7"), NULL },
-    { _T("ISO-8859-8"),  _T("ISO8859-8"),  _T("iso88598"),  _T("8859-8"), NULL },
-    { _T("ISO-8859-9"),  _T("ISO8859-9"),  _T("iso88599"),  _T("8859-9"), NULL },
-    { _T("ISO-8859-10"), _T("ISO8859-10"), _T("iso885910"), _T("8859-10"), NULL },
-    { _T("ISO-8859-11"), _T("ISO8859-11"), _T("iso885911"), _T("8859-11"), NULL },
-    { _T("ISO-8859-12"), _T("ISO8859-12"), _T("iso885912"), _T("8859-12"), NULL },
-    { _T("ISO-8859-13"), _T("ISO8859-13"), _T("iso885913"), _T("8859-13"), NULL },
-    { _T("ISO-8859-14"), _T("ISO8859-14"), _T("iso885914"), _T("8859-14"), NULL },
-    { _T("ISO-8859-15"), _T("ISO8859-15"), _T("iso885915"), _T("8859-15"), NULL },
+    { wxT("ISO-8859-1"),  wxT("ISO8859-1"),  wxT("iso88591"),  wxT("8859-1"), wxT("iso_8859_1"), NULL },
+    { wxT("ISO-8859-2"),  wxT("ISO8859-2"),  wxT("iso88592"),  wxT("8859-2"), NULL },
+    { wxT("ISO-8859-3"),  wxT("ISO8859-3"),  wxT("iso88593"),  wxT("8859-3"), NULL },
+    { wxT("ISO-8859-4"),  wxT("ISO8859-4"),  wxT("iso88594"),  wxT("8859-4"), NULL },
+    { wxT("ISO-8859-5"),  wxT("ISO8859-5"),  wxT("iso88595"),  wxT("8859-5"), NULL },
+    { wxT("ISO-8859-6"),  wxT("ISO8859-6"),  wxT("iso88596"),  wxT("8859-6"), NULL },
+    { wxT("ISO-8859-7"),  wxT("ISO8859-7"),  wxT("iso88597"),  wxT("8859-7"), NULL },
+    { wxT("ISO-8859-8"),  wxT("ISO8859-8"),  wxT("iso88598"),  wxT("8859-8"), NULL },
+    { wxT("ISO-8859-9"),  wxT("ISO8859-9"),  wxT("iso88599"),  wxT("8859-9"), NULL },
+    { wxT("ISO-8859-10"), wxT("ISO8859-10"), wxT("iso885910"), wxT("8859-10"), NULL },
+    { wxT("ISO-8859-11"), wxT("ISO8859-11"), wxT("iso885911"), wxT("8859-11"), NULL },
+    { wxT("ISO-8859-12"), wxT("ISO8859-12"), wxT("iso885912"), wxT("8859-12"), NULL },
+    { wxT("ISO-8859-13"), wxT("ISO8859-13"), wxT("iso885913"), wxT("8859-13"), NULL },
+    { wxT("ISO-8859-14"), wxT("ISO8859-14"), wxT("iso885914"), wxT("8859-14"), NULL },
+    { wxT("ISO-8859-15"), wxT("ISO8859-15"), wxT("iso885915"), wxT("8859-15"), NULL },
 
     // although koi8-ru is not strictly speaking the same as koi8-r,
     // they are similar enough to make mapping it to koi8 better than
@@ -295,7 +295,7 @@ wxFontMapperBase *wxFontMapperBase::Get(
             sm_instance = traits->CreateFontMapper();
 
             wxASSERT_MSG( sm_instance,
-                            _T("wxAppTraits::CreateFontMapper() failed") );
+                            wxT("wxAppTraits::CreateFontMapper() failed") );
         }
 
         if ( !sm_instance )
@@ -501,7 +501,7 @@ wxFontMapperBase::NonInteractiveCharsetT
         // discard the optional quotes
         if ( !cs.empty() )
         {
-            if ( cs[0u] == _T('"') && cs.Last() == _T('"') )
+            if ( cs[0u] == wxT('"') && cs.Last() == wxT('"') )
             {
                 cs = wxString(cs.c_str(), cs.length() - 1);
             }
@@ -648,7 +648,7 @@ size_t wxFontMapperBase::GetSupportedEnc
 wxFontEncoding wxFontMapperBase::GetEncoding(size_t n)
 {
     wxCHECK_MSG( n < WXSIZEOF(gs_encodings), wxFONTENCODING_SYSTEM,
-                    _T("wxFontMapper::GetEncoding(): invalid index") );
+                    wxT("wxFontMapper::GetEncoding(): invalid index") );
 
     return gs_encodings[n];
 }
--- src/common/intl.cpp-orig	2009-06-18 16:04:41.933001000 -0500
+++ src/common/intl.cpp	2009-06-18 16:04:53.351856000 -0500
@@ -101,7 +101,7 @@ static const size_t LEN_LANG = 2;
 static const size_t LEN_SUBLANG = 2;
 static const size_t LEN_FULL = LEN_LANG + 1 + LEN_SUBLANG; // 1 for '_'
 
-#define TRACE_I18N _T("i18n")
+#define TRACE_I18N wxT("i18n")
 
 // ----------------------------------------------------------------------------
 // global functions
@@ -1088,7 +1088,7 @@ static wxString GetFullSearchPath(const 
     wxString wxp = wxGetInstallPrefix();
     if ( !wxp.empty() )
     {
-        wxp = GetMsgCatalogSubdirs(wxp + _T("/share/locale"), lang);
+        wxp = GetMsgCatalogSubdirs(wxp + wxT("/share/locale"), lang);
         if ( paths.Index(wxp) == wxNOT_FOUND )
             paths.Add(wxp);
     }
@@ -1124,7 +1124,7 @@ bool wxMsgCatalogFile::Load(const wxChar
   if ( encSys != wxFONTENCODING_SYSTEM )
   {
     wxString fullname(szDirPrefix);
-    fullname << _T('.') << wxFontMapperBase::GetEncodingName(encSys);
+    fullname << wxT('.') << wxFontMapperBase::GetEncodingName(encSys);
     searchPath << GetFullSearchPath(fullname) << wxPATH_SEP;
   }
 #endif // wxUSE_FONTMAP
@@ -1150,21 +1150,21 @@ bool wxMsgCatalogFile::Load(const wxChar
   NoTransErr noTransErr;
   wxLogVerbose(_("looking for catalog '%s' in path '%s'."),
                szName, searchPath.c_str());
-  wxLogTrace(TRACE_I18N, _T("Looking for \"%s.mo\" in \"%s\""),
+  wxLogTrace(TRACE_I18N, wxT("Looking for \"%s.mo\" in \"%s\""),
              szName, searchPath.c_str());
 
   wxFileName fn(szName);
-  fn.SetExt(_T("mo"));
+  fn.SetExt(wxT("mo"));
   wxString strFullName;
   if ( !wxFindFileInPath(&strFullName, searchPath, fn.GetFullPath()) ) {
     wxLogVerbose(_("catalog file for domain '%s' not found."), szName);
-    wxLogTrace(TRACE_I18N, _T("Catalog \"%s.mo\" not found"), szName);
+    wxLogTrace(TRACE_I18N, wxT("Catalog \"%s.mo\" not found"), szName);
     return false;
   }
 
   // open file
   wxLogVerbose(_("using catalog '%s' from '%s'."), szName, strFullName.c_str());
-  wxLogTrace(TRACE_I18N, _T("Using catalog \"%s\"."), strFullName.c_str());
+  wxLogTrace(TRACE_I18N, wxT("Using catalog \"%s\"."), strFullName.c_str());
 
   wxFile fileMsg(strFullName);
   if ( !fileMsg.IsOpened() )
@@ -1176,7 +1176,7 @@ bool wxMsgCatalogFile::Load(const wxChar
     return false;
 
   size_t nSize = wx_truncate_cast(size_t, lenFile);
-  wxASSERT_MSG( nSize == lenFile + size_t(0), _T("message catalog bigger than 4GB?") );
+  wxASSERT_MSG( nSize == lenFile + size_t(0), wxT("message catalog bigger than 4GB?") );
 
   // read the whole file in memory
   m_pData = new size_t8[nSize];
@@ -1319,7 +1319,7 @@ void wxMsgCatalogFile::FillHash(wxMessag
 
 #elif wxUSE_FONTMAP
     wxASSERT_MSG( msgIdCharset.empty(),
-                  _T("non-ASCII msgid languages only supported if wxUSE_WCHAR_T=1") );
+                  wxT("non-ASCII msgid languages only supported if wxUSE_WCHAR_T=1") );
 
     wxEncodingConverter converter;
     if ( convertEncoding )
@@ -1537,7 +1537,7 @@ bool wxLocale::Init(const wxChar *szName
                     bool        bConvertEncoding)
 {
   wxASSERT_MSG( !m_initialized,
-                _T("you can't call wxLocale::Init more than once") );
+                wxT("you can't call wxLocale::Init more than once") );
 
   m_initialized = true;
   m_strLocale = szName;
@@ -1551,7 +1551,7 @@ bool wxLocale::Init(const wxChar *szName
     // the argument to setlocale()
     szLocale = szShort;
 
-    wxCHECK_MSG( szLocale, false, _T("no locale to set in wxLocale::Init()") );
+    wxCHECK_MSG( szLocale, false, wxT("no locale to set in wxLocale::Init()") );
   }
 
 #ifdef __WXWINCE__
@@ -1704,7 +1704,7 @@ bool wxLocale::Init(int language, int fl
             wxFontMapperBase::GetAllEncodingNames(wxFONTENCODING_UTF8);
         while ( *names )
         {
-            retloc = wxSetlocale(LC_ALL, locale + _T('.') + *names++);
+            retloc = wxSetlocale(LC_ALL, locale + wxT('.') + *names++);
             if ( retloc )
                 break;
         }
@@ -1748,9 +1748,9 @@ bool wxLocale::Init(int language, int fl
     //
     // this contradicts IBM own docs but this is not of much help, so just work around
     // it in the crudest possible manner
-    wxChar *p = wxStrchr((wxChar *)retloc, _T(' '));
+    wxChar *p = wxStrchr((wxChar *)retloc, wxT(' '));
     if ( p )
-        *p = _T('\0');
+        *p = wxT('\0');
 #endif // __AIX__
 
 #elif defined(__WIN32__)
@@ -1920,7 +1920,7 @@ void wxLocale::AddCatalogLookupPathPrefi
         return wxLANGUAGE_ENGLISH_US;
     }
 
-    if ( langFull == _T("C") || langFull == _T("POSIX") )
+    if ( langFull == wxT("C") || langFull == wxT("POSIX") )
     {
         // default C locale is English too
         return wxLANGUAGE_ENGLISH_US;
@@ -1949,11 +1949,11 @@ void wxLocale::AddCatalogLookupPathPrefi
     // we need the modified for languages like Valencian: ca_ES@valencia
     // though, remember it
     wxString modifier;
-    size_t posModifier = langFull.find_first_of(_T("@"));
+    size_t posModifier = langFull.find_first_of(wxT("@"));
     if ( posModifier != wxString::npos )
         modifier = langFull.Mid(posModifier);
 
-    size_t posEndLang = langFull.find_first_of(_T("@."));
+    size_t posEndLang = langFull.find_first_of(wxT("@."));
     if ( posEndLang != wxString::npos )
     {
         langFull.Truncate(posEndLang);
@@ -1977,7 +1977,7 @@ void wxLocale::AddCatalogLookupPathPrefi
 
         wxString lang;
         if ( langOrig == wxT("iw"))
-            lang = _T("he");
+            lang = wxT("he");
         else if (langOrig == wxT("in"))
             lang = wxT("id");
         else if (langOrig == wxT("ji"))
@@ -2388,7 +2388,7 @@ wxString wxLocale::GetSystemEncodingName
 #if defined(__WIN32__) && !defined(__WXMICROWIN__)
     // FIXME: what is the error return value for GetACP()?
     UINT codepage = ::GetACP();
-    encname.Printf(_T("windows-%u"), codepage);
+    encname.Printf(wxT("windows-%u"), codepage);
 #elif defined(__WXMAC__)
     // default is just empty string, this resolves to the default system
     // encoding later
@@ -2582,7 +2582,7 @@ const wxLanguageInfo *wxLocale::FindLang
             break;
         }
 
-        if ( wxStricmp(locale, info->CanonicalName.BeforeFirst(_T('_'))) == 0 )
+        if ( wxStricmp(locale, info->CanonicalName.BeforeFirst(wxT('_'))) == 0 )
         {
             // a match -- but maybe we'll find an exact one later, so continue
             // looking
@@ -2674,10 +2674,10 @@ const wxChar *wxLocale::GetString(const 
             NoTransErr noTransErr;
 
             wxLogTrace(TRACE_I18N,
-                       _T("string \"%s\"[%ld] not found in %slocale '%s'."),
+                       wxT("string \"%s\"[%ld] not found in %slocale '%s'."),
                        szOrigString, (long)n,
-                       szDomain ? wxString::Format(_T("domain '%s' "), szDomain).c_str()
-                                : _T(""),
+                       szDomain ? wxString::Format(wxT("domain '%s' "), szDomain).c_str()
+                                : wxT(""),
                        m_strLocale.c_str());
         }
 #endif // __WXDEBUG__
@@ -2762,7 +2762,7 @@ wxMsgCatalog *wxLocale::FindCatalog(cons
 bool wxLocale::IsAvailable(int lang)
 {
     const wxLanguageInfo *info = wxLocale::GetLanguageInfo(lang);
-    wxCHECK_MSG( info, false, _T("invalid language") );
+    wxCHECK_MSG( info, false, wxT("invalid language") );
 
 #if defined(__WIN32__)
     if ( !info->WinLang )
@@ -2936,7 +2936,7 @@ wxString wxLocale::GetInfo(wxLocaleInfo 
             break;
 
         default:
-            wxFAIL_MSG( _T("Unknown locale info") );
+            wxFAIL_MSG( wxT("Unknown locale info") );
     }
 
     wxMacCFStringHolder
--- src/common/log.cpp-orig	2009-06-18 16:05:04.167675000 -0500
+++ src/common/log.cpp	2009-06-18 16:05:19.863669000 -0500
@@ -127,7 +127,7 @@ void wxSafeShowMessage(const wxString& t
 #ifdef __WINDOWS__
     ::MessageBox(NULL, text, title, MB_OK | MB_ICONSTOP);
 #else
-    wxFprintf(stderr, _T("%s: %s\n"), title.c_str(), text.c_str());
+    wxFprintf(stderr, wxT("%s: %s\n"), title.c_str(), text.c_str());
     fflush(stderr);
 #endif
 }
@@ -136,7 +136,7 @@ void wxSafeShowMessage(const wxString& t
 // always terminate the program
 void wxVLogFatalError(const wxChar *szFormat, va_list argptr)
 {
-    wxSafeShowMessage(_T("Fatal Error"), wxString::FormatV(szFormat, argptr));
+    wxSafeShowMessage(wxT("Fatal Error"), wxString::FormatV(szFormat, argptr));
 
 #ifdef __WXWINCE__
     ExitThread(3);
@@ -198,7 +198,7 @@ void wxLogVerbose(const wxChar *szFormat
   {
     if ( wxLog::IsEnabled() && wxLog::IsAllowedTraceMask(mask) ) {
       wxString msg;
-      msg << _T("(") << mask << _T(") ") << wxString::FormatV(szFormat, argptr);
+      msg << wxT("(") << mask << wxT(") ") << wxString::FormatV(szFormat, argptr);
           
       wxLog::OnLog(wxLOG_Trace, msg, time(NULL));
     }
@@ -523,7 +523,7 @@ void wxLogBuffer::Flush()
     if ( !m_str.empty() )
     {
         wxMessageOutputBest out;
-        out.Printf(_T("%s"), m_str.c_str());
+        out.Printf(wxT("%s"), m_str.c_str());
         m_str.clear();
     }
 }
@@ -543,7 +543,7 @@ void wxLogBuffer::DoLog(wxLogLevel level
                 str += szString;
 
                 wxMessageOutputDebug dbgout;
-                dbgout.Printf(_T("%s\n"), str.c_str());
+                dbgout.Printf(wxT("%s\n"), str.c_str());
             }
 #endif // __WXDEBUG__
             break;
@@ -555,7 +555,7 @@ void wxLogBuffer::DoLog(wxLogLevel level
 
 void wxLogBuffer::DoLogString(const wxChar *szString, time_t WXUNUSED(t))
 {
-    m_str << szString << _T("\n");
+    m_str << szString << wxT("\n");
 }
 
 // ----------------------------------------------------------------------------
@@ -577,7 +577,7 @@ void wxLogStderr::DoLogString(const wxCh
     str << szString;
 
     wxFputs(str, m_fp);
-    wxFputc(_T('\n'), m_fp);
+    wxFputc(wxT('\n'), m_fp);
     fflush(m_fp);
 
     // under GUI systems such as Windows or Mac, programs usually don't have
@@ -590,7 +590,7 @@ void wxLogStderr::DoLogString(const wxCh
         if ( traits && !traits->HasStderr() )
         {
             wxMessageOutputDebug dbgout;
-            dbgout.Printf(_T("%s\n"), str.c_str());
+            dbgout.Printf(wxT("%s\n"), str.c_str());
         }
     }
 }
@@ -792,7 +792,7 @@ const wxChar *wxSysErrorMsg(unsigned lon
     {
         // if this happens, something is seriously wrong, so don't use _() here
         // for safety
-        wxSprintf(s_szBuf, _T("unknown error %lx"), nErrCode);
+        wxSprintf(s_szBuf, wxT("unknown error %lx"), nErrCode);
         return s_szBuf;
     }
 
--- src/common/longlong.cpp-orig	2009-06-18 16:05:28.235351000 -0500
+++ src/common/longlong.cpp	2009-06-18 16:06:03.378069000 -0500
@@ -1172,7 +1172,7 @@ void *wxULongLongWx::asArray(void) const
             while ( ll != 0 )                                        \
             {                                                        \
                 long digit = (ll % 10).ToLong();                     \
-                result.Prepend((wxChar)(_T('0') - digit));           \
+                result.Prepend((wxChar)(wxT('0') - digit));          \
                 ll /= 10;                                            \
             }                                                        \
         }                                                            \
@@ -1181,15 +1181,15 @@ void *wxULongLongWx::asArray(void) const
             while ( ll != 0 )                                        \
             {                                                        \
                 long digit = (ll % 10).ToLong();                     \
-                result.Prepend((wxChar)(_T('0') + digit));           \
+                result.Prepend((wxChar)(wxT('0') + digit));          \
                 ll /= 10;                                            \
             }                                                        \
         }                                                            \
                                                                      \
         if ( result.empty() )                                        \
-            result = _T('0');                                        \
+            result = wxT('0');                                       \
         else if ( neg )                                              \
-            result.Prepend(_T('-'));                                 \
+            result.Prepend(wxT('-'));                                \
                                                                      \
         return result;                                               \
     }
@@ -1204,12 +1204,12 @@ void *wxULongLongWx::asArray(void) const
                                                                      \
         while ( ll != 0 )                                            \
         {                                                            \
-            result.Prepend((wxChar)(_T('0') + (ll % 10).ToULong())); \
+            result.Prepend((wxChar)(wxT('0') + (ll % 10).ToULong())); \
             ll /= 10;                                                \
         }                                                            \
                                                                      \
         if ( result.empty() )                                        \
-            result = _T('0');                                        \
+            result = wxT('0');                                       \
                                                                      \
         return result;                                               \
     }
--- src/common/mimecmn.cpp-orig	2009-06-18 16:09:47.165488000 -0500
+++ src/common/mimecmn.cpp	2009-06-18 16:10:10.606757000 -0500
@@ -251,7 +251,7 @@ wxString wxFileType::ExpandCommand(const
     // test now carried out on reading file so test should never get here
     if ( !hasFilename && !str.empty()
 #ifdef __UNIX__
-                      && !str.StartsWith(_T("test "))
+                      && !str.StartsWith(wxT("test "))
 #endif // Unix
        ) {
         str << wxT(" < '") << params.GetFileName() << wxT('\'');
@@ -291,7 +291,7 @@ bool wxFileType::GetExtensions(wxArraySt
 
 bool wxFileType::GetMimeType(wxString *mimeType) const
 {
-    wxCHECK_MSG( mimeType, false, _T("invalid parameter in GetMimeType") );
+    wxCHECK_MSG( mimeType, false, wxT("invalid parameter in GetMimeType") );
 
     if ( m_info )
     {
@@ -355,7 +355,7 @@ wxFileType::GetIcon(wxIconLocation *icon
 
 bool wxFileType::GetDescription(wxString *desc) const
 {
-    wxCHECK_MSG( desc, false, _T("invalid parameter in GetDescription") );
+    wxCHECK_MSG( desc, false, wxT("invalid parameter in GetDescription") );
 
     if ( m_info )
     {
@@ -371,7 +371,7 @@ bool
 wxFileType::GetOpenCommand(wxString *openCmd,
                            const wxFileType::MessageParameters& params) const
 {
-    wxCHECK_MSG( openCmd, false, _T("invalid parameter in GetOpenCommand") );
+    wxCHECK_MSG( openCmd, false, wxT("invalid parameter in GetOpenCommand") );
 
     if ( m_info )
     {
@@ -399,7 +399,7 @@ bool
 wxFileType::GetPrintCommand(wxString *printCmd,
                             const wxFileType::MessageParameters& params) const
 {
-    wxCHECK_MSG( printCmd, false, _T("invalid parameter in GetPrintCommand") );
+    wxCHECK_MSG( printCmd, false, wxT("invalid parameter in GetPrintCommand") );
 
     if ( m_info )
     {
@@ -431,7 +431,7 @@ size_t wxFileType::GetAllCommands(wxArra
     if ( GetOpenCommand(&cmd, params) )
     {
         if ( verbs )
-            verbs->Add(_T("Open"));
+            verbs->Add(wxT("Open"));
         if ( commands )
             commands->Add(cmd);
         count++;
@@ -440,7 +440,7 @@ size_t wxFileType::GetAllCommands(wxArra
     if ( GetPrintCommand(&cmd, params) )
     {
         if ( verbs )
-            verbs->Add(_T("Print"));
+            verbs->Add(wxT("Print"));
         if ( commands )
             commands->Add(cmd);
 
@@ -458,7 +458,7 @@ bool wxFileType::Unassociate()
 #elif defined(__UNIX__)
     return m_impl->Unassociate(this);
 #else
-    wxFAIL_MSG( _T("not implemented") ); // TODO
+    wxFAIL_MSG( wxT("not implemented") ); // TODO
     return false;
 #endif
 }
@@ -473,7 +473,7 @@ bool wxFileType::SetCommand(const wxStri
     wxUnusedVar(cmd);
     wxUnusedVar(verb);
     wxUnusedVar(overwriteprompt);
-    wxFAIL_MSG(_T("not implemented"));
+    wxFAIL_MSG(wxT("not implemented"));
     return false;
 #endif
 }
@@ -487,13 +487,13 @@ bool wxFileType::SetDefaultIcon(const wx
     if ( sTmp.empty() )
         GetOpenCommand(&sTmp, wxFileType::MessageParameters(wxEmptyString, wxEmptyString));
 #endif
-    wxCHECK_MSG( !sTmp.empty(), false, _T("need the icon file") );
+    wxCHECK_MSG( !sTmp.empty(), false, wxT("need the icon file") );
 
 #if defined (__WXMSW__) || defined(__UNIX__)
     return m_impl->SetDefaultIcon (cmd, index);
 #else
     wxUnusedVar(index);
-    wxFAIL_MSG(_T("not implemented"));
+    wxFAIL_MSG(wxT("not implemented"));
     return false;
 #endif
 }
@@ -591,7 +591,7 @@ wxMimeTypesManager::Associate(const wxFi
     return m_impl->Associate(ftInfo);
 #else // other platforms
     wxUnusedVar(ftInfo);
-    wxFAIL_MSG( _T("not implemented") ); // TODO
+    wxFAIL_MSG( wxT("not implemented") ); // TODO
     return NULL;
 #endif // platforms
 }
@@ -609,7 +609,7 @@ wxMimeTypesManager::GetFileTypeFromExten
     else
         extWithoutDot = ext;
 
-    wxCHECK_MSG( !ext.empty(), NULL, _T("extension can't be empty") );
+    wxCHECK_MSG( !ext.empty(), NULL, wxT("extension can't be empty") );
 
     wxFileType *ft = m_impl->GetFileTypeFromExtension(extWithoutDot);
 
--- src/common/platinfo.cpp-orig	2009-06-18 16:10:20.682370000 -0500
+++ src/common/platinfo.cpp	2009-06-18 16:10:30.529310000 -0500
@@ -45,57 +45,57 @@ static wxPlatformInfo gs_platInfo(wxPORT
 
 static const wxChar* const wxOperatingSystemIdNames[] =
 {
-    _T("Apple Mac OS"),
-    _T("Apple Mac OS X"),
+    wxT("Apple Mac OS"),
+    wxT("Apple Mac OS X"),
 
-    _T("Microsoft Windows 9X"),
-    _T("Microsoft Windows NT"),
-    _T("Microsoft Windows Micro"),
-    _T("Microsoft Windows CE"),
-
-    _T("Linux"),
-    _T("FreeBSD"),
-    _T("OpenBSD"),
-    _T("NetBSD"),
-
-    _T("SunOS"),
-    _T("AIX"),
-    _T("HPUX"),
+    wxT("Microsoft Windows 9X"),
+    wxT("Microsoft Windows NT"),
+    wxT("Microsoft Windows Micro"),
+    wxT("Microsoft Windows CE"),
+
+    wxT("Linux"),
+    wxT("FreeBSD"),
+    wxT("OpenBSD"),
+    wxT("NetBSD"),
+
+    wxT("SunOS"),
+    wxT("AIX"),
+    wxT("HPUX"),
 
-    _T("Other Unix"),
-    _T("Other Unix"),
+    wxT("Other Unix"),
+    wxT("Other Unix"),
 
-    _T("DOS"),
-    _T("OS/2")
+    wxT("DOS"),
+    wxT("OS/2")
 };
 
 static const wxChar* const wxPortIdNames[] =
 {
-    _T("wxBase"),
-    _T("wxMSW"),
-    _T("wxMotif"),
-    _T("wxGTK"),
-    _T("wxMGL"),
-    _T("wxX11"),
-    _T("wxOS2"),
-    _T("wxMac"),
-    _T("wxCocoa"),
-    _T("wxWinCE"),
-    _T("wxPalmOS"),
-    _T("wxDFB")
+    wxT("wxBase"),
+    wxT("wxMSW"),
+    wxT("wxMotif"),
+    wxT("wxGTK"),
+    wxT("wxMGL"),
+    wxT("wxX11"),
+    wxT("wxOS2"),
+    wxT("wxMac"),
+    wxT("wxCocoa"),
+    wxT("wxWinCE"),
+    wxT("wxPalmOS"),
+    wxT("wxDFB")
 };
 
 static const wxChar* const wxArchitectureNames[] =
 {
-    _T("32 bit"),
-    _T("64 bit")
+    wxT("32 bit"),
+    wxT("64 bit")
 };
 
 static const wxChar* const wxEndiannessNames[] =
 {
-    _T("Big endian"),
-    _T("Little endian"),
-    _T("PDP endian")
+    wxT("Big endian"),
+    wxT("Little endian"),
+    wxT("PDP endian")
 };
 
 // ----------------------------------------------------------------------------
@@ -106,7 +106,7 @@ static const wxChar* const wxEndiannessN
 // corresponding indices
 static unsigned wxGetIndexFromEnumValue(int value)
 {
-    wxCHECK_MSG( value, (unsigned)-1, _T("invalid enum value") );
+    wxCHECK_MSG( value, (unsigned)-1, wxT("invalid enum value") );
 
     int n = 0;
     while ( !(value & 1) )
@@ -115,7 +115,7 @@ static unsigned wxGetIndexFromEnumValue(
         n++;
     }
 
-    wxASSERT_MSG( value == 1, _T("more than one bit set in enum value") );
+    wxASSERT_MSG( value == 1, wxT("more than one bit set in enum value") );
 
     return n;
 }
@@ -168,7 +168,7 @@ void wxPlatformInfo::InitForCurrentPlatf
     const wxAppTraits * const traits = wxTheApp ? wxTheApp->GetTraits() : NULL;
     if ( !traits )
     {
-        wxFAIL_MSG( _T("failed to initialize wxPlatformInfo") );
+        wxFAIL_MSG( wxT("failed to initialize wxPlatformInfo") );
 
         m_port = wxPORT_UNKNOWN;
         m_usingUniversal = false;
@@ -207,17 +207,17 @@ const wxPlatformInfo& wxPlatformInfo::Ge
 
 wxString wxPlatformInfo::GetOperatingSystemFamilyName(wxOperatingSystemId os)
 {
-    const wxChar* string = _T("Unknown");
+    const wxChar* string = wxT("Unknown");
     if ( os & wxOS_MAC )
-        string = _T("Macintosh");
+        string = wxT("Macintosh");
     else if ( os & wxOS_WINDOWS )
-        string = _T("Windows");
+        string = wxT("Windows");
     else if ( os & wxOS_UNIX )
-        string = _T("Unix");
+        string = wxT("Unix");
     else if ( os == wxOS_DOS )
-        string = _T("DOS");
+        string = wxT("DOS");
     else if ( os == wxOS_OS2 )
-        string = _T("OS/2");
+        string = wxT("OS/2");
 
     return string;
 }
@@ -227,7 +227,7 @@ wxString wxPlatformInfo::GetOperatingSys
     const unsigned idx = wxGetIndexFromEnumValue(os);
 
     wxCHECK_MSG( idx < WXSIZEOF(wxOperatingSystemIdNames), wxEmptyString,
-                 _T("invalid OS id") );
+                 wxT("invalid OS id") );
 
     return wxOperatingSystemIdNames[idx];
 }
@@ -237,7 +237,7 @@ wxString wxPlatformInfo::GetPortIdName(w
     const unsigned idx = wxGetIndexFromEnumValue(port);
 
     wxCHECK_MSG( idx < WXSIZEOF(wxPortIdNames), wxEmptyString,
-                 _T("invalid port id") );
+                 wxT("invalid port id") );
 
     wxString ret = wxPortIdNames[idx];
 
@@ -252,7 +252,7 @@ wxString wxPlatformInfo::GetPortIdShortN
     const unsigned idx = wxGetIndexFromEnumValue(port);
 
     wxCHECK_MSG( idx < WXSIZEOF(wxPortIdNames), wxEmptyString,
-                 _T("invalid port id") );
+                 wxT("invalid port id") );
 
     wxString ret = wxPortIdNames[idx];
     ret = ret.Mid(2).Lower();       // remove 'wx' prefix
--- src/common/regex.cpp-orig	2009-06-18 16:10:43.337283000 -0500
+++ src/common/regex.cpp	2009-06-18 16:10:59.747828000 -0500
@@ -269,10 +269,10 @@ bool wxRegExImpl::Compile(const wxString
 #else
 #   define FLAVORS (wxRE_ADVANCED | wxRE_BASIC)
     wxASSERT_MSG( (flags & FLAVORS) != FLAVORS,
-                  _T("incompatible flags in wxRegEx::Compile") );
+                  wxT("incompatible flags in wxRegEx::Compile") );
 #endif
     wxASSERT_MSG( !(flags & ~(FLAVORS | wxRE_ICASE | wxRE_NOSUB | wxRE_NEWLINE)),
-                  _T("unrecognized flags in wxRegEx::Compile") );
+                  wxT("unrecognized flags in wxRegEx::Compile") );
 
     // translate our flags to regcomp() ones
     int flagsRE = 0;
@@ -328,15 +328,15 @@ bool wxRegExImpl::Compile(const wxString
             // and some more for bracketed subexperessions
             for ( const wxChar *cptr = expr.c_str(); *cptr; cptr++ )
             {
-                if ( *cptr == _T('\\') )
+                if ( *cptr == wxT('\\') )
                 {
                     // in basic RE syntax groups are inside \(...\)
-                    if ( *++cptr == _T('(') && (flags & wxRE_BASIC) )
+                    if ( *++cptr == wxT('(') && (flags & wxRE_BASIC) )
                     {
                         m_nMatches++;
                     }
                 }
-                else if ( *cptr == _T('(') && !(flags & wxRE_BASIC) )
+                else if ( *cptr == wxT('(') && !(flags & wxRE_BASIC) )
                 {
                     // we know that the previous character is not an unquoted
                     // backslash because it would have been eaten above, so we
@@ -344,7 +344,7 @@ bool wxRegExImpl::Compile(const wxString
                     // extended syntax. '(?' is used for extensions by perl-
                     // like REs (e.g. advanced), and is not valid for POSIX
                     // extended, so ignore them always.
-                    if ( cptr[1] != _T('?') )
+                    if ( cptr[1] != wxT('?') )
                         m_nMatches++;
                 }
             }
@@ -387,11 +387,11 @@ bool wxRegExImpl::Matches(const wxRegCha
                           int flags
                           WXREGEX_IF_NEED_LEN(size_t len)) const
 {
-    wxCHECK_MSG( IsValid(), false, _T("must successfully Compile() first") );
+    wxCHECK_MSG( IsValid(), false, wxT("must successfully Compile() first") );
 
     // translate our flags to regexec() ones
     wxASSERT_MSG( !(flags & ~(wxRE_NOTBOL | wxRE_NOTEOL)),
-                  _T("unrecognized flags in wxRegEx::Matches") );
+                  wxT("unrecognized flags in wxRegEx::Matches") );
 
     int flagsRE = 0;
     if ( flags & wxRE_NOTBOL )
@@ -437,10 +437,10 @@ bool wxRegExImpl::Matches(const wxRegCha
 
 bool wxRegExImpl::GetMatch(size_t *start, size_t *len, size_t index) const
 {
-    wxCHECK_MSG( IsValid(), false, _T("must successfully Compile() first") );
-    wxCHECK_MSG( m_nMatches, false, _T("can't use with wxRE_NOSUB") );
-    wxCHECK_MSG( m_Matches, false, _T("must call Matches() first") );
-    wxCHECK_MSG( index < m_nMatches, false, _T("invalid match index") );
+    wxCHECK_MSG( IsValid(), false, wxT("must successfully Compile() first") );
+    wxCHECK_MSG( m_nMatches, false, wxT("can't use with wxRE_NOSUB") );
+    wxCHECK_MSG( m_Matches, false, wxT("must call Matches() first") );
+    wxCHECK_MSG( index < m_nMatches, false, wxT("invalid match index") );
 
     if ( start )
         *start = m_Matches->Start(index);
@@ -452,8 +452,8 @@ bool wxRegExImpl::GetMatch(size_t *start
 
 size_t wxRegExImpl::GetMatchCount() const
 {
-    wxCHECK_MSG( IsValid(), 0, _T("must successfully Compile() first") );
-    wxCHECK_MSG( m_nMatches, 0, _T("can't use with wxRE_NOSUB") );
+    wxCHECK_MSG( IsValid(), 0, wxT("must successfully Compile() first") );
+    wxCHECK_MSG( m_nMatches, 0, wxT("can't use with wxRE_NOSUB") );
 
     return m_nMatches;
 }
@@ -462,8 +462,8 @@ int wxRegExImpl::Replace(wxString *text,
                          const wxString& replacement,
                          size_t maxMatches) const
 {
-    wxCHECK_MSG( text, wxNOT_FOUND, _T("NULL text in wxRegEx::Replace") );
-    wxCHECK_MSG( IsValid(), wxNOT_FOUND, _T("must successfully Compile() first") );
+    wxCHECK_MSG( text, wxNOT_FOUND, wxT("NULL text in wxRegEx::Replace") );
+    wxCHECK_MSG( IsValid(), wxNOT_FOUND, wxT("must successfully Compile() first") );
 
     // the input string
 #ifndef WXREGEX_CONVERT_TO_MB
@@ -491,7 +491,7 @@ int wxRegExImpl::Replace(wxString *text,
     // attempt at optimization: don't iterate over the string if it doesn't
     // contain back references at all
     bool mayHaveBackrefs =
-        replacement.find_first_of(_T("\\&")) != wxString::npos;
+        replacement.find_first_of(wxT("\\&")) != wxString::npos;
 
     if ( !mayHaveBackrefs )
     {
@@ -524,7 +524,7 @@ int wxRegExImpl::Replace(wxString *text,
             {
                 size_t index = (size_t)-1;
 
-                if ( *p == _T('\\') )
+                if ( *p == wxT('\\') )
                 {
                     if ( wxIsdigit(*++p) )
                     {
@@ -535,7 +535,7 @@ int wxRegExImpl::Replace(wxString *text,
                     }
                     //else: backslash used as escape character
                 }
-                else if ( *p == _T('&') )
+                else if ( *p == wxT('&') )
                 {
                     // treat this as "\0" for compatbility with ed and such
                     index = 0;
@@ -548,7 +548,7 @@ int wxRegExImpl::Replace(wxString *text,
                     size_t start, len;
                     if ( !GetMatch(&start, &len, index) )
                     {
-                        wxFAIL_MSG( _T("invalid back reference") );
+                        wxFAIL_MSG( wxT("invalid back reference") );
 
                         // just eat it...
                     }
@@ -571,7 +571,7 @@ int wxRegExImpl::Replace(wxString *text,
         if ( !GetMatch(&start, &len) )
         {
             // we did have match as Matches() returned true above!
-            wxFAIL_MSG( _T("internal logic error in wxRegEx::Replace") );
+            wxFAIL_MSG( wxT("internal logic error in wxRegEx::Replace") );
 
             return wxNOT_FOUND;
         }
@@ -639,7 +639,7 @@ bool wxRegEx::Compile(const wxString& ex
 
 bool wxRegEx::Matches(const wxChar *str, int flags, size_t len) const
 {
-    wxCHECK_MSG( IsValid(), false, _T("must successfully Compile() first") );
+    wxCHECK_MSG( IsValid(), false, wxT("must successfully Compile() first") );
     (void)len;
 
     return m_impl->Matches(WXREGEX_CHAR(str), flags WXREGEX_IF_NEED_LEN(len));
@@ -647,7 +647,7 @@ bool wxRegEx::Matches(const wxChar *str,
 
 bool wxRegEx::Matches(const wxChar *str, int flags) const
 {
-    wxCHECK_MSG( IsValid(), false, _T("must successfully Compile() first") );
+    wxCHECK_MSG( IsValid(), false, wxT("must successfully Compile() first") );
 
     return m_impl->Matches(WXREGEX_CHAR(str),
                            flags
@@ -656,7 +656,7 @@ bool wxRegEx::Matches(const wxChar *str,
 
 bool wxRegEx::GetMatch(size_t *start, size_t *len, size_t index) const
 {
-    wxCHECK_MSG( IsValid(), false, _T("must successfully Compile() first") );
+    wxCHECK_MSG( IsValid(), false, wxT("must successfully Compile() first") );
 
     return m_impl->GetMatch(start, len, index);
 }
@@ -672,7 +672,7 @@ wxString wxRegEx::GetMatch(const wxStrin
 
 size_t wxRegEx::GetMatchCount() const
 {
-    wxCHECK_MSG( IsValid(), 0, _T("must successfully Compile() first") );
+    wxCHECK_MSG( IsValid(), 0, wxT("must successfully Compile() first") );
 
     return m_impl->GetMatchCount();
 }
@@ -681,7 +681,7 @@ int wxRegEx::Replace(wxString *pattern,
                      const wxString& replacement,
                      size_t maxMatches) const
 {
-    wxCHECK_MSG( IsValid(), wxNOT_FOUND, _T("must successfully Compile() first") );
+    wxCHECK_MSG( IsValid(), wxNOT_FOUND, wxT("must successfully Compile() first") );
 
     return m_impl->Replace(pattern, replacement, maxMatches);
 }
--- src/common/stdpbase.cpp-orig	2009-06-18 16:11:13.022390000 -0500
+++ src/common/stdpbase.cpp	2009-06-18 16:11:20.689700000 -0500
@@ -53,7 +53,7 @@ static wxStandardPaths gs_stdPaths;
 wxStandardPathsBase& wxStandardPathsBase::Get()
 {
     wxAppTraits * const traits = wxTheApp ? wxTheApp->GetTraits() : NULL;
-    wxCHECK_MSG( traits, gs_stdPaths, _T("create wxApp before calling this") );
+    wxCHECK_MSG( traits, gs_stdPaths, wxT("create wxApp before calling this") );
 
     return traits->GetStandardPaths();
 }
@@ -159,7 +159,7 @@ wxString wxStandardPathsBase::AppendAppN
         if ( !appname.empty() )
         {
             const wxChar ch = *(subdir.end() - 1);
-            if ( !wxFileName::IsPathSeparator(ch) && ch != _T('.') )
+            if ( !wxFileName::IsPathSeparator(ch) && ch != wxT('.') )
                 subdir += wxFileName::GetPathSeparator();
 
             subdir += appname;
--- src/common/strconv.cpp-orig	2009-06-18 16:11:29.449369000 -0500
+++ src/common/strconv.cpp	2009-06-18 16:11:58.728415000 -0500
@@ -71,7 +71,7 @@
 #endif
 
 
-#define TRACE_STRCONV _T("strconv")
+#define TRACE_STRCONV wxT("strconv")
 
 // WC_UTF16 is defined only if sizeof(wchar_t) == 2, otherwise it's supposed to
 // be 4 bytes
@@ -481,8 +481,8 @@ size_t wxMBConvLibc::WC2MB(char *buf, co
 
 wxConvBrokenFileNames::wxConvBrokenFileNames(const wxChar *charset)
 {
-    if ( !charset || wxStricmp(charset, _T("UTF-8")) == 0
-                  || wxStricmp(charset, _T("UTF8")) == 0  )
+    if ( !charset || wxStricmp(charset, wxT("UTF-8")) == 0
+                  || wxStricmp(charset, wxT("UTF8")) == 0  )
         m_conv = new wxMBConvUTF8(wxMBConvUTF8::MAP_INVALID_UTF8_TO_PUA);
     else
         m_conv = new wxCSConv(charset);
@@ -1667,7 +1667,7 @@ wxMBConv_iconv::wxMBConv_iconv(const wxC
     // check for charset that represents wchar_t:
     if ( ms_wcCharsetName.empty() )
     {
-        wxLogTrace(TRACE_STRCONV, _T("Looking for wide char codeset:"));
+        wxLogTrace(TRACE_STRCONV, wxT("Looking for wide char codeset:"));
 
 #if wxUSE_FONTMAP
         const wxChar **names = wxFontMapperBase::GetAllEncodingNames(WC_ENC);
@@ -1675,9 +1675,9 @@ wxMBConv_iconv::wxMBConv_iconv(const wxC
         static const wxChar *names_static[] =
         {
 #if SIZEOF_WCHAR_T == 4
-            _T("UCS-4"),
+            wxT("UCS-4"),
 #elif SIZEOF_WCHAR_T = 2
-            _T("UCS-2"),
+            wxT("UCS-2"),
 #endif
             NULL
         };
@@ -1692,19 +1692,19 @@ wxMBConv_iconv::wxMBConv_iconv(const wxC
             wxString nameXE(nameCS);
 
 #ifdef WORDS_BIGENDIAN
-                nameXE += _T("BE");
+                nameXE += wxT("BE");
 #else // little endian
-                nameXE += _T("LE");
+                nameXE += wxT("LE");
 #endif
 
-            wxLogTrace(TRACE_STRCONV, _T("  trying charset \"%s\""),
+            wxLogTrace(TRACE_STRCONV, wxT("  trying charset \"%s\""),
                        nameXE.c_str());
 
             m2w = iconv_open(nameXE.ToAscii(), cname);
             if ( m2w == ICONV_T_INVALID )
             {
                 // try charset w/o bytesex info (e.g. "UCS4")
-                wxLogTrace(TRACE_STRCONV, _T("  trying charset \"%s\""),
+                wxLogTrace(TRACE_STRCONV, wxT("  trying charset \"%s\""),
                            nameCS.c_str());
                 m2w = iconv_open(nameCS.ToAscii(), cname);
 
@@ -1749,10 +1749,10 @@ wxMBConv_iconv::wxMBConv_iconv(const wxC
 
         wxLogTrace(TRACE_STRCONV,
                    wxT("iconv wchar_t charset is \"%s\"%s"),
-                   ms_wcCharsetName.empty() ? _T("<none>")
+                   ms_wcCharsetName.empty() ? wxT("<none>")
                                             : ms_wcCharsetName.c_str(),
-                   ms_wcNeedsSwap ? _T(" (needs swap)")
-                                  : _T(""));
+                   ms_wcNeedsSwap ? wxT(" (needs swap)")
+                                  : wxT(""));
     }
     else // we already have ms_wcCharsetName
     {
@@ -2200,7 +2200,7 @@ public:
             switch ( len )
             {
                 default:
-                    wxLogDebug(_T("Unexpected NUL length %d"), len);
+                    wxLogDebug(wxT("Unexpected NUL length %d"), len);
                     self->m_minMBCharWidth = (size_t)-1;
                     break;
 
@@ -2247,7 +2247,7 @@ private:
                     break;
             }
 
-            wxASSERT_MSG( s_isWin98Or2k != -1, _T("should be set above") );
+            wxASSERT_MSG( s_isWin98Or2k != -1, wxT("should be set above") );
         }
 
         return s_isWin98Or2k == 1;
@@ -3259,7 +3259,7 @@ wxCSConv::wxCSConv(wxFontEncoding encodi
 {
     if ( encoding == wxFONTENCODING_MAX || encoding == wxFONTENCODING_DEFAULT )
     {
-        wxFAIL_MSG( _T("invalid encoding value in wxCSConv ctor") );
+        wxFAIL_MSG( wxT("invalid encoding value in wxCSConv ctor") );
 
         encoding = wxFONTENCODING_SYSTEM;
     }
@@ -3404,7 +3404,7 @@ wxMBConv *wxCSConv::DoCreate() const
                     delete conv;
                 }
 
-                gs_nameCache[encoding] = _T(""); // cache the failure
+                gs_nameCache[encoding] = wxT(""); // cache the failure
             }
         }
 #endif // wxUSE_FONTMAP
--- src/common/string.cpp-orig	2009-06-18 16:12:07.145436000 -0500
+++ src/common/string.cpp	2009-06-18 16:12:19.641733000 -0500
@@ -67,7 +67,7 @@
 
 #if wxUSE_STL
 
-extern const wxChar WXDLLIMPEXP_BASE *wxEmptyString = _T("");
+extern const wxChar WXDLLIMPEXP_BASE *wxEmptyString = wxT("");
 
 #else
 
@@ -159,7 +159,7 @@ void wxStringBase::InitWith(const wxChar
 
   // if the length is not given, assume the string to be NUL terminated
   if ( nLength == npos ) {
-    wxASSERT_MSG( nPos <= wxStrlen(psz), _T("index out of bounds") );
+    wxASSERT_MSG( nPos <= wxStrlen(psz), wxT("index out of bounds") );
 
     nLength = wxStrlen(psz + nPos);
   }
@@ -169,7 +169,7 @@ void wxStringBase::InitWith(const wxChar
   if ( nLength > 0 ) {
     // trailing '\0' is written in AllocBuffer()
     if ( !AllocBuffer(nLength) ) {
-      wxFAIL_MSG( _T("out of memory in wxStringBase::InitWith") );
+      wxFAIL_MSG( wxT("out of memory in wxStringBase::InitWith") );
       return;
     }
     wxTmemcpy(m_pchData, psz + nPos, nLength);
@@ -186,7 +186,7 @@ wxStringBase::wxStringBase(const void *p
   }
   else
   {
-    wxFAIL_MSG( _T("pStart is not before pEnd") );
+    wxFAIL_MSG( wxT("pStart is not before pEnd") );
     Init();
   }
 }
@@ -305,7 +305,7 @@ wxStringBase& wxStringBase::append(size_
     size_type len = length();
 
     if ( !Alloc(len + n) || !CopyBeforeWrite() ) {
-      wxFAIL_MSG( _T("out of memory in wxStringBase::append") );
+      wxFAIL_MSG( wxT("out of memory in wxStringBase::append") );
     }
     GetStringData()->nDataLength = len + n;
     m_pchData[len + n] = '\0';
@@ -426,7 +426,7 @@ wxStringBase& wxStringBase::insert(size_
     if ( n == 0 ) return *this;
 
     if ( !Alloc(length() + n) || !CopyBeforeWrite() ) {
-        wxFAIL_MSG( _T("out of memory in wxStringBase::insert") );
+        wxFAIL_MSG( wxT("out of memory in wxStringBase::insert") );
     }
 
     memmove(m_pchData + nPos + n, m_pchData + nPos,
@@ -598,7 +598,7 @@ size_t wxStringBase::find_last_of(const 
     else
     {
         wxASSERT_MSG( nStart <= length(),
-                        _T("invalid index in find_last_of()") );
+                        wxT("invalid index in find_last_of()") );
     }
 
     size_t len = wxStrlen(sz);
@@ -715,7 +715,7 @@ wxStringBase& wxStringBase::replace(size
                                     const wxChar *sz)
 {
   wxASSERT_MSG( nStart <= length(),
-                _T("index out of bounds in wxStringBase::replace") );
+                wxT("index out of bounds in wxStringBase::replace") );
   size_t strLen = length() - nStart;
   nLen = strLen < nLen ? strLen : nLen;
 
@@ -794,7 +794,7 @@ wxStringBase& wxStringBase::operator=(co
 wxStringBase& wxStringBase::operator=(wxChar ch)
 {
   if ( !AssignCopy(1, &ch) ) {
-    wxFAIL_MSG( _T("out of memory in wxStringBase::operator=(wxChar)") );
+    wxFAIL_MSG( wxT("out of memory in wxStringBase::operator=(wxChar)") );
   }
   return *this;
 }
@@ -803,7 +803,7 @@ wxStringBase& wxStringBase::operator=(wx
 wxStringBase& wxStringBase::operator=(const wxChar *psz)
 {
   if ( !AssignCopy(wxStrlen(psz), psz) ) {
-    wxFAIL_MSG( _T("out of memory in wxStringBase::operator=(const wxChar *)") );
+    wxFAIL_MSG( wxT("out of memory in wxStringBase::operator=(const wxChar *)") );
   }
   return *this;
 }
@@ -1094,10 +1094,10 @@ void wxString::UngetWriteBuf(size_t nLen
 {
   wxStringData * const pData = GetStringData();
 
-  wxASSERT_MSG( nLen < pData->nAllocLength, _T("buffer overrun") );
+  wxASSERT_MSG( nLen < pData->nAllocLength, wxT("buffer overrun") );
 
   // the strings we store are always NUL-terminated
-  pData->data()[nLen] = _T('\0');
+  pData->data()[nLen] = wxT('\0');
   pData->nDataLength = nLen;
   pData->Validate(true);
 }
@@ -1185,7 +1185,7 @@ wxString operator+(const wxString& str, 
 
     wxString s;
     if ( !s.Alloc(wxStrlen(psz) + str.length()) ) {
-        wxFAIL_MSG( _T("out of memory in wxString::operator+") );
+        wxFAIL_MSG( wxT("out of memory in wxString::operator+") );
     }
     s += str;
     s += psz;
@@ -1201,7 +1201,7 @@ wxString operator+(const wxChar *psz, co
 
     wxString s;
     if ( !s.Alloc(wxStrlen(psz) + str.length()) ) {
-        wxFAIL_MSG( _T("out of memory in wxString::operator+") );
+        wxFAIL_MSG( wxT("out of memory in wxString::operator+") );
     }
     s = psz;
     s += str;
@@ -1362,7 +1362,7 @@ wxString wxString::Mid(size_t nFirst, si
     wxString dest(*this, nFirst, nCount);
     if ( dest.length() != nCount )
     {
-        wxFAIL_MSG( _T("out of memory in wxString::Mid") );
+        wxFAIL_MSG( wxT("out of memory in wxString::Mid") );
     }
 
     return dest;
@@ -1372,7 +1372,7 @@ wxString wxString::Mid(size_t nFirst, si
 // in the provided pointer if it is not NULL, otherwise return false
 bool wxString::StartsWith(const wxChar *prefix, wxString *rest) const
 {
-    wxASSERT_MSG( prefix, _T("invalid parameter in wxString::StartsWith") );
+    wxASSERT_MSG( prefix, wxT("invalid parameter in wxString::StartsWith") );
 
     // first check if the beginning of the string matches the prefix: note
     // that we don't have to check that we don't run out of this string as
@@ -1402,7 +1402,7 @@ bool wxString::StartsWith(const wxChar *
 // provided pointer if it is not NULL, otherwise return false
 bool wxString::EndsWith(const wxChar *suffix, wxString *rest) const
 {
-    wxASSERT_MSG( suffix, _T("invalid parameter in wxString::EndssWith") );
+    wxASSERT_MSG( suffix, wxT("invalid parameter in wxString::EndssWith") );
 
     int start = length() - wxStrlen(suffix);
     if ( start < 0 || wxStrcmp(c_str() + start, suffix) != 0 )
@@ -1426,7 +1426,7 @@ wxString wxString::Right(size_t nCount) 
 
   wxString dest(*this, length() - nCount, nCount);
   if ( dest.length() != nCount ) {
-    wxFAIL_MSG( _T("out of memory in wxString::Right") );
+    wxFAIL_MSG( wxT("out of memory in wxString::Right") );
   }
   return dest;
 }
@@ -1453,7 +1453,7 @@ wxString wxString::Left(size_t nCount) c
 
   wxString dest(*this, 0, nCount);
   if ( dest.length() != nCount ) {
-    wxFAIL_MSG( _T("out of memory in wxString::Left") );
+    wxFAIL_MSG( wxT("out of memory in wxString::Left") );
   }
   return dest;
 }
@@ -1497,7 +1497,7 @@ wxString::Replace(const wxChar *szOld, c
 {
     // if we tried to replace an empty string we'd enter an infinite loop below
     wxCHECK_MSG( szOld && *szOld && szNew, 0,
-                 _T("wxString::Replace(): invalid parameter") );
+                 wxT("wxString::Replace(): invalid parameter") );
 
     size_t uiCount = 0;   // count of replacements made
 
@@ -1718,8 +1718,8 @@ bool wxStringToIntType(const wxChar *sta
                        int base,
                        F func)
 {
-    wxCHECK_MSG( val, false, _T("NULL output pointer") );
-    wxASSERT_MSG( !base || (base > 1 && base <= 36), _T("invalid base") );
+    wxCHECK_MSG( val, false, wxT("NULL output pointer") );
+    wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
 
 #ifndef __WXWINCE__
     errno = 0;
@@ -1773,7 +1773,7 @@ bool wxString::ToULongLong(wxULongLong_t
 
 bool wxString::ToDouble(double *val) const
 {
-    wxCHECK_MSG( val, false, _T("NULL pointer in wxString::ToDouble") );
+    wxCHECK_MSG( val, false, wxT("NULL pointer in wxString::ToDouble") );
 
 #ifndef __WXWINCE__
     errno = 0;
@@ -1920,7 +1920,7 @@ int wxString::PrintfV(const wxChar* pszF
         // always do it manually
         // FIXME: This really seems to be the wrong and would be an off-by-one
         // bug except the code above allocates an extra character.
-        buf[size] = _T('\0');
+        buf[size] = wxT('\0');
 
         // vsnprintf() may return either -1 (traditional Unix behaviour) or the
         // total number of characters which would have been written if the
@@ -1993,31 +1993,31 @@ bool wxString::Matches(const wxChar *psz
     wxString pattern;
     pattern.reserve(wxStrlen(pszMask));
 
-    pattern += _T('^');
+    pattern += wxT('^');
     while ( *pszMask )
     {
         switch ( *pszMask )
         {
-            case _T('?'):
-                pattern += _T('.');
+            case wxT('?'):
+                pattern += wxT('.');
                 break;
 
-            case _T('*'):
-                pattern += _T(".*");
+            case wxT('*'):
+                pattern += wxT(".*");
                 break;
 
-            case _T('^'):
-            case _T('.'):
-            case _T('$'):
-            case _T('('):
-            case _T(')'):
-            case _T('|'):
-            case _T('+'):
-            case _T('\\'):
+            case wxT('^'):
+            case wxT('.'):
+            case wxT('$'):
+            case wxT('('):
+            case wxT(')'):
+            case wxT('|'):
+            case wxT('+'):
+            case wxT('\\'):
                 // these characters are special in a RE, quote them
                 // (however note that we don't quote '[' and ']' to allow
                 // using them for Unix shell like matching)
-                pattern += _T('\\');
+                pattern += wxT('\\');
                 // fall through
 
             default:
@@ -2026,7 +2026,7 @@ bool wxString::Matches(const wxChar *psz
 
         pszMask++;
     }
-    pattern += _T('$');
+    pattern += wxT('$');
 
     // and now use it
     return wxRegEx(pattern, wxRE_NOSUB | wxRE_EXTENDED).Matches(c_str());
--- src/common/sysopt.cpp-orig	2009-06-18 16:12:31.073888000 -0500
+++ src/common/sysopt.cpp	2009-06-18 16:12:42.014752000 -0500
@@ -82,17 +82,17 @@ wxString wxSystemOptions::GetOption(cons
         // which can be set to affect the behaviour or just this application
         // and then for "wx_name" which can be set to change the option globally
         wxString var(name);
-        var.Replace(_T("."), _T("_"));  // '.'s not allowed in env var names
+        var.Replace(wxT("."), wxT("_"));  // '.'s not allowed in env var names
 
         wxString appname;
         if ( wxTheApp )
             appname = wxTheApp->GetAppName();
 
         if ( !appname.empty() )
-            val = wxGetenv(_T("wx_") + appname + _T('_') + var);
+            val = wxGetenv(wxT("wx_") + appname + wxT('_') + var);
 
         if ( val.empty() )
-            val = wxGetenv(_T("wx_") + var);
+            val = wxGetenv(wxT("wx_") + var);
     }
 
     return val;
--- src/common/tarstrm.cpp-orig	2009-06-18 16:12:50.125093000 -0500
+++ src/common/tarstrm.cpp	2009-06-18 16:12:57.958972000 -0500
@@ -104,9 +104,9 @@ wxTarClassFactory::wxTarClassFactory()
 const wxChar * const *
 wxTarClassFactory::GetProtocols(wxStreamProtocolType type) const
 {
-    static const wxChar *protocols[] = { _T("tar"), NULL };
-    static const wxChar *mimetypes[] = { _T("application/x-tar"), NULL };
-    static const wxChar *fileexts[]  = { _T(".tar"), NULL };
+    static const wxChar *protocols[] = { wxT("tar"), NULL };
+    static const wxChar *mimetypes[] = { wxT("application/x-tar"), NULL };
+    static const wxChar *fileexts[]  = { wxT(".tar"), NULL };
     static const wxChar *empty[]     = { NULL };
 
     switch (type) {
@@ -161,23 +161,23 @@ wxDEFINE_SCOPED_PTR_TYPE(wxTarHeaderBloc
 // A table giving the field names and offsets in a tar header block
 const wxTarField wxTarHeaderBlock::fields[] =
 {
-    { _T("name"), 0 },       // 100
-    { _T("mode"), 100 },     // 8
-    { _T("uid"), 108 },      // 8
-    { _T("gid"), 116 },      // 8
-    { _T("size"), 124 },     // 12
-    { _T("mtime"), 136 },    // 12
-    { _T("chksum"), 148 },   // 8
-    { _T("typeflag"), 156 }, // 1
-    { _T("linkname"), 157 }, // 100
-    { _T("magic"), 257 },    // 6
-    { _T("version"), 263 },  // 2
-    { _T("uname"), 265 },    // 32
-    { _T("gname"), 297 },    // 32
-    { _T("devmajor"), 329 }, // 8
-    { _T("devminor"), 337 }, // 8
-    { _T("prefix"), 345 },   // 155
-    { _T("unused"), 500 },   // 12
+    { wxT("name"), 0 },       // 100
+    { wxT("mode"), 100 },     // 8
+    { wxT("uid"), 108 },      // 8
+    { wxT("gid"), 116 },      // 8
+    { wxT("size"), 124 },     // 12
+    { wxT("mtime"), 136 },    // 12
+    { wxT("chksum"), 148 },   // 8
+    { wxT("typeflag"), 156 }, // 1
+    { wxT("linkname"), 157 }, // 100
+    { wxT("magic"), 257 },    // 6
+    { wxT("version"), 263 },  // 2
+    { wxT("uname"), 265 },    // 32
+    { wxT("gname"), 297 },    // 32
+    { wxT("devmajor"), 329 }, // 8
+    { wxT("devminor"), 337 }, // 8
+    { wxT("prefix"), 345 },   // 155
+    { wxT("unused"), 500 },   // 12
     { NULL, TAR_BLOCKSIZE }
 };
 
@@ -536,15 +536,15 @@ wxString wxTarEntry::GetName(wxPathForma
     switch (wxFileName::GetFormat(format)) {
         case wxPATH_DOS:
         {
-            wxString name(isDir ? m_Name + _T("\\") : m_Name);
+            wxString name(isDir ? m_Name + wxT("\\") : m_Name);
             for (size_t i = 0; i < name.length(); i++)
-                if (name[i] == _T('/'))
-                    name[i] = _T('\\');
+                if (name[i] == wxT('/'))
+                    name[i] = wxT('\\');
             return name;
         }
 
         case wxPATH_UNIX:
-            return isDir ? m_Name + _T("/") : m_Name;
+            return isDir ? m_Name + wxT("/") : m_Name;
 
         default:
             ;
@@ -591,9 +591,9 @@ wxString wxTarEntry::GetInternalName(con
 
     while (!internal.empty() && *internal.begin() == '/')
         internal.erase(0, 1);
-    while (!internal.empty() && internal.compare(0, 2, _T("./")) == 0)
+    while (!internal.empty() && internal.compare(0, 2, wxT("./")) == 0)
         internal.erase(0, 2);
-    if (internal == _T(".") || internal == _T(".."))
+    if (internal == wxT(".") || internal == wxT(".."))
         internal = wxEmptyString;
 
     return internal;
@@ -692,9 +692,9 @@ wxTarEntry *wxTarInputStream::GetNextEnt
 
     entry->SetOffset(m_offset);
 
-    entry->SetDateTime(GetHeaderDate(_T("mtime")));
-    entry->SetAccessTime(GetHeaderDate(_T("atime")));
-    entry->SetCreateTime(GetHeaderDate(_T("ctime")));
+    entry->SetDateTime(GetHeaderDate(wxT("mtime")));
+    entry->SetAccessTime(GetHeaderDate(wxT("atime")));
+    entry->SetCreateTime(GetHeaderDate(wxT("ctime")));
 
     entry->SetTypeFlag(*m_hdr->Get(TAR_TYPEFLAG));
     bool isDir = entry->IsDir();
@@ -863,7 +863,7 @@ wxString wxTarInputStream::GetHeaderPath
 {
     wxString path;
 
-    if ((path = GetExtendedHeader(_T("path"))) != wxEmptyString)
+    if ((path = GetExtendedHeader(wxT("path"))) != wxEmptyString)
         return path;
 
     path = wxString(m_hdr->Get(TAR_NAME), GetConv());
@@ -871,7 +871,7 @@ wxString wxTarInputStream::GetHeaderPath
         return path;
 
     const char *prefix = m_hdr->Get(TAR_PREFIX);
-    return *prefix ? wxString(prefix, GetConv()) + _T("/") + path : path;
+    return *prefix ? wxString(prefix, GetConv()) + wxT("/") + path : path;
 }
 
 wxDateTime wxTarInputStream::GetHeaderDate(const wxString& key) const
@@ -885,7 +885,7 @@ wxDateTime wxTarInputStream::GetHeaderDa
         return ll;
     }
 
-    if (key == _T("mtime"))
+    if (key == wxT("mtime"))
         return wxLongLong(m_hdr->GetOctal(TAR_MTIME)) * 1000L;
 
     return wxDateTime();
@@ -1235,11 +1235,11 @@ bool wxTarOutputStream::WriteHeaders(wxT
         entry.SetSize(0);
     m_large = !SetHeaderNumber(TAR_SIZE, entry.GetSize());
 
-    SetHeaderDate(_T("mtime"), entry.GetDateTime());
+    SetHeaderDate(wxT("mtime"), entry.GetDateTime());
     if (entry.GetAccessTime().IsValid())
-        SetHeaderDate(_T("atime"), entry.GetAccessTime());
+        SetHeaderDate(wxT("atime"), entry.GetAccessTime());
     if (entry.GetCreateTime().IsValid())
-        SetHeaderDate(_T("ctime"), entry.GetCreateTime());
+        SetHeaderDate(wxT("ctime"), entry.GetCreateTime());
 
     *m_hdr->Get(TAR_TYPEFLAG) = char(entry.GetTypeFlag());
 
@@ -1274,7 +1274,7 @@ bool wxTarOutputStream::WriteHeaders(wxT
         // an old tar that doesn't understand extended headers will
         // extract it as a file, so give these fields reasonable values
         // so that the user will have access to read and remove it.
-        m_hdr2->SetPath(PaxHeaderPath(_T("%d/PaxHeaders.%p/%f"),
+        m_hdr2->SetPath(PaxHeaderPath(wxT("%d/PaxHeaders.%p/%f"),
                                       entry.GetName(wxPATH_UNIX)), GetConv());
         m_hdr2->SetOctal(TAR_MODE, 0600);
         strcpy(m_hdr2->Get(TAR_UID), m_hdr->Get(TAR_UID));
@@ -1319,12 +1319,12 @@ bool wxTarOutputStream::WriteHeaders(wxT
 wxString wxTarOutputStream::PaxHeaderPath(const wxString& format,
                                           const wxString& path)
 {
-    wxString d = path.BeforeLast(_T('/'));
-    wxString f = path.AfterLast(_T('/'));
+    wxString d = path.BeforeLast(wxT('/'));
+    wxString f = path.AfterLast(wxT('/'));
     wxString ret;
 
     if (d.empty())
-        d = _T(".");
+        d = wxT(".");
 
     ret.reserve(format.length() + path.length() + 16);
 
@@ -1340,7 +1340,7 @@ wxString wxTarOutputStream::PaxHeaderPat
             case 'd': ret << d; break;
             case 'f': ret << f; break;
             case 'p': ret << wxGetProcessId(); break;
-            case '%': ret << _T("%"); break;
+            case '%': ret << wxT("%"); break;
         }
         begin = end + 2;
     }
@@ -1385,7 +1385,7 @@ bool wxTarOutputStream::ModifyHeader()
 void wxTarOutputStream::SetHeaderPath(const wxString& name)
 {
     if (!m_hdr->SetPath(name, GetConv()) || (m_pax && !name.IsAscii()))
-        SetExtendedHeader(_T("path"), name);
+        SetExtendedHeader(wxT("path"), name);
 }
 
 bool wxTarOutputStream::SetHeaderNumber(int id, wxTarNumber n)
@@ -1411,13 +1411,13 @@ void wxTarOutputStream::SetHeaderDate(co
     wxLongLong ll = datetime.IsValid() ? datetime.GetValue() : wxLongLong(0);
     wxLongLong secs = ll / 1000L;
 
-    if (key != _T("mtime")
+    if (key != wxT("mtime")
         || !m_hdr->SetOctal(TAR_MTIME, wxTarNumber(secs.GetValue()))
         || secs <= 0 || secs >= 0x7fffffff)
     {
         wxString str;
         if (ll >= LONG_MIN && ll <= LONG_MAX) {
-            str.Printf(_T("%g"), ll.ToLong() / 1000.0);
+            str.Printf(wxT("%g"), ll.ToLong() / 1000.0);
         } else {
             str = ll.ToString();
             str.insert(str.end() - 3, '.');
@@ -1474,7 +1474,7 @@ void wxTarOutputStream::SetExtendedHeade
     else {
         // if not pax then make a list of fields to report as errors
         if (!m_badfit.empty())
-            m_badfit += _T(", ");
+            m_badfit += wxT(", ");
         m_badfit += key;
     }
 }
--- src/common/textbuf.cpp-orig	2009-06-18 16:13:07.261426000 -0500
+++ src/common/textbuf.cpp	2009-06-18 16:13:19.311210000 -0500
@@ -89,26 +89,26 @@ wxString wxTextBuffer::Translate(const w
     {
         wxChar ch = *pc;
         switch ( ch ) {
-            case _T('\n'):
+            case wxT('\n'):
                 // Dos/Unix line termination
                 result += eol;
                 chLast = 0;
                 break;
 
-            case _T('\r'):
-                if ( chLast == _T('\r') ) {
+            case wxT('\r'):
+                if ( chLast == wxT('\r') ) {
                     // Mac empty line
                     result += eol;
                 }
                 else {
                     // just remember it: we don't know whether it is just "\r"
                     // or "\r\n" yet
-                    chLast = _T('\r');
+                    chLast = wxT('\r');
                 }
                 break;
 
             default:
-                if ( chLast == _T('\r') ) {
+                if ( chLast == wxT('\r') ) {
                     // Mac line termination
                     result += eol;
 
--- src/common/tokenzr.cpp-orig	2009-06-18 16:13:27.746533000 -0500
+++ src/common/tokenzr.cpp	2009-06-18 16:13:44.619324000 -0500
@@ -85,11 +85,11 @@ void wxStringTokenizer::SetString(const 
 
 void wxStringTokenizer::Reinit(const wxString& str)
 {
-    wxASSERT_MSG( IsOk(), _T("you should call SetString() first") );
+    wxASSERT_MSG( IsOk(), wxT("you should call SetString() first") );
 
     m_string = str;
     m_pos = 0;
-    m_lastDelim = _T('\0');
+    m_lastDelim = wxT('\0');
 }
 
 // ----------------------------------------------------------------------------
@@ -99,7 +99,7 @@ void wxStringTokenizer::Reinit(const wxS
 // do we have more of them?
 bool wxStringTokenizer::HasMoreTokens() const
 {
-    wxCHECK_MSG( IsOk(), false, _T("you should call SetString() first") );
+    wxCHECK_MSG( IsOk(), false, wxT("you should call SetString() first") );
 
     if ( m_string.find_first_not_of(m_delims, m_pos) != wxString::npos )
     {
@@ -122,11 +122,11 @@ bool wxStringTokenizer::HasMoreTokens() 
             // up to the end of the string in GetNextToken(), but if it is not
             // NUL yet we still have this last token to return even if m_pos is
             // already at m_string.length()
-            return m_pos < m_string.length() || m_lastDelim != _T('\0');
+            return m_pos < m_string.length() || m_lastDelim != wxT('\0');
 
         case wxTOKEN_INVALID:
         case wxTOKEN_DEFAULT:
-            wxFAIL_MSG( _T("unexpected tokenizer mode") );
+            wxFAIL_MSG( wxT("unexpected tokenizer mode") );
             // fall through
 
         case wxTOKEN_STRTOK:
@@ -140,7 +140,7 @@ bool wxStringTokenizer::HasMoreTokens() 
 // count the number of (remaining) tokens in the string
 size_t wxStringTokenizer::CountTokens() const
 {
-    wxCHECK_MSG( IsOk(), 0, _T("you should call SetString() first") );
+    wxCHECK_MSG( IsOk(), 0, wxT("you should call SetString() first") );
 
     // VZ: this function is IMHO not very useful, so it's probably not very
     //     important if its implementation here is not as efficient as it
@@ -187,7 +187,7 @@ wxString wxStringTokenizer::GetNextToken
             m_pos = m_string.length();
 
             // it wasn't terminated
-            m_lastDelim = _T('\0');
+            m_lastDelim = wxT('\0');
         }
         else // we found a delimiter at pos
         {
--- src/common/txtstrm.cpp-orig	2009-06-18 16:13:52.199323000 -0500
+++ src/common/txtstrm.cpp	2009-06-18 16:14:03.466785000 -0500
@@ -129,7 +129,7 @@ bool wxTextInputStream::EatEOL(const wxC
 
 wxUint32 wxTextInputStream::Read32(int base)
 {
-    wxASSERT_MSG( !base || (base > 1 && base <= 36), _T("invalid base") );
+    wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
     if(!m_input) return 0;
 
     wxString word = ReadWord();
@@ -150,7 +150,7 @@ wxUint8 wxTextInputStream::Read8(int bas
 
 wxInt32 wxTextInputStream::Read32S(int base)
 {
-    wxASSERT_MSG( !base || (base > 1 && base <= 36), _T("invalid base") );
+    wxASSERT_MSG( !base || (base > 1 && base <= 36), wxT("invalid base") );
     if(!m_input) return 0;
 
     wxString word = ReadWord();
@@ -395,15 +395,15 @@ void wxTextOutputStream::WriteString(con
             switch ( m_mode )
             {
                 case wxEOL_DOS:
-                    out << _T("\r\n");
+                    out << wxT("\r\n");
                     continue;
 
                 case wxEOL_MAC:
-                    out << _T('\r');
+                    out << wxT('\r');
                     continue;
 
                 default:
-                    wxFAIL_MSG( _T("unknown EOL mode in wxTextOutputStream") );
+                    wxFAIL_MSG( wxT("unknown EOL mode in wxTextOutputStream") );
                     // fall through
 
                 case wxEOL_UNIX:
--- src/common/variant.cpp-orig	2009-06-18 16:14:13.673543000 -0500
+++ src/common/variant.cpp	2009-06-18 16:14:23.568084000 -0500
@@ -168,7 +168,7 @@ void wxVariant::UnRef()
 {
     if ( m_data )
     {
-        wxASSERT_MSG( m_data->m_count > 0, _T("invalid ref data count") );
+        wxASSERT_MSG( m_data->m_count > 0, wxT("invalid ref data count") );
 
         m_data->DecRef();
         m_data = NULL;
@@ -1400,7 +1400,7 @@ bool wxVariantDataArrayString::Write(wxS
     for ( size_t n = 0; n < count; n++ )
     {
         if ( n )
-            str += _T(';');
+            str += wxT(';');
 
         str += m_value[n];
     }
@@ -1420,7 +1420,7 @@ bool wxVariantDataArrayString::Read(wxST
 
 bool wxVariantDataArrayString::Read(wxString& str)
 {
-    wxStringTokenizer tk(str, _T(";"));
+    wxStringTokenizer tk(str, wxT(";"));
     while ( tk.HasMoreTokens() )
     {
         m_value.Add(tk.GetNextToken());
@@ -1439,7 +1439,7 @@ wxVariant::wxVariant(const wxArrayString
 
 bool wxVariant::operator==(const wxArrayString& WXUNUSED(value)) const
 {
-    wxFAIL_MSG( _T("TODO") );
+    wxFAIL_MSG( wxT("TODO") );
 
     return false;
 }
--- src/common/wfstream.cpp-orig	2009-06-18 16:14:35.533132000 -0500
+++ src/common/wfstream.cpp	2009-06-18 16:14:40.168362000 -0500
@@ -407,7 +407,7 @@ wxFFileStream::wxFFileStream(const wxStr
                wxFFileOutputStream()
 {
     wxFFileOutputStream::m_file =
-    wxFFileInputStream::m_file = new wxFFile(fileName, _T("w+b"));
+    wxFFileInputStream::m_file = new wxFFile(fileName, wxT("w+b"));
 
     // see comment in wxFileStream ctor
     wxFFileInputStream::m_file_destroy = true;
--- src/common/wxchar.cpp-orig	2009-06-18 16:14:49.211540000 -0500
+++ src/common/wxchar.cpp	2009-06-18 16:15:15.805593000 -0500
@@ -654,7 +654,7 @@ void wxPrintfConvSpec::ReplaceAsteriskWi
 
     // find the first * in our flag buffer
     char *pwidth = strchr(m_szFlags, '*');
-    wxCHECK_RET(pwidth, _T("field width must be specified"));
+    wxCHECK_RET(pwidth, wxT("field width must be specified"));
 
     // save what follows the * (the +1 is to skip the asterisk itself!)
     strcpy(temp, pwidth+1);
@@ -848,13 +848,13 @@ int wxPrintfConvSpec::Process(wxChar *bu
 
                 if (!m_bAlignLeft)
                     for (i = 1; i < (size_t)m_nMinWidth; i++)
-                        APPEND_CH(_T(' '));
+                        APPEND_CH(wxT(' '));
 
                 APPEND_CH(val);
 
                 if (m_bAlignLeft)
                     for (i = 1; i < (size_t)m_nMinWidth; i++)
-                        APPEND_CH(_T(' '));
+                        APPEND_CH(wxT(' '));
             }
             break;
 
@@ -915,7 +915,7 @@ int wxPrintfConvSpec::Process(wxChar *bu
                 if (!m_bAlignLeft)
                 {
                     for (i = len; i < m_nMinWidth; i++)
-                        APPEND_CH(_T(' '));
+                        APPEND_CH(wxT(' '));
                 }
 
 #if wxUSE_STRUTILS
@@ -930,7 +930,7 @@ int wxPrintfConvSpec::Process(wxChar *bu
                 if (m_bAlignLeft)
                 {
                     for (i = len; i < m_nMinWidth; i++)
-                        APPEND_CH(_T(' '));
+                        APPEND_CH(wxT(' '));
                 }
             }
             break;
@@ -1320,7 +1320,7 @@ int /* not wint_t */ wxPutc(wchar_t wc, 
 // TODO: implement the scanf() functions
 int vwscanf(const wxChar *format, va_list argptr)
 {
-    wxFAIL_MSG( _T("TODO") );
+    wxFAIL_MSG( wxT("TODO") );
 
     return -1;
 }
@@ -1332,10 +1332,10 @@ int vswscanf(const wxChar *ws, const wxC
     // of the function. This doesn't work with %c and %s because of difference
     // in size of char and wchar_t, though.
 
-    wxCHECK_MSG( wxStrstr(format, _T("%s")) == NULL, -1,
-                 _T("incomplete vswscanf implementation doesn't allow %s") );
-    wxCHECK_MSG( wxStrstr(format, _T("%c")) == NULL, -1,
-                 _T("incomplete vswscanf implementation doesn't allow %c") );
+    wxCHECK_MSG( wxStrstr(format, wxT("%s")) == NULL, -1,
+                 wxT("incomplete vswscanf implementation doesn't allow %s") );
+    wxCHECK_MSG( wxStrstr(format, wxT("%c")) == NULL, -1,
+                 wxT("incomplete vswscanf implementation doesn't allow %c") );
 
     va_list argcopy;
     wxVaCopy(argcopy, argptr);
@@ -1344,7 +1344,7 @@ int vswscanf(const wxChar *ws, const wxC
 
 int vfwscanf(FILE *stream, const wxChar *format, va_list argptr)
 {
-    wxFAIL_MSG( _T("TODO") );
+    wxFAIL_MSG( wxT("TODO") );
 
     return -1;
 }
@@ -1460,7 +1460,7 @@ private:
 
     void CopyAllBefore()
     {
-        wxASSERT_MSG( m_fmtOrig && m_fmt.empty(), _T("logic error") );
+        wxASSERT_MSG( m_fmtOrig && m_fmt.empty(), wxT("logic error") );
 
         m_fmt = wxString(m_fmtOrig, m_nCopied);
 
@@ -1470,13 +1470,13 @@ private:
 
     static bool IsFlagChar(wxChar ch)
     {
-        return ch == _T('-') || ch == _T('+') ||
-               ch == _T('0') || ch == _T(' ') || ch == _T('#');
+        return ch == wxT('-') || ch == wxT('+') ||
+               ch == wxT('0') || ch == wxT(' ') || ch == wxT('#');
     }
 
     void SkipDigits(const wxChar **ptpc)
     {
-        while ( **ptpc >= _T('0') && **ptpc <= _T('9') )
+        while ( **ptpc >= wxT('0') && **ptpc <= wxT('9') )
             CopyFmtChar(*(*ptpc)++);
     }
 
@@ -1497,23 +1497,23 @@ wxFormatConverter::wxFormatConverter(con
 
     while ( *format )
     {
-        if ( CopyFmtChar(*format++) == _T('%') )
+        if ( CopyFmtChar(*format++) == wxT('%') )
         {
             // skip any flags
             while ( IsFlagChar(*format) )
                 CopyFmtChar(*format++);
 
             // and possible width
-            if ( *format == _T('*') )
+            if ( *format == wxT('*') )
                 CopyFmtChar(*format++);
             else
                 SkipDigits(&format);
 
             // precision?
-            if ( *format == _T('.') )
+            if ( *format == wxT('.') )
             {
                 CopyFmtChar(*format++);
-                if ( *format == _T('*') )
+                if ( *format == wxT('*') )
                     CopyFmtChar(*format++);
                 else
                     SkipDigits(&format);
@@ -1529,14 +1529,14 @@ wxFormatConverter::wxFormatConverter(con
 
             switch ( *format )
             {
-                case _T('h'):
+                case wxT('h'):
                     size = Short;
                     format++;
                     break;
 
-                case _T('l'):
+                case wxT('l'):
                     // "ll" has a different meaning!
-                    if ( format[1] != _T('l') )
+                    if ( format[1] != wxT('l') )
                     {
                         size = Long;
                         format++;
@@ -1551,20 +1551,20 @@ wxFormatConverter::wxFormatConverter(con
             // and finally we should have the type
             switch ( *format )
             {
-                case _T('C'):
-                case _T('S'):
+                case wxT('C'):
+                case wxT('S'):
                     // %C and %hC -> %c and %lC -> %lc
                     if ( size == Long )
-                        CopyFmtChar(_T('l'));
+                        CopyFmtChar(wxT('l'));
 
-                    InsertFmtChar(*format++ == _T('C') ? _T('c') : _T('s'));
+                    InsertFmtChar(*format++ == wxT('C') ? wxT('c') : wxT('s'));
                     break;
 
-                case _T('c'):
-                case _T('s'):
+                case wxT('c'):
+                case wxT('s'):
                     // %c -> %lc but %hc stays %hc and %lc is still %lc
                     if ( size == Default)
-                        InsertFmtChar(_T('l'));
+                        InsertFmtChar(wxT('l'));
                     // fall through
 
                 default:
@@ -2006,7 +2006,7 @@ WXDLLEXPORT size_t wxStrspn(const wxChar
 
 WXDLLEXPORT const wxChar *wxStrstr(const wxChar *haystack, const wxChar *needle)
 {
-    wxASSERT_MSG( needle != NULL, _T("NULL argument in wxStrstr") );
+    wxASSERT_MSG( needle != NULL, wxT("NULL argument in wxStrstr") );
 
     // VZ: this is not exactly the most efficient string search algorithm...
 
@@ -2033,7 +2033,7 @@ WXDLLEXPORT double wxStrtod(const wxChar
 #if wxUSE_INTL
       wxLocale::GetInfo(wxLOCALE_DECIMAL_POINT, wxLOCALE_CAT_NUMBER)[0]
 #else
-      _T('.')
+      wxT('.')
 #endif
       );
   const wxChar *start = nptr;
@@ -2210,7 +2210,7 @@ WXDLLEXPORT wxChar *wxCtime(const time_t
     // ctime() is guaranteed to return a string containing only ASCII
     // characters, as its format is always the same for any locale
     wxStrncpy(buf, wxString::FromAscii(ctime(timep)), WXSIZEOF(buf));
-    buf[WXSIZEOF(buf) - 1] = _T('\0');
+    buf[WXSIZEOF(buf) - 1] = wxT('\0');
 
     return buf;
 }
--- src/common/zipstrm.cpp-orig	2009-06-18 16:15:23.718432000 -0500
+++ src/common/zipstrm.cpp	2009-06-18 16:15:41.417983000 -0500
@@ -151,9 +151,9 @@ wxZipClassFactory::wxZipClassFactory()
 const wxChar * const *
 wxZipClassFactory::GetProtocols(wxStreamProtocolType type) const
 {
-    static const wxChar *protocols[] = { _T("zip"), NULL };
-    static const wxChar *mimetypes[] = { _T("application/zip"), NULL };
-    static const wxChar *fileexts[]  = { _T(".zip"), _T(".htb"), NULL };
+    static const wxChar *protocols[] = { wxT("zip"), NULL };
+    static const wxChar *mimetypes[] = { wxT("application/zip"), NULL };
+    static const wxChar *fileexts[]  = { wxT(".zip"), wxT(".htb"), NULL };
     static const wxChar *empty[]     = { NULL };
 
     switch (type) {
@@ -200,7 +200,7 @@ wxZipHeader::wxZipHeader(wxInputStream& 
     m_pos(0),
     m_ok(false)
 {
-    wxCHECK_RET(size <= sizeof(m_data), _T("buffer too small"));
+    wxCHECK_RET(size <= sizeof(m_data), wxT("buffer too small"));
     m_size = stream.Read(m_data, size).LastRead();
     m_ok = m_size == size;
 }
@@ -786,15 +786,15 @@ wxString wxZipEntry::GetName(wxPathForma
     switch (wxFileName::GetFormat(format)) {
         case wxPATH_DOS:
         {
-            wxString name(isDir ? m_Name + _T("\\") : m_Name);
+            wxString name(isDir ? m_Name + wxT("\\") : m_Name);
             for (size_t i = 0; i < name.length(); i++)
-                if (name[i] == _T('/'))
-                    name[i] = _T('\\');
+                if (name[i] == wxT('/'))
+                    name[i] = wxT('\\');
             return name;
         }
 
         case wxPATH_UNIX:
-            return isDir ? m_Name + _T("/") : m_Name;
+            return isDir ? m_Name + wxT("/") : m_Name;
 
         default:
             ;
@@ -834,9 +834,9 @@ wxString wxZipEntry::GetInternalName(con
 
     while (!internal.empty() && *internal.begin() == '/')
         internal.erase(0, 1);
-    while (!internal.empty() && internal.compare(0, 2, _T("./")) == 0)
+    while (!internal.empty() && internal.compare(0, 2, wxT("./")) == 0)
         internal.erase(0, 2);
-    if (internal == _T(".") || internal == _T(".."))
+    if (internal == wxT(".") || internal == wxT(".."))
         internal = wxEmptyString;
 
     return internal;
--- src/common/zstream.cpp-orig	2009-06-18 16:15:50.736400000 -0500
+++ src/common/zstream.cpp	2009-06-18 16:16:03.696767000 -0500
@@ -60,8 +60,8 @@ wxZlibClassFactory::wxZlibClassFactory()
 const wxChar * const *
 wxZlibClassFactory::GetProtocols(wxStreamProtocolType type) const
 {
-    static const wxChar *mimes[] = { _T("application/x-deflate"), NULL };
-    static const wxChar *encs[] =  { _T("deflate"), NULL };
+    static const wxChar *mimes[] = { wxT("application/x-deflate"), NULL };
+    static const wxChar *encs[] =  { wxT("deflate"), NULL };
     static const wxChar *empty[] = { NULL };
 
     switch (type) {
@@ -89,13 +89,13 @@ const wxChar * const *
 wxGzipClassFactory::GetProtocols(wxStreamProtocolType type) const
 {
     static const wxChar *protos[] =     
-        { _T("gzip"), NULL };
+        { wxT("gzip"), NULL };
     static const wxChar *mimes[] =     
-        { _T("application/gzip"), _T("application/x-gzip"), NULL };
+        { wxT("application/gzip"), wxT("application/x-gzip"), NULL };
     static const wxChar *encs[] = 
-        { _T("gzip"), NULL };
+        { wxT("gzip"), NULL };
     static const wxChar *exts[] =    
-        { _T(".gz"), _T(".gzip"), NULL };
+        { wxT(".gz"), wxT(".gzip"), NULL };
     static const wxChar *empty[] =
         { NULL };
 
--- src/common/utilscmn.cpp-orig	2009-06-18 16:19:30.332501000 -0500
+++ src/common/utilscmn.cpp	2009-06-18 16:19:43.750958000 -0500
@@ -611,7 +611,7 @@ wxString wxGetCurrentDir()
         {
             if ( errno != ERANGE )
             {
-                wxLogSysError(_T("Failed to get current directory"));
+                wxLogSysError(wxT("Failed to get current directory"));
 
                 return wxEmptyString;
             }
@@ -639,7 +639,7 @@ wxString wxGetCurrentDir()
 #if wxUSE_STREAMS
 static bool ReadAll(wxInputStream *is, wxArrayString& output)
 {
-    wxCHECK_MSG( is, false, _T("NULL stream in wxExecute()?") );
+    wxCHECK_MSG( is, false, wxT("NULL stream in wxExecute()?") );
 
     // the stream could be already at EOF or in wxSTREAM_BROKEN_PIPE state
     is->Reset();
@@ -749,11 +749,11 @@ static bool wxLaunchDefaultBrowserBaseIm
         // ShellExecuteEx() opens the URL in an existing window by default so
         // we can't use it if we need a new window
         wxURI uri(url);
-        wxRegKey key(wxRegKey::HKCR, uri.GetScheme() + _T("\\shell\\open"));
+        wxRegKey key(wxRegKey::HKCR, uri.GetScheme() + wxT("\\shell\\open"));
         if ( !key.Exists() )
         {
             // try default browser, it must be registered at least for http URLs
-            key.SetName(wxRegKey::HKCR, _T("http\\shell\\open"));
+            key.SetName(wxRegKey::HKCR, wxT("http\\shell\\open"));
         }
 
         if ( key.Exists() )
@@ -812,7 +812,7 @@ static bool wxLaunchDefaultBrowserBaseIm
 
     WinStruct<SHELLEXECUTEINFO> sei;
     sei.lpFile = url.c_str();
-    sei.lpVerb = _T("open");
+    sei.lpVerb = wxT("open");
     sei.nShow = SW_SHOWNORMAL;
 
     ::ShellExecuteEx(&sei);
@@ -871,10 +871,10 @@ static bool wxLaunchDefaultBrowserBaseIm
     // distribution specifics. Only if that fails, try to find the right
     // browser ourselves.
     wxString path, xdg_open;
-    if ( wxGetEnv(_T("PATH"), &path) &&
-         wxFindFileInPath(&xdg_open, path, _T("xdg-open")) )
+    if ( wxGetEnv(wxT("PATH"), &path) &&
+         wxFindFileInPath(&xdg_open, path, wxT("xdg-open")) )
     {
-        if ( wxExecute(xdg_open + _T(" ") + url) )
+        if ( wxExecute(xdg_open + wxT(" ") + url) )
             return true;
     }
 
@@ -893,7 +893,7 @@ static bool wxLaunchDefaultBrowserBaseIm
         if (res >= 0 && errors.GetCount() == 0)
         {
             wxString cmd = output[0];
-            cmd << _T(' ') << url;
+            cmd << wxT(' ') << url;
             if (wxExecute(cmd))
                 return true;
         }
@@ -910,7 +910,7 @@ static bool wxLaunchDefaultBrowserBaseIm
     wxString cmd;
 
 #if wxUSE_MIMETYPE
-    wxFileType *ft = wxTheMimeTypesManager->GetFileTypeFromExtension(_T("html"));
+    wxFileType *ft = wxTheMimeTypesManager->GetFileTypeFromExtension(wxT("html"));
     if ( ft )
     {
         wxString mt;
@@ -926,7 +926,7 @@ static bool wxLaunchDefaultBrowserBaseIm
         // fallback to checking for the BROWSER environment variable
         cmd = wxGetenv(wxT("BROWSER"));
         if ( !cmd.empty() )
-            cmd << _T(' ') << url;
+            cmd << wxT(' ') << url;
     }
 
     ok = ( !cmd.empty() && wxExecute(cmd) );
@@ -934,7 +934,7 @@ static bool wxLaunchDefaultBrowserBaseIm
         return ok;
 
     // no file type for HTML extension
-    wxLogError(_T("No default application configured for HTML files."));
+    wxLogError(wxT("No default application configured for HTML files."));
 
 #endif // !wxUSE_MIMETYPE && !__WXMSW__
     return false;
@@ -957,7 +957,7 @@ bool wxLaunchDefaultBrowser(const wxStri
     if(s_launchBrowserImpl(url, flags))
         return true;
 
-    wxLogSysError(_T("Failed to open URL \"%s\" in default browser."),
+    wxLogSysError(wxT("Failed to open URL \"%s\" in default browser."),
                   url.c_str());
 
     return false;
@@ -1036,7 +1036,7 @@ wxChar *wxStripMenuCodes(const wxChar *i
 
 wxString wxStripMenuCodes(const wxString& in, int flags)
 {
-    wxASSERT_MSG( flags, _T("this is useless to call without any flags") );
+    wxASSERT_MSG( flags, wxT("this is useless to call without any flags") );
 
     wxString out;
 
@@ -1046,14 +1046,14 @@ wxString wxStripMenuCodes(const wxString
     for ( size_t n = 0; n < len; n++ )
     {
         wxChar ch = in[n];
-        if ( (flags & wxStrip_Mnemonics) && ch == _T('&') )
+        if ( (flags & wxStrip_Mnemonics) && ch == wxT('&') )
         {
             // skip it, it is used to introduce the accel char (or to quote
             // itself in which case it should still be skipped): note that it
             // can't be the last character of the string
             if ( ++n == len )
             {
-                wxLogDebug(_T("Invalid menu string '%s'"), in.c_str());
+                wxLogDebug(wxT("Invalid menu string '%s'"), in.c_str());
             }
             else
             {
@@ -1061,7 +1061,7 @@ wxString wxStripMenuCodes(const wxString
                 ch = in[n];
             }
         }
-        else if ( (flags & wxStrip_Accel) && ch == _T('\t') )
+        else if ( (flags & wxStrip_Accel) && ch == wxT('\t') )
         {
             // everything after TAB is accel string, exit the loop
             break;
@@ -1219,7 +1219,7 @@ int wxMessageBox(const wxString& message
             return wxCANCEL;
     }
 
-    wxFAIL_MSG( _T("unexpected return code from wxMessageDialog") );
+    wxFAIL_MSG( wxT("unexpected return code from wxMessageDialog") );
 
     return wxCANCEL;
 }
--- src/common/ftp.cpp-orig	2009-06-18 16:22:37.146535000 -0500
+++ src/common/ftp.cpp	2009-06-18 16:22:47.531499000 -0500
@@ -177,7 +177,7 @@ bool wxFTP::Close()
     {
         if ( !CheckCommand(wxT("QUIT"), '2') )
         {
-            wxLogDebug(_T("Failed to close connection gracefully."));
+            wxLogDebug(wxT("Failed to close connection gracefully."));
         }
     }
 
@@ -211,16 +211,16 @@ char wxFTP::SendCommand(const wxString& 
 #ifdef __WXDEBUG__
     // don't show the passwords in the logs (even in debug ones)
     wxString cmd, password;
-    if ( command.Upper().StartsWith(_T("PASS "), &password) )
+    if ( command.Upper().StartsWith(wxT("PASS "), &password) )
     {
-        cmd << _T("PASS ") << wxString(_T('*'), password.length());
+        cmd << wxT("PASS ") << wxString(wxT('*'), password.length());
     }
     else
     {
         cmd = command;
     }
 
-    wxLogTrace(FTP_TRACE_MASK, _T("==> %s"), cmd.c_str());
+    wxLogTrace(FTP_TRACE_MASK, wxT("==> %s"), cmd.c_str());
 #endif // __WXDEBUG__
 
     return GetResult();
@@ -266,7 +266,7 @@ char wxFTP::GetResult()
         if ( !m_lastResult.empty() )
         {
             // separate from last line
-            m_lastResult += _T('\n');
+            m_lastResult += wxT('\n');
         }
 
         m_lastResult += line;
@@ -281,7 +281,7 @@ char wxFTP::GetResult()
             }
             else
             {
-                wxLogTrace(FTP_TRACE_MASK, _T("<== %s %s"),
+                wxLogTrace(FTP_TRACE_MASK, wxT("<== %s %s"),
                            code.c_str(), line.c_str());
             }
         }
@@ -293,16 +293,16 @@ char wxFTP::GetResult()
             if ( firstLine )
             {
                 code = wxString(line, LEN_CODE);
-                wxLogTrace(FTP_TRACE_MASK, _T("<== %s %s"),
+                wxLogTrace(FTP_TRACE_MASK, wxT("<== %s %s"),
                            code.c_str(), line.c_str() + LEN_CODE + 1);
 
                 switch ( chMarker )
                 {
-                    case _T(' '):
+                    case wxT(' '):
                         endOfReply = true;
                         break;
 
-                    case _T('-'):
+                    case wxT('-'):
                         firstLine = false;
                         break;
 
@@ -315,18 +315,18 @@ char wxFTP::GetResult()
             {
                 if ( wxStrncmp(line, code, LEN_CODE) == 0 )
                 {
-                    if ( chMarker == _T(' ') )
+                    if ( chMarker == wxT(' ') )
                     {
                         endOfReply = true;
                     }
 
-                    wxLogTrace(FTP_TRACE_MASK, _T("<== %s %s"),
+                    wxLogTrace(FTP_TRACE_MASK, wxT("<== %s %s"),
                                code.c_str(), line.c_str() + LEN_CODE + 1);
                 }
                 else
                 {
                     // just part of reply
-                    wxLogTrace(FTP_TRACE_MASK, _T("<== %s %s"),
+                    wxLogTrace(FTP_TRACE_MASK, wxT("<== %s %s"),
                                code.c_str(), line.c_str());
                 }
             }
@@ -335,7 +335,7 @@ char wxFTP::GetResult()
 
     if ( badReply )
     {
-        wxLogDebug(_T("Broken FTP server: '%s' is not a valid reply."),
+        wxLogDebug(wxT("Broken FTP server: '%s' is not a valid reply."),
                    m_lastResult.c_str());
 
         m_lastError = wxPROTO_PROTERR;
@@ -363,19 +363,19 @@ bool wxFTP::SetTransferMode(TransferMode
     switch ( transferMode )
     {
         default:
-            wxFAIL_MSG(_T("unknown FTP transfer mode"));
+            wxFAIL_MSG(wxT("unknown FTP transfer mode"));
             // fall through
 
         case BINARY:
-            mode = _T('I');
+            mode = wxT('I');
             break;
 
         case ASCII:
-            mode = _T('A');
+            mode = wxT('A');
             break;
     }
 
-    if ( !DoSimpleCommand(_T("TYPE"), mode) )
+    if ( !DoSimpleCommand(wxT("TYPE"), mode) )
     {
         wxLogError(_("Failed to set FTP transfer mode to %s."), (const wxChar*)
                    (transferMode == ASCII ? _("ASCII") : _("binary")));
@@ -395,12 +395,12 @@ bool wxFTP::DoSimpleCommand(const wxChar
     wxString fullcmd = command;
     if ( !arg.empty() )
     {
-        fullcmd << _T(' ') << arg;
+        fullcmd << wxT(' ') << arg;
     }
 
     if ( !CheckCommand(fullcmd, '2') )
     {
-        wxLogDebug(_T("FTP command '%s' failed."), fullcmd.c_str());
+        wxLogDebug(wxT("FTP command '%s' failed."), fullcmd.c_str());
 
         return false;
     }
@@ -414,17 +414,17 @@ bool wxFTP::ChDir(const wxString& dir)
     // tree conventions, but they always understand CDUP - should we use it if
     // dir == ".."? OTOH, do such servers (still) exist?
 
-    return DoSimpleCommand(_T("CWD"), dir);
+    return DoSimpleCommand(wxT("CWD"), dir);
 }
 
 bool wxFTP::MkDir(const wxString& dir)
 {
-    return DoSimpleCommand(_T("MKD"), dir);
+    return DoSimpleCommand(wxT("MKD"), dir);
 }
 
 bool wxFTP::RmDir(const wxString& dir)
 {
-    return DoSimpleCommand(_T("RMD"), dir);
+    return DoSimpleCommand(wxT("RMD"), dir);
 }
 
 wxString wxFTP::Pwd()
@@ -435,19 +435,19 @@ wxString wxFTP::Pwd()
     {
         // the result is at least that long if CheckCommand() succeeded
         const wxChar *p = m_lastResult.c_str() + LEN_CODE + 1;
-        if ( *p != _T('"') )
+        if ( *p != wxT('"') )
         {
-            wxLogDebug(_T("Missing starting quote in reply for PWD: %s"), p);
+            wxLogDebug(wxT("Missing starting quote in reply for PWD: %s"), p);
         }
         else
         {
             for ( p++; *p; p++ )
             {
-                if ( *p == _T('"') )
+                if ( *p == wxT('"') )
                 {
                     // check if the quote is doubled
                     p++;
-                    if ( !*p || *p != _T('"') )
+                    if ( !*p || *p != wxT('"') )
                     {
                         // no, this is the end
                         break;
@@ -461,14 +461,14 @@ wxString wxFTP::Pwd()
 
             if ( !*p )
             {
-                wxLogDebug(_T("Missing ending quote in reply for PWD: %s"),
+                wxLogDebug(wxT("Missing ending quote in reply for PWD: %s"),
                            m_lastResult.c_str() + LEN_CODE + 1);
             }
         }
     }
     else
     {
-        wxLogDebug(_T("FTP PWD command failed."));
+        wxLogDebug(wxT("FTP PWD command failed."));
     }
 
     return path;
@@ -652,10 +652,10 @@ wxString wxFTP::GetPortCmdArgument(const
     int portNew = addrNew.Service();
 
     // We need to break the PORT number in bytes
-    addrIP.Replace(_T("."), _T(","));
-    addrIP << _T(',')
-           << wxString::Format(_T("%d"), portNew >> 8) << _T(',')
-           << wxString::Format(_T("%d"), portNew & 0xff);
+    addrIP.Replace(wxT("."), wxT(","));
+    addrIP << wxT(',')
+           << wxString::Format(wxT("%d"), portNew >> 8) << wxT(',')
+           << wxString::Format(wxT("%d"), portNew & 0xff);
 
     // Now we have a value like "10,0,0,1,5,23"
     return addrIP;
@@ -685,7 +685,7 @@ wxSocketBase *wxFTP::GetActivePort()
     // addresses because the addrNew has an IP of "0.0.0.0", so we need the
     // value in addrLocal
     wxString port = GetPortCmdArgument(addrLocal, addrNew);
-    if ( !DoSimpleCommand(_T("PORT"), port) )
+    if ( !DoSimpleCommand(wxT("PORT"), port) )
     {
         m_lastError = wxPROTO_PROTERR;
         delete sockSrv;
@@ -699,14 +699,14 @@ wxSocketBase *wxFTP::GetActivePort()
 
 wxSocketBase *wxFTP::GetPassivePort()
 {
-    if ( !DoSimpleCommand(_T("PASV")) )
+    if ( !DoSimpleCommand(wxT("PASV")) )
     {
         wxLogError(_("The FTP server doesn't support passive mode."));
         return NULL;
     }
 
-    const wxChar *addrStart = wxStrchr(m_lastResult, _T('('));
-    const wxChar *addrEnd = addrStart ? wxStrchr(addrStart, _T(')')) : NULL;
+    const wxChar *addrStart = wxStrchr(m_lastResult, wxT('('));
+    const wxChar *addrEnd = addrStart ? wxStrchr(addrStart, wxT(')')) : NULL;
     if ( !addrEnd )
     {
         m_lastError = wxPROTO_PROTERR;
@@ -819,16 +819,16 @@ bool wxFTP::GetList(wxArrayString& files
     //        - Unix    : result like "ls" command
     //        - Windows : like "dir" command
     //        - others  : ?
-    wxString line(details ? _T("LIST") : _T("NLST"));
+    wxString line(details ? wxT("LIST") : wxT("NLST"));
     if ( !wildcard.empty() )
     {
-        line << _T(' ') << wildcard;
+        line << wxT(' ') << wildcard;
     }
 
     if ( !CheckCommand(line, '1') )
     {
         m_lastError = wxPROTO_PROTERR;
-        wxLogDebug(_T("FTP 'LIST' command returned unexpected result from server"));
+        wxLogDebug(wxT("FTP 'LIST' command returned unexpected result from server"));
         delete sock;
         return false;
     }
@@ -898,7 +898,7 @@ int wxFTP::GetFileSize(const wxString& f
         // will we need to hold this file?
         TransferMode oldTransfermode = m_currentTransfermode;
         SetTransferMode(BINARY);
-        command << _T("SIZE ") << fileName;
+        command << wxT("SIZE ") << fileName;
 
         bool ok = CheckCommand(command, '2');
 
@@ -908,7 +908,7 @@ int wxFTP::GetFileSize(const wxString& f
             // 213 is File Status (STD9)
             // "SIZE" is not described anywhere..? It works on most servers
             int statuscode;
-            if ( wxSscanf(GetLastResult().c_str(), _T("%i %i"),
+            if ( wxSscanf(GetLastResult().c_str(), wxT("%i %i"),
                           &statuscode, &filesize) == 2 )
             {
                 // We've gotten a good reply.
@@ -971,27 +971,27 @@ int wxFTP::GetFileSize(const wxString& f
                         // check if the first character is '-'. This would
                         // indicate Unix-style (this also limits this function
                         // to searching for files, not directories)
-                        if ( fileList[i].Mid(0, 1) == _T("-") )
+                        if ( fileList[i].Mid(0, 1) == wxT("-") )
                         {
 
                             if ( wxSscanf(fileList[i].c_str(),
-                                          _T("%*s %*s %*s %*s %i %*s %*s %*s %*s"),
+                                          wxT("%*s %*s %*s %*s %i %*s %*s %*s %*s"),
                                           &filesize) != 9 )
                             {
                                 // Hmm... Invalid response
                                 wxLogTrace(FTP_TRACE_MASK,
-                                           _T("Invalid LIST response"));
+                                           wxT("Invalid LIST response"));
                             }
                         }
                         else // Windows-style response (?)
                         {
                             if ( wxSscanf(fileList[i].c_str(),
-                                          _T("%*s %*s %i %*s"),
+                                          wxT("%*s %*s %i %*s"),
                                           &filesize) != 4 )
                             {
                                 // something bad happened..?
                                 wxLogTrace(FTP_TRACE_MASK,
-                                           _T("Invalid or unknown LIST response"));
+                                           wxT("Invalid or unknown LIST response"));
                             }
                         }
                     }
--- src/common/protocol.cpp-orig	2009-06-18 16:22:57.097518000 -0500
+++ src/common/protocol.cpp	2009-06-18 16:23:02.960118000 -0500
@@ -124,7 +124,7 @@ wxProtocolError wxProtocol::ReadLine(wxS
             if ( eol == pBuf )
             {
                 // check for case of "\r\n" being split
-                if ( result.empty() || result.Last() != _T('\r') )
+                if ( result.empty() || result.Last() != wxT('\r') )
                 {
                     // ignore the stray '\n'
                     eol = NULL;
--- src/common/sckaddr.cpp-orig	2009-06-18 16:23:11.485454000 -0500
+++ src/common/sckaddr.cpp	2009-06-18 16:23:18.188511000 -0500
@@ -207,7 +207,7 @@ wxSockAddress *wxIPV4address::Clone() co
 wxString wxIPV4address::IPAddress() const
 {
     unsigned long raw =  GAddress_INET_GetHostAddress(m_address);
-    return wxString::Format(_T("%lu.%lu.%lu.%lu"),
+    return wxString::Format(wxT("%lu.%lu.%lu.%lu"),
                 (raw>>24) & 0xff,
                 (raw>>16) & 0xff,
                 (raw>>8) & 0xff,
@@ -284,7 +284,7 @@ wxString wxIPV6address::IPAddress() cons
 {
     unsigned long raw =  GAddress_INET_GetHostAddress(m_address);
     return wxString::Format(
-        _T("%u.%u.%u.%u"),
+        wxT("%u.%u.%u.%u"),
         (unsigned char)((raw>>24) & 0xff),
         (unsigned char)((raw>>16) & 0xff),
         (unsigned char)((raw>>8) & 0xff),
--- src/common/sckipc.cpp-orig	2009-06-18 16:23:28.632159000 -0500
+++ src/common/sckipc.cpp	2009-06-18 16:23:40.984445000 -0500
@@ -89,7 +89,7 @@ GetAddressFromName(const wxString& serve
 #if defined(__UNIX__) && !defined(__WINDOWS__) && !defined(__WINE__) && (!defined(__WXMAC__) || defined(__DARWIN__))
     // under Unix, if the server name looks like a path, create a AF_UNIX
     // socket instead of AF_INET one
-    if ( serverName.Find(_T('/')) != wxNOT_FOUND )
+    if ( serverName.Find(wxT('/')) != wxNOT_FOUND )
     {
         wxUNIXaddress *addr = new wxUNIXaddress;
         addr->Filename(serverName);
@@ -321,7 +321,7 @@ wxTCPServer::~wxTCPServer()
     {
         if ( remove(m_filename.fn_str()) != 0 )
         {
-            wxLogDebug(_T("Stale AF_UNIX file '%s' left."), m_filename.c_str());
+            wxLogDebug(wxT("Stale AF_UNIX file '%s' left."), m_filename.c_str());
         }
     }
 #endif // __UNIX_LIKE__
@@ -429,7 +429,7 @@ wxChar *wxTCPConnection::Request (const 
 
     wxChar *data = GetBufferAtLeast( s );
     wxASSERT_MSG(data != NULL,
-                 _T("Buffer too small in wxTCPConnection::Request") );
+                 wxT("Buffer too small in wxTCPConnection::Request") );
     m_sockstrm->Read(data, s);
 
     if (size)
@@ -568,7 +568,7 @@ void wxTCPEventHandler::Client_OnRequest
     
     data = connection->GetBufferAtLeast( size );
     wxASSERT_MSG(data != NULL,
-                 _T("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
+                 wxT("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
     sockstrm->Read(data, size);
 
     connection->OnExecute (topic_name, data, size, format);
@@ -586,7 +586,7 @@ void wxTCPEventHandler::Client_OnRequest
     size = codeci->Read32();
     data = connection->GetBufferAtLeast( size );
     wxASSERT_MSG(data != NULL,
-                 _T("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
+                 wxT("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
     sockstrm->Read(data, size);
 
     connection->OnAdvise (topic_name, item, data, size, format);
@@ -628,7 +628,7 @@ void wxTCPEventHandler::Client_OnRequest
     size = codeci->Read32();
     data = connection->GetBufferAtLeast( size );
     wxASSERT_MSG(data != NULL,
-                 _T("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
+                 wxT("Buffer too small in wxTCPEventHandler::Client_OnRequest") );
     sockstrm->Read(data, size);
 
     connection->OnPoke (topic_name, item, data, size, format);
--- src/common/url.cpp-orig	2009-06-18 16:23:49.205779000 -0500
+++ src/common/url.cpp	2009-06-18 16:23:55.736583000 -0500
@@ -421,7 +421,7 @@ wxURLModule::wxURLModule()
 {
     // we must be cleaned up before wxSocketModule as otherwise deleting
     // ms_proxyDefault from our OnExit() won't work (and can actually crash)
-    AddDependency(wxClassInfo::FindClass(_T("wxSocketModule")));
+    AddDependency(wxClassInfo::FindClass(wxT("wxSocketModule")));
 }
 
 bool wxURLModule::OnInit()
@@ -432,7 +432,7 @@ bool wxURLModule::OnInit()
     // down the program startup (especially if there is no DNS server
     // available, in which case it may take up to 1 minute)
 
-    if ( wxGetenv(_T("HTTP_PROXY")) )
+    if ( wxGetenv(wxT("HTTP_PROXY")) )
     {
         wxURL::ms_useDefaultProxy = true;
     }
--- src/common/cshelp.cpp-orig	2009-06-18 16:46:08.183358000 -0500
+++ src/common/cshelp.cpp	2009-06-18 16:46:16.426508000 -0500
@@ -232,7 +232,7 @@ bool wxContextHelpEvtHandler::ProcessEve
 // Dispatch the help event to the relevant window
 bool wxContextHelp::DispatchEvent(wxWindow* win, const wxPoint& pt)
 {
-    wxCHECK_MSG( win, false, _T("win parameter can't be NULL") );
+    wxCHECK_MSG( win, false, wxT("win parameter can't be NULL") );
 
     wxHelpEvent helpEvent(wxEVT_HELP, win->GetId(), pt,
                           wxHelpEvent::Origin_HelpButton);
@@ -332,7 +332,7 @@ wxString wxHelpProvider::GetHelpTextMayb
     if ( m_helptextAtPoint != wxDefaultPosition ||
             m_helptextOrigin != wxHelpEvent::Origin_Unknown )
     {
-        wxCHECK_MSG( window, wxEmptyString, _T("window must not be NULL") );
+        wxCHECK_MSG( window, wxEmptyString, wxT("window must not be NULL") );
 
         wxPoint pt = m_helptextAtPoint;
         wxHelpEvent::Origin origin = m_helptextOrigin;
@@ -472,7 +472,7 @@ bool wxHelpControllerHelpProvider::ShowH
 // Convenience function for turning context id into wxString
 wxString wxContextId(int id)
 {
-    return wxString::Format(_T("%d"), id);
+    return wxString::Format(wxT("%d"), id);
 }
 
 // ----------------------------------------------------------------------------
--- src/common/dcbase.cpp-orig	2009-06-18 16:46:37.333048000 -0500
+++ src/common/dcbase.cpp	2009-06-18 16:46:51.131756000 -0500
@@ -479,7 +479,7 @@ void wxDCBase::GetMultiLineTextExtent(co
     wxString curLine;
     for ( const wxChar *pc = text; ; pc++ )
     {
-        if ( *pc == _T('\n') || *pc == _T('\0') )
+        if ( *pc == wxT('\n') || *pc == wxT('\0') )
         {
             if ( curLine.empty() )
             {
@@ -495,7 +495,7 @@ void wxDCBase::GetMultiLineTextExtent(co
                 if ( !heightLineDefault )
                 {
                     // but we don't know it yet - choose something reasonable
-                    GetTextExtent(_T("W"), NULL, &heightLineDefault,
+                    GetTextExtent(wxT("W"), NULL, &heightLineDefault,
                                   NULL, NULL, font);
                 }
 
@@ -510,7 +510,7 @@ void wxDCBase::GetMultiLineTextExtent(co
                 heightTextTotal += heightLine;
             }
 
-            if ( *pc == _T('\n') )
+            if ( *pc == wxT('\n') )
             {
                curLine.clear();
             }
@@ -608,7 +608,7 @@ void wxDCBase::DrawLabel(const wxString&
     wxString curLine;
     for ( const wxChar *pc = text; ; pc++ )
     {
-        if ( *pc == _T('\n') || *pc == _T('\0') )
+        if ( *pc == wxT('\n') || *pc == wxT('\0') )
         {
             int xRealStart = x; // init it here to avoid compielr warnings
 
@@ -646,7 +646,7 @@ void wxDCBase::DrawLabel(const wxString&
                 endUnderscore += xRealStart;
             }
 
-            if ( *pc == _T('\0') )
+            if ( *pc == wxT('\0') )
                 break;
 
             curLine.clear();
--- src/common/dynload.cpp-orig	2009-06-18 16:46:58.002999000 -0500
+++ src/common/dynload.cpp	2009-06-18 16:47:08.734771000 -0500
@@ -105,7 +105,7 @@ wxPluginLibrary::~wxPluginLibrary()
 wxPluginLibrary *wxPluginLibrary::RefLib()
 {
     wxCHECK_MSG( m_linkcount > 0, NULL,
-                 _T("Library had been already deleted!") );
+                 wxT("Library had been already deleted!") );
 
     ++m_linkcount;
     return this;
@@ -114,7 +114,7 @@ wxPluginLibrary *wxPluginLibrary::RefLib
 bool wxPluginLibrary::UnrefLib()
 {
     wxASSERT_MSG( m_objcount == 0,
-                  _T("Library unloaded before all objects were destroyed") );
+                  wxT("Library unloaded before all objects were destroyed") );
 
     if ( m_linkcount == 0 || --m_linkcount == 0 )
     {
@@ -165,7 +165,7 @@ void wxPluginLibrary::RegisterModules()
     // though, as there is currently no way to Unregister it without it.
 
     wxASSERT_MSG( m_linkcount == 1,
-                  _T("RegisterModules should only be called for the first load") );
+                  wxT("RegisterModules should only be called for the first load") );
 
     for ( wxClassInfo *info = m_after; info != m_before; info = info->m_next)
     {
@@ -173,7 +173,7 @@ void wxPluginLibrary::RegisterModules()
         {
             wxModule *m = wxDynamicCast(info->CreateObject(), wxModule);
 
-            wxASSERT_MSG( m, _T("wxDynamicCast of wxModule failed") );
+            wxASSERT_MSG( m, wxT("wxDynamicCast of wxModule failed") );
 
             m_wxmodules.push_back(m);
             wxModule::RegisterModule(m);
@@ -188,7 +188,7 @@ void wxPluginLibrary::RegisterModules()
     {
         if( !(*it)->Init() )
         {
-            wxLogDebug(_T("wxModule::Init() failed for wxPluginLibrary"));
+            wxLogDebug(wxT("wxModule::Init() failed for wxPluginLibrary"));
 
             // XXX: Watch this, a different hash implementation might break it,
             //      a good hash implementation would let us fix it though.
@@ -258,8 +258,8 @@ wxPluginManager::LoadLibrary(const wxStr
 
     if ( entry )
     {
-        wxLogTrace(_T("dll"),
-                   _T("LoadLibrary(%s): already loaded."), realname.c_str());
+        wxLogTrace(wxT("dll"),
+                   wxT("LoadLibrary(%s): already loaded."), realname.c_str());
 
         entry->RefLib();
     }
@@ -271,20 +271,20 @@ wxPluginManager::LoadLibrary(const wxStr
         {
             (*ms_manifest)[realname] = entry;
 
-            wxLogTrace(_T("dll"),
-                       _T("LoadLibrary(%s): loaded ok."), realname.c_str());
+            wxLogTrace(wxT("dll"),
+                       wxT("LoadLibrary(%s): loaded ok."), realname.c_str());
 
         }
         else
         {
-            wxLogTrace(_T("dll"),
-                       _T("LoadLibrary(%s): failed to load."), realname.c_str());
+            wxLogTrace(wxT("dll"),
+                       wxT("LoadLibrary(%s): failed to load."), realname.c_str());
 
             // we have created entry just above
             if ( !entry->UnrefLib() )
             {
                 // ... so UnrefLib() is supposed to delete it
-                wxFAIL_MSG( _T("Currently linked library is not loaded?") );
+                wxFAIL_MSG( wxT("Currently linked library is not loaded?") );
             }
 
             entry = NULL;
@@ -309,13 +309,13 @@ bool wxPluginManager::UnloadLibrary(cons
 
     if ( !entry )
     {
-        wxLogDebug(_T("Attempt to unload library '%s' which is not loaded."),
+        wxLogDebug(wxT("Attempt to unload library '%s' which is not loaded."),
                    libname.c_str());
 
         return false;
     }
 
-    wxLogTrace(_T("dll"), _T("UnloadLibrary(%s)"), realname.c_str());
+    wxLogTrace(wxT("dll"), wxT("UnloadLibrary(%s)"), realname.c_str());
 
     if ( !entry->UnrefLib() )
     {
@@ -341,7 +341,7 @@ bool wxPluginManager::Load(const wxStrin
 
 void wxPluginManager::Unload()
 {
-    wxCHECK_RET( m_entry, _T("unloading an invalid wxPluginManager?") );
+    wxCHECK_RET( m_entry, wxT("unloading an invalid wxPluginManager?") );
 
     for ( wxDLManifest::iterator i = ms_manifest->begin();
           i != ms_manifest->end();
--- src/common/xti.cpp-orig	2009-06-18 16:47:13.218792000 -0500
+++ src/common/xti.cpp	2009-06-18 16:47:21.789938000 -0500
@@ -114,13 +114,13 @@ const wxChar * wxEnumData::GetEnumMember
 template<> void wxStringReadValue(const wxString &s , bool &data )
 {
     int intdata ;
-    wxSscanf(s, _T("%d"), &intdata ) ;
+    wxSscanf(s, wxT("%d"), &intdata ) ;
     data = (bool)intdata ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const bool &data )
 {
-    s = wxString::Format(_T("%d"), data ) ;
+    s = wxString::Format(wxT("%d"), data ) ;
 }
 
 // char
@@ -128,13 +128,13 @@ template<> void wxStringWriteValue(wxStr
 template<> void wxStringReadValue(const wxString &s , char &data )
 {
     int intdata ;
-    wxSscanf(s, _T("%d"), &intdata ) ;
+    wxSscanf(s, wxT("%d"), &intdata ) ;
     data = char(intdata) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const char &data )
 {
-    s = wxString::Format(_T("%d"), data ) ;
+    s = wxString::Format(wxT("%d"), data ) ;
 }
 
 // unsigned char
@@ -142,85 +142,85 @@ template<> void wxStringWriteValue(wxStr
 template<> void wxStringReadValue(const wxString &s , unsigned char &data )
 {
     int intdata ;
-    wxSscanf(s, _T("%d"), &intdata ) ;
+    wxSscanf(s, wxT("%d"), &intdata ) ;
     data = (unsigned char)(intdata) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const unsigned char &data )
 {
-    s = wxString::Format(_T("%d"), data ) ;
+    s = wxString::Format(wxT("%d"), data ) ;
 }
 
 // int
 
 template<> void wxStringReadValue(const wxString &s , int &data )
 {
-    wxSscanf(s, _T("%d"), &data ) ;
+    wxSscanf(s, wxT("%d"), &data ) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const int &data )
 {
-    s = wxString::Format(_T("%d"), data ) ;
+    s = wxString::Format(wxT("%d"), data ) ;
 }
 
 // unsigned int
 
 template<> void wxStringReadValue(const wxString &s , unsigned int &data )
 {
-    wxSscanf(s, _T("%d"), &data ) ;
+    wxSscanf(s, wxT("%d"), &data ) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const unsigned int &data )
 {
-    s = wxString::Format(_T("%d"), data ) ;
+    s = wxString::Format(wxT("%d"), data ) ;
 }
 
 // long
 
 template<> void wxStringReadValue(const wxString &s , long &data )
 {
-    wxSscanf(s, _T("%ld"), &data ) ;
+    wxSscanf(s, wxT("%ld"), &data ) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const long &data )
 {
-    s = wxString::Format(_T("%ld"), data ) ;
+    s = wxString::Format(wxT("%ld"), data ) ;
 }
 
 // unsigned long
 
 template<> void wxStringReadValue(const wxString &s , unsigned long &data )
 {
-    wxSscanf(s, _T("%ld"), &data ) ;
+    wxSscanf(s, wxT("%ld"), &data ) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const unsigned long &data )
 {
-    s = wxString::Format(_T("%ld"), data ) ;
+    s = wxString::Format(wxT("%ld"), data ) ;
 }
 
 // float
 
 template<> void wxStringReadValue(const wxString &s , float &data )
 {
-    wxSscanf(s, _T("%f"), &data ) ;
+    wxSscanf(s, wxT("%f"), &data ) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const float &data )
 {
-    s = wxString::Format(_T("%f"), data ) ;
+    s = wxString::Format(wxT("%f"), data ) ;
 }
 
 // double
 
 template<> void wxStringReadValue(const wxString &s , double &data )
 {
-    wxSscanf(s, _T("%lf"), &data ) ;
+    wxSscanf(s, wxT("%lf"), &data ) ;
 }
 
 template<> void wxStringWriteValue(wxString &s , const double &data )
 {
-    s = wxString::Format(_T("%lf"), data ) ;
+    s = wxString::Format(wxT("%lf"), data ) ;
 }
 
 // wxString
--- src/common/gbsizer.cpp-orig	2009-06-18 16:47:28.872203000 -0500
+++ src/common/gbsizer.cpp	2009-06-18 16:47:37.672016000 -0500
@@ -266,7 +266,7 @@ wxGBPosition wxGridBagSizer::GetItemPosi
 {
     wxGBPosition badpos(-1,-1);
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
-    wxCHECK_MSG( node, badpos, _T("Failed to find item.") );
+    wxCHECK_MSG( node, badpos, wxT("Failed to find item.") );
     wxGBSizerItem* item = (wxGBSizerItem*)node->GetData();
     return item->GetPos();
 }
@@ -292,7 +292,7 @@ bool wxGridBagSizer::SetItemPosition(wxS
 bool wxGridBagSizer::SetItemPosition(size_t index, const wxGBPosition& pos)
 {
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
-    wxCHECK_MSG( node, false, _T("Failed to find item.") );
+    wxCHECK_MSG( node, false, wxT("Failed to find item.") );
     wxGBSizerItem* item = (wxGBSizerItem*)node->GetData();
     return item->SetPos(pos);
 }
@@ -303,7 +303,7 @@ wxGBSpan wxGridBagSizer::GetItemSpan(wxW
 {
     wxGBSpan badspan(-1,-1);
     wxGBSizerItem* item = FindItem(window);
-    wxCHECK_MSG( item, badspan, _T("Failed to find item.") );
+    wxCHECK_MSG( item, badspan, wxT("Failed to find item.") );
     return item->GetSpan();
 }
 
@@ -312,7 +312,7 @@ wxGBSpan wxGridBagSizer::GetItemSpan(wxS
 {
     wxGBSpan badspan(-1,-1);
     wxGBSizerItem* item = FindItem(sizer);
-    wxCHECK_MSG( item, badspan, _T("Failed to find item.") );
+    wxCHECK_MSG( item, badspan, wxT("Failed to find item.") );
     return item->GetSpan();
 }
 
@@ -321,7 +321,7 @@ wxGBSpan wxGridBagSizer::GetItemSpan(siz
 {
     wxGBSpan badspan(-1,-1);
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
-    wxCHECK_MSG( node, badspan, _T("Failed to find item.") );
+    wxCHECK_MSG( node, badspan, wxT("Failed to find item.") );
     wxGBSizerItem* item = (wxGBSizerItem*)node->GetData();
     return item->GetSpan();
 }
@@ -347,7 +347,7 @@ bool wxGridBagSizer::SetItemSpan(wxSizer
 bool wxGridBagSizer::SetItemSpan(size_t index, const wxGBSpan& span)
 {
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
-    wxCHECK_MSG( node, false, _T("Failed to find item.") );
+    wxCHECK_MSG( node, false, wxT("Failed to find item.") );
     wxGBSizerItem* item = (wxGBSizerItem*)node->GetData();
     return item->SetSpan(span);
 }
--- src/common/debugrpt.cpp-orig	2009-06-18 16:47:45.109169000 -0500
+++ src/common/debugrpt.cpp	2009-06-18 16:47:55.333805000 -0500
@@ -87,13 +87,13 @@ protected:
 static inline void
 HexProperty(wxXmlNode *node, const wxChar *name, unsigned long value)
 {
-    node->AddProperty(name, wxString::Format(_T("%08lx"), value));
+    node->AddProperty(name, wxString::Format(wxT("%08lx"), value));
 }
 
 static inline void
 NumProperty(wxXmlNode *node, const wxChar *name, unsigned long value)
 {
-    node->AddProperty(name, wxString::Format(_T("%lu"), value));
+    node->AddProperty(name, wxString::Format(wxT("%lu"), value));
 }
 
 static inline void
@@ -109,7 +109,7 @@ TextElement(wxXmlNode *node, const wxCha
 static inline void
 HexElement(wxXmlNode *node, const wxChar *name, unsigned long value)
 {
-    TextElement(node, name, wxString::Format(_T("%08lx"), value));
+    TextElement(node, name, wxString::Format(wxT("%08lx"), value));
 }
 
 #endif // wxUSE_CRASHREPORT
@@ -122,49 +122,49 @@ void XmlStackWalker::OnStackFrame(const 
 {
     m_isOk = true;
 
-    wxXmlNode *nodeFrame = new wxXmlNode(wxXML_ELEMENT_NODE, _T("frame"));
+    wxXmlNode *nodeFrame = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("frame"));
     m_nodeStack->AddChild(nodeFrame);
 
-    NumProperty(nodeFrame, _T("level"), frame.GetLevel());
+    NumProperty(nodeFrame, wxT("level"), frame.GetLevel());
     wxString func = frame.GetName();
     if ( !func.empty() )
     {
-        nodeFrame->AddProperty(_T("function"), func);
-        HexProperty(nodeFrame, _T("offset"), frame.GetOffset());
+        nodeFrame->AddProperty(wxT("function"), func);
+        HexProperty(nodeFrame, wxT("offset"), frame.GetOffset());
     }
 
     if ( frame.HasSourceLocation() )
     {
-        nodeFrame->AddProperty(_T("file"), frame.GetFileName());
-        NumProperty(nodeFrame, _T("line"), frame.GetLine());
+        nodeFrame->AddProperty(wxT("file"), frame.GetFileName());
+        NumProperty(nodeFrame, wxT("line"), frame.GetLine());
     }
 
     const size_t nParams = frame.GetParamCount();
     if ( nParams )
     {
-        wxXmlNode *nodeParams = new wxXmlNode(wxXML_ELEMENT_NODE, _T("parameters"));
+        wxXmlNode *nodeParams = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("parameters"));
         nodeFrame->AddChild(nodeParams);
 
         for ( size_t n = 0; n < nParams; n++ )
         {
             wxXmlNode *
-                nodeParam = new wxXmlNode(wxXML_ELEMENT_NODE, _T("parameter"));
+                nodeParam = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("parameter"));
             nodeParams->AddChild(nodeParam);
 
-            NumProperty(nodeParam, _T("number"), n);
+            NumProperty(nodeParam, wxT("number"), n);
 
             wxString type, name, value;
             if ( !frame.GetParam(n, &type, &name, &value) )
                 continue;
 
             if ( !type.empty() )
-                TextElement(nodeParam, _T("type"), type);
+                TextElement(nodeParam, wxT("type"), type);
 
             if ( !name.empty() )
-                TextElement(nodeParam, _T("name"), name);
+                TextElement(nodeParam, wxT("name"), name);
 
             if ( !value.empty() )
-                TextElement(nodeParam, _T("value"), value);
+                TextElement(nodeParam, wxT("value"), value);
         }
     }
 }
@@ -191,12 +191,12 @@ wxDebugReport::wxDebugReport()
     wxFileName fn;
     fn.AssignTempFileName(appname);
 #if wxUSE_DATETIME
-    m_dir.Printf(_T("%s%c%s_dbgrpt-%lu-%s"),
+    m_dir.Printf(wxT("%s%c%s_dbgrpt-%lu-%s"),
                  fn.GetPath().c_str(), wxFILE_SEP_PATH, appname.c_str(),
                  wxGetProcessId(),
-                 wxDateTime::Now().Format(_T("%Y%m%dT%H%M%S")).c_str());
+                 wxDateTime::Now().Format(wxT("%Y%m%dT%H%M%S")).c_str());
 #else
-    m_dir.Printf(_T("%s%c%s_dbgrpt-%lu"),
+    m_dir.Printf(wxT("%s%c%s_dbgrpt-%lu"),
                  fn.GetPath().c_str(), wxFILE_SEP_PATH, appname.c_str(),
                  wxGetProcessId());
 #endif
@@ -255,7 +255,7 @@ wxString wxDebugReport::GetReportName() 
     if(wxTheApp)
         return wxTheApp->GetAppName();
 
-    return _T("wx");
+    return wxT("wx");
 }
 
 void
@@ -276,7 +276,7 @@ wxDebugReport::AddFile(const wxString& f
         name = filename;
 
         wxASSERT_MSG( wxFileName(GetDirectory(), name).FileExists(),
-                      _T("file should exist in debug report directory") );
+                      wxT("file should exist in debug report directory") );
     }
 
     m_files.Add(name);
@@ -289,10 +289,10 @@ wxDebugReport::AddText(const wxString& f
                        const wxString& description)
 {
     wxASSERT_MSG( !wxFileName(filename).IsAbsolute(),
-                  _T("filename should be relative to debug report directory") );
+                  wxT("filename should be relative to debug report directory") );
 
     wxFileName fn(GetDirectory(), filename);
-    wxFFile file(fn.GetFullPath(), _T("w"));
+    wxFFile file(fn.GetFullPath(), wxT("w"));
     if ( !file.IsOpened() || !file.Write(text) )
         return false;
 
@@ -304,7 +304,7 @@ wxDebugReport::AddText(const wxString& f
 void wxDebugReport::RemoveFile(const wxString& name)
 {
     const int n = m_files.Index(name);
-    wxCHECK_RET( n != wxNOT_FOUND, _T("No such file in wxDebugReport") );
+    wxCHECK_RET( n != wxNOT_FOUND, wxT("No such file in wxDebugReport") );
 
     m_files.RemoveAt(n);
     m_descriptions.RemoveAt(n);
@@ -348,7 +348,7 @@ void wxDebugReport::AddAll(Context conte
 
 bool wxDebugReport::DoAddSystemInfo(wxXmlNode *nodeSystemInfo)
 {
-    nodeSystemInfo->AddProperty(_T("description"), wxGetOsDescription());
+    nodeSystemInfo->AddProperty(wxT("description"), wxGetOsDescription());
 
     return true;
 }
@@ -364,27 +364,27 @@ bool wxDebugReport::DoAddLoadedModules(w
     {
         const wxDynamicLibraryDetails& info = modules[n];
 
-        wxXmlNode *nodeModule = new wxXmlNode(wxXML_ELEMENT_NODE, _T("module"));
+        wxXmlNode *nodeModule = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("module"));
         nodeModules->AddChild(nodeModule);
 
         wxString path = info.GetPath();
         if ( path.empty() )
             path = info.GetName();
         if ( !path.empty() )
-            nodeModule->AddProperty(_T("path"), path);
+            nodeModule->AddProperty(wxT("path"), path);
 
         void *addr = NULL;
         size_t len = 0;
         if ( info.GetAddress(&addr, &len) )
         {
-            HexProperty(nodeModule, _T("address"), wxPtrToUInt(addr));
-            HexProperty(nodeModule, _T("size"), len);
+            HexProperty(nodeModule, wxT("address"), wxPtrToUInt(addr));
+            HexProperty(nodeModule, wxT("size"), len);
         }
 
         wxString ver = info.GetVersion();
         if ( !ver.empty() )
         {
-            nodeModule->AddProperty(_T("version"), ver);
+            nodeModule->AddProperty(wxT("version"), ver);
         }
     }
 
@@ -398,35 +398,35 @@ bool wxDebugReport::DoAddExceptionInfo(w
     if ( !c.code )
         return false;
 
-    wxXmlNode *nodeExc = new wxXmlNode(wxXML_ELEMENT_NODE, _T("exception"));
+    wxXmlNode *nodeExc = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("exception"));
     nodeContext->AddChild(nodeExc);
 
-    HexProperty(nodeExc, _T("code"), c.code);
-    nodeExc->AddProperty(_T("name"), c.GetExceptionString());
-    HexProperty(nodeExc, _T("address"), wxPtrToUInt(c.addr));
+    HexProperty(nodeExc, wxT("code"), c.code);
+    nodeExc->AddProperty(wxT("name"), c.GetExceptionString());
+    HexProperty(nodeExc, wxT("address"), wxPtrToUInt(c.addr));
 
 #ifdef __INTEL__
-    wxXmlNode *nodeRegs = new wxXmlNode(wxXML_ELEMENT_NODE, _T("registers"));
+    wxXmlNode *nodeRegs = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("registers"));
     nodeContext->AddChild(nodeRegs);
-    HexElement(nodeRegs, _T("eax"), c.regs.eax);
-    HexElement(nodeRegs, _T("ebx"), c.regs.ebx);
-    HexElement(nodeRegs, _T("ecx"), c.regs.edx);
-    HexElement(nodeRegs, _T("edx"), c.regs.edx);
-    HexElement(nodeRegs, _T("esi"), c.regs.esi);
-    HexElement(nodeRegs, _T("edi"), c.regs.edi);
-
-    HexElement(nodeRegs, _T("ebp"), c.regs.ebp);
-    HexElement(nodeRegs, _T("esp"), c.regs.esp);
-    HexElement(nodeRegs, _T("eip"), c.regs.eip);
-
-    HexElement(nodeRegs, _T("cs"), c.regs.cs);
-    HexElement(nodeRegs, _T("ds"), c.regs.ds);
-    HexElement(nodeRegs, _T("es"), c.regs.es);
-    HexElement(nodeRegs, _T("fs"), c.regs.fs);
-    HexElement(nodeRegs, _T("gs"), c.regs.gs);
-    HexElement(nodeRegs, _T("ss"), c.regs.ss);
+    HexElement(nodeRegs, wxT("eax"), c.regs.eax);
+    HexElement(nodeRegs, wxT("ebx"), c.regs.ebx);
+    HexElement(nodeRegs, wxT("ecx"), c.regs.edx);
+    HexElement(nodeRegs, wxT("edx"), c.regs.edx);
+    HexElement(nodeRegs, wxT("esi"), c.regs.esi);
+    HexElement(nodeRegs, wxT("edi"), c.regs.edi);
+
+    HexElement(nodeRegs, wxT("ebp"), c.regs.ebp);
+    HexElement(nodeRegs, wxT("esp"), c.regs.esp);
+    HexElement(nodeRegs, wxT("eip"), c.regs.eip);
+
+    HexElement(nodeRegs, wxT("cs"), c.regs.cs);
+    HexElement(nodeRegs, wxT("ds"), c.regs.ds);
+    HexElement(nodeRegs, wxT("es"), c.regs.es);
+    HexElement(nodeRegs, wxT("fs"), c.regs.fs);
+    HexElement(nodeRegs, wxT("gs"), c.regs.gs);
+    HexElement(nodeRegs, wxT("ss"), c.regs.ss);
 
-    HexElement(nodeRegs, _T("flags"), c.regs.flags);
+    HexElement(nodeRegs, wxT("flags"), c.regs.flags);
 #endif // __INTEL__
 
     return true;
@@ -439,25 +439,25 @@ bool wxDebugReport::DoAddExceptionInfo(w
 
 bool wxDebugReport::AddContext(wxDebugReport::Context ctx)
 {
-    wxCHECK_MSG( IsOk(), false, _T("use IsOk() first") );
+    wxCHECK_MSG( IsOk(), false, wxT("use IsOk() first") );
 
     // create XML dump of current context
     wxXmlDocument xmldoc;
-    wxXmlNode *nodeRoot = new wxXmlNode(wxXML_ELEMENT_NODE, _T("report"));
+    wxXmlNode *nodeRoot = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("report"));
     xmldoc.SetRoot(nodeRoot);
-    nodeRoot->AddProperty(_T("version"), _T("1.0"));
-    nodeRoot->AddProperty(_T("kind"), ctx == Context_Current ? _T("user")
-                                                             : _T("exception"));
+    nodeRoot->AddProperty(wxT("version"), wxT("1.0"));
+    nodeRoot->AddProperty(wxT("kind"), ctx == Context_Current ? wxT("user")
+                                                             : wxT("exception"));
 
     // add system information
-    wxXmlNode *nodeSystemInfo = new wxXmlNode(wxXML_ELEMENT_NODE, _T("system"));
+    wxXmlNode *nodeSystemInfo = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("system"));
     if ( DoAddSystemInfo(nodeSystemInfo) )
         nodeRoot->AddChild(nodeSystemInfo);
     else
         delete nodeSystemInfo;
 
     // add information about the loaded modules
-    wxXmlNode *nodeModules = new wxXmlNode(wxXML_ELEMENT_NODE, _T("modules"));
+    wxXmlNode *nodeModules = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("modules"));
     if ( DoAddLoadedModules(nodeModules) )
         nodeRoot->AddChild(nodeModules);
     else
@@ -467,7 +467,7 @@ bool wxDebugReport::AddContext(wxDebugRe
     // current context is not very interesting otherwise
     if ( ctx == Context_Exception )
     {
-        wxXmlNode *nodeContext = new wxXmlNode(wxXML_ELEMENT_NODE, _T("context"));
+        wxXmlNode *nodeContext = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("context"));
         if ( DoAddExceptionInfo(nodeContext) )
             nodeRoot->AddChild(nodeContext);
         else
@@ -476,7 +476,7 @@ bool wxDebugReport::AddContext(wxDebugRe
 
     // add stack traceback
 #if wxUSE_STACKWALKER
-    wxXmlNode *nodeStack = new wxXmlNode(wxXML_ELEMENT_NODE, _T("stack"));
+    wxXmlNode *nodeStack = new wxXmlNode(wxXML_ELEMENT_NODE, wxT("stack"));
     XmlStackWalker sw(nodeStack);
     if ( ctx == Context_Exception )
     {
@@ -498,7 +498,7 @@ bool wxDebugReport::AddContext(wxDebugRe
 
 
     // save the entire context dump in a file
-    wxFileName fn(m_dir, GetReportName(), _T("xml"));
+    wxFileName fn(m_dir, GetReportName(), wxT("xml"));
 
     if ( !xmldoc.Save(fn.GetFullPath()) )
         return false;
@@ -518,9 +518,9 @@ bool wxDebugReport::AddContext(wxDebugRe
 
 bool wxDebugReport::AddDump(Context ctx)
 {
-    wxCHECK_MSG( IsOk(), false, _T("use IsOk() first") );
+    wxCHECK_MSG( IsOk(), false, wxT("use IsOk() first") );
 
-    wxFileName fn(m_dir, GetReportName(), _T("dmp"));
+    wxFileName fn(m_dir, GetReportName(), wxT("dmp"));
     wxCrashReport::SetFileName(fn.GetFullPath());
 
     if ( !(ctx == Context_Exception ? wxCrashReport::Generate()
@@ -563,8 +563,8 @@ bool wxDebugReport::Process()
 bool wxDebugReport::DoProcess()
 {
     wxString msg(_("A debug report has been generated. It can be found in"));
-    msg << _T("\n")
-           _T("\t") << GetDirectory() << _T("\n\n")
+    msg << wxT("\n")
+           wxT("\t") << GetDirectory() << wxT("\n\n")
         << _("And includes the following files:\n");
 
     wxString name, desc;
@@ -577,7 +577,7 @@ bool wxDebugReport::DoProcess()
 
     msg += _("\nPlease send this report to the program maintainer, thank you!\n");
 
-    wxLogMessage(_T("%s"), msg.c_str());
+    wxLogMessage(wxT("%s"), msg.c_str());
 
     // we have to do this or the report would be deleted, and we don't even
     // have any way to ask the user if he wants to keep it from here
@@ -603,8 +603,8 @@ bool wxDebugReportCompress::DoProcess()
         return false;
 
     // create the streams
-    wxFileName fn(GetDirectory(), GetReportName(), _T("zip"));
-    wxFFileOutputStream os(fn.GetFullPath(), _T("wb"));
+    wxFileName fn(GetDirectory(), GetReportName(), wxT("zip"));
+    wxFFileOutputStream os(fn.GetFullPath(), wxT("wb"));
     wxZipOutputStream zos(os, 9);
 
     // add all files to the ZIP one
@@ -645,8 +645,8 @@ wxDebugReportUpload::wxDebugReportUpload
                      m_inputField(input),
                      m_curlCmd(curl)
 {
-    if ( m_uploadURL.Last() != _T('/') )
-        m_uploadURL += _T('/');
+    if ( m_uploadURL.Last() != wxT('/') )
+        m_uploadURL += wxT('/');
     m_uploadURL += action;
 }
 
@@ -659,7 +659,7 @@ bool wxDebugReportUpload::DoProcess()
     wxArrayString output, errors;
     int rc = wxExecute(wxString::Format
                        (
-                            _T("%s -F %s=@\"%s\" %s"),
+                            wxT("%s -F %s=@\"%s\" %s"),
                             m_curlCmd.c_str(),
                             m_inputField.c_str(),
                             GetCompressedFileName().c_str(),
@@ -678,7 +678,7 @@ bool wxDebugReportUpload::DoProcess()
         {
             for ( size_t n = 0; n < count; n++ )
             {
-                wxLogWarning(_T("%s"), errors[n].c_str());
+                wxLogWarning(wxT("%s"), errors[n].c_str());
             }
         }
 
--- src/common/dircmn.cpp-orig	2009-06-18 16:48:02.192350000 -0500
+++ src/common/dircmn.cpp	2009-06-18 16:48:18.114591000 -0500
@@ -81,7 +81,7 @@ size_t wxDir::Traverse(wxDirTraverser& s
                        int flags) const
 {
     wxCHECK_MSG( IsOpened(), (size_t)-1,
-                 _T("dir must be opened before traversing it") );
+                 wxT("dir must be opened before traversing it") );
 
     // the total number of files found
     size_t nFiles = 0;
@@ -103,7 +103,7 @@ size_t wxDir::Traverse(wxDirTraverser& s
             switch ( sink.OnDir(fulldirname) )
             {
                 default:
-                    wxFAIL_MSG(_T("unexpected OnDir() return value") );
+                    wxFAIL_MSG(wxT("unexpected OnDir() return value") );
                     // fall through
 
                 case wxDIR_STOP:
@@ -131,7 +131,7 @@ size_t wxDir::Traverse(wxDirTraverser& s
                                 switch ( sink.OnOpenError(fulldirname) )
                                 {
                                     default:
-                                        wxFAIL_MSG(_T("unexpected OnOpenError() return value") );
+                                        wxFAIL_MSG(wxT("unexpected OnOpenError() return value") );
                                         // fall through
 
                                     case wxDIR_STOP:
@@ -180,7 +180,7 @@ size_t wxDir::Traverse(wxDirTraverser& s
                 break;
 
             wxASSERT_MSG( res == wxDIR_CONTINUE,
-                          _T("unexpected OnFile() return value") );
+                          wxT("unexpected OnFile() return value") );
 
             nFiles++;
 
@@ -223,7 +223,7 @@ size_t wxDir::GetAllFiles(const wxString
                           const wxString& filespec,
                           int flags)
 {
-    wxCHECK_MSG( files, (size_t)-1, _T("NULL pointer in wxDir::GetAllFiles") );
+    wxCHECK_MSG( files, (size_t)-1, wxT("NULL pointer in wxDir::GetAllFiles") );
 
     size_t nFiles = 0;
 
--- src/common/sizer.cpp-orig	2009-06-18 16:48:22.880189000 -0500
+++ src/common/sizer.cpp	2009-06-18 16:48:32.718221000 -0500
@@ -124,7 +124,7 @@ wxSizerItem::wxSizerItem()
 // window item
 void wxSizerItem::SetWindow(wxWindow *window)
 {
-    wxCHECK_RET( window, _T("NULL window in wxSizerItem::SetWindow()") );
+    wxCHECK_RET( window, wxT("NULL window in wxSizerItem::SetWindow()") );
 
     m_kind = Item_Window;
     m_window = window;
@@ -222,7 +222,7 @@ wxSizerItem::~wxSizerItem()
 
         case Item_Max:
         default:
-            wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
+            wxFAIL_MSG( wxT("unexpected wxSizerItem::m_kind") );
     }
 }
 
@@ -258,7 +258,7 @@ wxSize wxSizerItem::GetSize() const
 
         case Item_Max:
         default:
-            wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
+            wxFAIL_MSG( wxT("unexpected wxSizerItem::m_kind") );
     }
 
     if (m_flag & wxWEST)
@@ -376,7 +376,7 @@ void wxSizerItem::SetDimension( const wx
     switch ( m_kind )
     {
         case Item_None:
-            wxFAIL_MSG( _T("can't set size of uninitialized sizer item") );
+            wxFAIL_MSG( wxT("can't set size of uninitialized sizer item") );
             break;
 
         case Item_Window:
@@ -394,7 +394,7 @@ void wxSizerItem::SetDimension( const wx
 
         case Item_Max:
         default:
-            wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
+            wxFAIL_MSG( wxT("unexpected wxSizerItem::m_kind") );
     }
 }
 
@@ -423,7 +423,7 @@ void wxSizerItem::DeleteWindows()
 
         case Item_Max:
         default:
-            wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
+            wxFAIL_MSG( wxT("unexpected wxSizerItem::m_kind") );
     }
 
 }
@@ -433,7 +433,7 @@ void wxSizerItem::Show( bool show )
     switch ( m_kind )
     {
         case Item_None:
-            wxFAIL_MSG( _T("can't show uninitialized sizer item") );
+            wxFAIL_MSG( wxT("can't show uninitialized sizer item") );
             break;
 
         case Item_Window:
@@ -450,7 +450,7 @@ void wxSizerItem::Show( bool show )
 
         case Item_Max:
         default:
-            wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
+            wxFAIL_MSG( wxT("unexpected wxSizerItem::m_kind") );
     }
 }
 
@@ -492,7 +492,7 @@ bool wxSizerItem::IsShown() const
 
         case Item_Max:
         default:
-            wxFAIL_MSG( _T("unexpected wxSizerItem::m_kind") );
+            wxFAIL_MSG( wxT("unexpected wxSizerItem::m_kind") );
     }
 
     return false;
@@ -596,7 +596,7 @@ bool wxSizer::Remove( wxWindow *window )
 
 bool wxSizer::Remove( wxSizer *sizer )
 {
-    wxASSERT_MSG( sizer, _T("Removing NULL sizer") );
+    wxASSERT_MSG( sizer, wxT("Removing NULL sizer") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -620,11 +620,11 @@ bool wxSizer::Remove( int index )
 {
     wxCHECK_MSG( index >= 0 && (size_t)index < m_children.GetCount(),
                  false,
-                 _T("Remove index is out of range") );
+                 wxT("Remove index is out of range") );
 
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
 
-    wxCHECK_MSG( node, false, _T("Failed to find child node") );
+    wxCHECK_MSG( node, false, wxT("Failed to find child node") );
 
     wxSizerItem *item = node->GetData();
 
@@ -638,7 +638,7 @@ bool wxSizer::Remove( int index )
 
 bool wxSizer::Detach( wxSizer *sizer )
 {
-    wxASSERT_MSG( sizer, _T("Detaching NULL sizer") );
+    wxASSERT_MSG( sizer, wxT("Detaching NULL sizer") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -660,7 +660,7 @@ bool wxSizer::Detach( wxSizer *sizer )
 
 bool wxSizer::Detach( wxWindow *window )
 {
-    wxASSERT_MSG( window, _T("Detaching NULL window") );
+    wxASSERT_MSG( window, wxT("Detaching NULL window") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -684,11 +684,11 @@ bool wxSizer::Detach( int index )
 {
     wxCHECK_MSG( index >= 0 && (size_t)index < m_children.GetCount(),
                  false,
-                 _T("Detach index is out of range") );
+                 wxT("Detach index is out of range") );
 
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
 
-    wxCHECK_MSG( node, false, _T("Failed to find child node") );
+    wxCHECK_MSG( node, false, wxT("Failed to find child node") );
 
     wxSizerItem *item = node->GetData();
 
@@ -704,8 +704,8 @@ bool wxSizer::Detach( int index )
 
 bool wxSizer::Replace( wxWindow *oldwin, wxWindow *newwin, bool recursive )
 {
-    wxASSERT_MSG( oldwin, _T("Replacing NULL window") );
-    wxASSERT_MSG( newwin, _T("Replacing with NULL window") );
+    wxASSERT_MSG( oldwin, wxT("Replacing NULL window") );
+    wxASSERT_MSG( newwin, wxT("Replacing with NULL window") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -733,8 +733,8 @@ bool wxSizer::Replace( wxWindow *oldwin,
 
 bool wxSizer::Replace( wxSizer *oldsz, wxSizer *newsz, bool recursive )
 {
-    wxASSERT_MSG( oldsz, _T("Replacing NULL sizer") );
-    wxASSERT_MSG( newsz, _T("Replacing with NULL sizer") );
+    wxASSERT_MSG( oldsz, wxT("Replacing NULL sizer") );
+    wxASSERT_MSG( newsz, wxT("Replacing with NULL sizer") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -762,12 +762,12 @@ bool wxSizer::Replace( wxSizer *oldsz, w
 
 bool wxSizer::Replace( size_t old, wxSizerItem *newitem )
 {
-    wxCHECK_MSG( old < m_children.GetCount(), false, _T("Replace index is out of range") );
-    wxASSERT_MSG( newitem, _T("Replacing with NULL item") );
+    wxCHECK_MSG( old < m_children.GetCount(), false, wxT("Replace index is out of range") );
+    wxASSERT_MSG( newitem, wxT("Replacing with NULL item") );
 
     wxSizerItemList::compatibility_iterator node = m_children.Item( old );
 
-    wxCHECK_MSG( node, false, _T("Failed to find child node") );
+    wxCHECK_MSG( node, false, wxT("Failed to find child node") );
 
     wxSizerItem *item = node->GetData();
     node->SetData(newitem);
@@ -847,7 +847,7 @@ wxSize wxSizer::ComputeFittingWindowSize
 
 wxSize wxSizer::ComputeFittingClientSize(wxWindow *window)
 {
-    wxCHECK_MSG( window, wxDefaultSize, _T("window can't be NULL") );
+    wxCHECK_MSG( window, wxDefaultSize, wxT("window can't be NULL") );
 
     return window->WindowToClientSize(ComputeFittingWindowSize(window));
 }
@@ -992,7 +992,7 @@ void wxSizer::DoSetMinSize( int width, i
 
 bool wxSizer::DoSetItemMinSize( wxWindow *window, int width, int height )
 {
-    wxASSERT_MSG( window, _T("SetMinSize for NULL window") );
+    wxASSERT_MSG( window, wxT("SetMinSize for NULL window") );
 
     // Is it our immediate child?
 
@@ -1030,7 +1030,7 @@ bool wxSizer::DoSetItemMinSize( wxWindow
 
 bool wxSizer::DoSetItemMinSize( wxSizer *sizer, int width, int height )
 {
-    wxASSERT_MSG( sizer, _T("SetMinSize for NULL sizer") );
+    wxASSERT_MSG( sizer, wxT("SetMinSize for NULL sizer") );
 
     // Is it our immediate child?
 
@@ -1070,7 +1070,7 @@ bool wxSizer::DoSetItemMinSize( size_t i
 {
     wxSizerItemList::compatibility_iterator node = m_children.Item( index );
 
-    wxCHECK_MSG( node, false, _T("Failed to find child node") );
+    wxCHECK_MSG( node, false, wxT("Failed to find child node") );
 
     wxSizerItem     *item = node->GetData();
 
@@ -1090,7 +1090,7 @@ bool wxSizer::DoSetItemMinSize( size_t i
 
 wxSizerItem* wxSizer::GetItem( wxWindow *window, bool recursive )
 {
-    wxASSERT_MSG( window, _T("GetItem for NULL window") );
+    wxASSERT_MSG( window, wxT("GetItem for NULL window") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -1116,7 +1116,7 @@ wxSizerItem* wxSizer::GetItem( wxWindow 
 
 wxSizerItem* wxSizer::GetItem( wxSizer *sizer, bool recursive )
 {
-    wxASSERT_MSG( sizer, _T("GetItem for NULL sizer") );
+    wxASSERT_MSG( sizer, wxT("GetItem for NULL sizer") );
 
     wxSizerItemList::compatibility_iterator node = m_children.GetFirst();
     while (node)
@@ -1144,7 +1144,7 @@ wxSizerItem* wxSizer::GetItem( size_t in
 {
     wxCHECK_MSG( index < m_children.GetCount(),
                  NULL,
-                 _T("GetItem index is out of range") );
+                 wxT("GetItem index is out of range") );
 
     return m_children.Item( index )->GetData();
 }
@@ -1212,7 +1212,7 @@ bool wxSizer::IsShown( wxWindow *window 
         node = node->GetNext();
     }
 
-    wxFAIL_MSG( _T("IsShown failed to find sizer item") );
+    wxFAIL_MSG( wxT("IsShown failed to find sizer item") );
 
     return false;
 }
@@ -1231,7 +1231,7 @@ bool wxSizer::IsShown( wxSizer *sizer ) 
         node = node->GetNext();
     }
 
-    wxFAIL_MSG( _T("IsShown failed to find sizer item") );
+    wxFAIL_MSG( wxT("IsShown failed to find sizer item") );
 
     return false;
 }
@@ -1240,7 +1240,7 @@ bool wxSizer::IsShown( size_t index ) co
 {
     wxCHECK_MSG( index < m_children.GetCount(),
                  false,
-                 _T("IsShown index is out of range") );
+                 wxT("IsShown index is out of range") );
 
     return m_children.Item( index )->GetData()->IsShown();
 }
@@ -1283,7 +1283,7 @@ int wxGridSizer::CalcRowsCols(int& nrows
         }
         else // 0 columns, 0 rows?
         {
-            wxFAIL_MSG( _T("grid sizer must have either rows or columns fixed") );
+            wxFAIL_MSG( wxT("grid sizer must have either rows or columns fixed") );
 
             nrows = ncols = 0;
         }
@@ -1315,7 +1315,7 @@ void wxGridSizer::RecalcSizes()
             {
                 wxSizerItemList::compatibility_iterator node = m_children.Item( i );
 
-                wxASSERT_MSG( node, _T("Failed to find SizerItemList node") );
+                wxASSERT_MSG( node, wxT("Failed to find SizerItemList node") );
 
                 SetItemBounds( node->GetData(), x, y, w, h);
             }
@@ -1431,7 +1431,7 @@ void wxFlexGridSizer::RecalcSizes()
             {
                 wxSizerItemList::compatibility_iterator node = m_children.Item( i );
 
-                wxASSERT_MSG( node, _T("Failed to find node") );
+                wxASSERT_MSG( node, wxT("Failed to find node") );
 
                 int w = wxMax( 0, wxMin( m_colWidths[c], sz.x - x ) );
                 int h = wxMax( 0, wxMin( m_rowHeights[r], sz.y - y ) );
@@ -1676,7 +1676,7 @@ DoRemoveFromArrays(size_t idx, wxArrayIn
         }
     }
 
-    wxFAIL_MSG( _T("column/row is already not growable") );
+    wxFAIL_MSG( wxT("column/row is already not growable") );
 }
 
 void wxFlexGridSizer::RemoveGrowableCol( size_t idx )
--- src/common/event.cpp-orig	2009-06-18 16:48:43.255815000 -0500
+++ src/common/event.cpp	2009-06-18 16:48:48.957302000 -0500
@@ -1133,7 +1133,7 @@ void wxEvtHandler::AddPendingEvent(wxEve
     // we must be able to copy the events here so the event class must
     // implement Clone() properly instead of just providing a NULL stab for it
     wxCHECK_RET( eventCopy,
-                 _T("events of this type aren't supposed to be posted") );
+                 wxT("events of this type aren't supposed to be posted") );
 
     wxENTER_CRIT_SECT( Lock() );
 
@@ -1270,7 +1270,7 @@ bool wxEvtHandler::ProcessEvent(wxEvent&
         if ( rc != -1 )
         {
             wxASSERT_MSG( rc == 1 || rc == 0,
-                          _T("unexpected wxApp::FilterEvent return value") );
+                          wxT("unexpected wxApp::FilterEvent return value") );
 
             return rc != 0;
         }
--- src/common/ffile.cpp-orig	2009-06-18 16:48:54.394160000 -0500
+++ src/common/ffile.cpp	2009-06-18 16:49:00.198714000 -0500
@@ -230,7 +230,7 @@ bool wxFFile::Seek(wxFileOffset ofs, wxS
 wxFileOffset wxFFile::Tell() const
 {
     wxCHECK_MSG( IsOpened(), wxInvalidOffset,
-                 _T("wxFFile::Tell(): file is closed!") );
+                 wxT("wxFFile::Tell(): file is closed!") );
 
     wxFileOffset rc = wxFtell(m_fp);
     if ( rc == wxInvalidOffset )
@@ -245,7 +245,7 @@ wxFileOffset wxFFile::Tell() const
 wxFileOffset wxFFile::Length() const
 {
     wxCHECK_MSG( IsOpened(), wxInvalidOffset,
-                 _T("wxFFile::Length(): file is closed!") );
+                 wxT("wxFFile::Length(): file is closed!") );
 
     wxFFile& self = *(wxFFile *)this;   // const_cast
 
--- src/common/mstream.cpp-orig	2009-06-18 16:49:05.777928000 -0500
+++ src/common/mstream.cpp	2009-06-18 16:49:11.373265000 -0500
@@ -63,7 +63,7 @@ wxMemoryInputStream::wxMemoryInputStream
     }
 
     const size_t len = wx_truncate_cast(size_t, lenFile);
-    wxASSERT_MSG( len == lenFile + size_t(0), _T("huge files not supported") );
+    wxASSERT_MSG( len == lenFile + size_t(0), wxT("huge files not supported") );
 
     m_i_streambuf = new wxStreamBuffer(wxStreamBuffer::read);
     m_i_streambuf->SetBufferIO(len); // create buffer
@@ -161,7 +161,7 @@ wxFileOffset wxMemoryOutputStream::OnSys
 
 size_t wxMemoryOutputStream::CopyTo(void *buffer, size_t len) const
 {
-    wxCHECK_MSG( buffer, 0, _T("must have buffer to CopyTo") );
+    wxCHECK_MSG( buffer, 0, wxT("must have buffer to CopyTo") );
 
     if ( len > GetSize() )
         len = GetSize();
--- src/common/containr.cpp-orig	2009-06-18 16:49:29.291785000 -0500
+++ src/common/containr.cpp	2009-06-18 16:49:36.906931000 -0500
@@ -34,7 +34,7 @@
 #endif //WX_PRECOMP
 
 // trace mask for focus messages
-#define TRACE_FOCUS _T("focus")
+#define TRACE_FOCUS wxT("focus")
 
 // ============================================================================
 // implementation
@@ -113,7 +113,7 @@ void wxControlContainer::SetLastFocus(wx
                 // (under wxGTK)
 
                 wxASSERT_MSG( winParent,
-                              _T("Setting last focus for a window that is not our child?") );
+                              wxT("Setting last focus for a window that is not our child?") );
             }
         }
 
@@ -121,13 +121,13 @@ void wxControlContainer::SetLastFocus(wx
 
         if ( win )
         {
-            wxLogTrace(TRACE_FOCUS, _T("Set last focus to %s(%s)"),
+            wxLogTrace(TRACE_FOCUS, wxT("Set last focus to %s(%s)"),
                        win->GetClassInfo()->GetClassName(),
                        win->GetLabel().c_str());
         }
         else
         {
-            wxLogTrace(TRACE_FOCUS, _T("No more last focus"));
+            wxLogTrace(TRACE_FOCUS, wxT("No more last focus"));
         }
     }
 
@@ -155,7 +155,7 @@ wxRadioButton* wxGetPreviousButtonInGrou
 
     const wxWindowList& siblings = btn->GetParent()->GetChildren();
     wxWindowList::compatibility_iterator nodeThis = siblings.Find(btn);
-    wxCHECK_MSG( nodeThis, NULL, _T("radio button not a child of its parent?") );
+    wxCHECK_MSG( nodeThis, NULL, wxT("radio button not a child of its parent?") );
 
     // Iterate over all previous siblings until we find the next radio button
     wxWindowList::compatibility_iterator nodeBefore = nodeThis->GetPrevious();
@@ -185,7 +185,7 @@ wxRadioButton* wxGetNextButtonInGroup(wx
 
     const wxWindowList& siblings = btn->GetParent()->GetChildren();
     wxWindowList::compatibility_iterator nodeThis = siblings.Find(btn);
-    wxCHECK_MSG( nodeThis, NULL, _T("radio button not a child of its parent?") );
+    wxCHECK_MSG( nodeThis, NULL, wxT("radio button not a child of its parent?") );
 
     // Iterate over all previous siblings until we find the next radio button
     wxWindowList::compatibility_iterator nodeNext = nodeThis->GetNext();
@@ -551,7 +551,7 @@ void wxControlContainer::HandleOnWindowD
 
 bool wxControlContainer::DoSetFocus()
 {
-    wxLogTrace(TRACE_FOCUS, _T("SetFocus on wxPanel 0x%p."),
+    wxLogTrace(TRACE_FOCUS, wxT("SetFocus on wxPanel 0x%p."),
                m_winParent->GetHandle());
 
     if (m_inSetFocus)
@@ -592,7 +592,7 @@ bool wxControlContainer::DoSetFocus()
 
 void wxControlContainer::HandleOnFocus(wxFocusEvent& event)
 {
-    wxLogTrace(TRACE_FOCUS, _T("OnFocus on wxPanel 0x%p, name: %s"),
+    wxLogTrace(TRACE_FOCUS, wxT("OnFocus on wxPanel 0x%p, name: %s"),
                m_winParent->GetHandle(),
                m_winParent->GetName().c_str() );
 
@@ -613,9 +613,9 @@ bool wxControlContainer::SetFocusToChild
 
 bool wxSetFocusToChild(wxWindow *win, wxWindow **childLastFocused)
 {
-    wxCHECK_MSG( win, false, _T("wxSetFocusToChild(): invalid window") );
+    wxCHECK_MSG( win, false, wxT("wxSetFocusToChild(): invalid window") );
     wxCHECK_MSG( childLastFocused, false,
-                 _T("wxSetFocusToChild(): NULL child poonter") );
+                 wxT("wxSetFocusToChild(): NULL child poonter") );
 
     if ( *childLastFocused )
     {
@@ -623,7 +623,7 @@ bool wxSetFocusToChild(wxWindow *win, wx
         if ( (*childLastFocused)->GetParent() == win )
         {
             wxLogTrace(TRACE_FOCUS,
-                       _T("SetFocusToChild() => last child (0x%p)."),
+                       wxT("SetFocusToChild() => last child (0x%p)."),
                        (*childLastFocused)->GetHandle());
 
             // not SetFocusFromKbd(): we're restoring focus back to the old
@@ -665,7 +665,7 @@ bool wxSetFocusToChild(wxWindow *win, wx
 #endif
 
             wxLogTrace(TRACE_FOCUS,
-                       _T("SetFocusToChild() => first child (0x%p)."),
+                       wxT("SetFocusToChild() => first child (0x%p)."),
                        child->GetHandle());
 
             *childLastFocused = child;
--- src/common/fontmap.cpp-orig	2009-06-18 16:49:42.300072000 -0500
+++ src/common/fontmap.cpp	2009-06-18 16:49:48.984707000 -0500
@@ -329,7 +329,7 @@ bool wxFontMapper::GetAltForEncoding(wxF
              encName = GetEncodingName(encoding);
     if ( !facename.empty() )
     {
-        configEntry = facename + _T("_");
+        configEntry = facename + wxT("_");
     }
     configEntry += encName;
 
@@ -493,7 +493,7 @@ bool wxFontMapper::GetAltForEncoding(wxF
                                      bool interactive)
 {
     wxCHECK_MSG( encodingAlt, false,
-                    _T("wxFontEncoding::GetAltForEncoding(): NULL pointer") );
+                    wxT("wxFontEncoding::GetAltForEncoding(): NULL pointer") );
 
     wxNativeEncodingInfo info;
     if ( !GetAltForEncoding(encoding, &info, facename, interactive) )
--- src/common/file.cpp-orig	2009-06-18 16:49:54.153987000 -0500
+++ src/common/file.cpp	2009-06-18 16:49:59.764915000 -0500
@@ -349,10 +349,10 @@ bool wxFile::Flush()
 // seek
 wxFileOffset wxFile::Seek(wxFileOffset ofs, wxSeekMode mode)
 {
-    wxASSERT_MSG( IsOpened(), _T("can't seek on closed file") );
+    wxASSERT_MSG( IsOpened(), wxT("can't seek on closed file") );
     wxCHECK_MSG( ofs != wxInvalidOffset || mode != wxFromStart,
                  wxInvalidOffset,
-                 _T("invalid absolute file offset") );
+                 wxT("invalid absolute file offset") );
 
     int origin;
     switch ( mode ) {
--- src/common/wincmn.cpp-orig	2009-06-18 16:50:13.824578000 -0500
+++ src/common/wincmn.cpp	2009-06-18 16:50:22.814076000 -0500
@@ -239,14 +239,14 @@ bool wxWindowBase::CreateBase(wxWindowBa
     // if you get this assert, the correct solution is to create the controls
     // as siblings of the static box
     wxASSERT_MSG( !parent || !wxDynamicCast(parent, wxStaticBox),
-                  _T("wxStaticBox can't be used as a window parent!") );
+                  wxT("wxStaticBox can't be used as a window parent!") );
 #endif // wxUSE_STATBOX
 
     // ids are limited to 16 bits under MSW so if you care about portability,
     // it's not a good idea to use ids out of this range (and negative ids are
     // reserved for wxWidgets own usage)
     wxASSERT_MSG( id == wxID_ANY || (id >= 0 && id < 32767),
-                  _T("invalid id value") );
+                  wxT("invalid id value") );
 
     // generate a new id if the user doesn't care about it
     m_windowId = id == wxID_ANY ? NewControlId() : id;
@@ -276,7 +276,7 @@ bool wxWindowBase::CreateBase(wxWindowBa
 
 bool wxWindowBase::ToggleWindowStyle(int flag)
 {
-    wxASSERT_MSG( flag, _T("flags with 0 value can't be toggled") );
+    wxASSERT_MSG( flag, wxT("flags with 0 value can't be toggled") );
 
     bool rc;
     long style = GetWindowStyleFlag();
@@ -461,7 +461,7 @@ bool wxWindowBase::DestroyChildren()
 void wxWindowBase::DoCentre(int dir)
 {
     wxCHECK_RET( !(dir & wxCENTRE_ON_SCREEN) && GetParent(),
-                 _T("this method only implements centering child windows") );
+                 wxT("this method only implements centering child windows") );
 
     SetSize(GetRect().CentreIn(GetParent()->GetClientSize(), dir));
 }
@@ -672,7 +672,7 @@ static int wxGetMetricOrDefault(wxSystem
                 break;
 
             default:
-                wxFAIL_MSG( _T("unexpected wxGetMetricOrDefault() argument") );
+                wxFAIL_MSG( wxT("unexpected wxGetMetricOrDefault() argument") );
                 rc = 0;
         }
     }
@@ -712,7 +712,7 @@ wxSize wxWindowBase::GetWindowBorderSize
             break;
 
         default:
-            wxFAIL_MSG(_T("Unknown border style."));
+            wxFAIL_MSG(wxT("Unknown border style."));
             break;
     }
 
@@ -808,7 +808,7 @@ void wxWindowBase::DoSetWindowVariant( w
             break;
 
         default:
-            wxFAIL_MSG(_T("unexpected window variant"));
+            wxFAIL_MSG(wxT("unexpected window variant"));
             break;
     }
 
@@ -822,7 +822,7 @@ void wxWindowBase::DoSetSizeHints( int m
 {
     wxCHECK_RET( (minW == wxDefaultCoord || maxW == wxDefaultCoord || minW <= maxW) &&
                     (minH == wxDefaultCoord || maxH == wxDefaultCoord || minH <= maxH),
-                 _T("min width/height must be less than max width/height!") );
+                 wxT("min width/height must be less than max width/height!") );
 
     m_minWidth = minW;
     m_maxWidth = maxW;
@@ -942,7 +942,7 @@ void wxWindowBase::AddChild(wxWindowBase
     // this should never happen and it will lead to a crash later if it does
     // because RemoveChild() will remove only one node from the children list
     // and the other(s) one(s) will be left with dangling pointers in them
-    wxASSERT_MSG( !GetChildren().Find((wxWindow*)child), _T("AddChild() called twice") );
+    wxASSERT_MSG( !GetChildren().Find((wxWindow*)child), wxT("AddChild() called twice") );
 
     GetChildren().Append((wxWindow*)child);
     child->SetParent(this);
@@ -1028,7 +1028,7 @@ wxEvtHandler *wxWindowBase::PopEventHand
 
 bool wxWindowBase::RemoveEventHandler(wxEvtHandler *handler)
 {
-    wxCHECK_MSG( handler, false, _T("RemoveEventHandler(NULL) called") );
+    wxCHECK_MSG( handler, false, wxT("RemoveEventHandler(NULL) called") );
 
     wxEvtHandler *handlerPrev = NULL,
                  *handlerCur = GetEventHandler();
@@ -1062,7 +1062,7 @@ bool wxWindowBase::RemoveEventHandler(wx
         handlerCur = handlerNext;
     }
 
-    wxFAIL_MSG( _T("where has the event handler gone?") );
+    wxFAIL_MSG( wxT("where has the event handler gone?") );
 
     return false;
 }
@@ -1129,7 +1129,7 @@ wxColour wxWindowBase::GetBackgroundColo
 {
     if ( !m_backgroundColour.Ok() )
     {
-        wxASSERT_MSG( !m_hasBgCol, _T("we have invalid explicit bg colour?") );
+        wxASSERT_MSG( !m_hasBgCol, wxT("we have invalid explicit bg colour?") );
 
         // get our default background colour
         wxColour colBg = GetDefaultAttributes().colBg;
@@ -1153,7 +1153,7 @@ wxColour wxWindowBase::GetForegroundColo
     // logic is the same as above
     if ( !m_hasFgCol && !m_foregroundColour.Ok() )
     {
-        wxASSERT_MSG( !m_hasFgCol, _T("we have invalid explicit fg colour?") );
+        wxASSERT_MSG( !m_hasFgCol, wxT("we have invalid explicit fg colour?") );
 
         wxColour colFg = GetDefaultAttributes().colFg;
 
@@ -1213,7 +1213,7 @@ wxFont wxWindowBase::GetFont() const
     // logic is the same as in GetBackgroundColour()
     if ( !m_font.Ok() )
     {
-        wxASSERT_MSG( !m_hasFont, _T("we have invalid explicit font?") );
+        wxASSERT_MSG( !m_hasFont, wxT("we have invalid explicit font?") );
 
         wxFont font = GetDefaultAttributes().font;
         if ( !font.Ok() )
@@ -1881,7 +1881,7 @@ void wxWindowBase::SetContainingSizer(wx
     // associated wxSizerItem we're going to dereference a dangling
     // pointer; so try to detect this as early as possible
     wxASSERT_MSG( !sizer || m_containingSizer != sizer,
-                  _T("Adding a window to the same sizer twice?") );
+                  wxT("Adding a window to the same sizer twice?") );
 
     m_containingSizer = sizer;
 }
@@ -2360,10 +2360,10 @@ void wxWindowBase::OnMiddleClick( wxMous
 #if wxUSE_MSGDLG
         // don't translate these strings, they're for diagnostics purposes only
         wxString msg;
-        msg.Printf(_T("wxWidgets Library (%s port)\n")
-                   _T("Version %d.%d.%d%s%s, compiled at %s %s\n")
-                   _T("Runtime version of toolkit used is %d.%d.%s\n")
-                   _T("Copyright (c) 1995-2009 wxWidgets team"),
+        msg.Printf(wxT("wxWidgets Library (%s port)\n")
+                   wxT("Version %d.%d.%d%s%s, compiled at %s %s\n")
+                   wxT("Runtime version of toolkit used is %d.%d.%s\n")
+                   wxT("Copyright (c) 1995-2009 wxWidgets team"),
                    wxPlatformInfo::Get().GetPortIdName().c_str(),
                    wxMAJOR_VERSION,
                    wxMINOR_VERSION,
@@ -2374,7 +2374,7 @@ void wxWindowBase::OnMiddleClick( wxMous
                    wxEmptyString,
 #endif
 #ifdef __WXDEBUG__
-                   _T(" Debug build"),
+                   wxT(" Debug build"),
 #else
                    wxEmptyString,
 #endif
@@ -2383,13 +2383,13 @@ void wxWindowBase::OnMiddleClick( wxMous
                    wxPlatformInfo::Get().GetToolkitMajorVersion(),
                    wxPlatformInfo::Get().GetToolkitMinorVersion(),
 #ifdef __WXGTK__
-                   wxString::Format(_T("\nThe compile-time GTK+ version is %d.%d.%d."), GTK_MAJOR_VERSION, GTK_MINOR_VERSION, GTK_MICRO_VERSION).c_str()
+                   wxString::Format(wxT("\nThe compile-time GTK+ version is %d.%d.%d."), GTK_MAJOR_VERSION, GTK_MINOR_VERSION, GTK_MICRO_VERSION).c_str()
 #else
                    wxEmptyString
 #endif
                    );
 
-        wxMessageBox(msg, _T("wxWidgets information"),
+        wxMessageBox(msg, wxT("wxWidgets information"),
                      wxICON_INFORMATION | wxOK,
                      (wxWindow *)this);
     }
@@ -2502,9 +2502,9 @@ bool wxWindowBase::ms_winCaptureChanging
 
 void wxWindowBase::CaptureMouse()
 {
-    wxLogTrace(_T("mousecapture"), _T("CaptureMouse(%p)"), wx_static_cast(void*, this));
+    wxLogTrace(wxT("mousecapture"), wxT("CaptureMouse(%p)"), wx_static_cast(void*, this));
 
-    wxASSERT_MSG( !ms_winCaptureChanging, _T("recursive CaptureMouse call?") );
+    wxASSERT_MSG( !ms_winCaptureChanging, wxT("recursive CaptureMouse call?") );
 
     ms_winCaptureChanging = true;
 
@@ -2529,9 +2529,9 @@ void wxWindowBase::CaptureMouse()
 
 void wxWindowBase::ReleaseMouse()
 {
-    wxLogTrace(_T("mousecapture"), _T("ReleaseMouse(%p)"), wx_static_cast(void*, this));
+    wxLogTrace(wxT("mousecapture"), wxT("ReleaseMouse(%p)"), wx_static_cast(void*, this));
 
-    wxASSERT_MSG( !ms_winCaptureChanging, _T("recursive ReleaseMouse call?") );
+    wxASSERT_MSG( !ms_winCaptureChanging, wxT("recursive ReleaseMouse call?") );
 
     wxASSERT_MSG( GetCapture() == this, wxT("attempt to release mouse, but this window hasn't captured it") );
 
@@ -2553,8 +2553,8 @@ void wxWindowBase::ReleaseMouse()
 
     ms_winCaptureChanging = false;
 
-    wxLogTrace(_T("mousecapture"),
-        (const wxChar *) _T("After ReleaseMouse() mouse is captured by %p"),
+    wxLogTrace(wxT("mousecapture"),
+        (const wxChar *) wxT("After ReleaseMouse() mouse is captured by %p"),
         wx_static_cast(void*, GetCapture()));
 }
 
@@ -2568,7 +2568,7 @@ static void DoNotifyWindowAboutCaptureLo
         // correctly if it loses capture unexpectedly; see the discussion here:
         // http://sourceforge.net/tracker/index.php?func=detail&aid=1153662&group_id=9863&atid=109863
         // http://article.gmane.org/gmane.comp.lib.wxwidgets.devel/82376
-        wxFAIL_MSG( _T("window that captured the mouse didn't process wxEVT_MOUSE_CAPTURE_LOST") );
+        wxFAIL_MSG( wxT("window that captured the mouse didn't process wxEVT_MOUSE_CAPTURE_LOST") );
     }
 }
 
@@ -2673,11 +2673,11 @@ bool wxWindowBase::TryParent(wxEvent& ev
 wxWindow *wxWindowBase::DoGetSibling(MoveKind order) const
 {
     wxCHECK_MSG( GetParent(), NULL,
-                    _T("GetPrev/NextSibling() don't work for TLWs!") );
+                    wxT("GetPrev/NextSibling() don't work for TLWs!") );
 
     wxWindowList& siblings = GetParent()->GetChildren();
     wxWindowList::compatibility_iterator i = siblings.Find((wxWindow *)this);
-    wxCHECK_MSG( i, NULL, _T("window not a child of its parent?") );
+    wxCHECK_MSG( i, NULL, wxT("window not a child of its parent?") );
 
     if ( order == MoveBefore )
         i = i->GetPrevious();
@@ -2708,7 +2708,7 @@ void wxWindowBase::DoMoveInTabOrder(wxWi
 {
     // check that we're not a top level window
     wxCHECK_RET( GetParent(),
-                    _T("MoveBefore/AfterInTabOrder() don't work for TLWs!") );
+                    wxT("MoveBefore/AfterInTabOrder() don't work for TLWs!") );
 
     // detect the special case when we have nothing to do anyhow and when the
     // code below wouldn't work
@@ -2718,7 +2718,7 @@ void wxWindowBase::DoMoveInTabOrder(wxWi
     // find the target window in the siblings list
     wxWindowList& siblings = GetParent()->GetChildren();
     wxWindowList::compatibility_iterator i = siblings.Find(win);
-    wxCHECK_RET( i, _T("MoveBefore/AfterInTabOrder(): win is not a sibling") );
+    wxCHECK_RET( i, wxT("MoveBefore/AfterInTabOrder(): win is not a sibling") );
 
     // unfortunately, when wxUSE_STL == 1 DetachNode() is not implemented so we
     // can't just move the node around
@@ -2788,7 +2788,7 @@ void wxWindowBase::DragAcceptFiles(bool 
     if ( accept )
     {
         wxASSERT_MSG( !GetDropTarget(),
-                      _T("cannot use DragAcceptFiles() and SetDropTarget() together") );
+                      wxT("cannot use DragAcceptFiles() and SetDropTarget() together") );
         SetDropTarget(new wxDragAcceptFilesImplTarget(this));
     }
     else
--- src/common/tbarbase.cpp-orig	2009-06-18 16:50:28.631978000 -0500
+++ src/common/tbarbase.cpp	2009-06-18 16:50:36.831700000 -0500
@@ -68,7 +68,7 @@ bool wxToolBarToolBase::Enable(bool enab
 
 bool wxToolBarToolBase::Toggle(bool toggle)
 {
-    wxASSERT_MSG( CanBeToggled(), _T("can't toggle this tool") );
+    wxASSERT_MSG( CanBeToggled(), wxT("can't toggle this tool") );
 
     if ( m_toggled == toggle )
         return false;
@@ -159,7 +159,7 @@ wxToolBarToolBase *wxToolBarBase::Insert
                                              wxObject *clientData)
 {
     wxCHECK_MSG( pos <= GetToolsCount(), (wxToolBarToolBase *)NULL,
-                 _T("invalid position in wxToolBar::InsertTool()") );
+                 wxT("invalid position in wxToolBar::InsertTool()") );
 
     wxToolBarToolBase *tool = CreateTool(id, label, bitmap, bmpDisabled, kind,
                                          clientData, shortHelp, longHelp);
@@ -183,7 +183,7 @@ wxToolBarToolBase *
 wxToolBarBase::InsertTool(size_t pos, wxToolBarToolBase *tool)
 {
     wxCHECK_MSG( pos <= GetToolsCount(), (wxToolBarToolBase *)NULL,
-                 _T("invalid position in wxToolBar::InsertTool()") );
+                 wxT("invalid position in wxToolBar::InsertTool()") );
 
     if ( !tool || !DoInsertTool(pos, tool) )
     {
@@ -203,13 +203,13 @@ wxToolBarToolBase *wxToolBarBase::AddCon
 wxToolBarToolBase *wxToolBarBase::InsertControl(size_t pos, wxControl *control)
 {
     wxCHECK_MSG( control, (wxToolBarToolBase *)NULL,
-                 _T("toolbar: can't insert NULL control") );
+                 wxT("toolbar: can't insert NULL control") );
 
     wxCHECK_MSG( control->GetParent() == this, (wxToolBarToolBase *)NULL,
-                 _T("control must have toolbar as parent") );
+                 wxT("control must have toolbar as parent") );
 
     wxCHECK_MSG( pos <= GetToolsCount(), (wxToolBarToolBase *)NULL,
-                 _T("invalid position in wxToolBar::InsertControl()") );
+                 wxT("invalid position in wxToolBar::InsertControl()") );
 
     wxToolBarToolBase *tool = CreateTool(control);
 
@@ -236,7 +236,7 @@ wxControl *wxToolBarBase::FindControl( i
 
             if ( !control )
             {
-                wxFAIL_MSG( _T("NULL control in toolbar?") );
+                wxFAIL_MSG( wxT("NULL control in toolbar?") );
             }
             else if ( control->GetId() == id )
             {
@@ -257,7 +257,7 @@ wxToolBarToolBase *wxToolBarBase::AddSep
 wxToolBarToolBase *wxToolBarBase::InsertSeparator(size_t pos)
 {
     wxCHECK_MSG( pos <= GetToolsCount(), (wxToolBarToolBase *)NULL,
-                 _T("invalid position in wxToolBar::InsertSeparator()") );
+                 wxT("invalid position in wxToolBar::InsertSeparator()") );
 
     wxToolBarToolBase *tool = CreateTool(wxID_SEPARATOR,
                                          wxEmptyString,
@@ -310,7 +310,7 @@ wxToolBarToolBase *wxToolBarBase::Remove
 bool wxToolBarBase::DeleteToolByPos(size_t pos)
 {
     wxCHECK_MSG( pos < GetToolsCount(), false,
-                 _T("invalid position in wxToolBar::DeleteToolByPos()") );
+                 wxT("invalid position in wxToolBar::DeleteToolByPos()") );
 
     wxToolBarToolsList::compatibility_iterator node = m_tools.Item(pos);
 
@@ -371,13 +371,13 @@ wxToolBarToolBase *wxToolBarBase::FindBy
 
 void wxToolBarBase::UnToggleRadioGroup(wxToolBarToolBase *tool)
 {
-    wxCHECK_RET( tool, _T("NULL tool in wxToolBarTool::UnToggleRadioGroup") );
+    wxCHECK_RET( tool, wxT("NULL tool in wxToolBarTool::UnToggleRadioGroup") );
 
     if ( !tool->IsButton() || tool->GetKind() != wxITEM_RADIO )
         return;
 
     wxToolBarToolsList::compatibility_iterator node = m_tools.Find(tool);
-    wxCHECK_RET( node, _T("invalid tool in wxToolBarTool::UnToggleRadioGroup") );
+    wxCHECK_RET( node, wxT("invalid tool in wxToolBarTool::UnToggleRadioGroup") );
 
     wxToolBarToolsList::compatibility_iterator nodeNext = node->GetNext();
     while ( nodeNext )
@@ -508,7 +508,7 @@ void wxToolBarBase::SetToolClientData(in
 {
     wxToolBarToolBase *tool = FindById(id);
 
-    wxCHECK_RET( tool, _T("no such tool in wxToolBar::SetToolClientData") );
+    wxCHECK_RET( tool, wxT("no such tool in wxToolBar::SetToolClientData") );
 
     tool->SetClientData(clientData);
 }
@@ -532,7 +532,7 @@ int wxToolBarBase::GetToolPos(int id) co
 bool wxToolBarBase::GetToolState(int id) const
 {
     wxToolBarToolBase *tool = FindById(id);
-    wxCHECK_MSG( tool, false, _T("no such tool") );
+    wxCHECK_MSG( tool, false, wxT("no such tool") );
 
     return tool->IsToggled();
 }
@@ -540,7 +540,7 @@ bool wxToolBarBase::GetToolState(int id)
 bool wxToolBarBase::GetToolEnabled(int id) const
 {
     wxToolBarToolBase *tool = FindById(id);
-    wxCHECK_MSG( tool, false, _T("no such tool") );
+    wxCHECK_MSG( tool, false, wxT("no such tool") );
 
     return tool->IsEnabled();
 }
@@ -548,7 +548,7 @@ bool wxToolBarBase::GetToolEnabled(int i
 wxString wxToolBarBase::GetToolShortHelp(int id) const
 {
     wxToolBarToolBase *tool = FindById(id);
-    wxCHECK_MSG( tool, wxEmptyString, _T("no such tool") );
+    wxCHECK_MSG( tool, wxEmptyString, wxT("no such tool") );
 
     return tool->GetShortHelp();
 }
@@ -556,7 +556,7 @@ wxString wxToolBarBase::GetToolShortHelp
 wxString wxToolBarBase::GetToolLongHelp(int id) const
 {
     wxToolBarToolBase *tool = FindById(id);
-    wxCHECK_MSG( tool, wxEmptyString, _T("no such tool") );
+    wxCHECK_MSG( tool, wxEmptyString, wxT("no such tool") );
 
     return tool->GetLongHelp();
 }
--- src/common/stream.cpp-orig	2009-06-18 16:50:43.589796000 -0500
+++ src/common/stream.cpp	2009-06-18 16:50:54.134526000 -0500
@@ -101,7 +101,7 @@ wxStreamBuffer::wxStreamBuffer(const wxS
     // doing this has big chances to lead to a crash when the source buffer is
     // destroyed (otherwise assume the caller knows what he does)
     wxASSERT_MSG( !buffer.m_destroybuf,
-                  _T("it's a bad idea to copy this buffer") );
+                  wxT("it's a bad idea to copy this buffer") );
 
     m_buffer_start = buffer.m_buffer_start;
     m_buffer_end = buffer.m_buffer_end;
@@ -214,7 +214,7 @@ bool wxStreamBuffer::FillBuffer()
 // write the buffer contents to the stream (only for write buffers)
 bool wxStreamBuffer::FlushBuffer()
 {
-    wxCHECK_MSG( m_flushable, false, _T("can't flush this buffer") );
+    wxCHECK_MSG( m_flushable, false, wxT("can't flush this buffer") );
 
     // FIXME: what is this check for? (VZ)
     if ( m_buffer_pos == m_buffer_start )
@@ -222,7 +222,7 @@ bool wxStreamBuffer::FlushBuffer()
 
     wxOutputStream *outStream = GetOutputStream();
 
-    wxCHECK_MSG( outStream, false, _T("should have a stream in wxStreamBuffer") );
+    wxCHECK_MSG( outStream, false, wxT("should have a stream in wxStreamBuffer") );
 
     size_t current = m_buffer_pos - m_buffer_start;
     size_t count = outStream->OnSysWrite(m_buffer_start, current);
@@ -300,7 +300,7 @@ void wxStreamBuffer::PutChar(char c)
 {
     wxOutputStream *outStream = GetOutputStream();
 
-    wxCHECK_RET( outStream, _T("should have a stream in wxStreamBuffer") );
+    wxCHECK_RET( outStream, wxT("should have a stream in wxStreamBuffer") );
 
     // if we don't have buffer at all, just forward this call to the stream,
     if ( !HasBuffer() )
@@ -326,7 +326,7 @@ void wxStreamBuffer::PutChar(char c)
 char wxStreamBuffer::Peek()
 {
     wxCHECK_MSG( m_stream && HasBuffer(), 0,
-                 _T("should have the stream and the buffer in wxStreamBuffer") );
+                 wxT("should have the stream and the buffer in wxStreamBuffer") );
 
     if ( !GetDataLeft() )
     {
@@ -345,7 +345,7 @@ char wxStreamBuffer::GetChar()
 {
     wxInputStream *inStream = GetInputStream();
 
-    wxCHECK_MSG( inStream, 0, _T("should have a stream in wxStreamBuffer") );
+    wxCHECK_MSG( inStream, 0, wxT("should have a stream in wxStreamBuffer") );
 
     char c;
     if ( !HasBuffer() )
@@ -371,7 +371,7 @@ char wxStreamBuffer::GetChar()
 
 size_t wxStreamBuffer::Read(void *buffer, size_t size)
 {
-    wxASSERT_MSG( buffer, _T("Warning: Null pointer is about to be used") );
+    wxASSERT_MSG( buffer, wxT("Warning: Null pointer is about to be used") );
 
     /* Clear buffer first */
     memset(buffer, 0x00, size);
@@ -385,7 +385,7 @@ size_t wxStreamBuffer::Read(void *buffer
     {
         wxInputStream *inStream = GetInputStream();
 
-        wxCHECK_MSG( inStream, 0, _T("should have a stream in wxStreamBuffer") );
+        wxCHECK_MSG( inStream, 0, wxT("should have a stream in wxStreamBuffer") );
 
         readBytes = inStream->OnSysRead(buffer, size);
     }
@@ -430,7 +430,7 @@ size_t wxStreamBuffer::Read(void *buffer
 // this should really be called "Copy()"
 size_t wxStreamBuffer::Read(wxStreamBuffer *dbuf)
 {
-    wxCHECK_MSG( m_mode != write, 0, _T("can't read from this buffer") );
+    wxCHECK_MSG( m_mode != write, 0, wxT("can't read from this buffer") );
 
     char buf[BUF_TEMP_SIZE];
     size_t nRead,
@@ -452,7 +452,7 @@ size_t wxStreamBuffer::Read(wxStreamBuff
 
 size_t wxStreamBuffer::Write(const void *buffer, size_t size)
 {
-    wxASSERT_MSG( buffer, _T("Warning: Null pointer is about to be send") );
+    wxASSERT_MSG( buffer, wxT("Warning: Null pointer is about to be send") );
 
     if (m_stream)
     {
@@ -466,7 +466,7 @@ size_t wxStreamBuffer::Write(const void 
     {
         wxOutputStream *outStream = GetOutputStream();
 
-        wxCHECK_MSG( outStream, 0, _T("should have a stream in wxStreamBuffer") );
+        wxCHECK_MSG( outStream, 0, wxT("should have a stream in wxStreamBuffer") );
 
         // no buffer, just forward the call to the stream
         ret = outStream->OnSysWrite(buffer, size);
@@ -524,8 +524,8 @@ size_t wxStreamBuffer::Write(const void 
 
 size_t wxStreamBuffer::Write(wxStreamBuffer *sbuf)
 {
-    wxCHECK_MSG( m_mode != read, 0, _T("can't write to this buffer") );
-    wxCHECK_MSG( sbuf->m_mode != write, 0, _T("can't read from that buffer") );
+    wxCHECK_MSG( m_mode != read, 0, wxT("can't write to this buffer") );
+    wxCHECK_MSG( sbuf->m_mode != write, 0, wxT("can't read from that buffer") );
 
     char buf[BUF_TEMP_SIZE];
     size_t nWrite,
@@ -580,7 +580,7 @@ wxFileOffset wxStreamBuffer::Seek(wxFile
                 break;
 
             default:
-                wxFAIL_MSG( _T("invalid seek mode") );
+                wxFAIL_MSG( wxT("invalid seek mode") );
 
                 return wxInvalidOffset;
         }
@@ -674,7 +674,7 @@ size_t wxStreamBase::GetSize() const
         return 0;
 
     const size_t len = wx_truncate_cast(size_t, length);
-    wxASSERT_MSG( len == length + size_t(0), _T("large files not supported") );
+    wxASSERT_MSG( len == length + size_t(0), wxT("large files not supported") );
 
     return len;
 }
@@ -748,7 +748,7 @@ char *wxInputStream::AllocSpaceWBack(siz
 
 size_t wxInputStream::GetWBack(void *buf, size_t size)
 {
-    wxASSERT_MSG( buf, _T("Warning: Null pointer is about to be used") );
+    wxASSERT_MSG( buf, wxT("Warning: Null pointer is about to be used") );
 
     /* Clear buffer first */
     memset(buf, 0x00, size);
@@ -784,7 +784,7 @@ size_t wxInputStream::GetWBack(void *buf
 
 size_t wxInputStream::Ungetch(const void *buf, size_t bufsize)
 {
-    wxASSERT_MSG( buf, _T("Warning: Null pointer is about to be used in Ungetch()") );
+    wxASSERT_MSG( buf, wxT("Warning: Null pointer is about to be used in Ungetch()") );
 
     if ( m_lasterror != wxSTREAM_NO_ERROR && m_lasterror != wxSTREAM_EOF )
     {
@@ -818,7 +818,7 @@ int wxInputStream::GetC()
 
 wxInputStream& wxInputStream::Read(void *buf, size_t size)
 {
-    wxASSERT_MSG( buf, _T("Warning: Null pointer is about to be read") );
+    wxASSERT_MSG( buf, wxT("Warning: Null pointer is about to be read") );
 
     char *p = (char *)buf;
     m_lastcount = 0;
@@ -1029,7 +1029,7 @@ wxFileOffset wxCountingOutputStream::OnS
             break;
 
         default:
-            wxFAIL_MSG( _T("invalid seek mode") );
+            wxFAIL_MSG( wxT("invalid seek mode") );
             return wxInvalidOffset;
     }
 
@@ -1283,7 +1283,7 @@ wxFileOffset wxBufferedInputStream::OnSy
 
 void wxBufferedInputStream::SetInputStreamBuffer(wxStreamBuffer *buffer)
 {
-    wxCHECK_RET( buffer, _T("wxBufferedInputStream needs buffer") );
+    wxCHECK_RET( buffer, wxT("wxBufferedInputStream needs buffer") );
 
     delete m_i_streambuf;
     m_i_streambuf = buffer;
@@ -1368,7 +1368,7 @@ wxFileOffset wxBufferedOutputStream::Get
 
 void wxBufferedOutputStream::SetOutputStreamBuffer(wxStreamBuffer *buffer)
 {
-    wxCHECK_RET( buffer, _T("wxBufferedOutputStream needs buffer") );
+    wxCHECK_RET( buffer, wxT("wxBufferedOutputStream needs buffer") );
 
     delete m_o_streambuf;
     m_o_streambuf = buffer;
--- src/common/socket.cpp-orig	2009-06-18 16:50:58.642737000 -0500
+++ src/common/socket.cpp	2009-06-18 16:51:12.890090000 -0500
@@ -71,7 +71,7 @@ WX_CHECK_BUILD_OPTIONS("wxNet")
     #define PROCESS_EVENTS() wxYield()
 #endif // wxUSE_THREADS/!wxUSE_THREADS
 
-#define wxTRACE_Socket _T("wxSocket")
+#define wxTRACE_Socket wxT("wxSocket")
 
 // --------------------------------------------------------------------------
 // wxWin macros
@@ -161,7 +161,7 @@ bool wxSocketBase::Initialize()
 void wxSocketBase::Shutdown()
 {
     // we should be initialized
-    wxASSERT_MSG( m_countInit, _T("extra call to Shutdown()") );
+    wxASSERT_MSG( m_countInit, wxT("extra call to Shutdown()") );
     if ( --m_countInit == 0 )
     {
         GSocket_Cleanup();
@@ -1088,13 +1088,13 @@ wxSocketServer::wxSocketServer(const wxS
                                wxSocketFlags flags)
               : wxSocketBase(flags, wxSOCKET_SERVER)
 {
-    wxLogTrace( wxTRACE_Socket, _T("Opening wxSocketServer") );
+    wxLogTrace( wxTRACE_Socket, wxT("Opening wxSocketServer") );
 
     m_socket = GSocket_new();
 
     if (!m_socket)
     {
-        wxLogTrace( wxTRACE_Socket, _T("*** GSocket_new failed") );
+        wxLogTrace( wxTRACE_Socket, wxT("*** GSocket_new failed") );
         return;
     }
 
@@ -1111,7 +1111,7 @@ wxSocketServer::wxSocketServer(const wxS
         delete m_socket;
         m_socket = NULL;
 
-        wxLogTrace( wxTRACE_Socket, _T("*** GSocket_SetServer failed") );
+        wxLogTrace( wxTRACE_Socket, wxT("*** GSocket_SetServer failed") );
         return;
     }
 
@@ -1181,7 +1181,7 @@ bool wxSocketServer::WaitForAccept(long 
 
 bool wxSocketBase::GetOption(int level, int optname, void *optval, int *optlen)
 {
-    wxASSERT_MSG( m_socket, _T("Socket not initialised") );
+    wxASSERT_MSG( m_socket, wxT("Socket not initialised") );
 
     if (m_socket->GetSockOpt(level, optname, optval, optlen)
         != GSOCK_NOERROR)
@@ -1194,7 +1194,7 @@ bool wxSocketBase::GetOption(int level, 
 bool wxSocketBase::SetOption(int level, int optname, const void *optval,
                               int optlen)
 {
-    wxASSERT_MSG( m_socket, _T("Socket not initialised") );
+    wxASSERT_MSG( m_socket, wxT("Socket not initialised") );
 
     if (m_socket->SetSockOpt(level, optname, optval, optlen)
         != GSOCK_NOERROR)
@@ -1346,7 +1346,7 @@ wxDatagramSocket::wxDatagramSocket( cons
 
     if (!m_socket)
     {
-        wxFAIL_MSG( _T("datagram socket not new'd") );
+        wxFAIL_MSG( wxT("datagram socket not new'd") );
         return;
     }
     // Setup the socket as non connection oriented
@@ -1384,7 +1384,7 @@ wxDatagramSocket& wxDatagramSocket::Send
                                             const void* buf,
                                             wxUint32 nBytes )
 {
-    wxASSERT_MSG( m_socket, _T("Socket not initialised") );
+    wxASSERT_MSG( m_socket, wxT("Socket not initialised") );
 
     m_socket->SetPeer(addr.GetAddress());
     Write(buf, nBytes);
--- src/common/textcmn.cpp-orig	2009-06-18 16:51:20.421362000 -0500
+++ src/common/textcmn.cpp	2009-06-18 16:51:33.024250000 -0500
@@ -238,7 +238,7 @@ bool wxTextCtrlBase::SaveFile(const wxSt
 bool wxTextCtrlBase::DoSaveFile(const wxString& filename, int WXUNUSED(fileType))
 {
 #if wxUSE_FFILE
-    wxFFile file(filename, _T("w"));
+    wxFFile file(filename, wxT("w"));
     if ( file.IsOpened() && file.Write(GetValue()) )
     {
         // if it worked, save for future calls
@@ -370,32 +370,32 @@ bool wxTextCtrlBase::EmulateKeyPress(con
         case WXK_NUMPAD7:
         case WXK_NUMPAD8:
         case WXK_NUMPAD9:
-            ch = (wxChar)(_T('0') + keycode - WXK_NUMPAD0);
+            ch = (wxChar)(wxT('0') + keycode - WXK_NUMPAD0);
             break;
 
         case WXK_MULTIPLY:
         case WXK_NUMPAD_MULTIPLY:
-            ch = _T('*');
+            ch = wxT('*');
             break;
 
         case WXK_ADD:
         case WXK_NUMPAD_ADD:
-            ch = _T('+');
+            ch = wxT('+');
             break;
 
         case WXK_SUBTRACT:
         case WXK_NUMPAD_SUBTRACT:
-            ch = _T('-');
+            ch = wxT('-');
             break;
 
         case WXK_DECIMAL:
         case WXK_NUMPAD_DECIMAL:
-            ch = _T('.');
+            ch = wxT('.');
             break;
 
         case WXK_DIVIDE:
         case WXK_NUMPAD_DIVIDE:
-            ch = _T('/');
+            ch = wxT('/');
             break;
 
         case WXK_DELETE:
@@ -437,7 +437,7 @@ bool wxTextCtrlBase::EmulateKeyPress(con
             }
             else
             {
-                ch = _T('\0');
+                ch = wxT('\0');
             }
     }
 
--- src/common/toplvcmn.cpp-orig	2009-06-18 16:51:42.130383000 -0500
+++ src/common/toplvcmn.cpp	2009-06-18 16:51:46.946865000 -0500
@@ -177,7 +177,7 @@ void wxTopLevelWindowBase::DoSetSizeHint
     // X11 and generally doesn't make any sense, so don't allow it
     wxCHECK_RET( (minW == wxDefaultCoord || maxW == wxDefaultCoord || minW <= maxW) &&
                     (minH == wxDefaultCoord || maxH == wxDefaultCoord || minH <= maxH),
-                 _T("min width/height must be less than max width/height!") );
+                 wxT("min width/height must be less than max width/height!") );
 
     m_minWidth = minW;
     m_maxWidth = maxW;
--- src/common/stockitem.cpp-orig	2009-06-18 16:51:56.098891000 -0500
+++ src/common/stockitem.cpp	2009-06-18 16:52:02.862382000 -0500
@@ -163,7 +163,7 @@ wxString wxGetStockLabel(wxWindowID id, 
         STOCKITEM(wxID_ZOOM_OUT,            _("Zoom &Out"))
 
         default:
-            wxFAIL_MSG( _T("invalid stock item ID") );
+            wxFAIL_MSG( wxT("invalid stock item ID") );
             break;
     };
 
@@ -179,7 +179,7 @@ wxString wxGetStockLabel(wxWindowID id, 
     {
         wxAcceleratorEntry accel = wxGetStockAccelerator(id);
         if (accel.IsOk())
-            stockLabel << _T('\t') << accel.ToString();
+            stockLabel << wxT('\t') << accel.ToString();
     }
 #endif // wxUSE_ACCEL
 
@@ -270,7 +270,7 @@ bool wxIsStockLabel(wxWindowID id, const
     if (label == stock)
         return true;
 
-    stock.Replace(_T("&"), wxEmptyString);
+    stock.Replace(wxT("&"), wxEmptyString);
     if (label == stock)
         return true;
 
--- src/common/prntbase.cpp-orig	2009-06-18 16:52:09.391962000 -0500
+++ src/common/prntbase.cpp	2009-06-18 16:52:15.710440000 -0500
@@ -1544,8 +1544,8 @@ bool wxPrintPreviewBase::RenderPageIntoB
         }
         else
         {
-            wxLogTrace(_T("printing"),
-                       _T("high-quality preview failed, falling back to normal"));
+            wxLogTrace(wxT("printing"),
+                       wxT("high-quality preview failed, falling back to normal"));
             s_hqPreviewFailed = true; // don't bother re-trying
         }
     }
@@ -1564,7 +1564,7 @@ bool wxPrintPreviewBase::RenderPage(int 
 
     if (!m_previewCanvas)
     {
-        wxFAIL_MSG(_T("wxPrintPreviewBase::RenderPage: must use wxPrintPreviewBase::SetCanvas to let me know about the canvas!"));
+        wxFAIL_MSG(wxT("wxPrintPreviewBase::RenderPage: must use wxPrintPreviewBase::SetCanvas to let me know about the canvas!"));
         return false;
     }
 
@@ -1932,8 +1932,8 @@ long ComputeFragmentSize(long printerDep
     const long maxstep = (memAvail / perLine).GetValue();
     const long step = wxMin(height, maxstep);
 
-    wxLogTrace(_T("printing"),
-               _T("using %liMB of RAM (%li lines) for preview, %li %lipx fragments"),
+    wxLogTrace(wxT("printing"),
+               wxT("using %liMB of RAM (%li lines) for preview, %li %lipx fragments"),
                long((memAvail >> 20).GetValue()),
                maxstep,
                (height+step-1) / step,
@@ -1959,8 +1959,8 @@ static bool RenderPageFragment(wxPrintPr
     const wxRect smallRect(wxPoint(0, *nextFinalLine),
                            wxPoint(int(rect.GetRight() * scaleX),
                                    int(rect.GetBottom() * scaleY)));
-    wxLogTrace(_T("printing"),
-               _T("rendering fragment of page %i: [%i,%i,%i,%i] scaled down to [%i,%i,%i,%i]"),
+    wxLogTrace(wxT("printing"),
+               wxT("rendering fragment of page %i: [%i,%i,%i,%i] scaled down to [%i,%i,%i,%i]"),
                pageNum,
                rect.x, rect.y, rect.GetRight(), rect.GetBottom(),
                smallRect.x, smallRect.y, smallRect.GetRight(), smallRect.GetBottom()
@@ -2024,7 +2024,7 @@ static bool RenderPageIntoBitmapHQ(wxPri
                                    wxBitmap& bmp, int pageNum,
                                    int pageWidth, int pageHeight)
 {
-    wxLogTrace(_T("printing"), _T("rendering HQ preview of page %i"), pageNum);
+    wxLogTrace(wxT("printing"), wxT("rendering HQ preview of page %i"), pageNum);
 
     if ( !printerDC.IsOk() )
         return false;
@@ -2061,8 +2061,8 @@ static bool RenderPageIntoBitmapHQ(wxPri
                 // something is very wrong if we can't render even at this
                 // slow space, let's bail out and fall back to low quality
                 // preview
-                wxLogTrace(_T("printing"),
-                           _T("it seems that HQ preview doesn't work at all"));
+                wxLogTrace(wxT("printing"),
+                           wxT("it seems that HQ preview doesn't work at all"));
                 return false;
             }
 
@@ -2071,8 +2071,8 @@ static bool RenderPageIntoBitmapHQ(wxPri
             // smaller bitmap would help:
             todo.height /= 2;
 
-            wxLogTrace(_T("printing"),
-                       _T("preview of fragment failed, reducing height to %ipx"),
+            wxLogTrace(wxT("printing"),
+                       wxT("preview of fragment failed, reducing height to %ipx"),
                        todo.height);
 
             continue; // retry at the same position again
--- src/common/menucmn.cpp-orig	2009-06-18 16:52:22.990195000 -0500
+++ src/common/menucmn.cpp	2009-06-18 16:52:34.012249000 -0500
@@ -165,7 +165,7 @@ static int
     {
         // this must be a mistake, chances that this is a valid name of another
         // key are vanishingly small
-        wxLogDebug(_T("Invalid key string \"%s\""), str.c_str());
+        wxLogDebug(wxT("Invalid key string \"%s\""), str.c_str());
         return 0;
     }
 
@@ -283,7 +283,7 @@ wxAcceleratorEntry::ParseAccel(const wxS
     }
 
 
-    wxASSERT_MSG( keyCode, _T("logic error: should have key code here") );
+    wxASSERT_MSG( keyCode, wxT("logic error: should have key code here") );
 
     if ( flagsOut )
         *flagsOut = accelFlags;
@@ -486,7 +486,7 @@ wxMenuBase::~wxMenuBase()
 
 void wxMenuBase::AddSubMenu(wxMenu *submenu)
 {
-    wxCHECK_RET( submenu, _T("can't add a NULL submenu") );
+    wxCHECK_RET( submenu, wxT("can't add a NULL submenu") );
 
     submenu->SetParent((wxMenu *)this);
 }
@@ -702,7 +702,7 @@ wxMenuItem *wxMenuBase::FindChildItem(in
 wxMenuItem* wxMenuBase::FindItemByPosition(size_t position) const
 {
     wxCHECK_MSG( position < m_items.GetCount(), NULL,
-                 _T("wxMenu::FindItemByPosition(): invalid menu index") );
+                 wxT("wxMenu::FindItemByPosition(): invalid menu index") );
 
     return m_items.Item( position )->GetData();
 }
@@ -814,10 +814,10 @@ wxMenuBar* wxMenuBase::GetMenuBar() cons
 void wxMenuBase::Attach(wxMenuBarBase *menubar)
 {
     // use Detach() instead!
-    wxASSERT_MSG( menubar, _T("menu can't be attached to NULL menubar") );
+    wxASSERT_MSG( menubar, wxT("menu can't be attached to NULL menubar") );
 
     // use IsAttached() to prevent this from happening
-    wxASSERT_MSG( !m_menuBar, _T("attaching menu twice?") );
+    wxASSERT_MSG( !m_menuBar, wxT("attaching menu twice?") );
 
     m_menuBar = (wxMenuBar *)menubar;
 }
@@ -825,7 +825,7 @@ void wxMenuBase::Attach(wxMenuBarBase *m
 void wxMenuBase::Detach()
 {
     // use IsAttached() to prevent this from happening
-    wxASSERT_MSG( m_menuBar, _T("detaching unattached menu?") );
+    wxASSERT_MSG( m_menuBar, wxT("detaching unattached menu?") );
 
     m_menuBar = NULL;
 }
--- src/common/memory.cpp-orig	2009-06-18 16:52:38.957732000 -0500
+++ src/common/memory.cpp	2009-06-18 16:52:45.917824000 -0500
@@ -845,16 +845,16 @@ void wxDebugContext::OutputDumpLine(cons
     int count;
     va_list argptr;
     va_start(argptr, szFormat);
-    buf[sizeof(buf)/sizeof(wxChar)-1] = _T('\0');
+    buf[sizeof(buf)/sizeof(wxChar)-1] = wxT('\0');
 
     // keep 3 bytes for a \r\n\0
     count = wxVsnprintf(buf, sizeof(buf)/sizeof(wxChar)-3, szFormat, argptr);
 
     if ( count < 0 )
         count = sizeof(buf)/sizeof(wxChar)-3;
-    buf[count]=_T('\r');
-    buf[count+1]=_T('\n');
-    buf[count+2]=_T('\0');
+    buf[count]=wxT('\r');
+    buf[count+1]=wxT('\n');
+    buf[count+2]=wxT('\0');
 
     wxMessageOutputDebug dbgout;
     dbgout.Printf(buf);
--- src/common/object.cpp-orig	2009-06-18 16:52:52.115546000 -0500
+++ src/common/object.cpp	2009-06-18 16:53:03.587177000 -0500
@@ -234,7 +234,7 @@ void wxClassInfo::Register()
     else
     {
         // guard againt reentrance once the global has been created
-        wxASSERT_MSG(++entry == 1, _T("wxClassInfo::Register() reentrance"));
+        wxASSERT_MSG(++entry == 1, wxT("wxClassInfo::Register() reentrance"));
         classTable = sm_classTable;
     }
 
@@ -246,7 +246,7 @@ void wxClassInfo::Register()
     wxASSERT_MSG( classTable->Get(m_className) == NULL,
         wxString::Format
         (
-            _T("Class \"%s\" already in RTTI table - have you used IMPLEMENT_DYNAMIC_CLASS() multiple times or linked some object file twice)?"),
+            wxT("Class \"%s\" already in RTTI table - have you used IMPLEMENT_DYNAMIC_CLASS() multiple times or linked some object file twice)?"),
             m_className
         )
     );
@@ -343,7 +343,7 @@ void wxObject::UnRef()
 {
     if ( m_refData )
     {
-        wxASSERT_MSG( m_refData->m_count > 0, _T("invalid ref data count") );
+        wxASSERT_MSG( m_refData->m_count > 0, wxT("invalid ref data count") );
 
         if ( --m_refData->m_count == 0 )
             delete m_refData;
@@ -369,13 +369,13 @@ void wxObject::AllocExclusive()
     //else: ref count is 1, we are exclusive owners of m_refData anyhow
 
     wxASSERT_MSG( m_refData && m_refData->GetRefCount() == 1,
-                  _T("wxObject::AllocExclusive() failed.") );
+                  wxT("wxObject::AllocExclusive() failed.") );
 }
 
 wxObjectRefData *wxObject::CreateRefData() const
 {
     // if you use AllocExclusive() you must override this method
-    wxFAIL_MSG( _T("CreateRefData() must be overridden if called!") );
+    wxFAIL_MSG( wxT("CreateRefData() must be overridden if called!") );
 
     return NULL;
 }
@@ -384,7 +384,7 @@ wxObjectRefData *
 wxObject::CloneRefData(const wxObjectRefData * WXUNUSED(data)) const
 {
     // if you use AllocExclusive() you must override this method
-    wxFAIL_MSG( _T("CloneRefData() must be overridden if called!") );
+    wxFAIL_MSG( wxT("CloneRefData() must be overridden if called!") );
 
     return NULL;
 }
--- src/common/imagiff.cpp-orig	2009-06-18 16:53:10.102011000 -0500
+++ src/common/imagiff.cpp	2009-06-18 16:53:29.411272000 -0500
@@ -371,7 +371,7 @@ int wxIFFDecoder::ReadIFF()
     return wxIFF_INVFORMAT;
     }
 
-    wxLogTrace(_T("iff"), _T("IFF ILBM file recognized"));
+    wxLogTrace(wxT("iff"), wxT("IFF ILBM file recognized"));
 
     dataptr = dataptr + 4;                                // skip ID
 
@@ -437,7 +437,7 @@ int wxIFFDecoder::ReadIFF()
         }
         }
 
-        wxLogTrace(_T("iff"), _T("Read %d colors from IFF file."),
+        wxLogTrace(wxT("iff"), wxT("Read %d colors from IFF file."),
             colors);
 
         CMAPok = true;                              // got CMAP
@@ -501,8 +501,8 @@ int wxIFFDecoder::ReadIFF()
         }
         }
 
-        wxLogTrace(_T("iff"),
-            _T("LoadIFF: %s %dx%d, planes=%d (%d cols), comp=%d"),
+        wxLogTrace(wxT("iff"),
+            wxT("LoadIFF: %s %dx%d, planes=%d (%d cols), comp=%d"),
             (fmt==ILBM_NORMAL) ? "Normal ILBM" :
             (fmt==ILBM_HAM)    ? "HAM ILBM" :
             (fmt==ILBM_HAM8)   ? "HAM8 ILBM" :
@@ -512,8 +512,8 @@ int wxIFFDecoder::ReadIFF()
             1<<bmhd_bitplanes, bmhd_compression);
 
         if ((fmt==ILBM_NORMAL) || (fmt==ILBM_EHB) || (fmt==ILBM_HAM)) {
-        wxLogTrace(_T("iff"),
-            _T("Converting CMAP from normal ILBM CMAP"));
+        wxLogTrace(wxT("iff"),
+            wxT("Converting CMAP from normal ILBM CMAP"));
 
         switch(fmt) {
             case ILBM_NORMAL: colors = 1 << bmhd_bitplanes; break;
@@ -647,7 +647,7 @@ int wxIFFDecoder::ReadIFF()
         }
         }  else if ((fmt == ILBM_NORMAL) || (fmt == ILBM_EHB)) {
         if (fmt == ILBM_EHB) {
-            wxLogTrace(_T("iff"), _T("Doubling CMAP for EHB mode"));
+            wxLogTrace(wxT("iff"), wxT("Doubling CMAP for EHB mode"));
 
             for (int i=0; i<32; i++) {
             pal[3*(i + 32) + 0] = pal[3*i + 0] >> 1;
@@ -704,12 +704,12 @@ int wxIFFDecoder::ReadIFF()
         m_image->h = height;
         m_image->transparent = bmhd_transcol;
 
-        wxLogTrace(_T("iff"), _T("Loaded IFF picture %s"),
+        wxLogTrace(wxT("iff"), wxT("Loaded IFF picture %s"),
             truncated? "truncated" : "completely");
 
         return (truncated? wxIFF_TRUNCATED : wxIFF_OK);
     } else {
-        wxLogTrace(_T("iff"), _T("Skipping unknown chunk '%c%c%c%c'"),
+        wxLogTrace(wxT("iff"), wxT("Skipping unknown chunk '%c%c%c%c'"),
                 *dataptr, *(dataptr+1), *(dataptr+2), *(dataptr+3));
 
         dataptr = dataptr + 8 + chunkLen;      // skip unknown chunk
--- src/common/statbar.cpp-orig	2009-06-18 16:53:35.938552000 -0500
+++ src/common/statbar.cpp	2009-06-18 16:53:45.247093000 -0500
@@ -105,7 +105,7 @@ void wxStatusBarBase::FreeStyles()
 
 void wxStatusBarBase::SetFieldsCount(int number, const int *widths)
 {
-    wxCHECK_RET( number > 0, _T("invalid field number in SetFieldsCount") );
+    wxCHECK_RET( number > 0, wxT("invalid field number in SetFieldsCount") );
 
     bool refresh = false;
 
@@ -179,9 +179,9 @@ void wxStatusBarBase::SetFieldsCount(int
 void wxStatusBarBase::SetStatusWidths(int WXUNUSED_UNLESS_DEBUG(n),
                                       const int widths[])
 {
-    wxCHECK_RET( widths, _T("NULL pointer in SetStatusWidths") );
+    wxCHECK_RET( widths, wxT("NULL pointer in SetStatusWidths") );
 
-    wxASSERT_MSG( n == m_nFields, _T("field number mismatch") );
+    wxASSERT_MSG( n == m_nFields, wxT("field number mismatch") );
 
     if ( !m_statusWidths )
         m_statusWidths = new int[m_nFields];
@@ -198,9 +198,9 @@ void wxStatusBarBase::SetStatusWidths(in
 void wxStatusBarBase::SetStatusStyles(int WXUNUSED_UNLESS_DEBUG(n),
                                       const int styles[])
 {
-    wxCHECK_RET( styles, _T("NULL pointer in SetStatusStyles") );
+    wxCHECK_RET( styles, wxT("NULL pointer in SetStatusStyles") );
 
-    wxASSERT_MSG( n == m_nFields, _T("field number mismatch") );
+    wxASSERT_MSG( n == m_nFields, wxT("field number mismatch") );
 
     if ( !m_statusStyles )
         m_statusStyles = new int[m_nFields];
@@ -327,7 +327,7 @@ void wxStatusBarBase::PushStatusText(con
 void wxStatusBarBase::PopStatusText(int number)
 {
     wxListString *st = GetStatusStack(number);
-    wxCHECK_RET( st, _T("Unbalanced PushStatusText/PopStatusText") );
+    wxCHECK_RET( st, wxT("Unbalanced PushStatusText/PopStatusText") );
     wxListString::compatibility_iterator top = st->GetFirst();
 
     SetStatusText(*top->GetData(), number);
--- src/common/textfile.cpp-orig	2009-06-18 16:53:51.021046000 -0500
+++ src/common/textfile.cpp	2009-06-18 16:54:02.477698000 -0500
@@ -64,7 +64,7 @@ bool wxTextFile::OnOpen(const wxString &
     switch ( OpenMode )
     {
         default:
-            wxFAIL_MSG( _T("unknown open mode in wxTextFile::Open") );
+            wxFAIL_MSG( wxT("unknown open mode in wxTextFile::Open") );
             // fall through
 
         case ReadAccess :
@@ -89,7 +89,7 @@ bool wxTextFile::OnClose()
 bool wxTextFile::OnRead(const wxMBConv& conv)
 {
     // file should be opened
-    wxASSERT_MSG( m_file.IsOpened(), _T("can't read closed file") );
+    wxASSERT_MSG( m_file.IsOpened(), wxT("can't read closed file") );
 
     // read the entire file in memory: this is not the most efficient thing to
     // do but there is no good way to avoid it in Unicode build because if we
@@ -122,7 +122,7 @@ bool wxTextFile::OnRead(const wxMBConv& 
             return false;
 
         // if the file is seekable, also check that we're at its beginning
-        wxASSERT_MSG( m_file.Tell() == 0, _T("should be at start of file") );
+        wxASSERT_MSG( m_file.Tell() == 0, wxT("should be at start of file") );
     }
 
     for ( ;; )
@@ -149,7 +149,7 @@ bool wxTextFile::OnRead(const wxMBConv& 
         {
             // this shouldn't happen but don't overwrite the buffer if it does
             wxCHECK_MSG( bufPos + nRead <= bufSize, false,
-                         _T("read more than file length?") );
+                         wxT("read more than file length?") );
         }
         else // !seekable
         {
--- src/common/radiocmn.cpp-orig	2009-06-18 16:54:08.282679000 -0500
+++ src/common/radiocmn.cpp	2009-06-18 16:54:19.902892000 -0500
@@ -44,7 +44,7 @@
 
 void wxRadioBoxBase::SetMajorDim(unsigned int majorDim, long style)
 {
-    wxCHECK_RET( majorDim != 0, _T("major radiobox dimension can't be 0") );
+    wxCHECK_RET( majorDim != 0, wxT("major radiobox dimension can't be 0") );
 
     m_majorDim = majorDim;
 
@@ -125,7 +125,7 @@ int wxRadioBoxBase::GetNextItem(int item
                 break;
 
             default:
-                wxFAIL_MSG( _T("unexpected wxDirection value") );
+                wxFAIL_MSG( wxT("unexpected wxDirection value") );
                 return wxNOT_FOUND;
         }
 
@@ -158,7 +158,7 @@ int wxRadioBoxBase::GetNextItem(int item
         }
 
         wxASSERT_MSG( item < count && item >= 0,
-                      _T("logic error in wxRadioBox::GetNextItem()") );
+                      wxT("logic error in wxRadioBox::GetNextItem()") );
     }
     // we shouldn't select the non-active items, continue looking for a
     // visible and shown one unless we came back to the item we started from in
@@ -172,7 +172,7 @@ int wxRadioBoxBase::GetNextItem(int item
 
 void wxRadioBoxBase::SetItemToolTip(unsigned int item, const wxString& text)
 {
-    wxASSERT_MSG( item < GetCount(), _T("Invalid item index") );
+    wxASSERT_MSG( item < GetCount(), wxT("Invalid item index") );
 
     // extend the array to have entries for all our items on first use
     if ( !m_itemsTooltips )
@@ -247,7 +247,7 @@ wxRadioBoxBase::~wxRadioBoxBase()
 // set helptext for a particular item
 void wxRadioBoxBase::SetItemHelpText(unsigned int n, const wxString& helpText)
 {
-    wxCHECK_RET( n < GetCount(), _T("Invalid item index") );
+    wxCHECK_RET( n < GetCount(), wxT("Invalid item index") );
 
     if ( m_itemsHelpTexts.empty() )
     {
@@ -261,7 +261,7 @@ void wxRadioBoxBase::SetItemHelpText(uns
 // retrieve helptext for a particular item
 wxString wxRadioBoxBase::GetItemHelpText( unsigned int n ) const
 {
-    wxCHECK_MSG( n < GetCount(), wxEmptyString, _T("Invalid item index") );
+    wxCHECK_MSG( n < GetCount(), wxEmptyString, wxT("Invalid item index") );
 
     return m_itemsHelpTexts.empty() ? wxString() : m_itemsHelpTexts[n];
 }
--- src/common/fontcmn.cpp-orig	2009-06-18 16:54:26.033381000 -0500
+++ src/common/fontcmn.cpp	2009-06-18 16:54:33.014763000 -0500
@@ -119,7 +119,7 @@ void wxFontBase::SetDefaultEncoding(wxFo
     // GetDefaultEncoding() should return something != wxFONTENCODING_DEFAULT
     // and, besides, using this value here doesn't make any sense
     wxCHECK_RET( encoding != wxFONTENCODING_DEFAULT,
-                 _T("can't set default encoding to wxFONTENCODING_DEFAULT") );
+                 wxT("can't set default encoding to wxFONTENCODING_DEFAULT") );
 
     ms_encodingDefault = encoding;
 }
@@ -436,7 +436,7 @@ bool wxNativeFontInfo::FromString(const 
 {
     long l;
 
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     wxString token = tokenizer.GetNextToken();
     //
@@ -487,7 +487,7 @@ wxString wxNativeFontInfo::ToString() co
 {
     wxString s;
 
-    s.Printf(_T("%d;%d;%d;%d;%d;%d;%s;%d"),
+    s.Printf(wxT("%d;%d;%d;%d;%d;%d;%s;%d"),
              0,                                 // version
              pointSize,
              family,
@@ -605,7 +605,7 @@ wxString wxNativeFontInfo::ToUserString(
     switch ( GetWeight() )
     {
         default:
-            wxFAIL_MSG( _T("unknown font weight") );
+            wxFAIL_MSG( wxT("unknown font weight") );
             // fall through
 
         case wxFONTWEIGHT_NORMAL:
@@ -623,7 +623,7 @@ wxString wxNativeFontInfo::ToUserString(
     switch ( GetStyle() )
     {
         default:
-            wxFAIL_MSG( _T("unknown font style") );
+            wxFAIL_MSG( wxT("unknown font style") );
             // fall through
 
         case wxFONTSTYLE_NORMAL:
@@ -639,20 +639,20 @@ wxString wxNativeFontInfo::ToUserString(
     wxString face = GetFaceName();
     if ( !face.empty() )
     {
-        desc << _T(' ') << face;
+        desc << wxT(' ') << face;
     }
 
     int size = GetPointSize();
     if ( size != wxNORMAL_FONT->GetPointSize() )
     {
-        desc << _T(' ') << size;
+        desc << wxT(' ') << size;
     }
 
 #if wxUSE_FONTMAP
     wxFontEncoding enc = GetEncoding();
     if ( enc != wxFONTENCODING_DEFAULT && enc != wxFONTENCODING_SYSTEM )
     {
-        desc << _T(' ') << wxFontMapper::GetEncodingName(enc);
+        desc << wxT(' ') << wxFontMapper::GetEncodingName(enc);
     }
 #endif // wxUSE_FONTMAP
 
@@ -667,7 +667,7 @@ bool wxNativeFontInfo::FromUserString(co
     // parse a more or less free form string
     //
     // TODO: we should handle at least the quoted facenames
-    wxStringTokenizer tokenizer(s, _T(";, "), wxTOKEN_STRTOK);
+    wxStringTokenizer tokenizer(s, wxT(";, "), wxTOKEN_STRTOK);
 
     wxString face;
     unsigned long size;
@@ -684,21 +684,21 @@ bool wxNativeFontInfo::FromUserString(co
         token.Trim(true).Trim(false).MakeLower();
 
         // look for the known tokens
-        if ( token == _T("underlined") || token == _("underlined") )
+        if ( token == wxT("underlined") || token == _("underlined") )
         {
             SetUnderlined(true);
         }
-        else if ( token == _T("light") || token == _("light") )
+        else if ( token == wxT("light") || token == _("light") )
         {
             SetWeight(wxFONTWEIGHT_LIGHT);
             weightfound = true;
         }
-        else if ( token == _T("bold") || token == _("bold") )
+        else if ( token == wxT("bold") || token == _("bold") )
         {
             SetWeight(wxFONTWEIGHT_BOLD);
             weightfound = true;
         }
-        else if ( token == _T("italic") || token == _("italic") )
+        else if ( token == wxT("italic") || token == _("italic") )
         {
             SetStyle(wxFONTSTYLE_ITALIC);
         }
@@ -725,7 +725,7 @@ bool wxNativeFontInfo::FromUserString(co
                 // assume it is the face name
             if ( !face.empty() )
             {
-                face += _T(' ');
+                face += wxT(' ');
             }
 
             face += token;
--- src/common/image.cpp-orig	2009-06-18 16:54:37.957841000 -0500
+++ src/common/image.cpp	2009-06-18 16:54:48.586636000 -0500
@@ -207,7 +207,7 @@ bool wxImage::Create( int width, int hei
 {
     UnRef();
 
-    wxCHECK_MSG( data, false, _T("NULL data in wxImage::Create") );
+    wxCHECK_MSG( data, false, wxT("NULL data in wxImage::Create") );
 
     m_refData = new wxImageRefData();
 
@@ -224,7 +224,7 @@ bool wxImage::Create( int width, int hei
 {
     UnRef();
 
-    wxCHECK_MSG( data, false, _T("NULL data in wxImage::Create") );
+    wxCHECK_MSG( data, false, wxT("NULL data in wxImage::Create") );
 
     m_refData = new wxImageRefData();
 
@@ -2311,7 +2311,7 @@ void wxImage::AddHandler( wxImageHandler
         // may) we should probably refcount the duplicates.
         //   also an issue in InsertHandler below.
 
-        wxLogDebug( _T("Adding duplicate image handler for '%s'"),
+        wxLogDebug( wxT("Adding duplicate image handler for '%s'"),
                     handler->GetName().c_str() );
         delete handler;
     }
@@ -2327,7 +2327,7 @@ void wxImage::InsertHandler( wxImageHand
     else
     {
         // see AddHandler for additional comments.
-        wxLogDebug( _T("Inserting duplicate image handler for '%s'"),
+        wxLogDebug( wxT("Inserting duplicate image handler for '%s'"),
                     handler->GetName().c_str() );
         delete handler;
     }
@@ -2657,7 +2657,7 @@ bool wxImageHandler::CallDoCanRead(wxInp
     // restore the old position to be able to test other formats and so on
     if ( stream.SeekI(posOld) == wxInvalidOffset )
     {
-        wxLogDebug(_T("Failed to rewind the stream in wxImageHandler!"));
+        wxLogDebug(wxT("Failed to rewind the stream in wxImageHandler!"));
 
         // reading would fail anyhow as we're not at the right position
         return false;
--- src/common/imagbmp.cpp-orig	2009-06-18 16:54:59.426982000 -0500
+++ src/common/imagbmp.cpp	2009-06-18 16:55:04.556164000 -0500
@@ -83,7 +83,7 @@ bool wxBMPHandler::SaveDib(wxImage *imag
                            bool IsMask)
 
 {
-    wxCHECK_MSG( image, false, _T("invalid pointer in wxBMPHandler::SaveFile") );
+    wxCHECK_MSG( image, false, wxT("invalid pointer in wxBMPHandler::SaveFile") );
 
     if ( !image->Ok() )
     {
--- src/common/imagpng.cpp-orig	2009-06-18 16:55:10.312331000 -0500
+++ src/common/imagpng.cpp	2009-06-18 16:55:20.341241000 -0500
@@ -395,7 +395,7 @@ void CopyDataFromPNG(wxImage *image,
 
                         // must be opaque then as otherwise we shouldn't be
                         // using the mask at all
-                        wxASSERT_MSG( IsOpaque(a), _T("logic error") );
+                        wxASSERT_MSG( IsOpaque(a), wxT("logic error") );
 
                         // fall through
 
@@ -463,7 +463,7 @@ void CopyDataFromPNG(wxImage *image,
                         {
                             // must be opaque then as otherwise we shouldn't be
                             // using the mask at all
-                            wxASSERT_MSG( IsOpaque(a), _T("logic error") );
+                            wxASSERT_MSG( IsOpaque(a), wxT("logic error") );
 
                             // if we couldn't find a unique colour for the
                             // mask, we can have real pixels with the same
@@ -702,7 +702,7 @@ bool wxPNGHandler::SaveFile( wxImage *im
                             : 8;
 
     wxASSERT_MSG( iBitDepth == 8 || iBitDepth == 16,
-                    _T("PNG bit depth must be 8 or 16") );
+                    wxT("PNG bit depth must be 8 or 16") );
 
     bool bHasAlpha = image->HasAlpha();
     bool bHasMask = image->HasMask();
@@ -791,7 +791,7 @@ bool wxPNGHandler::SaveFile( wxImage *im
             switch ( iColorType )
             {
                 default:
-                    wxFAIL_MSG( _T("unknown wxPNG_TYPE_XXX") );
+                    wxFAIL_MSG( wxT("unknown wxPNG_TYPE_XXX") );
                     // fall through
 
                 case wxPNG_TYPE_COLOUR:
--- src/common/dpycmn.cpp-orig	2009-06-18 16:55:34.280568000 -0500
+++ src/common/dpycmn.cpp	2009-06-18 16:55:46.126785000 -0500
@@ -147,7 +147,7 @@ wxDisplay::~wxDisplay()
 
 /* static */ int wxDisplay::GetFromWindow(wxWindow *window)
 {
-    wxCHECK_MSG( window, wxNOT_FOUND, _T("invalid window") );
+    wxCHECK_MSG( window, wxNOT_FOUND, wxT("invalid window") );
 
     return Factory().GetFromWindow(window);
 }
@@ -158,21 +158,21 @@ wxDisplay::~wxDisplay()
 
 wxRect wxDisplay::GetGeometry() const
 {
-    wxCHECK_MSG( IsOk(), wxRect(), _T("invalid wxDisplay object") );
+    wxCHECK_MSG( IsOk(), wxRect(), wxT("invalid wxDisplay object") );
 
     return m_impl->GetGeometry();
 }
 
 wxRect wxDisplay::GetClientArea() const
 {
-    wxCHECK_MSG( IsOk(), wxRect(), _T("invalid wxDisplay object") );
+    wxCHECK_MSG( IsOk(), wxRect(), wxT("invalid wxDisplay object") );
 
     return m_impl->GetClientArea();
 }
 
 wxString wxDisplay::GetName() const
 {
-    wxCHECK_MSG( IsOk(), wxString(), _T("invalid wxDisplay object") );
+    wxCHECK_MSG( IsOk(), wxString(), wxT("invalid wxDisplay object") );
 
     return m_impl->GetName();
 }
@@ -186,21 +186,21 @@ bool wxDisplay::IsPrimary() const
 
 wxArrayVideoModes wxDisplay::GetModes(const wxVideoMode& mode) const
 {
-    wxCHECK_MSG( IsOk(), wxArrayVideoModes(), _T("invalid wxDisplay object") );
+    wxCHECK_MSG( IsOk(), wxArrayVideoModes(), wxT("invalid wxDisplay object") );
 
     return m_impl->GetModes(mode);
 }
 
 wxVideoMode wxDisplay::GetCurrentMode() const
 {
-    wxCHECK_MSG( IsOk(), wxVideoMode(), _T("invalid wxDisplay object") );
+    wxCHECK_MSG( IsOk(), wxVideoMode(), wxT("invalid wxDisplay object") );
 
     return m_impl->GetCurrentMode();
 }
 
 bool wxDisplay::ChangeMode(const wxVideoMode& mode)
 {
-    wxCHECK_MSG( IsOk(), false, _T("invalid wxDisplay object") );
+    wxCHECK_MSG( IsOk(), false, wxT("invalid wxDisplay object") );
 
     return m_impl->ChangeMode(mode);
 }
--- src/common/hash.cpp-orig	2009-06-18 16:55:50.337351000 -0500
+++ src/common/hash.cpp	2009-06-18 16:55:59.571749000 -0500
@@ -163,7 +163,7 @@ void wxHashTableLong::Destroy()
 
 void wxHashTableLong::Put(long key, long value)
 {
-    wxCHECK_RET( m_hashSize, _T("must call Create() first") );
+    wxCHECK_RET( m_hashSize, wxT("must call Create() first") );
 
     size_t slot = (size_t)abs((int)(key % (long)m_hashSize));
 
@@ -181,7 +181,7 @@ void wxHashTableLong::Put(long key, long
 
 long wxHashTableLong::Get(long key) const
 {
-    wxCHECK_MSG( m_hashSize, wxNOT_FOUND, _T("must call Create() first") );
+    wxCHECK_MSG( m_hashSize, wxNOT_FOUND, wxT("must call Create() first") );
 
     size_t slot = (size_t)abs((int)(key % (long)m_hashSize));
 
@@ -203,7 +203,7 @@ long wxHashTableLong::Get(long key) cons
 
 long wxHashTableLong::Delete(long key)
 {
-    wxCHECK_MSG( m_hashSize, wxNOT_FOUND, _T("must call Create() first") );
+    wxCHECK_MSG( m_hashSize, wxNOT_FOUND, wxT("must call Create() first") );
 
     size_t slot = (size_t)abs((int)(key % (long)m_hashSize));
 
@@ -267,7 +267,7 @@ void wxStringHashTable::Destroy()
 
 void wxStringHashTable::Put(long key, const wxString& value)
 {
-    wxCHECK_RET( m_hashSize, _T("must call Create() first") );
+    wxCHECK_RET( m_hashSize, wxT("must call Create() first") );
 
     size_t slot = (size_t)abs((int)(key % (long)m_hashSize));
 
@@ -283,7 +283,7 @@ void wxStringHashTable::Put(long key, co
 
 wxString wxStringHashTable::Get(long key, bool *wasFound) const
 {
-    wxCHECK_MSG( m_hashSize, wxEmptyString, _T("must call Create() first") );
+    wxCHECK_MSG( m_hashSize, wxEmptyString, wxT("must call Create() first") );
 
     size_t slot = (size_t)abs((int)(key % (long)m_hashSize));
 
@@ -311,7 +311,7 @@ wxString wxStringHashTable::Get(long key
 
 bool wxStringHashTable::Delete(long key) const
 {
-    wxCHECK_MSG( m_hashSize, false, _T("must call Create() first") );
+    wxCHECK_MSG( m_hashSize, false, wxT("must call Create() first") );
 
     size_t slot = (size_t)abs((int)(key % (long)m_hashSize));
 
--- src/common/sstream.cpp-orig	2009-06-18 16:56:04.310140000 -0500
+++ src/common/sstream.cpp	2009-06-18 16:56:08.918848000 -0500
@@ -50,7 +50,7 @@ wxStringInputStream::wxStringInputStream
 #endif
 {
 #if wxUSE_UNICODE
-    wxASSERT_MSG(m_buf != NULL, _T("Could not convert string to UTF8!"));
+    wxASSERT_MSG(m_buf != NULL, wxT("Could not convert string to UTF8!"));
 #endif
     m_pos = 0;
 }
@@ -93,7 +93,7 @@ wxFileOffset wxStringInputStream::OnSysS
             break;
 
         default:
-            wxFAIL_MSG( _T("invalid seek mode") );
+            wxFAIL_MSG( wxT("invalid seek mode") );
             return wxInvalidOffset;
     }
 
--- src/common/process.cpp-orig	2009-06-18 16:56:14.494451000 -0500
+++ src/common/process.cpp	2009-06-18 16:56:18.024168000 -0500
@@ -162,7 +162,7 @@ bool wxProcess::Exists(int pid)
         default:
         case wxKILL_ERROR:
         case wxKILL_BAD_SIGNAL:
-            wxFAIL_MSG( _T("unexpected wxProcess::Kill() return code") );
+            wxFAIL_MSG( wxT("unexpected wxProcess::Kill() return code") );
             // fall through
 
         case wxKILL_NO_PROCESS:
--- src/common/msgout.cpp-orig	2009-06-18 16:56:22.176780000 -0500
+++ src/common/msgout.cpp	2009-06-18 16:56:25.485492000 -0500
@@ -107,7 +107,7 @@ void wxMessageOutputBest::Printf(const w
 #ifdef __WINDOWS__
     if ( !IsInConsole() )
     {
-        ::MessageBox(NULL, out, _T("wxWidgets"), MB_ICONINFORMATION | MB_OK);
+        ::MessageBox(NULL, out, wxT("wxWidgets"), MB_ICONINFORMATION | MB_OK);
     }
     else
 #endif // __WINDOWS__/!__WINDOWS__
--- src/common/ipcbase.cpp-orig	2009-06-18 16:56:30.652312000 -0500
+++ src/common/ipcbase.cpp	2009-06-18 16:56:35.246901000 -0500
@@ -55,7 +55,7 @@ wxConnectionBase::wxConnectionBase(const
 
 {
   // copy constructor would require ref-counted pointer to buffer
-  wxFAIL_MSG( _T("Copy constructor of wxConnectionBase not implemented") );
+  wxFAIL_MSG( wxT("Copy constructor of wxConnectionBase not implemented") );
 }
 
 
--- src/common/gdicmn.cpp-orig	2009-06-18 16:56:41.232554000 -0500
+++ src/common/gdicmn.cpp	2009-06-18 16:56:49.826902000 -0500
@@ -383,7 +383,7 @@ void wxColourDatabase::AddColour(const w
 
     // ... and we also allow both grey/gray
     wxString colNameAlt = colName;
-    if ( !colNameAlt.Replace(_T("GRAY"), _T("GREY")) )
+    if ( !colNameAlt.Replace(wxT("GRAY"), wxT("GREY")) )
     {
         // but in this case it is not necessary so avoid extra search below
         colNameAlt.clear();
@@ -411,7 +411,7 @@ wxColour wxColourDatabase::Find(const wx
     wxString colName = colour;
     colName.MakeUpper();
     wxString colNameAlt = colName;
-    if ( !colNameAlt.Replace(_T("GRAY"), _T("GREY")) )
+    if ( !colNameAlt.Replace(wxT("GRAY"), wxT("GREY")) )
         colNameAlt.clear();
 
     wxStringToColourHashMap::iterator it = m_map->find(colName);
--- src/common/timercmn.cpp-orig	2009-06-18 16:56:55.360281000 -0500
+++ src/common/timercmn.cpp	2009-06-18 16:57:01.777953000 -0500
@@ -50,7 +50,7 @@ void wxTimerBase::Notify()
 {
     // the base class version generates an event if it has owner - which it
     // should because otherwise nobody can process timer events
-    wxCHECK_RET( m_owner, _T("wxTimer::Notify() should be overridden.") );
+    wxCHECK_RET( m_owner, wxT("wxTimer::Notify() should be overridden.") );
 
     wxTimerEvent event(m_idTimer, m_milli);
     event.SetEventObject(this);
@@ -63,7 +63,7 @@ bool wxTimerBase::Start(int milliseconds
     // let the caller know about it
 #if wxUSE_THREADS
     wxASSERT_MSG( wxThread::IsMain(),
-                  _T("timer can only be started from the main thread") );
+                  wxT("timer can only be started from the main thread") );
 #endif // wxUSE_THREADS
 
     if ( IsRunning() )
--- src/common/init.cpp-orig	2009-06-18 16:57:05.885057000 -0500
+++ src/common/init.cpp	2009-06-18 16:57:09.620806000 -0500
@@ -62,7 +62,7 @@ class wxDummyConsoleApp : public wxAppCo
 public:
     wxDummyConsoleApp() { }
 
-    virtual int OnRun() { wxFAIL_MSG( _T("unreachable code") ); return 0; }
+    virtual int OnRun() { wxFAIL_MSG( wxT("unreachable code") ); return 0; }
 
     DECLARE_NO_COPY_CLASS(wxDummyConsoleApp)
 };
--- src/common/module.cpp-orig	2009-06-18 16:57:15.619456000 -0500
+++ src/common/module.cpp	2009-06-18 16:57:22.217806000 -0500
@@ -26,7 +26,7 @@
 
 #include "wx/listimpl.cpp"
 
-#define TRACE_MODULE _T("module")
+#define TRACE_MODULE wxT("module")
 
 WX_DEFINE_LIST(wxModuleList)
 
@@ -191,7 +191,7 @@ void wxModule::DoCleanUpModules(const wx
         wxModule * module = node->GetData();
 
         wxASSERT_MSG( module->m_state == State_Initialized,
-                        _T("not initialized module being cleaned up") );
+                        wxT("not initialized module being cleaned up") );
 
         module->Exit();
         module->m_state = State_Registered;
--- src/common/list.cpp-orig	2009-06-18 16:57:24.850715000 -0500
+++ src/common/list.cpp	2009-06-18 16:57:28.488295000 -0500
@@ -200,7 +200,7 @@ void wxListBase::DoCopy(const wxListBase
             }
     }
 
-    wxASSERT_MSG( m_count == list.m_count, _T("logic error in wxList::DoCopy") );
+    wxASSERT_MSG( m_count == list.m_count, wxT("logic error in wxList::DoCopy") );
 }
 
 wxListBase::~wxListBase()
--- src/common/fontmgrcmn.cpp-orig	2009-06-18 16:57:39.689231000 -0500
+++ src/common/fontmgrcmn.cpp	2009-06-18 16:57:49.830114000 -0500
@@ -69,7 +69,7 @@ void wxFontFaceBase::Release()
 
 wxFontInstance *wxFontFaceBase::GetFontInstance(float ptSize, bool aa)
 {
-    wxASSERT_MSG( m_refCnt > 0, _T("font library not loaded!") );
+    wxASSERT_MSG( m_refCnt > 0, wxT("font library not loaded!") );
 
     for ( wxFontInstanceList::const_iterator i = m_instances->begin();
           i != m_instances->end(); ++i )
@@ -103,7 +103,7 @@ wxFontFace *wxFontBundleBase::GetFace(Fa
 {
     wxFontFace *f = m_faces[type];
 
-    wxCHECK_MSG( f, NULL, _T("no such face in font bundle") );
+    wxCHECK_MSG( f, NULL, wxT("no such face in font bundle") );
 
     f->Acquire();
 
@@ -114,7 +114,7 @@ wxFontFace *
 wxFontBundleBase::GetFaceForFont(const wxFontMgrFontRefData& font) const
 {
     wxASSERT_MSG( font.GetFaceName().empty() || font.GetFaceName() == GetName(),
-                  _T("calling GetFaceForFont for incompatible font") );
+                  wxT("calling GetFaceForFont for incompatible font") );
 
     int type = FaceType_Regular;
 
@@ -138,7 +138,7 @@ wxFontBundleBase::GetFaceForFont(const w
                 return GetFace((FaceType)i);
         }
 
-        wxFAIL_MSG( _T("no face") );
+        wxFAIL_MSG( wxT("no face") );
         return NULL;
     }
 
--- src/common/hashmap.cpp-orig	2009-06-18 16:57:55.480338000 -0500
+++ src/common/hashmap.cpp	2009-06-18 16:58:00.439176000 -0500
@@ -80,7 +80,7 @@ unsigned long _wxHashTableBase2::GetNext
     }
 
     /* someone might try to alloc a 2^32-element hash table */
-    wxFAIL_MSG( _T("hash table too big?") );
+    wxFAIL_MSG( wxT("hash table too big?") );
 
     /* quiet warning */
     return 0;
--- src/common/fldlgcmn.cpp-orig	2009-06-18 16:58:09.223453000 -0500
+++ src/common/fldlgcmn.cpp	2009-06-18 16:58:18.716550000 -0500
@@ -63,14 +63,14 @@ bool wxFileDialogBase::Create(wxWindow *
 
     // check that the styles are not contradictory
     wxASSERT_MSG( !(HasFdFlag(wxFD_SAVE) && HasFdFlag(wxFD_OPEN)),
-                  _T("can't specify both wxFD_SAVE and wxFD_OPEN at once") );
+                  wxT("can't specify both wxFD_SAVE and wxFD_OPEN at once") );
 
     wxASSERT_MSG( !HasFdFlag(wxFD_SAVE) ||
                     (!HasFdFlag(wxFD_MULTIPLE) && !HasFdFlag(wxFD_FILE_MUST_EXIST)),
-                   _T("wxFD_MULTIPLE or wxFD_FILE_MUST_EXIST can't be used with wxFD_SAVE" ) );
+                   wxT("wxFD_MULTIPLE or wxFD_FILE_MUST_EXIST can't be used with wxFD_SAVE" ) );
 
     wxASSERT_MSG( !HasFdFlag(wxFD_OPEN) || !HasFdFlag(wxFD_OVERWRITE_PROMPT),
-                  _T("wxFD_OVERWRITE_PROMPT can't be used with wxFD_OPEN") );
+                  wxT("wxFD_OVERWRITE_PROMPT can't be used with wxFD_OPEN") );
 
     if ( wildCard.empty() || wildCard == wxFileSelectorDefaultWildcardStr )
     {
@@ -83,7 +83,7 @@ bool wxFileDialogBase::Create(wxWindow *
         // convert m_wildCard from "*.bar" to "bar files (*.bar)|*.bar"
         if ( m_wildCard.Find(wxT('|')) == wxNOT_FOUND )
         {
-            wxString::size_type nDot = m_wildCard.find(_T("*."));
+            wxString::size_type nDot = m_wildCard.find(wxT("*."));
             if ( nDot != wxString::npos )
                 nDot++;
             else
--- src/common/docview.cpp-orig	2009-06-18 16:58:24.511324000 -0500
+++ src/common/docview.cpp	2009-06-18 16:58:35.503536000 -0500
@@ -2197,7 +2197,7 @@ void wxFileHistory::AddFileToHistory(con
             }
 
             // we need to quote '&' characters which are used for mnemonics
-            pathInMenu.Replace(_T("&"), _T("&&"));
+            pathInMenu.Replace(wxT("&"), wxT("&&"));
             wxString buf;
             buf.Printf(s_MRUEntryFormat, i + 1, pathInMenu.c_str());
             wxList::compatibility_iterator node = m_fileMenus.GetFirst();
@@ -2384,7 +2384,7 @@ void wxFileHistory::AddFilesToMenu(wxMen
 
 bool wxTransferFileToStream(const wxString& filename, wxSTD ostream& stream)
 {
-    wxFFile file(filename, _T("rb"));
+    wxFFile file(filename, wxT("rb"));
     if ( !file.IsOpened() )
         return false;
 
@@ -2408,7 +2408,7 @@ bool wxTransferFileToStream(const wxStri
 
 bool wxTransferStreamToFile(wxSTD istream& stream, const wxString& filename)
 {
-    wxFFile file(filename, _T("wb"));
+    wxFFile file(filename, wxT("wb"));
     if ( !file.IsOpened() )
         return false;
 
@@ -2431,7 +2431,7 @@ bool wxTransferStreamToFile(wxSTD istrea
 
 bool wxTransferFileToStream(const wxString& filename, wxOutputStream& stream)
 {
-    wxFFile file(filename, _T("rb"));
+    wxFFile file(filename, wxT("rb"));
     if ( !file.IsOpened() )
         return false;
 
@@ -2455,7 +2455,7 @@ bool wxTransferFileToStream(const wxStri
 
 bool wxTransferStreamToFile(wxInputStream& stream, const wxString& filename)
 {
-    wxFFile file(filename, _T("wb"));
+    wxFFile file(filename, wxT("wb"));
     if ( !file.IsOpened() )
         return false;
 
--- src/common/imagtiff.cpp-orig	2009-06-18 16:58:43.391688000 -0500
+++ src/common/imagtiff.cpp	2009-06-18 16:58:47.886683000 -0500
@@ -59,7 +59,7 @@ static toff_t wxFileOffsetToTIFF(wxFileO
 
     toff_t tofs = wx_truncate_cast(toff_t, ofs);
     wxCHECK_MSG( (wxFileOffset)tofs == ofs, (toff_t)-1,
-                    _T("TIFF library doesn't support large files") );
+                    wxT("TIFF library doesn't support large files") );
 
     return tofs;
 }
--- src/common/db.cpp-orig	2009-06-18 16:58:52.177003000 -0500
+++ src/common/db.cpp	2009-06-18 16:59:07.992457000 -0500
@@ -2481,7 +2481,7 @@ int wxDb::GetKeyFields(const wxString &t
             GetData( 5, SQL_C_SSHORT, &iKeySeq,     0,                         &cb);
             GetData( 7, SQL_C_WXCHAR,  szFkTable,   DB_MAX_TABLE_NAME_LEN+1,   &cb);
             GetData( 8, SQL_C_WXCHAR,  szFkCol,     DB_MAX_COLUMN_NAME_LEN+1,  &cb);
-            tempStr << _T('[') << szFkTable << _T(']');  // [ ] in case there is a blank in the Table name
+            tempStr << wxT('[') << szFkTable << wxT(']');  // [ ] in case there is a blank in the Table name
         }  // if
     }  // while
 
@@ -3780,10 +3780,10 @@ const wxString wxDb::SQLTableName(const 
     wxString TableName;
 
     if (Dbms() == dbmsACCESS)
-        TableName = _T("\"");
+        TableName = wxT("\"");
     TableName += tableName;
     if (Dbms() == dbmsACCESS)
-        TableName += _T("\"");
+        TableName += wxT("\"");
 
     return TableName;
 }  // wxDb::SQLTableName()
@@ -3794,10 +3794,10 @@ const wxString wxDb::SQLColumnName(const
     wxString ColName;
 
     if (Dbms() == dbmsACCESS)
-        ColName = _T("\"");
+        ColName = wxT("\"");
     ColName += colName;
     if (Dbms() == dbmsACCESS)
-        ColName += _T("\"");
+        ColName += wxT("\"");
 
     return ColName;
 }  // wxDb::SQLColumnName()
@@ -4047,10 +4047,10 @@ bool wxDb::ModifyColumn(const wxString &
     switch (Dbms())
     {
         case dbmsORACLE :
-            alterSlashModify = _T("MODIFY");
+            alterSlashModify = wxT("MODIFY");
             break;
         case dbmsMS_SQL_SERVER :
-            alterSlashModify = _T("ALTER COLUMN");
+            alterSlashModify = wxT("ALTER COLUMN");
             break;
         case dbmsUNIDENTIFIED :
             return false;
@@ -4062,7 +4062,7 @@ bool wxDb::ModifyColumn(const wxString &
         case dbmsDBASE :
         case dbmsXBASE_SEQUITER :
         default :
-            alterSlashModify = _T("MODIFY");
+            alterSlashModify = wxT("MODIFY");
             break;
     }
 
@@ -4080,7 +4080,7 @@ bool wxDb::ModifyColumn(const wxString &
 
     // For varchars only, append the size of the column
     if (dataType == DB_DATA_TYPE_VARCHAR &&
-        (Dbms() != dbmsMY_SQL || dataTypeName != _T("text")))
+        (Dbms() != dbmsMY_SQL || dataTypeName != wxT("text")))
     {
         wxString s;
         s.Printf(wxT("(%lu)"), columnLength);
--- src/common/dbgrid.cpp-orig	2009-06-18 16:59:14.045703000 -0500
+++ src/common/dbgrid.cpp	2009-06-18 16:59:36.918142000 -0500
@@ -265,7 +265,7 @@ wxString wxDbGridTableBase::GetTypeName(
         {
             if (m_data->GetNumberOfColumns() <= m_ColInfo[col].DbCol)
             {
-                wxFAIL_MSG (_T("You can not use wxGRID_VALUE_DBAUTO for virtual columns"));
+                wxFAIL_MSG (wxT("You can not use wxGRID_VALUE_DBAUTO for virtual columns"));
             }
             switch(m_data->GetColDefs()[(m_ColInfo[col].DbCol)].SqlCtype)
             {
@@ -303,7 +303,7 @@ wxString wxDbGridTableBase::GetTypeName(
             return m_ColInfo[col].wxtypename;
         }
     }
-    wxFAIL_MSG (_T("unknown column"));
+    wxFAIL_MSG (wxT("unknown column"));
     return wxString();
 }
 
@@ -433,7 +433,7 @@ long wxDbGridTableBase::GetValueAsLong(i
 
     if (m_data->GetNumberOfColumns() <= m_ColInfo[col].DbCol)
     {
-        wxFAIL_MSG (_T("You can not use GetValueAsLong for virtual columns"));
+        wxFAIL_MSG (wxT("You can not use GetValueAsLong for virtual columns"));
         return 0;
     }
     int sqltype = m_data->GetColDefs()[(m_ColInfo[col].DbCol)].SqlCtype;
@@ -445,7 +445,7 @@ long wxDbGridTableBase::GetValueAsLong(i
         wxVariant val = m_data->GetColumn(m_ColInfo[col].DbCol);
         return val.GetLong();
     }
-    wxFAIL_MSG (_T("unknown column, "));
+    wxFAIL_MSG (wxT("unknown column, "));
     return 0;
 }
 
@@ -456,7 +456,7 @@ double wxDbGridTableBase::GetValueAsDoub
 
     if (m_data->GetNumberOfColumns() <= m_ColInfo[col].DbCol)
     {
-        wxFAIL_MSG (_T("You can not use GetValueAsDouble for virtual columns"));
+        wxFAIL_MSG (wxT("You can not use GetValueAsDouble for virtual columns"));
         return 0.0;
     }
     int sqltype = m_data->GetColDefs()[(m_ColInfo[col].DbCol)].SqlCtype;
@@ -470,7 +470,7 @@ double wxDbGridTableBase::GetValueAsDoub
         wxVariant val = m_data->GetColumn(m_ColInfo[col].DbCol);
         return val.GetDouble();
     }
-    wxFAIL_MSG (_T("unknown column"));
+    wxFAIL_MSG (wxT("unknown column"));
     return 0.0;
 }
 
@@ -481,7 +481,7 @@ bool wxDbGridTableBase::GetValueAsBool(i
 
     if (m_data->GetNumberOfColumns() <= m_ColInfo[col].DbCol)
     {
-        wxFAIL_MSG (_T("You can not use GetValueAsBool for virtual columns"));
+        wxFAIL_MSG (wxT("You can not use GetValueAsBool for virtual columns"));
         return 0;
     }
     int sqltype = m_data->GetColDefs()[(m_ColInfo[col].DbCol)].SqlCtype;
@@ -493,7 +493,7 @@ bool wxDbGridTableBase::GetValueAsBool(i
         wxVariant val = m_data->GetColumn(m_ColInfo[col].DbCol);
         return val.GetBool();
     }
-    wxFAIL_MSG (_T("unknown column, "));
+    wxFAIL_MSG (wxT("unknown column, "));
     return 0;
 }
 
@@ -504,7 +504,7 @@ void* wxDbGridTableBase::GetValueAsCusto
 
     if (m_data->GetNumberOfColumns() <= m_ColInfo[col].DbCol)
     {
-        wxFAIL_MSG (_T("You can not use GetValueAsCustom for virtual columns"));
+        wxFAIL_MSG (wxT("You can not use GetValueAsCustom for virtual columns"));
         return NULL;
     }
     if (m_data->IsColNull((UWORD)m_ColInfo[col].DbCol))
@@ -523,7 +523,7 @@ void* wxDbGridTableBase::GetValueAsCusto
             return new wxDateTime(val.GetDateTime());
         }
     }
-    wxFAIL_MSG (_T("unknown column data type "));
+    wxFAIL_MSG (wxT("unknown column data type "));
     return NULL;
 }
 
@@ -535,7 +535,7 @@ void wxDbGridTableBase::SetValueAsCustom
 
     if (m_data->GetNumberOfColumns() <= m_ColInfo[col].DbCol)
     {
-        wxFAIL_MSG (_T("You can not use SetValueAsCustom for virtual columns"));
+        wxFAIL_MSG (wxT("You can not use SetValueAsCustom for virtual columns"));
         return;
     }
 
@@ -551,7 +551,7 @@ void wxDbGridTableBase::SetValueAsCustom
             wxDateTime *date = (wxDateTime *)value;
             if (!date)
             {
-                wxFAIL_MSG (_T("Failed to convert data"));
+                wxFAIL_MSG (wxT("Failed to convert data"));
                 return;
             }
             wxVariant val(date);
@@ -559,7 +559,7 @@ void wxDbGridTableBase::SetValueAsCustom
             m_data->SetColumn(m_ColInfo[col].DbCol,val);
         }
     }
-    wxFAIL_MSG (_T("unknown column data type"));
+    wxFAIL_MSG (wxT("unknown column data type"));
     return ;
 }
 
@@ -570,7 +570,7 @@ wxString wxDbGridTableBase::GetColLabelV
     {
         return m_ColInfo[col].Title;
     }
-    wxFAIL_MSG (_T("unknown column"));
+    wxFAIL_MSG (wxT("unknown column"));
     return wxString();
 }
 
@@ -680,7 +680,7 @@ void wxDbGridTableBase::ValidateRow(int 
         m_data->SetKey(k);
         if (!m_data->QueryOnKeyFields())
         {
-            wxDbLogExtendedErrorMsg(_T("ODBC error during Query()\n\n"), m_data->GetDb(),__TFILE__,__LINE__);
+            wxDbLogExtendedErrorMsg(wxT("ODBC error during Query()\n\n"), m_data->GetDb(),__TFILE__,__LINE__);
         }
 
         m_data->GetNext();
--- src/common/artprov.cpp-orig	2009-06-18 16:59:44.545829000 -0500
+++ src/common/artprov.cpp	2009-06-18 16:59:55.631911000 -0500
@@ -146,8 +146,8 @@ wxArtProvider::~wxArtProvider()
 
 /*static*/ bool wxArtProvider::Pop()
 {
-    wxCHECK_MSG( sm_providers, false, _T("no wxArtProvider exists") );
-    wxCHECK_MSG( !sm_providers->empty(), false, _T("wxArtProviders stack is empty") );
+    wxCHECK_MSG( sm_providers, false, wxT("no wxArtProvider exists") );
+    wxCHECK_MSG( !sm_providers->empty(), false, wxT("wxArtProviders stack is empty") );
 
     delete sm_providers->GetFirst()->GetData();
     sm_cache->Clear();
@@ -156,7 +156,7 @@ wxArtProvider::~wxArtProvider()
 
 /*static*/ bool wxArtProvider::Remove(wxArtProvider *provider)
 {
-    wxCHECK_MSG( sm_providers, false, _T("no wxArtProvider exists") );
+    wxCHECK_MSG( sm_providers, false, wxT("no wxArtProvider exists") );
 
     if ( sm_providers->DeleteObject(provider) )
     {
@@ -199,9 +199,9 @@ wxArtProvider::~wxArtProvider()
                                              const wxSize& size)
 {
     // safety-check against writing client,id,size instead of id,client,size:
-    wxASSERT_MSG( client.Last() == _T('C'), _T("invalid 'client' parameter") );
+    wxASSERT_MSG( client.Last() == wxT('C'), wxT("invalid 'client' parameter") );
 
-    wxCHECK_MSG( sm_providers, wxNullBitmap, _T("no wxArtProvider exists") );
+    wxCHECK_MSG( sm_providers, wxNullBitmap, wxT("no wxArtProvider exists") );
 
     wxString hashId = wxArtProviderCache::ConstructHashID(id, client, size);
 
@@ -237,7 +237,7 @@ wxArtProvider::~wxArtProvider()
                                          const wxArtClient& client,
                                          const wxSize& size)
 {
-    wxCHECK_MSG( sm_providers, wxNullIcon, _T("no wxArtProvider exists") );
+    wxCHECK_MSG( sm_providers, wxNullIcon, wxT("no wxArtProvider exists") );
 
     wxBitmap bmp = GetBitmap(id, client, size);
     if ( !bmp.Ok() )
--- src/common/appcmn.cpp-orig	2009-06-18 17:00:02.972012000 -0500
+++ src/common/appcmn.cpp	2009-06-18 17:00:11.044698000 -0500
@@ -211,8 +211,8 @@ wxLayoutDirection wxAppBase::GetLayoutDi
 // GUI-specific command line options handling
 // ----------------------------------------------------------------------------
 
-#define OPTION_THEME   _T("theme")
-#define OPTION_MODE    _T("mode")
+#define OPTION_THEME   wxT("theme")
+#define OPTION_MODE    wxT("mode")
 
 void wxAppBase::OnInitCmdLine(wxCmdLineParser& parser)
 {
@@ -285,7 +285,7 @@ bool wxAppBase::OnCmdLineParsed(wxCmdLin
     if ( parser.Found(OPTION_MODE, &modeDesc) )
     {
         unsigned w, h, bpp;
-        if ( wxSscanf(modeDesc.c_str(), _T("%ux%u-%u"), &w, &h, &bpp) != 3 )
+        if ( wxSscanf(modeDesc.c_str(), wxT("%ux%u-%u"), &w, &h, &bpp) != 3 )
         {
             wxLogError(_("Invalid display mode specification '%s'."), modeDesc.c_str());
             return false;
@@ -585,7 +585,7 @@ bool wxGUIAppTraitsBase::ShowAssertDialo
 
     const wxString stackTrace = GetAssertStackTrace();
     if ( !stackTrace.empty() )
-        msgDlg << _T("\n\nCall stack:\n") << stackTrace;
+        msgDlg << wxT("\n\nCall stack:\n") << stackTrace;
 #endif // wxUSE_STACKWALKER
 
     // this message is intentionally not translated -- it is for
--- src/common/popupcmn.cpp-orig	2009-06-18 17:00:17.299310000 -0500
+++ src/common/popupcmn.cpp	2009-06-18 17:00:22.154405000 -0500
@@ -533,7 +533,7 @@ void wxPopupWindowHandler::OnLeftDown(wx
 
         default:
             // forgot to update the switch after adding a new hit test code?
-            wxFAIL_MSG( _T("unexpected HitTest() return value") );
+            wxFAIL_MSG( wxT("unexpected HitTest() return value") );
             // fall through
 
         case wxHT_WINDOW_CORNER:
--- src/common/filepickercmn.cpp-orig	2009-06-18 17:00:30.918758000 -0500
+++ src/common/filepickercmn.cpp	2009-06-18 17:00:40.414927000 -0500
@@ -74,13 +74,13 @@ bool wxFileDirPickerCtrlBase::CreateBase
 
     // check that the styles are not contradictory
     wxASSERT_MSG( !(HasFlag(wxFLP_SAVE) && HasFlag(wxFLP_OPEN)),
-                  _T("can't specify both wxFLP_SAVE and wxFLP_OPEN at once") );
+                  wxT("can't specify both wxFLP_SAVE and wxFLP_OPEN at once") );
 
     wxASSERT_MSG( !HasFlag(wxFLP_SAVE) || !HasFlag(wxFLP_FILE_MUST_EXIST),
-                   _T("wxFLP_FILE_MUST_EXIST can't be used with wxFLP_SAVE" ) );
+                   wxT("wxFLP_FILE_MUST_EXIST can't be used with wxFLP_SAVE" ) );
 
     wxASSERT_MSG( !HasFlag(wxFLP_OPEN) || !HasFlag(wxFLP_OVERWRITE_PROMPT),
-                  _T("wxFLP_OVERWRITE_PROMPT can't be used with wxFLP_OPEN") );
+                  wxT("wxFLP_OVERWRITE_PROMPT can't be used with wxFLP_OPEN") );
 
     // create a wxFilePickerWidget or a wxDirPickerWidget...
     m_pickerIface = CreatePicker(this, path, message, wildcard);
--- src/common/bookctrl.cpp-orig	2009-06-18 17:00:46.060760000 -0500
+++ src/common/bookctrl.cpp	2009-06-18 17:00:56.043706000 -0500
@@ -183,7 +183,7 @@ wxRect wxBookCtrlBase::GetPageRect() con
     switch ( GetWindowStyle() & wxBK_ALIGN_MASK )
     {
         default:
-            wxFAIL_MSG( _T("unexpected alignment") );
+            wxFAIL_MSG( wxT("unexpected alignment") );
             // fall through
 
         case wxBK_TOP:
@@ -242,7 +242,7 @@ void wxBookCtrlBase::DoSize()
         switch ( GetWindowStyle() & wxBK_ALIGN_MASK )
         {
             default:
-                wxFAIL_MSG( _T("unexpected alignment") );
+                wxFAIL_MSG( wxT("unexpected alignment") );
                 // fall through
 
             case wxBK_TOP:
@@ -272,7 +272,7 @@ void wxBookCtrlBase::DoSize()
         if ( !page )
         {
             wxASSERT_MSG( AllowNullPage(),
-                _T("Null page in a control that does not allow null pages?") );
+                wxT("Null page in a control that does not allow null pages?") );
             continue;
         }
 
@@ -386,9 +386,9 @@ wxBookCtrlBase::InsertPage(size_t nPage,
                            int WXUNUSED(imageId))
 {
     wxCHECK_MSG( page || AllowNullPage(), false,
-                 _T("NULL page in wxBookCtrlBase::InsertPage()") );
+                 wxT("NULL page in wxBookCtrlBase::InsertPage()") );
     wxCHECK_MSG( nPage <= m_pages.size(), false,
-                 _T("invalid page index in wxBookCtrlBase::InsertPage()") );
+                 wxT("invalid page index in wxBookCtrlBase::InsertPage()") );
 
     m_pages.Insert(page, nPage);
     if ( page )
@@ -414,7 +414,7 @@ bool wxBookCtrlBase::DeletePage(size_t n
 wxWindow *wxBookCtrlBase::DoRemovePage(size_t nPage)
 {
     wxCHECK_MSG( nPage < m_pages.size(), NULL,
-                 _T("invalid page index in wxBookCtrlBase::DoRemovePage()") );
+                 wxT("invalid page index in wxBookCtrlBase::DoRemovePage()") );
 
     wxWindow *pageRemoved = m_pages[nPage];
     m_pages.RemoveAt(nPage);
--- src/common/evtloopcmn.cpp-orig	2009-06-18 17:01:04.351652000 -0500
+++ src/common/evtloopcmn.cpp	2009-06-18 17:01:09.825382000 -0500
@@ -65,7 +65,7 @@ wxEventLoopManual::wxEventLoopManual()
 int wxEventLoopManual::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     // ProcessIdle() and Dispatch() below may throw so the code here should
     // be exception-safe, hence we must use local objects for all actions we
@@ -151,7 +151,7 @@ int wxEventLoopManual::Run()
 
 void wxEventLoopManual::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_exitcode = rc;
     m_shouldExit = true;
--- src/common/dlgcmn.cpp-orig	2009-06-18 17:01:15.122010000 -0500
+++ src/common/dlgcmn.cpp	2009-06-18 17:01:26.508484000 -0500
@@ -143,16 +143,16 @@ void wxTextWrapper::Wrap(wxWindow *win, 
             lineStart = p;
         }
 
-        if ( *p == _T('\n') || *p == _T('\0') )
+        if ( *p == wxT('\n') || *p == wxT('\0') )
         {
             DoOutputLine(line);
 
-            if ( *p == _T('\0') )
+            if ( *p == wxT('\0') )
                 break;
         }
         else // not EOL
         {
-            if ( *p == _T(' ') )
+            if ( *p == wxT(' ') )
                 lastSpace = p;
 
             line += *p;
@@ -231,7 +231,7 @@ wxSizer *wxDialogBase::CreateTextSizer(c
     // the static messages created by CreateTextSizer() (used by wxMessageBox,
     // for example), we don't want this special meaning, so we need to quote it
     wxString text(message);
-    text.Replace(_T("&"), _T("&&"));
+    text.Replace(wxT("&"), wxT("&&"));
 
     wxTextSizerWrapper wrapper(this);
 
@@ -256,7 +256,7 @@ protected:
 
     virtual void OnNewLine()
     {
-        m_text += _T('\n');
+        m_text += wxT('\n');
     }
 
 private:
--- src/common/dbtable.cpp-orig	2009-06-18 17:01:31.488028000 -0500
+++ src/common/dbtable.cpp	2009-06-18 17:01:40.992178000 -0500
@@ -1491,7 +1491,7 @@ bool wxDbTable::CreateTable(bool attempt
         }
         // For varchars, append the size of the string
         if (colDefs[i].DbDataType == DB_DATA_TYPE_VARCHAR &&
-            (pDb->Dbms() != dbmsMY_SQL || pDb->GetTypeInfVarchar().TypeName != _T("text")))// ||
+            (pDb->Dbms() != dbmsMY_SQL || pDb->GetTypeInfVarchar().TypeName != wxT("text")))// ||
 //            colDefs[i].DbDataType == DB_DATA_TYPE_BLOB)
         {
             wxString s;
@@ -1781,7 +1781,7 @@ bool wxDbTable::CreateIndex(const wxStri
         }
 
         // Postgres and SQL Server 7 do not support the ASC/DESC keywords for index columns
-        if (!((pDb->Dbms() == dbmsMS_SQL_SERVER) && (wxStrncmp(pDb->dbInf.dbmsVer,_T("07"),2)==0)) &&
+        if (!((pDb->Dbms() == dbmsMS_SQL_SERVER) && (wxStrncmp(pDb->dbInf.dbmsVer,wxT("07"),2)==0)) &&
             !(pDb->Dbms() == dbmsFIREBIRD) &&
             !(pDb->Dbms() == dbmsPOSTGRES))
         {
@@ -1791,7 +1791,7 @@ bool wxDbTable::CreateIndex(const wxStri
                 sqlStmt += wxT(" DESC");
         }
         else
-            wxASSERT_MSG(pIndexDefs[i].Ascending, _T("Datasource does not support DESCending index columns"));
+            wxASSERT_MSG(pIndexDefs[i].Ascending, wxT("Datasource does not support DESCending index columns"));
 
         if ((i + 1) < numIndexColumns)
             sqlStmt += wxT(",");
--- src/common/framecmn.cpp-orig	2009-06-18 17:01:47.085448000 -0500
+++ src/common/framecmn.cpp	2009-06-18 17:01:53.495019000 -0500
@@ -450,7 +450,7 @@ void wxFrameBase::DoGiveHelp(const wxStr
             if ( m_oldStatusText.empty() )
             {
                 // use special value to prevent us from doing this the next time
-                m_oldStatusText += _T('\0');
+                m_oldStatusText += wxT('\0');
             }
         }
     }
--- src/common/rgncmn.cpp-orig	2009-06-18 17:01:59.238797000 -0500
+++ src/common/rgncmn.cpp	2009-06-18 17:02:03.983824000 -0500
@@ -131,7 +131,7 @@ bool wxRegionBase::Union(const wxBitmap&
     if (bmp.GetMask())
     {
         wxImage image = bmp.ConvertToImage();
-        wxASSERT_MSG( image.HasMask(), _T("wxBitmap::ConvertToImage doesn't preserve mask?") );
+        wxASSERT_MSG( image.HasMask(), wxT("wxBitmap::ConvertToImage doesn't preserve mask?") );
         return DoRegionUnion(*this, image,
                              image.GetMaskRed(),
                              image.GetMaskGreen(),
--- src/common/cmndata.cpp-orig	2009-06-18 17:02:09.244453000 -0500
+++ src/common/cmndata.cpp	2009-06-18 17:02:14.575042000 -0500
@@ -89,7 +89,7 @@ wxColourData::~wxColourData()
 
 void wxColourData::SetCustomColour(int i, const wxColour& colour)
 {
-    wxCHECK_RET( (i >= 0 && i < 16), _T("custom colour index out of range") );
+    wxCHECK_RET( (i >= 0 && i < 16), wxT("custom colour index out of range") );
 
     m_custColours[i] = colour;
 }
@@ -97,7 +97,7 @@ void wxColourData::SetCustomColour(int i
 wxColour wxColourData::GetCustomColour(int i)
 {
     wxCHECK_MSG( (i >= 0 && i < 16), wxColour(0,0,0),
-                 _T("custom colour index out of range") );
+                 wxT("custom colour index out of range") );
 
     return m_custColours[i];
 }
--- src/common/cmdproc.cpp-orig	2009-06-18 17:02:24.671860000 -0500
+++ src/common/cmdproc.cpp	2009-06-18 17:02:30.509595000 -0500
@@ -86,7 +86,7 @@ bool wxCommandProcessor::UndoCommand(wxC
 // storeIt is false.
 bool wxCommandProcessor::Submit(wxCommand *command, bool storeIt)
 {
-    wxCHECK_MSG( command, false, _T("no command in wxCommandProcessor::Submit") );
+    wxCHECK_MSG( command, false, wxT("no command in wxCommandProcessor::Submit") );
 
     if ( !DoCommand(*command) )
     {
@@ -106,7 +106,7 @@ bool wxCommandProcessor::Submit(wxComman
 
 void wxCommandProcessor::Store(wxCommand *command)
 {
-    wxCHECK_RET( command, _T("no command in wxCommandProcessor::Store") );
+    wxCHECK_RET( command, wxT("no command in wxCommandProcessor::Store") );
 
     if ( (int)m_commands.GetCount() == m_maxNoCommands )
     {
--- src/common/convauto.cpp-orig	2009-06-18 17:02:37.955624000 -0500
+++ src/common/convauto.cpp	2009-06-18 17:02:44.623124000 -0500
@@ -123,7 +123,7 @@ void wxConvAuto::InitFromBOM(BOMType bom
             break;
 
         default:
-            wxFAIL_MSG( _T("unexpected BOM type") );
+            wxFAIL_MSG( wxT("unexpected BOM type") );
             // fall through: still need to create something
 
         case BOM_None:
@@ -152,7 +152,7 @@ void wxConvAuto::SkipBOM(const char **sr
             break;
 
         default:
-            wxFAIL_MSG( _T("unexpected BOM type") );
+            wxFAIL_MSG( wxT("unexpected BOM type") );
             // fall through: still need to create something
 
         case BOM_None:
--- src/common/artstd.cpp-orig	2009-06-18 17:02:50.829017000 -0500
+++ src/common/artstd.cpp	2009-06-18 17:02:55.697618000 -0500
@@ -54,7 +54,7 @@ protected:
 #else
     #define CREATE_STD_ICON(iconId, xpmRc) \
         { \
-            wxIcon icon(_T(iconId)); \
+            wxIcon icon(wxT(iconId)); \
             wxBitmap bmp; \
             bmp.CopyFromIcon(icon); \
             return bmp; \
--- src/common/valtext.cpp-orig	2009-06-18 17:03:01.298487000 -0500
+++ src/common/valtext.cpp	2009-06-18 17:03:05.582730000 -0500
@@ -167,7 +167,7 @@ bool wxTextValidator::Validate(wxWindow 
 
     if ( !ok )
     {
-        wxASSERT_MSG( !errormsg.empty(), _T("you forgot to set errormsg") );
+        wxASSERT_MSG( !errormsg.empty(), wxT("you forgot to set errormsg") );
 
         m_validatorWindow->SetFocus();
 
--- src/common/bmpbase.cpp-orig	2009-06-18 17:03:11.030022000 -0500
+++ src/common/bmpbase.cpp	2009-06-18 17:03:17.532099000 -0500
@@ -170,7 +170,7 @@ wxBitmap::wxBitmap(const char* const* bi
 
     *this = wxBitmap(image);
 #else
-    wxFAIL_MSG(_T("creating bitmaps from XPMs not supported"));
+    wxFAIL_MSG(wxT("creating bitmaps from XPMs not supported"));
 #endif // wxUSE_IMAGE && wxUSE_XPM
 }
 #endif // !(defined(__WXGTK__) || defined(__WXMOTIF__) || defined(__WXX11__))
--- src/common/fontenumcmn.cpp-orig	2009-06-18 17:03:26.121255000 -0500
+++ src/common/fontenumcmn.cpp	2009-06-18 17:03:31.660565000 -0500
@@ -105,7 +105,7 @@ bool wxFontEnumerator::EnumerateEncoding
 {
     // name of UTF-8 encoding: no need to use wxFontMapper for it as it's
     // unlikely to change
-    const wxString utf8(_T("UTF-8"));
+    const wxString utf8(wxT("UTF-8"));
 
     // all fonts are in UTF-8 only if this code is used
     if ( !facename.empty() )
--- src/os2/pen.cpp-orig	2009-06-21 16:20:04.921860000 -0500
+++ src/os2/pen.cpp	2009-06-21 16:20:10.288048000 -0500
@@ -145,7 +145,7 @@ bool wxPen::RealizeResource()
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Unable to set current color table to RGB mode. Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Unable to set current color table to RGB mode. Error: %s\n"), sError.c_str());
             return false;
         }
         if (M_PENDATA->m_nStyle == wxTRANSPARENT)
@@ -211,7 +211,7 @@ bool wxPen::RealizeResource()
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Can't set Gpi attributes for a LINEBUNDLE. Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Can't set Gpi attributes for a LINEBUNDLE. Error: %s\n"), sError.c_str());
             return false;
         }
 
@@ -296,7 +296,7 @@ bool wxPen::RealizeResource()
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Can't set Gpi attributes for an AREABUNDLE. Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Can't set Gpi attributes for an AREABUNDLE. Error: %s\n"), sError.c_str());
         }
 
         return (bool)bOk;
--- src/os2/utils.cpp-orig	2009-06-21 16:20:15.431160000 -0500
+++ src/os2/utils.cpp	2009-06-21 16:20:20.022409000 -0500
@@ -50,8 +50,8 @@ extern "C"
     #include <netbios.h>
 #endif
 
-static const wxChar WX_SECTION[] = _T("wxWidgets");
-static const wxChar eHOSTNAME[]  = _T("HostName");
+static const wxChar WX_SECTION[] = wxT("wxWidgets");
+static const wxChar eHOSTNAME[]  = wxT("HostName");
 
 // For the following functions we SHOULD fill in support
 // for Windows-NT (which I don't know) as I assume it begin
@@ -81,10 +81,10 @@ bool wxGetHostName( wxChar* zBuf, int nM
     strcpy(zBuf, zServer);
 #else
     wxChar*        zSysname;
-    const wxChar*  zDefaultHost = _T("noname");
+    const wxChar*  zDefaultHost = wxT("noname");
 
-    if ((zSysname = wxGetenv(_T("SYSTEM_NAME"))) == NULL &&
-	(zSysname = wxGetenv(_T("HOSTNAME"))) == NULL)
+    if ((zSysname = wxGetenv(wxT("SYSTEM_NAME"))) == NULL &&
+	(zSysname = wxGetenv(wxT("HOSTNAME"))) == NULL)
     {
         ::PrfQueryProfileString( HINI_PROFILE
                                 ,(PSZ)WX_SECTION
@@ -99,7 +99,7 @@ bool wxGetHostName( wxChar* zBuf, int nM
         wxStrncpy(zBuf, zSysname, nMaxSize - 1);
     }
 
-    zBuf[nMaxSize] = _T('\0');
+    zBuf[nMaxSize] = wxT('\0');
 #endif
 
     return *zBuf ? true : false;
@@ -121,7 +121,7 @@ bool wxGetUserName( wxChar* zBuf, int nM
 #ifdef USE_NET_API
     wxGetUserId( zBuf, nMaxSize );
 #else
-    wxStrncpy(zBuf, _T("Unknown User"), nMaxSize);
+    wxStrncpy(zBuf, wxT("Unknown User"), nMaxSize);
 #endif
     return true;
 }
@@ -139,7 +139,7 @@ int wxKill(long         lPid,
 //
 bool wxShell( const wxString& rCommand )
 {
-    wxChar*     zShell = _T("CMD.EXE");
+    wxChar*     zShell = wxT("CMD.EXE");
     wxString    sInputs;
     STARTDATA   SData = {0};
     PSZ         PgmTitle = "Command Shell";
@@ -156,7 +156,7 @@ bool wxShell( const wxString& rCommand )
     SData.PgmTitle = PgmTitle;
     SData.PgmName  = (char*)zShell;
 
-    sInputs = _T("/C ") + rCommand;
+    sInputs = wxT("/C ") + rCommand;
     SData.PgmInputs     = (BYTE*)sInputs.c_str();
     SData.TermQ         = 0;
     SData.Environment   = 0;
@@ -246,7 +246,7 @@ bool wxSetEnv(const wxString& variable, 
 #ifdef HAVE_UNSETENV
         return unsetenv(variable.mb_str()) == 0;
 #else
-        value = _T(""); // mustn't pass NULL to setenv()
+        value = wxT(""); // mustn't pass NULL to setenv()
 #endif
     }
     return setenv(variable.mb_str(),
@@ -255,7 +255,7 @@ bool wxSetEnv(const wxString& variable, 
 #elif defined(HAVE_PUTENV)
     wxString s = variable;
     if ( value )
-        s << _T('=') << value;
+        s << wxT('=') << value;
 
     // transform to ANSI
     const char *p = s.mb_str();
@@ -307,7 +307,7 @@ void wxBell()
 
 wxString wxGetOsDescription()
 {
-    wxString strVer(_T("OS/2"));
+    wxString strVer(wxT("OS/2"));
     ULONG ulSysInfo = 0;
 
     if (::DosQuerySysInfo( QSV_VERSION_MINOR,
@@ -317,7 +317,7 @@ wxString wxGetOsDescription()
                          ) == 0L )
     {
         wxString ver;
-        ver.Printf( _T(" ver. %d.%d"),
+        ver.Printf( wxT(" ver. %d.%d"),
                     int(ulSysInfo / 10),
                     int(ulSysInfo % 10)
                   );
@@ -415,13 +415,13 @@ wxChar* wxGetUserHome ( const wxString &
                        ))
         {
             // Guests belong in the temp dir
-            if (wxStricmp(zTmp, _T("annonymous")) == 0)
+            if (wxStricmp(zTmp, wxT("annonymous")) == 0)
             {
-                if ((zHome = wxGetenv(_T("TMP"))) != NULL    ||
-                    (zHome = wxGetenv(_T("TMPDIR"))) != NULL ||
-                    (zHome = wxGetenv(_T("TEMP"))) != NULL)
+                if ((zHome = wxGetenv(wxT("TMP"))) != NULL    ||
+                    (zHome = wxGetenv(wxT("TMPDIR"))) != NULL ||
+                    (zHome = wxGetenv(wxT("TEMP"))) != NULL)
                     delete[] wxBuffer;
-                    return *zHome ? zHome : (wxChar*)_T("\\");
+                    return *zHome ? zHome : (wxChar*)wxT("\\");
             }
             if (wxStricmp(zTmp, WXSTRINGCAST sUser1) == 0)
                 sUser1 = wxEmptyString;
@@ -430,7 +430,7 @@ wxChar* wxGetUserHome ( const wxString &
 #endif
     if (sUser1.empty())
     {
-        if ((zHome = wxGetenv(_T("HOME"))) != NULL)
+        if ((zHome = wxGetenv(wxT("HOME"))) != NULL)
         {
             wxStrcpy(wxBuffer, zHome);
             wxUnix2DosFilename(wxBuffer);
@@ -466,7 +466,7 @@ bool wxGetDiskSpace(const wxString& path
     if (wxDirExists(fn.GetFullPath()) == false)
         return false;
 
-    disknum = 1 + wxToupper(fn.GetVolume().GetChar(0)) - _T('A');
+    disknum = 1 + wxToupper(fn.GetVolume().GetChar(0)) - wxT('A');
 
     rc = ::DosQueryFSInfo(disknum,             // 1 = A, 2 = B, 3 = C, ...
                           FSIL_ALLOC,          // allocation info
--- src/os2/font.cpp-orig	2009-06-21 16:20:24.760752000 -0500
+++ src/os2/font.cpp	2009-06-21 16:20:31.979681000 -0500
@@ -648,7 +648,7 @@ void wxNativeFontInfo::SetStyle(
     switch (eStyle)
     {
         default:
-            wxFAIL_MSG( _T("unknown font style") );
+            wxFAIL_MSG( wxT("unknown font style") );
             // fall through
 
         case wxFONTSTYLE_NORMAL:
@@ -668,7 +668,7 @@ void wxNativeFontInfo::SetWeight(
     switch (eWeight)
     {
         default:
-            wxFAIL_MSG( _T("unknown font weight") );
+            wxFAIL_MSG( wxT("unknown font weight") );
             // fall through
 
         case wxFONTWEIGHT_NORMAL:
@@ -779,14 +779,14 @@ bool wxNativeFontInfo::FromString( const
 {
     long                            lVal;
 
-    wxStringTokenizer               vTokenizer(rsStr, _T(";"));
+    wxStringTokenizer               vTokenizer(rsStr, wxT(";"));
 
     //
     // First the version
     //
     wxString                        sToken = vTokenizer.GetNextToken();
 
-    if (sToken != _T('0'))
+    if (sToken != wxT('0'))
         return false;
 
     sToken = vTokenizer.GetNextToken();
@@ -845,7 +845,7 @@ wxString wxNativeFontInfo::ToString() co
 {
     wxString sStr;
 
-    sStr.Printf(_T("%d;%ld;%ld;%ld;%d;%d;%d;%d;%d;%ld;%d;%s"),
+    sStr.Printf(wxT("%d;%ld;%ld;%ld;%d;%d;%d;%d;%d;%ld;%d;%s"),
                 0, // version, in case we want to change the format later
                 fm.lEmHeight,
                 fa.lAveCharWidth,
--- src/os2/window.cpp-orig	2009-06-21 16:20:36.893701000 -0500
+++ src/os2/window.cpp	2009-06-21 16:20:46.599994000 -0500
@@ -384,7 +384,7 @@ bool wxWindowOS2::Create( wxWindow*     
     // static box
     //
     wxASSERT_MSG( !wxDynamicCast(pParent, wxStaticBox),
-                  _T("wxStaticBox can't be used as a window parent!") );
+                  wxT("wxStaticBox can't be used as a window parent!") );
 #endif // wxUSE_STATBOX
 
      // Ensure groupbox backgrounds are painted
@@ -454,7 +454,7 @@ bool wxWindowOS2::Create( wxWindow*     
 void wxWindowOS2::SetFocus()
 {
     HWND                            hWnd = GetHwnd();
-    wxCHECK_RET( hWnd, _T("can't set focus to invalid window") );
+    wxCHECK_RET( hWnd, wxT("can't set focus to invalid window") );
 
     if (hWnd)
         ::WinSetFocus(HWND_DESKTOP, hWnd);
@@ -2920,7 +2920,7 @@ void wxAssociateWinWithHandle(
     {
         wxString  Newstr(pWin->GetClassInfo()->GetClassName());
         wxString Oldstr(pOldWin->GetClassInfo()->GetClassName());
-        wxLogError( _T("Bug! New window of class %s has same HWND %X as old window of class %s"),
+        wxLogError( wxT("Bug! New window of class %s has same HWND %X as old window of class %s"),
                     Newstr.c_str(),
                     (int)hWnd,
                     Oldstr.c_str()
@@ -3065,7 +3065,7 @@ bool wxWindowOS2::OS2Create( PSZ        
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Error creating frame. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Error creating frame. Error: %s\n"), sError.c_str());
         return false;
     }
     SetSize( nX
@@ -3302,7 +3302,7 @@ bool wxWindowOS2::OS2OnDrawItem( int vId
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Unable to set current color table (1). Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Unable to set current color table (1). Error: %s\n"), sError.c_str());
         }
         //
         // Set the color table to RGB mode
@@ -3317,7 +3317,7 @@ bool wxWindowOS2::OS2OnDrawItem( int vId
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Unable to set current color table (2). Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Unable to set current color table (2). Error: %s\n"), sError.c_str());
         }
 
         wxCHECK( pMenuItem->IsKindOf(CLASSINFO(wxMenuItem)), FALSE );
--- src/os2/toplevel.cpp-orig	2009-06-21 16:20:52.409765000 -0500
+++ src/os2/toplevel.cpp	2009-06-21 16:21:04.996147000 -0500
@@ -162,7 +162,7 @@ void wxTopLevelWindowOS2::OnActivate(
         //
         // Restore focus to the child which was last focused
         //
-        wxLogTrace(_T("focus"), _T("wxTLW %08lx activated."), m_hWnd);
+        wxLogTrace(wxT("focus"), wxT("wxTLW %08lx activated."), m_hWnd);
 
         wxWindow*                   pParent = m_pWinLastFocused ? m_pWinLastFocused->GetParent()
                                                                 : NULL;
@@ -200,8 +200,8 @@ void wxTopLevelWindowOS2::OnActivate(
             pWin = pWin->GetParent();
         }
 
-        wxLogTrace(_T("focus"),
-                   _T("wxTLW %08lx deactivated, last focused: %08lx."),
+        wxLogTrace(wxT("focus"),
+                   wxT("wxTLW %08lx deactivated, last focused: %08lx."),
                    m_hWnd,
                    m_pWinLastFocused ? GetHwndOf(m_pWinLastFocused)
                                      : NULL);
@@ -281,7 +281,7 @@ WXHWND wxTopLevelWindowOS2::OS2GetParent
             //
             // This flag doesn't make sense then and will be ignored
             //
-            wxFAIL_MSG( _T("wxFRAME_FLOAT_ON_PARENT but no parent?") );
+            wxFAIL_MSG( wxT("wxFRAME_FLOAT_ON_PARENT but no parent?") );
         }
         else
         {
@@ -495,7 +495,7 @@ bool wxTopLevelWindowOS2::CreateFrame( c
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Error creating frame. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Error creating frame. Error: %s\n"), sError.c_str());
         return false;
     }
 
@@ -519,7 +519,7 @@ bool wxTopLevelWindowOS2::CreateFrame( c
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Error creating frame. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Error creating frame. Error: %s\n"), sError.c_str());
         return false;
     }
 
@@ -588,7 +588,7 @@ bool wxTopLevelWindowOS2::CreateFrame( c
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Error sizing frame. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Error sizing frame. Error: %s\n"), sError.c_str());
         return false;
     }
     lStyle =  ::WinQueryWindowULong( m_hWnd
@@ -1037,7 +1037,7 @@ bool wxTopLevelWindowOS2::EnableCloseBut
 
     if (!hMenu)
     {
-        wxLogLastError(_T("GetSystemMenu"));
+        wxLogLastError(wxT("GetSystemMenu"));
         return false;
     }
 
@@ -1089,7 +1089,7 @@ void wxTLWHiddenParentModule::OnExit()
     {
         if (!::WinDestroyWindow(m_shWnd))
         {
-            wxLogLastError(_T("DestroyWindow(hidden TLW parent)"));
+            wxLogLastError(wxT("DestroyWindow(hidden TLW parent)"));
         }
         m_shWnd = NULL;
     }
@@ -1104,7 +1104,7 @@ HWND wxTLWHiddenParentModule::GetHWND()
     {
         if (!m_szClassName)
         {
-            static const wxChar*    zHIDDEN_PARENT_CLASS = _T("wxTLWHiddenParent");
+            static const wxChar*    zHIDDEN_PARENT_CLASS = wxT("wxTLWHiddenParent");
 
             if (!::WinRegisterClass( wxGetInstance()
                                     ,(PSZ)zHIDDEN_PARENT_CLASS
@@ -1113,7 +1113,7 @@ HWND wxTLWHiddenParentModule::GetHWND()
                                     ,sizeof(ULONG)
                                    ))
             {
-                wxLogLastError(_T("RegisterClass(\"wxTLWHiddenParent\")"));
+                wxLogLastError(wxT("RegisterClass(\"wxTLWHiddenParent\")"));
             }
             else
             {
@@ -1135,7 +1135,7 @@ HWND wxTLWHiddenParentModule::GetHWND()
                                      NULL );
         if (!m_shWnd)
         {
-            wxLogLastError(_T("CreateWindow(hidden TLW parent)"));
+            wxLogLastError(wxT("CreateWindow(hidden TLW parent)"));
         }
     }
     return m_shWnd;
--- src/os2/dnd.cpp-orig	2009-06-21 16:21:09.504048000 -0500
+++ src/os2/dnd.cpp	2009-06-21 16:21:25.623623000 -0500
@@ -329,44 +329,44 @@ wxDataFormat wxDropTarget::GetSupportedF
             case wxDF_TEXT:
             case wxDF_FILENAME:
             case wxDF_HTML:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_TEXT");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_TEXT");
                 break;
 
             case wxDF_OEMTEXT:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_OEMTEXT");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_OEMTEXT");
                 break;
 
             case wxDF_BITMAP:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_BITMAP");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_BITMAP");
                 break;
 
             case wxDF_METAFILE:
             case wxDF_ENHMETAFILE:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_METAFILE");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_METAFILE");
                 break;
 
             case wxDF_TIFF:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_TIFF");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_TIFF");
                 break;
 
             case wxDF_SYLK:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_SYLK");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_SYLK");
                 break;
 
             case wxDF_DIF:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_DIF");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_DIF");
                 break;
 
             case wxDF_DIB:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_DIB");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_DIB");
                 break;
 
             case wxDF_PALETTE:
@@ -375,13 +375,13 @@ wxDataFormat wxDropTarget::GetSupportedF
             case wxDF_WAVE:
             case wxDF_UNICODETEXT:
             case wxDF_LOCALE:
-                sMechanism = _T("DRM_OS2FILE");
-                sFormat    = _T("DRF_UNKNOWN");
+                sMechanism = wxT("DRM_OS2FILE");
+                sFormat    = wxT("DRF_UNKNOWN");
                 break;
 
             case wxDF_PRIVATE:
-                sMechanism = _T("DRM_OBJECT");
-                sFormat    = _T("DRF_UNKNOWN");
+                sMechanism = wxT("DRM_OBJECT");
+                sFormat    = wxT("DRF_UNKNOWN");
                 break;
         }
         for (i = 0; i < ulItems; i++)
@@ -560,7 +560,7 @@ void wxDropSource::Init ()
                                  ,(void*)pzBuffer
                                 );
 
-    wxStrcpy(zFormats, _T("<DRM_OS2FILE, DRF_UNKNOWN>"));
+    wxStrcpy(zFormats, wxT("<DRM_OS2FILE, DRF_UNKNOWN>"));
     wxStrcpy(zContainer, GetDataObject()->GetPreferredFormat().GetId());
 
     hStrRMF       = ::DrgAddStrHandle((PSZ)zFormats);
--- src/os2/dc.cpp-orig	2009-06-21 16:22:46.467237000 -0500
+++ src/os2/dc.cpp	2009-06-21 16:22:51.107234000 -0500
@@ -2187,8 +2187,8 @@ void wxDC::DoGetTextExtent(
        vErrorCode = ::WinGetLastError(wxGetInstance());
        sError = wxPMErrorToStr(vErrorCode);
        // DEBUG
-       wxSprintf(zMsg, _T("GpiQueryTextBox for %s: failed with Error: %lx - %s"), rsString.c_str(), vErrorCode, sError.c_str());
-       (void)wxMessageBox( _T("wxWidgets Menu sample")
+       wxSprintf(zMsg, wxT("GpiQueryTextBox for %s: failed with Error: %lx - %s"), rsString.c_str(), vErrorCode, sError.c_str());
+       (void)wxMessageBox( wxT("wxWidgets Menu sample")
                           ,zMsg
                           ,wxICON_INFORMATION
                          );
--- src/os2/gdiimage.cpp-orig	2009-06-21 16:21:31.706021000 -0500
+++ src/os2/gdiimage.cpp	2009-06-21 16:21:40.687312000 -0500
@@ -42,7 +42,7 @@ WX_DEFINE_LIST(wxGDIImageHandlerList)
 class WXDLLEXPORT wxBMPFileHandler : public wxBitmapHandler
 {
 public:
-    wxBMPFileHandler() : wxBitmapHandler(_T("Windows bitmap file"), _T("bmp"),
+    wxBMPFileHandler() : wxBitmapHandler(wxT("Windows bitmap file"), wxT("bmp"),
                                          wxBITMAP_TYPE_BMP)
     {
     }
@@ -81,7 +81,7 @@ private:
 class WXDLLEXPORT wxBMPResourceHandler: public wxBitmapHandler
 {
 public:
-    wxBMPResourceHandler() : wxBitmapHandler(_T("Windows bitmap resource"),
+    wxBMPResourceHandler() : wxBitmapHandler(wxT("Windows bitmap resource"),
                                              wxEmptyString,
                                              wxBITMAP_TYPE_BMP_RESOURCE)
     {
@@ -139,7 +139,7 @@ public:
                      )
     {
         wxIcon*                     pIcon = wxDynamicCast(pImage, wxIcon);
-        wxCHECK_MSG(pIcon, false, _T("wxIconHandler only works with icons"));
+        wxCHECK_MSG(pIcon, false, wxT("wxIconHandler only works with icons"));
 
         return LoadIcon( pIcon
                         ,rName
@@ -172,8 +172,8 @@ private:
 class WXDLLEXPORT wxICOFileHandler : public wxIconHandler
 {
 public:
-    wxICOFileHandler() : wxIconHandler(_T("ICO icon file"),
-                                       _T("ico"),
+    wxICOFileHandler() : wxIconHandler(wxT("ICO icon file"),
+                                       wxT("ico"),
                                        wxBITMAP_TYPE_ICO)
     {
     }
@@ -193,8 +193,8 @@ private:
 class WXDLLEXPORT wxICOResourceHandler: public wxIconHandler
 {
 public:
-    wxICOResourceHandler() : wxIconHandler(_T("ICO resource"),
-                                           _T("ico"),
+    wxICOResourceHandler() : wxIconHandler(wxT("ICO resource"),
+                                           wxT("ico"),
                                            wxBITMAP_TYPE_ICO_RESOURCE)
     {
     }
--- src/os2/thread.cpp-orig	2009-06-21 16:21:45.368088000 -0500
+++ src/os2/thread.cpp	2009-06-21 16:21:55.456695000 -0500
@@ -123,7 +123,7 @@ wxMutexInternal::~wxMutexInternal()
     if (m_vMutex)
     {
         if (::DosCloseMutexSem(m_vMutex))
-            wxLogLastError(_T("DosCloseMutexSem(mutex)"));
+            wxLogLastError(wxT("DosCloseMutexSem(mutex)"));
     }
 }
 
@@ -209,7 +209,7 @@ wxSemaphoreInternal::wxSemaphoreInternal
     ulrc = ::DosCreateMutexSem(NULL, &m_vMutex, 0L, FALSE);
     if (ulrc != 0)
     {
-        wxLogLastError(_T("DosCreateMutexSem()"));
+        wxLogLastError(wxT("DosCreateMutexSem()"));
         m_vMutex = NULL;
         m_vEvent = NULL;
         return;
@@ -217,7 +217,7 @@ wxSemaphoreInternal::wxSemaphoreInternal
     ulrc = ::DosCreateEventSem(NULL, &m_vEvent, 0L, FALSE);
     if ( ulrc != 0)
     {
-        wxLogLastError(_T("DosCreateEventSem()"));
+        wxLogLastError(wxT("DosCreateEventSem()"));
         ::DosCloseMutexSem(m_vMutex);
         m_vMutex = NULL;
         m_vEvent = NULL;
@@ -232,11 +232,11 @@ wxSemaphoreInternal::~wxSemaphoreInterna
     {
         if ( ::DosCloseEventSem(m_vEvent) )
         {
-            wxLogLastError(_T("DosCloseEventSem(semaphore)"));
+            wxLogLastError(wxT("DosCloseEventSem(semaphore)"));
         }
         if ( ::DosCloseMutexSem(m_vMutex) )
         {
-            wxLogLastError(_T("DosCloseMutexSem(semaphore)"));
+            wxLogLastError(wxT("DosCloseMutexSem(semaphore)"));
         }
         else
             m_vEvent = NULL;
@@ -260,7 +260,7 @@ wxSemaError wxSemaphoreInternal::WaitTim
                     return wxSEMA_TIMEOUT;
 
             default:
-                wxLogLastError(_T("DosWaitEventSem(semaphore)"));
+                wxLogLastError(wxT("DosWaitEventSem(semaphore)"));
                 return wxSEMA_MISC_ERROR;
         }
         ulrc = :: DosRequestMutexSem(m_vMutex, ulMilliseconds);
@@ -320,7 +320,7 @@ wxSemaError wxSemaphoreInternal::Post()
         return wxSEMA_OVERFLOW;
     if ( ulrc != NO_ERROR && ulrc != ERROR_ALREADY_POSTED )
     {
-        wxLogLastError(_T("DosPostEventSem(semaphore)"));
+        wxLogLastError(wxT("DosPostEventSem(semaphore)"));
 
         return wxSEMA_MISC_ERROR;
     }
@@ -590,7 +590,7 @@ unsigned long wxThread::GetCurrentId()
 
 bool wxThread::SetConcurrency(size_t level)
 {
-    wxASSERT_MSG( IsMain(), _T("should only be called from the main thread") );
+    wxASSERT_MSG( IsMain(), wxT("should only be called from the main thread") );
 
     // ok only for the default one
     if ( level == 0 )
@@ -674,7 +674,7 @@ wxThread::ExitCode wxThread::Wait()
     // although under Windows we can wait for any thread, it's an error to
     // wait for a detached one in wxWin API
     wxCHECK_MSG( !IsDetached(), (ExitCode)-1,
-                 _T("can't wait for detached thread") );
+                 wxT("can't wait for detached thread") );
     ExitCode rc = (ExitCode)-1;
     (void)Delete(&rc);
     return(rc);
--- src/os2/dir.cpp-orig	2009-06-21 16:21:59.664698000 -0500
+++ src/os2/dir.cpp	2009-06-21 16:22:23.988455000 -0500
@@ -62,7 +62,7 @@ static inline void FreeFindData(
 {
     if (!::DosFindClose(vFd))
     {
-        wxLogLastError(_T("DosFindClose"));
+        wxLogLastError(wxT("DosFindClose"));
     }
 }
 
@@ -223,9 +223,9 @@ bool wxDirData::Read(
 
         if ( !wxEndsWithPathSeparator(sFilespec) )
         {
-            sFilespec += _T('\\');
+            sFilespec += wxT('\\');
         }
-        sFilespec += (!m_sFilespec ? _T("*.*") : m_sFilespec.c_str());
+        sFilespec += (!m_sFilespec ? wxT("*.*") : m_sFilespec.c_str());
 
         m_vFinddata = FindFirst( sFilespec
                                 ,PTR_TO_FINDDATA
@@ -263,9 +263,9 @@ bool wxDirData::Read(
         //
         // Don't return "." and ".." unless asked for
         //
-        if ( zName[0] == _T('.') &&
-             ((zName[1] == _T('.') && zName[2] == _T('\0')) ||
-              (zName[1] == _T('\0'))) )
+        if ( zName[0] == wxT('.') &&
+             ((zName[1] == wxT('.') && zName[2] == wxT('\0')) ||
+              (zName[1] == wxT('\0'))) )
         {
             if (!(m_nFlags & wxDIR_DOTDOT))
                 continue;
@@ -356,9 +356,9 @@ wxString wxDir::GetName() const
         if ( !name.empty() )
         {
             // bring to canonical Windows form
-            name.Replace(_T("/"), _T("\\"));
+            name.Replace(wxT("/"), wxT("\\"));
 
-            if ( name.Last() == _T('\\') )
+            if ( name.Last() == wxT('\\') )
             {
                 // chop off the last (back)slash
                 name.Truncate(name.length() - 1);
@@ -384,7 +384,7 @@ bool wxDir::GetFirst(
 , int                               nFlags
 ) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
     M_DIR->Rewind();
     M_DIR->SetFileSpec(rsFilespec);
     M_DIR->SetFlags(nFlags);
@@ -395,8 +395,8 @@ bool wxDir::GetNext(
   wxString*                         psFilename
 ) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
-    wxCHECK_MSG( psFilename, false, _T("bad pointer in wxDir::GetNext()") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
+    wxCHECK_MSG( psFilename, false, wxT("bad pointer in wxDir::GetNext()") );
     return M_DIR->Read(psFilename);
 } // end of wxDir::GetNext
 
--- src/os2/radiobut.cpp-orig	2009-06-21 16:22:29.841920000 -0500
+++ src/os2/radiobut.cpp	2009-06-21 16:22:34.952210000 -0500
@@ -83,7 +83,7 @@ bool wxRadioButton::Create( wxWindow* pP
     if (HasFlag(wxCLIP_SIBLINGS))
         lSstyle |= WS_CLIPSIBLINGS;
 
-    if (!OS2CreateControl( _T("BUTTON")
+    if (!OS2CreateControl( wxT("BUTTON")
                           ,lSstyle
                           ,rPos
                           ,rSize
@@ -202,7 +202,7 @@ void wxRadioButton::SetValue( bool bValu
         const wxWindowList&         rSiblings = GetParent()->GetChildren();
         wxWindowList::compatibility_iterator nodeThis = rSiblings.Find(this);
 
-        wxCHECK_RET(nodeThis, _T("radio button not a child of its parent?"));
+        wxCHECK_RET(nodeThis, wxT("radio button not a child of its parent?"));
 
         //
         // If it's not the first item of the group ...
--- src/os2/app.cpp-orig	2009-06-21 16:22:38.871845000 -0500
+++ src/os2/app.cpp	2009-06-21 16:22:42.278705000 -0500
@@ -531,7 +531,7 @@ bool wxApp::Yield(bool onlyIfNeeded)
     {
         if ( !onlyIfNeeded )
         {
-            wxFAIL_MSG( _T("wxYield() called recursively") );
+            wxFAIL_MSG( wxT("wxYield() called recursively") );
         }
 
         return false;
--- src/os2/textctrl.cpp-orig	2009-06-21 16:22:57.160023000 -0500
+++ src/os2/textctrl.cpp	2009-06-21 16:23:01.139541000 -0500
@@ -717,7 +717,7 @@ void wxTextCtrl::MarkDirty()
         ::WinSendMsg(GetHwnd(), MLM_SETCHANGED, MPFROMLONG(TRUE), 0);
     else
         // EM controls do not have a SETCHANGED, what can we do??
-        wxFAIL_MSG( _T("not implemented") );
+        wxFAIL_MSG( wxT("not implemented") );
 }
 
 //
--- src/os2/timer.cpp-orig	2009-06-21 16:23:05.426176000 -0500
+++ src/os2/timer.cpp	2009-06-21 16:23:08.696207000 -0500
@@ -87,7 +87,7 @@ void wxTimer::Notify()
     // should because otherwise nobody can process timer events, but it does
     // not use the OS's ID, which OS/2 must have to figure out which timer fired
     //
-    wxCHECK_RET( m_owner, _T("wxTimer::Notify() should be overridden.") );
+    wxCHECK_RET( m_owner, wxT("wxTimer::Notify() should be overridden.") );
 
     wxTimerEvent                    vEvent( m_idTimer
                                            ,m_milli
--- src/os2/dcclient.cpp-orig	2009-06-21 16:23:13.707152000 -0500
+++ src/os2/dcclient.cpp	2009-06-21 16:23:21.369601000 -0500
@@ -121,7 +121,7 @@ wxWindowDC::wxWindowDC(
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Unable to create presentation space. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Unable to create presentation space. Error: %s\n"), sError.c_str());
     }
     ::GpiAssociate(m_hPS, NULLHANDLE);
     ::GpiAssociate(m_hPS, m_hDC);
@@ -139,7 +139,7 @@ wxWindowDC::wxWindowDC(
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Unable to set current color table (3). Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Unable to set current color table (3). Error: %s\n"), sError.c_str());
     }
     ::GpiCreateLogColorTable( m_hPS
                              ,0L
@@ -186,7 +186,7 @@ void wxWindowDC::DoGetSize(
 , int*                              pnHeight
 ) const
 {
-    wxCHECK_RET( m_pCanvas, _T("wxWindowDC without a window?") );
+    wxCHECK_RET( m_pCanvas, wxT("wxWindowDC without a window?") );
     m_pCanvas->GetSize( pnWidth
                        ,pnHeight
                       );
@@ -232,7 +232,7 @@ wxClientDC::wxClientDC(
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Unable to set current color table (4). Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Unable to set current color table (4). Error: %s\n"), sError.c_str());
     }
     ::GpiCreateLogColorTable( m_hPS
                              ,0L
@@ -278,7 +278,7 @@ void wxClientDC::DoGetSize(
 , int*                              pnHeight
 ) const
 {
-    wxCHECK_RET( m_pCanvas, _T("wxWindowDC without a window?") );
+    wxCHECK_RET( m_pCanvas, wxT("wxWindowDC without a window?") );
     m_pCanvas->GetClientSize( pnWidth
                              ,pnHeight
                             );
--- src/os2/menu.cpp-orig	2009-06-21 16:23:25.879314000 -0500
+++ src/os2/menu.cpp	2009-06-21 16:23:30.471633000 -0500
@@ -387,7 +387,7 @@ void wxMenu::EndRadioGroup()
 
 wxMenuItem* wxMenu::DoAppend( wxMenuItem* pItem )
 {
-    wxCHECK_MSG( pItem, NULL, _T("NULL item in wxMenu::DoAppend") );
+    wxCHECK_MSG( pItem, NULL, wxT("NULL item in wxMenu::DoAppend") );
 
     bool bCheck = false;
 
@@ -428,7 +428,7 @@ wxMenuItem* wxMenu::DoAppend( wxMenuItem
             }
             else
             {
-                wxFAIL_MSG( _T("where is the radio group start item?") );
+                wxFAIL_MSG( wxT("where is the radio group start item?") );
             }
         }
     }
--- src/os2/tooltip.cpp-orig	2009-06-21 16:23:36.902446000 -0500
+++ src/os2/tooltip.cpp	2009-06-21 16:23:42.132375000 -0500
@@ -71,7 +71,7 @@ void wxToolTip::Create(
                                ,NULL
                               );
     if (!m_hWnd)
-        wxLogError(_T("Unable to create tooltip window"));
+        wxLogError(wxT("Unable to create tooltip window"));
 
     wxColour                        vColor( wxT("YELLOW") );
     lColor = (LONG)vColor.GetPixel();
--- src/os2/menuitem.cpp-orig	2009-06-21 16:23:47.222123000 -0500
+++ src/os2/menuitem.cpp	2009-06-21 16:23:54.205654000 -0500
@@ -146,7 +146,7 @@ void wxMenuItem::Init()
     //
     // Tell the owner drawing code to to show the accel string as well
     //
-    SetAccelString(m_text.AfterFirst(_T('\t')));
+    SetAccelString(m_text.AfterFirst(wxT('\t')));
 #endif // wxUSE_OWNER_DRAWN
 } // end of wxMenuItem::Init
 
@@ -215,7 +215,7 @@ void wxMenuItem::SetRadioGroupStart(
 )
 {
     wxASSERT_MSG( !m_bIsRadioGroupStart
-                 ,_T("should only be called for the next radio items")
+                 ,wxT("should only be called for the next radio items")
                 );
 
     m_vRadioGroup.m_nStart = nStart;
@@ -226,7 +226,7 @@ void wxMenuItem::SetRadioGroupEnd(
 )
 {
     wxASSERT_MSG( m_bIsRadioGroupStart
-                 ,_T("should only be called for the first radio item")
+                 ,wxT("should only be called for the first radio item")
                 );
     m_vRadioGroup.m_nEnd = nEnd;
 } // end of wxMenuItem::SetRadioGroupEnd
@@ -288,7 +288,7 @@ void wxMenuItem::Check(
         int                         nPos = rItems.IndexOf(this);
 
         wxCHECK_RET( nPos != wxNOT_FOUND
-                    ,_T("menuitem not found in the menu items list?")
+                    ,wxT("menuitem not found in the menu items list?")
                    );
 
         //
@@ -382,9 +382,9 @@ void wxMenuItem::SetText( const wxString
     OWNER_DRAWN_ONLY(wxOwnerDrawn::SetName(m_text));
 #if  wxUSE_OWNER_DRAWN
     if (rText.IsEmpty())
-        SetAccelString(m_text.AfterFirst(_T('\t')));
+        SetAccelString(m_text.AfterFirst(wxT('\t')));
     else
-        SetAccelString(rText.AfterFirst(_T('\t')));
+        SetAccelString(rText.AfterFirst(wxT('\t')));
 #endif // wxUSE_OWNER_DRAWN
 
     HWND                            hMenu = GetHmenuOf(m_parentMenu);
--- src/os2/button.cpp-orig	2009-06-21 16:23:59.019877000 -0500
+++ src/os2/button.cpp	2009-06-21 16:24:03.899771000 -0500
@@ -235,7 +235,7 @@ void wxButton::SetDefault()
 {
     wxTopLevelWindow *tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
 
-    wxCHECK_RET( tlw, _T("button without top level window?") );
+    wxCHECK_RET( tlw, wxT("button without top level window?") );
 
     //
     // Set this one as the default button both for wxWidgets and Windows
@@ -250,7 +250,7 @@ void wxButton::SetTmpDefault()
 {
     wxTopLevelWindow *tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
 
-    wxCHECK_RET( tlw, _T("button without top level window?") );
+    wxCHECK_RET( tlw, wxT("button without top level window?") );
 
     wxWindow*                       pWinOldDefault = tlw->GetDefaultItem();
 
@@ -263,7 +263,7 @@ void wxButton::UnsetTmpDefault()
 {
     wxTopLevelWindow *tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
 
-    wxCHECK_RET( tlw, _T("button without top level window?") );
+    wxCHECK_RET( tlw, wxT("button without top level window?") );
 
     tlw->SetTmpDefaultItem(NULL);
 
--- src/os2/stdpaths.cpp-orig	2009-06-21 16:24:09.528087000 -0500
+++ src/os2/stdpaths.cpp	2009-06-21 16:24:15.241300000 -0500
@@ -56,7 +56,7 @@ wxString wxStandardPaths::GetInstallPref
     {
         wxStandardPaths *self = wx_const_cast(wxStandardPaths *, this);
 
-        self->m_prefix = _T("/usr/local");
+        self->m_prefix = wxT("/usr/local");
     }
     return m_prefix;
 }
@@ -77,12 +77,12 @@ wxString wxStandardPaths::GetUserConfigD
 
 wxString wxStandardPaths::GetDataDir() const
 {
-    return GetInstallPrefix() + _T("\\data");
+    return GetInstallPrefix() + wxT("\\data");
 }
 
 wxString wxStandardPaths::GetUserDataDir() const
 {
-    return AppendAppName(wxFileName::GetHomeDir() + _T("\\."));
+    return AppendAppName(wxFileName::GetHomeDir() + wxT("\\."));
 }
 
 wxString wxStandardPaths::GetPluginsDir() const
--- src/os2/fontutil.cpp-orig	2009-06-21 16:24:23.034660000 -0500
+++ src/os2/fontutil.cpp	2009-06-21 16:24:33.113686000 -0500
@@ -55,7 +55,7 @@
 
 bool wxNativeEncodingInfo::FromString( const wxString& rsStr )
 {
-    wxStringTokenizer               vTokenizer(rsStr, _T(";"));
+    wxStringTokenizer               vTokenizer(rsStr, wxT(";"));
     wxString                        sEncid = vTokenizer.GetNextToken();
     long                            lEnc;
 
@@ -74,7 +74,7 @@ bool wxNativeEncodingInfo::FromString( c
     }
     else
     {
-        if ( wxSscanf(sTmp, _T("%u"), &charset) != 1 )
+        if ( wxSscanf(sTmp, wxT("%u"), &charset) != 1 )
         {
             // should be a number!
             return FALSE;
@@ -87,11 +87,11 @@ wxString wxNativeEncodingInfo::ToString(
 {
     wxString                        sStr;
 
-    sStr << (long)encoding << _T(';') << facename;
+    sStr << (long)encoding << wxT(';') << facename;
 
     if (charset != 850)
     {
-        sStr << _T(';') << charset;
+        sStr << wxT(';') << charset;
     }
     return sStr;
 } // end of wxNativeEncodingInfo::ToString
@@ -103,7 +103,7 @@ wxString wxNativeEncodingInfo::ToString(
 bool wxGetNativeFontEncoding( wxFontEncoding vEncoding,
                               wxNativeEncodingInfo* pInfo )
 {
-    wxCHECK_MSG(pInfo, FALSE, _T("bad pointer in wxGetNativeFontEncoding") );
+    wxCHECK_MSG(pInfo, FALSE, wxT("bad pointer in wxGetNativeFontEncoding") );
     if (vEncoding == wxFONTENCODING_DEFAULT)
     {
         vEncoding = wxFont::GetDefaultEncoding();
@@ -509,7 +509,7 @@ void wxOS2SelectMatchingFontByName(
     switch (pFont->GetWeight())
     {
         default:
-            wxFAIL_MSG(_T("unknown font weight"));
+            wxFAIL_MSG(wxT("unknown font weight"));
             // fall through
             usWeightClass = FWEIGHT_DONT_CARE;
             break;
--- src/os2/control.cpp-orig	2009-06-21 16:24:37.681986000 -0500
+++ src/os2/control.cpp	2009-06-21 16:24:43.651161000 -0500
@@ -110,15 +110,15 @@ bool wxControl::OS2CreateControl( const 
     if (!pParent)
         return false;
 
-    if ((wxStrcmp(zClassname, _T("COMBOBOX"))) == 0)
+    if ((wxStrcmp(zClassname, wxT("COMBOBOX"))) == 0)
         zClass = WC_COMBOBOX;
-    else if ((wxStrcmp(zClassname, _T("STATIC"))) == 0)
+    else if ((wxStrcmp(zClassname, wxT("STATIC"))) == 0)
         zClass = WC_STATIC;
-    else if ((wxStrcmp(zClassname, _T("BUTTON"))) == 0)
+    else if ((wxStrcmp(zClassname, wxT("BUTTON"))) == 0)
         zClass = WC_BUTTON;
-    else if ((wxStrcmp(zClassname, _T("NOTEBOOK"))) == 0)
+    else if ((wxStrcmp(zClassname, wxT("NOTEBOOK"))) == 0)
         zClass = WC_NOTEBOOK;
-    else if ((wxStrcmp(zClassname, _T("CONTAINER"))) == 0)
+    else if ((wxStrcmp(zClassname, wxT("CONTAINER"))) == 0)
         zClass = WC_CONTAINER;
     if ((zClass == WC_STATIC) || (zClass == WC_BUTTON))
         dwStyle |= DT_MNEMONIC;
--- src/os2/spinctrl.cpp-orig	2009-06-21 16:24:49.130657000 -0500
+++ src/os2/spinctrl.cpp	2009-06-21 16:24:53.085778000 -0500
@@ -296,7 +296,7 @@ wxSpinCtrl* wxSpinCtrl::GetSpinForTextCt
 
     // sanity check
     wxASSERT_MSG( pSpin->m_hWndBuddy == hWndBuddy,
-                  _T("wxSpinCtrl has incorrect buddy HWND!") );
+                  wxT("wxSpinCtrl has incorrect buddy HWND!") );
 
     return pSpin;
 } // end of wxSpinCtrl::GetSpinForTextCtrl
--- src/os2/snglinst.cpp-orig	2009-06-21 16:24:59.554173000 -0500
+++ src/os2/snglinst.cpp	2009-06-21 16:25:08.340366000 -0500
@@ -67,7 +67,7 @@ public:
             return true;
         } else {
             m_anotherRunning = false;  // we don't know for sure in this case
-            wxLogLastError(_T("DosCreateMutexSem"));
+            wxLogLastError(wxT("DosCreateMutexSem"));
             return false;
         }
     }
@@ -83,7 +83,7 @@ public:
         {
             if ( !::DosCloseMutexSem(m_hMutex) )
             {
-                wxLogLastError(_T("DosCloseMutexSem"));
+                wxLogLastError(wxT("DosCloseMutexSem"));
             }
         }
     }
@@ -107,10 +107,10 @@ bool wxSingleInstanceChecker::Create(con
                                      const wxString& WXUNUSED(path))
 {
     wxASSERT_MSG( !m_impl,
-                  _T("calling wxSingleInstanceChecker::Create() twice?") );
+                  wxT("calling wxSingleInstanceChecker::Create() twice?") );
 
     // creating unnamed mutex doesn't have the same semantics!
-    wxASSERT_MSG( !name.empty(), _T("mutex name can't be empty") );
+    wxASSERT_MSG( !name.empty(), wxT("mutex name can't be empty") );
 
     m_impl = new wxSingleInstanceCheckerImpl;
 
@@ -119,7 +119,7 @@ bool wxSingleInstanceChecker::Create(con
 
 bool wxSingleInstanceChecker::IsAnotherRunning() const
 {
-    wxCHECK_MSG( m_impl, false, _T("must call Create() first") );
+    wxCHECK_MSG( m_impl, false, wxT("must call Create() first") );
 
     return m_impl->IsAnotherRunning();
 }
--- src/os2/combobox.cpp-orig	2009-06-21 16:25:15.055556000 -0500
+++ src/os2/combobox.cpp	2009-06-21 16:25:20.520077000 -0500
@@ -140,7 +140,7 @@ bool wxComboBox::Create(
         lSstyle |= CBS_DROPDOWN;
 
 
-    if (!OS2CreateControl( _T("COMBOBOX")
+    if (!OS2CreateControl( wxT("COMBOBOX")
                           ,lSstyle
                          ))
         return false;
--- src/os2/toolbar.cpp-orig	2009-06-21 16:25:25.744118000 -0500
+++ src/os2/toolbar.cpp	2009-06-21 16:25:29.396832000 -0500
@@ -929,7 +929,7 @@ void wxToolBar::SetRows(
   int                               nRows
 )
 {
-    wxCHECK_RET( nRows != 0, _T("max number of rows must be > 0") );
+    wxCHECK_RET( nRows != 0, wxT("max number of rows must be > 0") );
 
     m_maxCols = (GetToolsCount() + nRows - 1) / nRows;
     Refresh();
--- src/os2/dialog.cpp-orig	2009-06-21 16:25:33.744343000 -0500
+++ src/os2/dialog.cpp	2009-06-21 16:25:41.806946000 -0500
@@ -243,7 +243,7 @@ bool wxDialog::Show( bool bShow )
 //
 int wxDialog::ShowModal()
 {
-    wxASSERT_MSG( !IsModal(), _T("wxDialog::ShowModal() reentered?") );
+    wxASSERT_MSG( !IsModal(), wxT("wxDialog::ShowModal() reentered?") );
 
     m_endModalCalled = false;
 
@@ -311,7 +311,7 @@ void wxDialog::EndModal(
   int                               nRetCode
 )
 {
-    wxASSERT_MSG( IsModal(), _T("EndModal() called for non modal dialog") );
+    wxASSERT_MSG( IsModal(), wxT("EndModal() called for non modal dialog") );
 
     m_endModalCalled = true;
     SetReturnCode(nRetCode);
--- src/os2/mimetype.cpp-orig	2009-06-21 16:25:47.680570000 -0500
+++ src/os2/mimetype.cpp	2009-06-21 16:26:00.851487000 -0500
@@ -73,9 +73,9 @@ wxString wxFileTypeImpl::GetCommand(cons
     wxLogNull nolog;
     wxString strKey;
 
-    if ( wxRegKey(wxRegKey::HKCR, m_ext + _T("\\shell")).Exists() )
+    if ( wxRegKey(wxRegKey::HKCR, m_ext + wxT("\\shell")).Exists() )
         strKey = m_ext;
-    if ( wxRegKey(wxRegKey::HKCR, m_strFileType + _T("\\shell")).Exists() )
+    if ( wxRegKey(wxRegKey::HKCR, m_strFileType + wxT("\\shell")).Exists() )
         strKey = m_strFileType;
 
     if ( !strKey )
@@ -85,7 +85,7 @@ wxString wxFileTypeImpl::GetCommand(cons
     }
 
     strKey << wxT("\\shell\\") << verb;
-    wxRegKey key(wxRegKey::HKCR, strKey + _T("\\command"));
+    wxRegKey key(wxRegKey::HKCR, strKey + wxT("\\command"));
     wxString command;
     if ( key.Open() ) {
         // it's the default value of the key
@@ -114,25 +114,25 @@ wxString wxFileTypeImpl::GetCommand(cons
 #if wxUSE_DDE
             // look whether we must issue some DDE requests to the application
             // (and not just launch it)
-            strKey += _T("\\DDEExec");
+            strKey += wxT("\\DDEExec");
             wxRegKey keyDDE(wxRegKey::HKCR, strKey);
             if ( keyDDE.Open() ) {
                 wxString ddeCommand, ddeServer, ddeTopic;
-                keyDDE.QueryValue(_T(""), ddeCommand);
-                ddeCommand.Replace(_T("%1"), _T("%s"));
+                keyDDE.QueryValue(wxT(""), ddeCommand);
+                ddeCommand.Replace(wxT("%1"), wxT("%s"));
 
-                wxRegKey(wxRegKey::HKCR, strKey + _T("\\Application")).
-                    QueryValue(_T(""), ddeServer);
-                wxRegKey(wxRegKey::HKCR, strKey + _T("\\Topic")).
-                    QueryValue(_T(""), ddeTopic);
+                wxRegKey(wxRegKey::HKCR, strKey + wxT("\\Application")).
+                    QueryValue(wxT(""), ddeServer);
+                wxRegKey(wxRegKey::HKCR, strKey + wxT("\\Topic")).
+                    QueryValue(wxT(""), ddeTopic);
 
                 // HACK: we use a special feature of wxExecute which exists
                 //       just because we need it here: it will establish DDE
                 //       conversation with the program it just launched
-                command.Prepend(_T("WX_DDE#"));
-                command << _T('#') << ddeServer
-                        << _T('#') << ddeTopic
-                        << _T('#') << ddeCommand;
+                command.Prepend(wxT("WX_DDE#"));
+                command << wxT('#') << ddeServer
+                        << wxT('#') << ddeTopic
+                        << wxT('#') << ddeCommand;
             }
             else
 #endif // wxUSE_DDE
--- src/os2/stattext.cpp-orig	2009-06-21 16:26:06.365206000 -0500
+++ src/os2/stattext.cpp	2009-06-21 16:26:11.050218000 -0500
@@ -131,7 +131,7 @@ wxSize wxStaticText::DoGetBestSize() con
                 if (!nHeightLineDefault)
                     nHeightLineDefault = nHeightLine;
                 if (!nHeightLineDefault)
-                    GetTextExtent(_T("W"), NULL, &nHeightLineDefault);
+                    GetTextExtent(wxT("W"), NULL, &nHeightLineDefault);
                 nHeightTextTotal += nHeightLineDefault;
             }
             else
@@ -162,7 +162,7 @@ wxSize wxStaticText::DoGetBestSize() con
             // when it is preceded by another '~' in which case it stands for a
             // literal tilde
             //
-            if (*pc == _T('~'))
+            if (*pc == wxT('~'))
             {
                 if (!bLastWasTilde)
                 {
--- src/os2/statbmp.cpp-orig	2009-06-21 16:26:38.281131000 -0500
+++ src/os2/statbmp.cpp	2009-06-21 16:26:42.755121000 -0500
@@ -43,7 +43,7 @@ static wxGDIImage* ConvertImage(
     if(!bIsIcon )
     {
         wxASSERT_MSG( wxDynamicCast(&rBitmap, wxBitmap),
-                      _T("not an icon and not a bitmap?") );
+                      wxT("not an icon and not a bitmap?") );
 
         const wxBitmap&             rBmp = (const wxBitmap&)rBitmap;
         wxMask*                     pMask = rBmp.GetMask();
--- src/os2/listctrl.cpp-orig	2009-06-21 16:26:16.389741000 -0500
+++ src/os2/listctrl.cpp	2009-06-21 16:26:32.636300000 -0500
@@ -702,7 +702,7 @@ void ConvertToOS2ListItem (
                     break;
 
                 default:
-                    wxFAIL_MSG( _T("wxOS2 does not support more than 10 columns in REPORT view") );
+                    wxFAIL_MSG( wxT("wxOS2 does not support more than 10 columns in REPORT view") );
                     break;
             }
         }
@@ -2220,7 +2220,7 @@ long wxListCtrl::InsertItem (
   wxListItem&                       rInfo
 )
 {
-    wxASSERT_MSG( !IsVirtual(), _T("can't be used with virtual controls") );
+    wxASSERT_MSG( !IsVirtual(), wxT("can't be used with virtual controls") );
 
     PFIELDINFO                      pFieldInfo = FindOS2ListFieldByColNum ( GetHWND()
                                                                            ,rInfo.GetColumn()
@@ -2440,7 +2440,7 @@ bool wxListCtrl::SortItems ( wxListCtrlC
                       ,(PVOID)&vInternalData
                      ))
     {
-        wxLogDebug(_T("CM_SORTRECORD failed"));
+        wxLogDebug(wxT("CM_SORTRECORD failed"));
         return false;
     }
     return true;
@@ -2573,7 +2573,7 @@ wxString wxListCtrl::OnGetItemText (
 {
     // this is a pure virtual function, in fact - which is not really pure
     // because the controls which are not virtual don't need to implement it
-    wxFAIL_MSG( _T("not supposed to be called") );
+    wxFAIL_MSG( wxT("not supposed to be called") );
     return wxEmptyString;
 } // end of wxListCtrl::OnGetItemText
 
@@ -2582,7 +2582,7 @@ int wxListCtrl::OnGetItemImage (
 ) const
 {
     // same as above
-    wxFAIL_MSG( _T("not supposed to be called") );
+    wxFAIL_MSG( wxT("not supposed to be called") );
     return -1;
 } // end of wxListCtrl::OnGetItemImage
 
@@ -2602,7 +2602,7 @@ wxListItemAttr* wxListCtrl::OnGetItemAtt
 ) const
 {
     wxASSERT_MSG( lItem >= 0 && lItem < GetItemCount(),
-                  _T("invalid item index in OnGetItemAttr()") );
+                  wxT("invalid item index in OnGetItemAttr()") );
 
     //
     // No attributes by default
@@ -2614,7 +2614,7 @@ void wxListCtrl::SetItemCount (
   long                              lCount
 )
 {
-    wxASSERT_MSG( IsVirtual(), _T("this is for virtual controls only") );
+    wxASSERT_MSG( IsVirtual(), wxT("this is for virtual controls only") );
 
     //
     // Cannot explicitly set the record count in OS/2
--- src/os2/region.cpp-orig	2009-06-21 16:26:47.536161000 -0500
+++ src/os2/region.cpp	2009-06-21 16:26:51.957168000 -0500
@@ -260,7 +260,7 @@ bool wxRegion::DoOffset( wxCoord x, wxCo
 #if 0
     if ( ::OffsetRgn(GetHrgn(), x, y) == ERROR )
     {
-        wxLogLastError(_T("OffsetRgn"));
+        wxLogLastError(wxT("OffsetRgn"));
 
         return false;
     }
@@ -297,7 +297,7 @@ bool wxRegion::DoCombine( const wxRegion
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown region operation") );
+                wxFAIL_MSG( wxT("unknown region operation") );
                 // fall through
 
             case wxRGN_AND:
--- src/os2/bitmap.cpp-orig	2009-06-21 16:26:56.511607000 -0500
+++ src/os2/bitmap.cpp	2009-06-21 16:27:01.299513000 -0500
@@ -1566,7 +1566,7 @@ HBITMAP wxInvertMask(
 {
     HBITMAP                         hBmpInvMask = 0;
 
-    wxCHECK_MSG( hBmpMask, 0, _T("invalid bitmap in wxInvertMask") );
+    wxCHECK_MSG( hBmpMask, 0, wxT("invalid bitmap in wxInvertMask") );
 
     //
     // Get width/height from the bitmap if not given
@@ -1628,7 +1628,7 @@ HBITMAP wxInvertMask(
 
 HBITMAP wxCopyBmp( HBITMAP hBmp, bool flip, int nWidth, int nHeight )
 {
-    wxCHECK_MSG( hBmp, 0, _T("invalid bitmap in wxCopyBmp") );
+    wxCHECK_MSG( hBmp, 0, wxT("invalid bitmap in wxCopyBmp") );
 
     //
     // Get width/height from the bitmap if not given
--- src/os2/utilsgui.cpp-orig	2009-06-21 16:27:06.939336000 -0500
+++ src/os2/utilsgui.cpp	2009-06-21 16:27:12.560759000 -0500
@@ -140,7 +140,7 @@ bool wxGetResource( const wxString& rSec
 {
     HAB    hab = 0;
     HINI   hIni = 0;
-    wxChar zDefunkt[] = _T("$$default");
+    wxChar zDefunkt[] = wxT("$$default");
     char   zBuf[1000];
 
     if (!rFile.empty())
@@ -264,7 +264,7 @@ void wxBeginBusyCursor(const wxCursor* p
 void wxEndBusyCursor()
 {
     wxCHECK_RET( gs_wxBusyCursorCount > 0
-                ,_T("no matching wxBeginBusyCursor() for wxEndBusyCursor()")
+                ,wxT("no matching wxBeginBusyCursor() for wxEndBusyCursor()")
                );
 
     if (--gs_wxBusyCursorCount == 0)
@@ -298,7 +298,7 @@ bool wxCheckForInterrupt( wxWindow* pWnd
     }
     else
     {
-        wxFAIL_MSG(_T("pWnd==NULL !!!"));
+        wxFAIL_MSG(wxT("pWnd==NULL !!!"));
         return false;//*** temporary?
     }
 }
--- src/os2/filedlg.cpp-orig	2009-06-21 16:27:17.134649000 -0500
+++ src/os2/filedlg.cpp	2009-06-21 16:27:25.280296000 -0500
@@ -92,8 +92,8 @@ void wxFileDialog::GetPaths (
     size_t                          nCount = m_fileNames.GetCount();
 
     rasPaths.Empty();
-    if (m_dir.Last() != _T('\\'))
-        sDir += _T('\\');
+    if (m_dir.Last() != wxT('\\'))
+        sDir += wxT('\\');
 
     for ( size_t n = 0; n < nCount; n++ )
     {
@@ -157,21 +157,21 @@ int wxFileDialog::ShowModal()
 
         switch (ch)
         {
-            case _T('/'):
+            case wxT('/'):
                 //
                 // Convert to backslash
                 //
-                ch = _T('\\');
+                ch = wxT('\\');
 
                 //
                 // Fall through
                 //
-            case _T('\\'):
+            case wxT('\\'):
                 while (i < nLen - 1)
                 {
                     wxChar          chNext = m_dir[i + 1];
 
-                    if (chNext != _T('\\') && chNext != _T('/'))
+                    if (chNext != wxT('\\') && chNext != wxT('/'))
                         break;
 
                     //
--- src/os2/settings.cpp-orig	2009-06-21 16:27:30.710238000 -0500
+++ src/os2/settings.cpp	2009-06-21 16:27:34.875036000 -0500
@@ -248,7 +248,7 @@ wxFont wxSystemSettingsNative::GetFont(
                               wxFONTWEIGHT_NORMAL   );
                 break;
         default:
-                wxFAIL_MSG( _T("stock font not found") );
+                wxFAIL_MSG( wxT("stock font not found") );
                 return GetFont(wxSYS_ANSI_VAR_FONT);
     }
 
--- src/os2/dcprint.cpp-orig	2009-06-21 16:27:39.725446000 -0500
+++ src/os2/dcprint.cpp	2009-06-21 16:27:44.953590000 -0500
@@ -347,7 +347,7 @@ void wxPrinterDC::DoDrawBitmap( const wx
                                 wxCoord WXUNUSED(vY),
                                 bool WXUNUSED(bUseMask))
 {
-    wxCHECK_RET( rBmp.Ok(), _T("invalid bitmap in wxPrinterDC::DrawBitmap") );
+    wxCHECK_RET( rBmp.Ok(), wxT("invalid bitmap in wxPrinterDC::DrawBitmap") );
 
 //    int                             nWidth  = rBmp.GetWidth();
 //    int                             nHeight = rBmp.GetHeight();
--- src/os2/evtloop.cpp-orig	2009-06-21 16:27:56.855489000 -0500
+++ src/os2/evtloop.cpp	2009-06-21 16:28:03.134171000 -0500
@@ -205,7 +205,7 @@ bool wxEventLoopImpl::SendIdleMessage()
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 //////////////////////////////////////////////////////////////////////////////
@@ -240,7 +240,7 @@ private:
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     // SendIdleMessage() and Dispatch() below may throw so the code here should
     // be exception-safe, hence we must use local objects for all actions we
@@ -284,7 +284,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
 
@@ -303,7 +303,7 @@ bool wxEventLoop::Pending() const
 
 bool wxEventLoop::Dispatch()
 {
-    wxCHECK_MSG( IsRunning(), false, _T("can't call Dispatch() if not running") );
+    wxCHECK_MSG( IsRunning(), false, wxT("can't call Dispatch() if not running") );
 
     QMSG msg;
     BOOL bRc = ::WinGetMsg(vHabmain, &msg, (HWND) NULL, 0, 0);
--- src/os2/brush.cpp-orig	2009-06-21 16:28:07.389084000 -0500
+++ src/os2/brush.cpp	2009-06-21 16:28:11.924082000 -0500
@@ -123,7 +123,7 @@ bool wxBrush::RealizeResource()
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Unable to set current color table to RGB mode. Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Unable to set current color table to RGB mode. Error: %s\n"), sError.c_str());
             return false;
         }
 
@@ -205,7 +205,7 @@ bool wxBrush::RealizeResource()
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Can't set Gpi attributes for an AREABUNDLE. Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Can't set Gpi attributes for an AREABUNDLE. Error: %s\n"), sError.c_str());
         }
         return bOk;
     }
--- src/os2/frame.cpp-orig	2009-06-21 16:28:15.869056000 -0500
+++ src/os2/frame.cpp	2009-06-21 16:28:21.331904000 -0500
@@ -286,7 +286,7 @@ void wxFrame::PositionStatusBar()
         {
             vError = ::WinGetLastError(vHabmain);
             sError = wxPMErrorToStr(vError);
-            wxLogError(_T("Error setting parent for StatusBar. Error: %s\n"), sError.c_str());
+            wxLogError(wxT("Error setting parent for StatusBar. Error: %s\n"), sError.c_str());
             return;
         }
     }
@@ -410,14 +410,14 @@ void wxFrame::InternalSetMenuBar()
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Error setting parent for submenu. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Error setting parent for submenu. Error: %s\n"), sError.c_str());
     }
 
     if (!::WinSetOwner(m_hMenu, m_hFrame))
     {
         vError = ::WinGetLastError(vHabmain);
         sError = wxPMErrorToStr(vError);
-        wxLogError(_T("Error setting parent for submenu. Error: %s\n"), sError.c_str());
+        wxLogError(wxT("Error setting parent for submenu. Error: %s\n"), sError.c_str());
     }
     ::WinSendMsg(m_hFrame, WM_UPDATEFRAME, (MPARAM)FCF_MENU, (MPARAM)0);
 } // end of wxFrame::InternalSetMenuBar
--- src/gtk1/font.cpp-orig	2009-06-21 16:07:30.183801000 -0500
+++ src/gtk1/font.cpp	2009-06-21 16:07:36.668635000 -0500
@@ -104,14 +104,14 @@ public:
 #if defined(__WXDEBUG__)
     void Dump() const
     {
-        wxPrintf(_T("%s-%s-%s-%d-%d\n"),
+        wxPrintf(wxT("%s-%s-%s-%d-%d\n"),
                  m_faceName.c_str(),
                  m_weight == wxFONTWEIGHT_NORMAL
-                    ? _T("normal")
+                    ? wxT("normal")
                     : m_weight == wxFONTWEIGHT_BOLD
-                        ? _T("bold")
-                        : _T("light"),
-                 m_style == wxFONTSTYLE_NORMAL ? _T("regular") : _T("italic"),
+                        ? wxT("bold")
+                        : wxT("light"),
+                 m_style == wxFONTSTYLE_NORMAL ? wxT("regular") : wxT("italic"),
                  m_pointSize,
                  m_encoding);
     }
@@ -199,17 +199,17 @@ void wxFontRefData::InitFromNative()
     m_weight = wxFONTWEIGHT_NORMAL;
 
     wxString w = m_nativeFontInfo.GetXFontComponent(wxXLFD_WEIGHT).Upper();
-    if ( !w.empty() && w != _T('*') )
+    if ( !w.empty() && w != wxT('*') )
     {
         // the test below catches all of BOLD, EXTRABOLD, DEMIBOLD, ULTRABOLD
         // and BLACK
-        if ( ((w[0u] == _T('B') && (!wxStrcmp(w.c_str() + 1, wxT("OLD")) ||
+        if ( ((w[0u] == wxT('B') && (!wxStrcmp(w.c_str() + 1, wxT("OLD")) ||
                                    !wxStrcmp(w.c_str() + 1, wxT("LACK"))))) ||
-             wxStrstr(w.c_str() + 1, _T("BOLD")) )
+             wxStrstr(w.c_str() + 1, wxT("BOLD")) )
         {
             m_weight = wxFONTWEIGHT_BOLD;
         }
-        else if ( w == _T("LIGHT") || w == _T("THIN") )
+        else if ( w == wxT("LIGHT") || w == wxT("THIN") )
         {
             m_weight = wxFONTWEIGHT_LIGHT;
         }
@@ -218,11 +218,11 @@ void wxFontRefData::InitFromNative()
     switch ( wxToupper(*m_nativeFontInfo.
                             GetXFontComponent(wxXLFD_SLANT).c_str()) )
     {
-        case _T('I'):   // italique
+        case wxT('I'):   // italique
             m_style = wxFONTSTYLE_ITALIC;
             break;
 
-        case _T('O'):   // oblique
+        case wxT('O'):   // oblique
             m_style = wxFONTSTYLE_SLANT;
             break;
 
@@ -244,7 +244,7 @@ void wxFontRefData::InitFromNative()
     // examine the spacing: if the font is monospaced, assume wxTELETYPE
     // family for compatibility with the old code which used it instead of
     // IsFixedWidth()
-    if ( m_nativeFontInfo.GetXFontComponent(wxXLFD_SPACING).Upper() == _T('M') )
+    if ( m_nativeFontInfo.GetXFontComponent(wxXLFD_SPACING).Upper() == wxT('M') )
     {
         m_family = wxFONTFAMILY_TELETYPE;
     }
@@ -263,7 +263,7 @@ void wxFontRefData::InitFromNative()
         registry = m_nativeFontInfo.GetXFontComponent(wxXLFD_REGISTRY).Upper(),
         encoding = m_nativeFontInfo.GetXFontComponent(wxXLFD_ENCODING).Upper();
 
-    if ( registry == _T("ISO8859") )
+    if ( registry == wxT("ISO8859") )
     {
         int cp;
         if ( wxSscanf(encoding, wxT("%d"), &cp) == 1 )
@@ -271,7 +271,7 @@ void wxFontRefData::InitFromNative()
             m_encoding = (wxFontEncoding)(wxFONTENCODING_ISO8859_1 + cp - 1);
         }
     }
-    else if ( registry == _T("MICROSOFT") )
+    else if ( registry == wxT("MICROSOFT") )
     {
         int cp;
         if ( wxSscanf(encoding, wxT("cp125%d"), &cp) == 1 )
@@ -279,7 +279,7 @@ void wxFontRefData::InitFromNative()
             m_encoding = (wxFontEncoding)(wxFONTENCODING_CP1250 + cp);
         }
     }
-    else if ( registry == _T("KOI8") )
+    else if ( registry == wxT("KOI8") )
     {
         m_encoding = wxFONTENCODING_KOI8;
     }
@@ -357,9 +357,9 @@ void wxFontRefData::SetPointSize(int poi
     {
         wxString size;
         if ( pointSize == -1 )
-            size = _T('*');
+            size = wxT('*');
         else
-            size.Printf(_T("%d"), 10*pointSize);
+            size.Printf(wxT("%d"), 10*pointSize);
 
         m_nativeFontInfo.SetXFontComponent(wxXLFD_POINTSIZE, size);
     }
@@ -382,19 +382,19 @@ void wxFontRefData::SetStyle(int style)
         switch ( style )
         {
             case wxFONTSTYLE_ITALIC:
-                slant = _T('i');
+                slant = wxT('i');
                 break;
 
             case wxFONTSTYLE_SLANT:
-                slant = _T('o');
+                slant = wxT('o');
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown font style") );
+                wxFAIL_MSG( wxT("unknown font style") );
                 // fall through
 
             case wxFONTSTYLE_NORMAL:
-                slant = _T('r');
+                slant = wxT('r');
         }
 
         m_nativeFontInfo.SetXFontComponent(wxXLFD_SLANT, slant);
@@ -411,20 +411,20 @@ void wxFontRefData::SetWeight(int weight
         switch ( weight )
         {
             case wxFONTWEIGHT_BOLD:
-                boldness = _T("bold");
+                boldness = wxT("bold");
                 break;
 
             case wxFONTWEIGHT_LIGHT:
-                boldness = _T("light");
+                boldness = wxT("light");
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown font weight") );
+                wxFAIL_MSG( wxT("unknown font weight") );
                 // fall through
 
             case wxFONTWEIGHT_NORMAL:
                 // unspecified
-                boldness = _T("medium");
+                boldness = wxT("medium");
         }
 
         m_nativeFontInfo.SetXFontComponent(wxXLFD_WEIGHT, boldness);
@@ -622,7 +622,7 @@ bool wxFont::IsFixedWidth() const
         wxString spacing = M_FONTDATA->
                             m_nativeFontInfo.GetXFontComponent(wxXLFD_SPACING);
 
-        return spacing.Upper() == _T('M');
+        return spacing.Upper() == wxT('M');
     }
 
     return wxFontBase::IsFixedWidth();
--- src/gtk1/window.cpp-orig	2009-06-21 16:07:43.448432000 -0500
+++ src/gtk1/window.cpp	2009-06-21 16:07:56.498536000 -0500
@@ -248,7 +248,7 @@ extern bool g_mainThreadLocked;
 #endif // Debug
 
 // the trace mask used for the focus debugging messages
-#define TRACE_FOCUS _T("focus")
+#define TRACE_FOCUS wxT("focus")
 
 //-----------------------------------------------------------------------------
 // missing gdk functions
@@ -623,7 +623,7 @@ static void gtk_window_draw_callback( Gt
 //-----------------------------------------------------------------------------
 
 // set WXTRACE to this to see the key event codes on the console
-#define TRACE_KEYS  _T("keyevent")
+#define TRACE_KEYS  wxT("keyevent")
 
 // translates an X key symbol to WXK_XXX value
 //
@@ -955,9 +955,9 @@ wxTranslateGTKKeyEventToWx(wxKeyEvent& e
 
     KeySym keysym = gdk_event->keyval;
 
-    wxLogTrace(TRACE_KEYS, _T("Key %s event: keysym = %ld"),
-               event.GetEventType() == wxEVT_KEY_UP ? _T("release")
-                                                    : _T("press"),
+    wxLogTrace(TRACE_KEYS, wxT("Key %s event: keysym = %ld"),
+               event.GetEventType() == wxEVT_KEY_UP ? wxT("release")
+                                                    : wxT("press"),
                keysym);
 
     long key_code = wxTranslateKeySymToWXKey(keysym, false /* !isChar */);
@@ -986,7 +986,7 @@ wxTranslateGTKKeyEventToWx(wxKeyEvent& e
             Display *dpy = (Display *)wxGetDisplay();
             KeyCode keycode = XKeysymToKeycode(dpy, keysym);
 
-            wxLogTrace(TRACE_KEYS, _T("\t-> keycode %d"), keycode);
+            wxLogTrace(TRACE_KEYS, wxT("\t-> keycode %d"), keycode);
 
             KeySym keysymNormalized = XKeycodeToKeysym(dpy, keycode, 0);
 
@@ -1025,7 +1025,7 @@ wxTranslateGTKKeyEventToWx(wxKeyEvent& e
         }
     }
 
-    wxLogTrace(TRACE_KEYS, _T("\t-> wxKeyCode %ld"), key_code);
+    wxLogTrace(TRACE_KEYS, wxT("\t-> wxKeyCode %ld"), key_code);
 
     // sending unknown key events doesn't really make sense
     if ( !key_code )
@@ -1177,7 +1177,7 @@ static gint gtk_window_key_press_callbac
 
         if ( key_code )
         {
-            wxLogTrace(TRACE_KEYS, _T("Char event: %ld"), key_code);
+            wxLogTrace(TRACE_KEYS, wxT("Char event: %ld"), key_code);
 
             event.m_keyCode = key_code;
 
@@ -1821,7 +1821,7 @@ static gint gtk_window_focus_in_callback
     g_focusWindow = win;
 
     wxLogTrace(TRACE_FOCUS,
-               _T("%s: focus in"), win->GetName().c_str());
+               wxT("%s: focus in"), win->GetName().c_str());
 
 #ifdef HAVE_XIM
     if (win->m_ic)
@@ -1867,7 +1867,7 @@ static gint gtk_window_focus_out_callbac
         wxapp_install_idle_handler();
 
     wxLogTrace( TRACE_FOCUS,
-                _T("%s: focus out"), win->GetName().c_str() );
+                wxT("%s: focus out"), win->GetName().c_str() );
 
 
     wxWindowGTK *winFocus = wxFindFocusedChild(win);
@@ -3315,7 +3315,7 @@ void wxWindowGTK::SetFocus()
                 // it should be focused and will do it later, during the idle
                 // time, as soon as we can
                 wxLogTrace(TRACE_FOCUS,
-                           _T("Delaying setting focus to %s(%s)"),
+                           wxT("Delaying setting focus to %s(%s)"),
                            GetClassInfo()->GetClassName(), GetLabel().c_str());
 
                 g_delayedFocus = this;
@@ -3323,7 +3323,7 @@ void wxWindowGTK::SetFocus()
             else
             {
                 wxLogTrace(TRACE_FOCUS,
-                           _T("Setting focus to %s(%s)"),
+                           wxT("Setting focus to %s(%s)"),
                            GetClassInfo()->GetClassName(), GetLabel().c_str());
 
                 gtk_widget_grab_focus (m_widget);
@@ -3337,7 +3337,7 @@ void wxWindowGTK::SetFocus()
         else
         {
            wxLogTrace(TRACE_FOCUS,
-                      _T("Can't set focus to %s(%s)"),
+                      wxT("Can't set focus to %s(%s)"),
                       GetClassInfo()->GetClassName(), GetLabel().c_str());
         }
     }
@@ -3940,7 +3940,7 @@ void wxWindowGTK::DoCaptureMouse()
     else
         window = GetConnectWidget()->window;
 
-    wxCHECK_RET( window, _T("CaptureMouse() failed") );
+    wxCHECK_RET( window, wxT("CaptureMouse() failed") );
 
     const wxCursor* cursor = &m_cursor;
     if (!cursor->Ok())
--- src/gtk1/toplevel.cpp-orig	2009-06-21 16:08:01.510313000 -0500
+++ src/gtk1/toplevel.cpp	2009-06-21 16:08:11.608838000 -0500
@@ -656,7 +656,7 @@ wxTopLevelWindowGTK::~wxTopLevelWindowGT
 {
     if (m_grabbed)
     {
-        wxASSERT_MSG( false, _T("Window still grabbed"));
+        wxASSERT_MSG( false, wxT("Window still grabbed"));
         RemoveGrab();
     }
 
@@ -1043,8 +1043,8 @@ void wxTopLevelWindowGTK::OnInternalIdle
         if ( g_delayedFocus &&
              wxGetTopLevelParent((wxWindow*)g_delayedFocus) == this )
         {
-            wxLogTrace(_T("focus"),
-                       _T("Setting focus from wxTLW::OnIdle() to %s(%s)"),
+            wxLogTrace(wxT("focus"),
+                       wxT("Setting focus from wxTLW::OnIdle() to %s(%s)"),
                        g_delayedFocus->GetClassInfo()->GetClassName(),
                        g_delayedFocus->GetLabel().c_str());
 
@@ -1121,12 +1121,12 @@ void wxTopLevelWindowGTK::SetIcons( cons
 
 void wxTopLevelWindowGTK::Maximize(bool maximize)
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 bool wxTopLevelWindowGTK::IsMaximized() const
 {
-  //    wxFAIL_MSG( _T("not implemented") );
+  //    wxFAIL_MSG( wxT("not implemented") );
 
     // This is an approximation
     return false;
@@ -1134,7 +1134,7 @@ bool wxTopLevelWindowGTK::IsMaximized() 
 
 void wxTopLevelWindowGTK::Restore()
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 void wxTopLevelWindowGTK::Iconize( bool iconize )
@@ -1144,7 +1144,7 @@ void wxTopLevelWindowGTK::Iconize( bool 
        GdkWindow *window = m_widget->window;
 
        // you should do it later, for example from OnCreate() handler
-       wxCHECK_RET( window, _T("frame not created yet - can't iconize") );
+       wxCHECK_RET( window, wxT("frame not created yet - can't iconize") );
 
        XIconifyWindow( GDK_WINDOW_XDISPLAY( window ),
                        GDK_WINDOW_XWINDOW( window ),
@@ -1212,7 +1212,7 @@ static bool do_shape_combine_region(GdkW
 bool wxTopLevelWindowGTK::SetShape(const wxRegion& region)
 {
     wxCHECK_MSG( HasFlag(wxFRAME_SHAPED), false,
-                 _T("Shaped windows must be created with the wxFRAME_SHAPED style."));
+                 wxT("Shaped windows must be created with the wxFRAME_SHAPED style."));
 
     GdkWindow *window = NULL;
     if (m_wxwindow)
--- src/gtk1/dataobj.cpp-orig	2009-06-21 16:08:16.806595000 -0500
+++ src/gtk1/dataobj.cpp	2009-06-21 16:08:22.613950000 -0500
@@ -258,12 +258,12 @@ bool wxFileDataObject::SetData(size_t WX
         if ( (*p == '\r' && *(p+1) == '\n') || !*p )
         {
             size_t lenPrefix = 5; // strlen("file:")
-            if ( filename.Left(lenPrefix).MakeLower() == _T("file:") )
+            if ( filename.Left(lenPrefix).MakeLower() == wxT("file:") )
             {
                 // sometimes the syntax is "file:filename", sometimes it's
                 // URL-like: "file://filename" - deal with both
-                if ( filename[lenPrefix] == _T('/') &&
-                     filename[lenPrefix + 1] == _T('/') )
+                if ( filename[lenPrefix] == wxT('/') &&
+                     filename[lenPrefix + 1] == wxT('/') )
                 {
                     // skip the slashes
                     lenPrefix += 2;
@@ -274,7 +274,7 @@ bool wxFileDataObject::SetData(size_t WX
             }
             else
             {
-                wxLogDebug(_T("Unsupported URI '%s' in wxFileDataObject"),
+                wxLogDebug(wxT("Unsupported URI '%s' in wxFileDataObject"),
                            filename.c_str());
             }
 
--- src/gtk1/notebook.cpp-orig	2009-06-21 16:08:27.339968000 -0500
+++ src/gtk1/notebook.cpp	2009-06-21 16:08:33.456546000 -0500
@@ -97,7 +97,7 @@ static void gtk_notebook_page_change_cal
     // are you trying to call SetSelection() from a notebook event handler?
     // you shouldn't!
     wxCHECK_RET( !notebook->m_inSwitchPage,
-                 _T("gtk_notebook_page_change_callback reentered") );
+                 wxT("gtk_notebook_page_change_callback reentered") );
 
     notebook->m_inSwitchPage = true;
     if (g_isIdle)
@@ -237,7 +237,7 @@ static gint gtk_notebook_key_press_callb
         if (sel == -1)
             return TRUE;
         wxGtkNotebookPage *nb_page = notebook->GetNotebookPage(sel);
-        wxCHECK_MSG( nb_page, FALSE, _T("invalid selection in wxNotebook") );
+        wxCHECK_MSG( nb_page, FALSE, wxT("invalid selection in wxNotebook") );
 
         wxNavigationKeyEvent event;
         event.SetEventObject( notebook );
@@ -598,7 +598,7 @@ bool wxNotebook::DeleteAllPages()
     while (m_pagesData.GetCount() > 0)
         DeletePage( m_pagesData.GetCount()-1 );
 
-    wxASSERT_MSG( GetPageCount() == 0, _T("all pages must have been deleted") );
+    wxASSERT_MSG( GetPageCount() == 0, wxT("all pages must have been deleted") );
 
     InvalidateBestSize();
     return wxNotebookBase::DeleteAllPages();
@@ -650,7 +650,7 @@ bool wxNotebook::InsertPage( size_t posi
                wxT("Can't add a page whose parent is not the notebook!") );
 
     wxCHECK_MSG( position <= GetPageCount(), FALSE,
-                 _T("invalid page index in wxNotebookPage::InsertPage()") );
+                 wxT("invalid page index in wxNotebookPage::InsertPage()") );
 
     // Hack Alert! (Part II): See above in wxInsertChildInNotebook callback
     // why this has to be done.  NOTE: using gtk_widget_unparent here does not
--- src/gtk1/glcanvas.cpp-orig	2009-06-21 16:08:38.504730000 -0500
+++ src/gtk1/glcanvas.cpp	2009-06-21 16:08:48.661402000 -0500
@@ -71,18 +71,18 @@ wxGLContext::wxGLContext( bool WXUNUSED(
     {
         // GLX >= 1.3
         GLXFBConfig *fbc = gc->m_fbc;
-        wxCHECK_RET( fbc, _T("invalid GLXFBConfig for OpenGl") );
+        wxCHECK_RET( fbc, wxT("invalid GLXFBConfig for OpenGl") );
         m_glContext = glXCreateNewContext( GDK_DISPLAY(), fbc[0], GLX_RGBA_TYPE, None, GL_TRUE );
     }
     else
     {
         // GLX <= 1.2
         XVisualInfo *vi = (XVisualInfo *) gc->m_vi;
-        wxCHECK_RET( vi, _T("invalid visual for OpenGl") );
+        wxCHECK_RET( vi, wxT("invalid visual for OpenGl") );
         m_glContext = glXCreateContext( GDK_DISPLAY(), vi, None, GL_TRUE );
     }
 
-    wxCHECK_RET( m_glContext, _T("Couldn't create OpenGl context") );
+    wxCHECK_RET( m_glContext, wxT("Couldn't create OpenGl context") );
 }
 
 wxGLContext::wxGLContext(
@@ -100,7 +100,7 @@ wxGLContext::wxGLContext(
     {
         // GLX >= 1.3
         GLXFBConfig *fbc = gc->m_fbc;
-        wxCHECK_RET( fbc, _T("invalid GLXFBConfig for OpenGl") );
+        wxCHECK_RET( fbc, wxT("invalid GLXFBConfig for OpenGl") );
         m_glContext = glXCreateNewContext( GDK_DISPLAY(), fbc[0], GLX_RGBA_TYPE,
                                            other ? other->m_glContext : None,
                                            GL_TRUE );
@@ -109,7 +109,7 @@ wxGLContext::wxGLContext(
     {
         // GLX <= 1.2
         XVisualInfo *vi = (XVisualInfo *) gc->m_vi;
-        wxCHECK_RET( vi, _T("invalid visual for OpenGl") );
+        wxCHECK_RET( vi, wxT("invalid visual for OpenGl") );
         m_glContext = glXCreateContext( GDK_DISPLAY(), vi,
                                         other ? other->m_glContext : None,
                                         GL_TRUE );
@@ -117,7 +117,7 @@ wxGLContext::wxGLContext(
 
     if ( !m_glContext )
     {
-        wxFAIL_MSG( _T("Couldn't create OpenGl context") );
+        wxFAIL_MSG( wxT("Couldn't create OpenGl context") );
     }
 }
 
@@ -367,7 +367,7 @@ bool wxGLCanvas::Create( wxWindow *paren
             m_canFreeFBC = true;
         }
         m_fbc = fbc;  // save for later use
-        wxCHECK_MSG( m_fbc, false, _T("required FBConfig couldn't be found") );
+        wxCHECK_MSG( m_fbc, false, wxT("required FBConfig couldn't be found") );
     }
 
     XVisualInfo *vi = NULL;
@@ -390,7 +390,7 @@ bool wxGLCanvas::Create( wxWindow *paren
 
     m_vi = vi;  // save for later use
 
-    wxCHECK_MSG( m_vi, false, _T("required visual couldn't be found") );
+    wxCHECK_MSG( m_vi, false, wxT("required visual couldn't be found") );
     GdkVisual *visual;
     GdkColormap *colormap;
 
@@ -610,7 +610,7 @@ void wxGLCanvas::QueryGLXVersion()
         // check the GLX version
         int glxMajorVer, glxMinorVer;
         bool ok = glXQueryVersion(GDK_DISPLAY(), &glxMajorVer, &glxMinorVer);
-        wxASSERT_MSG( ok, _T("GLX version not found") );
+        wxASSERT_MSG( ok, wxT("GLX version not found") );
         if (!ok)
             m_glxVersion = 10; // 1.0 by default
         else
@@ -620,7 +620,7 @@ void wxGLCanvas::QueryGLXVersion()
 
 int wxGLCanvas::GetGLXVersion()
 {
-    wxASSERT_MSG( m_glxVersion>0, _T("GLX version has not been initialized with wxGLCanvas::QueryGLXVersion()") );
+    wxASSERT_MSG( m_glxVersion>0, wxT("GLX version has not been initialized with wxGLCanvas::QueryGLXVersion()") );
     return m_glxVersion;
 }
 
--- src/gtk1/textctrl.cpp-orig	2009-06-21 16:08:54.604120000 -0500
+++ src/gtk1/textctrl.cpp	2009-06-21 16:09:02.279470000 -0500
@@ -87,7 +87,7 @@ gtk_insert_text_callback(GtkEditable *ed
     // we should only be called if we have a max len limit at all
     GtkEntry *entry = GTK_ENTRY (editable);
 
-    wxCHECK_RET( entry->text_max_length, _T("shouldn't be called") );
+    wxCHECK_RET( entry->text_max_length, wxT("shouldn't be called") );
 
     // check that we don't overflow the max length limit
     //
@@ -176,7 +176,7 @@ static void wxgtk_text_draw( GtkWidget *
     if ( !wxIsInsideYield )
     {
         wxCHECK_RET( gs_gtk_text_draw != wxgtk_text_draw,
-                     _T("infinite recursion in wxgtk_text_draw aborted") );
+                     wxT("infinite recursion in wxgtk_text_draw aborted") );
 
         gs_gtk_text_draw(widget, rect);
     }
@@ -810,7 +810,7 @@ void wxTextCtrl::SetSelection( long from
          !GTK_TEXT(m_text)->line_start_cache )
     {
         // tell the programmer that it didn't work
-        wxLogDebug(_T("Can't call SetSelection() before realizing the control"));
+        wxLogDebug(wxT("Can't call SetSelection() before realizing the control"));
         return;
     }
 
@@ -1065,7 +1065,7 @@ void wxTextCtrl::ChangeFontGlobally()
     // possible!
     wxASSERT_MSG( (m_windowStyle & wxTE_MULTILINE) && m_updateFont,
 
-                  _T("shouldn't be called for single line controls") );
+                  wxT("shouldn't be called for single line controls") );
 
     wxString value = GetValue();
     if ( !value.empty() )
@@ -1139,7 +1139,7 @@ bool wxTextCtrl::SetStyle( long start, l
         gint l = gtk_text_get_length( GTK_TEXT(m_text) );
 
         wxCHECK_MSG( start >= 0 && end <= l, false,
-                     _T("invalid range in wxTextCtrl::SetStyle") );
+                     wxT("invalid range in wxTextCtrl::SetStyle") );
 
         gint old_pos = gtk_editable_get_position( GTK_EDITABLE(m_text) );
         char *text = gtk_editable_get_chars( GTK_EDITABLE(m_text), start, end );
--- src/gtk1/tbargtk.cpp-orig	2009-06-21 16:12:12.407038000 -0500
+++ src/gtk1/tbargtk.cpp	2009-06-21 16:12:19.583001000 -0500
@@ -112,7 +112,7 @@ public:
                 return GTK_TOOLBAR_CHILD_RADIOBUTTON;
 
             default:
-                wxFAIL_MSG( _T("unknown toolbar child type") );
+                wxFAIL_MSG( wxT("unknown toolbar child type") );
                 // fall through
 
             case wxITEM_NORMAL:
@@ -438,7 +438,7 @@ bool wxToolBar::DoInsertTool(size_t pos,
 
                 if ( !tool->m_item )
                 {
-                    wxFAIL_MSG( _T("gtk_toolbar_insert_element() failed") );
+                    wxFAIL_MSG( wxT("gtk_toolbar_insert_element() failed") );
 
                     return false;
                 }
@@ -535,7 +535,7 @@ void wxToolBar::DoSetToggle(wxToolBarToo
                             bool WXUNUSED(toggle))
 {
     // VZ: absolutely no idea about how to do it
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 // ----------------------------------------------------------------------------
@@ -546,7 +546,7 @@ wxToolBarToolBase *wxToolBar::FindToolFo
                                                   wxCoord WXUNUSED(y)) const
 {
     // VZ: GTK+ doesn't seem to have such thing
-    wxFAIL_MSG( _T("wxToolBar::FindToolForPosition() not implemented") );
+    wxFAIL_MSG( wxT("wxToolBar::FindToolForPosition() not implemented") );
 
     return (wxToolBarToolBase *)NULL;
 }
--- src/gtk1/dcclient.cpp-orig	2009-06-21 16:12:24.491121000 -0500
+++ src/gtk1/dcclient.cpp	2009-06-21 16:12:32.424198000 -0500
@@ -91,9 +91,9 @@ void gdk_wx_draw_bitmap(GdkDrawable  *dr
                         gint         width,
                         gint         height)
 {
-    wxCHECK_RET( drawable, _T("NULL drawable in gdk_wx_draw_bitmap") );
-    wxCHECK_RET( src, _T("NULL src in gdk_wx_draw_bitmap") );
-    wxCHECK_RET( gc, _T("NULL gc in gdk_wx_draw_bitmap") );
+    wxCHECK_RET( drawable, wxT("NULL drawable in gdk_wx_draw_bitmap") );
+    wxCHECK_RET( src, wxT("NULL src in gdk_wx_draw_bitmap") );
+    wxCHECK_RET( gc, wxT("NULL gc in gdk_wx_draw_bitmap") );
 
     GdkWindowPrivate *drawable_private;
     GdkWindowPrivate *src_private;
@@ -423,7 +423,7 @@ void wxWindowDC::SetUpDC()
 
 void wxWindowDC::DoGetSize( int* width, int* height ) const
 {
-    wxCHECK_RET( m_owner, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_owner, wxT("GetSize() doesn't work without window") );
 
     m_owner->GetSize(width, height);
 }
@@ -2186,7 +2186,7 @@ IMPLEMENT_DYNAMIC_CLASS(wxClientDC, wxWi
 wxClientDC::wxClientDC( wxWindow *win )
           : wxWindowDC( win )
 {
-    wxCHECK_RET( win, _T("NULL window in wxClientDC::wxClientDC") );
+    wxCHECK_RET( win, wxT("NULL window in wxClientDC::wxClientDC") );
 
 #ifdef __WXUNIVERSAL__
     wxPoint ptOrigin = win->GetClientAreaOrigin();
@@ -2198,7 +2198,7 @@ wxClientDC::wxClientDC( wxWindow *win )
 
 void wxClientDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_owner, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_owner, wxT("GetSize() doesn't work without window") );
 
     m_owner->GetClientSize( width, height );
 }
--- src/gtk1/control.cpp-orig	2009-06-21 16:12:37.043349000 -0500
+++ src/gtk1/control.cpp	2009-06-21 16:12:42.887003000 -0500
@@ -134,7 +134,7 @@ wxString wxControl::GTKRemoveMnemonics(c
     {
         wxChar ch = label[i];
 
-        if ( ch == _T('&') )
+        if ( ch == wxT('&') )
         {
             if ( i == len - 1 )
             {
@@ -144,7 +144,7 @@ wxString wxControl::GTKRemoveMnemonics(c
             }
 
             ch = label[++i]; // skip '&' itself
-            if ( ch == _T('&') )
+            if ( ch == wxT('&') )
             {
                 // special case: "&&" is not a mnemonic at all but just an
                 // escaped "&"
--- src/gtk1/radiobox.cpp-orig	2009-06-21 16:16:27.164280000 -0500
+++ src/gtk1/radiobox.cpp	2009-06-21 16:16:32.730595000 -0500
@@ -145,10 +145,10 @@ static gint gtk_radiobutton_focus_out( G
                                        GdkEvent *WXUNUSED(event),
                                        wxRadioBox *win )
 {
-  //    wxASSERT_MSG( win->m_hasFocus, _T("got focus out without any focus in?") );
+  //    wxASSERT_MSG( win->m_hasFocus, wxT("got focus out without any focus in?") );
   // Replace with a warning, else we dump core a lot!
   //  if (!win->m_hasFocus)
-  //      wxLogWarning(_T("Radiobox got focus out without any focus in.") );
+  //      wxLogWarning(wxT("Radiobox got focus out without any focus in.") );
 
     // we might have lost the focus, but may be not - it may have just gone to
     // another button in the same radiobox, so we'll check for it in the next
--- src/gtk1/region.cpp-orig	2009-06-21 16:16:36.983718000 -0500
+++ src/gtk1/region.cpp	2009-06-21 16:16:45.256295000 -0500
@@ -219,7 +219,7 @@ bool wxRegion::DoUnionWithRegion( const 
 
 bool wxRegion::DoIntersect( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -238,7 +238,7 @@ bool wxRegion::DoIntersect( const wxRegi
 
 bool wxRegion::DoSubtract( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -257,7 +257,7 @@ bool wxRegion::DoSubtract( const wxRegio
 
 bool wxRegion::DoXor( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -474,28 +474,28 @@ wxRegionIterator wxRegionIterator::opera
 
 wxCoord wxRegionIterator::GetX() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return ((wxRIRefData*)m_refData)->m_rects[m_current].x;
 }
 
 wxCoord wxRegionIterator::GetY() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return ((wxRIRefData*)m_refData)->m_rects[m_current].y;
 }
 
 wxCoord wxRegionIterator::GetW() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return ((wxRIRefData*)m_refData)->m_rects[m_current].width;
 }
 
 wxCoord wxRegionIterator::GetH() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return ((wxRIRefData*)m_refData)->m_rects[m_current].height;
 }
--- src/gtk1/settings.cpp-orig	2009-06-21 16:16:51.031793000 -0500
+++ src/gtk1/settings.cpp	2009-06-21 16:16:57.693969000 -0500
@@ -82,7 +82,7 @@ static bool GetColourFromGTKWidget(int& 
     switch ( type )
     {
         default:
-            wxFAIL_MSG( _T("unexpected GTK widget type") );
+            wxFAIL_MSG( wxT("unexpected GTK widget type") );
             // fall through
 
         case wxGTK_BUTTON:
@@ -108,7 +108,7 @@ static bool GetColourFromGTKWidget(int& 
         switch ( colour )
         {
             default:
-                wxFAIL_MSG( _T("unexpected GTK colour type") );
+                wxFAIL_MSG( wxT("unexpected GTK colour type") );
                 // fall through
 
             case wxGTK_FG:
@@ -325,7 +325,7 @@ wxColour wxSystemSettingsNative::GetColo
 
         case wxSYS_COLOUR_MAX:
         default:
-            wxFAIL_MSG( _T("unknown system colour index") );
+            wxFAIL_MSG( wxT("unknown system colour index") );
     }
 
     return *wxWHITE;
--- src/gtk1/evtloop.cpp-orig	2009-06-21 16:17:03.763238000 -0500
+++ src/gtk1/evtloop.cpp	2009-06-21 16:17:15.413042000 -0500
@@ -61,13 +61,13 @@ private:
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     wxEventLoopActivator activate(this);
 
@@ -86,7 +86,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
 
@@ -111,7 +111,7 @@ bool wxEventLoop::Pending() const
 
 bool wxEventLoop::Dispatch()
 {
-    wxCHECK_MSG( IsRunning(), false, _T("can't call Dispatch() if not running") );
+    wxCHECK_MSG( IsRunning(), false, wxT("can't call Dispatch() if not running") );
 
     gtk_main_iteration();
 
--- src/gtk1/bitmap.cpp-orig	2009-06-21 16:17:19.938270000 -0500
+++ src/gtk1/bitmap.cpp	2009-06-21 16:17:24.725944000 -0500
@@ -264,7 +264,7 @@ wxBitmapRefData::wxBitmapRefData(const w
 
 #if wxUSE_PALETTE
     wxASSERT_MSG( !data.m_palette,
-                  _T("copying bitmaps palette not implemented") );
+                  wxT("copying bitmaps palette not implemented") );
 #endif // wxUSE_PALETTE
 
 
--- src/gtk1/scrolwin.cpp-orig	2009-06-21 16:17:30.517251000 -0500
+++ src/gtk1/scrolwin.cpp	2009-06-21 16:17:35.090924000 -0500
@@ -171,7 +171,7 @@ void wxScrollHelperNative::DoScroll(int 
 
 void wxScrollHelperNative::Scroll( int x_pos, int y_pos )
 {
-    wxCHECK_RET( m_targetWindow != 0, _T("No target window") );
+    wxCHECK_RET( m_targetWindow != 0, wxT("No target window") );
 
     DoScroll(wxHORIZONTAL, m_win->m_hAdjust, x_pos, m_xScrollPixelsPerLine,
                 &m_xScrollPosition);
--- src/gtk1/dnd.cpp-orig	2009-06-21 16:17:38.847301000 -0500
+++ src/gtk1/dnd.cpp	2009-06-21 16:17:52.633577000 -0500
@@ -56,7 +56,7 @@ static long gs_flagsForDrag = 0;
 // the trace mask we use with wxLogTrace() - call
 // wxLog::AddTraceMask(TRACE_DND) to enable the trace messages from here
 // (there are quite a few of them, so don't enable this by default)
-#define TRACE_DND _T("dnd")
+#define TRACE_DND wxT("dnd")
 
 // global variables because GTK+ DnD want to have the
 // mouse event that caused it
@@ -365,7 +365,7 @@ static gboolean target_drag_drop( GtkWid
         GdkAtom format = drop_target->GetMatchingPair();
 
         // this does happen somehow, see bug 555111
-        wxCHECK_MSG( format, FALSE, _T("no matching GdkAtom for format?") );
+        wxCHECK_MSG( format, FALSE, wxT("no matching GdkAtom for format?") );
 
 /*
         GdkDragAction action = GDK_ACTION_MOVE;
--- src/gtk1/button.cpp-orig	2009-06-21 16:17:56.836834000 -0500
+++ src/gtk1/button.cpp	2009-06-21 16:18:01.790777000 -0500
@@ -160,7 +160,7 @@ bool wxButton::Create(  wxWindow *parent
 void wxButton::SetDefault()
 {
     wxTopLevelWindow *tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
-    wxCHECK_RET( tlw, _T("button without top level window?") );
+    wxCHECK_RET( tlw, wxT("button without top level window?") );
 
     tlw->SetDefaultItem(this);
 
--- src/gtk1/menu.cpp-orig	2009-06-21 16:18:05.846743000 -0500
+++ src/gtk1/menu.cpp	2009-06-21 16:18:10.703909000 -0500
@@ -590,7 +590,7 @@ static void gtk_menu_clicked_callback( G
 
     /* should find it for normal (not popup) menu */
     wxASSERT_MSG( (id != -1) || (menu->GetInvokingWindow() != NULL),
-                  _T("menu item not found in gtk_menu_clicked_callback") );
+                  wxT("menu item not found in gtk_menu_clicked_callback") );
 
     if (!menu->IsEnabled(id))
         return;
@@ -942,7 +942,7 @@ void wxMenuItem::Check( bool check )
             break;
 
         default:
-            wxFAIL_MSG( _T("can't check this item") );
+            wxFAIL_MSG( wxT("can't check this item") );
     }
 }
 
@@ -1085,7 +1085,7 @@ bool wxMenu::GtkAppend(wxMenuItem *mitem
             }
 
             default:
-                wxFAIL_MSG( _T("unexpected menu item kind") );
+                wxFAIL_MSG( wxT("unexpected menu item kind") );
                 // fall through
 
             case wxITEM_NORMAL:
--- src/gtk1/mdi.cpp-orig	2009-06-21 16:18:14.726084000 -0500
+++ src/gtk1/mdi.cpp	2009-06-21 16:18:19.181698000 -0500
@@ -273,7 +273,7 @@ wxMDIChildFrame *wxMDIParentFrame::GetAc
     {
         wxMDIChildFrame *child_frame = wxDynamicCast( node->GetData(), wxMDIChildFrame );
 
-        wxASSERT_MSG( child_frame, _T("child is not a wxMDIChildFrame") );
+        wxASSERT_MSG( child_frame, wxT("child is not a wxMDIChildFrame") );
 
         if (child_frame->m_page == page)
             return child_frame;
--- src/gtk1/app.cpp-orig	2009-06-21 16:18:22.951726000 -0500
+++ src/gtk1/app.cpp	2009-06-21 16:18:26.268910000 -0500
@@ -313,7 +313,7 @@ int wxPoll(wxPollFd *ufds, unsigned int 
     unsigned int i;
     for ( i = 0; i < nfds; i++ )
     {
-        wxASSERT_MSG( ufds[i].fd < FD_SETSIZE, _T("fd out of range") );
+        wxASSERT_MSG( ufds[i].fd < FD_SETSIZE, wxT("fd out of range") );
 
         if ( ufds[i].events & G_IO_IN )
             wxFD_SET(ufds[i].fd, &readfds);
--- src/gtk1/clipbrd.cpp-orig	2009-06-21 16:18:33.570637000 -0500
+++ src/gtk1/clipbrd.cpp	2009-06-21 16:18:40.885547000 -0500
@@ -35,7 +35,7 @@ GdkAtom  g_timestampAtom   = 0;
 // the trace mask we use with wxLogTrace() - call
 // wxLog::AddTraceMask(TRACE_CLIPBOARD) to enable the trace messages from here
 // (there will be a *lot* of them!)
-static const wxChar *TRACE_CLIPBOARD = _T("clipboard");
+static const wxChar *TRACE_CLIPBOARD = wxT("clipboard");
 
 //-----------------------------------------------------------------------------
 // reminder
@@ -83,7 +83,7 @@ targets_selection_received( GtkWidget *W
             if ( strcmp(atom_name, "TARGETS") )
             {
                 wxLogTrace( TRACE_CLIPBOARD,
-                            _T("got unsupported clipboard target") );
+                            wxT("got unsupported clipboard target") );
 
                 clipboard->m_waiting = false;
                 g_free(atom_name);
@@ -259,7 +259,7 @@ selection_handler( GtkWidget *WXUNUSED(w
                                (guchar*)&(timestamp),
                                sizeof(timestamp));
         wxLogTrace(TRACE_CLIPBOARD,
-                   _T("Clipboard TIMESTAMP requested, returning timestamp=%u"),
+                   wxT("Clipboard TIMESTAMP requested, returning timestamp=%u"),
                    timestamp);
         return;
     }
@@ -268,7 +268,7 @@ selection_handler( GtkWidget *WXUNUSED(w
 
 #ifdef __WXDEBUG__
     wxLogTrace(TRACE_CLIPBOARD,
-               _T("clipboard data in format %s, GtkSelectionData is target=%s type=%s selection=%s timestamp=%u"),
+               wxT("clipboard data in format %s, GtkSelectionData is target=%s type=%s selection=%s timestamp=%u"),
                format.GetId().c_str(),
                wxString::FromAscii(gdk_atom_name(selection_data->target)).c_str(),
                wxString::FromAscii(gdk_atom_name(selection_data->type)).c_str(),
--- src/gtk1/choice.cpp-orig	2009-06-21 16:18:45.188537000 -0500
+++ src/gtk1/choice.cpp	2009-06-21 16:18:48.860269000 -0500
@@ -268,7 +268,7 @@ void wxChoice::Delete(unsigned int n)
     unsigned int i;
     unsigned int count = GetCount();
 
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxChoice::Delete") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxChoice::Delete") );
 
     // if the item to delete is before the selection, and the selection is valid
     if (((int)n < m_selection_hack) && (m_selection_hack != wxNOT_FOUND))
--- src/gtk1/gauge.cpp-orig	2009-06-21 16:18:53.823126000 -0500
+++ src/gtk1/gauge.cpp	2009-06-21 16:18:59.831584000 -0500
@@ -60,7 +60,7 @@ bool wxGauge::Create( wxWindow *parent,
 void wxGauge::DoSetGauge()
 {
     wxASSERT_MSG( 0 <= m_gaugePos && m_gaugePos <= m_rangeMax,
-                  _T("invalid gauge position in DoSetGauge()") );
+                  wxT("invalid gauge position in DoSetGauge()") );
 
     gtk_progress_bar_update( GTK_PROGRESS_BAR(m_widget),
                              m_rangeMax ? ((float)m_gaugePos)/m_rangeMax : 0.);
@@ -88,7 +88,7 @@ void wxGauge::SetRange( int range )
 
 void wxGauge::SetValue( int pos )
 {
-    wxCHECK_RET( pos <= m_rangeMax, _T("invalid value in wxGauge::SetValue()") );
+    wxCHECK_RET( pos <= m_rangeMax, wxT("invalid value in wxGauge::SetValue()") );
 
     m_gaugePos = pos;
 
--- src/gtk1/fontdlg.cpp-orig	2009-06-21 16:19:05.391753000 -0500
+++ src/gtk1/fontdlg.cpp	2009-06-21 16:19:10.366176000 -0500
@@ -164,7 +164,7 @@ bool wxFontDialog::DoCreate(wxWindow *pa
         else
         {
             // this is not supposed to happen!
-            wxFAIL_MSG(_T("font is ok but no native font info?"));
+            wxFAIL_MSG(wxT("font is ok but no native font info?"));
         }
     }
 
--- src/x11/font.cpp-orig	2009-06-21 16:05:22.697843000 -0500
+++ src/x11/font.cpp	2009-06-21 16:05:33.848647000 -0500
@@ -256,7 +256,7 @@ void wxFontRefData::InitFromNative()
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown Pango font weight"));
+            wxFAIL_MSG(wxT("unknown Pango font weight"));
             // fall through
 
         case PANGO_WEIGHT_NORMAL:
@@ -298,17 +298,17 @@ void wxFontRefData::InitFromNative()
     m_weight = wxFONTWEIGHT_NORMAL;
 
     wxString w = m_nativeFontInfo.GetXFontComponent(wxXLFD_WEIGHT).Upper();
-    if ( !w.empty() && w != _T('*') )
+    if ( !w.empty() && w != wxT('*') )
     {
         // the test below catches all of BOLD, EXTRABOLD, DEMIBOLD, ULTRABOLD
         // and BLACK
-        if ( ((w[0u] == _T('B') && (!wxStrcmp(w.c_str() + 1, wxT("OLD")) ||
+        if ( ((w[0u] == wxT('B') && (!wxStrcmp(w.c_str() + 1, wxT("OLD")) ||
                                    !wxStrcmp(w.c_str() + 1, wxT("LACK"))))) ||
-             wxStrstr(w.c_str() + 1, _T("BOLD")) )
+             wxStrstr(w.c_str() + 1, wxT("BOLD")) )
         {
             m_weight = wxFONTWEIGHT_BOLD;
         }
-        else if ( w == _T("LIGHT") || w == _T("THIN") )
+        else if ( w == wxT("LIGHT") || w == wxT("THIN") )
         {
             m_weight = wxFONTWEIGHT_LIGHT;
         }
@@ -317,11 +317,11 @@ void wxFontRefData::InitFromNative()
     switch ( wxToupper(*m_nativeFontInfo.
                             GetXFontComponent(wxXLFD_SLANT).c_str()) )
     {
-        case _T('I'):   // italique
+        case wxT('I'):   // italique
             m_style = wxFONTSTYLE_ITALIC;
             break;
 
-        case _T('O'):   // oblique
+        case wxT('O'):   // oblique
             m_style = wxFONTSTYLE_SLANT;
             break;
 
@@ -343,7 +343,7 @@ void wxFontRefData::InitFromNative()
     // examine the spacing: if the font is monospaced, assume wxTELETYPE
     // family for compatibility with the old code which used it instead of
     // IsFixedWidth()
-    if ( m_nativeFontInfo.GetXFontComponent(wxXLFD_SPACING).Upper() == _T('M') )
+    if ( m_nativeFontInfo.GetXFontComponent(wxXLFD_SPACING).Upper() == wxT('M') )
     {
         m_family = wxFONTFAMILY_TELETYPE;
     }
@@ -362,7 +362,7 @@ void wxFontRefData::InitFromNative()
         registry = m_nativeFontInfo.GetXFontComponent(wxXLFD_REGISTRY).Upper(),
         encoding = m_nativeFontInfo.GetXFontComponent(wxXLFD_ENCODING).Upper();
 
-    if ( registry == _T("ISO8859") )
+    if ( registry == wxT("ISO8859") )
     {
         int cp;
         if ( wxSscanf(encoding, wxT("%d"), &cp) == 1 )
@@ -370,7 +370,7 @@ void wxFontRefData::InitFromNative()
             m_encoding = (wxFontEncoding)(wxFONTENCODING_ISO8859_1 + cp - 1);
         }
     }
-    else if ( registry == _T("MICROSOFT") )
+    else if ( registry == wxT("MICROSOFT") )
     {
         int cp;
         if ( wxSscanf(encoding, wxT("cp125%d"), &cp) == 1 )
@@ -378,7 +378,7 @@ void wxFontRefData::InitFromNative()
             m_encoding = (wxFontEncoding)(wxFONTENCODING_CP1250 + cp);
         }
     }
-    else if ( registry == _T("KOI8") )
+    else if ( registry == wxT("KOI8") )
     {
         m_encoding = wxFONTENCODING_KOI8;
     }
@@ -488,7 +488,7 @@ void wxFontRefData::SetStyle(int style)
             pango_font_description_set_style( desc, PANGO_STYLE_OBLIQUE );
             break;
         default:
-            wxFAIL_MSG( _T("unknown font style") );
+            wxFAIL_MSG( wxT("unknown font style") );
             // fall through
         case wxFONTSTYLE_NORMAL:
             pango_font_description_set_style( desc, PANGO_STYLE_NORMAL );
@@ -642,7 +642,7 @@ bool wxFont::Create(const wxString& font
         wxString registry = tn.GetNextToken().MakeUpper(),
                  encoding = tn.GetNextToken().MakeUpper();
 
-        if ( registry == _T("ISO8859") )
+        if ( registry == wxT("ISO8859") )
         {
             int cp;
             if ( wxSscanf(encoding, wxT("%d"), &cp) == 1 )
@@ -651,7 +651,7 @@ bool wxFont::Create(const wxString& font
                     (wxFontEncoding)(wxFONTENCODING_ISO8859_1 + cp - 1);
             }
         }
-        else if ( registry == _T("MICROSOFT") )
+        else if ( registry == wxT("MICROSOFT") )
         {
             int cp;
             if ( wxSscanf(encoding, wxT("cp125%d"), &cp) == 1 )
@@ -660,7 +660,7 @@ bool wxFont::Create(const wxString& font
                     (wxFontEncoding)(wxFONTENCODING_CP1250 + cp);
             }
         }
-        else if ( registry == _T("KOI8") )
+        else if ( registry == wxT("KOI8") )
         {
             M_FONTDATA->m_encoding = wxFONTENCODING_KOI8;
         }
@@ -783,7 +783,7 @@ bool wxFont::IsFixedWidth() const
         wxString spacing = M_FONTDATA->
                             m_nativeFontInfo.GetXFontComponent(wxXLFD_SPACING);
 
-        return spacing.Upper() == _T('M');
+        return spacing.Upper() == wxT('M');
     }
    // Unreaceable code for now
    // return wxFontBase::IsFixedWidth();
--- src/x11/app.cpp-orig	2009-06-21 16:05:37.823984000 -0500
+++ src/x11/app.cpp	2009-06-21 16:05:51.850677000 -0500
@@ -103,7 +103,7 @@ bool wxApp::Initialize(int& argC, wxChar
     int argCOrig = argC;
     for ( int i = 0; i < argCOrig; i++ )
     {
-        if (wxStrcmp( argV[i], _T("-display") ) == 0)
+        if (wxStrcmp( argV[i], wxT("-display") ) == 0)
         {
             if (i < (argC - 1))
             {
@@ -115,14 +115,14 @@ bool wxApp::Initialize(int& argC, wxChar
                 argC -= 2;
             }
         }
-        else if (wxStrcmp( argV[i], _T("-geometry") ) == 0)
+        else if (wxStrcmp( argV[i], wxT("-geometry") ) == 0)
         {
             if (i < (argC - 1))
             {
                 argV[i++] = NULL;
 
                 int w, h;
-                if (wxSscanf(argV[i], _T("%dx%d"), &w, &h) != 2)
+                if (wxSscanf(argV[i], wxT("%dx%d"), &w, &h) != 2)
                 {
                     wxLogError( _("Invalid geometry specification '%s'"),
                                 wxString(argV[i]).c_str() );
@@ -136,14 +136,14 @@ bool wxApp::Initialize(int& argC, wxChar
                 argC -= 2;
             }
         }
-        else if (wxStrcmp( argV[i], _T("-sync") ) == 0)
+        else if (wxStrcmp( argV[i], wxT("-sync") ) == 0)
         {
             syncDisplay = true;
 
             argV[i] = NULL;
             argC--;
         }
-        else if (wxStrcmp( argV[i], _T("-iconic") ) == 0)
+        else if (wxStrcmp( argV[i], wxT("-iconic") ) == 0)
         {
             g_showIconic = true;
 
@@ -362,7 +362,7 @@ bool wxApp::ProcessXEvent(WXEvent* _even
 #if !wxUSE_NANOX
         case GraphicsExpose:
         {
-            wxLogTrace( _T("expose"), _T("GraphicsExpose from %s"), win->GetName().c_str());
+            wxLogTrace( wxT("expose"), wxT("GraphicsExpose from %s"), win->GetName().c_str());
 
             win->GetUpdateRegion().Union( event->xgraphicsexpose.x, event->xgraphicsexpose.y,
                                           event->xgraphicsexpose.width, event->xgraphicsexpose.height);
@@ -551,7 +551,7 @@ bool wxApp::ProcessXEvent(WXEvent* _even
                     g_prevFocus = wxWindow::FindFocus();
                     g_nextFocus = win;
 
-                    wxLogTrace( _T("focus"), _T("About to call SetFocus on %s of type %s due to button press"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
+                    wxLogTrace( wxT("focus"), wxT("About to call SetFocus on %s of type %s due to button press"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
 
                     // Record the fact that this window is
                     // getting the focus, because we'll need to
@@ -582,7 +582,7 @@ bool wxApp::ProcessXEvent(WXEvent* _even
                 (event->xfocus.mode == NotifyNormal))
 #endif
             {
-                wxLogTrace( _T("focus"), _T("FocusIn from %s of type %s"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
+                wxLogTrace( wxT("focus"), wxT("FocusIn from %s of type %s"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
 
                 extern wxWindow* g_GettingFocus;
                 if (g_GettingFocus && g_GettingFocus->GetParent() == win)
@@ -590,7 +590,7 @@ bool wxApp::ProcessXEvent(WXEvent* _even
                     // Ignore this, this can be a spurious FocusIn
                     // caused by a child having its focus set.
                     g_GettingFocus = NULL;
-                    wxLogTrace( _T("focus"), _T("FocusIn from %s of type %s being deliberately ignored"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
+                    wxLogTrace( wxT("focus"), wxT("FocusIn from %s of type %s being deliberately ignored"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
                     return true;
                 }
                 else
@@ -611,7 +611,7 @@ bool wxApp::ProcessXEvent(WXEvent* _even
                 (event->xfocus.mode == NotifyNormal))
 #endif
             {
-                wxLogTrace( _T("focus"), _T("FocusOut from %s of type %s"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
+                wxLogTrace( wxT("focus"), wxT("FocusOut from %s of type %s"), win->GetName().c_str(), win->GetClassInfo()->GetClassName() );
 
                 wxFocusEvent focusEvent(wxEVT_KILL_FOCUS, win->GetId());
                 focusEvent.SetEventObject(win);
@@ -733,7 +733,7 @@ WXColormap wxApp::GetMainColormap(WXDisp
 
 Window wxGetWindowParent(Window window)
 {
-    wxASSERT_MSG( window, _T("invalid window") );
+    wxASSERT_MSG( window, wxT("invalid window") );
 
     return (Window) 0;
 
--- src/x11/clipbrd.cpp-orig	2009-06-21 16:05:58.485933000 -0500
+++ src/x11/clipbrd.cpp	2009-06-21 16:06:05.995851000 -0500
@@ -39,7 +39,7 @@ Atom  g_targetsAtom     = 0;
 // the trace mask we use with wxLogTrace() - call
 // wxLog::AddTraceMask(TRACE_CLIPBOARD) to enable the trace messages from here
 // (there will be a *lot* of them!)
-static const wxChar *TRACE_CLIPBOARD = _T("clipboard");
+static const wxChar *TRACE_CLIPBOARD = wxT("clipboard");
 
 #endif // __WXDEBUG__
 
@@ -91,7 +91,7 @@ targets_selection_received( GtkWidget *W
             if ( strcmp(gdk_atom_name(type), "TARGETS") )
             {
                 wxLogTrace( TRACE_CLIPBOARD,
-                            _T("got unsupported clipboard target") );
+                            wxT("got unsupported clipboard target") );
 
                 clipboard->m_waiting = false;
                 return;
--- src/x11/dcclient.cpp-orig	2009-06-21 16:06:10.919865000 -0500
+++ src/x11/dcclient.cpp	2009-06-21 16:06:18.603048000 -0500
@@ -327,7 +327,7 @@ void wxWindowDC::SetUpDC()
 
 void wxWindowDC::DoGetSize( int* width, int* height ) const
 {
-    wxCHECK_RET( m_owner, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_owner, wxT("GetSize() doesn't work without window") );
 
     m_owner->GetSize(width, height);
 }
@@ -2307,7 +2307,7 @@ IMPLEMENT_DYNAMIC_CLASS(wxClientDC, wxWi
 wxClientDC::wxClientDC( wxWindow *window )
           : wxWindowDC( window )
 {
-    wxCHECK_RET( window, _T("NULL window in wxClientDC::wxClientDC") );
+    wxCHECK_RET( window, wxT("NULL window in wxClientDC::wxClientDC") );
 
     m_window = (WXWindow*) window->GetClientAreaWindow();
 
@@ -2323,7 +2323,7 @@ wxClientDC::wxClientDC( wxWindow *window
 
 void wxClientDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_owner, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_owner, wxT("GetSize() doesn't work without window") );
 
     m_owner->GetClientSize( width, height );
 }
@@ -2366,7 +2366,7 @@ public:
     // display
     wxDCModule()
     {
-        AddDependency(wxClassInfo::FindClass(_T("wxX11DisplayModule")));
+        AddDependency(wxClassInfo::FindClass(wxT("wxX11DisplayModule")));
     }
 
     bool OnInit() { wxInitGCPool(); return true; }
--- src/x11/dataobj.cpp-orig	2009-06-21 16:06:24.371826000 -0500
+++ src/x11/dataobj.cpp	2009-06-21 16:06:32.924339000 -0500
@@ -250,12 +250,12 @@ bool wxFileDataObject::SetData(size_t WX
         if ( (*p == '\r' && *(p+1) == '\n') || !*p )
         {
             size_t lenPrefix = 5; // strlen("file:")
-            if ( filename.Left(lenPrefix).MakeLower() == _T("file:") )
+            if ( filename.Left(lenPrefix).MakeLower() == wxT("file:") )
             {
                 // sometimes the syntax is "file:filename", sometimes it's
                 // URL-like: "file://filename" - deal with both
-                if ( filename[lenPrefix] == _T('/') &&
-                     filename[lenPrefix + 1] == _T('/') )
+                if ( filename[lenPrefix] == wxT('/') &&
+                     filename[lenPrefix + 1] == wxT('/') )
                 {
                     // skip the slashes
                     lenPrefix += 2;
@@ -266,7 +266,7 @@ bool wxFileDataObject::SetData(size_t WX
             }
             else
             {
-                wxLogDebug(_T("Unsupported URI '%s' in wxFileDataObject"),
+                wxLogDebug(wxT("Unsupported URI '%s' in wxFileDataObject"),
                            filename.c_str());
             }
 
--- src/x11/region.cpp-orig	2009-06-21 16:06:37.629216000 -0500
+++ src/x11/region.cpp	2009-06-21 16:06:43.568814000 -0500
@@ -175,7 +175,7 @@ bool wxRegion::DoUnionWithRect(const wxR
 
 bool wxRegion::DoUnionWithRegion( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -196,7 +196,7 @@ bool wxRegion::DoUnionWithRegion( const 
 
 bool wxRegion::DoIntersect( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -220,7 +220,7 @@ bool wxRegion::DoIntersect( const wxRegi
 
 bool wxRegion::DoSubtract( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -241,7 +241,7 @@ bool wxRegion::DoSubtract( const wxRegio
 
 bool wxRegion::DoXor( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
--- src/x11/reparent.cpp-orig	2009-06-21 16:06:49.207243000 -0500
+++ src/x11/reparent.cpp	2009-06-21 16:06:55.704799000 -0500
@@ -152,7 +152,7 @@ bool wxReparenter::WaitAndReparent(wxWin
 
 #ifdef __WXDEBUG__
     if (!windowName.empty())
-        wxLogDebug(_T("Waiting for window %s"), windowName.c_str());
+        wxLogDebug(wxT("Waiting for window %s"), windowName.c_str());
 #endif
 
     sm_done = false;
@@ -190,13 +190,13 @@ bool wxReparenter::ProcessXEvent(WXEvent
     {
         if (xevent->type == MapNotify)
         {
-            wxLogDebug(_T("Window was mapped"));
+            wxLogDebug(wxT("Window was mapped"));
         }
 
         if (xevent->type == MapNotify && !xevent->xmap.override_redirect &&
             (client = (Window) FindAClientWindow((WXWindow) xevent->xmap.window, sm_name)))
         {
-            wxLogDebug(_T("Found a client window, about to reparent"));
+            wxLogDebug(wxT("Found a client window, about to reparent"));
             wxASSERT(sm_toReparent->GetParent() == NULL);
 
             sm_toReparent->SetHandle((WXWindow) client);
@@ -207,7 +207,7 @@ bool wxReparenter::ProcessXEvent(WXEvent
                    xevent->xmap.override_redirect &&
                    xevent->xmap.window)
         {
-            wxLogDebug(_T("Found an override redirect window, about to reparent"));
+            wxLogDebug(wxT("Found an override redirect window, about to reparent"));
             sm_toReparent->SetHandle((WXWindow) xevent->xmap.window);
             sm_newParent->AddChild(sm_toReparent);
             wxASSERT(sm_toReparent->GetParent() == NULL);
--- src/x11/window.cpp-orig	2009-06-21 16:07:00.596435000 -0500
+++ src/x11/window.cpp	2009-06-21 16:07:05.584501000 -0500
@@ -394,7 +394,7 @@ void wxWindowX11::SetFocus()
 
     if (wxWindowIsVisible(xwindow))
     {
-        wxLogTrace( _T("focus"), _T("wxWindowX11::SetFocus: %s"), GetClassInfo()->GetClassName());
+        wxLogTrace( wxT("focus"), wxT("wxWindowX11::SetFocus: %s"), GetClassInfo()->GetClassName());
         //        XSetInputFocus( wxGlobalDisplay(), xwindow, RevertToParent, CurrentTime );
         XSetInputFocus( wxGlobalDisplay(), xwindow, RevertToNone, CurrentTime );
         m_needsInputFocus = false;
@@ -1702,7 +1702,7 @@ public:
     wxWinModule()
     {
         // we must be cleaned up before the display is closed
-        AddDependency(wxClassInfo::FindClass(_T("wxX11DisplayModule")));
+        AddDependency(wxClassInfo::FindClass(wxT("wxX11DisplayModule")));
     }
 
     virtual bool OnInit();
--- src/x11/evtloop.cpp-orig	2009-06-21 16:07:10.805214000 -0500
+++ src/x11/evtloop.cpp	2009-06-21 16:07:16.752145000 -0500
@@ -145,13 +145,13 @@ bool wxEventLoopImpl::SendIdleEvent()
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     m_impl = new wxEventLoopImpl;
 
@@ -193,7 +193,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
     m_impl->m_keepGoing = false;
--- src/html/helpdata.cpp-orig	2009-06-18 17:37:39.317414000 -0500
+++ src/html/helpdata.cpp	2009-06-18 17:37:45.712352000 -0500
@@ -51,11 +51,11 @@ static const wxChar* ReadLine(const wxCh
     wxChar *endptr = buf + bufsize - 1;
     const wxChar *readptr = line;
 
-    while (*readptr != 0 && *readptr != _T('\r') && *readptr != _T('\n') &&
+    while (*readptr != 0 && *readptr != wxT('\r') && *readptr != wxT('\n') &&
            writeptr != endptr)
         *(writeptr++) = *(readptr++);
     *writeptr = 0;
-    while (*readptr == _T('\r') || *readptr == _T('\n'))
+    while (*readptr == wxT('\r') || *readptr == wxT('\n'))
         readptr++;
     if (*readptr == 0)
         return NULL;
@@ -255,7 +255,7 @@ wxString wxHtmlHelpDataItem::GetIndented
 {
     wxString s;
     for (int i = 1; i < level; i++)
-        s << _T("   ");
+        s << wxT("   ");
     s << name;
     return s;
 }
@@ -483,10 +483,10 @@ void wxHtmlHelpData::SetTempDir(const wx
     else
     {
         if (wxIsAbsolutePath(path)) m_tempPath = path;
-        else m_tempPath = wxGetCwd() + _T("/") + path;
+        else m_tempPath = wxGetCwd() + wxT("/") + path;
 
-        if (m_tempPath[m_tempPath.length() - 1] != _T('/'))
-            m_tempPath << _T('/');
+        if (m_tempPath[m_tempPath.length() - 1] != wxT('/'))
+            m_tempPath << wxT('/');
     }
 }
 
@@ -681,16 +681,16 @@ bool wxHtmlHelpData::AddBook(const wxStr
         for (wxChar *ch = linebuf; *ch != wxT('\0') && *ch != wxT('='); ch++)
            *ch = (wxChar)wxTolower(*ch);
 
-        if (wxStrstr(linebuf, _T("title=")) == linebuf)
-            title = linebuf + wxStrlen(_T("title="));
-        if (wxStrstr(linebuf, _T("default topic=")) == linebuf)
-            start = linebuf + wxStrlen(_T("default topic="));
-        if (wxStrstr(linebuf, _T("index file=")) == linebuf)
-            index = linebuf + wxStrlen(_T("index file="));
-        if (wxStrstr(linebuf, _T("contents file=")) == linebuf)
-            contents = linebuf + wxStrlen(_T("contents file="));
-        if (wxStrstr(linebuf, _T("charset=")) == linebuf)
-            charset = linebuf + wxStrlen(_T("charset="));
+        if (wxStrstr(linebuf, wxT("title=")) == linebuf)
+            title = linebuf + wxStrlen(wxT("title="));
+        if (wxStrstr(linebuf, wxT("default topic=")) == linebuf)
+            start = linebuf + wxStrlen(wxT("default topic="));
+        if (wxStrstr(linebuf, wxT("index file=")) == linebuf)
+            index = linebuf + wxStrlen(wxT("index file="));
+        if (wxStrstr(linebuf, wxT("contents file=")) == linebuf)
+            contents = linebuf + wxStrlen(wxT("contents file="));
+        if (wxStrstr(linebuf, wxT("charset=")) == linebuf)
+            charset = linebuf + wxStrlen(wxT("charset="));
     } while (lineptr != NULL);
 
     wxFontEncoding enc = wxFONTENCODING_SYSTEM;
@@ -933,11 +933,11 @@ bool wxHtmlSearchStatus::Search()
     {
         const wxChar *p1, *p2;
         for (p1 = thepage.c_str(), p2 = m_LastPage.c_str();
-             *p1 != 0 && *p1 != _T('#') && *p1 == *p2; p1++, p2++) {}
+             *p1 != 0 && *p1 != wxT('#') && *p1 == *p2; p1++, p2++) {}
 
         m_LastPage = thepage;
 
-        if (*p1 == 0 || *p1 == _T('#'))
+        if (*p1 == 0 || *p1 == wxT('#'))
             return false;
     }
     else m_LastPage = thepage;
@@ -981,7 +981,7 @@ void wxHtmlSearchEngine::LookFor(const w
 
 static inline bool WHITESPACE(wxChar c)
 {
-    return c == _T(' ') || c == _T('\n') || c == _T('\r') || c == _T('\t');
+    return c == wxT(' ') || c == wxT('\n') || c == wxT('\r') || c == wxT('\t');
 }
 
 // replace continuous spaces by one single space
@@ -1000,7 +1000,7 @@ static inline wxString CompressSpaces(co
             {
                 continue;
             }
-            ch = _T(' ');
+            ch = wxT(' ');
             space_counted = true;
         }
         else
@@ -1032,19 +1032,19 @@ bool wxHtmlSearchEngine::Scan(const wxFS
             wxChar c = *pBufStr;
             if (insideTag)
             {
-                if (c == _T('>'))
+                if (c == wxT('>'))
                 {
                     insideTag = false;
                     // replace the tag by an empty space
-                    c = _T(' ');
+                    c = wxT(' ');
                 }
                 else
                     continue;
             }
-            else if (c == _T('<'))
+            else if (c == wxT('<'))
             {
                 wxChar nextCh = *(pBufStr + 1);
-                if (nextCh == _T('/') || !WHITESPACE(nextCh))
+                if (nextCh == wxT('/') || !WHITESPACE(nextCh))
                 {
                     insideTag = true;
                     continue;
@@ -1060,10 +1060,10 @@ bool wxHtmlSearchEngine::Scan(const wxFS
     if (m_WholeWords)
     {
         // insert ' ' at the beginning and at the end
-        keyword.insert( 0, _T(" ") );
-        keyword.append( _T(" ") );
-        bufStr.insert( 0, _T(" ") );
-        bufStr.append( _T(" ") );
+        keyword.insert( 0, wxT(" ") );
+        keyword.append( wxT(" ") );
+        bufStr.insert( 0, wxT(" ") );
+        bufStr.append( wxT(" ") );
     }
 
     // remove continuous spaces
--- src/html/chm.cpp-orig	2009-06-18 17:37:51.221469000 -0500
+++ src/html/chm.cpp	2009-06-18 17:37:59.325543000 -0500
@@ -103,7 +103,7 @@ wxChmTools::wxChmTools(const wxFileName 
 {
     m_chmFileName = archive.GetFullPath();
 
-    wxASSERT_MSG( !m_chmFileName.empty(), _T("empty archive name") );
+    wxASSERT_MSG( !m_chmFileName.empty(), wxT("empty archive name") );
 
     m_archive = NULL;
     m_decompressor = NULL;
@@ -435,7 +435,7 @@ wxChmInputStream::wxChmInputStream(const
         // if the file could not be located, but was *.hhp, than we create
         // the content of the hhp-file on the fly and store it for reading
         // by the application
-        if ( m_fileName.Find(_T(".hhp")) != wxNOT_FOUND && m_simulateHHP )
+        if ( m_fileName.Find(wxT(".hhp")) != wxNOT_FOUND && m_simulateHHP )
         {
             // now we open an hhp-file
             CreateHHPStream();
@@ -558,7 +558,7 @@ wxChmInputStream::CreateHHPStream()
 
     // Try to open the #SYSTEM-File and create the HHP File out of it
     // see http://bonedaddy.net/pabs3/chmspec/0.1.2/Internal.html#SYSTEM
-    if ( ! m_chm->Contains(_T("/#SYSTEM")) )
+    if ( ! m_chm->Contains(wxT("/#SYSTEM")) )
     {
 #ifdef DEBUG
         wxLogDebug(_("Archive doesnt contain #SYSTEM file"));
@@ -567,10 +567,10 @@ wxChmInputStream::CreateHHPStream()
     }
     else
     {
-        file = wxFileName(_T("/#SYSTEM"));
+        file = wxFileName(wxT("/#SYSTEM"));
     }
 
-    if ( CreateFileStream(_T("/#SYSTEM")) )
+    if ( CreateFileStream(wxT("/#SYSTEM")) )
     {
         // New stream for writing a memory area to simulate the
         // .hhp-file
@@ -636,7 +636,7 @@ wxChmInputStream::CreateHHPStream()
                         wxUint32 dummy = *((wxUint32 *)(structptr+0)) ;
                         wxUint32 lcid = wxUINT32_SWAP_ON_BE( dummy ) ;
                         wxString msg ;
-                        msg.Printf(_T("Language=0x%X\r\n"),lcid) ;
+                        msg.Printf(wxT("Language=0x%X\r\n"),lcid) ;
                         out->Write(msg.c_str() , msg.length() ) ;
                     }
                     break ;
@@ -662,13 +662,13 @@ wxChmInputStream::CreateHHPStream()
             free (m_content);
 
         // Now add entries which are missing
-        if ( !hhc && m_chm->Contains(_T("*.hhc")) )
+        if ( !hhc && m_chm->Contains(wxT("*.hhc")) )
         {
             tmp = "Contents File=*.hhc\r\n";
             out->Write((const void *) tmp, strlen(tmp));
         }
 
-        if ( !hhk && m_chm->Contains(_T("*.hhk")) )
+        if ( !hhk && m_chm->Contains(wxT("*.hhk")) )
         {
             tmp = "Index File=*.hhk\r\n";
             out->Write((const void *) tmp, strlen(tmp));
@@ -696,7 +696,7 @@ wxChmInputStream::CreateHHPStream()
 bool wxChmInputStream::CreateFileStream(const wxString& pattern)
 {
     wxFileInputStream * fin;
-    wxString tmpfile = wxFileName::CreateTempFileName(_T("chmstrm"));
+    wxString tmpfile = wxFileName::CreateTempFileName(wxT("chmstrm"));
 
     if ( tmpfile.empty() )
     {
@@ -778,8 +778,8 @@ wxChmFSHandler::~wxChmFSHandler()
 bool wxChmFSHandler::CanOpen(const wxString& location)
 {
     wxString p = GetProtocol(location);
-    return (p == _T("chm")) &&
-           (GetProtocol(GetLeftLocation(location)) == _T("file"));
+    return (p == wxT("chm")) &&
+           (GetProtocol(GetLeftLocation(location)) == wxT("file"));
 }
 
 wxFSFile* wxChmFSHandler::OpenFile(wxFileSystem& WXUNUSED(fs),
@@ -792,7 +792,7 @@ wxFSFile* wxChmFSHandler::OpenFile(wxFil
 
     int index;
 
-    if ( GetProtocol(left) != _T("file") )
+    if ( GetProtocol(left) != wxT("file") )
     {
         wxLogError(_("CHM handler currently supports only local files!"));
         return NULL;
@@ -800,21 +800,21 @@ wxFSFile* wxChmFSHandler::OpenFile(wxFil
 
     // Work around javascript
     wxString tmp = wxString(right);
-    if ( tmp.MakeLower().Contains(_T("javascipt")) && tmp.Contains(_T("\'")) )
+    if ( tmp.MakeLower().Contains(wxT("javascipt")) && tmp.Contains(wxT("\'")) )
     {
-        right = right.AfterFirst(_T('\'')).BeforeLast(_T('\''));
+        right = right.AfterFirst(wxT('\'')).BeforeLast(wxT('\''));
     }
 
     // now work on the right location
-    if (right.Contains(_T("..")))
+    if (right.Contains(wxT("..")))
     {
         wxFileName abs(right);
-        abs.MakeAbsolute(_T("/"));
+        abs.MakeAbsolute(wxT("/"));
         right = abs.GetFullPath();
     }
 
     // a workaround for absolute links to root
-    if ( (index=right.Index(_T("//"))) != wxNOT_FOUND )
+    if ( (index=right.Index(wxT("//"))) != wxNOT_FOUND )
     {
         right=wxString(right.Mid(index+1));
         wxLogWarning(_("Link contained '//', converted to absolute link."));
@@ -830,7 +830,7 @@ wxFSFile* wxChmFSHandler::OpenFile(wxFil
     if ( s )
     {
         return new wxFSFile(s,
-                            left + _T("#chm:") + right,
+                            left + wxT("#chm:") + right,
                             mime,
                             GetAnchor(location),
                             wxDateTime(wxFileModificationTime(left)));
@@ -851,24 +851,24 @@ wxString wxChmFSHandler::FindFirst(const
     wxString left = GetLeftLocation(spec);
     wxString nativename = wxFileSystem::URLToFileName(left).GetFullPath();
 
-    if ( GetProtocol(left) != _T("file") )
+    if ( GetProtocol(left) != wxT("file") )
     {
         wxLogError(_("CHM handler currently supports only local files!"));
         return wxEmptyString;
     }
 
     m_chm = new wxChmTools(wxFileName(nativename));
-    m_pattern = right.AfterLast(_T('/'));
+    m_pattern = right.AfterLast(wxT('/'));
 
     wxString m_found = m_chm->Find(m_pattern);
 
     // now fake around hhp-files which are not existing in projects...
     if (m_found.empty() &&
-        m_pattern.Contains(_T(".hhp")) &&
-        !m_pattern.Contains(_T(".hhp.cached")))
+        m_pattern.Contains(wxT(".hhp")) &&
+        !m_pattern.Contains(wxT(".hhp.cached")))
     {
-        m_found.Printf(_T("%s#chm:%s.hhp"),
-                       left.c_str(), m_pattern.BeforeLast(_T('.')).c_str());
+        m_found.Printf(wxT("%s#chm:%s.hhp"),
+                       left.c_str(), m_pattern.BeforeLast(wxT('.')).c_str());
     }
 
     return m_found;
--- src/html/htmlwin.cpp-orig	2009-06-18 17:38:06.102838000 -0500
+++ src/html/htmlwin.cpp	2009-06-18 17:38:13.095243000 -0500
@@ -243,7 +243,7 @@ bool wxHtmlWindowMouseHelper::OnCellClic
     {
         // if the event wasn't handled, do the default processing here:
 
-        wxASSERT_MSG( cell, _T("can't be called with NULL cell") );
+        wxASSERT_MSG( cell, wxT("can't be called with NULL cell") );
 
         cell->ProcessMouseClick(m_interface, ev.GetPoint(), ev.GetMouseEvent());
     }
@@ -943,7 +943,7 @@ bool wxHtmlWindow::CopySelection(Clipboa
             const wxString txt(SelectionToText());
             wxTheClipboard->SetData(new wxTextDataObject(txt));
             wxTheClipboard->Close();
-            wxLogTrace(_T("wxhtmlselection"),
+            wxLogTrace(wxT("wxhtmlselection"),
                        _("Copied to clipboard:\"%s\""), txt.c_str());
 
             return true;
@@ -1380,7 +1380,7 @@ void wxHtmlWindow::OnMouseLeave(wxMouseE
                 // but seems to happen sometimes under wxMSW - maybe it's a bug
                 // there but for now just ignore it
 
-                //wxFAIL_MSG( _T("can't understand where has mouse gone") );
+                //wxFAIL_MSG( wxT("can't understand where has mouse gone") );
 
                 return;
             }
--- src/html/helpwnd.cpp-orig	2009-06-18 17:38:19.221864000 -0500
+++ src/html/helpwnd.cpp	2009-06-18 17:38:44.965383000 -0500
@@ -184,7 +184,7 @@ void wxHtmlHelpWindow::UpdateMergedIndex
     for (size_t i = 0; i < len; i++)
     {
         const wxHtmlHelpDataItem& item = items[i];
-        wxASSERT_MSG( item.level < 128, _T("nested index entries too deep") );
+        wxASSERT_MSG( item.level < 128, wxT("nested index entries too deep") );
 
         if (history[item.level] &&
             history[item.level]->items[0]->name == item.name)
@@ -922,7 +922,7 @@ bool wxHtmlHelpWindow::KeywordSearch(con
         switch ( mode )
         {
             default:
-                wxFAIL_MSG( _T("unknown help search mode") );
+                wxFAIL_MSG( wxT("unknown help search mode") );
                 // fall back
 
             case wxHELP_SEARCH_ALL:
@@ -1089,7 +1089,7 @@ void wxHtmlHelpWindow::ReadCustomization
     if (path != wxEmptyString)
     {
         oldpath = cfg->GetPath();
-        cfg->SetPath(_T("/") + path);
+        cfg->SetPath(wxT("/") + path);
     }
 
     m_Cfg.navig_on = cfg->Read(wxT("hcNavigPanel"), m_Cfg.navig_on) != 0;
@@ -1147,7 +1147,7 @@ void wxHtmlHelpWindow::WriteCustomizatio
     if (path != wxEmptyString)
     {
         oldpath = cfg->GetPath();
-        cfg->SetPath(_T("/") + path);
+        cfg->SetPath(wxT("/") + path);
     }
 
     cfg->Write(wxT("hcNavigPanel"), m_Cfg.navig_on);
@@ -1227,7 +1227,7 @@ public:
                       0, NULL, wxCB_DROPDOWN | wxCB_READONLY));
 
         sizer->Add(FontSize = new wxSpinCtrl(this, wxID_ANY, wxEmptyString, wxDefaultPosition,
-                      wxDefaultSize, wxSP_ARROW_KEYS, 2, 100, 2, _T("wxSpinCtrl")));
+                      wxDefaultSize, wxSP_ARROW_KEYS, 2, 100, 2, wxT("wxSpinCtrl")));
 
         topsizer->Add(sizer, 0, wxLEFT|wxRIGHT|wxTOP, 10);
 
@@ -1270,25 +1270,25 @@ public:
 
         wxString content(_("font size"));
 
-        content = _T("<font size=-2>") + content + _T(" -2</font><br>")
-                  _T("<font size=-1>") + content + _T(" -1</font><br>")
-                  _T("<font size=+0>") + content + _T(" +0</font><br>")
-                  _T("<font size=+1>") + content + _T(" +1</font><br>")
-                  _T("<font size=+2>") + content + _T(" +2</font><br>")
-                  _T("<font size=+3>") + content + _T(" +3</font><br>")
-                  _T("<font size=+4>") + content + _T(" +4</font><br>") ;
+        content = wxT("<font size=-2>") + content + wxT(" -2</font><br>")
+                  wxT("<font size=-1>") + content + wxT(" -1</font><br>")
+                  wxT("<font size=+0>") + content + wxT(" +0</font><br>")
+                  wxT("<font size=+1>") + content + wxT(" +1</font><br>")
+                  wxT("<font size=+2>") + content + wxT(" +2</font><br>")
+                  wxT("<font size=+3>") + content + wxT(" +3</font><br>")
+                  wxT("<font size=+4>") + content + wxT(" +4</font><br>") ;
 
-        content = wxString( _T("<html><body><table><tr><td>") ) +
+        content = wxString( wxT("<html><body><table><tr><td>") ) +
                   _("Normal face<br>and <u>underlined</u>. ") +
                   _("<i>Italic face.</i> ") +
                   _("<b>Bold face.</b> ") +
                   _("<b><i>Bold italic face.</i></b><br>") +
                   content +
-                  wxString( _T("</td><td><tt>") ) +
+                  wxString( wxT("</td><td><tt>") ) +
                   _("Fixed size face.<br> <b>bold</b> <i>italic</i> ") +
                   _("<b><i>bold italic <u>underlined</u></i></b><br>") +
                   content +
-                  _T("</tt></td></tr></table></body></html>");
+                  wxT("</tt></td></tr></table></body></html>");
 
         TestWin->SetPage( content );
     }
@@ -1575,11 +1575,11 @@ void wxHtmlHelpWindow::OnToolbar(wxComma
                 if (!s.empty())
                 {
                     wxString ext = s.Right(4).Lower();
-                    if (ext == _T(".zip") || ext == _T(".htb") ||
+                    if (ext == wxT(".zip") || ext == wxT(".htb") ||
 #if wxUSE_LIBMSPACK
-                        ext == _T(".chm") ||
+                        ext == wxT(".chm") ||
 #endif
-                        ext == _T(".hhp"))
+                        ext == wxT(".hhp"))
                     {
                         wxBusyCursor bcur;
                         m_Data->AddBook(s);
--- src/html/htmltag.cpp-orig	2009-06-18 17:38:51.785565000 -0500
+++ src/html/htmltag.cpp	2009-06-18 17:38:59.472627000 -0500
@@ -54,8 +54,8 @@ IMPLEMENT_CLASS(wxHtmlTagsCache,wxObject
 
 bool wxIsCDATAElement(const wxChar *tag)
 {
-    return (wxStrcmp(tag, _T("SCRIPT")) == 0) ||
-           (wxStrcmp(tag, _T("STYLE")) == 0);
+    return (wxStrcmp(tag, wxT("SCRIPT")) == 0) ||
+           (wxStrcmp(tag, wxT("STYLE")) == 0);
 }
 
 wxHtmlTagsCache::wxHtmlTagsCache(const wxString& source)
@@ -87,7 +87,7 @@ wxHtmlTagsCache::wxHtmlTagsCache(const w
             {
                 tagBuffer[i] = (wxChar)wxToupper(src[pos]);
             }
-            tagBuffer[i] = _T('\0');
+            tagBuffer[i] = wxT('\0');
 
             m_Cache[tg].Name = new wxChar[i+1];
             memcpy(m_Cache[tg].Name, tagBuffer, (i+1)*sizeof(wxChar));
@@ -411,12 +411,12 @@ int wxHtmlTag::ScanParam(const wxString&
 
 bool wxHtmlTag::GetParamAsColour(const wxString& par, wxColour *clr) const
 {
-    wxCHECK_MSG( clr, false, _T("invalid colour argument") );
+    wxCHECK_MSG( clr, false, wxT("invalid colour argument") );
 
     wxString str = GetParam(par);
 
     // handle colours defined in HTML 4.0 first:
-    if (str.length() > 1 && str[0] != _T('#'))
+    if (str.length() > 1 && str[0] != wxT('#'))
     {
         #define HTML_COLOUR(name, r, g, b)              \
             if (str.IsSameAs(wxT(name), false))         \
--- src/html/htmlcell.cpp-orig	2009-06-18 17:39:05.658620000 -0500
+++ src/html/htmlcell.cpp	2009-06-18 17:39:14.603738000 -0500
@@ -149,7 +149,7 @@ bool wxHtmlCell::ProcessMouseClick(wxHtm
                                    const wxPoint& pos,
                                    const wxMouseEvent& event)
 {
-    wxCHECK_MSG( window, false, _T("window interface must be provided") );
+    wxCHECK_MSG( window, false, wxT("window interface must be provided") );
 
 #if WXWIN_COMPATIBILITY_2_6
     // NB: this hack puts the body of ProcessMouseClick() into OnMouseClick()
@@ -163,7 +163,7 @@ bool wxHtmlCell::ProcessMouseClick(wxHtm
 
 void wxHtmlCell::OnMouseClick(wxWindow *, int, int, const wxMouseEvent& event)
 {
-    wxCHECK_RET( gs_helperOnMouseClick, _T("unexpected call to OnMouseClick") );
+    wxCHECK_RET( gs_helperOnMouseClick, wxT("unexpected call to OnMouseClick") );
     wxHtmlWindowInterface *window = gs_helperOnMouseClick->window;
     const wxPoint& pos = gs_helperOnMouseClick->pos;
 #endif // WXWIN_COMPATIBILITY_2_6
@@ -341,7 +341,7 @@ bool wxHtmlCell::IsBefore(wxHtmlCell *ce
         }
     }
 
-    wxFAIL_MSG(_T("Cells are in different trees"));
+    wxFAIL_MSG(wxT("Cells are in different trees"));
     return false;
 }
 
@@ -1278,7 +1278,7 @@ bool wxHtmlContainerCell::ProcessMouseCl
 void wxHtmlContainerCell::OnMouseClick(wxWindow*,
                                        int, int, const wxMouseEvent& event)
 {
-    wxCHECK_RET( gs_helperOnMouseClick, _T("unexpected call to OnMouseClick") );
+    wxCHECK_RET( gs_helperOnMouseClick, wxT("unexpected call to OnMouseClick") );
     wxHtmlWindowInterface *window = gs_helperOnMouseClick->window;
     const wxPoint& pos = gs_helperOnMouseClick->pos;
 #endif // WXWIN_COMPATIBILITY_2_6
@@ -1525,7 +1525,7 @@ void wxHtmlWidgetCell::Draw(wxDC& WXUNUS
     wxScrolledWindow *scrolwin =
         wxDynamicCast(m_Wnd->GetParent(), wxScrolledWindow);
     wxCHECK_RET( scrolwin,
-                 _T("widget cells can only be placed in wxHtmlWindow") );
+                 wxT("widget cells can only be placed in wxHtmlWindow") );
 
     scrolwin->GetViewStart(&stx, &sty);
     m_Wnd->SetSize(absx - wxHTML_SCROLL_STEP * stx,
--- src/html/htmlpars.cpp-orig	2009-06-18 17:39:19.855500000 -0500
+++ src/html/htmlpars.cpp	2009-06-18 17:39:30.606268000 -0500
@@ -37,7 +37,7 @@
 // DLL options compatibility check:
 WX_CHECK_BUILD_OPTIONS("wxHTML")
 
-const wxChar *wxTRACE_HTML_DEBUG = _T("htmldebug");
+const wxChar *wxTRACE_HTML_DEBUG = wxT("htmldebug");
 
 //-----------------------------------------------------------------------------
 // wxHtmlParser helpers
@@ -922,18 +922,18 @@ private:
 
 bool wxMetaTagHandler::HandleTag(const wxHtmlTag& tag)
 {
-    if (tag.GetName() == _T("BODY"))
+    if (tag.GetName() == wxT("BODY"))
     {
         m_Parser->StopParsing();
         return false;
     }
 
-    if (tag.HasParam(_T("HTTP-EQUIV")) &&
-        tag.GetParam(_T("HTTP-EQUIV")).IsSameAs(_T("Content-Type"), false) &&
-        tag.HasParam(_T("CONTENT")))
+    if (tag.HasParam(wxT("HTTP-EQUIV")) &&
+        tag.GetParam(wxT("HTTP-EQUIV")).IsSameAs(wxT("Content-Type"), false) &&
+        tag.HasParam(wxT("CONTENT")))
     {
-        wxString content = tag.GetParam(_T("CONTENT")).Lower();
-        if (content.Left(19) == _T("text/html; charset="))
+        wxString content = tag.GetParam(wxT("CONTENT")).Lower();
+        if (content.Left(19) == wxT("text/html; charset="))
         {
             *m_retval = content.Mid(19);
             m_Parser->StopParsing();
--- src/html/htmlfilt.cpp-orig	2009-06-18 17:39:52.414178000 -0500
+++ src/html/htmlfilt.cpp	2009-06-18 17:39:57.926999000 -0500
@@ -165,7 +165,7 @@ wxString wxHtmlFilterHTML::ReadFile(cons
     //     tag if we used Content-Type header).
 #if wxUSE_UNICODE
     int charsetPos;
-    if ((charsetPos = file.GetMimeType().Find(_T("; charset="))) != wxNOT_FOUND)
+    if ((charsetPos = file.GetMimeType().Find(wxT("; charset="))) != wxNOT_FOUND)
     {
         wxString charset = file.GetMimeType().Mid(charsetPos + 10);
         wxCSConv conv(charset);
@@ -191,7 +191,7 @@ wxString wxHtmlFilterHTML::ReadFile(cons
     {
         wxString hdr;
         wxString mime = file.GetMimeType();
-        hdr.Printf(_T("<meta http-equiv=\"Content-Type\" content=\"%s\">"), mime.c_str());
+        hdr.Printf(wxT("<meta http-equiv=\"Content-Type\" content=\"%s\">"), mime.c_str());
         return hdr+doc;
     }
 #endif
--- src/html/helpctrl.cpp-orig	2009-06-21 17:14:09.107380000 -0500
+++ src/html/helpctrl.cpp	2009-06-18 17:39:44.002308000 -0500
@@ -189,7 +189,7 @@ wxWindow* wxHtmlHelpController::CreateHe
     {
         m_Config = wxConfigBase::Get(false);
         if (m_Config != NULL)
-            m_ConfigRoot = _T("wxWindows/wxHtmlHelpController");
+            m_ConfigRoot = wxT("wxWindows/wxHtmlHelpController");
     }
 
     if (m_FrameStyle & wxHF_DIALOG)
--- src/expat/xmlwf/win32filemap.c-orig	2009-06-21 16:04:37.615537000 -0500
+++ src/expat/xmlwf/win32filemap.c	2009-06-21 16:04:52.136692000 -0500
@@ -45,7 +45,7 @@ filemap(const TCHAR *name,
     return 0;
   }
   if (sizeHi) {
-    _ftprintf(stderr, _T("%s: bigger than 2Gb\n"), name);
+    _ftprintf(stderr, wxT("%s: bigger than 2Gb\n"), name);
     return 0;
   }
   /* CreateFileMapping barfs on zero length files */
@@ -87,10 +87,10 @@ win32perror(const TCHAR *s)
                     (LPTSTR) &buf,
                     0,
                     NULL)) {
-    _ftprintf(stderr, _T("%s: %s"), s, buf);
+    _ftprintf(stderr, wxT("%s: %s"), s, buf);
     fflush(stderr);
     LocalFree(buf);
   }
   else
-    _ftprintf(stderr, _T("%s: unknown Windows error\n"), s);
+    _ftprintf(stderr, wxT("%s: unknown Windows error\n"), s);
 }
--- src/expat/xmlwf/xmlwin32url.cxx-orig	2009-06-21 16:05:01.955047000 -0500
+++ src/expat/xmlwf/xmlwin32url.cxx	2009-06-21 16:05:13.090642000 -0500
@@ -127,13 +127,13 @@ reportError(XML_Parser parser)
   int code = XML_GetErrorCode(parser);
   const XML_Char *message = XML_ErrorString(code);
   if (message)
-    _ftprintf(stderr, _T("%s:%d:%ld: %s\n"),
+    _ftprintf(stderr, wxT("%s:%d:%ld: %s\n"),
 	     XML_GetBase(parser),
 	     XML_GetErrorLineNumber(parser),
 	     XML_GetErrorColumnNumber(parser),
 	     message);
   else
-    _ftprintf(stderr, _T("%s: (unknown message %d)\n"),
+    _ftprintf(stderr, wxT("%s: (unknown message %d)\n"),
               XML_GetBase(parser), code);
 }
 
@@ -183,7 +183,7 @@ Callback::OnDataAvailable(DWORD grfBSCF,
 	nToRead = READ_MAX;
       void *buf = XML_GetBuffer(parser_, nToRead);
       if (!buf) {
-	_ftprintf(stderr, _T("out of memory\n"));
+	_ftprintf(stderr, wxT("out of memory\n"));
 	return E_ABORT;
       }
       DWORD nRead;
@@ -329,12 +329,12 @@ winPerror(const XML_Char *url, HRESULT h
 		      0,
 		      NULL)) {
     /* The system error messages seem to end with a newline. */
-    _ftprintf(stderr, _T("%s: %s"), url, buf);
+    _ftprintf(stderr, wxT("%s: %s"), url, buf);
     fflush(stderr);
     LocalFree(buf);
   }
   else
-    _ftprintf(stderr, _T("%s: error %x\n"), url, hr);
+    _ftprintf(stderr, wxT("%s: error %x\n"), url, hr);
 }
 
 static void
--- src/msw/ole/droptgt.cpp-orig	2009-06-18 20:18:14.693890000 -0500
+++ src/msw/ole/droptgt.cpp	2009-06-18 20:18:21.478116000 -0500
@@ -164,7 +164,7 @@ STDMETHODIMP wxIDropTarget::DragEnter(ID
     wxLogTrace(wxTRACE_OleCalls, wxT("IDropTarget::DragEnter"));
 
     wxASSERT_MSG( m_pIDataObject == NULL,
-                  _T("drop target must have data object") );
+                  wxT("drop target must have data object") );
 
     // show the list of formats supported by the source data object for the
     // debugging purposes, this is quite useful sometimes - please don't remove
@@ -175,7 +175,7 @@ STDMETHODIMP wxIDropTarget::DragEnter(ID
         FORMATETC fmt;
         while ( penumFmt->Next(1, &fmt, NULL) == S_OK )
         {
-            wxLogDebug(_T("Drop source supports format %s"),
+            wxLogDebug(wxT("Drop source supports format %s"),
                        wxDataObject::GetFormatName(fmt.cfFormat));
         }
 
@@ -183,7 +183,7 @@ STDMETHODIMP wxIDropTarget::DragEnter(ID
     }
     else
     {
-        wxLogLastError(_T("IDataObject::EnumFormatEtc"));
+        wxLogLastError(wxT("IDataObject::EnumFormatEtc"));
     }
 #endif // 0
 
--- src/msw/ole/dataobj.cpp-orig	2009-06-18 20:18:26.786478000 -0500
+++ src/msw/ole/dataobj.cpp	2009-06-18 20:18:34.086852000 -0500
@@ -53,7 +53,7 @@
 #include "wx/msw/dib.h"
 
 #ifndef CFSTR_SHELLURL
-#define CFSTR_SHELLURL _T("UniformResourceLocator")
+#define CFSTR_SHELLURL wxT("UniformResourceLocator")
 #endif
 
 // ----------------------------------------------------------------------------
@@ -1168,7 +1168,7 @@ bool wxFileDataObject::GetDataHere(void 
 // Work around bug in Wine headers
 #if defined(__WINE__) && defined(CFSTR_SHELLURL) && wxUSE_UNICODE
 #undef CFSTR_SHELLURL
-#define CFSTR_SHELLURL _T("CFSTR_SHELLURL")
+#define CFSTR_SHELLURL wxT("CFSTR_SHELLURL")
 #endif
 
 class CFSTR_SHELLURLDataObject : public wxCustomDataObject
@@ -1248,7 +1248,7 @@ bool wxURLDataObject::SetData(const wxDa
 wxString wxURLDataObject::GetURL() const
 {
     wxString url;
-    wxCHECK_MSG( m_dataObjectLast, url, _T("no data in wxURLDataObject") );
+    wxCHECK_MSG( m_dataObjectLast, url, wxT("no data in wxURLDataObject") );
 
     size_t len = m_dataObjectLast->GetDataSize();
 
--- src/msw/ole/oleutils.cpp-orig	2009-06-18 20:18:39.093552000 -0500
+++ src/msw/ole/oleutils.cpp	2009-06-18 20:18:43.648673000 -0500
@@ -174,7 +174,7 @@ static wxString GetIidName(REFIID riid)
   };
 
   // construct the table containing all known interfaces
-  #define ADD_KNOWN_IID(name) { &IID_I##name, _T(#name) }
+  #define ADD_KNOWN_IID(name) { &IID_I##name, wxT(#name) }
 
   static const KNOWN_IID aKnownIids[] = {
     ADD_KNOWN_IID(AdviseSink),
--- src/msw/wince/tbarwce.cpp-orig	2009-06-18 20:12:21.414933000 -0500
+++ src/msw/wince/tbarwce.cpp	2009-06-18 20:12:27.684227000 -0500
@@ -216,7 +216,7 @@ bool wxToolMenuBar::MSWCreateToolbar(con
 
     if (!SHCreateMenuBar(&mbi))
     {
-        wxFAIL_MSG( _T("SHCreateMenuBar failed") );
+        wxFAIL_MSG( wxT("SHCreateMenuBar failed") );
         return false;
     }
 
@@ -308,7 +308,7 @@ bool wxToolMenuBar::DoDeleteTool(size_t 
     RECT r;
     if ( !::SendMessage(GetHwnd(), TB_GETITEMRECT, pos, (LPARAM)&r) )
     {
-        wxLogLastError(_T("TB_GETITEMRECT"));
+        wxLogLastError(wxT("TB_GETITEMRECT"));
     }
 
     int width = r.right - r.left;
@@ -466,7 +466,7 @@ bool wxToolMenuBar::Realize()
                         break;
 
                     default:
-                        wxFAIL_MSG( _T("unexpected toolbar button kind") );
+                        wxFAIL_MSG( wxT("unexpected toolbar button kind") );
                         // fall through
 
                     case wxITEM_NORMAL:
@@ -642,7 +642,7 @@ void wxToolBar::DoToggleTool(wxToolBarTo
 
 void wxToolBar::DoSetToggle(wxToolBarToolBase *WXUNUSED(tool), bool WXUNUSED(toggle))
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 #endif
--- src/msw/wince/checklst.cpp-orig	2009-06-18 20:12:32.643483000 -0500
+++ src/msw/wince/checklst.cpp	2009-06-18 20:12:42.344925000 -0500
@@ -154,11 +154,11 @@ void wxCheckListBox::OnSize(wxSizeEvent&
 
 void wxCheckListBox::Delete(unsigned int n)
 {
-    wxCHECK_RET( IsValid( n ), _T("invalid index in wxCheckListBox::Delete") );
+    wxCHECK_RET( IsValid( n ), wxT("invalid index in wxCheckListBox::Delete") );
 
     if ( !ListView_DeleteItem(GetHwnd(), n) )
     {
-        wxLogLastError(_T("ListView_DeleteItem"));
+        wxLogLastError(wxT("ListView_DeleteItem"));
     }
     m_itemsClientData.RemoveAt(n);
 }
@@ -169,7 +169,7 @@ void wxCheckListBox::Delete(unsigned int
 bool wxCheckListBox::IsChecked(unsigned int uiIndex) const
 {
     wxCHECK_MSG( IsValid( uiIndex ), false,
-                 _T("invalid index in wxCheckListBox::IsChecked") );
+                 wxT("invalid index in wxCheckListBox::IsChecked") );
 
     return (ListView_GetCheckState(((HWND)GetHWND()), uiIndex) != 0);
 }
@@ -177,7 +177,7 @@ bool wxCheckListBox::IsChecked(unsigned 
 void wxCheckListBox::Check(unsigned int uiIndex, bool bCheck)
 {
     wxCHECK_RET( IsValid( uiIndex ),
-                 _T("invalid index in wxCheckListBox::Check") );
+                 wxT("invalid index in wxCheckListBox::Check") );
 
     ListView_SetCheckState(((HWND)GetHWND()), uiIndex, bCheck)
 }
@@ -198,7 +198,7 @@ void wxCheckListBox::Clear()
     m_itemsClientData.Clear();
 
     wxCHECK_RET( n == GetCount(),
-                 _T("broken wxCheckListBox::Clear()") );
+                 wxT("broken wxCheckListBox::Clear()") );
 }
 
 unsigned int wxCheckListBox::GetCount() const
@@ -237,7 +237,7 @@ wxString wxCheckListBox::GetString(unsig
     const int bufSize = 513;
     wxChar buf[bufSize];
     ListView_GetItemText( (HWND)GetHWND(), n, 0, buf, bufSize - 1 );
-    buf[bufSize-1] = _T('\0');
+    buf[bufSize-1] = wxT('\0');
     wxString str(buf);
     return str;
 }
@@ -251,7 +251,7 @@ bool wxCheckListBox::IsSelected(int n) c
 void wxCheckListBox::SetString(unsigned int n, const wxString& s)
 {
     wxCHECK_RET( IsValid( n ),
-                 _T("invalid index in wxCheckListBox::SetString") );
+                 wxT("invalid index in wxCheckListBox::SetString") );
     wxChar *buf = new wxChar[s.length()+1];
     wxStrcpy(buf, s.c_str());
     ListView_SetItemText( (HWND)GetHWND(), n, 0, buf );
@@ -265,7 +265,7 @@ int wxCheckListBox::DoAppend(const wxStr
     wxZeroMemory(newItem);
     newItem.iItem = n;
     int ret = ListView_InsertItem( (HWND)GetHWND(), & newItem );
-    wxCHECK_MSG( n == ret , -1, _T("Item not added") );
+    wxCHECK_MSG( n == ret , -1, wxT("Item not added") );
     SetString( ret , item );
     m_itemsClientData.Insert(NULL, ret);
     return ret;
@@ -292,7 +292,7 @@ void wxCheckListBox::DoInsertItems(const
         wxZeroMemory(newItem);
         newItem.iItem = i+pos;
         int ret = ListView_InsertItem( (HWND)GetHWND(), & newItem );
-        wxASSERT_MSG( int(i+pos) == ret , _T("Item not added") );
+        wxASSERT_MSG( int(i+pos) == ret , wxT("Item not added") );
         SetString( ret , items[i] );
         m_itemsClientData.Insert(NULL, ret);
     }
@@ -304,7 +304,7 @@ void wxCheckListBox::DoSetFirstItem(int 
     if(pos == n) return;
     POINT ppt;
     BOOL ret = ListView_GetItemPosition( (HWND)GetHWND(), n, &ppt );
-    wxCHECK_RET( ret == TRUE, _T("Broken DoSetFirstItem") );
+    wxCHECK_RET( ret == TRUE, wxT("Broken DoSetFirstItem") );
     ListView_Scroll( (HWND)GetHWND(), 0, 0 );
     ListView_Scroll( (HWND)GetHWND(), 0, ppt.y );
 }
--- src/msw/wince/textctrlce.cpp-orig	2009-06-18 20:12:49.283434000 -0500
+++ src/msw/wince/textctrlce.cpp	2009-06-18 20:12:57.493318000 -0500
@@ -171,7 +171,7 @@ bool wxTextCtrl::Create(wxWindow *parent
     sizeText.x -= sizeBtn.x + MARGIN_BETWEEN;
     if ( sizeText.x <= 0 )
     {
-        wxLogDebug(_T("not enough space for wxSpinCtrl!"));
+        wxLogDebug(wxT("not enough space for wxSpinCtrl!"));
     }
 
     wxPoint posBtn(pos);
@@ -199,7 +199,7 @@ bool wxTextCtrl::Create(wxWindow *parent
     m_hwndBuddy = (WXHWND)::CreateWindowEx
                     (
                      exStyle,                // sunken border
-                     _T("EDIT"),             // window class
+                     wxT("EDIT"),             // window class
                      valueWin,               // no window title
                      msStyle,                // style (will be shown later)
                      pos.x, pos.y,           // position
@@ -233,7 +233,7 @@ bool wxTextCtrl::Create(wxWindow *parent
     if ( style & wxSP_WRAP )
         spiner_style |= UDS_WRAP;
 
-    if ( !MSWCreateControl(UPDOWN_CLASS, spiner_style, posBtn, sizeBtn, _T(""), 0) )
+    if ( !MSWCreateControl(UPDOWN_CLASS, spiner_style, posBtn, sizeBtn, wxT(""), 0) )
         return false;
 
     // subclass the text ctrl to be able to intercept some events
@@ -807,7 +807,7 @@ wxString wxTextCtrl::GetLineText(long li
 
         // remove the '\n' at the end, if any (this is how this function is
         // supposed to work according to the docs)
-        if ( buf[len - 1] == _T('\n') )
+        if ( buf[len - 1] == wxT('\n') )
         {
             len--;
         }
@@ -1087,7 +1087,7 @@ void wxTextCtrl::DoMoveWindow(int x, int
     int widthText = width - widthBtn - MARGIN_BETWEEN;
     if ( widthText <= 0 )
     {
-        wxLogDebug(_T("not enough space for wxSpinCtrl!"));
+        wxLogDebug(wxT("not enough space for wxSpinCtrl!"));
     }
 
     if ( !::MoveWindow(GetBuddyHwnd(), x, y, widthText, height, TRUE) )
--- src/msw/wince/menuce.cpp-orig	2009-06-18 20:13:02.380324000 -0500
+++ src/msw/wince/menuce.cpp	2009-06-18 20:13:06.464398000 -0500
@@ -225,7 +225,7 @@ void wxTopLevelWindowMSW::ReloadAllButto
 
     if (!SHCreateMenuBar(&menu_bar))
     {
-        wxFAIL_MSG( _T("SHCreateMenuBar failed") );
+        wxFAIL_MSG( wxT("SHCreateMenuBar failed") );
         return;
     }
 
--- src/msw/wince/filedlgwce.cpp-orig	2009-06-18 20:13:16.562230000 -0500
+++ src/msw/wince/filedlgwce.cpp	2009-06-18 20:13:24.834169000 -0500
@@ -89,8 +89,8 @@ void wxFileDialog::GetPaths(wxArrayStrin
     paths.Empty();
 
     wxString dir(m_dir);
-    if ( m_dir.Last() != _T('\\') )
-        dir += _T('\\');
+    if ( m_dir.Last() != wxT('\\') )
+        dir += wxT('\\');
 
     size_t count = m_fileNames.GetCount();
     for ( size_t n = 0; n < count; n++ )
@@ -107,7 +107,7 @@ void wxFileDialog::SetPath(const wxStrin
     wxString ext;
     wxSplitPath(path, &m_dir, &m_fileName, &ext);
     if ( !ext.empty() )
-        m_fileName << _T('.') << ext;
+        m_fileName << wxT('.') << ext;
 }
 
 int wxFileDialog::ShowModal()
--- src/msw/wince/choicece.cpp-orig	2009-06-18 20:13:30.294209000 -0500
+++ src/msw/wince/choicece.cpp	2009-06-18 20:13:45.988865000 -0500
@@ -113,7 +113,7 @@ wxChoice *wxChoice::GetChoiceForListBox(
 
     // sanity check
     wxASSERT_MSG( choice->m_hwndBuddy == hwndBuddy,
-                  _T("wxChoice has incorrect buddy HWND!") );
+                  wxT("wxChoice has incorrect buddy HWND!") );
 
     return choice;
 }
@@ -169,7 +169,7 @@ bool wxChoice::CreateAndInit(wxWindow *p
     sizeText.x -= sizeBtn.x + MARGIN_BETWEEN;
     if ( sizeText.x <= 0 )
     {
-        wxLogDebug(_T("not enough space for wxSpinCtrl!"));
+        wxLogDebug(wxT("not enough space for wxSpinCtrl!"));
     }
 
     wxPoint posBtn(pos);
@@ -186,7 +186,7 @@ bool wxChoice::CreateAndInit(wxWindow *p
     m_hwndBuddy = (WXHWND)::CreateWindowEx
                     (
                      exStyle,                // sunken border
-                     _T("LISTBOX"),          // window class
+                     wxT("LISTBOX"),         // window class
                      NULL,                   // no window title
                      msStyle,                // style (will be shown later)
                      pos.x, pos.y,           // position
@@ -545,7 +545,7 @@ void wxChoice::DoMoveWindow(int x, int y
     int widthText = width - widthBtn - MARGIN_BETWEEN;
     if ( widthText <= 0 )
     {
-        wxLogDebug(_T("not enough space for wxSpinCtrl!"));
+        wxLogDebug(wxT("not enough space for wxSpinCtrl!"));
     }
 
     if ( !::MoveWindow(GetBuddyHwnd(), x, y, widthText, height, TRUE) )
--- src/msw/stackwalk.cpp-orig	2009-06-18 20:01:27.946120000 -0500
+++ src/msw/stackwalk.cpp	2009-06-18 20:01:40.126777000 -0500
@@ -68,7 +68,7 @@ void wxStackFrame::OnGetName()
                             pSymbol
                         ) )
     {
-        wxDbgHelpDLL::LogError(_T("SymFromAddr"));
+        wxDbgHelpDLL::LogError(wxT("SymFromAddr"));
         return;
     }
 
@@ -96,7 +96,7 @@ void wxStackFrame::OnGetLocation()
     {
         // it is normal that we don't have source info for some symbols,
         // notably all the ones from the system DLLs...
-        //wxDbgHelpDLL::LogError(_T("SymGetLineFromAddr"));
+        //wxDbgHelpDLL::LogError(wxT("SymGetLineFromAddr"));
         return;
     }
 
@@ -190,7 +190,7 @@ void wxStackFrame::OnGetParam()
         // address, this is not a real error
         if ( ::GetLastError() != ERROR_INVALID_ADDRESS )
         {
-            wxDbgHelpDLL::LogError(_T("SymSetContext"));
+            wxDbgHelpDLL::LogError(wxT("SymSetContext"));
         }
 
         return;
@@ -205,7 +205,7 @@ void wxStackFrame::OnGetParam()
                             this                // data to pass to it
                         ) )
     {
-        wxDbgHelpDLL::LogError(_T("SymEnumSymbols"));
+        wxDbgHelpDLL::LogError(wxT("SymEnumSymbols"));
     }
 }
 
@@ -221,7 +221,7 @@ void wxStackWalker::WalkFrom(const CONTE
         // don't log a user-visible error message here because the stack trace
         // is only needed for debugging/diagnostics anyhow and we shouldn't
         // confuse the user by complaining that we couldn't generate it
-        wxLogDebug(_T("Failed to get stack backtrace: %s"),
+        wxLogDebug(wxT("Failed to get stack backtrace: %s"),
                    wxDbgHelpDLL::GetErrorMessage().c_str());
         return;
     }
@@ -240,7 +240,7 @@ void wxStackWalker::WalkFrom(const CONTE
                             TRUE    // load symbols for all loaded modules
                         ) )
     {
-        wxDbgHelpDLL::LogError(_T("SymInitialize"));
+        wxDbgHelpDLL::LogError(wxT("SymInitialize"));
 
         return;
     }
@@ -285,7 +285,7 @@ void wxStackWalker::WalkFrom(const CONTE
                             ) )
         {
             if ( ::GetLastError() )
-                wxDbgHelpDLL::LogError(_T("StackWalk"));
+                wxDbgHelpDLL::LogError(wxT("StackWalk"));
 
             break;
         }
@@ -306,7 +306,7 @@ void wxStackWalker::WalkFrom(const CONTE
 #if 0
     if ( !wxDbgHelpDLL::SymCleanup(hProcess) )
     {
-        wxDbgHelpDLL::LogError(_T("SymCleanup"));
+        wxDbgHelpDLL::LogError(wxT("SymCleanup"));
     }
 #endif
 }
@@ -321,7 +321,7 @@ void wxStackWalker::WalkFromException()
     extern EXCEPTION_POINTERS *wxGlobalSEInformation;
 
     wxCHECK_RET( wxGlobalSEInformation,
-                 _T("wxStackWalker::WalkFromException() can only be called from wxApp::OnFatalException()") );
+                 wxT("wxStackWalker::WalkFromException() can only be called from wxApp::OnFatalException()") );
 
     // don't skip any frames, the first one is where we crashed
     WalkFrom(wxGlobalSEInformation, 0);
--- src/msw/brush.cpp-orig	2009-06-18 20:01:47.848885000 -0500
+++ src/msw/brush.cpp	2009-06-18 20:01:55.942876000 -0500
@@ -190,7 +190,7 @@ HBRUSH wxBrushRefData::GetHBRUSH()
                     break;
 
                 default:
-                    wxFAIL_MSG( _T("unknown brush style") );
+                    wxFAIL_MSG( wxT("unknown brush style") );
                     // fall through
 
                 case wxSOLID:
@@ -207,7 +207,7 @@ HBRUSH wxBrushRefData::GetHBRUSH()
 
         if ( !m_hBrush )
         {
-            wxLogLastError(_T("CreateXXXBrush()"));
+            wxLogLastError(wxT("CreateXXXBrush()"));
         }
     }
 
@@ -268,28 +268,28 @@ wxObjectRefData *wxBrush::CloneRefData(c
 
 wxColour wxBrush::GetColour() const
 {
-    wxCHECK_MSG( Ok(), wxNullColour, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), wxNullColour, wxT("invalid brush") );
 
     return M_BRUSHDATA->GetColour();
 }
 
 int wxBrush::GetStyle() const
 {
-    wxCHECK_MSG( Ok(), 0, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), 0, wxT("invalid brush") );
 
     return M_BRUSHDATA->GetStyle();
 }
 
 wxBitmap *wxBrush::GetStipple() const
 {
-    wxCHECK_MSG( Ok(), NULL, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), NULL, wxT("invalid brush") );
 
     return M_BRUSHDATA->GetStipple();
 }
 
 WXHANDLE wxBrush::GetResourceHandle() const
 {
-    wxCHECK_MSG( Ok(), FALSE, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), FALSE, wxT("invalid brush") );
 
     return (WXHANDLE)M_BRUSHDATA->GetHBRUSH();
 }
--- src/msw/registry.cpp-orig	2009-06-18 20:02:04.015759000 -0500
+++ src/msw/registry.cpp	2009-06-18 20:02:11.636942000 -0500
@@ -311,7 +311,7 @@ wxString wxRegKey::GetName(bool bShortPr
   wxString str = bShortPrefix ? aStdKeys[key].szShortName
                               : aStdKeys[key].szName;
   if ( !m_strKey.empty() )
-    str << _T("\\") << m_strKey;
+    str << wxT("\\") << m_strKey;
 
   return str;
 }
@@ -329,7 +329,7 @@ bool wxRegKey::GetKeyInfo(size_t *pnSubK
 #endif
 
   // it might be unexpected to some that this function doesn't open the key
-  wxASSERT_MSG( IsOpened(), _T("key should be opened in GetKeyInfo") );
+  wxASSERT_MSG( IsOpened(), wxT("key should be opened in GetKeyInfo") );
 
   m_dwLastError = ::RegQueryInfoKey
                   (
@@ -529,7 +529,7 @@ bool wxRegKey::CopyValue(const wxChar *s
 
 bool wxRegKey::Rename(const wxChar *szNewName)
 {
-    wxCHECK_MSG( !m_strKey.empty(), false, _T("registry hives can't be renamed") );
+    wxCHECK_MSG( !m_strKey.empty(), false, wxT("registry hives can't be renamed") );
 
     if ( !Exists() ) {
         wxLogError(_("Registry key '%s' does not exist, cannot rename it."),
@@ -947,7 +947,7 @@ bool wxRegKey::QueryValue(const wxChar *
 
                     if ( !ok )
                     {
-                        wxLogLastError(_T("ExpandEnvironmentStrings"));
+                        wxLogLastError(wxT("ExpandEnvironmentStrings"));
                     }
                 }
 #endif
@@ -1151,7 +1151,7 @@ bool wxRegKey::Export(const wxString& fi
         return false;
     }
 
-    wxFFileOutputStream ostr(filename, _T("w"));
+    wxFFileOutputStream ostr(filename, wxT("w"));
 
     return ostr.Ok() && Export(ostr);
 #else
@@ -1177,13 +1177,13 @@ FormatAsHex(const void *data,
             size_t size,
             wxRegKey::ValueType type = wxRegKey::Type_Binary)
 {
-    wxString value(_T("hex"));
+    wxString value(wxT("hex"));
 
     // binary values use just "hex:" prefix while the other ones must indicate
     // the real type
     if ( type != wxRegKey::Type_Binary )
-        value << _T('(') << type << _T(')');
-    value << _T(':');
+        value << wxT('(') << type << wxT(')');
+    value << wxT(':');
 
     // write all the rest as comma-separated bytes
     value.reserve(3*size + 10);
@@ -1194,9 +1194,9 @@ FormatAsHex(const void *data,
         //       the generated files easier to read and compare with the files
         //       produced by regedit
         if ( n )
-            value << _T(',');
+            value << wxT(',');
 
-        value << wxString::Format(_T("%02x"), (unsigned char)p[n]);
+        value << wxString::Format(wxT("%02x"), (unsigned char)p[n]);
     }
 
     return value;
@@ -1223,7 +1223,7 @@ wxString wxRegKey::FormatValue(const wxS
                 // quotes and backslashes must be quoted, linefeeds are not
                 // allowed in string values
                 rhs.reserve(value.length() + 2);
-                rhs = _T('"');
+                rhs = wxT('"');
 
                 // there can be no NULs here
                 bool useHex = false;
@@ -1231,15 +1231,15 @@ wxString wxRegKey::FormatValue(const wxS
                 {
                     switch ( *p )
                     {
-                        case _T('\n'):
+                        case wxT('\n'):
                             // we can only represent this string in hex
                             useHex = true;
                             break;
 
-                        case _T('"'):
-                        case _T('\\'):
+                        case wxT('"'):
+                        case wxT('\\'):
                             // escape special symbol
-                            rhs += _T('\\');
+                            rhs += wxT('\\');
                             // fall through
 
                         default:
@@ -1250,7 +1250,7 @@ wxString wxRegKey::FormatValue(const wxS
                 if ( useHex )
                     rhs = FormatAsHex(value, Type_String);
                 else
-                    rhs += _T('"');
+                    rhs += wxT('"');
             }
             break;
 
@@ -1261,7 +1261,7 @@ wxString wxRegKey::FormatValue(const wxS
                 if ( !QueryValue(name, &value) )
                     break;
 
-                rhs.Printf(_T("dword:%08x"), (unsigned int)value);
+                rhs.Printf(wxT("dword:%08x"), (unsigned int)value);
             }
             break;
 
--- src/msw/datectrl.cpp-orig	2009-06-18 20:02:21.694589000 -0500
+++ src/msw/datectrl.cpp	2009-06-18 20:02:29.596669000 -0500
@@ -120,9 +120,9 @@ wxDatePickerCtrl::Create(wxWindow *paren
 
         wxDynamicLibrary dllComCtl32(
 #ifdef __WXWINCE__
-            _T("commctrl.dll")
+            wxT("commctrl.dll")
 #else
-            _T("comctl32.dll")
+            wxT("comctl32.dll")
 #endif
             , wxDL_VERBATIM);
 
@@ -218,7 +218,7 @@ wxSize wxDatePickerCtrl::DoGetBestSize()
         const DWORD rc = ::GetLastError();
         if ( rc != ERROR_INSUFFICIENT_BUFFER )
         {
-            wxLogApiError(_T("GetDateFormat"), rc);
+            wxLogApiError(wxT("GetDateFormat"), rc);
 
             // fall back on wxDateTime, what else to do?
             s = wxDateTime::Today().FormatDate();
@@ -227,7 +227,7 @@ wxSize wxDatePickerCtrl::DoGetBestSize()
     }
 
     // the control adds a lot of extra space around separators
-    s.Replace(_T(","), _T("    ,    "));
+    s.Replace(wxT(","), wxT("    ,    "));
 
     int x, y;
     dc.GetTextExtent(s, &x, &y);
@@ -244,7 +244,7 @@ wxSize wxDatePickerCtrl::DoGetBestSize()
 void wxDatePickerCtrl::SetValue(const wxDateTime& dt)
 {
     wxCHECK_RET( dt.IsValid() || HasFlag(wxDP_ALLOWNONE),
-                    _T("this control requires a valid date") );
+                    wxT("this control requires a valid date") );
 
     SYSTEMTIME st;
     if ( dt.IsValid() )
@@ -253,7 +253,7 @@ void wxDatePickerCtrl::SetValue(const wx
                                  dt.IsValid() ? GDT_VALID : GDT_NONE,
                                  &st) )
     {
-        wxLogDebug(_T("DateTime_SetSystemtime() failed"));
+        wxLogDebug(wxT("DateTime_SetSystemtime() failed"));
     }
 
     // we need to keep only the date part, times don't make sense for this
@@ -275,7 +275,7 @@ wxDateTime wxDatePickerCtrl::GetValue() 
 
     wxASSERT_MSG( m_date.IsValid() == dt.IsValid() &&
                     (!dt.IsValid() || dt == m_date),
-                  _T("bug in wxDatePickerCtrl: m_date not in sync") );
+                  wxT("bug in wxDatePickerCtrl: m_date not in sync") );
 #endif // __WXDEBUG__
 
     return m_date;
@@ -300,7 +300,7 @@ void wxDatePickerCtrl::SetRange(const wx
 
     if ( !DateTime_SetRange(GetHwnd(), flags, st) )
     {
-        wxLogDebug(_T("DateTime_SetRange() failed"));
+        wxLogDebug(wxT("DateTime_SetRange() failed"));
     }
 }
 
--- src/msw/font.cpp-orig	2009-06-18 20:02:33.422920000 -0500
+++ src/msw/font.cpp	2009-06-18 20:02:38.405155000 -0500
@@ -428,7 +428,7 @@ void wxNativeFontInfo::Init()
 #ifdef __WXWINCE__
     lf.lfQuality = CLEARTYPE_QUALITY;
 #else
-    lf.lfQuality = wxSystemOptions::GetOptionInt(_T("msw.font.no-proof-quality"))
+    lf.lfQuality = wxSystemOptions::GetOptionInt(wxT("msw.font.no-proof-quality"))
                     ? DEFAULT_QUALITY
                     : PROOF_QUALITY;
 #endif
@@ -489,7 +489,7 @@ wxFontFamily wxNativeFontInfo::GetFamily
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown LOGFONT::lfFamily value") );
+            wxFAIL_MSG( wxT("unknown LOGFONT::lfFamily value") );
             // fall through
 
         case FF_SWISS:
@@ -538,7 +538,7 @@ void wxNativeFontInfo::SetStyle(wxFontSt
     switch ( style )
     {
         default:
-            wxFAIL_MSG( _T("unknown font style") );
+            wxFAIL_MSG( wxT("unknown font style") );
             // fall through
 
         case wxFONTSTYLE_NORMAL:
@@ -557,7 +557,7 @@ void wxNativeFontInfo::SetWeight(wxFontW
     switch ( weight )
     {
         default:
-            wxFAIL_MSG( _T("unknown font weight") );
+            wxFAIL_MSG( wxT("unknown font weight") );
             // fall through
 
         case wxFONTWEIGHT_NORMAL:
@@ -599,46 +599,46 @@ void wxNativeFontInfo::SetFamily(wxFontF
     {
         case wxSCRIPT:
             ff_family = FF_SCRIPT;
-            facename.Add(_T("Script"));
-            facename.Add(_T("Brush Script MT"));
-            facename.Add(_T("Comic Sans MS"));
-            facename.Add(_T("Lucida Handwriting"));
+            facename.Add(wxT("Script"));
+            facename.Add(wxT("Brush Script MT"));
+            facename.Add(wxT("Comic Sans MS"));
+            facename.Add(wxT("Lucida Handwriting"));
             break;
 
         case wxDECORATIVE:
             ff_family = FF_DECORATIVE;
-            facename.Add(_T("Old English Text MT"));
-            facename.Add(_T("Comic Sans MS"));
-            facename.Add(_T("Lucida Handwriting"));
+            facename.Add(wxT("Old English Text MT"));
+            facename.Add(wxT("Comic Sans MS"));
+            facename.Add(wxT("Lucida Handwriting"));
             break;
 
         case wxROMAN:
             ff_family = FF_ROMAN;
-            facename.Add(_T("Times New Roman"));
-            facename.Add(_T("Georgia"));
-            facename.Add(_T("Garamond"));
-            facename.Add(_T("Bookman Old Style"));
-            facename.Add(_T("Book Antiqua"));
+            facename.Add(wxT("Times New Roman"));
+            facename.Add(wxT("Georgia"));
+            facename.Add(wxT("Garamond"));
+            facename.Add(wxT("Bookman Old Style"));
+            facename.Add(wxT("Book Antiqua"));
             break;
 
         case wxTELETYPE:
         case wxMODERN:
             ff_family = FF_MODERN;
-            facename.Add(_T("Courier New"));
-            facename.Add(_T("Lucida Console"));
-            facename.Add(_T("Andale Mono"));
-            facename.Add(_T("OCR A Extended"));
-            facename.Add(_T("Terminal"));
+            facename.Add(wxT("Courier New"));
+            facename.Add(wxT("Lucida Console"));
+            facename.Add(wxT("Andale Mono"));
+            facename.Add(wxT("OCR A Extended"));
+            facename.Add(wxT("Terminal"));
             break;
 
         case wxSWISS:
             ff_family = FF_SWISS;
-            facename.Add(_T("Arial"));
-            facename.Add(_T("Century Gothic"));
-            facename.Add(_T("Lucida Sans Unicode"));
-            facename.Add(_T("Tahoma"));
-            facename.Add(_T("Trebuchet MS"));
-            facename.Add(_T("Verdana"));
+            facename.Add(wxT("Arial"));
+            facename.Add(wxT("Century Gothic"));
+            facename.Add(wxT("Lucida Sans Unicode"));
+            facename.Add(wxT("Tahoma"));
+            facename.Add(wxT("Trebuchet MS"));
+            facename.Add(wxT("Verdana"));
             break;
 
         case wxDEFAULT:
@@ -649,9 +649,9 @@ void wxNativeFontInfo::SetFamily(wxFontF
             int verMaj;
             ff_family = FF_SWISS;
             if(wxGetOsVersion(&verMaj) == wxOS_WINDOWS_NT && verMaj >= 5)
-                facename.Add(_T("MS Shell Dlg 2"));
+                facename.Add(wxT("MS Shell Dlg 2"));
             else
-                facename.Add(_T("MS Shell Dlg"));
+                facename.Add(wxT("MS Shell Dlg"));
 
             // Quoting the MSDN:
             //     "MS Shell Dlg is a mapping mechanism that enables
@@ -700,11 +700,11 @@ bool wxNativeFontInfo::FromString(const 
 {
     long l;
 
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     // first the version
     wxString token = tokenizer.GetNextToken();
-    if ( token != _T('0') )
+    if ( token != wxT('0') )
         return false;
 
     token = tokenizer.GetNextToken();
@@ -784,7 +784,7 @@ wxString wxNativeFontInfo::ToString() co
 {
     wxString s;
 
-    s.Printf(_T("%d;%ld;%ld;%ld;%ld;%ld;%d;%d;%d;%d;%d;%d;%d;%d;%s"),
+    s.Printf(wxT("%d;%ld;%ld;%ld;%ld;%ld;%d;%d;%d;%d;%d;%d;%d;%d;%s"),
              0, // version, in case we want to change the format later
              lf.lfHeight,
              lf.lfWidth,
--- src/msw/window.cpp-orig	2009-06-18 20:02:42.798645000 -0500
+++ src/msw/window.cpp	2009-06-18 20:02:47.481533000 -0500
@@ -223,7 +223,7 @@ static inline void wxBringWindowToTop(HW
     // raise top level parent to top of z order
     if (!::SetWindowPos(hwnd, HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE))
     {
-        wxLogLastError(_T("SetWindowPos"));
+        wxLogLastError(wxT("SetWindowPos"));
     }
 }
 
@@ -624,7 +624,7 @@ bool wxWindowMSW::Create(wxWindow *paren
 void wxWindowMSW::SetFocus()
 {
     HWND hWnd = GetHwnd();
-    wxCHECK_RET( hWnd, _T("can't set focus to invalid window") );
+    wxCHECK_RET( hWnd, wxT("can't set focus to invalid window") );
 
 #if !defined(__WXMICROWIN__) && !defined(__WXWINCE__)
     ::SetLastError(0);
@@ -640,7 +640,7 @@ void wxWindowMSW::SetFocus()
             HWND hwndFocus = ::GetFocus();
             if ( hwndFocus != hWnd )
             {
-                wxLogApiError(_T("SetFocus"), dwRes);
+                wxLogApiError(wxT("SetFocus"), dwRes);
             }
         }
 #endif // Debug
@@ -790,7 +790,7 @@ void wxWindowMSW::DoReleaseMouse()
 {
     if ( !::ReleaseCapture() )
     {
-        wxLogLastError(_T("ReleaseCapture"));
+        wxLogLastError(wxT("ReleaseCapture"));
     }
 }
 
@@ -870,7 +870,7 @@ void wxWindowMSW::WarpPointer(int x, int
 
     if ( !::SetCursorPos(x, y) )
     {
-        wxLogLastError(_T("SetCursorPos"));
+        wxLogLastError(wxT("SetCursorPos"));
     }
 }
 
@@ -916,7 +916,7 @@ inline int GetScrollPosition(HWND hWnd, 
 int wxWindowMSW::GetScrollPos(int orient) const
 {
     HWND hWnd = GetHwnd();
-    wxCHECK_MSG( hWnd, 0, _T("no HWND in GetScrollPos") );
+    wxCHECK_MSG( hWnd, 0, wxT("no HWND in GetScrollPos") );
 
     return GetScrollPosition(hWnd, orient == wxHORIZONTAL ? SB_HORZ : SB_VERT);
 }
@@ -941,7 +941,7 @@ int wxWindowMSW::GetScrollRange(int orie
     {
         // Most of the time this is not really an error, since the return
         // value can also be zero when there is no scrollbar yet.
-        // wxLogLastError(_T("GetScrollInfo"));
+        // wxLogLastError(wxT("GetScrollInfo"));
     }
     maxPos = scrollInfo.nMax;
 
@@ -957,7 +957,7 @@ int wxWindowMSW::GetScrollThumb(int orie
 void wxWindowMSW::SetScrollPos(int orient, int pos, bool refresh)
 {
     HWND hWnd = GetHwnd();
-    wxCHECK_RET( hWnd, _T("SetScrollPos: no HWND") );
+    wxCHECK_RET( hWnd, wxT("SetScrollPos: no HWND") );
 
     WinStruct<SCROLLINFO> info;
     info.nPage = 0;
@@ -1081,7 +1081,7 @@ void wxWindowMSW::SetLayoutDirection(wxL
     wxUnusedVar(dir);
 #else
     const HWND hwnd = GetHwnd();
-    wxCHECK_RET( hwnd, _T("layout direction must be set after window creation") );
+    wxCHECK_RET( hwnd, wxT("layout direction must be set after window creation") );
 
     LONG styleOld = ::GetWindowLong(hwnd, GWL_EXSTYLE);
 
@@ -1097,7 +1097,7 @@ void wxWindowMSW::SetLayoutDirection(wxL
             break;
 
         default:
-            wxFAIL_MSG(_T("unsupported layout direction"));
+            wxFAIL_MSG(wxT("unsupported layout direction"));
             break;
     }
 
@@ -1114,7 +1114,7 @@ wxLayoutDirection wxWindowMSW::GetLayout
     return wxLayout_Default;
 #else
     const HWND hwnd = GetHwnd();
-    wxCHECK_MSG( hwnd, wxLayout_Default, _T("invalid window") );
+    wxCHECK_MSG( hwnd, wxLayout_Default, wxT("invalid window") );
 
     return ::GetWindowLong(hwnd, GWL_EXSTYLE) & WS_EX_LAYOUTRTL
                 ? wxLayout_RightToLeft
@@ -1234,14 +1234,14 @@ bool wxCheckWindowWndProc(WXHWND hWnd,
     if (str == wxCanvasClassName ||
         str == wxCanvasClassNameNR ||
 #if wxUSE_GLCANVAS
-        str == _T("wxGLCanvasClass") ||
-        str == _T("wxGLCanvasClassNR") ||
+        str == wxT("wxGLCanvasClass") ||
+        str == wxT("wxGLCanvasClassNR") ||
 #endif // wxUSE_GLCANVAS
         str == wxMDIFrameClassName ||
         str == wxMDIFrameClassNameNoRedraw ||
         str == wxMDIChildFrameClassName ||
         str == wxMDIChildFrameClassNameNoRedraw ||
-        str == _T("wxTLWHiddenParent"))
+        str == wxT("wxTLWHiddenParent"))
         return true; // Effectively means don't subclass
     else
         return false;
@@ -1351,7 +1351,7 @@ void wxWindowMSW::MSWUpdateStyle(long fl
                              0, 0, 0, 0,
                              SWP_NOMOVE | SWP_NOSIZE | SWP_FRAMECHANGED) )
         {
-            wxLogLastError(_T("SetWindowPos"));
+            wxLogLastError(wxT("SetWindowPos"));
         }
     }
 }
@@ -1405,7 +1405,7 @@ WXDWORD wxWindowMSW::MSWGetStyle(long fl
         {
             default:
             case wxBORDER_DEFAULT:
-                wxFAIL_MSG( _T("unknown border style") );
+                wxFAIL_MSG( wxT("unknown border style") );
                 // fall through
 
             case wxBORDER_NONE:
@@ -1558,7 +1558,7 @@ void wxWindowMSW::Freeze()
 
 void wxWindowMSW::Thaw()
 {
-    wxASSERT_MSG( m_frozenness > 0, _T("Thaw() without matching Freeze()") );
+    wxASSERT_MSG( m_frozenness > 0, wxT("Thaw() without matching Freeze()") );
 
     if ( --m_frozenness == 0 )
     {
@@ -1634,7 +1634,7 @@ void wxWindowMSW::Update()
 {
     if ( !::UpdateWindow(GetHwnd()) )
     {
-        wxLogLastError(_T("UpdateWindow"));
+        wxLogLastError(wxT("UpdateWindow"));
     }
 
 #if !defined(__WXMICROWIN__) && !defined(__WXWINCE__)
@@ -1905,7 +1905,7 @@ wxWindowMSW::DoMoveSibling(WXHWND hwnd, 
                                 SWP_NOZORDER | SWP_NOOWNERZORDER | SWP_NOACTIVATE);
         if ( !hdwp )
         {
-            wxLogLastError(_T("DeferWindowPos"));
+            wxLogLastError(wxT("DeferWindowPos"));
         }
     }
 
@@ -2085,7 +2085,7 @@ void wxWindowMSW::DoSetClientSize(int wi
                            height + heightWin - rectClient.bottom,
                            TRUE) )
         {
-            wxLogLastError(_T("MoveWindow"));
+            wxLogLastError(wxT("MoveWindow"));
         }
     }
 }
@@ -2116,7 +2116,7 @@ void wxWindowMSW::GetTextExtent(const wx
                              const wxFont *theFont) const
 {
     wxASSERT_MSG( !theFont || theFont->Ok(),
-                    _T("invalid font in GetTextExtent()") );
+                    wxT("invalid font in GetTextExtent()") );
 
     wxFont fontToUse;
     if (theFont)
@@ -2845,7 +2845,7 @@ WXLRESULT wxWindowMSW::MSWWindowProc(WXU
 
                     // this should never happen
                     wxCHECK_MSG( win, 0,
-                                 _T("FindWindowForMouseEvent() returned NULL") );
+                                 wxT("FindWindowForMouseEvent() returned NULL") );
                 }
 #ifdef __POCKETPC__
                 if (IsContextMenuEnabled() && message == WM_LBUTTONDOWN)
@@ -3728,7 +3728,7 @@ bool wxWindowMSW::HandleTooltipNotify(WX
 
         if ( !len )
         {
-            wxLogLastError(_T("MultiByteToWideChar()"));
+            wxLogLastError(wxT("MultiByteToWideChar()"));
         }
 
         buf[len] = L'\0';
@@ -3742,7 +3742,7 @@ bool wxWindowMSW::HandleTooltipNotify(WX
         // to copy the string we have into the buffer
         static wxChar buf[513];
         wxStrncpy(buf, ttip.c_str(), WXSIZEOF(buf) - 1);
-        buf[WXSIZEOF(buf) - 1] = _T('\0');
+        buf[WXSIZEOF(buf) - 1] = wxT('\0');
         ttText->lpszText = buf;
     }
 
@@ -4152,7 +4152,7 @@ bool wxWindowMSW::HandlePower(WXWPARAM W
             break;
 
         default:
-            wxLogDebug(_T("Unknown WM_POWERBROADCAST(%d) event"), wParam);
+            wxLogDebug(wxT("Unknown WM_POWERBROADCAST(%d) event"), wParam);
             // fall through
 
         // these messages are currently not mapped to wx events
@@ -4241,7 +4241,7 @@ wxWindowMSW::MSWOnDrawItem(int WXUNUSED_
             return false;
 
         wxCHECK_MSG( wxDynamicCast(pMenuItem, wxMenuItem),
-                         false, _T("MSWOnDrawItem: bad wxMenuItem pointer") );
+                         false, wxT("MSWOnDrawItem: bad wxMenuItem pointer") );
 
         // prepare to call OnDrawItem(): notice using of wxDCTemp to prevent
         // the DC from being released
@@ -4307,7 +4307,7 @@ wxWindowMSW::MSWOnMeasureItem(int id, WX
             return false;
 
         wxCHECK_MSG( wxDynamicCast(pMenuItem, wxMenuItem),
-                        false, _T("MSWOnMeasureItem: bad wxMenuItem pointer") );
+                        false, wxT("MSWOnMeasureItem: bad wxMenuItem pointer") );
 
         size_t w, h;
         bool rc = pMenuItem->OnMeasureItem(&w, &h);
@@ -4534,12 +4534,12 @@ extern wxCOLORMAP *wxGetStdColourMap()
             // reference bitmap which can tell us what the RGB values change
             // to.
             wxLogNull logNo; // suppress error if we couldn't load the bitmap
-            wxBitmap stdColourBitmap(_T("wxBITMAP_STD_COLOURS"));
+            wxBitmap stdColourBitmap(wxT("wxBITMAP_STD_COLOURS"));
             if ( stdColourBitmap.Ok() )
             {
                 // the pixels in the bitmap must correspond to wxSTD_COL_XXX!
                 wxASSERT_MSG( stdColourBitmap.GetWidth() == wxSTD_COL_MAX,
-                              _T("forgot to update wxBITMAP_STD_COLOURS!") );
+                              wxT("forgot to update wxBITMAP_STD_COLOURS!") );
 
                 wxMemoryDC memDC;
                 memDC.SelectObject(stdColourBitmap);
@@ -4831,7 +4831,7 @@ bool wxWindowMSW::HandleSize(int WXUNUSE
             m_hDWP = (WXHANDLE)::BeginDeferWindowPos(numChildren);
             if ( !m_hDWP )
             {
-                wxLogLastError(_T("BeginDeferWindowPos"));
+                wxLogLastError(wxT("BeginDeferWindowPos"));
             }
             if (m_hDWP)
                 useDefer = true;
@@ -4844,7 +4844,7 @@ bool wxWindowMSW::HandleSize(int WXUNUSE
     switch ( wParam )
     {
         default:
-            wxFAIL_MSG( _T("unexpected WM_SIZE parameter") );
+            wxFAIL_MSG( wxT("unexpected WM_SIZE parameter") );
             // fall through nevertheless
 
         case SIZE_MAXHIDE:
@@ -4884,7 +4884,7 @@ bool wxWindowMSW::HandleSize(int WXUNUSE
         // do put all child controls in place at once
         if ( !::EndDeferWindowPos(hDWP) )
         {
-            wxLogLastError(_T("EndDeferWindowPos"));
+            wxLogLastError(wxT("EndDeferWindowPos"));
         }
 
         // Reset our children's pending pos/size values.
@@ -5078,7 +5078,7 @@ void wxWindowMSW::InitMouseEvent(wxMouse
 // still don't get move, enter nor leave events.
 static wxWindowMSW *FindWindowForMouseEvent(wxWindowMSW *win, int *x, int *y)
 {
-    wxCHECK_MSG( x && y, win, _T("NULL pointer in FindWindowForMouseEvent") );
+    wxCHECK_MSG( x && y, win, wxT("NULL pointer in FindWindowForMouseEvent") );
 
     // first try to find a non transparent child: this allows us to send events
     // to a static text which is inside a static box, for example
@@ -5182,11 +5182,11 @@ bool wxWindowMSW::HandleMouseMove(int x,
             {
                 // see comment in wxApp::GetComCtl32Version() explaining the
                 // use of wxLoadedDLL
-                wxLoadedDLL dllComCtl32(_T("comctl32.dll"));
+                wxLoadedDLL dllComCtl32(wxT("comctl32.dll"));
                 if ( dllComCtl32.IsLoaded() )
                 {
                     s_pfn_TrackMouseEvent = (_TrackMouseEvent_t)
-                        dllComCtl32.GetSymbol(_T("_TrackMouseEvent"));
+                        dllComCtl32.GetSymbol(wxT("_TrackMouseEvent"));
                 }
 
                 s_initDone = true;
@@ -5268,7 +5268,7 @@ bool wxWindowMSW::HandleMouseWheel(WXWPA
                                      &s_linesPerRotation, 0))
         {
             // this is not supposed to happen
-            wxLogLastError(_T("SystemParametersInfo(GETWHEELSCROLLLINES)"));
+            wxLogLastError(wxT("SystemParametersInfo(GETWHEELSCROLLLINES)"));
 
             // the default is 3, so use it if SystemParametersInfo() failed
             s_linesPerRotation = 3;
@@ -5311,7 +5311,7 @@ void wxWindowMSW::GenerateMouseLeave()
     if ( !::GetCursorPos(&pt) )
 #endif
     {
-        wxLogLastError(_T("GetCursorPos"));
+        wxLogLastError(wxT("GetCursorPos"));
     }
 
     // we need to have client coordinates here for symmetry with
@@ -5475,13 +5475,13 @@ int wxWindowMSW::HandleMenuChar(int WXUN
                 //  menu creation code
                 wxMenuItem *item = (wxMenuItem*)mii.dwItemData;
 
-                const wxChar *p = wxStrchr(item->GetText(), _T('&'));
+                const wxChar *p = wxStrchr(item->GetText(), wxT('&'));
                 while ( p++ )
                 {
-                    if ( *p == _T('&') )
+                    if ( *p == wxT('&') )
                     {
                         // this is not the accel char, find the real one
-                        p = wxStrchr(p + 1, _T('&'));
+                        p = wxStrchr(p + 1, wxT('&'));
                     }
                     else // got the accel char
                     {
@@ -5504,7 +5504,7 @@ int wxWindowMSW::HandleMenuChar(int WXUN
         else // failed to get the menu text?
         {
             // it's not fatal, so don't show error, but still log it
-            wxLogLastError(_T("GetMenuItemInfo"));
+            wxLogLastError(wxT("GetMenuItemInfo"));
         }
     }
 #endif
@@ -5677,7 +5677,7 @@ bool wxWindowMSW::MSWOnScroll(int orient
                                   &scrollInfo) )
             {
                 // Not necessarily an error, if there are no scrollbars yet.
-                // wxLogLastError(_T("GetScrollInfo"));
+                // wxLogLastError(wxT("GetScrollInfo"));
             }
 
             event.SetPosition(scrollInfo.nTrackPos);
@@ -6684,10 +6684,10 @@ static void WinCEUnregisterHotKey(int mo
     typedef BOOL (WINAPI *UnregisterFunc1Proc)(UINT, UINT);
 
     UnregisterFunc1Proc procUnregisterFunc;
-    hCoreDll = LoadLibrary(_T("coredll.dll"));
+    hCoreDll = LoadLibrary(wxT("coredll.dll"));
     if (hCoreDll)
     {
-        procUnregisterFunc = (UnregisterFunc1Proc)GetProcAddress(hCoreDll, _T("UnregisterFunc1"));
+        procUnregisterFunc = (UnregisterFunc1Proc)GetProcAddress(hCoreDll, wxT("UnregisterFunc1"));
         if (procUnregisterFunc)
             procUnregisterFunc(modifiers, id);
         FreeLibrary(hCoreDll);
@@ -6715,7 +6715,7 @@ bool wxWindowMSW::RegisterHotKey(int hot
 
     if ( !::RegisterHotKey(GetHwnd(), hotkeyId, win_modifiers, keycode) )
     {
-        wxLogLastError(_T("RegisterHotKey"));
+        wxLogLastError(wxT("RegisterHotKey"));
 
         return false;
     }
@@ -6731,7 +6731,7 @@ bool wxWindowMSW::UnregisterHotKey(int h
 
     if ( !::UnregisterHotKey(GetHwnd(), hotkeyId) )
     {
-        wxLogLastError(_T("UnregisterHotKey"));
+        wxLogLastError(wxT("UnregisterHotKey"));
 
         return false;
     }
@@ -6784,7 +6784,7 @@ public:
 
         if ( !ms_hMsgHookProc )
         {
-            wxLogLastError(_T("SetWindowsHookEx(WH_GETMESSAGE)"));
+            wxLogLastError(wxT("SetWindowsHookEx(WH_GETMESSAGE)"));
 
             return false;
         }
--- src/msw/treectrl.cpp-orig	2009-06-18 20:02:53.392118000 -0500
+++ src/msw/treectrl.cpp	2009-06-18 20:02:59.512652000 -0500
@@ -370,7 +370,7 @@ public:
                     break;
 
                 default:
-                    wxFAIL_MSG( _T("unsupported wxTreeItemIcon value") );
+                    wxFAIL_MSG( wxT("unsupported wxTreeItemIcon value") );
             }
         }
 
@@ -851,7 +851,7 @@ wxTreeCtrl::GetClassDefaultAttributes(wx
 bool wxTreeCtrl::DoGetItem(wxTreeViewItem *tvItem) const
 {
     wxCHECK_MSG( tvItem->hItem != TVI_ROOT, false,
-                 _T("can't retrieve virtual root item") );
+                 wxT("can't retrieve virtual root item") );
 
     if ( !TreeView_GetItem(GetHwnd(), tvItem) )
     {
@@ -1508,7 +1508,7 @@ wxTreeItemId wxTreeCtrl::DoInsertAfter(c
 {
     wxCHECK_MSG( parent.IsOk() || !TreeView_GetRoot(GetHwnd()),
                  wxTreeItemId(),
-                 _T("can't have more than one root in the tree") );
+                 wxT("can't have more than one root in the tree") );
 
     TV_INSERTSTRUCT tvIns;
     tvIns.hParent = HITEM(parent);
@@ -1649,7 +1649,7 @@ wxTreeItemId wxTreeCtrl::DoInsertItem(co
 
         // assert, not check: if the index is invalid, we will append the item
         // to the end
-        wxASSERT_MSG( index == 0, _T("bad index in wxTreeCtrl::InsertItem") );
+        wxASSERT_MSG( index == 0, wxT("bad index in wxTreeCtrl::InsertItem") );
     }
 
     return DoInsertAfter(parent, idPrev, text, image, selectedImage, data);
@@ -1811,7 +1811,7 @@ void wxTreeCtrl::UnselectAll()
 
 void wxTreeCtrl::SelectItem(const wxTreeItemId& item, bool select)
 {
-    wxCHECK_RET( !IsHiddenRoot(item), _T("can't select hidden root item") );
+    wxCHECK_RET( !IsHiddenRoot(item), wxT("can't select hidden root item") );
 
     if ( m_windowStyle & wxTR_MULTIPLE )
     {
@@ -1820,7 +1820,7 @@ void wxTreeCtrl::SelectItem(const wxTree
     else
     {
         wxASSERT_MSG( select,
-                      _T("SelectItem(false) works only for multiselect") );
+                      wxT("SelectItem(false) works only for multiselect") );
 
         // inspite of the docs (MSDN Jan 99 edition), we don't seem to receive
         // the notification from the control (i.e. TVN_SELCHANG{ED|ING}), so
@@ -1845,7 +1845,7 @@ void wxTreeCtrl::SelectItem(const wxTree
 
 void wxTreeCtrl::EnsureVisible(const wxTreeItemId& item)
 {
-    wxCHECK_RET( !IsHiddenRoot(item), _T("can't show hidden root item") );
+    wxCHECK_RET( !IsHiddenRoot(item), wxT("can't show hidden root item") );
 
     // no error return
     TreeView_EnsureVisible(GetHwnd(), HITEM(item));
@@ -2959,7 +2959,7 @@ bool wxTreeCtrl::MSWOnNotify(int idCtrl,
             {
                 // normally this is impossible because the m_dragImage is
                 // deleted once the drag operation is over
-                wxASSERT_MSG( !m_dragImage, _T("starting to drag once again?") );
+                wxASSERT_MSG( !m_dragImage, wxT("starting to drag once again?") );
 
                 m_dragImage = new wxDragImage(*this, event.m_item);
                 m_dragImage->BeginDrag(wxPoint(0,0), this);
@@ -3134,7 +3134,7 @@ void wxTreeCtrl::SetState(const wxTreeIt
     }
 
     wxCHECK_RET( state < m_imageListState->GetImageCount(),
-                 _T("wxTreeCtrl::SetState(): item index out of bounds") );
+                 wxT("wxTreeCtrl::SetState(): item index out of bounds") );
 
     tvi.state = INDEXTOSTATEIMAGEMASK(state);
 
--- src/msw/tbar95.cpp-orig	2009-06-18 20:03:05.514088000 -0500
+++ src/msw/tbar95.cpp	2009-06-18 20:03:11.297389000 -0500
@@ -293,7 +293,7 @@ void wxToolBar::Recreate()
     if ( !MSWCreateToolbar(pos, size) )
     {
         // what can we do?
-        wxFAIL_MSG( _T("recreating the toolbar failed") );
+        wxFAIL_MSG( wxT("recreating the toolbar failed") );
 
         return;
     }
@@ -494,7 +494,7 @@ bool wxToolBar::DoDeleteTool(size_t pos,
     RECT r;
     if ( !::SendMessage(GetHwnd(), TB_GETITEMRECT, pos, (LPARAM)&r) )
     {
-        wxLogLastError(_T("TB_GETITEMRECT"));
+        wxLogLastError(wxT("TB_GETITEMRECT"));
     }
 
     int width = r.right - r.left;
@@ -723,7 +723,7 @@ bool wxToolBar::Realize()
                 }
                 else
                 {
-                    wxFAIL_MSG( _T("invalid tool button bitmap") );
+                    wxFAIL_MSG( wxT("invalid tool button bitmap") );
                 }
 
                 // also deal with disabled bitmap if we want to use them
@@ -863,7 +863,7 @@ bool wxToolBar::Realize()
     if ( !::SendMessage(GetHwnd(), TB_SETBITMAPSIZE, 0,
                         MAKELONG(sizeBmp.x, sizeBmp.y)) )
     {
-        wxLogLastError(_T("TB_SETBITMAPSIZE"));
+        wxLogLastError(wxT("TB_SETBITMAPSIZE"));
     }
 
     // Next add the buttons and separators
@@ -971,7 +971,7 @@ bool wxToolBar::Realize()
                         break;
 
                     default:
-                        wxFAIL_MSG( _T("unexpected toolbar button kind") );
+                        wxFAIL_MSG( wxT("unexpected toolbar button kind") );
                         button.fsStyle = TBSTYLE_BUTTON;
                         break;
                 }
@@ -1414,7 +1414,7 @@ void wxToolBar::DoSetToggle(wxToolBarToo
 {
     // VZ: AFAIK, the button has to be created either with TBSTYLE_CHECK or
     //     without, so we really need to delete the button and recreate it here
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 void wxToolBar::SetToolNormalBitmap( int id, const wxBitmap& bitmap )
@@ -1515,7 +1515,7 @@ void wxToolBar::OnEraseBackground(wxEras
             // it can also return S_FALSE which seems to simply say that it
             // didn't draw anything but no error really occurred
             if ( FAILED(hr) )
-                wxLogApiError(_T("DrawThemeParentBackground(toolbar)"), hr);
+                wxLogApiError(wxT("DrawThemeParentBackground(toolbar)"), hr);
         }
     }
 
@@ -1538,7 +1538,7 @@ void wxToolBar::OnEraseBackground(wxEras
             // it can also return S_FALSE which seems to simply say that it
             // didn't draw anything but no error really occurred
             if ( FAILED(hr) )
-                wxLogApiError(_T("DrawThemeBackground(toolbar)"), hr);
+                wxLogApiError(wxT("DrawThemeBackground(toolbar)"), hr);
         }
     }
 
@@ -1673,7 +1673,7 @@ bool wxToolBar::HandlePaint(WXWPARAM wPa
                 if ( !::SendMessage(GetHwnd(), TB_GETBUTTON,
                                     n, (LPARAM)&tbb) )
                 {
-                    wxLogDebug(_T("TB_GETBUTTON failed?"));
+                    wxLogDebug(wxT("TB_GETBUTTON failed?"));
 
                     continue;
                 }
@@ -1686,7 +1686,7 @@ bool wxToolBar::HandlePaint(WXWPARAM wPa
                 if ( !::SendMessage(GetHwnd(), TB_GETITEMRECT,
                                     n, (LPARAM)&r) )
                 {
-                    wxLogDebug(_T("TB_GETITEMRECT failed?"));
+                    wxLogDebug(wxT("TB_GETITEMRECT failed?"));
 
                     continue;
                 }
@@ -1803,7 +1803,7 @@ WXHBITMAP wxToolBar::MapBitmap(WXHBITMAP
 
     if ( !hdcMem )
     {
-        wxLogLastError(_T("CreateCompatibleDC"));
+        wxLogLastError(wxT("CreateCompatibleDC"));
 
         return bitmap;
     }
@@ -1812,7 +1812,7 @@ WXHBITMAP wxToolBar::MapBitmap(WXHBITMAP
 
     if ( !bmpInHDC )
     {
-        wxLogLastError(_T("SelectObject"));
+        wxLogLastError(wxT("SelectObject"));
 
         return bitmap;
     }
--- src/msw/gdiimage.cpp-orig	2009-06-18 20:03:17.063031000 -0500
+++ src/msw/gdiimage.cpp	2009-06-18 20:03:22.464132000 -0500
@@ -61,7 +61,7 @@ WX_DEFINE_LIST(wxGDIImageHandlerList)
 class WXDLLEXPORT wxBMPFileHandler : public wxBitmapHandler
 {
 public:
-    wxBMPFileHandler() : wxBitmapHandler(_T("Windows bitmap file"), _T("bmp"),
+    wxBMPFileHandler() : wxBitmapHandler(wxT("Windows bitmap file"), wxT("bmp"),
                                          wxBITMAP_TYPE_BMP)
     {
     }
@@ -80,7 +80,7 @@ private:
 class WXDLLEXPORT wxBMPResourceHandler: public wxBitmapHandler
 {
 public:
-    wxBMPResourceHandler() : wxBitmapHandler(_T("Windows bitmap resource"),
+    wxBMPResourceHandler() : wxBitmapHandler(wxT("Windows bitmap resource"),
                                              wxEmptyString,
                                              wxBITMAP_TYPE_BMP_RESOURCE)
     {
@@ -126,7 +126,7 @@ public:
                       int desiredWidth, int desiredHeight)
     {
         wxIcon *icon = wxDynamicCast(image, wxIcon);
-        wxCHECK_MSG( icon, false, _T("wxIconHandler only works with icons") );
+        wxCHECK_MSG( icon, false, wxT("wxIconHandler only works with icons") );
 
         return LoadIcon(icon, name, flags, desiredWidth, desiredHeight);
     }
@@ -140,8 +140,8 @@ protected:
 class WXDLLEXPORT wxICOFileHandler : public wxIconHandler
 {
 public:
-    wxICOFileHandler() : wxIconHandler(_T("ICO icon file"),
-                                       _T("ico"),
+    wxICOFileHandler() : wxIconHandler(wxT("ICO icon file"),
+                                       wxT("ico"),
                                        wxBITMAP_TYPE_ICO)
     {
     }
@@ -158,8 +158,8 @@ private:
 class WXDLLEXPORT wxICOResourceHandler: public wxIconHandler
 {
 public:
-    wxICOResourceHandler() : wxIconHandler(_T("ICO resource"),
-                                           _T("ico"),
+    wxICOResourceHandler() : wxIconHandler(wxT("ICO resource"),
+                                           wxT("ico"),
                                            wxBITMAP_TYPE_ICO_RESOURCE)
     {
     }
@@ -356,7 +356,7 @@ bool wxBMPFileHandler::LoadFile(wxBitmap
                                 int WXUNUSED(desiredHeight))
 {
 #if wxUSE_WXDIB
-    wxCHECK_MSG( bitmap, false, _T("NULL bitmap in LoadFile") );
+    wxCHECK_MSG( bitmap, false, wxT("NULL bitmap in LoadFile") );
 
     wxDIB dib(name);
 
@@ -372,7 +372,7 @@ bool wxBMPFileHandler::SaveFile(wxBitmap
                                 const wxPalette * WXUNUSED(pal))
 {
 #if wxUSE_WXDIB
-    wxCHECK_MSG( bitmap, false, _T("NULL bitmap in SaveFile") );
+    wxCHECK_MSG( bitmap, false, wxT("NULL bitmap in SaveFile") );
 
     wxDIB dib(*bitmap);
 
@@ -442,8 +442,8 @@ bool wxICOFileHandler::LoadIcon(wxIcon *
         {
             // it is not an error, but it might still be useful to be informed
             // about it optionally
-            wxLogTrace(_T("iconload"),
-                       _T("No large icons found in the file '%s'."),
+            wxLogTrace(wxT("iconload"),
+                       wxT("No large icons found in the file '%s'."),
                        name.c_str());
         }
     }
@@ -453,8 +453,8 @@ bool wxICOFileHandler::LoadIcon(wxIcon *
         // get the specified small icon from file
         if ( !::ExtractIconEx(nameReal, iconIndex, NULL, &hicon, 1) )
         {
-            wxLogTrace(_T("iconload"),
-                       _T("No small icons found in the file '%s'."),
+            wxLogTrace(wxT("iconload"),
+                       wxT("No small icons found in the file '%s'."),
                        name.c_str());
         }
     }
@@ -470,7 +470,7 @@ bool wxICOFileHandler::LoadIcon(wxIcon *
 
     if ( !hicon )
     {
-        wxLogSysError(_T("Failed to load icon from the file '%s'"),
+        wxLogSysError(wxT("Failed to load icon from the file '%s'"),
                       name.c_str());
 
         return false;
@@ -481,8 +481,8 @@ bool wxICOFileHandler::LoadIcon(wxIcon *
     if ( (desiredWidth != -1 && desiredWidth != size.x) ||
          (desiredHeight != -1 && desiredHeight != size.y) )
     {
-        wxLogTrace(_T("iconload"),
-                   _T("Returning false from wxICOFileHandler::Load because of the size mismatch: actual (%d, %d), requested (%d, %d)"),
+        wxLogTrace(wxT("iconload"),
+                   wxT("Returning false from wxICOFileHandler::Load because of the size mismatch: actual (%d, %d), requested (%d, %d)"),
                    size.x, size.y,
                    desiredWidth, desiredHeight);
 
@@ -508,7 +508,7 @@ bool wxICOResourceHandler::LoadIcon(wxIc
     bool hasSize = desiredWidth != -1 || desiredHeight != -1;
 
     wxASSERT_MSG( !hasSize || (desiredWidth != -1 && desiredHeight != -1),
-                  _T("width and height should be either both -1 or not") );
+                  wxT("width and height should be either both -1 or not") );
 
     // try to load the icon from this program first to allow overriding the
     // standard icons (although why one would want to do it considering that
--- src/msw/toplevel.cpp-orig	2009-06-18 20:03:27.461166000 -0500
+++ src/msw/toplevel.cpp	2009-06-18 20:03:33.827982000 -0500
@@ -298,7 +298,7 @@ WXHWND wxTopLevelWindowMSW::MSWGetParent
         if ( !parent )
         {
             // this flag doesn't make sense then and will be ignored
-            wxFAIL_MSG( _T("wxFRAME_FLOAT_ON_PARENT but no parent?") );
+            wxFAIL_MSG( wxT("wxFRAME_FLOAT_ON_PARENT but no parent?") );
         }
         else
         {
@@ -951,7 +951,7 @@ bool wxTopLevelWindowMSW::EnableCloseBut
                           MF_BYCOMMAND |
                           (enable ? MF_ENABLED : MF_GRAYED)) == -1 )
     {
-        wxLogLastError(_T("EnableMenuItem(SC_CLOSE)"));
+        wxLogLastError(wxT("EnableMenuItem(SC_CLOSE)"));
 
         return false;
     }
@@ -959,7 +959,7 @@ bool wxTopLevelWindowMSW::EnableCloseBut
     // update appearance immediately
     if ( !::DrawMenuBar(GetHwnd()) )
     {
-        wxLogLastError(_T("DrawMenuBar"));
+        wxLogLastError(wxT("DrawMenuBar"));
     }
 #endif
 #endif // !__WXMICROWIN__
@@ -972,7 +972,7 @@ bool wxTopLevelWindowMSW::EnableCloseBut
 bool wxTopLevelWindowMSW::SetShape(const wxRegion& region)
 {
     wxCHECK_MSG( HasFlag(wxFRAME_SHAPED), false,
-                 _T("Shaped windows must be created with the wxFRAME_SHAPED style."));
+                 wxT("Shaped windows must be created with the wxFRAME_SHAPED style."));
 
     // The empty region signifies that the shape should be removed from the
     // window.
@@ -980,7 +980,7 @@ bool wxTopLevelWindowMSW::SetShape(const
     {
         if (::SetWindowRgn(GetHwnd(), NULL, TRUE) == 0)
         {
-            wxLogLastError(_T("SetWindowRgn"));
+            wxLogLastError(wxT("SetWindowRgn"));
             return false;
         }
         return true;
@@ -1007,7 +1007,7 @@ bool wxTopLevelWindowMSW::SetShape(const
     // Now call the shape API with the new region.
     if (::SetWindowRgn(GetHwnd(), hrgn, TRUE) == 0)
     {
-        wxLogLastError(_T("SetWindowRgn"));
+        wxLogLastError(wxT("SetWindowRgn"));
         return false;
     }
     return true;
@@ -1028,9 +1028,9 @@ void wxTopLevelWindowMSW::RequestUserAtt
     static FlashWindowEx_t s_pfnFlashWindowEx = NULL;
     if ( !s_pfnFlashWindowEx )
     {
-        wxDynamicLibrary dllUser32(_T("user32.dll"));
+        wxDynamicLibrary dllUser32(wxT("user32.dll"));
         s_pfnFlashWindowEx = (FlashWindowEx_t)
-                                dllUser32.GetSymbol(_T("FlashWindowEx"));
+                                dllUser32.GetSymbol(wxT("FlashWindowEx"));
 
         // we can safely unload user32.dll here, it's going to remain loaded as
         // long as the program is running anyhow
@@ -1073,7 +1073,7 @@ bool wxTopLevelWindowMSW::SetTransparent
 
     if ( pSetLayeredWindowAttributes == NULL )
     {
-        wxDynamicLibrary dllUser32(_T("user32.dll"));
+        wxDynamicLibrary dllUser32(wxT("user32.dll"));
         pSetLayeredWindowAttributes = (PSETLAYEREDWINDOWATTR)
             dllUser32.GetSymbol(wxT("SetLayeredWindowAttributes"));
     }
@@ -1122,7 +1122,7 @@ void wxTopLevelWindowMSW::OnActivate(wxA
     {
         // restore focus to the child which was last focused unless we already
         // have it
-        wxLogTrace(_T("focus"), _T("wxTLW %08x activated."), (int) m_hWnd);
+        wxLogTrace(wxT("focus"), wxT("wxTLW %08x activated."), (int) m_hWnd);
 
         wxWindow *winFocus = FindFocus();
         if ( !winFocus || wxGetTopLevelParent(winFocus) != this )
@@ -1156,8 +1156,8 @@ void wxTopLevelWindowMSW::OnActivate(wxA
             }
         }
 
-        wxLogTrace(_T("focus"),
-                   _T("wxTLW %08x deactivated, last focused: %08x."),
+        wxLogTrace(wxT("focus"),
+                   wxT("wxTLW %08x deactivated, last focused: %08x."),
                    (int) m_hWnd,
                    (int) (m_winLastFocused ? GetHwndOf(m_winLastFocused)
                                            : NULL));
@@ -1232,7 +1232,7 @@ void wxTLWHiddenParentModule::OnExit()
     {
         if ( !::DestroyWindow(ms_hwnd) )
         {
-            wxLogLastError(_T("DestroyWindow(hidden TLW parent)"));
+            wxLogLastError(wxT("DestroyWindow(hidden TLW parent)"));
         }
 
         ms_hwnd = NULL;
@@ -1242,7 +1242,7 @@ void wxTLWHiddenParentModule::OnExit()
     {
         if ( !::UnregisterClass(ms_className, wxGetInstance()) )
         {
-            wxLogLastError(_T("UnregisterClass(\"wxTLWHiddenParent\")"));
+            wxLogLastError(wxT("UnregisterClass(\"wxTLWHiddenParent\")"));
         }
 
         ms_className = NULL;
@@ -1256,7 +1256,7 @@ HWND wxTLWHiddenParentModule::GetHWND()
     {
         if ( !ms_className )
         {
-            static const wxChar *HIDDEN_PARENT_CLASS = _T("wxTLWHiddenParent");
+            static const wxChar *HIDDEN_PARENT_CLASS = wxT("wxTLWHiddenParent");
 
             WNDCLASS wndclass;
             wxZeroMemory(wndclass);
@@ -1267,7 +1267,7 @@ HWND wxTLWHiddenParentModule::GetHWND()
 
             if ( !::RegisterClass(&wndclass) )
             {
-                wxLogLastError(_T("RegisterClass(\"wxTLWHiddenParent\")"));
+                wxLogLastError(wxT("RegisterClass(\"wxTLWHiddenParent\")"));
             }
             else
             {
@@ -1279,7 +1279,7 @@ HWND wxTLWHiddenParentModule::GetHWND()
                                  (HMENU)NULL, wxGetInstance(), NULL);
         if ( !ms_hwnd )
         {
-            wxLogLastError(_T("CreateWindow(hidden TLW parent)"));
+            wxLogLastError(wxT("CreateWindow(hidden TLW parent)"));
         }
     }
 
--- src/msw/display.cpp-orig	2009-06-18 20:03:38.595046000 -0500
+++ src/msw/display.cpp	2009-06-18 20:03:45.129622000 -0500
@@ -88,9 +88,9 @@
 
 // display functions are found in different DLLs under WinCE and normal Win32
 #ifdef __WXWINCE__
-static const wxChar displayDllName[] = _T("coredll.dll");
+static const wxChar displayDllName[] = wxT("coredll.dll");
 #else
-static const wxChar displayDllName[] = _T("user32.dll");
+static const wxChar displayDllName[] = wxT("user32.dll");
 #endif
 
 // ----------------------------------------------------------------------------
@@ -401,7 +401,7 @@ private:
     // system option
 
 #if wxUSE_DIRECTDRAW
-    if ( wxSystemOptions::GetOptionInt(_T("msw.display.directdraw")) )
+    if ( wxSystemOptions::GetOptionInt(wxT("msw.display.directdraw")) )
     {
         wxDisplayFactoryDirectDraw *factoryDD = new wxDisplayFactoryDirectDraw;
         if ( factoryDD->IsOk() )
@@ -433,7 +433,7 @@ void wxDisplayInfo::Initialize()
         WinStruct<MONITORINFOEX> monInfo;
         if ( !gs_GetMonitorInfo(m_hmon, (LPMONITORINFO)&monInfo) )
         {
-            wxLogLastError(_T("GetMonitorInfo"));
+            wxLogLastError(wxT("GetMonitorInfo"));
             m_flags = 0;
             return;
         }
@@ -496,7 +496,7 @@ wxVideoMode wxDisplayImplWin32Base::GetC
     dm.dmDriverExtra = 0;
     if ( !::EnumDisplaySettings(deviceName, ENUM_CURRENT_SETTINGS, &dm) )
     {
-        wxLogLastError(_T("EnumDisplaySettings(ENUM_CURRENT_SETTINGS)"));
+        wxLogLastError(wxT("EnumDisplaySettings(ENUM_CURRENT_SETTINGS)"));
     }
     else
     {
@@ -658,7 +658,7 @@ void wxDisplayFactoryMultimon::AddDispla
 
 wxDisplayImpl *wxDisplayFactoryMultimon::CreateDisplay(unsigned n)
 {
-    wxCHECK_MSG( n < m_displays.size(), NULL, _T("invalid display index") );
+    wxCHECK_MSG( n < m_displays.size(), NULL, wxT("invalid display index") );
 
     return new wxDisplayImplMultimon(n, *(m_displays[n]));
 }
@@ -712,7 +712,7 @@ bool wxDisplayImplMultimon::ChangeMode(c
     else // change to the given mode
     {
         wxCHECK_MSG( mode.w && mode.h, false,
-                        _T("at least the width and height must be specified") );
+                        wxT("at least the width and height must be specified") );
 
         wxZeroMemory(dm);
         dm.dmSize = sizeof(dm);
@@ -754,7 +754,7 @@ bool wxDisplayImplMultimon::ChangeMode(c
         if ( dllDisplay.IsLoaded() )
         {
             pfnChangeDisplaySettingsEx = (ChangeDisplaySettingsEx_t)
-                dllDisplay.GetSymbolAorW(_T("ChangeDisplaySettingsEx"));
+                dllDisplay.GetSymbolAorW(wxT("ChangeDisplaySettingsEx"));
         }
         //else: huh, no user32.dll??
 
@@ -799,7 +799,7 @@ bool wxDisplayImplMultimon::ChangeMode(c
             break;
 
         default:
-            wxFAIL_MSG( _T("unexpected ChangeDisplaySettingsEx() return value") );
+            wxFAIL_MSG( wxT("unexpected ChangeDisplaySettingsEx() return value") );
     }
 
     return false;
@@ -827,20 +827,20 @@ wxDisplayFactoryDirectDraw::wxDisplayFac
     wxLogNull noLog;
 #endif
 
-    m_dllDDraw.Load(_T("ddraw.dll"));
+    m_dllDDraw.Load(wxT("ddraw.dll"));
 
     if ( !m_dllDDraw.IsLoaded() )
         return;
 
     DirectDrawEnumerateEx_t pDDEnumEx = (DirectDrawEnumerateEx_t)
-        m_dllDDraw.GetSymbolAorW(_T("DirectDrawEnumerateEx"));
+        m_dllDDraw.GetSymbolAorW(wxT("DirectDrawEnumerateEx"));
     if ( !pDDEnumEx )
         return;
 
     // we can't continue without DirectDrawCreate() later, so resolve it right
     // now and fail the initialization if it's not available
     m_pfnDirectDrawCreate = (DirectDrawCreate_t)
-        m_dllDDraw.GetSymbol(_T("DirectDrawCreate"));
+        m_dllDDraw.GetSymbol(wxT("DirectDrawCreate"));
     if ( !m_pfnDirectDrawCreate )
         return;
 
@@ -848,7 +848,7 @@ wxDisplayFactoryDirectDraw::wxDisplayFac
                       this,
                       DDENUM_ATTACHEDSECONDARYDEVICES) != DD_OK )
     {
-        wxLogLastError(_T("DirectDrawEnumerateEx"));
+        wxLogLastError(wxT("DirectDrawEnumerateEx"));
     }
 }
 
@@ -899,7 +899,7 @@ void wxDisplayFactoryDirectDraw::AddDisp
 
 wxDisplayImpl *wxDisplayFactoryDirectDraw::CreateDisplay(unsigned n)
 {
-    wxCHECK_MSG( n < m_displays.size(), NULL, _T("invalid display index") );
+    wxCHECK_MSG( n < m_displays.size(), NULL, wxT("invalid display index") );
 
     wxDisplayInfoDirectDraw *
         info = wx_static_cast(wxDisplayInfoDirectDraw *, m_displays[n]);
@@ -913,7 +913,7 @@ wxDisplayImpl *wxDisplayFactoryDirectDra
         if ( FAILED(hr) || !pDD )
         {
             // what to do??
-            wxLogApiError(_T("DirectDrawCreate"), hr);
+            wxLogApiError(wxT("DirectDrawCreate"), hr);
             return NULL;
         }
 
@@ -923,7 +923,7 @@ wxDisplayImpl *wxDisplayFactoryDirectDra
 
         if ( FAILED(hr) || !info->m_pDD2 )
         {
-            wxLogApiError(_T("IDirectDraw::QueryInterface(IDD2)"), hr);
+            wxLogApiError(wxT("IDirectDraw::QueryInterface(IDD2)"), hr);
             return NULL;
         }
 
@@ -1004,7 +1004,7 @@ wxDisplayImplDirectDraw::GetModes(const 
 
     if ( FAILED(hr) )
     {
-        wxLogApiError(_T("IDirectDraw::EnumDisplayModes"), hr);
+        wxLogApiError(wxT("IDirectDraw::EnumDisplayModes"), hr);
     }
 
     return modes;
@@ -1017,7 +1017,7 @@ wxDisplayImplDirectDraw::GetModes(const 
 bool wxDisplayImplDirectDraw::ChangeMode(const wxVideoMode& mode)
 {
     wxWindow *winTop = wxTheApp->GetTopWindow();
-    wxCHECK_MSG( winTop, false, _T("top level window required for DirectX") );
+    wxCHECK_MSG( winTop, false, wxT("top level window required for DirectX") );
 
     HRESULT hr = m_pDD2->SetCooperativeLevel
                          (
@@ -1026,7 +1026,7 @@ bool wxDisplayImplDirectDraw::ChangeMode
                          );
     if ( FAILED(hr) )
     {
-        wxLogApiError(_T("IDirectDraw2::SetCooperativeLevel"), hr);
+        wxLogApiError(wxT("IDirectDraw2::SetCooperativeLevel"), hr);
 
         return false;
     }
@@ -1034,7 +1034,7 @@ bool wxDisplayImplDirectDraw::ChangeMode
     hr = m_pDD2->SetDisplayMode(mode.w, mode.h, mode.bpp, mode.refresh, 0);
     if ( FAILED(hr) )
     {
-        wxLogApiError(_T("IDirectDraw2::SetDisplayMode"), hr);
+        wxLogApiError(wxT("IDirectDraw2::SetDisplayMode"), hr);
 
         return false;
     }
--- src/msw/radiobut.cpp-orig	2009-06-18 20:03:50.323804000 -0500
+++ src/msw/radiobut.cpp	2009-06-18 20:03:55.597446000 -0500
@@ -135,7 +135,7 @@ bool wxRadioButton::Create(wxWindow *par
     if ( HasFlag(wxALIGN_RIGHT) )
         msStyle |= BS_LEFTTEXT | BS_RIGHT;
 
-    if ( !MSWCreateControl(_T("BUTTON"), msStyle, pos, size, label, 0) )
+    if ( !MSWCreateControl(wxT("BUTTON"), msStyle, pos, size, label, 0) )
         return false;
 
     // for compatibility with wxGTK, the first radio button in a group is
@@ -172,12 +172,12 @@ void wxRadioButton::SetValue(bool value)
     wxWindow * const focus = FindFocus();
     wxTopLevelWindow * const
         tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
-    wxCHECK_RET( tlw, _T("radio button outside of TLW?") );
+    wxCHECK_RET( tlw, wxT("radio button outside of TLW?") );
     wxWindow * const focusInTLW = tlw->GetLastFocus();
 
     const wxWindowList& siblings = GetParent()->GetChildren();
     wxWindowList::compatibility_iterator nodeThis = siblings.Find(this);
-    wxCHECK_RET( nodeThis, _T("radio button not a child of its parent?") );
+    wxCHECK_RET( nodeThis, wxT("radio button not a child of its parent?") );
 
     // this will be set to true in the code below if the focus is in our TLW
     // and belongs to one of the other buttons in the same group
@@ -262,7 +262,7 @@ bool wxRadioButton::GetValue() const
 {
     wxASSERT_MSG( m_isChecked ==
                     (::SendMessage(GetHwnd(), BM_GETCHECK, 0, 0L) != 0),
-                  _T("wxRadioButton::m_isChecked is out of sync?") );
+                  wxT("wxRadioButton::m_isChecked is out of sync?") );
 
     return m_isChecked;
 }
--- src/msw/dialup.cpp-orig	2009-06-18 20:04:00.896998000 -0500
+++ src/msw/dialup.cpp	2009-06-18 20:04:09.597354000 -0500
@@ -111,7 +111,7 @@ static const wxChar *gs_classForDialUpWi
     typedef DWORD (APIENTRY * RASVALIDATEENTRYNAME)( LPCSTR, LPCSTR );
     typedef DWORD (APIENTRY * RASCONNECTIONNOTIFICATION)( HRASCONN, HANDLE, DWORD );
 
-    static const wxChar gs_funcSuffix = _T('A');
+    static const wxChar gs_funcSuffix = wxT('A');
 #else // Unicode
     typedef DWORD (APIENTRY * RASDIAL)( LPRASDIALEXTENSIONS, LPCWSTR, LPRASDIALPARAMSW, DWORD, LPVOID, LPHRASCONN );
     typedef DWORD (APIENTRY * RASENUMCONNECTIONS)( LPRASCONNW, LPDWORD, LPDWORD );
@@ -133,7 +133,7 @@ static const wxChar *gs_classForDialUpWi
     typedef DWORD (APIENTRY * RASVALIDATEENTRYNAME)( LPCWSTR, LPCWSTR );
     typedef DWORD (APIENTRY * RASCONNECTIONNOTIFICATION)( HRASCONN, HANDLE, DWORD );
 
-    static const wxChar gs_funcSuffix = _T('W');
+    static const wxChar gs_funcSuffix = wxT('W');
 #endif // ASCII/Unicode
 
 // structure passed to the secondary thread
@@ -384,7 +384,7 @@ wxDialUpManager *wxDialUpManager::Create
 
 wxDialUpManagerMSW::wxDialUpManagerMSW()
                   : m_timerStatusPolling(this),
-                    m_dllRas(_T("RASAPI32"))
+                    m_dllRas(wxT("RASAPI32"))
 {
     // initialize our data
     m_autoCheckLevel = 0;
@@ -405,7 +405,7 @@ wxDialUpManagerMSW::wxDialUpManagerMSW()
 
         // get the function from rasapi32.dll and abort if it's not found
         #define RESOLVE_RAS_FUNCTION(type, name)                          \
-            ms_pfn##name = (type)m_dllRas.GetSymbol( wxString(_T(#name))  \
+            ms_pfn##name = (type)m_dllRas.GetSymbol( wxString(wxT(#name))  \
                                                      + gs_funcSuffix);    \
             if ( !ms_pfn##name )                                          \
             {                                                             \
@@ -416,7 +416,7 @@ wxDialUpManagerMSW::wxDialUpManagerMSW()
         // a variant of above macro which doesn't abort if the function is
         // not found in the DLL
         #define RESOLVE_OPTIONAL_RAS_FUNCTION(type, name)                 \
-            ms_pfn##name = (type)m_dllRas.GetSymbol( wxString(_T(#name))  \
+            ms_pfn##name = (type)m_dllRas.GetSymbol( wxString(wxT(#name))  \
                                                      + gs_funcSuffix);
 
         RESOLVE_RAS_FUNCTION(RASDIAL, RasDial);
@@ -584,7 +584,7 @@ void wxDialUpManagerMSW::CleanUpThreadDa
     {
         if ( !SetEvent(m_data->hEventQuit) )
         {
-            wxLogLastError(_T("SetEvent(RasThreadQuit)"));
+            wxLogLastError(wxT("SetEvent(RasThreadQuit)"));
         }
         else // sent quit request to the background thread
         {
@@ -979,14 +979,14 @@ bool wxDialUpManagerMSW::IsAlwaysOnline(
     //     but we allow multiple instances of wxDialUpManagerMSW so
     //     we might as well use the ref counted version here too.
 
-    wxDynamicLibrary hDll(_T("WININET"));
+    wxDynamicLibrary hDll(wxT("WININET"));
     if ( hDll.IsLoaded() )
     {
         typedef BOOL (WINAPI *INTERNETGETCONNECTEDSTATE)(LPDWORD, DWORD);
         INTERNETGETCONNECTEDSTATE pfnInternetGetConnectedState;
 
         #define RESOLVE_FUNCTION(type, name) \
-            pfn##name = (type)hDll.GetSymbol(_T(#name))
+            pfn##name = (type)hDll.GetSymbol(wxT(#name))
 
         RESOLVE_FUNCTION(INTERNETGETCONNECTEDSTATE, InternetGetConnectedState);
 
@@ -1264,7 +1264,7 @@ static DWORD wxRasMonitorThread(wxRasThr
                 break;
 
             default:
-                wxFAIL_MSG( _T("unexpected return of WaitForMultipleObjects()") );
+                wxFAIL_MSG( wxT("unexpected return of WaitForMultipleObjects()") );
                 // fall through
 
             case WAIT_FAILED:
--- src/msw/enhmeta.cpp-orig	2009-06-18 20:04:16.452620000 -0500
+++ src/msw/enhmeta.cpp	2009-06-18 20:04:21.892297000 -0500
@@ -93,7 +93,7 @@ void wxEnhMetaFile::Assign(const wxEnhMe
                                             GetMetaFileName(m_filename));
         if ( !m_hMF )
         {
-            wxLogLastError(_T("CopyEnhMetaFile"));
+            wxLogLastError(wxT("CopyEnhMetaFile"));
         }
     }
     else
@@ -108,15 +108,15 @@ void wxEnhMetaFile::Free()
     {
         if ( !::DeleteEnhMetaFile(GetEMF()) )
         {
-            wxLogLastError(_T("DeleteEnhMetaFile"));
+            wxLogLastError(wxT("DeleteEnhMetaFile"));
         }
     }
 }
 
 bool wxEnhMetaFile::Play(wxDC *dc, wxRect *rectBound)
 {
-    wxCHECK_MSG( Ok(), false, _T("can't play invalid enhanced metafile") );
-    wxCHECK_MSG( dc, false, _T("invalid wxDC in wxEnhMetaFile::Play") );
+    wxCHECK_MSG( Ok(), false, wxT("can't play invalid enhanced metafile") );
+    wxCHECK_MSG( dc, false, wxT("invalid wxDC in wxEnhMetaFile::Play") );
 
     RECT rect;
     if ( rectBound )
@@ -138,7 +138,7 @@ bool wxEnhMetaFile::Play(wxDC *dc, wxRec
 
     if ( !::PlayEnhMetaFile(GetHdcOf(*dc), GetEMF(), &rect) )
     {
-        wxLogLastError(_T("PlayEnhMetaFile"));
+        wxLogLastError(wxT("PlayEnhMetaFile"));
 
         return false;
     }
@@ -155,7 +155,7 @@ wxSize wxEnhMetaFile::GetSize() const
         ENHMETAHEADER hdr;
         if ( !::GetEnhMetaFileHeader(GetEMF(), sizeof(hdr), &hdr) )
         {
-            wxLogLastError(_T("GetEnhMetaFileHeader"));
+            wxLogLastError(wxT("GetEnhMetaFileHeader"));
         }
         else
         {
@@ -177,11 +177,11 @@ wxSize wxEnhMetaFile::GetSize() const
 bool wxEnhMetaFile::SetClipboard(int WXUNUSED(width), int WXUNUSED(height))
 {
 #if wxUSE_DRAG_AND_DROP && wxUSE_CLIPBOARD
-    wxCHECK_MSG( m_hMF, false, _T("can't copy invalid metafile to clipboard") );
+    wxCHECK_MSG( m_hMF, false, wxT("can't copy invalid metafile to clipboard") );
 
     return wxTheClipboard->AddData(new wxEnhMetaFileDataObject(*this));
 #else // !wxUSE_DRAG_AND_DROP
-    wxFAIL_MSG(_T("not implemented"));
+    wxFAIL_MSG(wxT("not implemented"));
     return false;
 #endif // wxUSE_DRAG_AND_DROP/!wxUSE_DRAG_AND_DROP
 }
@@ -222,7 +222,7 @@ wxEnhMetaFileDC::wxEnhMetaFileDC(const w
                                        pRect, description);
     if ( !m_hDC )
     {
-        wxLogLastError(_T("CreateEnhMetaFile"));
+        wxLogLastError(wxT("CreateEnhMetaFile"));
     }
 }
 
@@ -236,12 +236,12 @@ void wxEnhMetaFileDC::DoGetSize(int *wid
 
 wxEnhMetaFile *wxEnhMetaFileDC::Close()
 {
-    wxCHECK_MSG( Ok(), NULL, _T("invalid wxEnhMetaFileDC") );
+    wxCHECK_MSG( Ok(), NULL, wxT("invalid wxEnhMetaFileDC") );
 
     HENHMETAFILE hMF = ::CloseEnhMetaFile(GetHdc());
     if ( !hMF )
     {
-        wxLogLastError(_T("CloseEnhMetaFile"));
+        wxLogLastError(wxT("CloseEnhMetaFile"));
 
         return NULL;
     }
@@ -291,7 +291,7 @@ size_t wxEnhMetaFileDataObject::GetDataS
     }
     else
     {
-        wxASSERT_MSG( format == wxDF_METAFILE, _T("unsupported format") );
+        wxASSERT_MSG( format == wxDF_METAFILE, wxT("unsupported format") );
 
         return sizeof(METAFILEPICT);
     }
@@ -299,7 +299,7 @@ size_t wxEnhMetaFileDataObject::GetDataS
 
 bool wxEnhMetaFileDataObject::GetDataHere(const wxDataFormat& format, void *buf) const
 {
-    wxCHECK_MSG( m_metafile.Ok(), false, _T("copying invalid enh metafile") );
+    wxCHECK_MSG( m_metafile.Ok(), false, wxT("copying invalid enh metafile") );
 
     HENHMETAFILE hEMF = (HENHMETAFILE)m_metafile.GetHENHMETAFILE();
 
@@ -308,7 +308,7 @@ bool wxEnhMetaFileDataObject::GetDataHer
         HENHMETAFILE hEMFCopy = ::CopyEnhMetaFile(hEMF, NULL);
         if ( !hEMFCopy )
         {
-            wxLogLastError(_T("CopyEnhMetaFile"));
+            wxLogLastError(wxT("CopyEnhMetaFile"));
 
             return false;
         }
@@ -317,7 +317,7 @@ bool wxEnhMetaFileDataObject::GetDataHer
     }
     else
     {
-        wxASSERT_MSG( format == wxDF_METAFILE, _T("unsupported format") );
+        wxASSERT_MSG( format == wxDF_METAFILE, wxT("unsupported format") );
 
         // convert to WMF
 
@@ -325,14 +325,14 @@ bool wxEnhMetaFileDataObject::GetDataHer
 
         // first get the buffer size and alloc memory
         size_t size = ::GetWinMetaFileBits(hEMF, 0, NULL, MM_ANISOTROPIC, hdc);
-        wxCHECK_MSG( size, false, _T("GetWinMetaFileBits() failed") );
+        wxCHECK_MSG( size, false, wxT("GetWinMetaFileBits() failed") );
 
         BYTE *bits = (BYTE *)malloc(size);
 
         // then get the enh metafile bits
         if ( !::GetWinMetaFileBits(hEMF, size, bits, MM_ANISOTROPIC, hdc) )
         {
-            wxLogLastError(_T("GetWinMetaFileBits"));
+            wxLogLastError(wxT("GetWinMetaFileBits"));
 
             free(bits);
 
@@ -344,7 +344,7 @@ bool wxEnhMetaFileDataObject::GetDataHer
         free(bits);
         if ( !hMF )
         {
-            wxLogLastError(_T("SetMetaFileBitsEx"));
+            wxLogLastError(wxT("SetMetaFileBitsEx"));
 
             return false;
         }
@@ -373,24 +373,24 @@ bool wxEnhMetaFileDataObject::SetData(co
     {
         hEMF = *(HENHMETAFILE *)buf;
 
-        wxCHECK_MSG( hEMF, false, _T("pasting invalid enh metafile") );
+        wxCHECK_MSG( hEMF, false, wxT("pasting invalid enh metafile") );
     }
     else
     {
-        wxASSERT_MSG( format == wxDF_METAFILE, _T("unsupported format") );
+        wxASSERT_MSG( format == wxDF_METAFILE, wxT("unsupported format") );
 
         // convert from WMF
         const METAFILEPICT *mfpict = (const METAFILEPICT *)buf;
 
         // first get the buffer size
         size_t size = ::GetMetaFileBitsEx(mfpict->hMF, 0, NULL);
-        wxCHECK_MSG( size, false, _T("GetMetaFileBitsEx() failed") );
+        wxCHECK_MSG( size, false, wxT("GetMetaFileBitsEx() failed") );
 
         // then get metafile bits
         BYTE *bits = (BYTE *)malloc(size);
         if ( !::GetMetaFileBitsEx(mfpict->hMF, size, bits) )
         {
-            wxLogLastError(_T("GetMetaFileBitsEx"));
+            wxLogLastError(wxT("GetMetaFileBitsEx"));
 
             free(bits);
 
@@ -404,7 +404,7 @@ bool wxEnhMetaFileDataObject::SetData(co
         free(bits);
         if ( !hEMF )
         {
-            wxLogLastError(_T("SetWinMetaFileBits"));
+            wxLogLastError(wxT("SetWinMetaFileBits"));
 
             return false;
         }
@@ -427,14 +427,14 @@ size_t wxEnhMetaFileSimpleDataObject::Ge
 
 bool wxEnhMetaFileSimpleDataObject::GetDataHere(void *buf) const
 {
-    wxCHECK_MSG( m_metafile.Ok(), false, _T("copying invalid enh metafile") );
+    wxCHECK_MSG( m_metafile.Ok(), false, wxT("copying invalid enh metafile") );
 
     HENHMETAFILE hEMF = (HENHMETAFILE)m_metafile.GetHENHMETAFILE();
 
     HENHMETAFILE hEMFCopy = ::CopyEnhMetaFile(hEMF, NULL);
     if ( !hEMFCopy )
     {
-        wxLogLastError(_T("CopyEnhMetaFile"));
+        wxLogLastError(wxT("CopyEnhMetaFile"));
 
         return false;
     }
@@ -448,7 +448,7 @@ bool wxEnhMetaFileSimpleDataObject::SetD
 {
     HENHMETAFILE hEMF = *(HENHMETAFILE *)buf;
 
-    wxCHECK_MSG( hEMF, false, _T("pasting invalid enh metafile") );
+    wxCHECK_MSG( hEMF, false, wxT("pasting invalid enh metafile") );
     m_metafile.SetHENHMETAFILE((WXHANDLE)hEMF);
 
     return true;
--- src/msw/app.cpp-orig	2009-06-18 20:04:27.102813000 -0500
+++ src/msw/app.cpp	2009-06-18 20:04:34.591161000 -0500
@@ -615,7 +615,7 @@ int wxApp::GetComCtl32Version()
         // depending on the OS version and the presence of the manifest, it can
         // be either v5 or v6 and instead of trying to guess it just get the
         // handle of the already loaded version
-        wxLoadedDLL dllComCtl32(_T("comctl32.dll"));
+        wxLoadedDLL dllComCtl32(wxT("comctl32.dll"));
         if ( !dllComCtl32.IsLoaded() )
         {
             s_verComCtl32 = 0;
@@ -635,7 +635,7 @@ int wxApp::GetComCtl32Version()
                 HRESULT hr = (*pfnDllGetVersion)(&dvi);
                 if ( FAILED(hr) )
                 {
-                    wxLogApiError(_T("DllGetVersion"), hr);
+                    wxLogApiError(wxT("DllGetVersion"), hr);
                 }
                 else
                 {
@@ -652,7 +652,7 @@ int wxApp::GetComCtl32Version()
             if ( !s_verComCtl32 )
             {
                 // InitCommonControlsEx is unique to 4.70 and later
-                void *pfn = dllComCtl32.GetSymbol(_T("InitCommonControlsEx"));
+                void *pfn = dllComCtl32.GetSymbol(wxT("InitCommonControlsEx"));
                 if ( !pfn )
                 {
                     // not found, must be 4.00
@@ -662,7 +662,7 @@ int wxApp::GetComCtl32Version()
                 {
                     // many symbols appeared in comctl32 4.71, could use any of
                     // them except may be DllInstall()
-                    pfn = dllComCtl32.GetSymbol(_T("InitializeFlatSB"));
+                    pfn = dllComCtl32.GetSymbol(wxT("InitializeFlatSB"));
                     if ( !pfn )
                     {
                         // not found, must be 4.70
@@ -750,10 +750,10 @@ bool wxApp::OnExceptionInMainLoop()
             ::MessageBox
               (
                 NULL,
-                _T("An unhandled exception occurred. Press \"Abort\" to \
+                wxT("An unhandled exception occurred. Press \"Abort\" to \
 terminate the program,\r\n\
 \"Retry\" to exit the program normally and \"Ignore\" to try to continue."),
-                _T("Unhandled exception"),
+                wxT("Unhandled exception"),
                 MB_ABORTRETRYIGNORE |
                 MB_ICONERROR|
                 MB_TASKMODAL
@@ -764,7 +764,7 @@ terminate the program,\r\n\
             throw;
 
         default:
-            wxFAIL_MSG( _T("unexpected MessageBox() return code") );
+            wxFAIL_MSG( wxT("unexpected MessageBox() return code") );
             // fall through
 
         case IDRETRY:
--- src/msw/volume.cpp-orig	2009-06-18 20:04:39.988936000 -0500
+++ src/msw/volume.cpp	2009-06-18 20:04:44.915824000 -0500
@@ -381,16 +381,16 @@ wxArrayString wxFSVolumeBase::GetVolumes
     ::InterlockedExchange(&s_cancelSearch, FALSE);     // reset
 
 #if wxUSE_DYNLIB_CLASS
-    if (!s_mprLib.IsLoaded() && s_mprLib.Load(_T("mpr.dll")))
+    if (!s_mprLib.IsLoaded() && s_mprLib.Load(wxT("mpr.dll")))
     {
 #ifdef UNICODE
-        s_pWNetOpenEnum = (WNetOpenEnumPtr)s_mprLib.GetSymbol(_T("WNetOpenEnumW"));
-        s_pWNetEnumResource = (WNetEnumResourcePtr)s_mprLib.GetSymbol(_T("WNetEnumResourceW"));
+        s_pWNetOpenEnum = (WNetOpenEnumPtr)s_mprLib.GetSymbol(wxT("WNetOpenEnumW"));
+        s_pWNetEnumResource = (WNetEnumResourcePtr)s_mprLib.GetSymbol(wxT("WNetEnumResourceW"));
 #else
-        s_pWNetOpenEnum = (WNetOpenEnumPtr)s_mprLib.GetSymbol(_T("WNetOpenEnumA"));
-        s_pWNetEnumResource = (WNetEnumResourcePtr)s_mprLib.GetSymbol(_T("WNetEnumResourceA"));
+        s_pWNetOpenEnum = (WNetOpenEnumPtr)s_mprLib.GetSymbol(wxT("WNetOpenEnumA"));
+        s_pWNetEnumResource = (WNetEnumResourcePtr)s_mprLib.GetSymbol(wxT("WNetEnumResourceA"));
 #endif
-        s_pWNetCloseEnum = (WNetCloseEnumPtr)s_mprLib.GetSymbol(_T("WNetCloseEnum"));
+        s_pWNetCloseEnum = (WNetCloseEnumPtr)s_mprLib.GetSymbol(wxT("WNetCloseEnum"));
     }
 #endif
 
@@ -564,7 +564,7 @@ void wxFSVolume::InitIcons()
 wxIcon wxFSVolume::GetIcon(wxFSIconType type) const
 {
     wxCHECK_MSG( type >= 0 && (size_t)type < m_icons.GetCount(), wxNullIcon,
-                 _T("wxFSIconType::GetIcon(): invalid icon index") );
+                 wxT("wxFSIconType::GetIcon(): invalid icon index") );
 
     // Load on demand.
     if (m_icons[type].IsNull())
@@ -589,7 +589,7 @@ wxIcon wxFSVolume::GetIcon(wxFSIconType 
             break;
 
         case wxFS_VOL_ICO_MAX:
-            wxFAIL_MSG(_T("wxFS_VOL_ICO_MAX is not valid icon type"));
+            wxFAIL_MSG(wxT("wxFS_VOL_ICO_MAX is not valid icon type"));
             break;
         }
 
--- src/msw/textctrl.cpp-orig	2009-06-18 20:04:52.907512000 -0500
+++ src/msw/textctrl.cpp	2009-06-18 20:04:59.382432000 -0500
@@ -137,7 +137,7 @@ public:
         : m_count(count)
     {
         wxASSERT_MSG( m_count == -1 || m_count == -2,
-                      _T("wrong initial m_updatesCount value") );
+                      wxT("wrong initial m_updatesCount value") );
 
         if (m_count != -2)
             m_count = 0;
@@ -397,15 +397,15 @@ bool wxTextCtrl::MSWCreateText(const wxS
                 if ( wxRichEditModule::Load(wxRichEditModule::Version_41) )
                 {
                     // yes, class name for version 4.1 really is 5.0
-                    windowClass = _T("RICHEDIT50W");
+                    windowClass = wxT("RICHEDIT50W");
                 }
                 else if ( wxRichEditModule::Load(wxRichEditModule::Version_2or3) )
                 {
-                    windowClass = _T("RichEdit20")
+                    windowClass = wxT("RichEdit20")
 #if wxUSE_UNICODE
-                                _T("W");
+                                wxT("W");
 #else // ANSI
-                                _T("A");
+                                wxT("A");
 #endif // Unicode/ANSI
                 }
                 else // failed to load msftedit.dll and riched20.dll
@@ -418,7 +418,7 @@ bool wxTextCtrl::MSWCreateText(const wxS
             {
                 if ( wxRichEditModule::Load(wxRichEditModule::Version_1) )
                 {
-                    windowClass = _T("RICHEDIT");
+                    windowClass = wxT("RICHEDIT");
                 }
                 else // failed to load any richedit control DLL
                 {
@@ -523,16 +523,16 @@ void wxTextCtrl::AdoptAttributesFromHWND
 #if wxUSE_RICHEDIT
     wxString classname = wxGetWindowClass(GetHWND());
 
-    if ( classname.IsSameAs(_T("EDIT"), false /* no case */) )
+    if ( classname.IsSameAs(wxT("EDIT"), false /* no case */) )
     {
         m_verRichEdit = 0;
     }
     else // rich edit?
     {
         wxChar c;
-        if ( wxSscanf(classname, _T("RichEdit%d0%c"), &m_verRichEdit, &c) != 2 )
+        if ( wxSscanf(classname, wxT("RichEdit%d0%c"), &m_verRichEdit, &c) != 2 )
         {
-            wxLogDebug(_T("Unknown edit control '%s'."), classname.c_str());
+            wxLogDebug(wxT("Unknown edit control '%s'."), classname.c_str());
 
             m_verRichEdit = 0;
         }
@@ -797,8 +797,8 @@ wxString wxTextCtrl::GetRange(long from,
                     // style - convert it to something reasonable
                     for ( ; *p; p++ )
                     {
-                        if ( *p == _T('\r') )
-                            *p = _T('\n');
+                        if ( *p == wxT('\r') )
+                            *p = wxT('\n');
                     }
                 }
             }
@@ -976,11 +976,11 @@ wxTextCtrl::StreamIn(const wxString& val
     // It's okay for EN_UPDATE to not be sent if the selection is empty and
     // the text is empty, otherwise warn the programmer about it.
     wxASSERT_MSG( ucf.GotUpdate() || ( !HasSelection() && value.empty() ),
-                  _T("EM_STREAMIN didn't send EN_UPDATE?") );
+                  wxT("EM_STREAMIN didn't send EN_UPDATE?") );
 
     if ( eds.dwError )
     {
-        wxLogLastError(_T("EM_STREAMIN"));
+        wxLogLastError(wxT("EM_STREAMIN"));
     }
 
 #if !wxUSE_WCHAR_T
@@ -1026,7 +1026,7 @@ wxTextCtrl::StreamOut(wxFontEncoding enc
 
     if ( eds.dwError )
     {
-        wxLogLastError(_T("EM_STREAMOUT"));
+        wxLogLastError(wxT("EM_STREAMOUT"));
     }
     else // streamed out ok
     {
@@ -1714,24 +1714,24 @@ wxString wxTextCtrl::GetLineText(long li
         {
             // remove the '\r' returned by the rich edit control, the user code
             // should never see it
-            if ( buf[len - 2] == _T('\r') && buf[len - 1] == _T('\n') )
+            if ( buf[len - 2] == wxT('\r') && buf[len - 1] == wxT('\n') )
             {
                 // richedit 1.0 uses "\r\n" as line terminator, so remove "\r"
                 // here and "\n" below
-                buf[len - 2] = _T('\n');
+                buf[len - 2] = wxT('\n');
                 len--;
             }
-            else if ( buf[len - 1] == _T('\r') )
+            else if ( buf[len - 1] == wxT('\r') )
             {
                 // richedit 2.0+ uses only "\r", replace it with "\n"
-                buf[len - 1] = _T('\n');
+                buf[len - 1] = wxT('\n');
             }
         }
 #endif // wxUSE_RICHEDIT
 
         // remove the '\n' at the end, if any (this is how this function is
         // supposed to work according to the docs)
-        if ( buf[len - 1] == _T('\n') )
+        if ( buf[len - 1] == wxT('\n') )
         {
             len--;
         }
@@ -1873,7 +1873,7 @@ bool wxTextCtrl::MSWShouldPreProcessMess
             switch ( ctrl + shift )
             {
                 default:
-                    wxFAIL_MSG( _T("how many modifiers have we got?") );
+                    wxFAIL_MSG( wxT("how many modifiers have we got?") );
                     // fall through
 
                 case 0:
@@ -2078,7 +2078,7 @@ bool wxTextCtrl::SendUpdateEvent()
             return false;
 
         default:
-            wxFAIL_MSG( _T("unexpected wxTextCtrl::m_updatesCount value") );
+            wxFAIL_MSG( wxT("unexpected wxTextCtrl::m_updatesCount value") );
             // fall through
 
         case -1:
@@ -2619,7 +2619,7 @@ bool wxTextCtrl::SetStyle(long start, lo
                             SCF_SELECTION, (LPARAM)&cf) != 0;
     if ( !ok )
     {
-        wxLogDebug(_T("SendMessage(EM_SETCHARFORMAT, SCF_SELECTION) failed"));
+        wxLogDebug(wxT("SendMessage(EM_SETCHARFORMAT, SCF_SELECTION) failed"));
     }
 
     // now do the paragraph formatting
@@ -2704,7 +2704,7 @@ bool wxTextCtrl::SetStyle(long start, lo
                                 0, (LPARAM) &pf) != 0;
         if ( !ok )
         {
-            wxLogDebug(_T("SendMessage(EM_SETPARAFORMAT, 0) failed"));
+            wxLogDebug(wxT("SendMessage(EM_SETPARAFORMAT, 0) failed"));
         }
     }
 
@@ -2927,9 +2927,9 @@ bool wxRichEditModule::Load(Version vers
 
     static const wxChar *dllnames[] =
     {
-        _T("riched32"),
-        _T("riched20"),
-        _T("msftedit"),
+        wxT("riched32"),
+        wxT("riched20"),
+        wxT("msftedit"),
     };
 
     wxCOMPILE_TIME_ASSERT( WXSIZEOF(dllnames) == Version_Max,
--- src/msw/main.cpp-orig	2009-06-18 20:05:03.241193000 -0500
+++ src/msw/main.cpp	2009-06-18 20:05:07.665995000 -0500
@@ -141,7 +141,7 @@ void wxSETranslator(unsigned int WXUNUSE
     switch ( wxGlobalSEHandler(ep) )
     {
         default:
-            wxFAIL_MSG( _T("unexpected wxGlobalSEHandler() return value") );
+            wxFAIL_MSG( wxT("unexpected wxGlobalSEHandler() return value") );
             // fall through
 
         case EXCEPTION_EXECUTE_HANDLER:
@@ -175,19 +175,19 @@ bool wxHandleFatalExceptions(bool doit)
         wxChar fullname[MAX_PATH];
         if ( !::GetTempPath(WXSIZEOF(fullname), fullname) )
         {
-            wxLogLastError(_T("GetTempPath"));
+            wxLogLastError(wxT("GetTempPath"));
 
             // when all else fails...
-            wxStrcpy(fullname, _T("c:\\"));
+            wxStrcpy(fullname, wxT("c:\\"));
         }
 
         // use PID and date to make the report file name more unique
         wxString name = wxString::Format
                         (
-                            _T("%s_%s_%lu.dmp"),
+                            wxT("%s_%s_%lu.dmp"),
                             wxTheApp ? wxTheApp->GetAppName().c_str()
-                                     : _T("wxwindows"),
-                            wxDateTime::Now().Format(_T("%Y%m%dT%H%M%S")).c_str(),
+                                     : wxT("wxwindows"),
+                            wxDateTime::Now().Format(wxT("%Y%m%dT%H%M%S")).c_str(),
                             ::GetCurrentProcessId()
                         );
 
--- src/msw/notebook.cpp-orig	2009-06-18 20:05:13.680091000 -0500
+++ src/msw/notebook.cpp	2009-06-18 20:05:22.105277000 -0500
@@ -337,7 +337,7 @@ bool wxNotebook::Create(wxWindow *parent
             }
             else
             {
-                wxLogLastError(_T("GetClassInfoEx(SysTabCtl32)"));
+                wxLogLastError(wxT("GetClassInfoEx(SysTabCtl32)"));
             }
         }
 
@@ -676,7 +676,7 @@ wxSize wxNotebook::CalcSizeFromPage(cons
 
 void wxNotebook::AdjustPageSize(wxNotebookPage *page)
 {
-    wxCHECK_RET( page, _T("NULL page in wxNotebook::AdjustPageSize") );
+    wxCHECK_RET( page, wxT("NULL page in wxNotebook::AdjustPageSize") );
 
     const wxRect r = GetPageSize();
     if ( !r.IsEmpty() )
@@ -764,12 +764,12 @@ bool wxNotebook::InsertPage(size_t nPage
                             bool bSelect,
                             int imageId)
 {
-    wxCHECK_MSG( pPage != NULL, false, _T("NULL page in wxNotebook::InsertPage") );
+    wxCHECK_MSG( pPage != NULL, false, wxT("NULL page in wxNotebook::InsertPage") );
     wxCHECK_MSG( IS_VALID_PAGE(nPage) || nPage == GetPageCount(), false,
-                 _T("invalid index in wxNotebook::InsertPage") );
+                 wxT("invalid index in wxNotebook::InsertPage") );
 
     wxASSERT_MSG( pPage->GetParent() == this,
-                    _T("notebook pages must have notebook as parent") );
+                    wxT("notebook pages must have notebook as parent") );
 
     // add a new tab to the control
     // ----------------------------
@@ -1270,7 +1270,7 @@ WXHBRUSH wxNotebook::MSWGetBgBrushForChi
 
         if ( !::SetBrushOrgEx((HDC)hDC, -rc.left, -rc.top, NULL) )
         {
-            wxLogLastError(_T("SetBrushOrgEx(notebook bg brush)"));
+            wxLogLastError(wxT("SetBrushOrgEx(notebook bg brush)"));
         }
 
         return m_hbrBackground;
--- src/msw/thread.cpp-orig	2009-06-18 20:05:17.437390000 -0500
+++ src/msw/thread.cpp	2009-06-18 20:05:26.597223000 -0500
@@ -212,7 +212,7 @@ wxMutexInternal::wxMutexInternal(wxMutex
 
     if ( !m_mutex )
     {
-        wxLogLastError(_T("CreateMutex()"));
+        wxLogLastError(wxT("CreateMutex()"));
     }
 }
 
@@ -222,7 +222,7 @@ wxMutexInternal::~wxMutexInternal()
     {
         if ( !::CloseHandle(m_mutex) )
         {
-            wxLogLastError(_T("CloseHandle(mutex)"));
+            wxLogLastError(wxT("CloseHandle(mutex)"));
         }
     }
 }
@@ -235,7 +235,7 @@ wxMutexError wxMutexInternal::LockTimeou
         case WAIT_ABANDONED:
             // the previous caller died without releasing the mutex, so even
             // though we did get it, log a message about this
-            wxLogDebug(_T("WaitForSingleObject() returned WAIT_ABANDONED"));
+            wxLogDebug(wxT("WaitForSingleObject() returned WAIT_ABANDONED"));
             // fall through
 
         case WAIT_OBJECT_0:
@@ -250,7 +250,7 @@ wxMutexError wxMutexInternal::LockTimeou
             // fall through
 
         case WAIT_FAILED:
-            wxLogLastError(_T("WaitForSingleObject(mutex)"));
+            wxLogLastError(wxT("WaitForSingleObject(mutex)"));
             return wxMUTEX_MISC_ERROR;
     }
 
@@ -261,7 +261,7 @@ wxMutexError wxMutexInternal::Unlock()
 {
     if ( !::ReleaseMutex(m_mutex) )
     {
-        wxLogLastError(_T("ReleaseMutex()"));
+        wxLogLastError(wxT("ReleaseMutex()"));
 
         return wxMUTEX_MISC_ERROR;
     }
@@ -322,7 +322,7 @@ wxSemaphoreInternal::wxSemaphoreInternal
 #endif
     if ( !m_semaphore )
     {
-        wxLogLastError(_T("CreateSemaphore()"));
+        wxLogLastError(wxT("CreateSemaphore()"));
     }
 }
 
@@ -332,7 +332,7 @@ wxSemaphoreInternal::~wxSemaphoreInterna
     {
         if ( !::CloseHandle(m_semaphore) )
         {
-            wxLogLastError(_T("CloseHandle(semaphore)"));
+            wxLogLastError(wxT("CloseHandle(semaphore)"));
         }
     }
 }
@@ -350,7 +350,7 @@ wxSemaError wxSemaphoreInternal::WaitTim
            return wxSEMA_TIMEOUT;
 
         default:
-            wxLogLastError(_T("WaitForSingleObject(semaphore)"));
+            wxLogLastError(wxT("WaitForSingleObject(semaphore)"));
     }
 
     return wxSEMA_MISC_ERROR;
@@ -367,7 +367,7 @@ wxSemaError wxSemaphoreInternal::Post()
         }
         else
         {
-            wxLogLastError(_T("ReleaseSemaphore"));
+            wxLogLastError(wxT("ReleaseSemaphore"));
             return wxSEMA_MISC_ERROR;
         }
     }
@@ -606,7 +606,7 @@ void wxThreadInternal::SetPriority(unsig
 bool wxThreadInternal::Create(wxThread *thread, unsigned int stackSize)
 {
     wxASSERT_MSG( m_state == STATE_NEW && !m_hThread,
-                    _T("Create()ing thread twice?") );
+                    wxT("Create()ing thread twice?") );
 
     // for compilers which have it, we should use C RTL function for thread
     // creation instead of Win32 API one because otherwise we will have memory
@@ -950,7 +950,7 @@ bool wxThread::SetConcurrency(size_t WXU
 #ifdef __WXWINCE__
     return false;
 #else
-    wxASSERT_MSG( IsMain(), _T("should only be called from the main thread") );
+    wxASSERT_MSG( IsMain(), wxT("should only be called from the main thread") );
 
     // ok only for the default one
     if ( level == 0 )
@@ -961,7 +961,7 @@ bool wxThread::SetConcurrency(size_t WXU
     DWORD_PTR dwProcMask, dwSysMask;
     if ( ::GetProcessAffinityMask(hProcess, &dwProcMask, &dwSysMask) == 0 )
     {
-        wxLogLastError(_T("GetProcessAffinityMask"));
+        wxLogLastError(wxT("GetProcessAffinityMask"));
 
         return false;
     }
@@ -1000,7 +1000,7 @@ bool wxThread::SetConcurrency(size_t WXU
     // could we set all bits?
     if ( level != 0 )
     {
-        wxLogDebug(_T("bad level %u in wxThread::SetConcurrency()"), level);
+        wxLogDebug(wxT("bad level %u in wxThread::SetConcurrency()"), level);
 
         return false;
     }
@@ -1015,7 +1015,7 @@ bool wxThread::SetConcurrency(size_t WXU
 
     if ( !pfnSetProcessAffinityMask )
     {
-        HMODULE hModKernel = ::LoadLibrary(_T("kernel32"));
+        HMODULE hModKernel = ::LoadLibrary(wxT("kernel32"));
         if ( hModKernel )
         {
             pfnSetProcessAffinityMask = (SETPROCESSAFFINITYMASK)
@@ -1024,7 +1024,7 @@ bool wxThread::SetConcurrency(size_t WXU
 
         // we've discovered a MT version of Win9x!
         wxASSERT_MSG( pfnSetProcessAffinityMask,
-                      _T("this system has several CPUs but no SetProcessAffinityMask function?") );
+                      wxT("this system has several CPUs but no SetProcessAffinityMask function?") );
     }
 
     if ( !pfnSetProcessAffinityMask )
@@ -1035,7 +1035,7 @@ bool wxThread::SetConcurrency(size_t WXU
 
     if ( pfnSetProcessAffinityMask(hProcess, dwProcMask) == 0 )
     {
-        wxLogLastError(_T("SetProcessAffinityMask"));
+        wxLogLastError(wxT("SetProcessAffinityMask"));
 
         return false;
     }
@@ -1111,7 +1111,7 @@ wxThread::ExitCode wxThread::Wait()
     // although under Windows we can wait for any thread, it's an error to
     // wait for a detached one in wxWin API
     wxCHECK_MSG( !IsDetached(), (ExitCode)-1,
-                 _T("wxThread::Wait(): can't wait for detached thread") );
+                 wxT("wxThread::Wait(): can't wait for detached thread") );
 
     ExitCode rc = (ExitCode)-1;
 
--- src/msw/dc.cpp-orig	2009-06-18 20:05:30.360512000 -0500
+++ src/msw/dc.cpp	2009-06-18 20:05:35.515377000 -0500
@@ -180,7 +180,7 @@ public:
 #ifndef __WXWINCE__
         m_modeOld = ::SetStretchBltMode(m_hdc, mode);
         if ( !m_modeOld )
-            wxLogLastError(_T("SetStretchBltMode"));
+            wxLogLastError(wxT("SetStretchBltMode"));
 #endif
     }
 
@@ -188,7 +188,7 @@ public:
     {
 #ifndef __WXWINCE__
         if ( !::SetStretchBltMode(m_hdc, m_modeOld) )
-            wxLogLastError(_T("SetStretchBltMode"));
+            wxLogLastError(wxT("SetStretchBltMode"));
 #endif
     }
 
@@ -236,8 +236,8 @@ private:
     const wxChar *m_dllName;
 };
 
-static wxOnceOnlyDLLLoader wxGDI32DLL(_T("gdi32"));
-static wxOnceOnlyDLLLoader wxMSIMG32DLL(_T("msimg32"));
+static wxOnceOnlyDLLLoader wxGDI32DLL(wxT("gdi32"));
+static wxOnceOnlyDLLLoader wxMSIMG32DLL(wxT("msimg32"));
 
 // ===========================================================================
 // implementation
@@ -451,7 +451,7 @@ void wxDC::SetClippingHrgn(WXHRGN hrgn)
 #else // !WinCE
     if ( ::ExtSelectClipRgn(GetHdc(), (HRGN)hrgn, RGN_AND) == ERROR )
     {
-        wxLogLastError(_T("ExtSelectClipRgn"));
+        wxLogLastError(wxT("ExtSelectClipRgn"));
 
         return;
     }
@@ -474,7 +474,7 @@ void wxDC::DoSetClippingRegion(wxCoord x
                                 LogicalToDeviceY(y + h));
     if ( !hrgn )
     {
-        wxLogLastError(_T("CreateRectRgn"));
+        wxLogLastError(wxT("CreateRectRgn"));
     }
     else
     {
@@ -634,7 +634,7 @@ bool wxDC::DoGetPixel(wxCoord x, wxCoord
 {
     WXMICROWIN_CHECK_HDC_RET(false)
 
-    wxCHECK_MSG( col, false, _T("NULL colour parameter in wxDC::GetPixel") );
+    wxCHECK_MSG( col, false, wxT("NULL colour parameter in wxDC::GetPixel") );
 
     // get the color of the pixel
     COLORREF pixelcolor = ::GetPixel(GetHdc(), XLOG2DEV(x), YLOG2DEV(y));
@@ -1178,7 +1178,7 @@ void wxDC::DoDrawBitmap( const wxBitmap 
 {
     WXMICROWIN_CHECK_HDC
 
-    wxCHECK_RET( bmp.Ok(), _T("invalid bitmap in wxDC::DrawBitmap") );
+    wxCHECK_RET( bmp.Ok(), wxT("invalid bitmap in wxDC::DrawBitmap") );
 
     int width = bmp.GetWidth(),
         height = bmp.GetHeight();
@@ -1507,7 +1507,7 @@ void wxDC::SetFont(const wxFont& font)
         HGDIOBJ hfont = ::SelectObject(GetHdc(), GetHfontOf(font));
         if ( hfont == HGDI_ERROR )
         {
-            wxLogLastError(_T("SelectObject(font)"));
+            wxLogLastError(wxT("SelectObject(font)"));
         }
         else // selected ok
         {
@@ -1523,7 +1523,7 @@ void wxDC::SetFont(const wxFont& font)
         {
             if ( ::SelectObject(GetHdc(), (HPEN) m_oldFont) == HGDI_ERROR )
             {
-                wxLogLastError(_T("SelectObject(old font)"));
+                wxLogLastError(wxT("SelectObject(old font)"));
             }
 
             m_oldFont = 0;
@@ -1545,7 +1545,7 @@ void wxDC::SetPen(const wxPen& pen)
         HGDIOBJ hpen = ::SelectObject(GetHdc(), GetHpenOf(pen));
         if ( hpen == HGDI_ERROR )
         {
-            wxLogLastError(_T("SelectObject(pen)"));
+            wxLogLastError(wxT("SelectObject(pen)"));
         }
         else // selected ok
         {
@@ -1561,7 +1561,7 @@ void wxDC::SetPen(const wxPen& pen)
         {
             if ( ::SelectObject(GetHdc(), (HPEN) m_oldPen) == HGDI_ERROR )
             {
-                wxLogLastError(_T("SelectObject(old pen)"));
+                wxLogLastError(wxT("SelectObject(old pen)"));
             }
 
             m_oldPen = 0;
@@ -1593,14 +1593,14 @@ void wxDC::SetBrush(const wxBrush& brush
                         NULL                    // [out] previous brush origin
                     ) )
             {
-                wxLogLastError(_T("SetBrushOrgEx()"));
+                wxLogLastError(wxT("SetBrushOrgEx()"));
             }
         }
 
         HGDIOBJ hbrush = ::SelectObject(GetHdc(), GetHbrushOf(brush));
         if ( hbrush == HGDI_ERROR )
         {
-            wxLogLastError(_T("SelectObject(brush)"));
+            wxLogLastError(wxT("SelectObject(brush)"));
         }
         else // selected ok
         {
@@ -1616,7 +1616,7 @@ void wxDC::SetBrush(const wxBrush& brush
         {
             if ( ::SelectObject(GetHdc(), (HPEN) m_oldBrush) == HGDI_ERROR )
             {
-                wxLogLastError(_T("SelectObject(old brush)"));
+                wxLogLastError(wxT("SelectObject(old brush)"));
             }
 
             m_oldBrush = 0;
@@ -1753,7 +1753,7 @@ void wxDC::DoGetTextExtent(const wxStrin
     HFONT hfontOld;
     if ( font )
     {
-        wxASSERT_MSG( font->Ok(), _T("invalid font in wxDC::GetTextExtent") );
+        wxASSERT_MSG( font->Ok(), wxT("invalid font in wxDC::GetTextExtent") );
 
         hfontOld = (HFONT)::SelectObject(GetHdc(), GetHfontOf(*font));
     }
@@ -1766,7 +1766,7 @@ void wxDC::DoGetTextExtent(const wxStrin
     const size_t len = string.length();
     if ( !::GetTextExtentPoint32(GetHdc(), string, len, &sizeRect) )
     {
-        wxLogLastError(_T("GetTextExtentPoint32()"));
+        wxLogLastError(wxT("GetTextExtentPoint32()"));
     }
 
 #if !defined(_WIN32_WCE) || (_WIN32_WCE >= 400)
@@ -1910,7 +1910,7 @@ void wxDC::SetMapMode(int mode)
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown mapping mode in SetMapMode") );
+                wxFAIL_MSG( wxT("unknown mapping mode in SetMapMode") );
         }
     }
 
@@ -2064,7 +2064,7 @@ bool wxDC::DoBlit(wxCoord xdest, wxCoord
                   int rop, bool useMask,
                   wxCoord xsrcMask, wxCoord ysrcMask)
 {
-    wxCHECK_MSG( source, false, _T("wxDC::Blit(): NULL wxDC pointer") );
+    wxCHECK_MSG( source, false, wxT("wxDC::Blit(): NULL wxDC pointer") );
 
     WXMICROWIN_CHECK_HDC_RET(false)
 
@@ -2315,7 +2315,7 @@ bool wxDC::DoBlit(wxCoord xdest, wxCoord
                         dwRop
                     ) )
             {
-                wxLogLastError(_T("StretchBlt"));
+                wxLogLastError(wxT("StretchBlt"));
             }
             else
             {
@@ -2335,7 +2335,7 @@ bool wxDC::DoBlit(wxCoord xdest, wxCoord
                         dwRop
                     ) )
             {
-                wxLogLastError(_T("BitBlt"));
+                wxLogLastError(wxT("BitBlt"));
             }
             else
             {
@@ -2375,7 +2375,7 @@ void wxDC::DoGetSizeMM(int *w, int *h) c
     {
         int wTotal = ::GetDeviceCaps(GetHdc(), HORZRES);
 
-        wxCHECK_RET( wTotal, _T("0 width device?") );
+        wxCHECK_RET( wTotal, wxT("0 width device?") );
 
         *w = (wPixels * ::GetDeviceCaps(GetHdc(), HORZSIZE)) / wTotal;
     }
@@ -2384,7 +2384,7 @@ void wxDC::DoGetSizeMM(int *w, int *h) c
     {
         int hTotal = ::GetDeviceCaps(GetHdc(), VERTRES);
 
-        wxCHECK_RET( hTotal, _T("0 height device?") );
+        wxCHECK_RET( hTotal, wxT("0 height device?") );
 
         *h = (hPixels * ::GetDeviceCaps(GetHdc(), VERTSIZE)) / hTotal;
     }
@@ -2555,8 +2555,8 @@ static bool AlphaBlt(HDC hdcDst,
                      int srcX, int srcY, HDC hdcSrc,
                      const wxBitmap& bmp)
 {
-    wxASSERT_MSG( bmp.Ok() && bmp.HasAlpha(), _T("AlphaBlt(): invalid bitmap") );
-    wxASSERT_MSG( hdcDst && hdcSrc, _T("AlphaBlt(): invalid HDC") );
+    wxASSERT_MSG( bmp.Ok() && bmp.HasAlpha(), wxT("AlphaBlt(): invalid bitmap") );
+    wxASSERT_MSG( hdcDst && hdcSrc, wxT("AlphaBlt(): invalid HDC") );
 
     // do we have AlphaBlend() and company in the headers?
 #if defined(AC_SRC_OVER) && wxUSE_DYNLIB_CLASS
@@ -2566,7 +2566,7 @@ static bool AlphaBlt(HDC hdcDst,
                                         BLENDFUNCTION);
 
     static AlphaBlend_t
-        pfnAlphaBlend = (AlphaBlend_t)wxMSIMG32DLL.GetSymbol(_T("AlphaBlend"));
+        pfnAlphaBlend = (AlphaBlend_t)wxMSIMG32DLL.GetSymbol(wxT("AlphaBlend"));
     if ( pfnAlphaBlend )
     {
         BLENDFUNCTION bf;
@@ -2583,7 +2583,7 @@ static bool AlphaBlt(HDC hdcDst,
             return true;
         }
 
-        wxLogLastError(_T("AlphaBlend"));
+        wxLogLastError(wxT("AlphaBlend"));
     }
 #else
     wxUnusedVar(hdcSrc);
@@ -2619,7 +2619,7 @@ wxAlphaBlend(HDC hdcDst, int xDst, int y
 
     if ( !::BitBlt(hdcMem, 0, 0, w, h, hdcDst, xDst, yDst, SRCCOPY) )
     {
-        wxLogLastError(_T("BitBlt"));
+        wxLogLastError(wxT("BitBlt"));
     }
 
     // combine them with the source bitmap using alpha
@@ -2627,7 +2627,7 @@ wxAlphaBlend(HDC hdcDst, int xDst, int y
                      dataSrc((wxBitmap &)bmpSrc);
 
     wxCHECK_RET( dataDst && dataSrc,
-                    _T("failed to get raw data in wxAlphaBlend") );
+                    wxT("failed to get raw data in wxAlphaBlend") );
 
     wxAlphaPixelData::Iterator pDst(dataDst),
                                pSrc(dataSrc);
@@ -2662,7 +2662,7 @@ wxAlphaBlend(HDC hdcDst, int xDst, int y
     // and finally blit them back to the destination DC
     if ( !::BitBlt(hdcDst, xDst, yDst, w, h, hdcMem, 0, 0, SRCCOPY) )
     {
-        wxLogLastError(_T("BitBlt"));
+        wxLogLastError(wxT("BitBlt"));
     }
 }
 
@@ -2680,7 +2680,7 @@ void wxDC::DoGradientFillLinear (const w
     typedef BOOL
         (WINAPI *GradientFill_t)(HDC, PTRIVERTEX, ULONG, PVOID, ULONG, ULONG);
     static GradientFill_t pfnGradientFill =
-        (GradientFill_t)wxMSIMG32DLL.GetSymbol(_T("GradientFill"));
+        (GradientFill_t)wxMSIMG32DLL.GetSymbol(wxT("GradientFill"));
 
     if ( pfnGradientFill )
     {
@@ -2725,7 +2725,7 @@ void wxDC::DoGradientFillLinear (const w
             return;
         }
 
-        wxLogLastError(_T("GradientFill"));
+        wxLogLastError(wxT("GradientFill"));
     }
 #endif // wxUSE_DYNLIB_CLASS
 
@@ -2736,7 +2736,7 @@ static DWORD wxGetDCLayout(HDC hdc)
 {
     typedef DWORD (WINAPI *GetLayout_t)(HDC);
     static GetLayout_t
-        pfnGetLayout = (GetLayout_t)wxGDI32DLL.GetSymbol(_T("GetLayout"));
+        pfnGetLayout = (GetLayout_t)wxGDI32DLL.GetSymbol(wxT("GetLayout"));
 
     return pfnGetLayout ? pfnGetLayout(hdc) : (DWORD)-1;
 }
@@ -2755,7 +2755,7 @@ void wxDC::SetLayoutDirection(wxLayoutDi
 {
     typedef DWORD (WINAPI *SetLayout_t)(HDC, DWORD);
     static SetLayout_t
-        pfnSetLayout = (SetLayout_t)wxGDI32DLL.GetSymbol(_T("SetLayout"));
+        pfnSetLayout = (SetLayout_t)wxGDI32DLL.GetSymbol(wxT("SetLayout"));
     if ( !pfnSetLayout )
         return;
 
--- src/msw/popupwin.cpp-orig	2009-06-18 20:05:41.967861000 -0500
+++ src/msw/popupwin.cpp	2009-06-18 20:05:47.056865000 -0500
@@ -100,7 +100,7 @@ bool wxPopupWindow::Show(bool show)
         // raise to top of z order
         if (!::SetWindowPos(GetHwnd(), HWND_TOP, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE))
         {
-            wxLogLastError(_T("SetWindowPos"));
+            wxLogLastError(wxT("SetWindowPos"));
         }
 
         // and set it as the foreground window so the mouse can be captured
--- src/msw/checklst.cpp-orig	2009-06-18 20:05:53.526580000 -0500
+++ src/msw/checklst.cpp	2009-06-18 20:05:58.281948000 -0500
@@ -392,14 +392,14 @@ bool wxCheckListBox::MSWOnMeasure(WXMEAS
 
 bool wxCheckListBox::IsChecked(unsigned int uiIndex) const
 {
-    wxCHECK_MSG( IsValid(uiIndex), false, _T("bad wxCheckListBox index") );
+    wxCHECK_MSG( IsValid(uiIndex), false, wxT("bad wxCheckListBox index") );
 
     return GetItem(uiIndex)->IsChecked();
 }
 
 void wxCheckListBox::Check(unsigned int uiIndex, bool bCheck)
 {
-    wxCHECK_RET( IsValid(uiIndex), _T("bad wxCheckListBox index") );
+    wxCHECK_RET( IsValid(uiIndex), wxT("bad wxCheckListBox index") );
 
     GetItem(uiIndex)->Check(bCheck);
 }
@@ -461,7 +461,7 @@ void wxCheckListBox::OnKeyDown(wxKeyEven
             wxCheckListBoxItem *item = GetItem(selections[i]);
             if ( !item )
             {
-                wxFAIL_MSG( _T("no wxCheckListBoxItem?") );
+                wxFAIL_MSG( wxT("no wxCheckListBoxItem?") );
                 continue;
             }
 
@@ -477,7 +477,7 @@ void wxCheckListBox::OnKeyDown(wxKeyEven
                     break;
 
                 default:
-                    wxFAIL_MSG( _T("what should this key do?") );
+                    wxFAIL_MSG( wxT("what should this key do?") );
             }
 
             // we should send an event as this has been done by the user and
--- src/msw/dcclient.cpp-orig	2009-06-18 20:06:04.555206000 -0500
+++ src/msw/dcclient.cpp	2009-06-18 20:06:10.789616000 -0500
@@ -94,7 +94,7 @@ wxWindowDC::wxWindowDC()
 
 wxWindowDC::wxWindowDC(wxWindow *canvas)
 {
-    wxCHECK_RET( canvas, _T("invalid window in wxWindowDC") );
+    wxCHECK_RET( canvas, wxT("invalid window in wxWindowDC") );
 
     m_canvas = canvas;
     m_hDC = (WXHDC) ::GetWindowDC(GetHwndOf(m_canvas));
@@ -121,7 +121,7 @@ void wxWindowDC::InitDC()
 
 void wxWindowDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_canvas, _T("wxWindowDC without a window?") );
+    wxCHECK_RET( m_canvas, wxT("wxWindowDC without a window?") );
 
     m_canvas->GetSize(width, height);
 }
@@ -137,7 +137,7 @@ wxClientDC::wxClientDC()
 
 wxClientDC::wxClientDC(wxWindow *canvas)
 {
-    wxCHECK_RET( canvas, _T("invalid window in wxClientDC") );
+    wxCHECK_RET( canvas, wxT("invalid window in wxClientDC") );
 
     m_canvas = canvas;
     m_hDC = (WXHDC)::GetDC(GetHwndOf(m_canvas));
@@ -177,7 +177,7 @@ wxClientDC::~wxClientDC()
 
 void wxClientDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_canvas, _T("wxClientDC without a window?") );
+    wxCHECK_RET( m_canvas, wxT("wxClientDC without a window?") );
 
     m_canvas->GetClientSize(width, height);
 }
--- src/msw/dde.cpp-orig	2009-06-18 20:06:16.153262000 -0500
+++ src/msw/dde.cpp	2009-06-18 20:06:23.034599000 -0500
@@ -158,7 +158,7 @@ extern void wxDDEInitialize()
         UINT rc = DdeInitialize(&DDEIdInst, callback, APPCLASS_STANDARD, 0L);
         if ( rc != DMLERR_NO_ERROR )
         {
-            DDELogError(_T("Failed to initialize DDE"), rc);
+            DDELogError(wxT("Failed to initialize DDE"), rc);
         }
         else
         {
@@ -172,7 +172,7 @@ void wxDDECleanUp()
     // deleting them later won't work as DDE won't be initialized any more
     wxASSERT_MSG( wxDDEServerObjects.empty() &&
                     wxDDEClientObjects.empty(),
-                    _T("all DDE objects should be deleted by now") );
+                    wxT("all DDE objects should be deleted by now") );
 
     wxAtomTable.clear();
 
@@ -537,7 +537,7 @@ bool wxDDEConnection::Disconnect()
     bool ok = DdeDisconnect(GetHConv()) != 0;
     if ( !ok )
     {
-        DDELogError(_T("Failed to disconnect from DDE server gracefully"));
+        DDELogError(wxT("Failed to disconnect from DDE server gracefully"));
     }
 
     SetConnected( false );  // so we don't try and disconnect again
@@ -566,7 +566,7 @@ bool wxDDEConnection::Execute(const wxCh
 
     if ( !ok )
     {
-        DDELogError(_T("DDE execute request failed"));
+        DDELogError(wxT("DDE execute request failed"));
     }
 
     return ok;
@@ -586,7 +586,7 @@ wxChar *wxDDEConnection::Request(const w
                                                   &result);
     if ( !returned_data )
     {
-        DDELogError(_T("DDE data request failed"));
+        DDELogError(wxT("DDE data request failed"));
 
         return NULL;
     }
@@ -595,7 +595,7 @@ wxChar *wxDDEConnection::Request(const w
 
     wxChar *data = GetBufferAtLeast( len );
     wxASSERT_MSG(data != NULL,
-                 _T("Buffer too small in wxDDEConnection::Request") );
+                 wxT("Buffer too small in wxDDEConnection::Request") );
     (void) DdeGetData(returned_data, (LPBYTE)data, len, 0);
 
     (void) DdeFreeDataHandle(returned_data);
@@ -777,7 +777,7 @@ _DDECallback(WORD wType,
 
                     wxChar *data = connection->GetBufferAtLeast( len );
                     wxASSERT_MSG(data != NULL,
-                                 _T("Buffer too small in _DDECallback (XTYP_EXECUTE)") );
+                                 wxT("Buffer too small in _DDECallback (XTYP_EXECUTE)") );
 
                     DdeGetData(hData, (LPBYTE)data, len, 0);
 
@@ -839,7 +839,7 @@ _DDECallback(WORD wType,
 
                     wxChar *data = connection->GetBufferAtLeast( len );
                     wxASSERT_MSG(data != NULL,
-                                 _T("Buffer too small in _DDECallback (XTYP_POKE)") );
+                                 wxT("Buffer too small in _DDECallback (XTYP_POKE)") );
 
                     DdeGetData(hData, (LPBYTE)data, len, 0);
 
@@ -926,7 +926,7 @@ _DDECallback(WORD wType,
 
                     wxChar *data = connection->GetBufferAtLeast( len );
                     wxASSERT_MSG(data != NULL,
-                                 _T("Buffer too small in _DDECallback (XTYP_ADVDATA)") );
+                                 wxT("Buffer too small in _DDECallback (XTYP_ADVDATA)") );
 
                     DdeGetData(hData, (LPBYTE)data, len, 0);
 
@@ -976,7 +976,7 @@ The returned handle has to be freed by t
 */
 static HSZ DDEAtomFromString(const wxString& s)
 {
-    wxASSERT_MSG( DDEIdInst, _T("DDE not initialized") );
+    wxASSERT_MSG( DDEIdInst, wxT("DDE not initialized") );
 
     HSZ hsz = DdeCreateStringHandle(DDEIdInst, (wxChar*) s.c_str(), DDE_CP);
     if ( !hsz )
@@ -1018,7 +1018,7 @@ static void DDELogError(const wxString& 
         error = DdeGetLastError(DDEIdInst);
     }
 
-    wxLogError(s + _T(": ") + DDEGetErrorMsg(error));
+    wxLogError(s + wxT(": ") + DDEGetErrorMsg(error));
 }
 
 static wxString DDEGetErrorMsg(UINT error)
--- src/msw/menu.cpp-orig	2009-06-18 20:06:27.207159000 -0500
+++ src/msw/menu.cpp	2009-06-18 20:06:39.729547000 -0500
@@ -498,14 +498,14 @@ bool wxMenu::DoInsertOrAppend(wxMenuItem
                     // the app from starting up under Windows 95/NT 4
                     typedef BOOL (WINAPI *SetMenuInfo_t)(HMENU, MENUINFO *);
 
-                    wxDynamicLibrary dllUser(_T("user32"));
+                    wxDynamicLibrary dllUser(wxT("user32"));
                     wxDYNLIB_FUNCTION(SetMenuInfo_t, SetMenuInfo, dllUser);
                     if ( pfnSetMenuInfo )
                     {
                         mi.fMask = MIM_STYLE;
                         mi.dwStyle = MNS_CHECKORBMP;
                         if ( !(*pfnSetMenuInfo)(GetHmenu(), &mi) )
-                            wxLogLastError(_T("SetMenuInfo(MNS_NOCHECK)"));
+                            wxLogLastError(wxT("SetMenuInfo(MNS_NOCHECK)"));
                     }
 
                     // tell the item that it's not really owner-drawn but only
@@ -572,7 +572,7 @@ void wxMenu::EndRadioGroup()
 
 wxMenuItem* wxMenu::DoAppend(wxMenuItem *item)
 {
-    wxCHECK_MSG( item, NULL, _T("NULL item in wxMenu::DoAppend") );
+    wxCHECK_MSG( item, NULL, wxT("NULL item in wxMenu::DoAppend") );
 
     bool check = false;
 
@@ -604,7 +604,7 @@ wxMenuItem* wxMenu::DoAppend(wxMenuItem 
             }
             else
             {
-                wxFAIL_MSG( _T("where is the radio group start item?") );
+                wxFAIL_MSG( wxT("where is the radio group start item?") );
             }
         }
     }
--- src/msw/tooltip.cpp-orig	2009-06-18 20:06:31.688855000 -0500
+++ src/msw/tooltip.cpp	2009-06-18 20:06:45.543793000 -0500
@@ -308,12 +308,12 @@ void wxToolTip::Add(WXHWND hWnd)
 
     if ( !SendTooltipMessage(GetToolTipCtrl(), TTM_ADDTOOL, &ti) )
     {
-        wxLogDebug(_T("Failed to create the tooltip '%s'"), m_text.c_str());
+        wxLogDebug(wxT("Failed to create the tooltip '%s'"), m_text.c_str());
     }
     else
     {
         // check for multiline toopltip
-        int index = m_text.Find(_T('\n'));
+        int index = m_text.Find(wxT('\n'));
 
         if ( index != wxNOT_FOUND )
         {
@@ -347,7 +347,7 @@ void wxToolTip::Add(WXHWND hWnd)
 
                 // find the width of the widest line
                 int max = 0;
-                wxStringTokenizer tokenizer(m_text, _T("\n"));
+                wxStringTokenizer tokenizer(m_text, wxT("\n"));
                 wxString token = tokenizer.GetNextToken();
                 while (token.length())
                 {
@@ -372,12 +372,12 @@ void wxToolTip::Add(WXHWND hWnd)
             {
                 // replace the '\n's with spaces because otherwise they appear as
                 // unprintable characters in the tooltip string
-                m_text.Replace(_T("\n"), _T(" "));
+                m_text.Replace(wxT("\n"), wxT(" "));
                 ti.lpszText = (wxChar *)m_text.c_str(); // const_cast
 
                 if ( !SendTooltipMessage(GetToolTipCtrl(), TTM_ADDTOOL, &ti) )
                 {
-                    wxLogDebug(_T("Failed to create the tooltip '%s'"), m_text.c_str());
+                    wxLogDebug(wxT("Failed to create the tooltip '%s'"), m_text.c_str());
                 }
             }
         }
@@ -415,7 +415,7 @@ void wxToolTip::SetWindow(wxWindow *win)
             }
 
             // must have it by now!
-            wxASSERT_MSG( hwnd, _T("no hwnd for subcontrol?") );
+            wxASSERT_MSG( hwnd, wxT("no hwnd for subcontrol?") );
 
             Add((WXHWND)hwnd);
         }
--- src/msw/menuitem.cpp-orig	2009-06-18 20:06:51.577406000 -0500
+++ src/msw/menuitem.cpp	2009-06-18 20:07:01.360049000 -0500
@@ -174,7 +174,7 @@ void wxMenuItem::Init()
         SetMarginWidth(GetMarginWidth());
 
     // tell the owner drawing code to show the accel string as well
-    SetAccelString(m_text.AfterFirst(_T('\t')));
+    SetAccelString(m_text.AfterFirst(wxT('\t')));
 #endif // wxUSE_OWNER_DRAWN
 }
 
@@ -223,7 +223,7 @@ void wxMenuItem::SetAsRadioGroupStart()
 void wxMenuItem::SetRadioGroupStart(int start)
 {
     wxASSERT_MSG( !m_isRadioGroupStart,
-                  _T("should only be called for the next radio items") );
+                  wxT("should only be called for the next radio items") );
 
     m_radioGroup.start = start;
 }
@@ -231,7 +231,7 @@ void wxMenuItem::SetRadioGroupStart(int 
 void wxMenuItem::SetRadioGroupEnd(int end)
 {
     wxASSERT_MSG( m_isRadioGroupStart,
-                  _T("should only be called for the first radio item") );
+                  wxT("should only be called for the first radio item") );
 
     m_radioGroup.end = end;
 }
@@ -276,7 +276,7 @@ void wxMenuItem::Check(bool check)
         const wxMenuItemList& items = m_parentMenu->GetMenuItems();
         int pos = items.IndexOf(this);
         wxCHECK_RET( pos != wxNOT_FOUND,
-                     _T("menuitem not found in the menu items list?") );
+                     wxT("menuitem not found in the menu items list?") );
 
         // get the radio group range
         int start,
@@ -300,7 +300,7 @@ void wxMenuItem::Check(bool check)
         // (NT4 SP6) and I suspect this could happen to the others as well - so
         // don't do it!
         wxCHECK_RET( start != -1 && end != -1,
-                     _T("invalid ::CheckMenuRadioItem() parameter(s)") );
+                     wxT("invalid ::CheckMenuRadioItem() parameter(s)") );
 
         if ( !::CheckMenuRadioItem(hmenu,
                                    start,   // the first radio group item
@@ -308,7 +308,7 @@ void wxMenuItem::Check(bool check)
                                    pos,     // the one to check
                                    MF_BYPOSITION) )
         {
-            wxLogLastError(_T("CheckMenuRadioItem"));
+            wxLogLastError(wxT("CheckMenuRadioItem"));
         }
 #endif // __WIN32__
 
@@ -330,7 +330,7 @@ void wxMenuItem::Check(bool check)
                              GetRealId(),
                              MF_BYCOMMAND | flags) == (DWORD)-1 )
         {
-            wxFAIL_MSG( _T("CheckMenuItem() failed, item not in the menu?") );
+            wxFAIL_MSG( wxT("CheckMenuItem() failed, item not in the menu?") );
         }
     }
 
@@ -354,7 +354,7 @@ void wxMenuItem::SetText(const wxString&
     OWNER_DRAWN_ONLY( wxOwnerDrawn::SetName(m_text) );
 #if wxUSE_OWNER_DRAWN
     // tell the owner drawing code to to show the accel string as well
-    SetAccelString(m_text.AfterFirst(_T('\t')));
+    SetAccelString(m_text.AfterFirst(wxT('\t')));
 #endif
 
     HMENU hMenu = GetHMenuOf(m_parentMenu);
--- src/msw/debughlp.cpp-orig	2009-06-18 20:07:07.578419000 -0500
+++ src/msw/debughlp.cpp	2009-06-18 20:07:15.277725000 -0500
@@ -66,10 +66,10 @@ static bool BindDbgHelpFunctions(const w
 {
     #define LOAD_SYM_FUNCTION(name)                                           \
         wxDbgHelpDLL::name = (wxDbgHelpDLL::name ## _t)                       \
-                                dllDbgHelp.GetSymbol(_T(#name));              \
+                                dllDbgHelp.GetSymbol(wxT(#name));              \
         if ( !wxDbgHelpDLL::name )                                            \
         {                                                                     \
-            gs_errMsg += _T("Function ") _T(#name) _T("() not found.\n");     \
+            gs_errMsg += wxT("Function ") wxT(#name) wxT("() not found.\n");     \
             return false;                                                     \
         }
 
@@ -83,7 +83,7 @@ static bool BindDbgHelpFunctions(const w
 // called by Init() if we hadn't done this before
 static bool DoInit()
 {
-    wxDynamicLibrary dllDbgHelp(_T("dbghelp.dll"), wxDL_VERBATIM);
+    wxDynamicLibrary dllDbgHelp(wxT("dbghelp.dll"), wxDL_VERBATIM);
     if ( dllDbgHelp.IsLoaded() )
     {
         if ( BindDbgHelpFunctions(dllDbgHelp) )
@@ -99,19 +99,19 @@ static bool DoInit()
             return true;
         }
 
-        gs_errMsg += _T("\nPlease update your dbghelp.dll version, ")
-                     _T("at least version 5.1 is needed!\n")
-                     _T("(if you already have a new version, please ")
-                     _T("put it in the same directory where the program is.)\n");
+        gs_errMsg += wxT("\nPlease update your dbghelp.dll version, ")
+                     wxT("at least version 5.1 is needed!\n")
+                     wxT("(if you already have a new version, please ")
+                     wxT("put it in the same directory where the program is.)\n");
     }
     else // failed to load dbghelp.dll
     {
-        gs_errMsg += _T("Please install dbghelp.dll available free of charge ")
-                     _T("from Microsoft to get more detailed crash information!");
+        gs_errMsg += wxT("Please install dbghelp.dll available free of charge ")
+                     wxT("from Microsoft to get more detailed crash information!");
     }
 
-    gs_errMsg += _T("\nLatest dbghelp.dll is available at ")
-                 _T("http://www.microsoft.com/whdc/ddk/debugging/\n");
+    gs_errMsg += wxT("\nLatest dbghelp.dll is available at ")
+                 wxT("http://www.microsoft.com/whdc/ddk/debugging/\n");
 
     return false;
 }
@@ -144,7 +144,7 @@ const wxString& wxDbgHelpDLL::GetErrorMe
 /* static */
 void wxDbgHelpDLL::LogError(const wxChar *func)
 {
-    ::OutputDebugString(wxString::Format(_T("dbghelp: %s() failed: %s\r\n"),
+    ::OutputDebugString(wxString::Format(wxT("dbghelp: %s() failed: %s\r\n"),
                         func, wxSysErrorMsg(::GetLastError())));
 }
 
@@ -212,12 +212,12 @@ wxDbgHelpDLL::DumpBaseType(BasicType bt,
 {
     if ( !pAddress )
     {
-        return _T("null");
+        return wxT("null");
     }
 
     if ( ::IsBadReadPtr(pAddress, length) != 0 )
     {
-        return _T("BAD");
+        return wxT("BAD");
     }
 
 
@@ -229,13 +229,13 @@ wxDbgHelpDLL::DumpBaseType(BasicType bt,
         const BYTE b = *(PBYTE)pAddress;
 
         if ( bt == BASICTYPE_BOOL )
-            s = b ? _T("true") : _T("false");
+            s = b ? wxT("true") : wxT("false");
         else
-            s.Printf(_T("%#04x"), b);
+            s.Printf(wxT("%#04x"), b);
     }
     else if ( length == 2 )
     {
-        s.Printf(bt == BASICTYPE_UINT ? _T("%#06x") : _T("%d"),
+        s.Printf(bt == BASICTYPE_UINT ? wxT("%#06x") : wxT("%d"),
                  *(PWORD)pAddress);
     }
     else if ( length == 4 )
@@ -244,7 +244,7 @@ wxDbgHelpDLL::DumpBaseType(BasicType bt,
 
         if ( bt == BASICTYPE_FLOAT )
         {
-            s.Printf(_T("%f"), *(PFLOAT)pAddress);
+            s.Printf(wxT("%f"), *(PFLOAT)pAddress);
 
             handled = true;
         }
@@ -256,12 +256,12 @@ wxDbgHelpDLL::DumpBaseType(BasicType bt,
             const char *pc = *(PSTR *)pAddress;
             if ( ::IsBadStringPtrA(pc, NUM_CHARS) == 0 )
             {
-                s += _T('"');
+                s += wxT('"');
                 for ( size_t n = 0; n < NUM_CHARS && *pc; n++, pc++ )
                 {
                     s += *pc;
                 }
-                s += _T('"');
+                s += wxT('"');
 
                 handled = true;
             }
@@ -270,18 +270,18 @@ wxDbgHelpDLL::DumpBaseType(BasicType bt,
         if ( !handled )
         {
             // treat just as an opaque DWORD
-            s.Printf(_T("%#x"), *(PDWORD)pAddress);
+            s.Printf(wxT("%#x"), *(PDWORD)pAddress);
         }
     }
     else if ( length == 8 )
     {
         if ( bt == BASICTYPE_FLOAT )
         {
-            s.Printf(_T("%lf"), *(double *)pAddress);
+            s.Printf(wxT("%lf"), *(double *)pAddress);
         }
         else // opaque 64 bit value
         {
-            s.Printf(_T("%#" wxLongLongFmtSpec _T("x")), *(PDWORD *)pAddress);
+            s.Printf(wxT("%#" wxLongLongFmtSpec wxT("x")), *(PDWORD *)pAddress);
         }
     }
 
@@ -315,7 +315,7 @@ wxDbgHelpDLL::DumpField(PSYMBOL_INFO pSy
         case SYMBOL_TAG_DATA:
             if ( !pVariable )
             {
-                s = _T("NULL");
+                s = wxT("NULL");
             }
             else // valid location
             {
@@ -364,14 +364,14 @@ wxDbgHelpDLL::DumpField(PSYMBOL_INFO pSy
 
             if ( !s.empty() )
             {
-                s = GetSymbolName(pSym) + _T(" = ") + s;
+                s = GetSymbolName(pSym) + wxT(" = ") + s;
             }
             break;
     }
 
     if ( !s.empty() )
     {
-        s = wxString(_T('\t'), level + 1) + s + _T('\n');
+        s = wxString(wxT('\t'), level + 1) + s + wxT('\n');
     }
 
     return s;
@@ -395,7 +395,7 @@ wxDbgHelpDLL::DumpUDT(PSYMBOL_INFO pSym,
     // special handling for ubiquitous wxString: although the code below works
     // for it as well, it shows the wxStringBase class and takes 4 lines
     // instead of only one as this branch
-    if ( s == _T("wxString") )
+    if ( s == wxT("wxString") )
     {
         wxString *ps = (wxString *)pVariable;
 
@@ -416,7 +416,7 @@ wxDbgHelpDLL::DumpUDT(PSYMBOL_INFO pSym,
             }
         }
 
-        s << _T("(\"") << (p ? p : _T("???")) << _T(")\"");
+        s << wxT("(\"") << (p ? p : wxT("???")) << wxT(")\"");
     }
     else // any other UDT
 #endif // !wxUSE_STL
@@ -442,7 +442,7 @@ wxDbgHelpDLL::DumpUDT(PSYMBOL_INFO pSym,
             return s;
         }
 
-        s << _T(" {\n");
+        s << wxT(" {\n");
 
         // Iterate through all children
         SYMBOL_INFO sym;
@@ -469,7 +469,7 @@ wxDbgHelpDLL::DumpUDT(PSYMBOL_INFO pSym,
 
         free(children);
 
-        s << wxString(_T('\t'), level + 1) << _T('}');
+        s << wxString(wxT('\t'), level + 1) << wxT('}');
     }
 
     return s;
@@ -550,37 +550,37 @@ static wxString TagString(wxDbgHelpDLL::
 {
     static const wxChar *tags[] =
     {
-        _T("null"),
-        _T("exe"),
-        _T("compiland"),
-        _T("compiland details"),
-        _T("compiland env"),
-        _T("function"),
-        _T("block"),
-        _T("data"),
-        _T("annotation"),
-        _T("label"),
-        _T("public symbol"),
-        _T("udt"),
-        _T("enum"),
-        _T("function type"),
-        _T("pointer type"),
-        _T("array type"),
-        _T("base type"),
-        _T("typedef"),
-        _T("base class"),
-        _T("friend"),
-        _T("function arg type"),
-        _T("func debug start"),
-        _T("func debug end"),
-        _T("using namespace"),
-        _T("vtable shape"),
-        _T("vtable"),
-        _T("custom"),
-        _T("thunk"),
-        _T("custom type"),
-        _T("managed type"),
-        _T("dimension"),
+        wxT("null"),
+        wxT("exe"),
+        wxT("compiland"),
+        wxT("compiland details"),
+        wxT("compiland env"),
+        wxT("function"),
+        wxT("block"),
+        wxT("data"),
+        wxT("annotation"),
+        wxT("label"),
+        wxT("public symbol"),
+        wxT("udt"),
+        wxT("enum"),
+        wxT("function type"),
+        wxT("pointer type"),
+        wxT("array type"),
+        wxT("base type"),
+        wxT("typedef"),
+        wxT("base class"),
+        wxT("friend"),
+        wxT("function arg type"),
+        wxT("func debug start"),
+        wxT("func debug end"),
+        wxT("using namespace"),
+        wxT("vtable shape"),
+        wxT("vtable"),
+        wxT("custom"),
+        wxT("thunk"),
+        wxT("custom type"),
+        wxT("managed type"),
+        wxT("dimension"),
     };
 
     wxCOMPILE_TIME_ASSERT( WXSIZEOF(tags) == wxDbgHelpDLL::SYMBOL_TAG_MAX,
@@ -590,7 +590,7 @@ static wxString TagString(wxDbgHelpDLL::
     if ( tag < WXSIZEOF(tags) )
         s = tags[tag];
     else
-        s.Printf(_T("unrecognized tag (%d)"), tag);
+        s.Printf(wxT("unrecognized tag (%d)"), tag);
 
     return s;
 }
@@ -599,16 +599,16 @@ static wxString KindString(wxDbgHelpDLL:
 {
     static const wxChar *kinds[] =
     {
-         _T("unknown"),
-         _T("local"),
-         _T("static local"),
-         _T("param"),
-         _T("object ptr"),
-         _T("file static"),
-         _T("global"),
-         _T("member"),
-         _T("static member"),
-         _T("constant"),
+         wxT("unknown"),
+         wxT("local"),
+         wxT("static local"),
+         wxT("param"),
+         wxT("object ptr"),
+         wxT("file static"),
+         wxT("global"),
+         wxT("member"),
+         wxT("static member"),
+         wxT("constant"),
     };
 
     wxCOMPILE_TIME_ASSERT( WXSIZEOF(kinds) == wxDbgHelpDLL::DATA_MAX,
@@ -618,7 +618,7 @@ static wxString KindString(wxDbgHelpDLL:
     if ( kind < WXSIZEOF(kinds) )
         s = kinds[kind];
     else
-        s.Printf(_T("unrecognized kind (%d)"), kind);
+        s.Printf(wxT("unrecognized kind (%d)"), kind);
 
     return s;
 }
@@ -627,9 +627,9 @@ static wxString UdtKindString(wxDbgHelpD
 {
     static const wxChar *kinds[] =
     {
-         _T("struct"),
-         _T("class"),
-         _T("union"),
+         wxT("struct"),
+         wxT("class"),
+         wxT("union"),
     };
 
     wxCOMPILE_TIME_ASSERT( WXSIZEOF(kinds) == wxDbgHelpDLL::UDT_MAX,
@@ -639,7 +639,7 @@ static wxString UdtKindString(wxDbgHelpD
     if ( kind < WXSIZEOF(kinds) )
         s = kinds[kind];
     else
-        s.Printf(_T("unrecognized UDT (%d)"), kind);
+        s.Printf(wxT("unrecognized UDT (%d)"), kind);
 
     return s;
 }
@@ -648,38 +648,38 @@ static wxString TypeString(wxDbgHelpDLL:
 {
     static const wxChar *types[] =
     {
-        _T("no type"),
-        _T("void"),
-        _T("char"),
-        _T("wchar"),
-        _T(""),
-        _T(""),
-        _T("int"),
-        _T("uint"),
-        _T("float"),
-        _T("bcd"),
-        _T("bool"),
-        _T(""),
-        _T(""),
-        _T("long"),
-        _T("ulong"),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T(""),
-        _T("CURRENCY"),
-        _T("DATE"),
-        _T("VARIANT"),
-        _T("complex"),
-        _T("bit"),
-        _T("BSTR"),
-        _T("HRESULT"),
+        wxT("no type"),
+        wxT("void"),
+        wxT("char"),
+        wxT("wchar"),
+        wxT(""),
+        wxT(""),
+        wxT("int"),
+        wxT("uint"),
+        wxT("float"),
+        wxT("bcd"),
+        wxT("bool"),
+        wxT(""),
+        wxT(""),
+        wxT("long"),
+        wxT("ulong"),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT(""),
+        wxT("CURRENCY"),
+        wxT("DATE"),
+        wxT("VARIANT"),
+        wxT("complex"),
+        wxT("bit"),
+        wxT("BSTR"),
+        wxT("HRESULT"),
     };
 
     wxCOMPILE_TIME_ASSERT( WXSIZEOF(types) == wxDbgHelpDLL::BASICTYPE_MAX,
@@ -690,7 +690,7 @@ static wxString TypeString(wxDbgHelpDLL:
         s = types[bt];
 
     if ( s.empty() )
-        s.Printf(_T("unrecognized type (%d)"), bt);
+        s.Printf(wxT("unrecognized type (%d)"), bt);
 
     return s;
 }
@@ -707,11 +707,11 @@ extern "C" void DumpTI(ULONG ti)
     DoGetTypeInfo(&sym, TI_GET_SYMTAG, &tag);
     DoGetTypeInfo(&sym, TI_GET_TYPEID, &ti);
 
-    OutputDebugString(wxString::Format(_T("Type 0x%x: "), sym.TypeIndex));
+    OutputDebugString(wxString::Format(wxT("Type 0x%x: "), sym.TypeIndex));
     wxString name = wxDbgHelpDLL::GetSymbolName(&sym);
     if ( !name.empty() )
     {
-        OutputDebugString(wxString::Format(_T("name=\"%s\", "), name.c_str()));
+        OutputDebugString(wxString::Format(wxT("name=\"%s\", "), name.c_str()));
     }
 
     DWORD nested;
@@ -720,15 +720,15 @@ extern "C" void DumpTI(ULONG ti)
         nested = FALSE;
     }
 
-    OutputDebugString(wxString::Format(_T("tag=%s%s"),
-                      nested ? _T("nested ") : wxEmptyString,
+    OutputDebugString(wxString::Format(wxT("tag=%s%s"),
+                      nested ? wxT("nested ") : wxEmptyString,
                       TagString(tag).c_str()));
     if ( tag == wxDbgHelpDLL::SYMBOL_TAG_UDT )
     {
         wxDbgHelpDLL::UdtKind udtKind;
         if ( DoGetTypeInfo(&sym, TI_GET_UDTKIND, &udtKind) )
         {
-            OutputDebugString(_T(" (") + UdtKindString(udtKind) + _T(')'));
+            OutputDebugString(wxT(" (") + UdtKindString(udtKind) + wxT(')'));
         }
     }
 
@@ -736,13 +736,13 @@ extern "C" void DumpTI(ULONG ti)
     if ( DoGetTypeInfo(&sym, TI_GET_DATAKIND, &kind) )
     {
         OutputDebugString(wxString::Format(
-            _T(", kind=%s"), KindString(kind).c_str()));
+            wxT(", kind=%s"), KindString(kind).c_str()));
         if ( kind == wxDbgHelpDLL::DATA_MEMBER )
         {
             DWORD ofs = 0;
             if ( DoGetTypeInfo(&sym, TI_GET_OFFSET, &ofs) )
             {
-                OutputDebugString(wxString::Format(_T(" (ofs=0x%x)"), ofs));
+                OutputDebugString(wxString::Format(wxT(" (ofs=0x%x)"), ofs));
             }
         }
     }
@@ -750,16 +750,16 @@ extern "C" void DumpTI(ULONG ti)
     wxDbgHelpDLL::BasicType bt = GetBasicType(&sym);
     if ( bt )
     {
-        OutputDebugString(wxString::Format(_T(", type=%s"),
+        OutputDebugString(wxString::Format(wxT(", type=%s"),
                                 TypeString(bt).c_str()));
     }
 
     if ( ti != sym.TypeIndex )
     {
-        OutputDebugString(wxString::Format(_T(", next ti=0x%x"), ti));
+        OutputDebugString(wxString::Format(wxT(", next ti=0x%x"), ti));
     }
 
-    OutputDebugString(_T("\r\n"));
+    OutputDebugString(wxT("\r\n"));
 }
 
 #endif // NDEBUG
--- src/msw/button.cpp-orig	2009-06-18 20:07:20.830425000 -0500
+++ src/msw/button.cpp	2009-06-18 20:07:30.529314000 -0500
@@ -187,13 +187,13 @@ bool wxButton::Create(wxWindow *parent,
     // NB: we do it here and not in MSWGetStyle() because we need the label
     //     value and m_label is not set yet when MSWGetStyle() is called;
     //     besides changing BS_MULTILINE during run-time is pointless anyhow
-    if ( label.find(_T('\n')) != wxString::npos )
+    if ( label.find(wxT('\n')) != wxString::npos )
     {
         msStyle |= BS_MULTILINE;
     }
 #endif // __WIN32__
 
-    return MSWCreateControl(_T("BUTTON"), msStyle, pos, size, label, exstyle);
+    return MSWCreateControl(wxT("BUTTON"), msStyle, pos, size, label, exstyle);
 }
 
 wxButton::~wxButton()
@@ -347,7 +347,7 @@ void wxButton::SetDefault()
 {
     wxTopLevelWindow *tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
 
-    wxCHECK_RET( tlw, _T("button without top level window?") );
+    wxCHECK_RET( tlw, wxT("button without top level window?") );
 
     // set this one as the default button both for wxWidgets ...
     wxWindow *winOldDefault = tlw->SetDefaultItem(this);
@@ -377,10 +377,10 @@ static wxTopLevelWindow *GetTLWParentIfN
         win = parent;
     }
 
-    wxASSERT_MSG( win, _T("button without top level parent?") );
+    wxASSERT_MSG( win, wxT("button without top level parent?") );
 
     wxTopLevelWindow * const tlw = wxDynamicCast(win, wxTopLevelWindow);
-    wxASSERT_MSG( tlw, _T("logic error in GetTLWParentIfNotBeingDeleted()") );
+    wxASSERT_MSG( tlw, wxT("logic error in GetTLWParentIfNotBeingDeleted()") );
 
     return tlw;
 }
@@ -432,7 +432,7 @@ wxButton::SetDefaultStyle(wxButton *btn,
             return;
 
         wxWindow * const tlw = wxGetTopLevelParent(btn);
-        wxCHECK_RET( tlw, _T("button without top level window?") );
+        wxCHECK_RET( tlw, wxT("button without top level window?") );
 
         ::SendMessage(GetHwndOf(tlw), DM_SETDEFID, btn->GetId(), 0L);
 
@@ -574,7 +574,7 @@ static void DrawButtonText(HDC hdc,
     COLORREF colOld = SetTextColor(hdc, col);
     int modeOld = SetBkMode(hdc, TRANSPARENT);
 
-    if ( text.find(_T('\n')) != wxString::npos )
+    if ( text.find(wxT('\n')) != wxString::npos )
     {
         // draw multiline label
 
--- src/msw/listbox.cpp-orig	2009-06-18 20:07:25.133729000 -0500
+++ src/msw/listbox.cpp	2009-06-18 20:07:39.493523000 -0500
@@ -164,7 +164,7 @@ bool wxListBox::Create(wxWindow *parent,
         return false;
 
     // create the native control
-    if ( !MSWCreateControl(_T("LISTBOX"), wxEmptyString, pos, size) )
+    if ( !MSWCreateControl(wxT("LISTBOX"), wxEmptyString, pos, size) )
     {
         // control creation failed
         return false;
@@ -217,7 +217,7 @@ WXDWORD wxListBox::MSWGetStyle(long styl
     msStyle |= LBS_NOINTEGRALHEIGHT;
 
     wxASSERT_MSG( !(style & wxLB_MULTIPLE) || !(style & wxLB_EXTENDED),
-                  _T("only one of listbox selection modes can be specified") );
+                  wxT("only one of listbox selection modes can be specified") );
 
     if ( style & wxLB_MULTIPLE )
         msStyle |= LBS_MULTIPLESEL;
@@ -453,7 +453,7 @@ int wxListBox::GetSelections(wxArrayInt&
         int countSel = ListBox_GetSelCount(GetHwnd());
         if ( countSel == LB_ERR )
         {
-            wxLogDebug(_T("ListBox_GetSelCount failed"));
+            wxLogDebug(wxT("ListBox_GetSelCount failed"));
         }
         else if ( countSel != 0 )
         {
--- src/msw/metafile.cpp-orig	2009-06-18 20:07:44.781678000 -0500
+++ src/msw/metafile.cpp	2009-06-18 20:07:49.341685000 -0500
@@ -127,7 +127,7 @@ bool wxMetafile::Play(wxDC *dc)
         if ( !::PlayMetaFile(GetHdcOf(*dc), (HMETAFILE)
                              M_METAFILEDATA->m_metafile) )
         {
-            wxLogLastError(_T("PlayMetaFile"));
+            wxLogLastError(wxT("PlayMetaFile"));
         }
     }
 
@@ -255,7 +255,7 @@ void wxMetafileDC::GetTextExtent(const w
 
 void wxMetafileDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_refData, _T("invalid wxMetafileDC") );
+    wxCHECK_RET( m_refData, wxT("invalid wxMetafileDC") );
 
     if ( width )
         *width = M_METAFILEDATA->m_width;
@@ -393,12 +393,12 @@ bool wxMakeMetafilePlaceable(const wxStr
             p < (WORD *)&pMFHead ->checksum; ++p)
         pMFHead ->checksum ^= *p;
 
-    FILE *fd = wxFopen(filename.fn_str(), _T("rb"));
+    FILE *fd = wxFopen(filename.fn_str(), wxT("rb"));
     if (!fd) return false;
 
     wxChar tempFileBuf[256];
     wxGetTempFileName(wxT("mf"), tempFileBuf);
-    FILE *fHandle = wxFopen(wxFNCONV(tempFileBuf), _T("wb"));
+    FILE *fHandle = wxFopen(wxFNCONV(tempFileBuf), wxT("wb"));
     if (!fHandle)
         return false;
     fwrite((void *)&header, sizeof(unsigned char), sizeof(mfPLACEABLEHEADER), fHandle);
@@ -485,7 +485,7 @@ bool wxMetafileDataObject::GetDataHere(v
     METAFILEPICT *mfpict = (METAFILEPICT *)buf;
     const wxMetafile& mf = GetMetafile();
 
-    wxCHECK_MSG( mf.GetHMETAFILE(), false, _T("copying invalid metafile") );
+    wxCHECK_MSG( mf.GetHMETAFILE(), false, wxT("copying invalid metafile") );
 
     // doesn't seem to work with any other mapping mode...
     mfpict->mm   = MM_ANISOTROPIC; //mf.GetWindowsMappingMode();
@@ -521,7 +521,7 @@ bool wxMetafileDataObject::SetData(size_
     mf.SetHeight(h);
     mf.SetHMETAFILE((WXHANDLE)mfpict->hMF);
 
-    wxCHECK_MSG( mfpict->hMF, false, _T("pasting invalid metafile") );
+    wxCHECK_MSG( mfpict->hMF, false, wxT("pasting invalid metafile") );
 
     SetMetafile(mf);
 
--- src/msw/mediactrl_wmp10.cpp-orig	2009-06-18 20:07:58.493445000 -0500
+++ src/msw/mediactrl_wmp10.cpp	2009-06-18 20:08:06.404944000 -0500
@@ -823,7 +823,7 @@ bool wxWMP10MediaBackend::CreateControl(
     ::GetClientRect((HWND)ctrl->GetHandle(), &rcClient);
     m_wndView.Create((HWND)ctrl->GetHandle(), rcClient, NULL, WS_CHILD | WS_VISIBLE | WS_CLIPCHILDREN, WS_EX_CLIENTEDGE);
     hr = m_wndView.QueryHost(&spHost);
-    hr = spHost->CreateControl(CComBSTR(_T("{6BF52A52-394A-11d3-B153-00C04F79FAA6}")), m_wndView, 0);
+    hr = spHost->CreateControl(CComBSTR(wxT("{6BF52A52-394A-11d3-B153-00C04F79FAA6}")), m_wndView, 0);
     hr = m_wndView.QueryControl(&m_pWMPPlayer);
 
     if( m_pWMPPlayer->get_settings(&m_pWMPSettings) != 0)
@@ -1470,7 +1470,7 @@ bool wxWinCEExecute(const wxString& path
 {
     WinStruct<SHELLEXECUTEINFO> sei;
     sei.lpFile = path.c_str();
-    sei.lpVerb = _T("open");
+    sei.lpVerb = wxT("open");
     sei.nShow = nShowStyle;
 
     ::ShellExecuteEx(&sei);
--- src/msw/radiobox.cpp-orig	2009-06-18 20:08:11.730798000 -0500
+++ src/msw/radiobox.cpp	2009-06-18 20:08:17.879649000 -0500
@@ -174,7 +174,7 @@ bool wxRadioBox::Create(wxWindow *parent
 
         long newId = NewControlId();
 
-        HWND hwndBtn = ::CreateWindow(_T("BUTTON"),
+        HWND hwndBtn = ::CreateWindow(wxT("BUTTON"),
                                       choices[i],
                                       styleBtn,
                                       0, 0, 0, 0,   // will be set in SetSize()
@@ -198,7 +198,7 @@ bool wxRadioBox::Create(wxWindow *parent
     }
 
     // Create a dummy radio control to end the group.
-    (void)::CreateWindow(_T("BUTTON"),
+    (void)::CreateWindow(wxT("BUTTON"),
                          wxEmptyString,
                          WS_GROUP | BS_AUTORADIOBUTTON | WS_CHILD,
                          0, 0, 0, 0, GetHwndOf(parent),
--- src/msw/icon.cpp-orig	2009-06-18 20:08:21.999391000 -0500
+++ src/msw/icon.cpp	2009-06-18 20:08:26.063841000 -0500
@@ -86,7 +86,7 @@ wxIcon::wxIcon(const wxIconLocation& loc
     wxString fullname = loc.GetFileName();
     if ( loc.GetIndex() )
     {
-        fullname << _T(';') << loc.GetIndex();
+        fullname << wxT(';') << loc.GetIndex();
     }
     //else: 0 is default
 
--- src/msw/slider95.cpp-orig	2009-06-18 20:08:33.063390000 -0500
+++ src/msw/slider95.cpp	2009-06-18 20:08:37.849426000 -0500
@@ -183,7 +183,7 @@ wxSlider::Create(wxWindow *parent,
     };
 
     wxASSERT_MSG( !(style & wxSL_VERTICAL) || !(style & wxSL_HORIZONTAL),
-                    _T("incompatible slider direction and orientation") );
+                    wxT("incompatible slider direction and orientation") );
 
 
     // initialize everything
--- src/msw/mediactrl_am.cpp-orig	2009-06-18 20:08:45.536194000 -0500
+++ src/msw/mediactrl_am.cpp	2009-06-18 20:08:52.860579000 -0500
@@ -1609,7 +1609,7 @@ bool wxAMMediaBackend::CreateControl(wxC
     // First get the AMGetErrorText procedure in debug
     // mode for more meaningful messages
 #ifdef __WXDEBUG__
-    if ( m_dllQuartz.Load(_T("quartz.dll"), wxDL_VERBATIM) )
+    if ( m_dllQuartz.Load(wxT("quartz.dll"), wxDL_VERBATIM) )
     {
         m_lpAMGetErrorText = (LPAMGETERRORTEXT)
                                 m_dllQuartz.GetSymbolAorW(wxT("AMGetErrorText"));
--- src/msw/imaglist.cpp-orig	2009-06-18 20:08:57.764147000 -0500
+++ src/msw/imaglist.cpp	2009-06-18 20:09:04.567356000 -0500
@@ -117,7 +117,7 @@ wxImageList::~wxImageList()
 // Returns the number of images in the image list.
 int wxImageList::GetImageCount() const
 {
-    wxASSERT_MSG( m_hImageList, _T("invalid image list") );
+    wxASSERT_MSG( m_hImageList, wxT("invalid image list") );
 
     return ImageList_GetImageCount(GetHImageList());
 }
@@ -125,7 +125,7 @@ int wxImageList::GetImageCount() const
 // Returns the size (same for all images) of the images in the list
 bool wxImageList::GetSize(int WXUNUSED(index), int &width, int &height) const
 {
-    wxASSERT_MSG( m_hImageList, _T("invalid image list") );
+    wxASSERT_MSG( m_hImageList, wxT("invalid image list") );
 
     return ImageList_GetIconSize(GetHImageList(), &width, &height) != 0;
 }
@@ -242,7 +242,7 @@ bool wxImageList::Draw(int index,
                        bool solidBackground)
 {
     HDC hDC = GetHdcOf(dc);
-    wxCHECK_MSG( hDC, false, _T("invalid wxDC in wxImageList::Draw") );
+    wxCHECK_MSG( hDC, false, wxT("invalid wxDC in wxImageList::Draw") );
 
     COLORREF clr = CLR_NONE;    // transparent by default
     if ( solidBackground )
--- src/msw/glcanvas.cpp-orig	2009-06-18 20:09:12.760194000 -0500
+++ src/msw/glcanvas.cpp	2009-06-18 20:09:19.285147000 -0500
@@ -457,11 +457,11 @@ void wxGLCanvas::SetupPixelFormat(int *a
 
   int pixelFormat = ChoosePixelFormat((HDC) m_hDC, &pfd);
   if (pixelFormat == 0) {
-    wxLogLastError(_T("ChoosePixelFormat"));
+    wxLogLastError(wxT("ChoosePixelFormat"));
   }
   else {
     if ( !::SetPixelFormat((HDC) m_hDC, pixelFormat, &pfd) ) {
-      wxLogLastError(_T("SetPixelFormat"));
+      wxLogLastError(wxT("SetPixelFormat"));
     }
   }
 }
@@ -551,7 +551,7 @@ void wxGLCanvas::SetCurrent(const wxGLCo
     // although on MSW it works even if the window is still hidden, it doesn't
   	// under wxGTK and documentation mentions that SetCurrent() can only be
   	// called for a shown window, so check it
-  	wxASSERT_MSG( GetParent()->IsShown(), _T("can't make hidden GL canvas current") );
+  	wxASSERT_MSG( GetParent()->IsShown(), wxT("can't make hidden GL canvas current") );
 
     RC.SetCurrent(*this);
 }
@@ -562,7 +562,7 @@ void wxGLCanvas::SetCurrent()
   // under wxGTK and documentation mentions that SetCurrent() can only be
   // called for a shown window, so check it
   wxASSERT_MSG( GetParent()->IsShown(),
-                    _T("can't make hidden GL canvas current") );
+                    wxT("can't make hidden GL canvas current") );
 
   if (m_glContext)
   {
--- src/msw/stdpaths.cpp-orig	2009-06-18 20:09:25.701909000 -0500
+++ src/msw/stdpaths.cpp	2009-06-18 20:09:35.550563000 -0500
@@ -50,7 +50,7 @@ typedef HRESULT (WINAPI *SHGetSpecialFol
 // ----------------------------------------------------------------------------
 
 // used in our wxLogTrace messages
-#define TRACE_MASK _T("stdpaths")
+#define TRACE_MASK wxT("stdpaths")
 
 #ifndef CSIDL_APPDATA
     #define CSIDL_APPDATA         0x001a
@@ -113,16 +113,16 @@ static void ResolveShellFunctions()
 
     // start with the newest functions, fall back to the oldest ones
 #ifdef __WXWINCE__
-    wxString shellDllName(_T("coredll"));
+    wxString shellDllName(wxT("coredll"));
 #else
     // first check for SHGetFolderPath (shell32.dll 5.0)
-    wxString shellDllName(_T("shell32"));
+    wxString shellDllName(wxT("shell32"));
 #endif
 
     wxDynamicLibrary dllShellFunctions( shellDllName );
     if ( !dllShellFunctions.IsLoaded() )
     {
-        wxLogTrace(TRACE_MASK, _T("Failed to load %s.dll"), shellDllName.c_str() );
+        wxLogTrace(TRACE_MASK, wxT("Failed to load %s.dll"), shellDllName.c_str() );
     }
 
     // don't give errors if the functions are unavailable, we're ready to deal
@@ -139,14 +139,14 @@ static void ResolveShellFunctions()
     static const char UNICODE_SUFFIX = 'A';
 #endif // Unicode/!Unicode
 
-    wxString funcname(_T("SHGetFolderPath"));
+    wxString funcname(wxT("SHGetFolderPath"));
     gs_shellFuncs.pSHGetFolderPath =
         (SHGetFolderPath_t)dllShellFunctions.GetSymbol(funcname + UNICODE_SUFFIX);
 
     // then for SHGetSpecialFolderPath (shell32.dll 4.71)
     if ( !gs_shellFuncs.pSHGetFolderPath )
     {
-        funcname = _T("SHGetSpecialFolderPath");
+        funcname = wxT("SHGetSpecialFolderPath");
         gs_shellFuncs.pSHGetSpecialFolderPath = (SHGetSpecialFolderPath_t)
             dllShellFunctions.GetSymbol(funcname + UNICODE_SUFFIX);
     }
@@ -257,7 +257,7 @@ wxString wxStandardPaths::GetAppDir()
     {
         lastdir = fn.GetDirs().Last();
         lastdir.MakeLower();
-        if ( lastdir.Matches(_T("debug*")) || lastdir.Matches(_T("vc_msw*")) )
+        if ( lastdir.Matches(wxT("debug*")) || lastdir.Matches(wxT("vc_msw*")) )
             fn.RemoveLastDir();
     }
 #endif // __WXDEBUG__
@@ -325,7 +325,7 @@ wxString wxStandardPathsWin16::GetConfig
 #ifndef __WXWINCE__
     if ( !::GetWindowsDirectory(wxStringBuffer(dir, MAX_PATH), MAX_PATH) )
     {
-        wxLogLastError(_T("GetWindowsDirectory"));
+        wxLogLastError(wxT("GetWindowsDirectory"));
     }
 #else
     // TODO: use CSIDL_WINDOWS (eVC4, possibly not eVC3)
--- src/msw/statbr95.cpp-orig	2009-06-18 20:09:41.793610000 -0500
+++ src/msw/statbr95.cpp	2009-06-18 20:09:50.760325000 -0500
@@ -145,7 +145,7 @@ wxStatusBar95::~wxStatusBar95()
 void wxStatusBar95::SetFieldsCount(int nFields, const int *widths)
 {
     // this is a Windows limitation
-    wxASSERT_MSG( (nFields > 0) && (nFields < 255), _T("too many fields") );
+    wxASSERT_MSG( (nFields > 0) && (nFields < 255), wxT("too many fields") );
 
     wxStatusBarBase::SetFieldsCount(nFields, widths);
 
@@ -190,7 +190,7 @@ void wxStatusBar95::SetFieldsWidth()
 void wxStatusBar95::SetStatusText(const wxString& strText, int nField)
 {
     wxCHECK_RET( (nField >= 0) && (nField < m_nFields),
-                 _T("invalid statusbar field index") );
+                 wxT("invalid statusbar field index") );
 
     if ( strText == GetStatusText(nField) )
     {
@@ -230,7 +230,7 @@ void wxStatusBar95::SetStatusText(const 
 wxString wxStatusBar95::GetStatusText(int nField) const
 {
     wxCHECK_MSG( (nField >= 0) && (nField < m_nFields), wxEmptyString,
-                 _T("invalid statusbar field index") );
+                 wxT("invalid statusbar field index") );
 
     wxString str;
     int len = StatusBar_GetTextLen(GetHwnd(), nField);
@@ -269,7 +269,7 @@ void wxStatusBar95::SetMinHeight(int hei
 bool wxStatusBar95::GetFieldRect(int i, wxRect& rect) const
 {
     wxCHECK_MSG( (i >= 0) && (i < m_nFields), false,
-                 _T("invalid statusbar field index") );
+                 wxT("invalid statusbar field index") );
 
     RECT r;
     if ( !::SendMessage(GetHwnd(), SB_GETRECT, i, (LPARAM)&r) )
--- src/msw/dragimag.cpp-orig	2009-06-18 20:10:00.882088000 -0500
+++ src/msw/dragimag.cpp	2009-06-18 20:10:04.882244000 -0500
@@ -281,7 +281,7 @@ bool wxDragImage::BeginDrag(const wxPoin
 
     if (!ret)
     {
-        wxFAIL_MSG( _T("BeginDrag failed.") );
+        wxFAIL_MSG( wxT("BeginDrag failed.") );
 
         return false;
     }
--- src/msw/spinctrl.cpp-orig	2009-06-18 20:10:10.671156000 -0500
+++ src/msw/spinctrl.cpp	2009-06-18 20:10:19.834973000 -0500
@@ -208,7 +208,7 @@ wxSpinCtrl *wxSpinCtrl::GetSpinForTextCt
 
     // sanity check
     wxASSERT_MSG( spin->m_hwndBuddy == hwndBuddy,
-                  _T("wxSpinCtrl has incorrect buddy HWND!") );
+                  wxT("wxSpinCtrl has incorrect buddy HWND!") );
 
     return spin;
 }
@@ -347,7 +347,7 @@ bool wxSpinCtrl::Create(wxWindow *parent
     sizeText.x -= sizeBtn.x + MARGIN_BETWEEN;
     if ( sizeText.x <= 0 )
     {
-        wxLogDebug(_T("not enough space for wxSpinCtrl!"));
+        wxLogDebug(wxT("not enough space for wxSpinCtrl!"));
     }
 
     wxPoint posBtn(pos);
@@ -364,7 +364,7 @@ bool wxSpinCtrl::Create(wxWindow *parent
     m_hwndBuddy = (WXHWND)::CreateWindowEx
                     (
                      exStyle,                // sunken border
-                     _T("EDIT"),             // window class
+                     wxT("EDIT"),             // window class
                      NULL,                   // no window title
                      msStyle,                // style (will be shown later)
                      pos.x, pos.y,           // position
@@ -478,7 +478,7 @@ void  wxSpinCtrl::SetValue(int val)
         // text control is currently empty, the spin button seems to be happy
         // to leave it like this, while we really want to always show the
         // current value in the control, so do it manually
-        ::SetWindowText(GetBuddyHwnd(), wxString::Format(_T("%d"), val));
+        ::SetWindowText(GetBuddyHwnd(), wxString::Format(wxT("%d"), val));
     }
 
     m_oldValue = GetValue();
@@ -668,7 +668,7 @@ void wxSpinCtrl::DoMoveWindow(int x, int
     int widthText = width - widthBtn - MARGIN_BETWEEN;
     if ( widthText <= 0 )
     {
-        wxLogDebug(_T("not enough space for wxSpinCtrl!"));
+        wxLogDebug(wxT("not enough space for wxSpinCtrl!"));
     }
 
     // 1) The buddy window
--- src/msw/crashrpt.cpp-orig	2009-06-18 20:10:25.755949000 -0500
+++ src/msw/crashrpt.cpp	2009-06-18 20:10:32.775772000 -0500
@@ -81,7 +81,7 @@ private:
     void Output(const wxChar *format, ...);
 
     // output end of line
-    void OutputEndl() { Output(_T("\r\n")); }
+    void OutputEndl() { Output(wxT("\r\n")); }
 
     // the handle of the report file
     HANDLE m_hFile;
@@ -146,7 +146,7 @@ bool wxCrashReportImpl::Generate(int fla
 
     if ( !ep )
     {
-        Output(_T("Context for crash report generation not available."));
+        Output(wxT("Context for crash report generation not available."));
         return false;
     }
 
@@ -158,14 +158,14 @@ bool wxCrashReportImpl::Generate(int fla
     TCHAR envFlags[64];
     DWORD dwLen = ::GetEnvironmentVariable
                     (
-                        _T("WX_CRASH_FLAGS"),
+                        wxT("WX_CRASH_FLAGS"),
                         envFlags,
                         WXSIZEOF(envFlags)
                     );
 
     int flagsEnv;
     if ( dwLen && dwLen < WXSIZEOF(envFlags) &&
-            wxSscanf(envFlags, _T("%d"), &flagsEnv) == 1 )
+            wxSscanf(envFlags, wxT("%d"), &flagsEnv) == 1 )
     {
         flags = flagsEnv;
     }
@@ -216,7 +216,7 @@ bool wxCrashReportImpl::Generate(int fla
                 NULL                        // no callbacks
               ) )
         {
-            Output(_T("MiniDumpWriteDump() failed."));
+            Output(wxT("MiniDumpWriteDump() failed."));
 
             return false;
         }
@@ -231,8 +231,8 @@ bool wxCrashReportImpl::Generate(int fla
     wxUnusedVar(flags);
     wxUnusedVar(ep);
 
-    Output(_T("Support for crash report generation was not included ")
-           _T("in this wxWidgets version."));
+    Output(wxT("Support for crash report generation was not included ")
+           wxT("in this wxWidgets version."));
 #endif // wxUSE_DBGHELP/!wxUSE_DBGHELP
 
     return false;
@@ -246,7 +246,7 @@ bool wxCrashReportImpl::Generate(int fla
 void wxCrashReport::SetFileName(const wxChar *filename)
 {
     wxStrncpy(gs_reportFilename, filename, WXSIZEOF(gs_reportFilename) - 1);
-    gs_reportFilename[WXSIZEOF(gs_reportFilename) - 1] = _T('\0');
+    gs_reportFilename[WXSIZEOF(gs_reportFilename) - 1] = wxT('\0');
 }
 
 /* static */
@@ -291,7 +291,7 @@ wxCrashContext::wxCrashContext(_EXCEPTIO
 
     if ( !ep )
     {
-        wxCHECK_RET( wxGlobalSEInformation, _T("no exception info available") );
+        wxCHECK_RET( wxGlobalSEInformation, wxT("no exception info available") );
         ep = wxGlobalSEInformation;
     }
 
@@ -329,7 +329,7 @@ wxString wxCrashContext::GetExceptionStr
 {
     wxString s;
 
-    #define CASE_EXCEPTION( x ) case EXCEPTION_##x: s = _T(#x); break
+    #define CASE_EXCEPTION( x ) case EXCEPTION_##x: s = wxT(#x); break
 
     switch ( code )
     {
@@ -362,7 +362,7 @@ wxString wxCrashContext::GetExceptionStr
                     (
                      FORMAT_MESSAGE_IGNORE_INSERTS |
                      FORMAT_MESSAGE_FROM_HMODULE,
-                     ::GetModuleHandle(_T("NTDLL.DLL")),
+                     ::GetModuleHandle(wxT("NTDLL.DLL")),
                      code,
                      0,
                      wxStringBuffer(s, 1024),
@@ -370,7 +370,7 @@ wxString wxCrashContext::GetExceptionStr
                      0
                     ) )
             {
-                s.Printf(_T("UNKNOWN_EXCEPTION(%d)"), code);
+                s.Printf(wxT("UNKNOWN_EXCEPTION(%d)"), code);
             }
     }
 
--- src/msw/timer.cpp-orig	2009-06-18 20:10:35.936501000 -0500
+++ src/msw/timer.cpp	2009-06-18 20:10:39.405747000 -0500
@@ -139,7 +139,7 @@ void wxTimer::Stop()
 
 void wxProcessTimer(wxTimer& timer)
 {
-    wxASSERT_MSG( timer.m_id != 0, _T("bogus timer id") );
+    wxASSERT_MSG( timer.m_id != 0, wxT("bogus timer id") );
 
     if ( timer.IsOneShot() )
         timer.Stop();
--- src/msw/fontutil.cpp-orig	2009-06-18 20:10:45.105095000 -0500
+++ src/msw/fontutil.cpp	2009-06-18 20:10:53.802020000 -0500
@@ -56,7 +56,7 @@
 
 bool wxNativeEncodingInfo::FromString(const wxString& s)
 {
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     wxString encid = tokenizer.GetNextToken();
 
@@ -95,7 +95,7 @@ bool wxNativeEncodingInfo::FromString(co
     }
     else
     {
-        if ( wxSscanf(tmp, _T("%u"), &charset) != 1 )
+        if ( wxSscanf(tmp, wxT("%u"), &charset) != 1 )
         {
             // should be a number!
             return false;
@@ -119,12 +119,12 @@ wxString wxNativeEncodingInfo::ToString(
       // we don't have any choice but to use the raw value
       << (long)encoding
 #endif // wxUSE_FONTMAP/!wxUSE_FONTMAP
-      << _T(';') << facename;
+      << wxT(';') << facename;
 
     // ANSI_CHARSET is assumed anyhow
     if ( charset != ANSI_CHARSET )
     {
-         s << _T(';') << charset;
+         s << wxT(';') << charset;
     }
 
     return s;
@@ -137,7 +137,7 @@ wxString wxNativeEncodingInfo::ToString(
 bool wxGetNativeFontEncoding(wxFontEncoding encoding,
                              wxNativeEncodingInfo *info)
 {
-    wxCHECK_MSG( info, false, _T("bad pointer in wxGetNativeFontEncoding") );
+    wxCHECK_MSG( info, false, wxT("bad pointer in wxGetNativeFontEncoding") );
 
     if ( encoding == wxFONTENCODING_DEFAULT )
     {
@@ -186,7 +186,7 @@ wxFontEncoding wxGetFontEncFromCharSet(i
     switch ( cs )
     {
         default:
-            wxFAIL_MSG( _T("unexpected Win32 charset") );
+            wxFAIL_MSG( wxT("unexpected Win32 charset") );
             // fall through and assume the system charset
 
         case DEFAULT_CHARSET:
--- src/msw/uxtheme.cpp-orig	2009-06-18 20:10:58.782829000 -0500
+++ src/msw/uxtheme.cpp	2009-06-18 20:11:03.781432000 -0500
@@ -113,11 +113,11 @@ bool wxUxThemeEngine::Initialize()
     // we're prepared to handle the errors
     wxLogNull noLog;
 
-    if ( !m_dllUxTheme.Load(_T("uxtheme.dll")) )
+    if ( !m_dllUxTheme.Load(wxT("uxtheme.dll")) )
         return false;
 
 #define RESOLVE_UXTHEME_FUNCTION(type, funcname)                              \
-    funcname = (type)m_dllUxTheme.GetSymbol(_T(#funcname));                   \
+    funcname = (type)m_dllUxTheme.GetSymbol(wxT(#funcname));                   \
     if ( !funcname )                                                          \
         return false
 
--- src/msw/combo.cpp-orig	2009-06-18 20:11:07.857926000 -0500
+++ src/msw/combo.cpp	2009-06-18 20:11:11.204605000 -0500
@@ -195,7 +195,7 @@ void wxComboCtrl::OnThemeChange()
             return;
         }
 
-        wxLogApiError(_T("GetThemeColor(EDIT, ETS_NORMAL, TMT_FILLCOLOR)"), hr);
+        wxLogApiError(wxT("GetThemeColor(EDIT, ETS_NORMAL, TMT_FILLCOLOR)"), hr);
     }
 #endif
 
--- src/msw/snglinst.cpp-orig	2009-06-18 20:11:19.700357000 -0500
+++ src/msw/snglinst.cpp	2009-06-18 20:11:29.376281000 -0500
@@ -55,7 +55,7 @@ public:
         m_hMutex = ::CreateMutex(NULL, FALSE, name);
         if ( !m_hMutex )
         {
-            wxLogLastError(_T("CreateMutex"));
+            wxLogLastError(wxT("CreateMutex"));
 
             return false;
         }
@@ -69,7 +69,7 @@ public:
     bool WasOpened() const
     {
         wxCHECK_MSG( m_hMutex, false,
-                     _T("can't be called if mutex creation failed") );
+                     wxT("can't be called if mutex creation failed") );
 
         return m_wasOpened;
     }
@@ -80,7 +80,7 @@ public:
         {
             if ( !::CloseHandle(m_hMutex) )
             {
-                wxLogLastError(_T("CloseHandle(mutex)"));
+                wxLogLastError(wxT("CloseHandle(mutex)"));
             }
         }
     }
@@ -103,10 +103,10 @@ bool wxSingleInstanceChecker::Create(con
                                      const wxString& WXUNUSED(path))
 {
     wxASSERT_MSG( !m_impl,
-                  _T("calling wxSingleInstanceChecker::Create() twice?") );
+                  wxT("calling wxSingleInstanceChecker::Create() twice?") );
 
     // creating unnamed mutex doesn't have the same semantics!
-    wxASSERT_MSG( !name.empty(), _T("mutex name can't be empty") );
+    wxASSERT_MSG( !name.empty(), wxT("mutex name can't be empty") );
 
     m_impl = new wxSingleInstanceCheckerImpl;
 
@@ -115,7 +115,7 @@ bool wxSingleInstanceChecker::Create(con
 
 bool wxSingleInstanceChecker::IsAnotherRunning() const
 {
-    wxCHECK_MSG( m_impl, false, _T("must call Create() first") );
+    wxCHECK_MSG( m_impl, false, wxT("must call Create() first") );
 
     // if the mutex had been opened, another instance is running - otherwise we
     // would have created it
--- src/msw/combobox.cpp-orig	2009-06-18 20:11:34.297158000 -0500
+++ src/msw/combobox.cpp	2009-06-18 20:11:42.401093000 -0500
@@ -183,7 +183,7 @@ LRESULT APIENTRY _EXPORT wxComboEditWndP
                     // longer, check for it to avoid bogus assert failures
                     if ( !win->IsBeingDeleted() )
                     {
-                        wxFAIL_MSG( _T("should have combo as parent") );
+                        wxFAIL_MSG( wxT("should have combo as parent") );
                     }
                 }
                 else if ( combo->MSWProcessEditMsg(message, wParam, lParam) )
@@ -196,7 +196,7 @@ LRESULT APIENTRY _EXPORT wxComboEditWndP
 
         case WM_GETDLGCODE:
             {
-                wxCHECK_MSG( win, 0, _T("should have a parent") );
+                wxCHECK_MSG( win, 0, wxT("should have a parent") );
 
                 if ( win->GetWindowStyle() & wxTE_PROCESS_ENTER )
                 {
@@ -396,14 +396,14 @@ WXHWND wxComboBox::GetEditHWND() const
     // this function should not be called for wxCB_READONLY controls, it is
     // the callers responsability to check this
     wxASSERT_MSG( !(GetWindowStyle() & wxCB_READONLY),
-                  _T("read-only combobox doesn't have any edit control") );
+                  wxT("read-only combobox doesn't have any edit control") );
 
     POINT pt;
     pt.x = pt.y = 4;
     HWND hwndEdit = ::ChildWindowFromPoint(GetHwnd(), pt);
     if ( !hwndEdit || hwndEdit == GetHwnd() )
     {
-        wxFAIL_MSG(_T("not read only combobox without edit control?"));
+        wxFAIL_MSG(wxT("not read only combobox without edit control?"));
     }
 
     return (WXHWND)hwndEdit;
@@ -624,7 +624,7 @@ void wxComboBox::SetEditable(bool editab
     HWND hWnd = (HWND)GetEditHWND();
     if ( !::SendMessage(hWnd, EM_SETREADONLY, !editable, 0) )
     {
-        wxLogLastError(_T("SendMessage(EM_SETREADONLY)"));
+        wxLogLastError(wxT("SendMessage(EM_SETREADONLY)"));
     }
 }
 
@@ -708,7 +708,7 @@ void wxComboBox::SetSelection(long from,
     if ( SendMessage(GetHwnd(), CB_SETEDITSEL,
                      0, (LPARAM)MAKELONG(from, to)) == CB_ERR )
     {
-        wxLogDebug(_T("CB_SETEDITSEL failed"));
+        wxLogDebug(wxT("CB_SETEDITSEL failed"));
     }
 }
 
--- src/msw/caret.cpp-orig	2009-06-18 20:11:48.163572000 -0500
+++ src/msw/caret.cpp	2009-06-18 20:11:52.952388000 -0500
@@ -41,7 +41,7 @@
 
 #define CALL_CARET_API(api, args)   \
         if ( !api args )                \
-            wxLogLastError(_T(#api))
+            wxLogLastError(wxT(#api))
 
 // ===========================================================================
 // implementation
--- src/msw/statline.cpp-orig	2009-06-18 20:11:57.878831000 -0500
+++ src/msw/statline.cpp	2009-06-18 20:12:02.192441000 -0500
@@ -108,7 +108,7 @@ bool wxStaticLine::Create(wxWindow *pare
     if ( !CreateControl(parent, id, pos, size, style, wxDefaultValidator, name) )
         return false;
 
-    return MSWCreateControl(_T("STATIC"), wxEmptyString, pos, size);
+    return MSWCreateControl(wxT("STATIC"), wxEmptyString, pos, size);
 }
 
 WXDWORD wxStaticLine::MSWGetStyle(long style, WXDWORD *exstyle) const
--- src/msw/msgdlg.cpp-orig	2009-06-18 20:12:10.026352000 -0500
+++ src/msw/msgdlg.cpp	2009-06-18 20:12:13.965289000 -0500
@@ -134,7 +134,7 @@ int wxMessageDialog::ShowModal()
     switch (msAns)
     {
         default:
-            wxFAIL_MSG(_T("unexpected ::MessageBox() return code"));
+            wxFAIL_MSG(wxT("unexpected ::MessageBox() return code"));
             // fall through
 
         case IDCANCEL:
--- src/msw/mimetype.cpp-orig	2009-06-18 20:13:57.219722000 -0500
+++ src/msw/mimetype.cpp	2009-06-18 20:14:15.507756000 -0500
@@ -100,7 +100,7 @@ static bool CanonicalizeParams(wxString&
 void wxFileTypeImpl::Init(const wxString& strFileType, const wxString& ext)
 {
     // VZ: does it? (FIXME)
-    wxCHECK_RET( !ext.empty(), _T("needs an extension") );
+    wxCHECK_RET( !ext.empty(), wxT("needs an extension") );
 
     if ( ext[0u] != wxT('.') ) {
         m_ext = wxT('.');
@@ -109,14 +109,14 @@ void wxFileTypeImpl::Init(const wxString
 
     m_strFileType = strFileType;
     if ( !strFileType ) {
-        m_strFileType = m_ext.AfterFirst('.') + _T("_auto_file");
+        m_strFileType = m_ext.AfterFirst('.') + wxT("_auto_file");
     }
 }
 
 wxString wxFileTypeImpl::GetVerbPath(const wxString& verb) const
 {
     wxString path;
-    path << m_strFileType << _T("\\shell\\") << verb << _T("\\command");
+    path << m_strFileType << wxT("\\shell\\") << verb << wxT("\\command");
     return path;
 }
 
@@ -124,7 +124,7 @@ size_t wxFileTypeImpl::GetAllCommands(wx
                                       wxArrayString *commands,
                                       const wxFileType::MessageParameters& params) const
 {
-    wxCHECK_MSG( !m_ext.empty(), 0, _T("GetAllCommands() needs an extension") );
+    wxCHECK_MSG( !m_ext.empty(), 0, wxT("GetAllCommands() needs an extension") );
 
     if ( m_strFileType.empty() )
     {
@@ -133,7 +133,7 @@ size_t wxFileTypeImpl::GetAllCommands(wx
         wxRegKey rkey(wxRegKey::HKCR, m_ext);
         if ( !rkey.Exists() || !rkey.QueryValue(wxEmptyString, self->m_strFileType) )
         {
-            wxLogDebug(_T("Can't get the filetype for extension '%s'."),
+            wxLogDebug(wxT("Can't get the filetype for extension '%s'."),
                        m_ext.c_str());
 
             return 0;
@@ -142,7 +142,7 @@ size_t wxFileTypeImpl::GetAllCommands(wx
 
     // enum all subkeys of HKCR\filetype\shell
     size_t count = 0;
-    wxRegKey rkey(wxRegKey::HKCR, m_strFileType  + _T("\\shell"));
+    wxRegKey rkey(wxRegKey::HKCR, m_strFileType  + wxT("\\shell"));
     long dummy;
     wxString verb;
     bool ok = rkey.GetFirstKey(verb, dummy);
@@ -152,7 +152,7 @@ size_t wxFileTypeImpl::GetAllCommands(wx
 
         // we want the open bverb to eb always the first
 
-        if ( verb.CmpNoCase(_T("open")) == 0 )
+        if ( verb.CmpNoCase(wxT("open")) == 0 )
         {
             if ( verbs )
                 verbs->Insert(verb, 0);
@@ -231,13 +231,13 @@ wxString wxFileTypeImpl::GetCommand(cons
         }
     }
 
-    if (!strKey && wxRegKey(wxRegKey::HKCR, m_ext + _T("\\shell")).Exists())
+    if (!strKey && wxRegKey(wxRegKey::HKCR, m_ext + wxT("\\shell")).Exists())
         strKey = m_ext;
 
     if ( !strKey && !m_strFileType.empty())
     {
         wxString fileType = wxFileTypeImplGetCurVer(m_strFileType);
-        if (wxRegKey(wxRegKey::HKCR, fileType + _T("\\shell")).Exists())
+        if (wxRegKey(wxRegKey::HKCR, fileType + wxT("\\shell")).Exists())
             strKey = fileType;
     }
 
@@ -248,7 +248,7 @@ wxString wxFileTypeImpl::GetCommand(cons
     }
 
     strKey << wxT("\\shell\\") << verb;
-    wxRegKey key(wxRegKey::HKCR, strKey + _T("\\command"));
+    wxRegKey key(wxRegKey::HKCR, strKey + wxT("\\command"));
     wxString command;
     if ( key.Open(wxRegKey::Read) ) {
         // it's the default value of the key
@@ -258,16 +258,16 @@ wxString wxFileTypeImpl::GetCommand(cons
 #if wxUSE_IPC
             // look whether we must issue some DDE requests to the application
             // (and not just launch it)
-            strKey += _T("\\DDEExec");
+            strKey += wxT("\\DDEExec");
             wxRegKey keyDDE(wxRegKey::HKCR, strKey);
             if ( keyDDE.Open(wxRegKey::Read) ) {
                 wxString ddeCommand, ddeServer, ddeTopic;
                 keyDDE.QueryValue(wxEmptyString, ddeCommand);
-                ddeCommand.Replace(_T("%1"), _T("%s"));
+                ddeCommand.Replace(wxT("%1"), wxT("%s"));
 
-                wxRegKey keyServer(wxRegKey::HKCR, strKey + _T("\\Application"));
+                wxRegKey keyServer(wxRegKey::HKCR, strKey + wxT("\\Application"));
                 keyServer.QueryValue(wxEmptyString, ddeServer);
-                wxRegKey keyTopic(wxRegKey::HKCR, strKey + _T("\\Topic"));
+                wxRegKey keyTopic(wxRegKey::HKCR, strKey + wxT("\\Topic"));
                 keyTopic.QueryValue(wxEmptyString, ddeTopic);
 
                 if (ddeTopic.empty())
@@ -276,10 +276,10 @@ wxString wxFileTypeImpl::GetCommand(cons
                 // HACK: we use a special feature of wxExecute which exists
                 //       just because we need it here: it will establish DDE
                 //       conversation with the program it just launched
-                command.Prepend(_T("WX_DDE#"));
-                command << _T('#') << ddeServer
-                        << _T('#') << ddeTopic
-                        << _T('#') << ddeCommand;
+                command.Prepend(wxT("WX_DDE#"));
+                command << wxT('#') << ddeServer
+                        << wxT('#') << ddeTopic
+                        << wxT('#') << ddeCommand;
             }
             else
 #endif // wxUSE_IPC
@@ -537,7 +537,7 @@ size_t wxMimeTypesManagerImpl::EnumAllFi
 wxFileType *wxMimeTypesManagerImpl::Associate(const wxFileTypeInfo& ftInfo)
 {
     wxCHECK_MSG( !ftInfo.GetExtensions().empty(), NULL,
-                 _T("Associate() needs extension") );
+                 wxT("Associate() needs extension") );
 
     bool ok;
     size_t iExtCount = 0;
@@ -547,10 +547,10 @@ wxFileType *wxMimeTypesManagerImpl::Asso
     wxString ext = ftInfo.GetExtensions()[iExtCount];
 
     wxCHECK_MSG( !ext.empty(), NULL,
-                 _T("Associate() needs non empty extension") );
+                 wxT("Associate() needs non empty extension") );
 
-    if ( ext[0u] != _T('.') )
-        extWithDot = _T('.');
+    if ( ext[0u] != wxT('.') )
+        extWithDot = wxT('.');
     extWithDot += ext;
 
     // start by setting the HKCR\\.ext entries
@@ -568,7 +568,7 @@ wxFileType *wxMimeTypesManagerImpl::Asso
             if ( filetypeOrig.empty() )
             {
                 // make it up from the extension
-                filetype << extWithDot.c_str() + 1 << _T("_file");
+                filetype << extWithDot.c_str() + 1 << wxT("_file");
             }
             else
             {
@@ -598,7 +598,7 @@ wxFileType *wxMimeTypesManagerImpl::Asso
     if ( !mimetype.empty() )
     {
         // set the MIME type
-        ok = key.SetValue(_T("Content Type"), mimetype);
+        ok = key.SetValue(wxT("Content Type"), mimetype);
 
         if ( ok )
         {
@@ -611,7 +611,7 @@ wxFileType *wxMimeTypesManagerImpl::Asso
             if ( ok )
             {
                 // and provide a back link to the extension
-                keyMIME.SetValue(_T("Extension"), extWithDot);
+                keyMIME.SetValue(wxT("Extension"), extWithDot);
             }
         }
     }
@@ -622,8 +622,8 @@ wxFileType *wxMimeTypesManagerImpl::Asso
     for (iExtCount=1; iExtCount < ftInfo.GetExtensionsCount(); iExtCount++ )
     {
         ext = ftInfo.GetExtensions()[iExtCount];
-        if ( ext[0u] != _T('.') )
-           extWithDot = _T('.');
+        if ( ext[0u] != wxT('.') )
+           extWithDot = wxT('.');
         extWithDot += ext;
 
         wxRegKey key(wxRegKey::HKCR, extWithDot);
@@ -635,7 +635,7 @@ wxFileType *wxMimeTypesManagerImpl::Asso
         if ( !mimetype.empty() )
         {
             // set the MIME type
-            ok = key.SetValue(_T("Content Type"), mimetype);
+            ok = key.SetValue(wxT("Content Type"), mimetype);
 
             if ( ok )
             {
@@ -648,7 +648,7 @@ wxFileType *wxMimeTypesManagerImpl::Asso
                 if ( ok )
                 {
                     // and provide a back link to the extension
-                    keyMIME.SetValue(_T("Extension"), extWithDot);
+                    keyMIME.SetValue(wxT("Extension"), extWithDot);
                 }
             }
         }
@@ -680,7 +680,7 @@ bool wxFileTypeImpl::SetCommand(const wx
                                 bool WXUNUSED(overwriteprompt))
 {
     wxCHECK_MSG( !m_ext.empty() && !verb.empty(), false,
-                 _T("SetCommand() needs an extension and a verb") );
+                 wxT("SetCommand() needs an extension and a verb") );
 
     if ( !EnsureExtKeyExists() )
         return false;
@@ -715,13 +715,13 @@ bool wxFileTypeImpl::SetCommand(const wx
     // TODO:
     // 1. translate '%s' to '%1' instead of always adding it
     // 2. create DDEExec value if needed (undo GetCommand)
-    return rkey.Create() && rkey.SetValue(wxEmptyString, cmd + _T(" \"%1\"") );
+    return rkey.Create() && rkey.SetValue(wxEmptyString, cmd + wxT(" \"%1\"") );
 }
 
 /* // no longer used
 bool wxFileTypeImpl::SetMimeType(const wxString& mimeTypeOrig)
 {
-    wxCHECK_MSG( !m_ext.empty(), false, _T("SetMimeType() needs extension") );
+    wxCHECK_MSG( !m_ext.empty(), false, wxT("SetMimeType() needs extension") );
 
     if ( !EnsureExtKeyExists() )
         return false;
@@ -732,8 +732,8 @@ bool wxFileTypeImpl::SetMimeType(const w
     {
         // make up a default value for it
         wxString cmd;
-        wxSplitPath(GetCommand(_T("open")), NULL, &cmd, NULL);
-        mimeType << _T("application/x-") << cmd;
+        wxSplitPath(GetCommand(wxT("open")), NULL, &cmd, NULL);
+        mimeType << wxT("application/x-") << cmd;
     }
     else
     {
@@ -741,31 +741,31 @@ bool wxFileTypeImpl::SetMimeType(const w
     }
 
     wxRegKey rkey(wxRegKey::HKCR, m_ext);
-    return rkey.Create() && rkey.SetValue(_T("Content Type"), mimeType);
+    return rkey.Create() && rkey.SetValue(wxT("Content Type"), mimeType);
 }
 */
 
 bool wxFileTypeImpl::SetDefaultIcon(const wxString& cmd, int index)
 {
-    wxCHECK_MSG( !m_ext.empty(), false, _T("SetDefaultIcon() needs extension") );
-    wxCHECK_MSG( !m_strFileType.empty(), false, _T("File key not found") );
+    wxCHECK_MSG( !m_ext.empty(), false, wxT("SetDefaultIcon() needs extension") );
+    wxCHECK_MSG( !m_strFileType.empty(), false, wxT("File key not found") );
 //    the next line fails on a SMBshare, I think because it is case mangled
-//    wxCHECK_MSG( !wxFileExists(cmd), false, _T("Icon file not found.") );
+//    wxCHECK_MSG( !wxFileExists(cmd), false, wxT("Icon file not found.") );
 
     if ( !EnsureExtKeyExists() )
         return false;
 
-    wxRegKey rkey(wxRegKey::HKCR, m_strFileType + _T("\\DefaultIcon"));
+    wxRegKey rkey(wxRegKey::HKCR, m_strFileType + wxT("\\DefaultIcon"));
 
     return rkey.Create() &&
            rkey.SetValue(wxEmptyString,
-                         wxString::Format(_T("%s,%d"), cmd.c_str(), index));
+                         wxString::Format(wxT("%s,%d"), cmd.c_str(), index));
 }
 
 bool wxFileTypeImpl::SetDescription (const wxString& desc)
 {
-    wxCHECK_MSG( !m_strFileType.empty(), false, _T("File key not found") );
-    wxCHECK_MSG( !desc.empty(), false, _T("No file description supplied") );
+    wxCHECK_MSG( !m_strFileType.empty(), false, wxT("File key not found") );
+    wxCHECK_MSG( !desc.empty(), false, wxT("No file description supplied") );
 
     if ( !EnsureExtKeyExists() )
         return false;
@@ -807,13 +807,13 @@ bool wxFileTypeImpl::Unassociate()
 
 bool wxFileTypeImpl::RemoveOpenCommand()
 {
-   return RemoveCommand(_T("open"));
+   return RemoveCommand(wxT("open"));
 }
 
 bool wxFileTypeImpl::RemoveCommand(const wxString& verb)
 {
     wxCHECK_MSG( !m_ext.empty() && !verb.empty(), false,
-                 _T("RemoveCommand() needs an extension and a verb") );
+                 wxT("RemoveCommand() needs an extension and a verb") );
 
     wxRegKey rkey(wxRegKey::HKCR, GetVerbPath(verb));
 
@@ -823,7 +823,7 @@ bool wxFileTypeImpl::RemoveCommand(const
 
 bool wxFileTypeImpl::RemoveMimeType()
 {
-    wxCHECK_MSG( !m_ext.empty(), false, _T("RemoveMimeType() needs extension") );
+    wxCHECK_MSG( !m_ext.empty(), false, wxT("RemoveMimeType() needs extension") );
 
     wxRegKey rkey(wxRegKey::HKCR, m_ext);
     return !rkey.Exists() || rkey.DeleteSelf();
@@ -832,16 +832,16 @@ bool wxFileTypeImpl::RemoveMimeType()
 bool wxFileTypeImpl::RemoveDefaultIcon()
 {
     wxCHECK_MSG( !m_ext.empty(), false,
-                 _T("RemoveDefaultIcon() needs extension") );
+                 wxT("RemoveDefaultIcon() needs extension") );
 
-    wxRegKey rkey (wxRegKey::HKCR, m_strFileType  + _T("\\DefaultIcon"));
+    wxRegKey rkey (wxRegKey::HKCR, m_strFileType  + wxT("\\DefaultIcon"));
     return !rkey.Exists() || rkey.DeleteSelf();
 }
 
 bool wxFileTypeImpl::RemoveDescription()
 {
     wxCHECK_MSG( !m_ext.empty(), false,
-                 _T("RemoveDescription() needs extension") );
+                 wxT("RemoveDescription() needs extension") );
 
     wxRegKey rkey (wxRegKey::HKCR, m_strFileType );
     return !rkey.Exists() || rkey.DeleteSelf();
--- src/msw/listctrl.cpp-orig	2009-06-18 20:14:20.844127000 -0500
+++ src/msw/listctrl.cpp	2009-06-18 20:14:26.974983000 -0500
@@ -114,7 +114,7 @@ public:
     // init without conversion
     void Init(LV_ITEM_NATIVE& item)
     {
-        wxASSERT_MSG( !m_pItem, _T("Init() called twice?") );
+        wxASSERT_MSG( !m_pItem, wxT("Init() called twice?") );
 
         m_pItem = &item;
     }
@@ -377,7 +377,7 @@ WXDWORD wxListCtrl::MSWGetStyle(long sty
     MAP_MODE_STYLE(wxLC_REPORT, LVS_REPORT)
 
     wxASSERT_MSG( nModes == 1,
-                  _T("wxListCtrl style should have exactly one mode bit set") );
+                  wxT("wxListCtrl style should have exactly one mode bit set") );
 
 #undef MAP_MODE_STYLE
 
@@ -407,7 +407,7 @@ WXDWORD wxListCtrl::MSWGetStyle(long sty
         wstyle |= LVS_SORTASCENDING;
 
         wxASSERT_MSG( !(style & wxLC_SORT_DESCENDING),
-                      _T("can't sort in ascending and descending orders at once") );
+                      wxT("can't sort in ascending and descending orders at once") );
     }
     else if ( style & wxLC_SORT_DESCENDING )
         wstyle |= LVS_SORTDESCENDING;
@@ -768,7 +768,7 @@ bool wxListCtrl::SetItem(wxListItem& inf
 {
     const long id = info.GetId();
     wxCHECK_MSG( id >= 0 && id < GetItemCount(), false,
-                 _T("invalid item index in SetItem") );
+                 wxT("invalid item index in SetItem") );
 
     LV_ITEM item;
     wxConvertToMSWListItem(this, info, item);
@@ -819,7 +819,7 @@ bool wxListCtrl::SetItem(wxListItem& inf
         item.cchTextMax = 0;
         if ( !ListView_SetItem(GetHwnd(), &item) )
         {
-            wxLogDebug(_T("ListView_SetItem() failed"));
+            wxLogDebug(wxT("ListView_SetItem() failed"));
 
             return false;
         }
@@ -906,7 +906,7 @@ bool wxListCtrl::SetItemState(long item,
     if ( !::SendMessage(GetHwnd(), LVM_SETITEMSTATE,
                         (WPARAM)item, (LPARAM)&lvItem) )
     {
-        wxLogLastError(_T("ListView_SetItemState"));
+        wxLogLastError(wxT("ListView_SetItemState"));
 
         return false;
     }
@@ -1002,12 +1002,12 @@ bool wxListCtrl::SetItemData(long item, 
 wxRect wxListCtrl::GetViewRect() const
 {
     wxASSERT_MSG( !HasFlag(wxLC_REPORT | wxLC_LIST),
-                    _T("wxListCtrl::GetViewRect() only works in icon mode") );
+                    wxT("wxListCtrl::GetViewRect() only works in icon mode") );
 
     RECT rc;
     if ( !ListView_GetViewRect(GetHwnd(), &rc) )
     {
-        wxLogDebug(_T("ListView_GetViewRect() failed."));
+        wxLogDebug(wxT("ListView_GetViewRect() failed."));
 
         wxZeroMemory(rc);
     }
@@ -1050,7 +1050,7 @@ bool wxListCtrl::GetSubItemRect(long ite
         codeWin = LVIR_LABEL;
     else
     {
-        wxFAIL_MSG( _T("incorrect code in GetItemRect() / GetSubItemRect()") );
+        wxFAIL_MSG( wxT("incorrect code in GetItemRect() / GetSubItemRect()") );
         codeWin = LVIR_BOUNDS;
     }
 
@@ -1065,7 +1065,7 @@ bool wxListCtrl::GetSubItemRect(long ite
     }
     else
     {
-      wxFAIL_MSG( _T("incorrect subItem number in GetSubItemRect()") );
+      wxFAIL_MSG( wxT("incorrect subItem number in GetSubItemRect()") );
       return false;
     }
 
@@ -1316,7 +1316,7 @@ bool wxListCtrl::DeleteItem(long item)
 {
     if ( !ListView_DeleteItem(GetHwnd(), (int) item) )
     {
-        wxLogLastError(_T("ListView_DeleteItem"));
+        wxLogLastError(wxT("ListView_DeleteItem"));
         return false;
     }
 
@@ -1591,7 +1591,7 @@ wxListCtrl::HitTest(const wxPoint& point
 // -1 otherwise.
 long wxListCtrl::InsertItem(const wxListItem& info)
 {
-    wxASSERT_MSG( !IsVirtual(), _T("can't be used with virtual controls") );
+    wxASSERT_MSG( !IsVirtual(), wxT("can't be used with virtual controls") );
 
     LV_ITEM item;
     wxConvertToMSWListItem(this, info, item);
@@ -1713,7 +1713,7 @@ bool wxListCtrl::ScrollList(int dx, int 
 {
     if ( !ListView_Scroll(GetHwnd(), dx, dy) )
     {
-        wxLogDebug(_T("ListView_Scroll(%d, %d) failed"), dx, dy);
+        wxLogDebug(wxT("ListView_Scroll(%d, %d) failed"), dx, dy);
 
         return false;
     }
@@ -1768,7 +1768,7 @@ bool wxListCtrl::SortItems(wxListCtrlCom
                              wxInternalDataCompareFunc,
                              (WPARAM) &internalData) )
     {
-        wxLogDebug(_T("ListView_SortItems() failed"));
+        wxLogDebug(wxT("ListView_SortItems() failed"));
 
         return false;
     }
@@ -1905,7 +1905,7 @@ bool wxListCtrl::MSWOnNotify(int idCtrl,
 #endif //__WXWINCE__
                     if ( !::GetCursorPos(&ptClick) )
                     {
-                        wxLogLastError(_T("GetCursorPos"));
+                        wxLogLastError(wxT("GetCursorPos"));
                     }
 
                     // we need to use listctrl coordinates for the event point
@@ -1919,12 +1919,12 @@ bool wxListCtrl::MSWOnNotify(int idCtrl,
                     }
                     else
                     {
-                        wxLogLastError(_T("ScreenToClient(listctrl)"));
+                        wxLogLastError(wxT("ScreenToClient(listctrl)"));
                     }
 
                     if ( !::ScreenToClient(hwndHdr, &ptClick) )
                     {
-                        wxLogLastError(_T("ScreenToClient(listctrl header)"));
+                        wxLogLastError(wxT("ScreenToClient(listctrl header)"));
                     }
 
                     const int colCount = Header_GetItemCount(hwndHdr);
@@ -2320,7 +2320,7 @@ bool wxListCtrl::MSWOnNotify(int idCtrl,
                     const int startPos = pFindInfo->iStart;
                     const int maxPos = GetItemCount();
                     wxCHECK_MSG( startPos <= maxPos, false,
-                                 _T("bad starting position in LVN_ODFINDITEM") );
+                                 wxT("bad starting position in LVN_ODFINDITEM") );
 
                     int currentPos = startPos;
                     do
@@ -2374,7 +2374,7 @@ bool wxListCtrl::MSWOnNotify(int idCtrl,
                     {
                         wxString text = OnGetItemText(item, lvi.iSubItem);
                         wxStrncpy(lvi.pszText, text, lvi.cchTextMax - 1);
-                        lvi.pszText[lvi.cchTextMax - 1] = _T('\0');
+                        lvi.pszText[lvi.cchTextMax - 1] = wxT('\0');
                     }
 
                     // see comment at the end of wxListCtrl::GetColumn()
@@ -2873,7 +2873,7 @@ wxString wxListCtrl::OnGetItemText(long 
 {
     // this is a pure virtual function, in fact - which is not really pure
     // because the controls which are not virtual don't need to implement it
-    wxFAIL_MSG( _T("wxListCtrl::OnGetItemText not supposed to be called") );
+    wxFAIL_MSG( wxT("wxListCtrl::OnGetItemText not supposed to be called") );
 
     return wxEmptyString;
 }
@@ -2897,7 +2897,7 @@ int wxListCtrl::OnGetItemColumnImage(lon
 wxListItemAttr *wxListCtrl::OnGetItemAttr(long WXUNUSED_UNLESS_DEBUG(item)) const
 {
     wxASSERT_MSG( item >= 0 && item < GetItemCount(),
-                  _T("invalid item index in OnGetItemAttr()") );
+                  wxT("invalid item index in OnGetItemAttr()") );
 
     // no attributes by default
     return NULL;
@@ -2911,12 +2911,12 @@ wxListItemAttr *wxListCtrl::DoGetItemAtt
 
 void wxListCtrl::SetItemCount(long count)
 {
-    wxASSERT_MSG( IsVirtual(), _T("this is for virtual controls only") );
+    wxASSERT_MSG( IsVirtual(), wxT("this is for virtual controls only") );
 
     if ( !::SendMessage(GetHwnd(), LVM_SETITEMCOUNT, (WPARAM)count,
                         LVSICF_NOSCROLL | LVSICF_NOINVALIDATEALL) )
     {
-        wxLogLastError(_T("ListView_SetItemCount"));
+        wxLogLastError(wxT("ListView_SetItemCount"));
     }
     m_count = count;
     wxASSERT_MSG( m_count == ListView_GetItemCount(GetHwnd()),
@@ -2930,7 +2930,7 @@ void wxListCtrl::RefreshItem(long item)
 #if 0
     if ( !ListView_Update(GetHwnd(), item) )
     {
-        wxLogLastError(_T("ListView_Update"));
+        wxLogLastError(wxT("ListView_Update"));
     }
 #else // 1
     wxRect rect;
--- src/msw/dir.cpp-orig	2009-06-18 20:14:36.190765000 -0500
+++ src/msw/dir.cpp	2009-06-18 20:14:41.423984000 -0500
@@ -55,7 +55,7 @@ static inline void FreeFindData(FIND_DAT
 {
         if ( !::FindClose(fd) )
         {
-            wxLogLastError(_T("FindClose"));
+            wxLogLastError(wxT("FindClose"));
         }
 }
 
@@ -182,9 +182,9 @@ bool wxDirData::Read(wxString *filename)
         wxString filespec = m_dirname;
         if ( !wxEndsWithPathSeparator(filespec) )
         {
-            filespec += _T('\\');
+            filespec += wxT('\\');
         }
-        filespec += (!m_filespec ? _T("*.*") : m_filespec.c_str());
+        filespec += (!m_filespec ? wxT("*.*") : m_filespec.c_str());
 
         m_finddata = FindFirst(filespec, PTR_TO_FINDDATA);
 
@@ -225,7 +225,7 @@ bool wxDirData::Read(wxString *filename)
 
                 if ( err != ERROR_NO_MORE_FILES )
                 {
-                    wxLogLastError(_T("FindNext"));
+                    wxLogLastError(wxT("FindNext"));
                 }
 #endif // __WIN32__
                 //else: not an error, just no more (such) files
@@ -238,9 +238,9 @@ bool wxDirData::Read(wxString *filename)
         attr = GetAttrFromFindData(PTR_TO_FINDDATA);
 
         // don't return "." and ".." unless asked for
-        if ( name[0] == _T('.') &&
-             ((name[1] == _T('.') && name[2] == _T('\0')) ||
-              (name[1] == _T('\0'))) )
+        if ( name[0] == wxT('.') &&
+             ((name[1] == wxT('.') && name[2] == wxT('\0')) ||
+              (name[1] == wxT('\0'))) )
         {
             if ( !(m_flags & wxDIR_DOTDOT) )
                 continue;
@@ -319,9 +319,9 @@ wxString wxDir::GetName() const
         if ( !name.empty() )
         {
             // bring to canonical Windows form
-            name.Replace(_T("/"), _T("\\"));
+            name.Replace(wxT("/"), wxT("\\"));
 
-            if ( name.Last() == _T('\\') )
+            if ( name.Last() == wxT('\\') )
             {
                 // chop off the last (back)slash
                 name.Truncate(name.length() - 1);
@@ -345,7 +345,7 @@ bool wxDir::GetFirst(wxString *filename,
                      const wxString& filespec,
                      int flags) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
     M_DIR->Rewind();
 
@@ -357,9 +357,9 @@ bool wxDir::GetFirst(wxString *filename,
 
 bool wxDir::GetNext(wxString *filename) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
-    wxCHECK_MSG( filename, false, _T("bad pointer in wxDir::GetNext()") );
+    wxCHECK_MSG( filename, false, wxT("bad pointer in wxDir::GetNext()") );
 
     return M_DIR->Read(filename);
 }
@@ -377,11 +377,11 @@ wxGetDirectoryTimes(const wxString& dirn
 #ifdef __WXWINCE__
     // FindFirst() is going to fail
     wxASSERT_MSG( !dirname.empty(),
-                  _T("incorrect directory name format in wxGetDirectoryTimes") );
+                  wxT("incorrect directory name format in wxGetDirectoryTimes") );
 #else
     // FindFirst() is going to fail
-    wxASSERT_MSG( !dirname.empty() && dirname.Last() != _T('\\'),
-                  _T("incorrect directory name format in wxGetDirectoryTimes") );
+    wxASSERT_MSG( !dirname.empty() && dirname.Last() != wxT('\\'),
+                  wxT("incorrect directory name format in wxGetDirectoryTimes") );
 #endif
 
     FIND_STRUCT fs;
--- src/msw/region.cpp-orig	2009-06-18 20:14:48.847658000 -0500
+++ src/msw/region.cpp	2009-06-18 20:14:54.018087000 -0500
@@ -165,7 +165,7 @@ void wxRegion::Clear()
 
 bool wxRegion::DoOffset(wxCoord x, wxCoord y)
 {
-    wxCHECK_MSG( M_REGION, false, _T("invalid wxRegion") );
+    wxCHECK_MSG( M_REGION, false, wxT("invalid wxRegion") );
 
     if ( !x && !y )
     {
@@ -177,7 +177,7 @@ bool wxRegion::DoOffset(wxCoord x, wxCoo
 
     if ( ::OffsetRgn(GetHrgn(), x, y) == ERROR )
     {
-        wxLogLastError(_T("OffsetRgn"));
+        wxLogLastError(wxT("OffsetRgn"));
 
         return false;
     }
@@ -202,7 +202,7 @@ bool wxRegion::DoCombine(const wxRegion&
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown region operation") );
+                wxFAIL_MSG( wxT("unknown region operation") );
                 // fall through
 
             case wxRGN_AND:
@@ -235,7 +235,7 @@ bool wxRegion::DoCombine(const wxRegion&
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown region operation") );
+                wxFAIL_MSG( wxT("unknown region operation") );
                 // fall through
 
             case wxRGN_COPY:
@@ -245,7 +245,7 @@ bool wxRegion::DoCombine(const wxRegion&
 
         if ( ::CombineRgn(M_REGION, M_REGION, M_REGION_OF(rgn), mode) == ERROR )
         {
-            wxLogLastError(_T("CombineRgn"));
+            wxLogLastError(wxT("CombineRgn"));
 
             return false;
         }
@@ -441,28 +441,28 @@ wxRegionIterator wxRegionIterator::opera
 
 wxCoord wxRegionIterator::GetX() const
 {
-    wxCHECK_MSG( m_current < m_numRects, 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( m_current < m_numRects, 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].x;
 }
 
 wxCoord wxRegionIterator::GetY() const
 {
-    wxCHECK_MSG( m_current < m_numRects, 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( m_current < m_numRects, 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].y;
 }
 
 wxCoord wxRegionIterator::GetW() const
 {
-    wxCHECK_MSG( m_current < m_numRects, 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( m_current < m_numRects, 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].width;
 }
 
 wxCoord wxRegionIterator::GetH() const
 {
-    wxCHECK_MSG( m_current < m_numRects, 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( m_current < m_numRects, 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].height;
 }
--- src/msw/dlmsw.cpp-orig	2009-06-18 20:14:59.122074000 -0500
+++ src/msw/dlmsw.cpp	2009-06-18 20:15:04.306951000 -0500
@@ -28,7 +28,7 @@
 #include "wx/msw/private.h"
 #include "wx/msw/debughlp.h"
 
-const wxChar *wxDynamicLibrary::ms_dllext = _T(".dll");
+const wxChar *wxDynamicLibrary::ms_dllext = wxT(".dll");
 
 // ----------------------------------------------------------------------------
 // private classes
@@ -121,9 +121,9 @@ HMODULE wxGetModuleHandle(const char *na
     static GetModuleHandleEx_t s_pfnGetModuleHandleEx = INVALID_FUNC_PTR;
     if ( s_pfnGetModuleHandleEx == INVALID_FUNC_PTR )
     {
-        wxDynamicLibrary dll(_T("kernel32.dll"), wxDL_VERBATIM);
+        wxDynamicLibrary dll(wxT("kernel32.dll"), wxDL_VERBATIM);
         s_pfnGetModuleHandleEx =
-            (GetModuleHandleEx_t)dll.RawGetSymbol(_T("GetModuleHandleExA"));
+            (GetModuleHandleEx_t)dll.RawGetSymbol(wxT("GetModuleHandleExA"));
 
         // dll object can be destroyed, kernel32.dll won't be unloaded anyhow
     }
@@ -158,7 +158,7 @@ wxVersionDLL::wxVersionDLL()
     // handle it
     wxLogNull noLog;
 
-    if ( m_dll.Load(_T("version.dll"), wxDL_VERBATIM) )
+    if ( m_dll.Load(wxT("version.dll"), wxDL_VERBATIM) )
     {
         // the functions we load have either 'A' or 'W' suffix depending on
         // whether we're in ANSI or Unicode build
@@ -169,7 +169,7 @@ wxVersionDLL::wxVersionDLL()
         #endif // UNICODE/ANSI
 
         #define LOAD_VER_FUNCTION(name)                                       \
-            m_pfn ## name = (name ## _t)m_dll.GetSymbol(_T(#name SUFFIX));    \
+            m_pfn ## name = (name ## _t)m_dll.GetSymbol(wxT(#name SUFFIX));    \
         if ( !m_pfn ## name )                                                 \
         {                                                                     \
             m_dll.Unload();                                                   \
@@ -202,10 +202,10 @@ wxString wxVersionDLL::GetFileVersion(co
             {
                 void *pVer;
                 UINT sizeInfo;
-                if ( m_pfnVerQueryValue(buf.data(), _T("\\"), &pVer, &sizeInfo) )
+                if ( m_pfnVerQueryValue(buf.data(), wxT("\\"), &pVer, &sizeInfo) )
                 {
                     VS_FIXEDFILEINFO *info = (VS_FIXEDFILEINFO *)pVer;
-                    ver.Printf(_T("%d.%d.%d.%d"),
+                    ver.Printf(wxT("%d.%d.%d.%d"),
                                HIWORD(info->dwFileVersionMS),
                                LOWORD(info->dwFileVersionMS),
                                HIWORD(info->dwFileVersionLS),
@@ -327,7 +327,7 @@ wxDynamicLibraryDetailsArray wxDynamicLi
                                 &params
                             ) )
         {
-            wxLogLastError(_T("EnumerateLoadedModules"));
+            wxLogLastError(wxT("EnumerateLoadedModules"));
         }
     }
 #endif // wxUSE_DBGHELP
--- src/msw/bitmap.cpp-orig	2009-06-18 20:15:09.212037000 -0500
+++ src/msw/bitmap.cpp	2009-06-18 20:15:13.799354000 -0500
@@ -214,7 +214,7 @@ wxBitmapRefData::wxBitmapRefData(const w
     //        CloneRefData()
 
     wxASSERT_MSG( !data.m_isDIB,
-                    _T("can't copy bitmap locked for raw access!") );
+                    wxT("can't copy bitmap locked for raw access!") );
     m_isDIB = false;
 
     m_hasAlpha = data.m_hasAlpha;
@@ -226,7 +226,7 @@ void wxBitmapRefData::Free()
                   wxT("deleting bitmap still selected into wxMemoryDC") );
 
 #if wxUSE_WXDIB
-    wxASSERT_MSG( !m_dib, _T("forgot to call wxBitmap::UngetRawData()!") );
+    wxASSERT_MSG( !m_dib, wxT("forgot to call wxBitmap::UngetRawData()!") );
 #endif
 
     if ( m_hBitmap)
@@ -388,7 +388,7 @@ bool wxBitmap::CopyFromIcon(const wxIcon
 
 bool wxBitmap::CopyFromDIB(const wxDIB& dib)
 {
-    wxCHECK_MSG( dib.IsOk(), false, _T("invalid DIB in CopyFromDIB") );
+    wxCHECK_MSG( dib.IsOk(), false, wxT("invalid DIB in CopyFromDIB") );
 
 #ifdef SOMETIMES_USE_DIB
     HBITMAP hbitmap = dib.CreateDDB();
@@ -519,7 +519,7 @@ bool wxBitmap::Create(int width, int hei
 
 bool wxBitmap::Create(int width, int height, const wxDC& dc)
 {
-    wxCHECK_MSG( dc.Ok(), false, _T("invalid HDC in wxBitmap::Create()") );
+    wxCHECK_MSG( dc.Ok(), false, wxT("invalid HDC in wxBitmap::Create()") );
 
     return DoCreate(width, height, -1, dc.GetHDC());
 }
@@ -790,7 +790,7 @@ bool wxBitmap::CreateFromImage(const wxI
 bool wxBitmap::CreateFromImage(const wxImage& image, const wxDC& dc)
 {
     wxCHECK_MSG( dc.Ok(), false,
-                    _T("invalid HDC in wxBitmap::CreateFromImage()") );
+                    wxT("invalid HDC in wxBitmap::CreateFromImage()") );
 
     return CreateFromImage(image, -1, dc.GetHDC());
 }
@@ -880,7 +880,7 @@ bool wxBitmap::CreateFromImage(const wxI
         hbitmap = ::CreateBitmap(w, h, 1, 1, data);
         if ( !hbitmap )
         {
-            wxLogLastError(_T("CreateBitmap(mask)"));
+            wxLogLastError(wxT("CreateBitmap(mask)"));
         }
         else
         {
@@ -1105,13 +1105,13 @@ wxBitmap wxBitmap::GetSubBitmapOfHDC( co
 		
         if ( !selectDst )
         {
-            wxLogLastError(_T("SelectObject(destBitmap)"));
+            wxLogLastError(wxT("SelectObject(destBitmap)"));
         }
 
         if ( !::BitBlt(dcDst, 0, 0, rect.width, rect.height,
                        (HDC)hdc, rect.x, rect.y, SRCCOPY) )
         {
-            wxLogLastError(_T("BitBlt"));
+            wxLogLastError(wxT("BitBlt"));
         }
     }
 
@@ -1126,7 +1126,7 @@ wxBitmap wxBitmap::GetSubBitmapOfHDC( co
         if ( !::BitBlt(dcDst, 0, 0, rect.width, rect.height,
                        dcSrc, rect.x, rect.y, SRCCOPY) )
         {
-            wxLogLastError(_T("BitBlt"));
+            wxLogLastError(wxT("BitBlt"));
         }
 
         wxMask *mask = new wxMask((WXHBITMAP) hbmpMask);
@@ -1253,7 +1253,7 @@ void *wxBitmap::GetRawData(wxPixelDataBa
     if ( !GetBitmapData()->m_isDIB )
     {
         wxCHECK_MSG( !GetBitmapData()->m_dib, NULL,
-                        _T("GetRawData() may be called only once") );
+                        wxT("GetRawData() may be called only once") );
 
         wxDIB *dib = new wxDIB(*this);
         if ( !dib->IsOk() )
@@ -1276,7 +1276,7 @@ void *wxBitmap::GetRawData(wxPixelDataBa
     DIBSECTION ds;
     if ( ::GetObject(hDIB, sizeof(ds), &ds) != sizeof(DIBSECTION) )
     {
-        wxFAIL_MSG( _T("failed to get DIBSECTION from a DIB?") );
+        wxFAIL_MSG( wxT("failed to get DIBSECTION from a DIB?") );
 
         return NULL;
     }
@@ -1284,7 +1284,7 @@ void *wxBitmap::GetRawData(wxPixelDataBa
     // check that the bitmap is in correct format
     if ( ds.dsBm.bmBitsPixel != bpp )
     {
-        wxFAIL_MSG( _T("incorrect bitmap type in wxBitmap::GetRawData()") );
+        wxFAIL_MSG( wxT("incorrect bitmap type in wxBitmap::GetRawData()") );
 
         return NULL;
     }
@@ -1420,7 +1420,7 @@ bool wxMask::Create(const wxBitmap& bitm
 {
 #ifndef __WXMICROWIN__
     wxCHECK_MSG( bitmap.Ok() && bitmap.GetDepth() == 1, false,
-                 _T("can't create mask from invalid or not monochrome bitmap") );
+                 wxT("can't create mask from invalid or not monochrome bitmap") );
 
     if ( m_maskBitmap )
     {
@@ -1479,7 +1479,7 @@ bool wxMask::Create(const wxBitmap& bitm
 bool wxMask::Create(const wxBitmap& bitmap, const wxColour& colour)
 {
 #ifndef __WXMICROWIN__
-    wxCHECK_MSG( bitmap.Ok(), false, _T("invalid bitmap in wxMask::Create") );
+    wxCHECK_MSG( bitmap.Ok(), false, wxT("invalid bitmap in wxMask::Create") );
 
     if ( m_maskBitmap )
     {
@@ -1506,7 +1506,7 @@ bool wxMask::Create(const wxBitmap& bitm
 
     // SelectObject() will fail
     wxASSERT_MSG( !bitmap.GetSelectedInto(),
-                  _T("bitmap can't be selected in another DC") );
+                  wxT("bitmap can't be selected in another DC") );
 
     HGDIOBJ hbmpSrcOld = ::SelectObject(srcDC, GetHbitmapOf(bitmap));
     if ( !hbmpSrcOld )
@@ -1731,7 +1731,7 @@ HICON wxBitmapToIconOrCursor(const wxBit
         if ( !::BitBlt(dcDst, 0, 0, bmp.GetWidth(), bmp.GetHeight(),
                        dcSrc, 0, 0, SRCAND) )
         {
-            wxLogLastError(_T("BitBlt"));
+            wxLogLastError(wxT("BitBlt"));
         }
     }
 
@@ -1762,7 +1762,7 @@ HCURSOR wxBitmapToHCURSOR(const wxBitmap
 HBITMAP wxInvertMask(HBITMAP hbmpMask, int w, int h)
 {
 #ifndef __WXMICROWIN__
-    wxCHECK_MSG( hbmpMask, 0, _T("invalid bitmap in wxInvertMask") );
+    wxCHECK_MSG( hbmpMask, 0, wxT("invalid bitmap in wxInvertMask") );
 
     // get width/height from the bitmap if not given
     if ( !w || !h )
--- src/msw/utils.cpp-orig	2009-06-18 20:15:18.291370000 -0500
+++ src/msw/utils.cpp	2009-06-18 20:15:23.383921000 -0500
@@ -167,7 +167,7 @@ bool wxGetFullHostName(wxChar *buf, int 
     // missing, we handle this)
     wxLogNull noLog;
 
-    wxDynamicLibrary dllWinsock(_T("ws2_32.dll"), wxDL_VERBATIM);
+    wxDynamicLibrary dllWinsock(wxT("ws2_32.dll"), wxDL_VERBATIM);
     if ( dllWinsock.IsLoaded() )
     {
         typedef int (PASCAL *WSAStartup_t)(WORD, WSADATA *);
@@ -178,7 +178,7 @@ bool wxGetFullHostName(wxChar *buf, int 
 
         #define LOAD_WINSOCK_FUNC(func)                                       \
             func ## _t                                                        \
-                pfn ## func = (func ## _t)dllWinsock.GetSymbol(_T(#func))
+                pfn ## func = (func ## _t)dllWinsock.GetSymbol(wxT(#func))
 
         LOAD_WINSOCK_FUNC(WSAStartup);
 
@@ -286,7 +286,7 @@ bool wxGetUserId(wxChar *WXUNUSED_IN_WIN
 bool wxGetUserName(wxChar *buf, int maxSize)
 {
     wxCHECK_MSG( buf && ( maxSize > 0 ), false,
-                    _T("empty buffer in wxGetUserName") );
+                    wxT("empty buffer in wxGetUserName") );
 #if defined(__WXWINCE__)
     wxLogNull noLog;
     wxRegKey key(wxRegKey::HKCU, wxT("ControlPanel\\Owner"));
@@ -296,7 +296,7 @@ bool wxGetUserName(wxChar *buf, int maxS
     if(!key.QueryValue(wxT("Owner"),name))
         return false;
     wxStrncpy(buf, name.c_str(), maxSize-1);
-    buf[maxSize-1] = _T('\0');
+    buf[maxSize-1] = wxT('\0');
     return true;
 #elif defined(USE_NET_API)
     CHAR szUserName[256];
@@ -502,7 +502,7 @@ bool wxGetDiskSpace(const wxString& WXUN
     GetDiskFreeSpaceEx_t
         pGetDiskFreeSpaceEx = (GetDiskFreeSpaceEx_t)::GetProcAddress
                               (
-                                ::GetModuleHandle(_T("kernel32.dll")),
+                                ::GetModuleHandle(wxT("kernel32.dll")),
 #if wxUSE_UNICODE
                                 "GetDiskFreeSpaceExW"
 #else
@@ -520,7 +520,7 @@ bool wxGetDiskSpace(const wxString& WXUN
                                   &bytesTotal,
                                   NULL) )
         {
-            wxLogLastError(_T("GetDiskFreeSpaceEx"));
+            wxLogLastError(wxT("GetDiskFreeSpaceEx"));
 
             return false;
         }
@@ -571,7 +571,7 @@ bool wxGetDiskSpace(const wxString& WXUN
                                  &lNumberOfFreeClusters,
                                  &lTotalNumberOfClusters) )
         {
-            wxLogLastError(_T("GetDiskFreeSpace"));
+            wxLogLastError(wxT("GetDiskFreeSpace"));
 
             return false;
         }
@@ -637,7 +637,7 @@ bool wxSetEnv(const wxString& WXUNUSED_I
 #else
     if ( !::SetEnvironmentVariable(var, value) )
     {
-        wxLogLastError(_T("SetEnvironmentVariable"));
+        wxLogLastError(wxT("SetEnvironmentVariable"));
 
         return false;
     }
@@ -763,12 +763,12 @@ int wxKill(long pid, wxSignal sig, wxKil
                         //     can also use SendMesageTimeout(WM_CLOSE)
                         if ( !::PostMessage(params.hwnd, WM_QUIT, 0, 0) )
                         {
-                            wxLogLastError(_T("PostMessage(WM_QUIT)"));
+                            wxLogLastError(wxT("PostMessage(WM_QUIT)"));
                         }
                     }
                     else // it was an error then
                     {
-                        wxLogLastError(_T("EnumWindows"));
+                        wxLogLastError(wxT("EnumWindows"));
 
                         ok = false;
                     }
@@ -795,16 +795,16 @@ int wxKill(long pid, wxSignal sig, wxKil
                 // process terminated
                 if ( !::GetExitCodeProcess(hProcess, &rc) )
                 {
-                    wxLogLastError(_T("GetExitCodeProcess"));
+                    wxLogLastError(wxT("GetExitCodeProcess"));
                 }
                 break;
 
             default:
-                wxFAIL_MSG( _T("unexpected WaitForSingleObject() return") );
+                wxFAIL_MSG( wxT("unexpected WaitForSingleObject() return") );
                 // fall through
 
             case WAIT_FAILED:
-                wxLogLastError(_T("WaitForSingleObject"));
+                wxLogLastError(wxT("WaitForSingleObject"));
                 // fall through
 
             case WAIT_TIMEOUT:
@@ -849,7 +849,7 @@ static void InitToolHelp32()
 
 #if wxUSE_DYNLIB_CLASS
 
-    wxDynamicLibrary dllKernel(_T("kernel32.dll"), wxDL_VERBATIM);
+    wxDynamicLibrary dllKernel(wxT("kernel32.dll"), wxDL_VERBATIM);
 
     // Get procedure addresses.
     // We are linking to these functions of Kernel32
@@ -858,13 +858,13 @@ static void InitToolHelp32()
     // which does not have the Toolhelp32
     // functions in the Kernel 32.
     lpfCreateToolhelp32Snapshot =
-        (CreateToolhelp32Snapshot_t)dllKernel.RawGetSymbol(_T("CreateToolhelp32Snapshot"));
+        (CreateToolhelp32Snapshot_t)dllKernel.RawGetSymbol(wxT("CreateToolhelp32Snapshot"));
 
     lpfProcess32First =
-        (Process32_t)dllKernel.RawGetSymbol(_T("Process32First"));
+        (Process32_t)dllKernel.RawGetSymbol(wxT("Process32First"));
 
     lpfProcess32Next =
-        (Process32_t)dllKernel.RawGetSymbol(_T("Process32Next"));
+        (Process32_t)dllKernel.RawGetSymbol(wxT("Process32Next"));
 
 #endif // wxUSE_DYNLIB_CLASS
 }
@@ -992,7 +992,7 @@ bool wxShutdown(wxShutdownFlags WXUNUSED
                 break;
 
             default:
-                wxFAIL_MSG( _T("unknown wxShutdown() flag") );
+                wxFAIL_MSG( wxT("unknown wxShutdown() flag") );
                 return false;
         }
 
@@ -1038,16 +1038,16 @@ bool wxIsDebuggerRunning()
 {
 #if wxUSE_DYNLIB_CLASS
     // IsDebuggerPresent() is not available under Win95, so load it dynamically
-    wxDynamicLibrary dll(_T("kernel32.dll"), wxDL_VERBATIM);
+    wxDynamicLibrary dll(wxT("kernel32.dll"), wxDL_VERBATIM);
 
     typedef BOOL (WINAPI *IsDebuggerPresent_t)();
-    if ( !dll.HasSymbol(_T("IsDebuggerPresent")) )
+    if ( !dll.HasSymbol(wxT("IsDebuggerPresent")) )
     {
         // no way to know, assume no
         return false;
     }
 
-    return (*(IsDebuggerPresent_t)dll.GetSymbol(_T("IsDebuggerPresent")))() != 0;
+    return (*(IsDebuggerPresent_t)dll.GetSymbol(wxT("IsDebuggerPresent")))() != 0;
 #else
     return false;
 #endif
@@ -1116,7 +1116,7 @@ wxString wxGetOsDescription()
                 }
                 if ( !wxIsEmpty(info.szCSDVersion) )
                 {
-                    str << _T(" (") << info.szCSDVersion << _T(')');
+                    str << wxT(" (") << info.szCSDVersion << wxT(')');
                 }
                 break;
 
@@ -1162,15 +1162,15 @@ wxString wxGetOsDescription()
 
                 if ( !wxIsEmpty(info.szCSDVersion) )
                 {
-                    str << _T(", ") << info.szCSDVersion;
+                    str << wxT(", ") << info.szCSDVersion;
                 }
-                str << _T(')');
+                str << wxT(')');
                 break;
         }
     }
     else
     {
-        wxFAIL_MSG( _T("GetVersionEx() failed") ); // should never happen
+        wxFAIL_MSG( wxT("GetVersionEx() failed") ); // should never happen
     }
 
     return str;
@@ -1184,9 +1184,9 @@ bool wxIsPlatform64Bit()
     // 32-bit programs run on both 32-bit and 64-bit Windows so check
     typedef BOOL (WINAPI *IsWow64Process_t)(HANDLE, BOOL *);
 
-    wxDynamicLibrary dllKernel32(_T("kernel32.dll"));
+    wxDynamicLibrary dllKernel32(wxT("kernel32.dll"));
     IsWow64Process_t pfnIsWow64Process =
-        (IsWow64Process_t)dllKernel32.RawGetSymbol(_T("IsWow64Process"));
+        (IsWow64Process_t)dllKernel32.RawGetSymbol(wxT("IsWow64Process"));
 
     BOOL wow64 = FALSE;
     if ( pfnIsWow64Process )
@@ -1532,7 +1532,7 @@ extern "C" WXDLLIMPEXP_BASE HWND
 wxCreateHiddenWindow(LPCTSTR *pclassname, LPCTSTR classname, WNDPROC wndproc)
 {
     wxCHECK_MSG( classname && pclassname && wndproc, NULL,
-                    _T("NULL parameter in wxCreateHiddenWindow") );
+                    wxT("NULL parameter in wxCreateHiddenWindow") );
 
     // register the class fi we need to first
     if ( *pclassname == NULL )
--- src/msw/dirdlg.cpp-orig	2009-06-18 20:15:29.869055000 -0500
+++ src/msw/dirdlg.cpp	2009-06-18 20:15:35.711683000 -0500
@@ -100,19 +100,19 @@ void wxDirDialog::SetPath(const wxString
     m_path = path;
 
     // SHBrowseForFolder doesn't like '/'s nor the trailing backslashes
-    m_path.Replace(_T("/"), _T("\\"));
+    m_path.Replace(wxT("/"), wxT("\\"));
     if ( !m_path.empty() )
     {
-        while ( *(m_path.end() - 1) == _T('\\') )
+        while ( *(m_path.end() - 1) == wxT('\\') )
         {
             m_path.erase(m_path.length() - 1);
         }
 
         // but the root drive should have a trailing slash (again, this is just
         // the way the native dialog works)
-        if ( *(m_path.end() - 1) == _T(':') )
+        if ( *(m_path.end() - 1) == wxT(':') )
         {
-            m_path += _T('\\');
+            m_path += wxT('\\');
         }
     }
 }
--- src/msw/statbmp.cpp-orig	2009-06-18 20:15:42.235164000 -0500
+++ src/msw/statbmp.cpp	2009-06-18 20:15:48.091465000 -0500
@@ -119,7 +119,7 @@ static wxGDIImage* ConvertImage( const w
     if( !isIcon )
     {
         wxASSERT_MSG( wxDynamicCast(&bitmap, wxBitmap),
-                      _T("not an icon and not a bitmap?") );
+                      wxT("not an icon and not a bitmap?") );
 
         const wxBitmap& bmp = (const wxBitmap&)bitmap;
         wxMask *mask = bmp.GetMask();
@@ -158,7 +158,7 @@ bool wxStaticBitmap::Create(wxWindow *pa
     m_isIcon = image->IsKindOf( CLASSINFO(wxIcon) );
 
     // create the native control
-    if ( !MSWCreateControl(_T("STATIC"), wxEmptyString, pos, size) )
+    if ( !MSWCreateControl(wxT("STATIC"), wxEmptyString, pos, size) )
     {
         // control creation failed
         return false;
@@ -216,10 +216,10 @@ bool wxStaticBitmap::ImageIsOk() const
 
 wxIcon wxStaticBitmap::GetIcon() const
 {
-    wxCHECK_MSG( m_image, wxIcon(), _T("no image in wxStaticBitmap") );
+    wxCHECK_MSG( m_image, wxIcon(), wxT("no image in wxStaticBitmap") );
 
     // we can't ask for an icon if all we have is a bitmap
-    wxCHECK_MSG( m_isIcon, wxIcon(), _T("no icon in this wxStaticBitmap") );
+    wxCHECK_MSG( m_isIcon, wxIcon(), wxT("no icon in this wxStaticBitmap") );
 
     return *(wxIcon *)m_image;
 }
@@ -236,7 +236,7 @@ wxBitmap wxStaticBitmap::GetBitmap() con
     }
     else // we have a bitmap
     {
-        wxCHECK_MSG( m_image, wxBitmap(), _T("no image in wxStaticBitmap") );
+        wxCHECK_MSG( m_image, wxBitmap(), wxT("no image in wxStaticBitmap") );
 
         return *(wxBitmap *)m_image;
     }
--- src/msw/control.cpp-orig	2009-06-18 20:16:16.841626000 -0500
+++ src/msw/control.cpp	2009-06-18 20:16:20.917530000 -0500
@@ -154,7 +154,7 @@ bool wxControl::MSWCreateControl(const w
 #ifdef __WXDEBUG__
         wxFAIL_MSG(wxString::Format
                    (
-                    _T("CreateWindowEx(\"%s\", flags=%08x, ex=%08x) failed"),
+                    wxT("CreateWindowEx(\"%s\", flags=%08x, ex=%08x) failed"),
                     classname, (unsigned int)style, (unsigned int)exstyle
                    ));
 #endif // __WXDEBUG__
--- src/msw/filedlg.cpp-orig	2009-06-18 20:15:53.175568000 -0500
+++ src/msw/filedlg.cpp	2009-06-18 20:16:01.664304000 -0500
@@ -151,8 +151,8 @@ void wxFileDialog::GetPaths(wxArrayStrin
     paths.Empty();
 
     wxString dir(m_dir);
-    if ( m_dir.Last() != _T('\\') )
-        dir += _T('\\');
+    if ( m_dir.Last() != wxT('\\') )
+        dir += wxT('\\');
 
     size_t count = m_fileNames.GetCount();
     for ( size_t n = 0; n < count; n++ )
@@ -174,7 +174,7 @@ void wxFileDialog::SetPath(const wxStrin
     wxString ext;
     wxSplitPath(path, &m_dir, &m_fileName, &ext);
     if ( !ext.empty() )
-        m_fileName << _T('.') << ext;
+        m_fileName << wxT('.') << ext;
 }
 
 void wxFileDialog::DoGetPosition(int *x, int *y) const
@@ -342,17 +342,17 @@ int wxFileDialog::ShowModal()
         wxChar ch = m_dir[i];
         switch ( ch )
         {
-            case _T('/'):
+            case wxT('/'):
                 // convert to backslash
-                ch = _T('\\');
+                ch = wxT('\\');
 
                 // fall through
 
-            case _T('\\'):
+            case wxT('\\'):
                 while ( i < len - 1 )
                 {
                     wxChar chNext = m_dir[i + 1];
-                    if ( chNext != _T('\\') && chNext != _T('/') )
+                    if ( chNext != wxT('\\') && chNext != wxT('/') )
                         break;
 
                     // ignore the next one, unless it is at the start of a UNC path
@@ -378,7 +378,7 @@ int wxFileDialog::ShowModal()
 
     size_t items = wxParseCommonDialogsFilter(m_wildCard, wildDescriptions, wildFilters);
 
-    wxASSERT_MSG( items > 0 , _T("empty wildcard list") );
+    wxASSERT_MSG( items > 0 , wxT("empty wildcard list") );
 
     wxString filterBuffer;
 
@@ -447,7 +447,7 @@ int wxFileDialog::ShowModal()
                 of.lpstrFile[0] )
     {
         // this can happen if the default file name is invalid, try without it now
-        of.lpstrFile[0] = _T('\0');
+        of.lpstrFile[0] = wxT('\0');
         success = DoShowCommFileDialog(&of, m_windowStyle, &errCode);
     }
 
@@ -504,7 +504,7 @@ int wxFileDialog::ShowModal()
                 i += wxStrlen(&fileNameBuffer[i]) + 1;
             }
 #else
-            wxStringTokenizer toke(fileNameBuffer, _T(" \t\r\n"));
+            wxStringTokenizer toke(fileNameBuffer, wxT(" \t\r\n"));
             m_dir = toke.GetNextToken();
             m_fileName = toke.GetNextToken();
             m_fileNames.Add(m_fileName);
@@ -514,8 +514,8 @@ int wxFileDialog::ShowModal()
 #endif // OFN_EXPLORER
 
             wxString dir(m_dir);
-            if ( m_dir.Last() != _T('\\') )
-                dir += _T('\\');
+            if ( m_dir.Last() != wxT('\\') )
+                dir += wxT('\\');
 
             m_path = dir + m_fileName;
             m_filterIndex = (int)of.nFilterIndex - 1;
--- src/msw/mdi.cpp-orig	2009-06-18 20:16:25.546872000 -0500
+++ src/msw/mdi.cpp	2009-06-18 20:16:38.389635000 -0500
@@ -391,7 +391,7 @@ void wxMDIParentFrame::Cascade()
 void wxMDIParentFrame::Tile(wxOrientation orient)
 {
     wxASSERT_MSG( orient == wxHORIZONTAL || orient == wxVERTICAL,
-                  _T("invalid orientation value") );
+                  wxT("invalid orientation value") );
 
     ::SendMessage(GetWinHwnd(GetClientWindow()), WM_MDITILE,
                   orient == wxHORIZONTAL ? MDITILE_HORIZONTAL
@@ -767,7 +767,7 @@ bool wxMDIChildFrame::Create(wxMDIParent
 
   if ( !m_hWnd )
   {
-      wxLogLastError(_T("WM_MDICREATE"));
+      wxLogLastError(wxT("WM_MDICREATE"));
       return false;
   }
 
@@ -1395,7 +1395,7 @@ static void MDISetMenu(wxWindow *win, HM
                             (WPARAM)hmenuFrame,
                             (LPARAM)hmenuWindow) )
         {
-            wxLogLastError(_T("SendMessage(WM_MDISETMENU)"));
+            wxLogLastError(wxT("SendMessage(WM_MDISETMENU)"));
         }
     }
 
--- src/msw/checkbox.cpp-orig	2009-06-18 20:16:43.616625000 -0500
+++ src/msw/checkbox.cpp	2009-06-18 20:16:51.815830000 -0500
@@ -470,7 +470,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
             break;
 
         default:
-            wxFAIL_MSG( _T("unexpected Get3StateValue() return value") );
+            wxFAIL_MSG( wxT("unexpected Get3StateValue() return value") );
             // fall through
 
         case wxCHK_UNCHECKED:
@@ -483,7 +483,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
 
     if ( !::DrawFrameControl(hdc, &rectCheck, DFC_BUTTON, state) )
     {
-        wxLogLastError(_T("DrawFrameControl(DFC_BUTTON)"));
+        wxLogLastError(wxT("DrawFrameControl(DFC_BUTTON)"));
     }
 #else // XP version
     wxUxThemeEngine *themeEngine = wxUxThemeEngine::GetIfActive();
@@ -506,7 +506,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
             break;
 
         default:
-            wxFAIL_MSG( _T("unexpected Get3StateValue() return value") );
+            wxFAIL_MSG( wxT("unexpected Get3StateValue() return value") );
             // fall through
 
         case wxCHK_UNCHECKED:
@@ -532,7 +532,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
                               );
     if ( FAILED(hr) )
     {
-        wxLogApiError(_T("DrawThemeBackground(BP_CHECKBOX)"), hr);
+        wxLogApiError(wxT("DrawThemeBackground(BP_CHECKBOX)"), hr);
     }
 #endif // 0/1
 
@@ -557,7 +557,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
         if ( !::DrawText(hdc, label, label.length(), &rectLabel,
                          fmt | DT_CALCRECT) )
         {
-            wxLogLastError(_T("DrawText(DT_CALCRECT)"));
+            wxLogLastError(wxT("DrawText(DT_CALCRECT)"));
         }
     }
 
@@ -568,7 +568,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
 
     if ( !::DrawText(hdc, label, label.length(), &rectLabel, fmt) )
     {
-        wxLogLastError(_T("DrawText()"));
+        wxLogLastError(wxT("DrawText()"));
     }
 
     // finally draw the focus
@@ -578,7 +578,7 @@ bool wxCheckBox::MSWOnDraw(WXDRAWITEMSTR
         rectLabel.right++;
         if ( !::DrawFocusRect(hdc, &rectLabel) )
         {
-            wxLogLastError(_T("DrawFocusRect()"));
+            wxLogLastError(wxT("DrawFocusRect()"));
         }
     }
 
--- src/msw/dib.cpp-orig	2009-06-18 20:16:55.853632000 -0500
+++ src/msw/dib.cpp	2009-06-18 20:17:00.625998000 -0500
@@ -91,7 +91,7 @@ bool wxDIB::Create(int width, int height
 {
     // we don't support formats using palettes right now so we only create
     // either 24bpp (RGB) or 32bpp (RGBA) bitmaps
-    wxASSERT_MSG( depth, _T("invalid image depth in wxDIB::Create()") );
+    wxASSERT_MSG( depth, wxT("invalid image depth in wxDIB::Create()") );
     if ( depth < 24 )
         depth = 24;
 
@@ -99,7 +99,7 @@ bool wxDIB::Create(int width, int height
     static const int sizeHeader = sizeof(BITMAPINFOHEADER);
 
     BITMAPINFO *info = (BITMAPINFO *)malloc(sizeHeader);
-    wxCHECK_MSG( info, false, _T("malloc(BITMAPINFO) failed") );
+    wxCHECK_MSG( info, false, wxT("malloc(BITMAPINFO) failed") );
 
     memset(info, 0, sizeHeader);
 
@@ -145,7 +145,7 @@ bool wxDIB::Create(int width, int height
 
 bool wxDIB::Create(const wxBitmap& bmp)
 {
-    wxCHECK_MSG( bmp.Ok(), false, _T("wxDIB::Create(): invalid bitmap") );
+    wxCHECK_MSG( bmp.Ok(), false, wxT("wxDIB::Create(): invalid bitmap") );
 
     if ( !Create(GetHbitmapOf(bmp)) )
         return false;
@@ -232,7 +232,7 @@ bool wxDIB::CopyFromDDB(HBITMAP hbmp)
                     SRCCOPY
                   ) )
     {
-        wxLogLastError(_T("BitBlt(DDB -> DIB)"));
+        wxLogLastError(wxT("BitBlt(DDB -> DIB)"));
 
         return false;
     }
@@ -248,7 +248,7 @@ bool wxDIB::CopyFromDDB(HBITMAP hbmp)
     if ( !GetDIBSection(m_handle, &ds) )
     {
         // we're sure that our handle is a DIB section, so this should work
-        wxFAIL_MSG( _T("GetObject(DIBSECTION) unexpectedly failed") );
+        wxFAIL_MSG( wxT("GetObject(DIBSECTION) unexpectedly failed") );
 
         return false;
     }
@@ -295,7 +295,7 @@ bool wxDIB::Load(const wxString& filenam
 
     if ( !m_handle )
     {
-        wxLogLastError(_T("Loading DIB from file"));
+        wxLogLastError(wxT("Loading DIB from file"));
 
         return false;
     }
@@ -305,7 +305,7 @@ bool wxDIB::Load(const wxString& filenam
 
 bool wxDIB::Save(const wxString& filename)
 {
-    wxCHECK_MSG( m_handle, false, _T("wxDIB::Save(): invalid object") );
+    wxCHECK_MSG( m_handle, false, wxT("wxDIB::Save(): invalid object") );
 
     wxFile file(filename, wxFile::write);
     bool ok = file.IsOpened();
@@ -314,7 +314,7 @@ bool wxDIB::Save(const wxString& filenam
         DIBSECTION ds;
         if ( !GetDIBSection(m_handle, &ds) )
         {
-            wxLogLastError(_T("GetObject(hDIB)"));
+            wxLogLastError(wxT("GetObject(hDIB)"));
         }
         else
         {
@@ -363,7 +363,7 @@ void wxDIB::DoGetObject() const
         DIBSECTION ds;
         if ( !GetDIBSection(m_handle, &ds) )
         {
-            wxLogLastError(_T("GetObject(hDIB)"));
+            wxLogLastError(wxT("GetObject(hDIB)"));
             return;
         }
 
@@ -384,12 +384,12 @@ void wxDIB::DoGetObject() const
 
 HBITMAP wxDIB::CreateDDB(HDC hdc) const
 {
-    wxCHECK_MSG( m_handle, 0, _T("wxDIB::CreateDDB(): invalid object") );
+    wxCHECK_MSG( m_handle, 0, wxT("wxDIB::CreateDDB(): invalid object") );
 
     DIBSECTION ds;
     if ( !GetDIBSection(m_handle, &ds) )
     {
-        wxLogLastError(_T("GetObject(hDIB)"));
+        wxLogLastError(wxT("GetObject(hDIB)"));
 
         return 0;
     }
@@ -424,7 +424,7 @@ HBITMAP wxDIB::CreateDDB(HDC hdc) const
 /* static */
 HBITMAP wxDIB::ConvertToBitmap(const BITMAPINFO *pbmi, HDC hdc, void *bits)
 {
-    wxCHECK_MSG( pbmi, 0, _T("invalid DIB in ConvertToBitmap") );
+    wxCHECK_MSG( pbmi, 0, wxT("invalid DIB in ConvertToBitmap") );
 
     // here we get BITMAPINFO struct followed by the actual bitmap bits and
     // BITMAPINFO starts with BITMAPINFOHEADER followed by colour info
@@ -570,7 +570,7 @@ HGLOBAL wxDIB::ConvertFromBitmap(HBITMAP
     {
         // this really shouldn't happen... it worked the first time, why not
         // now?
-        wxFAIL_MSG( _T("wxDIB::ConvertFromBitmap() unexpectedly failed") );
+        wxFAIL_MSG( wxT("wxDIB::ConvertFromBitmap() unexpectedly failed") );
 
         return NULL;
     }
@@ -592,12 +592,12 @@ wxPalette *wxDIB::CreatePalette() const
 #if defined(_WIN32_WCE) && _WIN32_WCE < 400
     return NULL;
 #else
-    wxCHECK_MSG( m_handle, NULL, _T("wxDIB::CreatePalette(): invalid object") );
+    wxCHECK_MSG( m_handle, NULL, wxT("wxDIB::CreatePalette(): invalid object") );
 
     DIBSECTION ds;
     if ( !GetDIBSection(m_handle, &ds) )
     {
-        wxLogLastError(_T("GetObject(hDIB)"));
+        wxLogLastError(wxT("GetObject(hDIB)"));
 
         return 0;
     }
@@ -625,7 +625,7 @@ wxPalette *wxDIB::CreatePalette() const
     // going to have biClrUsed of them so add necessary space
     LOGPALETTE *pPalette = (LOGPALETTE *)
         malloc(sizeof(LOGPALETTE) + (biClrUsed - 1)*sizeof(PALETTEENTRY));
-    wxCHECK_MSG( pPalette, NULL, _T("out of memory") );
+    wxCHECK_MSG( pPalette, NULL, wxT("out of memory") );
 
     // initialize the palette header
     pPalette->palVersion = 0x300;  // magic number, not in docs but works
@@ -650,7 +650,7 @@ wxPalette *wxDIB::CreatePalette() const
 
     if ( !hPalette )
     {
-        wxLogLastError(_T("CreatePalette"));
+        wxLogLastError(wxT("CreatePalette"));
 
         return NULL;
     }
@@ -672,7 +672,7 @@ wxPalette *wxDIB::CreatePalette() const
 
 bool wxDIB::Create(const wxImage& image)
 {
-    wxCHECK_MSG( image.Ok(), false, _T("invalid wxImage in wxDIB ctor") );
+    wxCHECK_MSG( image.Ok(), false, wxT("invalid wxImage in wxDIB ctor") );
 
     const int h = image.GetHeight();
     const int w = image.GetWidth();
--- src/msw/cursor.cpp-orig	2009-06-18 20:17:06.433559000 -0500
+++ src/msw/cursor.cpp	2009-06-18 20:17:11.837403000 -0500
@@ -185,7 +185,7 @@ wxCursor::wxCursor(const wxImage& image)
 
     wxASSERT_MSG( hotSpotX >= 0 && hotSpotX < image_w &&
                   hotSpotY >= 0 && hotSpotY < image_h,
-                  _T("invalid cursor hot spot coordinates") );
+                  wxT("invalid cursor hot spot coordinates") );
 
     wxImage imageSized(image); // final image of correct size
 
@@ -279,7 +279,7 @@ wxCursor::wxCursor(const wxString& filen
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown cursor resource type") );
+            wxFAIL_MSG( wxT("unknown cursor resource type") );
 
             hcursor = NULL;
     }
@@ -305,27 +305,27 @@ wxCursor::wxCursor(int idCursor)
     {
         {  true, NULL                        }, // wxCURSOR_NONE
         {  true, IDC_ARROW                   }, // wxCURSOR_ARROW
-        { false, _T("WXCURSOR_RIGHT_ARROW")  }, // wxCURSOR_RIGHT_ARROW
-        { false, _T("WXCURSOR_BULLSEYE")     }, // wxCURSOR_BULLSEYE
+        { false, wxT("WXCURSOR_RIGHT_ARROW")  }, // wxCURSOR_RIGHT_ARROW
+        { false, wxT("WXCURSOR_BULLSEYE")     }, // wxCURSOR_BULLSEYE
         {  true, IDC_ARROW                   }, // WXCURSOR_CHAR
 
         // Displays as an I-beam on XP, so use a cursor file
 //        {  true, IDC_CROSS                   }, // WXCURSOR_CROSS
-        {  false, _T("WXCURSOR_CROSS")       }, // WXCURSOR_CROSS
+        {  false, wxT("WXCURSOR_CROSS")       }, // WXCURSOR_CROSS
 
         // See special handling below for wxCURSOR_HAND
-//        { false, _T("WXCURSOR_HAND")         }, // wxCURSOR_HAND
+//        { false, wxT("WXCURSOR_HAND")         }, // wxCURSOR_HAND
         {  true, IDC_HAND                    }, // wxCURSOR_HAND
 
         {  true, IDC_IBEAM                   }, // WXCURSOR_IBEAM
         {  true, IDC_ARROW                   }, // WXCURSOR_LEFT_BUTTON
-        { false, _T("WXCURSOR_MAGNIFIER")    }, // wxCURSOR_MAGNIFIER
+        { false, wxT("WXCURSOR_MAGNIFIER")    }, // wxCURSOR_MAGNIFIER
         {  true, IDC_ARROW                   }, // WXCURSOR_MIDDLE_BUTTON
         {  true, IDC_NO                      }, // WXCURSOR_NO_ENTRY
-        { false, _T("WXCURSOR_PBRUSH")       }, // wxCURSOR_PAINT_BRUSH
-        { false, _T("WXCURSOR_PENCIL")       }, // wxCURSOR_PENCIL
-        { false, _T("WXCURSOR_PLEFT")        }, // wxCURSOR_POINT_LEFT
-        { false, _T("WXCURSOR_PRIGHT")       }, // wxCURSOR_POINT_RIGHT
+        { false, wxT("WXCURSOR_PBRUSH")       }, // wxCURSOR_PAINT_BRUSH
+        { false, wxT("WXCURSOR_PENCIL")       }, // wxCURSOR_PENCIL
+        { false, wxT("WXCURSOR_PLEFT")        }, // wxCURSOR_POINT_LEFT
+        { false, wxT("WXCURSOR_PRIGHT")       }, // wxCURSOR_POINT_RIGHT
         {  true, IDC_HELP                    }, // WXCURSOR_QUESTION_ARROW
         {  true, IDC_ARROW                   }, // WXCURSOR_RIGHT_BUTTON
         {  true, IDC_SIZENESW                }, // WXCURSOR_SIZENESW
@@ -333,10 +333,10 @@ wxCursor::wxCursor(int idCursor)
         {  true, IDC_SIZENWSE                }, // WXCURSOR_SIZENWSE
         {  true, IDC_SIZEWE                  }, // WXCURSOR_SIZEWE
         {  true, IDC_SIZEALL                 }, // WXCURSOR_SIZING
-        { false, _T("WXCURSOR_PBRUSH")       }, // wxCURSOR_SPRAYCAN
+        { false, wxT("WXCURSOR_PBRUSH")       }, // wxCURSOR_SPRAYCAN
         {  true, IDC_WAIT                    }, // WXCURSOR_WAIT
         {  true, IDC_WAIT                    }, // WXCURSOR_WATCH
-        { false, _T("WXCURSOR_BLANK")        }, // wxCURSOR_BLANK
+        { false, wxT("WXCURSOR_BLANK")        }, // wxCURSOR_BLANK
         {  true, IDC_APPSTARTING             }, // wxCURSOR_ARROWWAIT
 
         // no entry for wxCURSOR_MAX
@@ -346,7 +346,7 @@ wxCursor::wxCursor(int idCursor)
                            CursorsIdArrayMismatch );
 
     wxCHECK_RET( idCursor > 0 && (size_t)idCursor < WXSIZEOF(stdCursors),
-                 _T("invalid cursor id in wxCursor() ctor") );
+                 wxT("invalid cursor id in wxCursor() ctor") );
 
     const StdCursor& stdCursor = stdCursors[idCursor];
     bool deleteLater = !stdCursor.isStd;
@@ -357,13 +357,13 @@ wxCursor::wxCursor(int idCursor)
     // IDC_HAND may not be available on some versions of Windows.
     if ( !hcursor && idCursor == wxCURSOR_HAND)
     {
-        hcursor = ::LoadCursor(wxGetInstance(), _T("WXCURSOR_HAND"));
+        hcursor = ::LoadCursor(wxGetInstance(), wxT("WXCURSOR_HAND"));
         deleteLater = true;
     }
 
     if ( !hcursor )
     {
-        wxLogLastError(_T("LoadCursor"));
+        wxLogLastError(wxT("LoadCursor"));
     }
     else
     {
--- src/msw/utilsexc.cpp-orig	2009-06-18 20:17:19.381327000 -0500
+++ src/msw/utilsexc.cpp	2009-06-18 20:17:25.740996000 -0500
@@ -135,7 +135,7 @@ public:
         {
             if ( !::UnregisterClass(wxMSWEXEC_WNDCLASSNAME, wxGetInstance()) )
             {
-                wxLogLastError(_T("UnregisterClass(wxExecClass)"));
+                wxLogLastError(wxT("UnregisterClass(wxExecClass)"));
             }
 
             gs_classForHiddenWindow = NULL;
@@ -283,7 +283,7 @@ static DWORD __stdcall wxExecuteThread(v
 
     if ( ::WaitForSingleObject(data->hProcess, INFINITE) != WAIT_OBJECT_0 )
     {
-        wxLogDebug(_T("Waiting for the process termination failed!"));
+        wxLogDebug(wxT("Waiting for the process termination failed!"));
     }
 
     // get the exit code
@@ -391,7 +391,7 @@ bool wxPipeInputStream::CanRead() const
         if ( ::GetLastError() != ERROR_BROKEN_PIPE )
         {
             // unexpected error
-            wxLogLastError(_T("PeekNamedPipe"));
+            wxLogLastError(wxT("PeekNamedPipe"));
         }
 
         // don't try to continue reading from a pipe if an error occurred or if
@@ -448,7 +448,7 @@ wxPipeOutputStream::wxPipeOutputStream(H
                 NULL        // timeout (we don't set it neither)
             ) )
     {
-        wxLogLastError(_T("SetNamedPipeHandleState(PIPE_NOWAIT)"));
+        wxLogLastError(wxT("SetNamedPipeHandleState(PIPE_NOWAIT)"));
     }
 }
 
@@ -545,7 +545,7 @@ long wxExecute(const wxString& cmd, int 
     // thread -- this could be fixed, but as Unix versions don't support this
     // neither I don't want to waste time on this now
     wxASSERT_MSG( wxThread::IsMain(),
-                    _T("wxExecute() can be called only from the main thread") );
+                    wxT("wxExecute() can be called only from the main thread") );
 #endif // wxUSE_THREADS
 
     wxString command;
@@ -561,7 +561,7 @@ long wxExecute(const wxString& cmd, int 
     // case we execute just <command> and process the rest below
     wxString ddeServer, ddeTopic, ddeCommand;
     static const size_t lenDdePrefix = 7;   // strlen("WX_DDE:")
-    if ( cmd.Left(lenDdePrefix) == _T("WX_DDE#") )
+    if ( cmd.Left(lenDdePrefix) == wxT("WX_DDE#") )
     {
         // speed up the concatenations below
         ddeServer.reserve(256);
@@ -569,7 +569,7 @@ long wxExecute(const wxString& cmd, int 
         ddeCommand.reserve(256);
 
         const wxChar *p = cmd.c_str() + 7;
-        while ( *p && *p != _T('#') )
+        while ( *p && *p != wxT('#') )
         {
             command += *p++;
         }
@@ -581,10 +581,10 @@ long wxExecute(const wxString& cmd, int 
         }
         else
         {
-            wxFAIL_MSG(_T("invalid WX_DDE command in wxExecute"));
+            wxFAIL_MSG(wxT("invalid WX_DDE command in wxExecute"));
         }
 
-        while ( *p && *p != _T('#') )
+        while ( *p && *p != wxT('#') )
         {
             ddeServer += *p++;
         }
@@ -596,10 +596,10 @@ long wxExecute(const wxString& cmd, int 
         }
         else
         {
-            wxFAIL_MSG(_T("invalid WX_DDE command in wxExecute"));
+            wxFAIL_MSG(wxT("invalid WX_DDE command in wxExecute"));
         }
 
-        while ( *p && *p != _T('#') )
+        while ( *p && *p != wxT('#') )
         {
             ddeTopic += *p++;
         }
@@ -611,7 +611,7 @@ long wxExecute(const wxString& cmd, int 
         }
         else
         {
-            wxFAIL_MSG(_T("invalid WX_DDE command in wxExecute"));
+            wxFAIL_MSG(wxT("invalid WX_DDE command in wxExecute"));
         }
 
         while ( *p )
@@ -708,7 +708,7 @@ long wxExecute(const wxString& cmd, int 
                     DUPLICATE_SAME_ACCESS   // same access as for src handle
                 ) )
         {
-            wxLogLastError(_T("DuplicateHandle"));
+            wxLogLastError(wxT("DuplicateHandle"));
         }
 
         ::CloseHandle(pipeInWrite);
@@ -876,14 +876,14 @@ long wxExecute(const wxString& cmd, int 
         switch ( ::WaitForInputIdle(pi.hProcess, 10000 /* 10 seconds */) )
         {
             default:
-                wxFAIL_MSG( _T("unexpected WaitForInputIdle() return code") );
+                wxFAIL_MSG( wxT("unexpected WaitForInputIdle() return code") );
                 // fall through
 
             case -1:
-                wxLogLastError(_T("WaitForInputIdle() in wxExecute"));
+                wxLogLastError(wxT("WaitForInputIdle() in wxExecute"));
 
             case WAIT_TIMEOUT:
-                wxLogDebug(_T("Timeout too small in WaitForInputIdle"));
+                wxLogDebug(wxT("Timeout too small in WaitForInputIdle"));
 
                 ok = false;
                 break;
@@ -895,7 +895,7 @@ long wxExecute(const wxString& cmd, int 
 
         if ( !ok )
         {
-            wxLogDebug(_T("Failed to send DDE request to the process \"%s\"."),
+            wxLogDebug(wxT("Failed to send DDE request to the process \"%s\"."),
                        cmd.c_str());
         }
     }
@@ -910,7 +910,7 @@ long wxExecute(const wxString& cmd, int 
     }
 
     wxAppTraits *traits = wxTheApp ? wxTheApp->GetTraits() : NULL;
-    wxCHECK_MSG( traits, -1, _T("no wxAppTraits in wxExecute()?") );
+    wxCHECK_MSG( traits, -1, wxT("no wxAppTraits in wxExecute()?") );
 
     void *cookie = NULL;
     if ( !(flags & wxEXEC_NODISABLE) )
@@ -972,15 +972,15 @@ long wxExecute(wxChar **argv, int flags,
         }
         else // non-empty
         {
-            if ( *arg.begin() != _T('"') || *arg.rbegin() != _T('"') )
+            if ( *arg.begin() != wxT('"') || *arg.rbegin() != wxT('"') )
             {
                 // escape any quotes present in the string to avoid interfering
                 // with the command line parsing in the child process
-                arg.Replace(_T("\""), _T("\\\""), true /* replace all */);
+                arg.Replace(wxT("\""), wxT("\\\""), true /* replace all */);
 
                 // and quote any arguments containing the spaces to prevent
                 // them from being broken down
-                quote = arg.find_first_of(_T(" \t")) != wxString::npos;
+                quote = arg.find_first_of(wxT(" \t")) != wxString::npos;
             }
             else // already quoted
             {
@@ -989,14 +989,14 @@ long wxExecute(wxChar **argv, int flags,
         }
 
         if ( quote )
-            command += _T('\"') + arg + _T('\"');
+            command += wxT('\"') + arg + wxT('\"');
         else
             command += arg;
 
         if ( !*argv )
             break;
 
-        command += _T(' ');
+        command += wxT(' ');
     }
 
     return wxExecute(command, flags, handler);
--- src/msw/scrolbar.cpp-orig	2009-06-18 20:17:32.023260000 -0500
+++ src/msw/scrolbar.cpp	2009-06-18 20:17:37.517297000 -0500
@@ -131,7 +131,7 @@ bool wxScrollBar::MSWOnScroll(int WXUNUS
 
         if ( !::GetScrollInfo(GetHwnd(), SB_CTL, &scrollInfo) )
         {
-            wxLogLastError(_T("GetScrollInfo"));
+            wxLogLastError(wxT("GetScrollInfo"));
         }
 
         trackPos = scrollInfo.nTrackPos;
@@ -255,7 +255,7 @@ int wxScrollBar::GetThumbPosition(void) 
 
     if ( !::GetScrollInfo(GetHwnd(), SB_CTL, &scrollInfo) )
     {
-        wxLogLastError(_T("GetScrollInfo"));
+        wxLogLastError(wxT("GetScrollInfo"));
     }
     return scrollInfo.nPos;
 //    return ::GetScrollPos((HWND)m_hWnd, SB_CTL);
--- src/msw/dcprint.cpp-orig	2009-06-18 20:17:42.955333000 -0500
+++ src/msw/dcprint.cpp	2009-06-18 20:17:48.795348000 -0500
@@ -325,7 +325,7 @@ WXHDC WXDLLEXPORT wxGetPrinterDC(const w
 
     HDC hDC = ::CreateDC(NULL, deviceName, NULL, lpDevMode);
     if ( !hDC )
-        wxLogLastError(_T("CreateDC(printer)"));
+        wxLogLastError(wxT("CreateDC(printer)"));
 
     if ( lpDevMode )
         ::GlobalUnlock(hDevMode);
@@ -353,7 +353,7 @@ bool DrawBitmapUsingStretchDIBits(HDC hd
     DIBSECTION ds;
     if ( !::GetObject(dib.GetHandle(), sizeof(ds), &ds) )
     {
-        wxLogLastError(_T("GetObject(DIBSECTION)"));
+        wxLogLastError(wxT("GetObject(DIBSECTION)"));
 
         return false;
     }
@@ -387,7 +387,7 @@ void wxPrinterDC::DoDrawBitmap(const wxB
                                wxCoord x, wxCoord y,
                                bool useMask)
 {
-    wxCHECK_RET( bmp.Ok(), _T("invalid bitmap in wxPrinterDC::DrawBitmap") );
+    wxCHECK_RET( bmp.Ok(), wxT("invalid bitmap in wxPrinterDC::DrawBitmap") );
 
     int width = bmp.GetWidth(),
         height = bmp.GetHeight();
--- src/msw/regconf.cpp-orig	2009-06-18 20:17:54.430194000 -0500
+++ src/msw/regconf.cpp	2009-06-18 20:18:03.123545000 -0500
@@ -245,7 +245,7 @@ void wxRegConfig::SetPath(const wxString
 
                 // note that we don't have to check for src < end here as
                 // *end == 0 so can't be '.'
-                if ( src[1] == _T('.') && src[2] == _T('.') &&
+                if ( src[1] == wxT('.') && src[2] == wxT('.') &&
                      (src + 3 == end || src[3] == wxCONFIG_PATH_SEPARATOR) )
                 {
                     if ( !totalSlashes )
@@ -280,7 +280,7 @@ void wxRegConfig::SetPath(const wxString
 
                         // we must have found a slash one way or another!
                         wxASSERT_MSG( *dst == wxCONFIG_PATH_SEPARATOR,
-                                      _T("error in wxRegConfig::SetPath") );
+                                      wxT("error in wxRegConfig::SetPath") );
 
                         // stay at the same position
                         dst--;
@@ -325,7 +325,7 @@ void wxRegConfig::SetPath(const wxString
             dst--;
         }
 
-        *dst = _T('\0');
+        *dst = wxT('\0');
         buf.SetLength(dst - start);
     }
 
@@ -350,7 +350,7 @@ void wxRegConfig::SetPath(const wxString
         for ( ; src < end; src++, dst++ )
         {
             if ( *src == wxCONFIG_PATH_SEPARATOR )
-                *dst = _T('\\');
+                *dst = wxT('\\');
             else
                 *dst = *src;
         }
@@ -550,7 +550,7 @@ wxConfigBase::EntryType wxRegConfig::Get
 
 bool wxRegConfig::DoReadString(const wxString& key, wxString *pStr) const
 {
-    wxCHECK_MSG( pStr, false, _T("wxRegConfig::Read(): NULL param") );
+    wxCHECK_MSG( pStr, false, wxT("wxRegConfig::Read(): NULL param") );
 
   wxConfigPathChanger path(this, key);
 
@@ -587,7 +587,7 @@ bool wxRegConfig::DoReadString(const wxS
 
 bool wxRegConfig::DoReadLong(const wxString& key, long *plResult) const
 {
-    wxCHECK_MSG( plResult, false, _T("wxRegConfig::Read(): NULL param") );
+    wxCHECK_MSG( plResult, false, wxT("wxRegConfig::Read(): NULL param") );
 
   wxConfigPathChanger path(this, key);
 
@@ -687,7 +687,7 @@ bool wxRegConfig::DeleteEntry(const wxSt
 
     if ( bGroupIfEmptyAlso && m_keyLocal.IsEmpty() ) {
       wxString strKey = GetPath().AfterLast(wxCONFIG_PATH_SEPARATOR);
-      SetPath(_T(".."));  // changes m_keyLocal
+      SetPath(wxT(".."));  // changes m_keyLocal
       return LocalKey().DeleteKey(strKey);
     }
   }
--- src/msw/statbox.cpp-orig	2009-06-18 20:18:50.381010000 -0500
+++ src/msw/statbox.cpp	2009-06-18 20:18:56.221914000 -0500
@@ -263,7 +263,7 @@ SubtractRectFromRgn(HRGN hrgn, int left,
     AutoHRGN hrgnRect(::CreateRectRgn(left, top, right, bottom));
     if ( !hrgnRect )
     {
-        wxLogLastError(_T("CreateRectRgn()"));
+        wxLogLastError(wxT("CreateRectRgn()"));
         return;
     }
 
--- src/msw/utilsgui.cpp-orig	2009-06-18 20:19:02.455428000 -0500
+++ src/msw/utilsgui.cpp	2009-06-18 20:19:09.188723000 -0500
@@ -471,11 +471,11 @@ extern bool wxEnableFileNameAutoComplete
         s_initialized = true;
 
         wxLogNull nolog;
-        wxDynamicLibrary dll(_T("shlwapi.dll"));
+        wxDynamicLibrary dll(wxT("shlwapi.dll"));
         if ( dll.IsLoaded() )
         {
             s_pfnSHAutoComplete =
-                (SHAutoComplete_t)dll.GetSymbol(_T("SHAutoComplete"));
+                (SHAutoComplete_t)dll.GetSymbol(wxT("SHAutoComplete"));
             if ( s_pfnSHAutoComplete )
             {
                 // won't be unloaded until the process termination, no big deal
@@ -490,7 +490,7 @@ extern bool wxEnableFileNameAutoComplete
     HRESULT hr = s_pfnSHAutoComplete(hwnd, 0x10 /* SHACF_FILESYS_ONLY */);
     if ( FAILED(hr) )
     {
-        wxLogApiError(_T("SHAutoComplete"), hr);
+        wxLogApiError(wxT("SHAutoComplete"), hr);
         return false;
     }
 
--- src/msw/fdrepdlg.cpp-orig	2009-06-18 20:19:37.455637000 -0500
+++ src/msw/fdrepdlg.cpp	2009-06-18 20:19:48.296828000 -0500
@@ -119,7 +119,7 @@ wxFindReplaceDialogImpl::wxFindReplaceDi
 
         if ( !ms_msgFindDialog )
         {
-            wxLogLastError(_T("RegisterWindowMessage(FINDMSGSTRING)"));
+            wxLogLastError(wxT("RegisterWindowMessage(FINDMSGSTRING)"));
         }
     }
 
@@ -193,7 +193,7 @@ void wxFindReplaceDialogImpl::SubclassDi
     // check that we don't subclass the parent twice: this would be a bad idea
     // as then we'd have infinite recursion in wxFindReplaceWindowProc
     wxCHECK_RET( wxGetWindowProc(hwnd) != &wxFindReplaceWindowProc,
-                 _T("can't have more than one find dialog currently") );
+                 wxT("can't have more than one find dialog currently") );
 
     // set the new one and save the old as user data to allow access to it
     // from wxFindReplaceWindowProc
@@ -281,7 +281,7 @@ LRESULT CALLBACK wxFindReplaceWindowProc
         }
         else
         {
-            wxFAIL_MSG( _T("unknown find dialog event") );
+            wxFAIL_MSG( wxT("unknown find dialog event") );
 
             return 0;
         }
@@ -322,7 +322,7 @@ LRESULT CALLBACK wxFindReplaceWindowProc
 
     // sanity check
     wxASSERT_MSG( wndProc != wxFindReplaceWindowProc,
-                  _T("infinite recursion detected") );
+                  wxT("infinite recursion detected") );
 
     return ::CallWindowProc(wndProc, hwnd, nMsg, wParam, lParam);
 }
@@ -391,7 +391,7 @@ wxFindReplaceDialog::~wxFindReplaceDialo
             // if it wasn't, delete the dialog ourselves
             if ( !::DestroyWindow(GetHwnd()) )
             {
-                wxLogLastError(_T("DestroyWindow(find dialog)"));
+                wxLogLastError(wxT("DestroyWindow(find dialog)"));
             }
         }
 
@@ -448,9 +448,9 @@ bool wxFindReplaceDialog::Show(bool show
         return true;
     }
 
-    wxCHECK_MSG( m_FindReplaceData, false, _T("call Create() first!") );
+    wxCHECK_MSG( m_FindReplaceData, false, wxT("call Create() first!") );
 
-    wxASSERT_MSG( !m_impl, _T("why don't we have the window then?") );
+    wxASSERT_MSG( !m_impl, wxT("why don't we have the window then?") );
 
     m_impl = new wxFindReplaceDialogImpl(this, m_FindReplaceData->GetFlags());
 
@@ -486,7 +486,7 @@ bool wxFindReplaceDialog::Show(bool show
 
     if ( !::ShowWindow(hwnd, SW_SHOW) )
     {
-        wxLogLastError(_T("ShowWindow(find dialog)"));
+        wxLogLastError(wxT("ShowWindow(find dialog)"));
     }
 
     m_hWnd = (WXHWND)hwnd;
--- src/msw/mediactrl.cpp-orig	2009-06-18 20:19:54.148858000 -0500
+++ src/msw/mediactrl.cpp	2009-06-18 20:19:59.231856000 -0500
@@ -2239,7 +2239,7 @@ bool wxAMMediaBackend::CreateControl(wxC
     // First get the AMGetErrorText procedure in
     // debug mode for more meaningful messages
 #ifdef __WXDEBUG__
-    if ( m_dllQuartz.Load(_T("quartz.dll"), wxDL_VERBATIM) )
+    if ( m_dllQuartz.Load(wxT("quartz.dll"), wxDL_VERBATIM) )
     {
         m_lpAMGetErrorText = (LPAMGETERRORTEXT)
                                 m_dllQuartz.GetSymbolAorW(wxT("AMGetErrorText"));
@@ -2811,7 +2811,7 @@ IMPLEMENT_DYNAMIC_CLASS(wxMCIMediaBacken
     { \
         TCHAR sz[5000]; \
         mciGetErrorString(nRet, sz, 5000); \
-        wxFAIL_MSG(wxString::Format(_T("MCI Error:%s"), sz)); \
+        wxFAIL_MSG(wxString::Format(wxT("MCI Error:%s"), sz)); \
     } \
 }
 #else
--- src/msw/dialog.cpp-orig	2009-06-18 20:20:03.204464000 -0500
+++ src/msw/dialog.cpp	2009-06-18 20:20:07.714049000 -0500
@@ -301,7 +301,7 @@ void wxDialog::Raise()
 // show dialog modally
 int wxDialog::ShowModal()
 {
-    wxASSERT_MSG( !IsModal(), _T("wxDialog::ShowModal() reentered?") );
+    wxASSERT_MSG( !IsModal(), wxT("wxDialog::ShowModal() reentered?") );
 
     m_endModalCalled = false;
 
@@ -358,7 +358,7 @@ int wxDialog::ShowModal()
 
 void wxDialog::EndModal(int retCode)
 {
-    wxASSERT_MSG( IsModal(), _T("EndModal() called for non modal dialog") );
+    wxASSERT_MSG( IsModal(), wxT("EndModal() called for non modal dialog") );
 
     m_endModalCalled = true;
     SetReturnCode(retCode);
--- src/msw/settings.cpp-orig	2009-06-18 20:20:12.329149000 -0500
+++ src/msw/settings.cpp	2009-06-18 20:20:19.382480000 -0500
@@ -191,7 +191,7 @@ wxColour wxSystemSettingsNative::GetColo
                 unsigned int n = index - wxSYS_COLOUR_BTNHIGHLIGHT;
 
                 wxASSERT_MSG( n < WXSIZEOF(s_defaultSysColors),
-                              _T("forgot tp update the default colours array") );
+                              wxT("forgot tp update the default colours array") );
 
                 colSys = s_defaultSysColors[n];
                 hasCol = true;
@@ -245,12 +245,12 @@ wxFont wxCreateFontFromStockObject(int i
         }
         else
         {
-            wxFAIL_MSG( _T("failed to get LOGFONT") );
+            wxFAIL_MSG( wxT("failed to get LOGFONT") );
         }
     }
     else // GetStockObject() failed
     {
-        wxFAIL_MSG( _T("stock font not found") );
+        wxFAIL_MSG( wxT("stock font not found") );
     }
 
     return font;
@@ -397,7 +397,7 @@ int wxSystemSettingsNative::GetMetric(wx
     return 0;
 #else // !__WXMICROWIN__
     wxCHECK_MSG( index > 0 && (size_t)index < WXSIZEOF(gs_metricsMap), 0,
-                 _T("invalid metric") );
+                 wxT("invalid metric") );
 
     int indexMSW = gs_metricsMap[index];
     if ( indexMSW == -1 )
@@ -429,7 +429,7 @@ bool wxSystemSettingsNative::HasFeature(
             return ::GetSystemMetrics(SM_TABLETPC) != 0;
 
         default:
-            wxFAIL_MSG( _T("unknown system feature") );
+            wxFAIL_MSG( wxT("unknown system feature") );
 
             return false;
     }
@@ -481,7 +481,7 @@ extern wxFont wxGetCCDefaultFont()
         }
         else
         {
-            wxLogLastError(_T("SystemParametersInfo(SPI_GETICONTITLELOGFONT"));
+            wxLogLastError(wxT("SystemParametersInfo(SPI_GETICONTITLELOGFONT"));
         }
     }
 #endif // __WXWINCE__
--- src/msw/stattext.cpp-orig	2009-06-18 20:20:25.126337000 -0500
+++ src/msw/stattext.cpp	2009-06-18 20:20:29.195391000 -0500
@@ -164,7 +164,7 @@ wxSize wxStaticText::DoGetBestSize() con
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown border style") );
+            wxFAIL_MSG( wxT("unknown border style") );
             // fall through
 
         case wxBORDER_NONE:
--- src/msw/choice.cpp-orig	2009-06-18 20:20:34.536642000 -0500
+++ src/msw/choice.cpp	2009-06-18 20:20:39.236972000 -0500
@@ -117,8 +117,8 @@ bool wxChoice::Create(wxWindow *parent,
     wxASSERT_MSG( !(style & wxCB_DROPDOWN) &&
                   !(style & wxCB_READONLY) &&
                   !(style & wxCB_SIMPLE),
-                  _T("this style flag is ignored by wxChoice, you ")
-                  _T("probably want to use a wxComboBox") );
+                  wxT("this style flag is ignored by wxChoice, you ")
+                  wxT("probably want to use a wxComboBox") );
 
     return CreateAndInit(parent, id, pos, size, n, choices, style,
                          validator, name);
--- src/msw/aboutdlg.cpp-orig	2009-06-18 20:20:45.819599000 -0500
+++ src/msw/aboutdlg.cpp	2009-06-18 20:20:50.997664000 -0500
@@ -50,10 +50,10 @@ void wxAboutBox(const wxAboutDialogInfo&
         msg << name;
         if ( info.HasVersion() )
             msg << _(" Version ") << info.GetVersion();
-        msg << _T('\n');
+        msg << wxT('\n');
 
         if ( info.HasCopyright() )
-            msg << info.GetCopyrightToDisplay() << _T('\n');
+            msg << info.GetCopyrightToDisplay() << wxT('\n');
 
         // add everything remaining
         msg << info.GetDescriptionAndCredits();
--- src/msw/evtloop.cpp-orig	2009-06-18 20:20:56.818545000 -0500
+++ src/msw/evtloop.cpp	2009-06-18 20:21:00.931640000 -0500
@@ -219,7 +219,7 @@ bool wxEventLoop::Pending() const
 
 bool wxEventLoop::Dispatch()
 {
-    wxCHECK_MSG( IsRunning(), false, _T("can't call Dispatch() if not running") );
+    wxCHECK_MSG( IsRunning(), false, wxT("can't call Dispatch() if not running") );
 
     MSG msg;
     BOOL rc = ::GetMessage(&msg, (HWND) NULL, 0, 0);
--- src/msw/taskbar.cpp-orig	2009-06-18 20:21:05.637362000 -0500
+++ src/msw/taskbar.cpp	2009-06-18 20:21:09.647379000 -0500
@@ -186,7 +186,7 @@ bool wxTaskBarIcon::RemoveIcon()
 
 bool wxTaskBarIcon::PopupMenu(wxMenu *menu)
 {
-    wxASSERT_MSG( m_win != NULL, _T("taskbar icon not initialized") );
+    wxASSERT_MSG( m_win != NULL, wxT("taskbar icon not initialized") );
 
     static bool s_inPopup = false;
 
--- src/msw/power.cpp-orig	2009-06-18 20:21:14.217564000 -0500
+++ src/msw/power.cpp	2009-06-18 20:21:18.551127000 -0500
@@ -48,7 +48,7 @@ static inline bool wxGetPowerStatus(SYST
 {
     if ( !::GetSystemPowerStatus(sps) )
     {
-        wxLogLastError(_T("GetSystemPowerStatus()"));
+        wxLogLastError(wxT("GetSystemPowerStatus()"));
         return false;
     }
 
@@ -76,7 +76,7 @@ wxPowerType wxGetPowerType()
                 return wxPOWER_SOCKET;
 
             default:
-                wxLogDebug(_T("Unknown ACLineStatus=%u"), sps.ACLineStatus);
+                wxLogDebug(wxT("Unknown ACLineStatus=%u"), sps.ACLineStatus);
             case 255:
                 break;
         }
--- src/msw/helpchm.cpp-orig	2009-06-18 20:21:25.229752000 -0500
+++ src/msw/helpchm.cpp	2009-06-18 20:21:29.400246000 -0500
@@ -50,7 +50,7 @@ HTMLHELP GetHtmlHelpFunction()
 
     if ( !s_htmlHelp )
     {
-        static wxDynamicLibrary s_dllHtmlHelp(_T("HHCTRL.OCX"), wxDL_VERBATIM);
+        static wxDynamicLibrary s_dllHtmlHelp(wxT("HHCTRL.OCX"), wxDL_VERBATIM);
 
         if ( !s_dllHtmlHelp.IsLoaded() )
         {
--- src/msw/dcmemory.cpp-orig	2009-06-18 20:21:35.155228000 -0500
+++ src/msw/dcmemory.cpp	2009-06-18 20:21:39.569548000 -0500
@@ -49,7 +49,7 @@ IMPLEMENT_DYNAMIC_CLASS(wxMemoryDC, wxDC
 
 wxMemoryDC::wxMemoryDC(wxDC *dc)
 {
-    wxCHECK_RET( dc, _T("NULL dc in wxMemoryDC ctor") );
+    wxCHECK_RET( dc, wxT("NULL dc in wxMemoryDC ctor") );
 
     CreateCompatible(dc);
 
--- src/msw/ownerdrw.cpp-orig	2009-06-18 20:21:47.003493000 -0500
+++ src/msw/ownerdrw.cpp	2009-06-18 20:21:51.363584000 -0500
@@ -62,7 +62,7 @@ public:
 #endif // WINVER >= 0x0600
             {
                 // maybe we should initialize the struct with some defaults?
-                wxLogLastError(_T("SystemParametersInfo(SPI_GETNONCLIENTMETRICS)"));
+                wxLogLastError(wxT("SystemParametersInfo(SPI_GETNONCLIENTMETRICS)"));
             }
         }
 
--- src/msw/frame.cpp-orig	2009-06-18 20:21:55.728774000 -0500
+++ src/msw/frame.cpp	2009-06-18 20:22:00.320913000 -0500
@@ -467,7 +467,7 @@ void wxFrame::AttachMenuBar(wxMenuBar *m
 
             if ( !m_hMenu )
             {
-                wxFAIL_MSG( _T("failed to create menu bar") );
+                wxFAIL_MSG( wxT("failed to create menu bar") );
                 return;
             }
         }
--- src/gtk/app.cpp-orig	2009-06-18 16:32:42.821317000 -0500
+++ src/gtk/app.cpp	2009-06-18 16:32:56.385898000 -0500
@@ -432,9 +432,9 @@ bool wxApp::Initialize(int& argc, wxChar
 
     // (1) this variable exists for the sole purpose of specifying the encoding
     //     of the filenames for GTK+ programs, so use it if it is set
-    wxString encName(wxGetenv(_T("G_FILENAME_ENCODING")));
-    encName = encName.BeforeFirst(_T(','));
-    if (encName.CmpNoCase(_T("@locale")) == 0)
+    wxString encName(wxGetenv(wxT("G_FILENAME_ENCODING")));
+    encName = encName.BeforeFirst(wxT(','));
+    if (encName.CmpNoCase(wxT("@locale")) == 0)
         encName.clear();
     encName.MakeUpper();
 #if wxUSE_INTL
@@ -444,13 +444,13 @@ bool wxApp::Initialize(int& argc, wxChar
         //     filenames in this locale too
         encName = wxLocale::GetSystemEncodingName().Upper();
         // (3) finally use UTF-8 by default
-        if (encName.empty() || encName == _T("US-ASCII"))
-            encName = _T("UTF-8");
-        wxSetEnv(_T("G_FILENAME_ENCODING"), encName);
+        if (encName.empty() || encName == wxT("US-ASCII"))
+            encName = wxT("UTF-8");
+        wxSetEnv(wxT("G_FILENAME_ENCODING"), encName);
     }
 #else
     if (encName.empty())
-        encName = _T("UTF-8");
+        encName = wxT("UTF-8");
 #endif // wxUSE_INTL
 
 #if wxUSE_WCHAR_T
--- src/gtk/utilsgtk.cpp-orig	2009-06-18 16:35:25.896509000 -0500
+++ src/gtk/utilsgtk.cpp	2009-06-18 16:35:36.663877000 -0500
@@ -104,20 +104,20 @@ wxString wxEscapeStringForPangoMarkup(co
         wxChar c = str[i];
         switch (c)
         {
-            case _T('&'):
-                out << _T("&amp;");
+            case wxT('&'):
+                out << wxT("&amp;");
                 break;
-            case _T('<'):
-                out << _T("&lt;");
+            case wxT('<'):
+                out << wxT("&lt;");
                 break;
-            case _T('>'):
-                out << _T("&gt;");
+            case wxT('>'):
+                out << wxT("&gt;");
                 break;
-            case _T('\''):
-                out << _T("&apos;");
+            case wxT('\''):
+                out << wxT("&apos;");
                 break;
-            case _T('"'):
-                out << _T("&quot;");
+            case wxT('"'):
+                out << wxT("&quot;");
                 break;
             default:
                 out << c;
@@ -400,7 +400,7 @@ bool wxGUIAppTraits::ShowAssertDialog(co
         break;
 
     default:
-        wxFAIL_MSG( _T("unexpected return code from GtkAssertDialog") );
+        wxFAIL_MSG( wxT("unexpected return code from GtkAssertDialog") );
     }
 
     gtk_widget_destroy(dialog);
--- src/gtk/textctrl.cpp-orig	2009-06-18 16:43:21.901384000 -0500
+++ src/gtk/textctrl.cpp	2009-06-18 16:43:35.346329000 -0500
@@ -237,10 +237,10 @@ static void wxGtkTextApplyTagsFromAttr(G
 
         const wxArrayInt& tabs = attr.GetTabs();
 
-        wxString tagname = _T("WXTABS");
+        wxString tagname = wxT("WXTABS");
         g_snprintf(buf, sizeof(buf), "WXTABS");
         for (size_t i = 0; i < tabs.GetCount(); i++)
-            tagname += wxString::Format(_T(" %d"), tabs[i]);
+            tagname += wxString::Format(wxT(" %d"), tabs[i]);
 
         const wxWX2MBbuf buf = tagname.mb_str(wxConvUTF8);
 
@@ -306,7 +306,7 @@ gtk_insert_text_callback(GtkEditable *ed
     // we should only be called if we have a max len limit at all
     GtkEntry *entry = GTK_ENTRY (editable);
 
-    wxCHECK_RET( entry->text_max_length, _T("shouldn't be called") );
+    wxCHECK_RET( entry->text_max_length, wxT("shouldn't be called") );
 
     // check that we don't overflow the max length limit
     //
@@ -1731,7 +1731,7 @@ void wxTextCtrl::ChangeFontGlobally()
     //
     // TODO: it can be implemented much more efficiently for GTK2
     wxASSERT_MSG( IsMultiLine(),
-                  _T("shouldn't be called for single line controls") );
+                  wxT("shouldn't be called for single line controls") );
 
     wxString value = GetValue();
     if ( !value.empty() )
@@ -1783,7 +1783,7 @@ bool wxTextCtrl::SetStyle( long start, l
         gint l = gtk_text_buffer_get_char_count( m_buffer );
 
         wxCHECK_MSG( start >= 0 && end <= l, false,
-                     _T("invalid range in wxTextCtrl::SetStyle") );
+                     wxT("invalid range in wxTextCtrl::SetStyle") );
 
         GtkTextIter starti, endi;
         gtk_text_buffer_get_iter_at_offset( m_buffer, &starti, start );
@@ -1906,7 +1906,7 @@ void wxTextCtrl::Thaw()
 {
     if ( HasFlag(wxTE_MULTILINE) )
     {
-        wxCHECK_RET(m_freezeCount != 0, _T("Thaw() without matching Freeze()"));
+        wxCHECK_RET(m_freezeCount != 0, wxT("Thaw() without matching Freeze()"));
 
         if (--m_freezeCount == 0)
         {
--- src/gtk/window.cpp-orig	2009-06-18 17:31:23.279989000 -0500
+++ src/gtk/window.cpp	2009-06-18 17:31:46.076165000 -0500
@@ -260,7 +260,7 @@ extern bool g_mainThreadLocked;
 #endif // Debug
 
 // the trace mask used for the focus debugging messages
-#define TRACE_FOCUS _T("focus")
+#define TRACE_FOCUS wxT("focus")
 
 //-----------------------------------------------------------------------------
 // missing gdk functions
@@ -562,7 +562,7 @@ inline bool wxIsUpperChar(int code)
 
 
 // set WXTRACE to this to see the key event codes on the console
-#define TRACE_KEYS  _T("keyevent")
+#define TRACE_KEYS  wxT("keyevent")
 
 // translates an X key symbol to WXK_XXX value
 //
@@ -894,9 +894,9 @@ wxTranslateGTKKeyEventToWx(wxKeyEvent& e
 
     KeySym keysym = gdk_event->keyval;
 
-    wxLogTrace(TRACE_KEYS, _T("Key %s event: keysym = %ld"),
-               event.GetEventType() == wxEVT_KEY_UP ? _T("release")
-                                                    : _T("press"),
+    wxLogTrace(TRACE_KEYS, wxT("Key %s event: keysym = %ld"),
+               event.GetEventType() == wxEVT_KEY_UP ? wxT("release")
+                                                    : wxT("press"),
                keysym);
 
     long key_code = wxTranslateKeySymToWXKey(keysym, false /* !isChar */);
@@ -925,7 +925,7 @@ wxTranslateGTKKeyEventToWx(wxKeyEvent& e
             Display *dpy = (Display *)wxGetDisplay();
             KeyCode keycode = XKeysymToKeycode(dpy, keysym);
 
-            wxLogTrace(TRACE_KEYS, _T("\t-> keycode %d"), keycode);
+            wxLogTrace(TRACE_KEYS, wxT("\t-> keycode %d"), keycode);
 
             KeySym keysymNormalized = XKeycodeToKeysym(dpy, keycode, 0);
 
@@ -964,7 +964,7 @@ wxTranslateGTKKeyEventToWx(wxKeyEvent& e
         }
     }
 
-    wxLogTrace(TRACE_KEYS, _T("\t-> wxKeyCode %ld"), key_code);
+    wxLogTrace(TRACE_KEYS, wxT("\t-> wxKeyCode %ld"), key_code);
 
     // sending unknown key events doesn't really make sense
     if ( !key_code )
@@ -1058,7 +1058,7 @@ gtk_window_key_press_callback( GtkWidget
         win->m_imData->lastKeyEvent = NULL;
         if (intercepted_by_IM)
         {
-            wxLogTrace(TRACE_KEYS, _T("Key event intercepted by IM"));
+            wxLogTrace(TRACE_KEYS, wxT("Key event intercepted by IM"));
             return TRUE;
         }
     }
@@ -1120,7 +1120,7 @@ gtk_window_key_press_callback( GtkWidget
 
         if ( key_code )
         {
-            wxLogTrace(TRACE_KEYS, _T("Char event: %ld"), key_code);
+            wxLogTrace(TRACE_KEYS, wxT("Char event: %ld"), key_code);
 
             event.m_keyCode = key_code;
 
@@ -1219,7 +1219,7 @@ gtk_wxwindow_commit_cb (GtkIMContext *co
         event.m_uniChar = *pstr;
         // Backward compatible for ISO-8859-1
         event.m_keyCode = *pstr < 256 ? event.m_uniChar : 0;
-        wxLogTrace(TRACE_KEYS, _T("IM sent character '%c'"), event.m_uniChar);
+        wxLogTrace(TRACE_KEYS, wxT("IM sent character '%c'"), event.m_uniChar);
 #else
         event.m_keyCode = *pstr;
 #endif  // wxUSE_UNICODE
@@ -1869,7 +1869,7 @@ gtk_window_focus_in_callback( GtkWidget 
     g_focusWindowPending = NULL;
 
     wxLogTrace(TRACE_FOCUS,
-               _T("%s: focus in"), win->GetName().c_str());
+               wxT("%s: focus in"), win->GetName().c_str());
 
 #if wxUSE_CARET
     // caret needs to be informed about focus change
@@ -1918,7 +1918,7 @@ gtk_window_focus_out_callback( GtkWidget
         gtk_im_context_focus_out(win->m_imData->context);
 
     wxLogTrace( TRACE_FOCUS,
-                _T("%s: focus out"), win->GetName().c_str() );
+                wxT("%s: focus out"), win->GetName().c_str() );
 
 
     wxWindowGTK *winFocus = wxFindFocusedChild(win);
@@ -3334,7 +3334,7 @@ void wxWindowGTK::SetFocus()
                 // it should be focused and will do it later, during the idle
                 // time, as soon as we can
                 wxLogTrace(TRACE_FOCUS,
-                           _T("Delaying setting focus to %s(%s)"),
+                           wxT("Delaying setting focus to %s(%s)"),
                            GetClassInfo()->GetClassName(), GetLabel().c_str());
 
                 g_delayedFocus = this;
@@ -3342,7 +3342,7 @@ void wxWindowGTK::SetFocus()
             else
             {
                 wxLogTrace(TRACE_FOCUS,
-                           _T("Setting focus to %s(%s)"),
+                           wxT("Setting focus to %s(%s)"),
                            GetClassInfo()->GetClassName(), GetLabel().c_str());
 
                 gtk_widget_grab_focus (m_widget);
@@ -3351,7 +3351,7 @@ void wxWindowGTK::SetFocus()
         else
         {
            wxLogTrace(TRACE_FOCUS,
-                      _T("Can't set focus to %s(%s)"),
+                      wxT("Can't set focus to %s(%s)"),
                       GetClassInfo()->GetClassName(), GetLabel().c_str());
         }
     }
@@ -3448,7 +3448,7 @@ wxLayoutDirection wxWindowGTK::GTKGetLay
 /* static */
 void wxWindowGTK::GTKSetLayout(GtkWidget *widget, wxLayoutDirection dir)
 {
-    wxASSERT_MSG( dir != wxLayout_Default, _T("invalid layout direction") );
+    wxASSERT_MSG( dir != wxLayout_Default, wxT("invalid layout direction") );
 
     gtk_widget_set_direction(GTK_WIDGET(widget),
                              dir == wxLayout_RightToLeft ? GTK_TEXT_DIR_RTL
@@ -3631,7 +3631,7 @@ void wxWindowGTK::GTKUpdateCursor()
                 GdkWindow *win = windowsThis[n];
                 if ( !win )
                 {
-                    wxFAIL_MSG(_T("NULL window returned by GTKGetWindow()?"));
+                    wxFAIL_MSG(wxT("NULL window returned by GTKGetWindow()?"));
                     continue;
                 }
 
@@ -3667,7 +3667,7 @@ wxWindowGTK::ScrollDir wxWindowGTK::Scro
             return (ScrollDir)dir;
     }
 
-    wxFAIL_MSG( _T("event from unknown scrollbar received") );
+    wxFAIL_MSG( wxT("event from unknown scrollbar received") );
 
     return ScrollDir_Max;
 }
@@ -4166,7 +4166,7 @@ void wxWindowGTK::DoCaptureMouse()
     else
         window = GetConnectWidget()->window;
 
-    wxCHECK_RET( window, _T("CaptureMouse() failed") );
+    wxCHECK_RET( window, wxT("CaptureMouse() failed") );
 
     const wxCursor* cursor = &m_cursor;
     if (!cursor->Ok())
@@ -4235,7 +4235,7 @@ void wxWindowGTK::SetScrollbar(int orien
                                bool WXUNUSED(update))
 {
     GtkRange * const sb = m_scrollBar[ScrollDirFromOrient(orient)];
-    wxCHECK_RET( sb, _T("this window is not scrollable") );
+    wxCHECK_RET( sb, wxT("this window is not scrollable") );
 
     if (range > 0)
     {
@@ -4265,7 +4265,7 @@ void wxWindowGTK::SetScrollPos(int orien
 {
     const int dir = ScrollDirFromOrient(orient);
     GtkRange * const sb = m_scrollBar[dir];
-    wxCHECK_RET( sb, _T("this window is not scrollable") );
+    wxCHECK_RET( sb, wxT("this window is not scrollable") );
 
     // This check is more than an optimization. Without it, the slider
     //   will not move smoothly while tracking when using wxScrollHelper.
@@ -4292,7 +4292,7 @@ void wxWindowGTK::SetScrollPos(int orien
 int wxWindowGTK::GetScrollThumb(int orient) const
 {
     GtkRange * const sb = m_scrollBar[ScrollDirFromOrient(orient)];
-    wxCHECK_MSG( sb, 0, _T("this window is not scrollable") );
+    wxCHECK_MSG( sb, 0, wxT("this window is not scrollable") );
 
     return int(sb->adjustment->page_size);
 }
@@ -4300,7 +4300,7 @@ int wxWindowGTK::GetScrollThumb(int orie
 int wxWindowGTK::GetScrollPos( int orient ) const
 {
     GtkRange * const sb = m_scrollBar[ScrollDirFromOrient(orient)];
-    wxCHECK_MSG( sb, 0, _T("this window is not scrollable") );
+    wxCHECK_MSG( sb, 0, wxT("this window is not scrollable") );
 
     return int(sb->adjustment->value + 0.5);
 }
@@ -4308,7 +4308,7 @@ int wxWindowGTK::GetScrollPos( int orien
 int wxWindowGTK::GetScrollRange( int orient ) const
 {
     GtkRange * const sb = m_scrollBar[ScrollDirFromOrient(orient)];
-    wxCHECK_MSG( sb, 0, _T("this window is not scrollable") );
+    wxCHECK_MSG( sb, 0, wxT("this window is not scrollable") );
 
     return int(sb->adjustment->upper);
 }
--- src/gtk/menu.cpp-orig	2009-06-18 17:31:50.681177000 -0500
+++ src/gtk/menu.cpp	2009-06-18 17:31:57.897739000 -0500
@@ -597,7 +597,7 @@ static void gtk_menu_clicked_callback( G
 
     /* should find it for normal (not popup) menu */
     wxASSERT_MSG( (id != -1) || (menu->GetInvokingWindow() != NULL),
-                  _T("menu item not found in gtk_menu_clicked_callback") );
+                  wxT("menu item not found in gtk_menu_clicked_callback") );
 
     if (!menu->IsEnabled(id))
         return;
@@ -1006,7 +1006,7 @@ void wxMenuItem::Check( bool check )
             break;
 
         default:
-            wxFAIL_MSG( _T("can't check this item") );
+            wxFAIL_MSG( wxT("can't check this item") );
     }
 }
 
@@ -1155,7 +1155,7 @@ bool wxMenu::GtkAppend(wxMenuItem *mitem
         else // we have a custom bitmap
         {
             wxASSERT_MSG( mitem->GetKind() == wxITEM_NORMAL,
-                            _T("only normal menu items can have bitmaps") );
+                            wxT("only normal menu items can have bitmaps") );
 
             // always use pixbuf, because pixmap mask does not
             // work with disabled images in some themes
@@ -1204,7 +1204,7 @@ bool wxMenu::GtkAppend(wxMenuItem *mitem
             }
 
             default:
-                wxFAIL_MSG( _T("unexpected menu item kind") );
+                wxFAIL_MSG( wxT("unexpected menu item kind") );
                 // fall through
 
             case wxITEM_NORMAL:
@@ -1831,7 +1831,7 @@ const char *wxGetStockGtkID(wxWindowID i
         STOCKITEM(wxID_ZOOM_OUT,         GTK_STOCK_ZOOM_OUT)
 
         default:
-            wxFAIL_MSG( _T("invalid stock item ID") );
+            wxFAIL_MSG( wxT("invalid stock item ID") );
             break;
     };
 
--- src/gtk/toplevel.cpp-orig	2009-06-18 17:32:03.774615000 -0500
+++ src/gtk/toplevel.cpp	2009-06-18 17:32:11.410324000 -0500
@@ -690,7 +690,7 @@ wxTopLevelWindowGTK::~wxTopLevelWindowGT
 {
     if (m_grabbed)
     {
-        wxFAIL_MSG(_T("Window still grabbed"));
+        wxFAIL_MSG(wxT("Window still grabbed"));
         RemoveGrab();
     }
 
@@ -1198,8 +1198,8 @@ void wxTopLevelWindowGTK::OnInternalIdle
         if ( g_delayedFocus &&
              wxGetTopLevelParent((wxWindow*)g_delayedFocus) == this )
         {
-            wxLogTrace(_T("focus"),
-                       _T("Setting focus from wxTLW::OnIdle() to %s(%s)"),
+            wxLogTrace(wxT("focus"),
+                       wxT("Setting focus from wxTLW::OnIdle() to %s(%s)"),
                        g_delayedFocus->GetClassInfo()->GetClassName(),
                        g_delayedFocus->GetLabel().c_str());
 
@@ -1363,7 +1363,7 @@ static bool do_shape_combine_region(GdkW
 bool wxTopLevelWindowGTK::SetShape(const wxRegion& region)
 {
     wxCHECK_MSG( HasFlag(wxFRAME_SHAPED), false,
-                 _T("Shaped windows must be created with the wxFRAME_SHAPED style."));
+                 wxT("Shaped windows must be created with the wxFRAME_SHAPED style."));
 
     GdkWindow *window = NULL;
     if (m_wxwindow)
--- src/gtk/glcanvas.cpp-orig	2009-06-18 17:32:17.357071000 -0500
+++ src/gtk/glcanvas.cpp	2009-06-18 17:32:27.336707000 -0500
@@ -63,7 +63,7 @@ wxGLContext::wxGLContext(wxWindow* win, 
     {
         // GLX >= 1.3
         GLXFBConfig *fbc = gc->m_fbc;
-        wxCHECK_RET( fbc, _T("invalid GLXFBConfig for OpenGl") );
+        wxCHECK_RET( fbc, wxT("invalid GLXFBConfig for OpenGl") );
         m_glContext = glXCreateNewContext( GDK_DISPLAY(), fbc[0], GLX_RGBA_TYPE,
                                            other ? other->m_glContext : None,
                                            GL_TRUE );
@@ -72,7 +72,7 @@ wxGLContext::wxGLContext(wxWindow* win, 
     {
         // GLX <= 1.2
         XVisualInfo *vi = (XVisualInfo *) gc->m_vi;
-        wxCHECK_RET( vi, _T("invalid visual for OpenGl") );
+        wxCHECK_RET( vi, wxT("invalid visual for OpenGl") );
         m_glContext = glXCreateContext( GDK_DISPLAY(), vi,
                                         other ? other->m_glContext : None,
                                         GL_TRUE );
@@ -80,7 +80,7 @@ wxGLContext::wxGLContext(wxWindow* win, 
 
     if ( !m_glContext )
     {
-        wxFAIL_MSG( _T("Couldn't create OpenGl context") );
+        wxFAIL_MSG( wxT("Couldn't create OpenGl context") );
     }
 }
 
@@ -325,7 +325,7 @@ bool wxGLCanvas::Create( wxWindow *paren
             m_canFreeFBC = true;
         }
         m_fbc = fbc;  // save for later use
-        wxCHECK_MSG( m_fbc, false, _T("required FBConfig couldn't be found") );
+        wxCHECK_MSG( m_fbc, false, wxT("required FBConfig couldn't be found") );
     }
 
     XVisualInfo *vi = NULL;
@@ -348,7 +348,7 @@ bool wxGLCanvas::Create( wxWindow *paren
 
     m_vi = vi;  // save for later use
 
-    wxCHECK_MSG( m_vi, false, _T("required visual couldn't be found") );
+    wxCHECK_MSG( m_vi, false, wxT("required visual couldn't be found") );
 
     // watch for the "parent-set" signal on m_wxwindow so we can set colormap
     // before m_wxwindow is realized (which will occur before
@@ -529,7 +529,7 @@ void wxGLCanvas::QueryGLXVersion()
         // check the GLX version
         int glxMajorVer, glxMinorVer;
         bool ok = glXQueryVersion(GDK_DISPLAY(), &glxMajorVer, &glxMinorVer);
-        wxASSERT_MSG( ok, _T("GLX version not found") );
+        wxASSERT_MSG( ok, wxT("GLX version not found") );
         if (!ok)
             m_glxVersion = 10; // 1.0 by default
         else
@@ -539,7 +539,7 @@ void wxGLCanvas::QueryGLXVersion()
 
 int wxGLCanvas::GetGLXVersion()
 {
-    wxASSERT_MSG( m_glxVersion>0, _T("GLX version has not been initialized with wxGLCanvas::QueryGLXVersion()") );
+    wxASSERT_MSG( m_glxVersion>0, wxT("GLX version has not been initialized with wxGLCanvas::QueryGLXVersion()") );
     return m_glxVersion;
 }
 
--- src/gtk/region.cpp-orig	2009-06-18 17:32:31.809385000 -0500
+++ src/gtk/region.cpp	2009-06-18 17:32:39.972752000 -0500
@@ -178,7 +178,7 @@ bool wxRegion::DoUnionWithRect(const wxR
 
 bool wxRegion::DoUnionWithRegion( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -197,7 +197,7 @@ bool wxRegion::DoUnionWithRegion( const 
 
 bool wxRegion::DoIntersect( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -214,7 +214,7 @@ bool wxRegion::DoIntersect( const wxRegi
 
 bool wxRegion::DoSubtract( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -231,7 +231,7 @@ bool wxRegion::DoSubtract( const wxRegio
 
 bool wxRegion::DoXor( const wxRegion& region )
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     if (!m_refData)
     {
@@ -421,28 +421,28 @@ wxRegionIterator wxRegionIterator::opera
 
 wxCoord wxRegionIterator::GetX() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].x;
 }
 
 wxCoord wxRegionIterator::GetY() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].y;
 }
 
 wxCoord wxRegionIterator::GetW() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].width;
 }
 
 wxCoord wxRegionIterator::GetH() const
 {
-    wxCHECK_MSG( HaveRects(), 0, _T("invalid wxRegionIterator") );
+    wxCHECK_MSG( HaveRects(), 0, wxT("invalid wxRegionIterator") );
 
     return m_rects[m_current].height;
 }
--- src/gtk/dcclient.cpp-orig	2009-06-18 17:32:45.721443000 -0500
+++ src/gtk/dcclient.cpp	2009-06-18 17:32:55.306702000 -0500
@@ -92,9 +92,9 @@ void gdk_wx_draw_bitmap(GdkDrawable  *dr
                         gint         width,
                         gint         height)
 {
-    wxCHECK_RET( drawable, _T("NULL drawable in gdk_wx_draw_bitmap") );
-    wxCHECK_RET( src, _T("NULL src in gdk_wx_draw_bitmap") );
-    wxCHECK_RET( gc, _T("NULL gc in gdk_wx_draw_bitmap") );
+    wxCHECK_RET( drawable, wxT("NULL drawable in gdk_wx_draw_bitmap") );
+    wxCHECK_RET( src, wxT("NULL src in gdk_wx_draw_bitmap") );
+    wxCHECK_RET( gc, wxT("NULL gc in gdk_wx_draw_bitmap") );
 
     gint src_width, src_height;
     gdk_drawable_get_size(src, &src_width, &src_height);
@@ -439,7 +439,7 @@ void wxWindowDC::SetUpDC()
 
 void wxWindowDC::DoGetSize( int* width, int* height ) const
 {
-    wxCHECK_RET( m_owner, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_owner, wxT("GetSize() doesn't work without window") );
 
     m_owner->GetSize(width, height);
 }
@@ -1830,7 +1830,7 @@ wxCoord wxWindowDC::GetCharWidth() const
 wxCoord wxWindowDC::GetCharHeight() const
 {
     PangoFontMetrics *metrics = pango_context_get_metrics (m_context, m_fontdesc, pango_context_get_language(m_context));
-    wxCHECK_MSG( metrics, -1, _T("failed to get pango font metrics") );
+    wxCHECK_MSG( metrics, -1, wxT("failed to get pango font metrics") );
 
     wxCoord h = PANGO_PIXELS (pango_font_metrics_get_descent (metrics) +
                 pango_font_metrics_get_ascent (metrics));
@@ -2484,7 +2484,7 @@ wxClientDC::wxClientDC( wxWindow *win )
 
 void wxClientDC::DoGetSize(int *width, int *height) const
 {
-    wxCHECK_RET( m_owner, _T("GetSize() doesn't work without window") );
+    wxCHECK_RET( m_owner, wxT("GetSize() doesn't work without window") );
 
     m_owner->GetClientSize( width, height );
 }
--- src/gtk/dataview.cpp-orig	2009-06-18 17:33:01.180076000 -0500
+++ src/gtk/dataview.cpp	2009-06-18 17:33:06.208608000 -0500
@@ -253,7 +253,7 @@ wxgtk_list_store_get_column_type (GtkTre
         gtype = G_TYPE_STRING;
     else
     {
-        wxFAIL_MSG( _T("non-string columns not supported yet") );
+        wxFAIL_MSG( wxT("non-string columns not supported yet") );
     }
 
     return gtype;
@@ -318,7 +318,7 @@ wxgtk_list_store_get_value (GtkTreeModel
     }
     else
     {
-        wxFAIL_MSG( _T("non-string columns not supported yet") );
+        wxFAIL_MSG( wxT("non-string columns not supported yet") );
     }
 }
 
--- src/gtk/tbargtk.cpp-orig	2009-06-18 17:33:11.726527000 -0500
+++ src/gtk/tbargtk.cpp	2009-06-18 17:33:18.944752000 -0500
@@ -121,7 +121,7 @@ public:
                 return GTK_TOOLBAR_CHILD_RADIOBUTTON;
 
             default:
-                wxFAIL_MSG( _T("unknown toolbar child type") );
+                wxFAIL_MSG( wxT("unknown toolbar child type") );
                 // fall through
 
             case wxITEM_NORMAL:
@@ -466,7 +466,7 @@ bool wxToolBar::DoInsertTool(size_t pos,
                                   posGtk
                                );
 
-                wxCHECK_MSG(tool->m_item != NULL, false, _T("gtk_toolbar_insert_element() failed"));
+                wxCHECK_MSG(tool->m_item != NULL, false, wxT("gtk_toolbar_insert_element() failed"));
                 
                 g_signal_connect (tool->m_item, "enter_notify_event",
                                   G_CALLBACK (gtk_toolbar_tool_callback),
@@ -575,7 +575,7 @@ void wxToolBar::DoSetToggle(wxToolBarToo
                             bool WXUNUSED(toggle))
 {
     // VZ: absolutely no idea about how to do it
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 // ----------------------------------------------------------------------------
@@ -586,7 +586,7 @@ wxToolBarToolBase *wxToolBar::FindToolFo
                                                   wxCoord WXUNUSED(y)) const
 {
     // VZ: GTK+ doesn't seem to have such thing
-    wxFAIL_MSG( _T("wxToolBar::FindToolForPosition() not implemented") );
+    wxFAIL_MSG( wxT("wxToolBar::FindToolForPosition() not implemented") );
 
     return (wxToolBarToolBase *)NULL;
 }
--- src/gtk/slider.cpp-orig	2009-06-18 17:33:23.453197000 -0500
+++ src/gtk/slider.cpp	2009-06-18 17:33:28.038699000 -0500
@@ -100,7 +100,7 @@ static inline wxEventType GtkScrollTypeT
         eventType = wxEVT_SCROLL_THUMBTRACK;
         break;
     default:
-        wxFAIL_MSG(_T("Unknown GtkScrollType"));
+        wxFAIL_MSG(wxT("Unknown GtkScrollType"));
         eventType = wxEVT_NULL;
         break;
     }
--- src/gtk/notebook.cpp-orig	2009-06-18 17:33:33.552954000 -0500
+++ src/gtk/notebook.cpp	2009-06-18 17:33:39.649014000 -0500
@@ -222,7 +222,7 @@ gtk_notebook_key_press_callback( GtkWidg
         if (sel == -1)
             return TRUE;
         wxGtkNotebookPage *nb_page = notebook->GetNotebookPage(sel);
-        wxCHECK_MSG( nb_page, FALSE, _T("invalid selection in wxNotebook") );
+        wxCHECK_MSG( nb_page, FALSE, wxT("invalid selection in wxNotebook") );
 
         wxNavigationKeyEvent event;
         event.SetEventObject( notebook );
@@ -560,7 +560,7 @@ bool wxNotebook::DeleteAllPages()
     while (m_pagesData.GetCount() > 0)
         DeletePage( m_pagesData.GetCount()-1 );
 
-    wxASSERT_MSG( GetPageCount() == 0, _T("all pages must have been deleted") );
+    wxASSERT_MSG( GetPageCount() == 0, wxT("all pages must have been deleted") );
 
     InvalidateBestSize();
     return wxNotebookBase::DeleteAllPages();
@@ -607,7 +607,7 @@ bool wxNotebook::InsertPage( size_t posi
                wxT("Can't add a page whose parent is not the notebook!") );
 
     wxCHECK_MSG( position <= GetPageCount(), false,
-                 _T("invalid page index in wxNotebookPage::InsertPage()") );
+                 wxT("invalid page index in wxNotebookPage::InsertPage()") );
 
     // Hack Alert! (Part II): See above in wxInsertChildInNotebook callback
     // why this has to be done.  NOTE: using gtk_widget_unparent here does not
--- src/gtk/scrolwin.cpp-orig	2009-06-18 17:33:46.411436000 -0500
+++ src/gtk/scrolwin.cpp	2009-06-18 17:33:50.786020000 -0500
@@ -174,7 +174,7 @@ void wxScrollHelperNative::DoScroll(int 
 
 void wxScrollHelperNative::Scroll( int x_pos, int y_pos )
 {
-    wxCHECK_RET( m_targetWindow != 0, _T("No target window") );
+    wxCHECK_RET( m_targetWindow != 0, wxT("No target window") );
 
     DoScroll(wxHORIZONTAL, x_pos, m_xScrollPixelsPerLine, &m_xScrollPosition);
     DoScroll(wxVERTICAL, y_pos, m_yScrollPixelsPerLine, &m_yScrollPosition);
--- src/gtk/button.cpp-orig	2009-06-18 17:33:55.352035000 -0500
+++ src/gtk/button.cpp	2009-06-18 17:34:00.940964000 -0500
@@ -171,7 +171,7 @@ bool wxButton::Create(  wxWindow *parent
 void wxButton::SetDefault()
 {
     wxTopLevelWindow *tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
-    wxCHECK_RET( tlw, _T("button without top level window?") );
+    wxCHECK_RET( tlw, wxT("button without top level window?") );
 
     tlw->SetDefaultItem(this);
 
--- src/gtk/radiobox.cpp-orig	2009-06-18 17:34:06.022106000 -0500
+++ src/gtk/radiobox.cpp	2009-06-18 17:34:11.397677000 -0500
@@ -174,10 +174,10 @@ static gint gtk_radiobutton_focus_out( G
                                        GdkEvent *WXUNUSED(event),
                                        wxRadioBox *win )
 {
-  //    wxASSERT_MSG( win->m_hasFocus, _T("got focus out without any focus in?") );
+  //    wxASSERT_MSG( win->m_hasFocus, wxT("got focus out without any focus in?") );
   // Replace with a warning, else we dump core a lot!
   //  if (!win->m_hasFocus)
-  //      wxLogWarning(_T("Radiobox got focus out without any focus in.") );
+  //      wxLogWarning(wxT("Radiobox got focus out without any focus in.") );
 
     // we might have lost the focus, but may be not - it may have just gone to
     // another button in the same radiobox, so we'll check for it in the next
--- src/gtk/taskbar.cpp-orig	2009-06-18 17:34:17.515184000 -0500
+++ src/gtk/taskbar.cpp	2009-06-18 17:34:23.219382000 -0500
@@ -37,11 +37,11 @@ wxTaskBarIconAreaBase::wxTaskBarIconArea
         m_widget = GTK_WIDGET(egg_tray_icon_new("systray icon"));
         gtk_window_set_resizable(GTK_WINDOW(m_widget), false);
 
-        wxLogTrace(_T("systray"), _T("using freedesktop.org systray spec"));
+        wxLogTrace(wxT("systray"), wxT("using freedesktop.org systray spec"));
     }
 
     wxTopLevelWindow::Create(
-            NULL, wxID_ANY, _T("systray icon"),
+            NULL, wxID_ANY, wxT("systray icon"),
             wxDefaultPosition, wxDefaultSize,
             wxDEFAULT_FRAME_STYLE | wxFRAME_NO_TASKBAR | wxSIMPLE_BORDER |
             wxFRAME_SHAPED,
--- src/gtk/colordlg.cpp-orig	2009-06-18 17:34:29.225119000 -0500
+++ src/gtk/colordlg.cpp	2009-06-18 17:34:34.293284000 -0500
@@ -65,7 +65,7 @@ int wxColourDialog::ShowModal()
     switch (result)
     {
         default:
-            wxFAIL_MSG(_T("unexpected GtkColorSelectionDialog return code"));
+            wxFAIL_MSG(wxT("unexpected GtkColorSelectionDialog return code"));
             // fall through
 
         case GTK_RESPONSE_CANCEL:
--- src/gtk/fontdlg.cpp-orig	2009-06-18 17:34:39.693832000 -0500
+++ src/gtk/fontdlg.cpp	2009-06-18 17:34:43.484446000 -0500
@@ -136,7 +136,7 @@ bool wxFontDialog::DoCreate(wxWindow *pa
         else
         {
             // this is not supposed to happen!
-            wxFAIL_MSG(_T("font is ok but no native font info?"));
+            wxFAIL_MSG(wxT("font is ok but no native font info?"));
         }
     }
 
--- src/gtk/gauge.cpp-orig	2009-06-18 17:34:48.579742000 -0500
+++ src/gtk/gauge.cpp	2009-06-18 17:34:53.723185000 -0500
@@ -63,7 +63,7 @@ bool wxGauge::Create( wxWindow *parent,
 void wxGauge::DoSetGauge()
 {
     wxASSERT_MSG( 0 <= m_gaugePos && m_gaugePos <= m_rangeMax,
-                  _T("invalid gauge position in DoSetGauge()") );
+                  wxT("invalid gauge position in DoSetGauge()") );
 
     gtk_progress_bar_set_fraction (GTK_PROGRESS_BAR (m_widget),
                                    m_rangeMax ? ((double)m_gaugePos)/m_rangeMax : 0.0);
@@ -91,7 +91,7 @@ void wxGauge::SetRange( int range )
 
 void wxGauge::SetValue( int pos )
 {
-    wxCHECK_RET( pos <= m_rangeMax, _T("invalid value in wxGauge::SetValue()") );
+    wxCHECK_RET( pos <= m_rangeMax, wxT("invalid value in wxGauge::SetValue()") );
 
     m_gaugePos = pos;
 
--- src/gtk/checkbox.cpp-orig	2009-06-18 17:35:14.122099000 -0500
+++ src/gtk/checkbox.cpp	2009-06-18 17:35:18.090842000 -0500
@@ -71,7 +71,7 @@ static void gtk_checkbox_toggled_callbac
             }
             else
             {
-                wxFAIL_MSG(_T("3state wxCheckBox in unexpected state!"));
+                wxFAIL_MSG(wxT("3state wxCheckBox in unexpected state!"));
             }
 
             cb->m_blockEvent = false;
--- src/gtk/msgdlg.cpp-orig	2009-06-18 17:35:25.370268000 -0500
+++ src/gtk/msgdlg.cpp	2009-06-18 17:35:30.414542000 -0500
@@ -121,7 +121,7 @@ int wxMessageDialog::ShowModal()
     switch (result)
     {
         default:
-            wxFAIL_MSG(_T("unexpected GtkMessageDialog return code"));
+            wxFAIL_MSG(wxT("unexpected GtkMessageDialog return code"));
             // fall through
 
         case GTK_RESPONSE_CANCEL:
--- src/gtk/dnd.cpp-orig	2009-06-18 17:35:35.420378000 -0500
+++ src/gtk/dnd.cpp	2009-06-18 17:35:45.440794000 -0500
@@ -43,7 +43,7 @@ static long gs_flagsForDrag = 0;
 // the trace mask we use with wxLogTrace() - call
 // wxLog::AddTraceMask(TRACE_DND) to enable the trace messages from here
 // (there are quite a few of them, so don't enable this by default)
-static const wxChar *TRACE_DND = _T("dnd");
+static const wxChar *TRACE_DND = wxT("dnd");
 #endif
 
 // global variables because GTK+ DnD want to have the
@@ -357,7 +357,7 @@ static gboolean target_drag_drop( GtkWid
         GdkAtom format = drop_target->GetMatchingPair();
 
         // this does happen somehow, see bug 555111
-        wxCHECK_MSG( format, FALSE, _T("no matching GdkAtom for format?") );
+        wxCHECK_MSG( format, FALSE, wxT("no matching GdkAtom for format?") );
 
 /*
         GdkDragAction action = GDK_ACTION_MOVE;
--- src/gtk/evtloop.cpp-orig	2009-06-18 17:35:53.017034000 -0500
+++ src/gtk/evtloop.cpp	2009-06-18 17:36:00.619887000 -0500
@@ -61,13 +61,13 @@ private:
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     wxEventLoopActivator activate(this);
 
@@ -86,7 +86,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
 
@@ -111,7 +111,7 @@ bool wxEventLoop::Pending() const
 
 bool wxEventLoop::Dispatch()
 {
-    wxCHECK_MSG( IsRunning(), false, _T("can't call Dispatch() if not running") );
+    wxCHECK_MSG( IsRunning(), false, wxT("can't call Dispatch() if not running") );
 
     // gtk_main_iteration() returns TRUE only if gtk_main_quit() was called
     return !gtk_main_iteration();
--- src/gtk/settings.cpp-orig	2009-06-18 17:36:06.275211000 -0500
+++ src/gtk/settings.cpp	2009-06-18 17:36:11.821614000 -0500
@@ -106,7 +106,7 @@ static bool GetColourFromGTKWidget(GdkCo
     switch ( type )
     {
         default:
-            wxFAIL_MSG( _T("unexpected GTK widget type") );
+            wxFAIL_MSG( wxT("unexpected GTK widget type") );
             // fall through
 
         case wxGTK_BUTTON:
@@ -141,7 +141,7 @@ static bool GetColourFromGTKWidget(GdkCo
         switch ( colour )
         {
             default:
-                wxFAIL_MSG( _T("unexpected GTK colour type") );
+                wxFAIL_MSG( wxT("unexpected GTK colour type") );
                 // fall through
 
             case wxGTK_FG:
@@ -378,7 +378,7 @@ wxColour wxSystemSettingsNative::GetColo
 
         case wxSYS_COLOUR_MAX:
         default:
-            wxFAIL_MSG( _T("unknown system colour index") );
+            wxFAIL_MSG( wxT("unknown system colour index") );
             color = *wxWHITE;
             break;
     }
--- src/gtk/clipbrd.cpp-orig	2009-06-18 17:36:20.662337000 -0500
+++ src/gtk/clipbrd.cpp	2009-06-18 17:36:28.967512000 -0500
@@ -37,7 +37,7 @@ extern GdkAtom g_altTextAtom;
 // the trace mask we use with wxLogTrace() - call
 // wxLog::AddTraceMask(TRACE_CLIPBOARD) to enable the trace messages from here
 // (there will be a *lot* of them!)
-#define TRACE_CLIPBOARD _T("clipboard")
+#define TRACE_CLIPBOARD wxT("clipboard")
 
 //-----------------------------------------------------------------------------
 // reminder
@@ -84,7 +84,7 @@ targets_selection_received( GtkWidget *W
             if ( strcmp(wxGtkString(gdk_atom_name(type)), "TARGETS") )
             {
                 wxLogTrace( TRACE_CLIPBOARD,
-                            _T("got unsupported clipboard target") );
+                            wxT("got unsupported clipboard target") );
 
                 clipboard->m_waiting = false;
                 return;
@@ -258,7 +258,7 @@ selection_handler( GtkWidget *WXUNUSED(w
                                (guchar*)&(timestamp),
                                sizeof(timestamp));
         wxLogTrace(TRACE_CLIPBOARD,
-                   _T("Clipboard TIMESTAMP requested, returning timestamp=%u"),
+                   wxT("Clipboard TIMESTAMP requested, returning timestamp=%u"),
                    timestamp);
         return;
     }
@@ -267,7 +267,7 @@ selection_handler( GtkWidget *WXUNUSED(w
 
 #ifdef __WXDEBUG__
     wxLogTrace(TRACE_CLIPBOARD,
-               _T("clipboard data in format %s, GtkSelectionData is target=%s type=%s selection=%s timestamp=%u"),
+               wxT("clipboard data in format %s, GtkSelectionData is target=%s type=%s selection=%s timestamp=%u"),
                format.GetId().c_str(),
                wxString::FromAscii(wxGtkString(gdk_atom_name(selection_data->target))).c_str(),
                wxString::FromAscii(wxGtkString(gdk_atom_name(selection_data->type))).c_str(),
--- src/gtk/aboutdlg.cpp-orig	2009-06-18 17:36:36.139755000 -0500
+++ src/gtk/aboutdlg.cpp	2009-06-18 17:36:41.328537000 -0500
@@ -153,7 +153,7 @@ void wxAboutBox(const wxAboutDialogInfo&
             const size_t count = translators.size();
             for ( size_t n = 0; n < count; n++ )
             {
-                transCredits << translators[n] << _T('\n');
+                transCredits << translators[n] << wxT('\n');
             }
         }
         else // no translators explicitely specified
--- src/gtk/choice.cpp-orig	2009-06-21 16:28:38.031442000 -0500
+++ src/gtk/choice.cpp	2009-06-21 16:28:41.965385000 -0500
@@ -249,7 +249,7 @@ void wxChoice::Clear()
 void wxChoice::Delete(unsigned int n)
 {
     wxCHECK_RET( m_widget != NULL, wxT("invalid choice") );
-    wxCHECK_RET( IsValid(n), _T("invalid index in wxChoice::Delete") );
+    wxCHECK_RET( IsValid(n), wxT("invalid index in wxChoice::Delete") );
 
     // VZ: apparently GTK+ doesn't have a built-in function to do it (not even
     //     in 2.0), hence this dumb implementation -- still better than nothing
--- src/xrc/xh_sizer.cpp-orig	2009-06-18 17:41:00.507824000 -0500
+++ src/xrc/xh_sizer.cpp	2009-06-18 17:41:05.753542000 -0500
@@ -209,7 +209,7 @@ wxObject* wxSizerXmlHandler::Handle_size
 
     if ( !sizer )
     {
-        wxLogError(_T("Failed to create size of class \"%s\""), m_class.c_str());
+        wxLogError(wxT("Failed to create size of class \"%s\""), m_class.c_str());
         return NULL;
     }
 
--- src/xrc/xmlres.cpp-orig	2009-06-18 17:41:10.707955000 -0500
+++ src/xrc/xmlres.cpp	2009-06-18 17:41:19.078165000 -0500
@@ -190,13 +190,13 @@ bool wxXmlResource::Load(const wxString&
 bool wxXmlResource::Unload(const wxString& filename)
 {
     wxASSERT_MSG( !wxIsWild(filename),
-                    _T("wildcards not supported by wxXmlResource::Unload()") );
+                    wxT("wildcards not supported by wxXmlResource::Unload()") );
 
     wxString fnd = ConvertFileNameToURL(filename);
 #if wxUSE_FILESYSTEM
     const bool isArchive = IsArchive(fnd);
     if ( isArchive )
-        fnd += _T("#zip:");
+        fnd += wxT("#zip:");
 #endif // wxUSE_FILESYSTEM
 
     bool unloaded = false;
@@ -455,8 +455,8 @@ bool wxXmlResource::UpdateResources()
 
         if (modif)
         {
-            wxLogTrace(_T("xrc"),
-                       _T("opening file '%s'"), m_data[i].File.c_str());
+            wxLogTrace(wxT("xrc"),
+                       wxT("opening file '%s'"), m_data[i].File.c_str());
 
             wxInputStream *stream = NULL;
 
@@ -1013,7 +1013,7 @@ static wxColour GetSystemColour(const wx
     if (!name.empty())
     {
         #define SYSCLR(clr) \
-            if (name == _T(#clr)) return wxSystemSettings::GetColour(clr);
+            if (name == wxT(#clr)) return wxSystemSettings::GetColour(clr);
         SYSCLR(wxSYS_COLOUR_SCROLLBAR)
         SYSCLR(wxSYS_COLOUR_BACKGROUND)
         SYSCLR(wxSYS_COLOUR_DESKTOP)
@@ -1328,7 +1328,7 @@ static wxFont GetSystemFont(const wxStri
     if (!name.empty())
     {
         #define SYSFNT(fnt) \
-            if (name == _T(#fnt)) return wxSystemSettings::GetFont(fnt);
+            if (name == wxT(#fnt)) return wxSystemSettings::GetFont(fnt);
         SYSFNT(wxSYS_OEM_FIXED_FONT)
         SYSFNT(wxSYS_ANSI_FIXED_FONT)
         SYSFNT(wxSYS_ANSI_VAR_FONT)
--- src/xrc/xh_menu.cpp-orig	2009-06-18 17:41:24.880356000 -0500
+++ src/xrc/xh_menu.cpp	2009-06-18 17:41:30.060788000 -0500
@@ -88,7 +88,7 @@ wxObject *wxMenuXmlHandler::DoCreateReso
                 kind = wxITEM_RADIO;
             if (GetBool(wxT("checkable")))
             {
-                wxASSERT_MSG( kind == wxITEM_NORMAL, _T("can't have both checkable and radion button at once") );
+                wxASSERT_MSG( kind == wxITEM_NORMAL, wxT("can't have both checkable and radion button at once") );
                 kind = wxITEM_CHECK;
             }
 
--- src/xrc/xh_collpane.cpp-orig	2009-06-18 17:41:36.465288000 -0500
+++ src/xrc/xh_collpane.cpp	2009-06-18 17:41:42.888948000 -0500
@@ -73,11 +73,11 @@ wxObject *wxCollapsiblePaneXmlHandler::D
                     GetID(),
                     label,
                     GetPosition(), GetSize(),
-                    GetStyle(_T("style"), wxCP_DEFAULT_STYLE),
+                    GetStyle(wxT("style"), wxCP_DEFAULT_STYLE),
                     wxDefaultValidator,
                     GetName());
 
-        ctrl->Collapse(GetBool(_T("collapsed")));
+        ctrl->Collapse(GetBool(wxT("collapsed")));
         SetupWindow(ctrl);
 
         wxCollapsiblePane *old_par = m_collpane;
--- src/xrc/xh_dirpicker.cpp-orig	2009-06-18 17:41:51.115532000 -0500
+++ src/xrc/xh_dirpicker.cpp	2009-06-18 17:41:57.839961000 -0500
@@ -40,7 +40,7 @@ wxObject *wxDirPickerCtrlXmlHandler::DoC
                   GetParamValue(wxT("value")),
                   GetText(wxT("message")),
                   GetPosition(), GetSize(),
-                  GetStyle(_T("style"), wxDIRP_DEFAULT_STYLE),
+                  GetStyle(wxT("style"), wxDIRP_DEFAULT_STYLE),
                   wxDefaultValidator,
                   GetName());
 
--- src/xrc/xh_toolb.cpp-orig	2009-06-18 17:42:04.739609000 -0500
+++ src/xrc/xh_toolb.cpp	2009-06-18 17:42:15.380388000 -0500
@@ -75,7 +75,7 @@ wxObject *wxToolBarXmlHandler::DoCreateR
             if (GetBool(wxT("toggle")))
             {
                 wxASSERT_MSG( kind == wxITEM_NORMAL,
-                              _T("can't have both toggleable and radion button at once") );
+                              wxT("can't have both toggleable and radion button at once") );
                 kind = wxITEM_CHECK;
             }
             m_toolbar->AddTool(GetID(),
--- src/xrc/xh_animatctrl.cpp-orig	2009-06-18 17:42:23.485735000 -0500
+++ src/xrc/xh_animatctrl.cpp	2009-06-18 17:42:29.053132000 -0500
@@ -37,7 +37,7 @@ wxObject *wxAnimationCtrlXmlHandler::DoC
                   GetID(),
                   GetAnimation(wxT("animation")),
                   GetPosition(), GetSize(),
-                  GetStyle(_T("style"), wxAC_DEFAULT_STYLE),
+                  GetStyle(wxT("style"), wxAC_DEFAULT_STYLE),
                   GetName());
 
     // if no inactive-bitmap has been provided, GetBitmap() will return wxNullBitmap
--- src/xrc/xh_fontpicker.cpp-orig	2009-06-18 17:42:36.029151000 -0500
+++ src/xrc/xh_fontpicker.cpp	2009-06-18 17:42:41.816526000 -0500
@@ -43,7 +43,7 @@ wxObject *wxFontPickerCtrlXmlHandler::Do
                   GetID(),
                   f,
                   GetPosition(), GetSize(),
-                  GetStyle(_T("style"), wxFNTP_DEFAULT_STYLE),
+                  GetStyle(wxT("style"), wxFNTP_DEFAULT_STYLE),
                   wxDefaultValidator,
                   GetName());
 
--- src/xrc/xh_unkwn.cpp-orig	2009-06-18 17:42:48.911680000 -0500
+++ src/xrc/xh_unkwn.cpp	2009-06-18 17:42:53.880251000 -0500
@@ -90,7 +90,7 @@ wxUnknownWidgetXmlHandler::wxUnknownWidg
 wxObject *wxUnknownWidgetXmlHandler::DoCreateResource()
 {
     wxASSERT_MSG( m_instance == NULL,
-                  _T("'unknown' controls can't be subclassed, use wxXmlResource::AttachUnknownControl") );
+                  wxT("'unknown' controls can't be subclassed, use wxXmlResource::AttachUnknownControl") );
 
     wxPanel *panel =
         new wxUnknownControlContainer(m_parentAsWindow,
--- src/xrc/xh_tree.cpp-orig	2009-06-18 17:43:00.051456000 -0500
+++ src/xrc/xh_tree.cpp	2009-06-18 17:43:04.685112000 -0500
@@ -49,7 +49,7 @@ wxObject *wxTreeCtrlXmlHandler::DoCreate
     tree->Create(m_parentAsWindow,
                 GetID(),
                 GetPosition(), GetSize(),
-                GetStyle(_T("style"), wxTR_DEFAULT_STYLE),
+                GetStyle(wxT("style"), wxTR_DEFAULT_STYLE),
                 wxDefaultValidator,
                 GetName());
 
--- src/xrc/xh_htmllbox.cpp-orig	2009-06-18 17:43:12.353738000 -0500
+++ src/xrc/xh_htmllbox.cpp	2009-06-18 17:43:18.252721000 -0500
@@ -50,7 +50,7 @@ wxObject *wxSimpleHtmlListBoxXmlHandler:
                         GetID(),
                         GetPosition(), GetSize(),
                         strList,
-                        GetStyle(_T("style"), wxHLB_DEFAULT_STYLE),
+                        GetStyle(wxT("style"), wxHLB_DEFAULT_STYLE),
                         wxDefaultValidator,
                         GetName());
 
--- src/xrc/xh_clrpicker.cpp-orig	2009-06-18 17:43:25.372419000 -0500
+++ src/xrc/xh_clrpicker.cpp	2009-06-18 17:43:30.915840000 -0500
@@ -38,7 +38,7 @@ wxObject *wxColourPickerCtrlXmlHandler::
                   GetID(),
                   GetColour(wxT("value"), *wxBLACK),
                   GetPosition(), GetSize(),
-                  GetStyle(_T("style"), wxCLRP_DEFAULT_STYLE),
+                  GetStyle(wxT("style"), wxCLRP_DEFAULT_STYLE),
                   wxDefaultValidator,
                   GetName());
 
--- src/xrc/xh_filepicker.cpp-orig	2009-06-18 17:43:37.711740000 -0500
+++ src/xrc/xh_filepicker.cpp	2009-06-18 17:43:43.058979000 -0500
@@ -44,7 +44,7 @@ wxObject *wxFilePickerCtrlXmlHandler::Do
                   GetText(wxT("message")),
                   GetParamValue(wxT("wildcard")),
                   GetPosition(), GetSize(),
-                  GetStyle(_T("style"), wxFLP_DEFAULT_STYLE),
+                  GetStyle(wxT("style"), wxFLP_DEFAULT_STYLE),
                   wxDefaultValidator,
                   GetName());
 
--- src/xrc/xh_datectrl.cpp-orig	2009-06-18 17:43:49.879885000 -0500
+++ src/xrc/xh_datectrl.cpp	2009-06-18 17:43:55.707946000 -0500
@@ -40,7 +40,7 @@ wxObject *wxDateCtrlXmlHandler::DoCreate
                   GetID(),
                   wxDefaultDateTime,
                   GetPosition(), GetSize(),
-                  GetStyle(_T("style"), wxDP_DEFAULT | wxDP_SHOWCENTURY),
+                  GetStyle(wxT("style"), wxDP_DEFAULT | wxDP_SHOWCENTURY),
                   wxDefaultValidator,
                   GetName());
 
--- src/richtext/richtextbuffer.cpp-orig	2009-06-18 17:47:19.675271000 -0500
+++ src/richtext/richtextbuffer.cpp	2009-06-18 17:47:26.091185000 -0500
@@ -730,7 +730,7 @@ bool wxRichTextParagraphLayoutBox::Layou
         // Assume this box only contains paragraphs
 
         wxRichTextParagraph* child = wxDynamicCast(node->GetData(), wxRichTextParagraph);
-        wxCHECK_MSG( child, false, _T("Unknown object in layout") );
+        wxCHECK_MSG( child, false, wxT("Unknown object in layout") );
 
         // TODO: what if the child hasn't been laid out (e.g. involved in Undo) but still has 'old' lines
         if ( !forceQuickLayout &&
--- src/richtext/richtextfontpage.cpp-orig	2009-06-18 17:46:06.346915000 -0500
+++ src/richtext/richtextfontpage.cpp	2009-06-18 17:46:16.053255000 -0500
@@ -134,7 +134,7 @@ void wxRichTextFontPage::CreateControls(
     wxStaticText* itemStaticText6 = new wxStaticText( itemPanel1, wxID_STATIC, _("&Font:"), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
-    m_faceTextCtrl = new wxTextCtrl( itemPanel1, ID_RICHTEXTFONTPAGE_FACETEXTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
+    m_faceTextCtrl = new wxTextCtrl( itemPanel1, ID_RICHTEXTFONTPAGE_FACETEXTCTRL, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
     m_faceTextCtrl->SetHelpText(_("Type a font name."));
     if (wxRichTextFontPage::ShowToolTips())
         m_faceTextCtrl->SetToolTip(_("Type a font name."));
@@ -152,7 +152,7 @@ void wxRichTextFontPage::CreateControls(
     wxStaticText* itemStaticText10 = new wxStaticText( itemPanel1, wxID_STATIC, _("&Size:"), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer9->Add(itemStaticText10, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
-    m_sizeTextCtrl = new wxTextCtrl( itemPanel1, ID_RICHTEXTFONTPAGE_SIZETEXTCTRL, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_sizeTextCtrl = new wxTextCtrl( itemPanel1, ID_RICHTEXTFONTPAGE_SIZETEXTCTRL, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_sizeTextCtrl->SetHelpText(_("Type a size in points."));
     if (wxRichTextFontPage::ShowToolTips())
         m_sizeTextCtrl->SetToolTip(_("Type a size in points."));
@@ -175,7 +175,7 @@ void wxRichTextFontPage::CreateControls(
     itemBoxSizer14->Add(itemStaticText15, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_styleCtrlStrings;
-    m_styleCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTFONTPAGE_STYLECTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_styleCtrlStrings, wxCB_READONLY );
+    m_styleCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTFONTPAGE_STYLECTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_styleCtrlStrings, wxCB_READONLY );
     m_styleCtrl->SetHelpText(_("Select regular or italic style."));
     if (wxRichTextFontPage::ShowToolTips())
         m_styleCtrl->SetToolTip(_("Select regular or italic style."));
@@ -188,7 +188,7 @@ void wxRichTextFontPage::CreateControls(
     itemBoxSizer17->Add(itemStaticText18, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_weightCtrlStrings;
-    m_weightCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTFONTPAGE_WEIGHTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_weightCtrlStrings, wxCB_READONLY );
+    m_weightCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTFONTPAGE_WEIGHTCTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_weightCtrlStrings, wxCB_READONLY );
     m_weightCtrl->SetHelpText(_("Select regular or bold."));
     if (wxRichTextFontPage::ShowToolTips())
         m_weightCtrl->SetToolTip(_("Select regular or bold."));
@@ -201,7 +201,7 @@ void wxRichTextFontPage::CreateControls(
     itemBoxSizer20->Add(itemStaticText21, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_underliningCtrlStrings;
-    m_underliningCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTFONTPAGE_UNDERLINING_CTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_underliningCtrlStrings, wxCB_READONLY );
+    m_underliningCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTFONTPAGE_UNDERLINING_CTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_underliningCtrlStrings, wxCB_READONLY );
     m_underliningCtrl->SetHelpText(_("Select underlining or no underlining."));
     if (wxRichTextFontPage::ShowToolTips())
         m_underliningCtrl->SetToolTip(_("Select underlining or no underlining."));
--- src/richtext/richtextliststylepage.cpp-orig	2009-06-18 17:46:26.443592000 -0500
+++ src/richtext/richtextliststylepage.cpp	2009-06-18 17:46:37.328601000 -0500
@@ -182,7 +182,7 @@ void wxRichTextListStylePage::CreateCont
     wxStaticText* itemStaticText5 = new wxStaticText( itemPanel1, wxID_STATIC, _("&List level:"), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer4->Add(itemStaticText5, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);
 
-    m_levelCtrl = new wxSpinCtrl( itemPanel1, ID_RICHTEXTLISTSTYLEPAGE_LEVEL, _T("1"), wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 1, 10, 1 );
+    m_levelCtrl = new wxSpinCtrl( itemPanel1, ID_RICHTEXTLISTSTYLEPAGE_LEVEL, wxT("1"), wxDefaultPosition, wxSize(60, -1), wxSP_ARROW_KEYS, 1, 10, 1 );
     m_levelCtrl->SetHelpText(_("Selects the list level to edit."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_levelCtrl->SetToolTip(_("Selects the list level to edit."));
@@ -270,7 +270,7 @@ void wxRichTextListStylePage::CreateCont
     wxBoxSizer* itemBoxSizer28 = new wxBoxSizer(wxHORIZONTAL);
     itemBoxSizer26->Add(itemBoxSizer28, 0, wxGROW, 5);
     wxArrayString m_symbolCtrlStrings;
-    m_symbolCtrl = new wxComboBox( itemPanel10, ID_RICHTEXTLISTSTYLEPAGE_SYMBOLCTRL, _T(""), wxDefaultPosition, wxSize(60, -1), m_symbolCtrlStrings, wxCB_DROPDOWN );
+    m_symbolCtrl = new wxComboBox( itemPanel10, ID_RICHTEXTLISTSTYLEPAGE_SYMBOLCTRL, wxT(""), wxDefaultPosition, wxSize(60, -1), m_symbolCtrlStrings, wxCB_DROPDOWN );
     m_symbolCtrl->SetHelpText(_("The bullet character."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_symbolCtrl->SetToolTip(_("The bullet character."));
@@ -288,7 +288,7 @@ void wxRichTextListStylePage::CreateCont
     itemBoxSizer26->Add(itemStaticText32, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_symbolFontCtrlStrings;
-    m_symbolFontCtrl = new wxComboBox( itemPanel10, ID_RICHTEXTLISTSTYLEPAGE_SYMBOLFONTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_symbolFontCtrlStrings, wxCB_DROPDOWN );
+    m_symbolFontCtrl = new wxComboBox( itemPanel10, ID_RICHTEXTLISTSTYLEPAGE_SYMBOLFONTCTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_symbolFontCtrlStrings, wxCB_DROPDOWN );
     if (wxRichTextListStylePage::ShowToolTips())
         m_symbolFontCtrl->SetToolTip(_("Available fonts."));
     itemBoxSizer26->Add(m_symbolFontCtrl, 0, wxGROW|wxALL, 5);
@@ -299,7 +299,7 @@ void wxRichTextListStylePage::CreateCont
     itemBoxSizer26->Add(itemStaticText35, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_bulletNameCtrlStrings;
-    m_bulletNameCtrl = new wxComboBox( itemPanel10, ID_RICHTEXTLISTSTYLEPAGE_NAMECTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_bulletNameCtrlStrings, wxCB_DROPDOWN );
+    m_bulletNameCtrl = new wxComboBox( itemPanel10, ID_RICHTEXTLISTSTYLEPAGE_NAMECTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_bulletNameCtrlStrings, wxCB_DROPDOWN );
     m_bulletNameCtrl->SetHelpText(_("A standard bullet name."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_bulletNameCtrl->SetToolTip(_("A standard bullet name."));
@@ -382,7 +382,7 @@ void wxRichTextListStylePage::CreateCont
 
     wxBoxSizer* itemBoxSizer59 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer57->Add(itemBoxSizer59, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
-    m_indentLeft = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_INDENTLEFT, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_indentLeft = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_INDENTLEFT, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_indentLeft->SetHelpText(_("The left indent."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_indentLeft->SetToolTip(_("The left indent."));
@@ -393,7 +393,7 @@ void wxRichTextListStylePage::CreateCont
 
     wxBoxSizer* itemBoxSizer62 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer57->Add(itemBoxSizer62, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
-    m_indentLeftFirst = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_INDENTFIRSTLINE, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_indentLeftFirst = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_INDENTFIRSTLINE, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_indentLeftFirst->SetHelpText(_("The first line indent."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_indentLeftFirst->SetToolTip(_("The first line indent."));
@@ -404,7 +404,7 @@ void wxRichTextListStylePage::CreateCont
 
     wxBoxSizer* itemBoxSizer65 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer57->Add(itemBoxSizer65, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
-    m_indentRight = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_INDENTRIGHT, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_indentRight = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_INDENTRIGHT, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_indentRight->SetHelpText(_("The right indent."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_indentRight->SetToolTip(_("The right indent."));
@@ -433,7 +433,7 @@ void wxRichTextListStylePage::CreateCont
 
     wxBoxSizer* itemBoxSizer76 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer74->Add(itemBoxSizer76, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
-    m_spacingBefore = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_SPACINGBEFORE, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_spacingBefore = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_SPACINGBEFORE, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_spacingBefore->SetHelpText(_("The spacing before the paragraph."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_spacingBefore->SetToolTip(_("The spacing before the paragraph."));
@@ -444,7 +444,7 @@ void wxRichTextListStylePage::CreateCont
 
     wxBoxSizer* itemBoxSizer79 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer74->Add(itemBoxSizer79, 0, wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 5);
-    m_spacingAfter = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_SPACINGAFTER, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_spacingAfter = new wxTextCtrl( itemPanel37, ID_RICHTEXTLISTSTYLEPAGE_SPACINGAFTER, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_spacingAfter->SetHelpText(_("The spacing after the paragraph."));
     if (wxRichTextListStylePage::ShowToolTips())
         m_spacingAfter->SetToolTip(_("The spacing after the paragraph."));
--- src/richtext/richtextbulletspage.cpp-orig	2009-06-18 17:46:46.907334000 -0500
+++ src/richtext/richtextbulletspage.cpp	2009-06-18 17:46:54.887006000 -0500
@@ -220,7 +220,7 @@ void wxRichTextBulletsPage::CreateContro
     itemBoxSizer19->Add(itemStaticText20, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_symbolCtrlStrings;
-    m_symbolCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTBULLETSPAGE_SYMBOLCTRL, _T(""), wxDefaultPosition, wxSize(60, -1), m_symbolCtrlStrings, wxCB_DROPDOWN );
+    m_symbolCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTBULLETSPAGE_SYMBOLCTRL, wxT(""), wxDefaultPosition, wxSize(60, -1), m_symbolCtrlStrings, wxCB_DROPDOWN );
     m_symbolCtrl->SetHelpText(_("The bullet character."));
     if (wxRichTextBulletsPage::ShowToolTips())
         m_symbolCtrl->SetToolTip(_("The bullet character."));
@@ -238,7 +238,7 @@ void wxRichTextBulletsPage::CreateContro
     itemBoxSizer18->Add(itemStaticText24, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_symbolFontCtrlStrings;
-    m_symbolFontCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTBULLETSPAGE_SYMBOLFONTCTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_symbolFontCtrlStrings, wxCB_DROPDOWN );
+    m_symbolFontCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTBULLETSPAGE_SYMBOLFONTCTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_symbolFontCtrlStrings, wxCB_DROPDOWN );
     m_symbolFontCtrl->SetHelpText(_("Available fonts."));
     if (wxRichTextBulletsPage::ShowToolTips())
         m_symbolFontCtrl->SetToolTip(_("Available fonts."));
@@ -250,7 +250,7 @@ void wxRichTextBulletsPage::CreateContro
     itemBoxSizer18->Add(itemStaticText27, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_bulletNameCtrlStrings;
-    m_bulletNameCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTBULLETSPAGE_NAMECTRL, _T(""), wxDefaultPosition, wxDefaultSize, m_bulletNameCtrlStrings, wxCB_DROPDOWN );
+    m_bulletNameCtrl = new wxComboBox( itemPanel1, ID_RICHTEXTBULLETSPAGE_NAMECTRL, wxT(""), wxDefaultPosition, wxDefaultSize, m_bulletNameCtrlStrings, wxCB_DROPDOWN );
     m_bulletNameCtrl->SetHelpText(_("A standard bullet name."));
     if (wxRichTextBulletsPage::ShowToolTips())
         m_bulletNameCtrl->SetToolTip(_("A standard bullet name."));
@@ -261,7 +261,7 @@ void wxRichTextBulletsPage::CreateContro
     wxStaticText* itemStaticText30 = new wxStaticText( itemPanel1, ID_RICHTEXTBULLETSPAGE_NUMBERSTATIC, _("&Number:"), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer18->Add(itemStaticText30, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
-    m_numberCtrl = new wxSpinCtrl( itemPanel1, ID_RICHTEXTBULLETSPAGE_NUMBERCTRL, _T("0"), wxDefaultPosition, wxSize(50, -1), wxSP_ARROW_KEYS, 0, 100000, 0 );
+    m_numberCtrl = new wxSpinCtrl( itemPanel1, ID_RICHTEXTBULLETSPAGE_NUMBERCTRL, wxT("0"), wxDefaultPosition, wxSize(50, -1), wxSP_ARROW_KEYS, 0, 100000, 0 );
     m_numberCtrl->SetHelpText(_("The list item number."));
     if (wxRichTextBulletsPage::ShowToolTips())
         m_numberCtrl->SetToolTip(_("The list item number."));
--- src/richtext/richtextindentspage.cpp-orig	2009-06-18 17:47:03.622974000 -0500
+++ src/richtext/richtextindentspage.cpp	2009-06-18 17:47:11.961010000 -0500
@@ -208,7 +208,7 @@ void wxRichTextIndentsSpacingPage::Creat
     wxBoxSizer* itemBoxSizer24 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer22->Add(itemBoxSizer24, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5);
 
-    m_indentLeft = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_INDENT_LEFT, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_indentLeft = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_INDENT_LEFT, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_indentLeft->SetHelpText(_("The left indent."));
     if (wxRichTextIndentsSpacingPage::ShowToolTips())
         m_indentLeft->SetToolTip(_("The left indent."));
@@ -220,7 +220,7 @@ void wxRichTextIndentsSpacingPage::Creat
     wxBoxSizer* itemBoxSizer27 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer22->Add(itemBoxSizer27, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5);
 
-    m_indentLeftFirst = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_INDENT_LEFT_FIRST, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_indentLeftFirst = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_INDENT_LEFT_FIRST, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_indentLeftFirst->SetHelpText(_("The first line indent."));
     if (wxRichTextIndentsSpacingPage::ShowToolTips())
         m_indentLeftFirst->SetToolTip(_("The first line indent."));
@@ -232,7 +232,7 @@ void wxRichTextIndentsSpacingPage::Creat
     wxBoxSizer* itemBoxSizer30 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer22->Add(itemBoxSizer30, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5);
 
-    m_indentRight = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_INDENT_RIGHT, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_indentRight = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_INDENT_RIGHT, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_indentRight->SetHelpText(_("The right indent."));
     if (wxRichTextIndentsSpacingPage::ShowToolTips())
         m_indentRight->SetToolTip(_("The right indent."));
@@ -287,7 +287,7 @@ void wxRichTextIndentsSpacingPage::Creat
     wxBoxSizer* itemBoxSizer43 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer41->Add(itemBoxSizer43, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5);
 
-    m_spacingBefore = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_SPACING_BEFORE, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_spacingBefore = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_SPACING_BEFORE, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     m_spacingBefore->SetHelpText(_("The spacing before the paragraph."));
     if (wxRichTextIndentsSpacingPage::ShowToolTips())
         m_spacingBefore->SetToolTip(_("The spacing before the paragraph."));
@@ -299,7 +299,7 @@ void wxRichTextIndentsSpacingPage::Creat
     wxBoxSizer* itemBoxSizer46 = new wxBoxSizer(wxHORIZONTAL);
     itemFlexGridSizer41->Add(itemBoxSizer46, 1, wxGROW|wxALIGN_CENTER_VERTICAL, 5);
 
-    m_spacingAfter = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_SPACING_AFTER, _T(""), wxDefaultPosition, wxSize(50, -1), 0 );
+    m_spacingAfter = new wxTextCtrl( itemPanel1, ID_RICHTEXTINDENTSSPACINGPAGE_SPACING_AFTER, wxT(""), wxDefaultPosition, wxSize(50, -1), 0 );
     if (wxRichTextIndentsSpacingPage::ShowToolTips())
         m_spacingAfter->SetToolTip(_("The spacing after the paragraph."));
     itemBoxSizer46->Add(m_spacingAfter, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);
--- src/richtext/richtexttabspage.cpp-orig	2009-06-18 17:47:45.685570000 -0500
+++ src/richtext/richtexttabspage.cpp	2009-06-18 17:47:52.088651000 -0500
@@ -113,7 +113,7 @@ void wxRichTextTabsPage::CreateControls(
     wxStaticText* itemStaticText6 = new wxStaticText( itemPanel1, wxID_STATIC, _("&Position (tenths of a mm):"), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_LEFT|wxLEFT|wxRIGHT|wxTOP|wxADJUST_MINSIZE, 5);
 
-    m_tabEditCtrl = new wxTextCtrl( itemPanel1, ID_RICHTEXTTABSPAGE_TABEDIT, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
+    m_tabEditCtrl = new wxTextCtrl( itemPanel1, ID_RICHTEXTTABSPAGE_TABEDIT, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
     m_tabEditCtrl->SetHelpText(_("The tab position."));
     if (wxRichTextTabsPage::ShowToolTips())
         m_tabEditCtrl->SetToolTip(_("The tab position."));
@@ -129,7 +129,7 @@ void wxRichTextTabsPage::CreateControls(
     wxBoxSizer* itemBoxSizer10 = new wxBoxSizer(wxVERTICAL);
     itemBoxSizer4->Add(itemBoxSizer10, 0, wxGROW, 5);
 
-    wxStaticText* itemStaticText11 = new wxStaticText( itemPanel1, wxID_STATIC, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
+    wxStaticText* itemStaticText11 = new wxStaticText( itemPanel1, wxID_STATIC, wxT(""), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer10->Add(itemStaticText11, 0, wxALIGN_CENTER_HORIZONTAL|wxBOTTOM|wxADJUST_MINSIZE, 5);
 
     wxButton* itemButton12 = new wxButton( itemPanel1, ID_RICHTEXTTABSPAGE_NEW_TAB, _("&New"), wxDefaultPosition, wxDefaultSize, 0 );
--- src/richtext/richtextsymboldlg.cpp-orig	2009-06-18 17:45:44.506096000 -0500
+++ src/richtext/richtextsymboldlg.cpp	2009-06-18 17:45:58.757445000 -0500
@@ -404,7 +404,7 @@ void wxSymbolPickerDialog::CreateControl
     itemBoxSizer5->Add(itemStaticText6, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);
 
     wxArrayString m_fontCtrlStrings;
-    m_fontCtrl = new wxComboBox( itemDialog1, ID_SYMBOLPICKERDIALOG_FONT, _T(""), wxDefaultPosition, wxSize(240, -1), m_fontCtrlStrings, wxCB_READONLY );
+    m_fontCtrl = new wxComboBox( itemDialog1, ID_SYMBOLPICKERDIALOG_FONT, wxT(""), wxDefaultPosition, wxSize(240, -1), m_fontCtrlStrings, wxCB_READONLY );
     m_fontCtrl->SetHelpText(_("The font from which to take the symbol."));
     if (wxSymbolPickerDialog::ShowToolTips())
         m_fontCtrl->SetToolTip(_("The font from which to take the symbol."));
@@ -420,7 +420,7 @@ void wxSymbolPickerDialog::CreateControl
 
 #if defined(__UNICODE__)
     wxArrayString m_subsetCtrlStrings;
-    m_subsetCtrl = new wxComboBox( itemDialog1, ID_SYMBOLPICKERDIALOG_SUBSET, _T(""), wxDefaultPosition, wxDefaultSize, m_subsetCtrlStrings, wxCB_READONLY );
+    m_subsetCtrl = new wxComboBox( itemDialog1, ID_SYMBOLPICKERDIALOG_SUBSET, wxT(""), wxDefaultPosition, wxDefaultSize, m_subsetCtrlStrings, wxCB_READONLY );
     m_subsetCtrl->SetHelpText(_("Shows a Unicode subset."));
     if (wxSymbolPickerDialog::ShowToolTips())
         m_subsetCtrl->SetToolTip(_("Shows a Unicode subset."));
@@ -442,7 +442,7 @@ void wxSymbolPickerDialog::CreateControl
     wxStaticText* itemStaticText15 = new wxStaticText( itemDialog1, wxID_STATIC, _("&Character code:"), wxDefaultPosition, wxDefaultSize, 0 );
     itemBoxSizer12->Add(itemStaticText15, 0, wxALIGN_CENTER_VERTICAL|wxALL|wxADJUST_MINSIZE, 5);
 
-    m_characterCodeCtrl = new wxTextCtrl( itemDialog1, ID_SYMBOLPICKERDIALOG_CHARACTERCODE, _T(""), wxDefaultPosition, wxSize(140, -1), wxTE_READONLY|wxTE_CENTRE );
+    m_characterCodeCtrl = new wxTextCtrl( itemDialog1, ID_SYMBOLPICKERDIALOG_CHARACTERCODE, wxT(""), wxDefaultPosition, wxSize(140, -1), wxTE_READONLY|wxTE_CENTRE );
     m_characterCodeCtrl->SetHelpText(_("The character code."));
     if (wxSymbolPickerDialog::ShowToolTips())
         m_characterCodeCtrl->SetToolTip(_("The character code."));
@@ -840,7 +840,7 @@ bool wxSymbolListCtrl::DoSetCurrent(int 
 {
     wxASSERT_MSG( current == wxNOT_FOUND ||
                     (current >= m_minSymbolValue && current <= m_maxSymbolValue),
-                  _T("wxSymbolListCtrl::DoSetCurrent(): invalid symbol value") );
+                  wxT("wxSymbolListCtrl::DoSetCurrent(): invalid symbol value") );
 
     if ( current == m_current )
     {
@@ -893,7 +893,7 @@ void wxSymbolListCtrl::SetSelection(int 
 {
     wxCHECK_RET( selection == wxNOT_FOUND ||
                   (selection >= m_minSymbolValue && selection < m_maxSymbolValue),
-                  _T("wxSymbolListCtrl::SetSelection(): invalid symbol value") );
+                  wxT("wxSymbolListCtrl::SetSelection(): invalid symbol value") );
 
     DoSetCurrent(selection);
 }
--- src/regex/regc_locale.c-orig	2009-06-18 15:38:38.682155000 -0500
+++ src/regex/regc_locale.c	2009-06-18 15:39:00.707521000 -0500
@@ -24,101 +24,101 @@ static struct cname {
     chr *name;
     char code;
 } cnames[] = {
-    {_T("NUL"),                 '\0'},
-    {_T("SOH"),                 '\001'},
-    {_T("STX"),                 '\002'},
-    {_T("ETX"),                 '\003'},
-    {_T("EOT"),                 '\004'},
-    {_T("ENQ"),                 '\005'},
-    {_T("ACK"),                 '\006'},
-    {_T("BEL"),                 '\007'},
-    {_T("alert"),               '\007'},
-    {_T("BS"),                  '\010'},
-    {_T("backspace"),           '\b'},
-    {_T("HT"),                  '\011'},
-    {_T("tab"),                 '\t'},
-    {_T("LF"),                  '\012'},
-    {_T("newline"),             '\n'},
-    {_T("VT"),                  '\013'},
-    {_T("vertical-tab"),        '\v'},
-    {_T("FF"),                  '\014'},
-    {_T("form-feed"),           '\f'},
-    {_T("CR"),                  '\015'},
-    {_T("carriage-return"),     '\r'},
-    {_T("SO"),                  '\016'},
-    {_T("SI"),                  '\017'},
-    {_T("DLE"),                 '\020'},
-    {_T("DC1"),                 '\021'},
-    {_T("DC2"),                 '\022'},
-    {_T("DC3"),                 '\023'},
-    {_T("DC4"),                 '\024'},
-    {_T("NAK"),                 '\025'},
-    {_T("SYN"),                 '\026'},
-    {_T("ETB"),                 '\027'},
-    {_T("CAN"),                 '\030'},
-    {_T("EM"),                  '\031'},
-    {_T("SUB"),                 '\032'},
-    {_T("ESC"),                 '\033'},
-    {_T("IS4"),                 '\034'},
-    {_T("FS"),                  '\034'},
-    {_T("IS3"),                 '\035'},
-    {_T("GS"),                  '\035'},
-    {_T("IS2"),                 '\036'},
-    {_T("RS"),                  '\036'},
-    {_T("IS1"),                 '\037'},
-    {_T("US"),                  '\037'},
-    {_T("space"),               ' '},
-    {_T("exclamation-mark"),    '!'},
-    {_T("quotation-mark"),      '"'},
-    {_T("number-sign"),         '#'},
-    {_T("dollar-sign"),         '$'},
-    {_T("percent-sign"),        '%'},
-    {_T("ampersand"),           '&'},
-    {_T("apostrophe"),          '\''},
-    {_T("left-parenthesis"),    '('},
-    {_T("right-parenthesis"),   ')'},
-    {_T("asterisk"),            '*'},
-    {_T("plus-sign"),           '+'},
-    {_T("comma"),               ','},
-    {_T("hyphen"),              '-'},
-    {_T("hyphen-minus"),        '-'},
-    {_T("period"),              '.'},
-    {_T("full-stop"),           '.'},
-    {_T("slash"),               '/'},
-    {_T("solidus"),             '/'},
-    {_T("zero"),                '0'},
-    {_T("one"),                 '1'},
-    {_T("two"),                 '2'},
-    {_T("three"),               '3'},
-    {_T("four"),                '4'},
-    {_T("five"),                '5'},
-    {_T("six"),                 '6'},
-    {_T("seven"),               '7'},
-    {_T("eight"),               '8'},
-    {_T("nine"),                '9'},
-    {_T("colon"),               ':'},
-    {_T("semicolon"),           ';'},
-    {_T("less-than-sign"),      '<'},
-    {_T("equals-sign"),         '='},
-    {_T("greater-than-sign"),   '>'},
-    {_T("question-mark"),       '?'},
-    {_T("commercial-at"),       '@'},
-    {_T("left-square-bracket"), '['},
-    {_T("backslash"),           '\\'},
-    {_T("reverse-solidus"),     '\\'},
-    {_T("right-square-bracket"), ']'},
-    {_T("circumflex"),          '^'},
-    {_T("circumflex-accent"),   '^'},
-    {_T("underscore"),          '_'},
-    {_T("low-line"),            '_'},
-    {_T("grave-accent"),        '`'},
-    {_T("left-brace"),          '{'},
-    {_T("left-curly-bracket"),  '{'},
-    {_T("vertical-line"),       '|'},
-    {_T("right-brace"),         '}'},
-    {_T("right-curly-bracket"), '}'},
-    {_T("tilde"),               '~'},
-    {_T("DEL"),                 '\177'},
+    {wxT("NUL"),                 '\0'},
+    {wxT("SOH"),                 '\001'},
+    {wxT("STX"),                 '\002'},
+    {wxT("ETX"),                 '\003'},
+    {wxT("EOT"),                 '\004'},
+    {wxT("ENQ"),                 '\005'},
+    {wxT("ACK"),                 '\006'},
+    {wxT("BEL"),                 '\007'},
+    {wxT("alert"),               '\007'},
+    {wxT("BS"),                  '\010'},
+    {wxT("backspace"),           '\b'},
+    {wxT("HT"),                  '\011'},
+    {wxT("tab"),                 '\t'},
+    {wxT("LF"),                  '\012'},
+    {wxT("newline"),             '\n'},
+    {wxT("VT"),                  '\013'},
+    {wxT("vertical-tab"),        '\v'},
+    {wxT("FF"),                  '\014'},
+    {wxT("form-feed"),           '\f'},
+    {wxT("CR"),                  '\015'},
+    {wxT("carriage-return"),     '\r'},
+    {wxT("SO"),                  '\016'},
+    {wxT("SI"),                  '\017'},
+    {wxT("DLE"),                 '\020'},
+    {wxT("DC1"),                 '\021'},
+    {wxT("DC2"),                 '\022'},
+    {wxT("DC3"),                 '\023'},
+    {wxT("DC4"),                 '\024'},
+    {wxT("NAK"),                 '\025'},
+    {wxT("SYN"),                 '\026'},
+    {wxT("ETB"),                 '\027'},
+    {wxT("CAN"),                 '\030'},
+    {wxT("EM"),                  '\031'},
+    {wxT("SUB"),                 '\032'},
+    {wxT("ESC"),                 '\033'},
+    {wxT("IS4"),                 '\034'},
+    {wxT("FS"),                  '\034'},
+    {wxT("IS3"),                 '\035'},
+    {wxT("GS"),                  '\035'},
+    {wxT("IS2"),                 '\036'},
+    {wxT("RS"),                  '\036'},
+    {wxT("IS1"),                 '\037'},
+    {wxT("US"),                  '\037'},
+    {wxT("space"),               ' '},
+    {wxT("exclamation-mark"),    '!'},
+    {wxT("quotation-mark"),      '"'},
+    {wxT("number-sign"),         '#'},
+    {wxT("dollar-sign"),         '$'},
+    {wxT("percent-sign"),        '%'},
+    {wxT("ampersand"),           '&'},
+    {wxT("apostrophe"),          '\''},
+    {wxT("left-parenthesis"),    '('},
+    {wxT("right-parenthesis"),   ')'},
+    {wxT("asterisk"),            '*'},
+    {wxT("plus-sign"),           '+'},
+    {wxT("comma"),               ','},
+    {wxT("hyphen"),              '-'},
+    {wxT("hyphen-minus"),        '-'},
+    {wxT("period"),              '.'},
+    {wxT("full-stop"),           '.'},
+    {wxT("slash"),               '/'},
+    {wxT("solidus"),             '/'},
+    {wxT("zero"),                '0'},
+    {wxT("one"),                 '1'},
+    {wxT("two"),                 '2'},
+    {wxT("three"),               '3'},
+    {wxT("four"),                '4'},
+    {wxT("five"),                '5'},
+    {wxT("six"),                 '6'},
+    {wxT("seven"),               '7'},
+    {wxT("eight"),               '8'},
+    {wxT("nine"),                '9'},
+    {wxT("colon"),               ':'},
+    {wxT("semicolon"),           ';'},
+    {wxT("less-than-sign"),      '<'},
+    {wxT("equals-sign"),         '='},
+    {wxT("greater-than-sign"),   '>'},
+    {wxT("question-mark"),       '?'},
+    {wxT("commercial-at"),       '@'},
+    {wxT("left-square-bracket"), '['},
+    {wxT("backslash"),           '\\'},
+    {wxT("reverse-solidus"),     '\\'},
+    {wxT("right-square-bracket"), ']'},
+    {wxT("circumflex"),          '^'},
+    {wxT("circumflex-accent"),   '^'},
+    {wxT("underscore"),          '_'},
+    {wxT("low-line"),            '_'},
+    {wxT("grave-accent"),        '`'},
+    {wxT("left-brace"),          '{'},
+    {wxT("left-curly-bracket"),  '{'},
+    {wxT("vertical-line"),       '|'},
+    {wxT("right-brace"),         '}'},
+    {wxT("right-curly-bracket"), '}'},
+    {wxT("tilde"),               '~'},
+    {wxT("DEL"),                 '\177'},
     {NULL,                      0}
 };
 
@@ -850,8 +850,8 @@ cclass(v, startp, endp, cases)
      */
 
     static chr *classNames[] = {
-	_T("alnum"), _T("alpha"), _T("ascii"), _T("blank"), _T("cntrl"), _T("digit"), _T("graph"),
-	_T("lower"), _T("print"), _T("punct"), _T("space"), _T("upper"), _T("xdigit"), NULL
+	wxT("alnum"), wxT("alpha"), wxT("ascii"), wxT("blank"), wxT("cntrl"), wxT("digit"), wxT("graph"),
+	wxT("lower"), wxT("print"), wxT("punct"), wxT("space"), wxT("upper"), wxT("xdigit"), NULL
     };
 
     enum classes {
@@ -871,9 +871,9 @@ cclass(v, startp, endp, cases)
      * Remap lower and upper to alpha if the match is case insensitive.
      */
 
-    if (cases && len == 5 && (wxStrncmp(_T("lower"), np, 5) == 0
-	    || wxStrncmp(_T("upper"), np, 5) == 0)) {
-	np = _T("alpha");
+    if (cases && len == 5 && (wxStrncmp(wxT("lower"), np, 5) == 0
+	    || wxStrncmp(wxT("upper"), np, 5) == 0)) {
+	np = wxT("alpha");
     }
 
     /*
@@ -1057,9 +1057,9 @@ int cases;                      /* case-
     /* find the name */
     len = endp - startp;
     np = startp;
-    if (cases && len == 5 && (wxStrncmp(_T("lower"), np, 5) == 0 ||
-                                    wxStrncmp(_T("upper"), np, 5) == 0))
-            np = _T("alpha");
+    if (cases && len == 5 && (wxStrncmp(wxT("lower"), np, 5) == 0 ||
+                                    wxStrncmp(wxT("upper"), np, 5) == 0))
+            np = wxT("alpha");
     for (cc = cclasses; cc->name != NULL; cc++)
             if (wxStrlen_(cc->name) == len && wxStrncmp(cc->name, np, len) == 0)
                     break;          /* NOTE BREAK OUT */
--- src/dfb/pen.cpp-orig	2009-06-18 19:58:24.752860000 -0500
+++ src/dfb/pen.cpp	2009-06-18 19:58:32.250033000 -0500
@@ -42,7 +42,7 @@ public:
     {
         if ( style != wxSOLID && style != wxTRANSPARENT )
         {
-            wxFAIL_MSG( _T("only wxSOLID and wxTRANSPARENT styles are supported") );
+            wxFAIL_MSG( wxT("only wxSOLID and wxTRANSPARENT styles are supported") );
             style = wxSOLID;
         }
 
@@ -61,14 +61,14 @@ IMPLEMENT_DYNAMIC_CLASS(wxPen, wxGDIObje
 
 wxPen::wxPen(const wxColour &colour, int width, int style)
 {
-    wxASSERT_MSG( width <= 1, _T("only width=0,1 are supported") );
+    wxASSERT_MSG( width <= 1, wxT("only width=0,1 are supported") );
 
     m_refData = new wxPenRefData(colour, style);
 }
 
 wxPen::wxPen(const wxBitmap& WXUNUSED(stipple), int WXUNUSED(width))
 {
-    wxFAIL_MSG( _T("stipple pens not supported") );
+    wxFAIL_MSG( wxT("stipple pens not supported") );
 
     m_refData = new wxPenRefData();
 }
@@ -87,7 +87,7 @@ void wxPen::SetColour(const wxColour &co
 
 void wxPen::SetDashes(int WXUNUSED(number_of_dashes), const wxDash *WXUNUSED(dash))
 {
-    wxFAIL_MSG( _T("SetDashes not implemented") );
+    wxFAIL_MSG( wxT("SetDashes not implemented") );
 }
 
 void wxPen::SetColour(unsigned char red, unsigned char green, unsigned char blue)
@@ -98,12 +98,12 @@ void wxPen::SetColour(unsigned char red,
 
 void wxPen::SetCap(int WXUNUSED(capStyle))
 {
-    wxFAIL_MSG( _T("SetCap not implemented") );
+    wxFAIL_MSG( wxT("SetCap not implemented") );
 }
 
 void wxPen::SetJoin(int WXUNUSED(joinStyle))
 {
-    wxFAIL_MSG( _T("SetJoin not implemented") );
+    wxFAIL_MSG( wxT("SetJoin not implemented") );
 }
 
 void wxPen::SetStyle(int style)
@@ -114,17 +114,17 @@ void wxPen::SetStyle(int style)
 
 void wxPen::SetStipple(const wxBitmap& WXUNUSED(stipple))
 {
-    wxFAIL_MSG( _T("SetStipple not implemented") );
+    wxFAIL_MSG( wxT("SetStipple not implemented") );
 }
 
 void wxPen::SetWidth(int width)
 {
-    wxASSERT_MSG( width <= 1, _T("only width=0,1 are implemented") );
+    wxASSERT_MSG( width <= 1, wxT("only width=0,1 are implemented") );
 }
 
 int wxPen::GetDashes(wxDash **ptr) const
 {
-    wxFAIL_MSG( _T("GetDashes not implemented") );
+    wxFAIL_MSG( wxT("GetDashes not implemented") );
 
     *ptr = NULL;
     return 0;
@@ -132,14 +132,14 @@ int wxPen::GetDashes(wxDash **ptr) const
 
 int wxPen::GetDashCount() const
 {
-    wxFAIL_MSG( _T("GetDashCount not implemented") );
+    wxFAIL_MSG( wxT("GetDashCount not implemented") );
 
     return 0;
 }
 
 wxDash* wxPen::GetDash() const
 {
-    wxFAIL_MSG( _T("GetDash not implemented") );
+    wxFAIL_MSG( wxT("GetDash not implemented") );
 
     return NULL;
 }
@@ -148,7 +148,7 @@ int wxPen::GetCap() const
 {
     wxCHECK_MSG( Ok(), -1, wxT("invalid pen") );
 
-    wxFAIL_MSG( _T("GetCap not implemented") );
+    wxFAIL_MSG( wxT("GetCap not implemented") );
     return -1;
 }
 
@@ -156,7 +156,7 @@ int wxPen::GetJoin() const
 {
     wxCHECK_MSG( Ok(), -1, wxT("invalid pen") );
 
-    wxFAIL_MSG( _T("GetJoin not implemented") );
+    wxFAIL_MSG( wxT("GetJoin not implemented") );
     return -1;
 }
 
@@ -185,7 +185,7 @@ wxBitmap *wxPen::GetStipple() const
 {
     wxCHECK_MSG( Ok(), NULL, wxT("invalid pen") );
 
-    wxFAIL_MSG( _T("GetStipple not implemented") );
+    wxFAIL_MSG( wxT("GetStipple not implemented") );
     return NULL;
 }
 
--- src/dfb/dc.cpp-orig	2009-06-18 19:58:38.980201000 -0500
+++ src/dfb/dc.cpp	2009-06-18 19:58:44.935269000 -0500
@@ -60,7 +60,7 @@ wxDC::wxDC(const wxIDirectFBSurfacePtr& 
 void wxDC::DFBInit(const wxIDirectFBSurfacePtr& surface)
 {
     m_ok = (surface != NULL);
-    wxCHECK_RET( surface != NULL, _T("invalid surface") );
+    wxCHECK_RET( surface != NULL, wxT("invalid surface") );
 
     m_surface = surface;
 
@@ -86,7 +86,7 @@ void wxDC::DoSetClippingRegion(wxCoord c
     wxSize size(GetSize());
 
     wxASSERT_MSG( !m_clipping,
-                  _T("narrowing clipping region not implemented yet") );
+                  wxT("narrowing clipping region not implemented yet") );
 
     // NB: We intersect the clipping rectangle with surface's area here because
     //     DirectFB will return an error if you try to set clipping rectangle
@@ -161,9 +161,9 @@ bool wxDC::DoFloodFill(wxCoord x, wxCoor
 
 bool wxDC::DoGetPixel(wxCoord x, wxCoord y, wxColour *col) const
 {
-    wxCHECK_MSG( col, false, _T("NULL colour parameter in wxDC::GetPixel"));
+    wxCHECK_MSG( col, false, wxT("NULL colour parameter in wxDC::GetPixel"));
 
-    wxFAIL_MSG( _T("GetPixel not implemented") );
+    wxFAIL_MSG( wxT("GetPixel not implemented") );
     return false;
 }
 
@@ -171,7 +171,7 @@ void wxDC::DoCrossHair(wxCoord x, wxCoor
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("CrossHair not implemented") );
+    wxFAIL_MSG( wxT("CrossHair not implemented") );
 }
 
 void wxDC::DoDrawLine(wxCoord x1, wxCoord y1, wxCoord x2, wxCoord y2)
@@ -220,7 +220,7 @@ void wxDC::DoDrawArc(wxCoord x1, wxCoord
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("DrawArc not implemented") );
+    wxFAIL_MSG( wxT("DrawArc not implemented") );
 }
 
 void wxDC::DoDrawPoint(wxCoord x, wxCoord y)
@@ -239,7 +239,7 @@ void wxDC::DoDrawPolygon(int n, wxPoint 
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("DrawPolygon not implemented") );
+    wxFAIL_MSG( wxT("DrawPolygon not implemented") );
 }
 
 void wxDC::DoDrawLines(int n, wxPoint points[], wxCoord xoffset, wxCoord yoffset)
@@ -247,7 +247,7 @@ void wxDC::DoDrawLines(int n, wxPoint po
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
     // TODO: impl. using DirectDB's DrawLines
-    wxFAIL_MSG( _T("DrawLines not implemented") );
+    wxFAIL_MSG( wxT("DrawLines not implemented") );
 }
 
 void wxDC::DoDrawRectangle(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
@@ -294,21 +294,21 @@ void wxDC::DoDrawRoundedRectangle(wxCoor
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("DrawRoundedRectangle not implemented") );
+    wxFAIL_MSG( wxT("DrawRoundedRectangle not implemented") );
 }
 
 void wxDC::DoDrawEllipse(wxCoord x, wxCoord y, wxCoord width, wxCoord height)
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("DrawElipse not implemented") );
+    wxFAIL_MSG( wxT("DrawElipse not implemented") );
 }
 
 void wxDC::DoDrawEllipticArc(wxCoord x,wxCoord y,wxCoord w,wxCoord h,double sa,double ea)
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("DrawElipticArc not implemented") );
+    wxFAIL_MSG( wxT("DrawElipticArc not implemented") );
 }
 
 void wxDC::DoDrawText(const wxString& text, wxCoord x, wxCoord y)
@@ -351,7 +351,7 @@ void wxDC::DoDrawRotatedText(const wxStr
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("DrawRotatedText not implemented") );
+    wxFAIL_MSG( wxT("DrawRotatedText not implemented") );
 }
 
 // ---------------------------------------------------------------------------
@@ -381,7 +381,7 @@ void wxDC::SetPalette(const wxPalette& W
 {
     wxCHECK_RET( Ok(), wxT("invalid dc") );
 
-    wxFAIL_MSG( _T("SetPalette not implemented") );
+    wxFAIL_MSG( wxT("SetPalette not implemented") );
 }
 #endif // wxUSE_PALETTE
 
@@ -429,7 +429,7 @@ void wxDC::SetLogicalFunction(int functi
     // NB: we could also support XOR, but for blitting only (via DSBLIT_XOR);
     //     and possibly others via SetSrc/DstBlendFunction()
     wxASSERT_MSG( function == wxCOPY,
-                  _T("only wxCOPY logical function supported") );
+                  wxT("only wxCOPY logical function supported") );
 
     m_logicalFunction = function;
 }
@@ -537,7 +537,7 @@ void wxDC::ComputeScaleAndOrigin()
     //            is not currently implemented here; probably makes sense to
     //            switch to Cairo instead of implementing everything for DFB
     wxASSERT_MSG( m_scaleX == 1.0 && m_scaleY == 1.0,
-                  _T("scaling is not implemented in wxDFB") );
+                  wxT("scaling is not implemented in wxDFB") );
 }
 
 void wxDC::SetMapMode(int mode)
@@ -689,12 +689,12 @@ bool wxDC::DoBlit(wxCoord xdest, wxCoord
                   int rop, bool useMask,
                   wxCoord xsrcMask, wxCoord ysrcMask)
 {
-    wxCHECK_MSG( Ok(), false, _T("invalid dc") );
-    wxCHECK_MSG( source, false, _T("invalid source dc") );
+    wxCHECK_MSG( Ok(), false, wxT("invalid dc") );
+    wxCHECK_MSG( source, false, wxT("invalid source dc") );
 
     // NB: we could also support XOR here (via DSBLIT_XOR)
     //     and possibly others via SetSrc/DstBlendFunction()
-    wxCHECK_MSG( rop == wxCOPY, false, _T("only wxCOPY function supported") );
+    wxCHECK_MSG( rop == wxCOPY, false, wxT("only wxCOPY function supported") );
 
     // transform the source DC coords to the device ones
     xsrc = source->LogicalToDeviceX(xsrc);
@@ -702,7 +702,7 @@ bool wxDC::DoBlit(wxCoord xdest, wxCoord
 
     // FIXME_DFB: use the mask origin when drawing transparently
     wxASSERT_MSG( xsrcMask == -1 && ysrcMask == -1,
-                  _T("non-default source mask offset not implemented") );
+                  wxT("non-default source mask offset not implemented") );
 #if 0
     if (xsrcMask == -1 && ysrcMask == -1)
     {
@@ -762,13 +762,13 @@ void wxDC::DoDrawSubBitmap(const wxBitma
 
     // NB: we could also support XOR here (via DSBLIT_XOR)
     //     and possibly others via SetSrc/DstBlendFunction()
-    wxCHECK_RET( rop == wxCOPY, _T("only wxCOPY function supported") );
+    wxCHECK_RET( rop == wxCOPY, wxT("only wxCOPY function supported") );
 
     if ( bmp.GetDepth() == 1 )
     {
         // Mono bitmaps are handled in special way -- all 1s are drawn in
         // foreground colours, all 0s in background colour.
-        wxFAIL_MSG( _T("drawing mono bitmaps not implemented") );
+        wxFAIL_MSG( wxT("drawing mono bitmaps not implemented") );
         return;
     }
 
@@ -778,7 +778,7 @@ void wxDC::DoDrawSubBitmap(const wxBitma
         //            applicable because DirectFB doesn't implement ROPs; OTOH,
         //            it has blitting modes that can be useful; finally, see
         //            DFB's SetSrcBlendFunction() and SetSrcColorKey()
-        wxFAIL_MSG( _T("drawing bitmaps with masks not implemented") );
+        wxFAIL_MSG( wxT("drawing bitmaps with masks not implemented") );
         return;
     }
 
@@ -799,7 +799,7 @@ bool wxDC::DoBlitFromSurface(const wxIDi
     src->GetSize(&srcsize.x, &srcsize.y);
     if ( !wxRect(srcx, srcy, w, h).Intersects(wxRect(srcsize)) )
     {
-        wxLogDebug(_T("Blitting from area outside of the source surface, caller code needs fixing."));
+        wxLogDebug(wxT("Blitting from area outside of the source surface, caller code needs fixing."));
         return false;
     }
 
--- src/dfb/window.cpp-orig	2009-06-18 19:58:51.162812000 -0500
+++ src/dfb/window.cpp	2009-06-18 19:58:57.836253000 -0500
@@ -37,8 +37,8 @@
 #include "wx/dfb/private.h"
 #include "wx/private/overlay.h"
 
-#define TRACE_EVENTS _T("events")
-#define TRACE_PAINT  _T("paint")
+#define TRACE_EVENTS wxT("events")
+#define TRACE_PAINT  wxT("paint")
 
 // ===========================================================================
 // implementation
@@ -157,10 +157,10 @@ bool wxWindowDFB::Create(wxWindow *paren
 
 wxIDirectFBSurfacePtr wxWindowDFB::ObtainDfbSurface() const
 {
-    wxCHECK_MSG( m_parent, NULL, _T("parentless window?") );
+    wxCHECK_MSG( m_parent, NULL, wxT("parentless window?") );
 
     wxIDirectFBSurfacePtr parentSurface(m_parent->GetDfbSurface());
-    wxCHECK_MSG( parentSurface, NULL, _T("invalid parent surface") );
+    wxCHECK_MSG( parentSurface, NULL, wxT("invalid parent surface") );
 
     wxRect r(GetRect());
     AdjustForParentClientOrigin(r.x, r.y, 0);
@@ -174,7 +174,7 @@ wxIDirectFBSurfacePtr wxWindowDFB::GetDf
     if ( !m_surface )
     {
         m_surface = ObtainDfbSurface();
-        wxASSERT_MSG( m_surface, _T("invalid DirectFB surface") );
+        wxASSERT_MSG( m_surface, wxT("invalid DirectFB surface") );
     }
 
     return m_surface;
@@ -262,7 +262,7 @@ void wxWindowDFB::SetFocus()
 void wxWindowDFB::DFBKillFocus()
 {
     wxCHECK_RET( gs_focusedWindow == this,
-                 _T("killing focus on window that doesn't have it") );
+                 wxT("killing focus on window that doesn't have it") );
 
     gs_focusedWindow = NULL;
 
@@ -331,13 +331,13 @@ bool wxWindowDFB::Show(bool show)
 // Raise the window to the top of the Z order
 void wxWindowDFB::Raise()
 {
-    wxFAIL_MSG( _T("Raise() not implemented") );
+    wxFAIL_MSG( wxT("Raise() not implemented") );
 }
 
 // Lower the window to the bottom of the Z order
 void wxWindowDFB::Lower()
 {
-    wxFAIL_MSG( _T("Lower() not implemented") );
+    wxFAIL_MSG( wxT("Lower() not implemented") );
 }
 
 void wxWindowDFB::DoCaptureMouse()
@@ -400,7 +400,7 @@ void wxWindowDFB::WarpPointer(int x, int
     if ( y >= h ) y = h-1;
 
     wxIDirectFBDisplayLayerPtr layer(wxIDirectFB::Get()->GetDisplayLayer());
-    wxCHECK_RET( layer, _T("no display layer") );
+    wxCHECK_RET( layer, wxT("no display layer") );
 
     layer->WarpCursor(x, y);
 }
@@ -412,7 +412,7 @@ bool wxWindowDFB::Reparent(wxWindowBase 
         return false;
 
 #warning "implement this"
-    wxFAIL_MSG( _T("reparenting not yet implemented") );
+    wxFAIL_MSG( wxT("reparenting not yet implemented") );
 
     return true;
 }
@@ -436,7 +436,7 @@ void wxWindowDFB::DoGetPosition(int *x, 
 
 static wxPoint GetScreenPosOfClientOrigin(const wxWindowDFB *win)
 {
-    wxCHECK_MSG( win, wxPoint(0, 0), _T("no window provided") );
+    wxCHECK_MSG( win, wxPoint(0, 0), wxT("no window provided") );
 
     wxPoint pt(win->GetPosition() + win->GetClientAreaOrigin());
 
@@ -665,7 +665,7 @@ void wxWindowDFB::DoRefreshWindow()
 void wxWindowDFB::DoRefreshRect(const wxRect& rect)
 {
     wxWindow *parent = GetParent();
-    wxCHECK_RET( parent, _T("no parent") );
+    wxCHECK_RET( parent, wxT("no parent") );
 
     // don't overlap outside of the window (NB: 'rect' is in window coords):
     wxRect r(rect);
@@ -674,7 +674,7 @@ void wxWindowDFB::DoRefreshRect(const wx
         return;
 
     wxLogTrace(TRACE_PAINT,
-               _T("%p ('%s'): refresh rect [%i,%i,%i,%i]"),
+               wxT("%p ('%s'): refresh rect [%i,%i,%i,%i]"),
                this, GetName().c_str(),
                rect.x, rect.y, rect.GetRight(), rect.GetBottom());
 
@@ -701,7 +701,7 @@ void wxWindowDFB::Freeze()
 
 void wxWindowDFB::Thaw()
 {
-    wxASSERT_MSG( IsFrozen(), _T("Thaw() without matching Freeze()") );
+    wxASSERT_MSG( IsFrozen(), wxT("Thaw() without matching Freeze()") );
 
     if ( --m_frozenness == 0 )
     {
@@ -712,10 +712,10 @@ void wxWindowDFB::Thaw()
 
 void wxWindowDFB::PaintWindow(const wxRect& rect)
 {
-    wxCHECK_RET( !IsFrozen() && IsShown(), _T("shouldn't be called") );
+    wxCHECK_RET( !IsFrozen() && IsShown(), wxT("shouldn't be called") );
 
     wxLogTrace(TRACE_PAINT,
-               _T("%p ('%s'): painting region [%i,%i,%i,%i]"),
+               wxT("%p ('%s'): painting region [%i,%i,%i,%i]"),
                this, GetName().c_str(),
                rect.x, rect.y, rect.GetRight(), rect.GetBottom());
 
@@ -742,7 +742,7 @@ void wxWindowDFB::PaintWindow(const wxRe
     }
     else
     {
-        wxLogTrace(TRACE_PAINT, _T("%p ('%s'): not sending wxNcPaintEvent"),
+        wxLogTrace(TRACE_PAINT, wxT("%p ('%s'): not sending wxNcPaintEvent"),
                    this, GetName().c_str());
     }
 
@@ -755,7 +755,7 @@ void wxWindowDFB::PaintWindow(const wxRe
     }
     else
     {
-        wxLogTrace(TRACE_PAINT, _T("%p ('%s'): not sending wxPaintEvent"),
+        wxLogTrace(TRACE_PAINT, wxT("%p ('%s'): not sending wxPaintEvent"),
                    this, GetName().c_str());
     }
 
@@ -832,7 +832,7 @@ void wxWindowDFB::AddOverlay(wxOverlayIm
 
 void wxWindowDFB::RemoveOverlay(wxOverlayImpl *overlay)
 {
-    wxCHECK_RET( m_overlays, _T("no overlays to remove") );
+    wxCHECK_RET( m_overlays, wxT("no overlays to remove") );
 
     m_overlays->Remove(overlay);
 
@@ -853,7 +853,7 @@ void wxWindowDFB::RemoveOverlay(wxOverla
 #define KEY(dfb, wx)                                                \
     case dfb:                                                       \
           wxLogTrace(TRACE_EVENTS,                                  \
-                     _T("key " #dfb " mapped to " #wx));            \
+                     wxT("key " #dfb " mapped to " #wx));            \
           return wx
 
 // returns translated keycode, i.e. the one for KEYUP/KEYDOWN where 'a'..'z' is
@@ -997,7 +997,7 @@ static long GetTranslatedKeyCode(DFBInpu
 
         case DIKI_KEYDEF_END:
         case DIKI_NUMBER_OF_KEYS:
-            wxFAIL_MSG( _T("invalid key_id value") );
+            wxFAIL_MSG( wxT("invalid key_id value") );
             return 0;
     }
 
@@ -1045,8 +1045,8 @@ void wxWindowDFB::HandleKeyEvent(const w
     const DFBWindowEvent& e = event_;
 
     wxLogTrace(TRACE_EVENTS,
-               _T("handling key %s event for window %p ('%s')"),
-               e.type == DWET_KEYUP ? _T("up") : _T("down"),
+               wxT("handling key %s event for window %p ('%s')"),
+               e.type == DWET_KEYUP ? wxT("up") : wxT("down"),
                this, GetName().c_str());
 
     // fill in wxKeyEvent fields:
@@ -1129,6 +1129,6 @@ wxWindow* wxFindWindowAtPointer(wxPoint&
 
 wxWindow* wxFindWindowAtPoint(const wxPoint& pt)
 {
-    wxFAIL_MSG( _T("wxFindWindowAtPoint not implemented") );
+    wxFAIL_MSG( wxT("wxFindWindowAtPoint not implemented") );
     return NULL;
 }
--- src/dfb/bitmap.cpp-orig	2009-06-18 19:59:03.354957000 -0500
+++ src/dfb/bitmap.cpp	2009-06-18 19:59:08.668926000 -0500
@@ -33,10 +33,10 @@
 // Creates a surface that will use wxImage's pixel data (RGB only)
 static wxIDirectFBSurfacePtr CreateSurfaceForImage(const wxImage& image)
 {
-    wxCHECK_MSG( image.Ok(), NULL, _T("invalid image") );
+    wxCHECK_MSG( image.Ok(), NULL, wxT("invalid image") );
     // FIXME_DFB: implement alpha handling by merging alpha buffer with RGB
     //            into a temporary RGBA surface
-    wxCHECK_MSG( !image.HasAlpha(), NULL, _T("alpha channel not supported") );
+    wxCHECK_MSG( !image.HasAlpha(), NULL, wxT("alpha channel not supported") );
 
     DFBSurfaceDescription desc;
     desc.flags = (DFBSurfaceDescriptionFlags)
@@ -110,7 +110,7 @@ bool wxBitmap::Create(const wxIDirectFBS
 {
     UnRef();
 
-    wxCHECK_MSG( surface, false, _T("invalid surface") );
+    wxCHECK_MSG( surface, false, wxT("invalid surface") );
 
     m_refData = new wxBitmapRefData();
     M_BITMAP->m_surface = surface;
@@ -153,7 +153,7 @@ wxBitmap::wxBitmap(const wxImage& image,
         return;
 
     // FIXME: implement mask creation from image's mask (or alpha channel?)
-    wxASSERT_MSG( !image.HasMask(), _T("image masks are ignored for now") );
+    wxASSERT_MSG( !image.HasMask(), wxT("image masks are ignored for now") );
 }
 
 wxImage wxBitmap::ConvertToImage() const
@@ -170,7 +170,7 @@ wxImage wxBitmap::ConvertToImage() const
         return wxNullImage;
 
     // FIXME: implement mask setting in the image
-    wxASSERT_MSG( GetMask() == NULL, _T("bitmap masks are ignored for now") );
+    wxASSERT_MSG( GetMask() == NULL, wxT("bitmap masks are ignored for now") );
 
     return img;
 }
@@ -185,7 +185,7 @@ wxBitmap::wxBitmap(const char bits[], in
 {
     wxCHECK_RET( depth == 1, wxT("can only create mono bitmap from XBM data") );
 
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 bool wxBitmap::IsOk() const
@@ -336,21 +336,21 @@ void wxBitmap::SetHeight(int height)
 {
     AllocExclusive();
 
-    wxFAIL_MSG( _T("SetHeight not implemented") );
+    wxFAIL_MSG( wxT("SetHeight not implemented") );
 }
 
 void wxBitmap::SetWidth(int width)
 {
     AllocExclusive();
 
-    wxFAIL_MSG( _T("SetWidth not implemented") );
+    wxFAIL_MSG( wxT("SetWidth not implemented") );
 }
 
 void wxBitmap::SetDepth(int depth)
 {
     AllocExclusive();
 
-    wxFAIL_MSG( _T("SetDepth not implemented") );
+    wxFAIL_MSG( wxT("SetDepth not implemented") );
 }
 
 wxIDirectFBSurfacePtr wxBitmap::GetDirectFBSurface() const
--- src/dfb/fontmgr.cpp-orig	2009-06-18 19:59:17.037145000 -0500
+++ src/dfb/fontmgr.cpp	2009-06-18 19:59:23.489782000 -0500
@@ -54,7 +54,7 @@ wxFontInstance::wxFontInstance(float ptS
     desc.fract_height = pixSize;
     m_font = wxIDirectFB::Get()->CreateFont(filename.fn_str(), &desc);
 
-    wxASSERT_MSG( m_font, _T("cannot create font instance") );
+    wxASSERT_MSG( m_font, wxT("cannot create font instance") );
 }
 
 // ----------------------------------------------------------------------------
@@ -133,8 +133,8 @@ wxFontBundle::wxFontBundle(const wxStrin
 void wxFontsManager::AddAllFonts()
 {
     wxString path;
-    if ( !wxGetEnv(_T("WXDFB_FONTPATH"), &path) )
-        path = _T(wxINSTALL_PREFIX "/share/wx/fonts");
+    if ( !wxGetEnv(wxT("WXDFB_FONTPATH"), &path) )
+        path = wxT(wxINSTALL_PREFIX "/share/wx/fonts");
 
     wxStringTokenizer tkn(path, wxPATH_SEP);
     while ( tkn.HasMoreTokens() )
@@ -142,7 +142,7 @@ void wxFontsManager::AddAllFonts()
         wxString dir = tkn.GetNextToken();
 
         wxArrayString indexFiles;
-        if ( !wxDir::GetAllFiles(dir, &indexFiles, _T("FontsIndex")) )
+        if ( !wxDir::GetAllFiles(dir, &indexFiles, wxT("FontsIndex")) )
             continue;
 
         for ( wxArrayString::const_iterator i = indexFiles.begin();
@@ -171,7 +171,7 @@ void wxFontsManager::AddFontsFromDir(con
         return;
     }
 
-    wxLogTrace(_T("font"), _T("adding fonts from %s"), dir.c_str());
+    wxLogTrace(wxT("font"), wxT("adding fonts from %s"), dir.c_str());
 
     wxFileConfig cfg(wxEmptyString, wxEmptyString,
                      indexFile, wxEmptyString,
@@ -198,27 +198,27 @@ ReadFilePath(const wxString& name, const
     if ( p.empty() || wxFileName(p).IsAbsolute() )
         return p;
 
-    return dir + _T("/") + p;
+    return dir + wxT("/") + p;
 }
 
 void wxFontsManager::AddFont(const wxString& dir,
                              const wxString& name,
                              wxFileConfig& cfg)
 {
-    wxLogTrace(_T("font"), _T("adding font '%s'"), name.c_str());
+    wxLogTrace(wxT("font"), wxT("adding font '%s'"), name.c_str());
 
-    wxConfigPathChanger ch(&cfg, wxString::Format(_T("/%s/"), name.c_str()));
+    wxConfigPathChanger ch(&cfg, wxString::Format(wxT("/%s/"), name.c_str()));
 
     AddBundle
     (
       new wxFontBundle
           (
             name,
-            ReadFilePath(_T("Regular"), dir, cfg),
-            ReadFilePath(_T("Italic"), dir, cfg),
-            ReadFilePath(_T("Bold"), dir, cfg),
-            ReadFilePath(_T("BoldItalic"), dir, cfg),
-            cfg.Read(_T("IsFixed"), (long)false)
+            ReadFilePath(wxT("Regular"), dir, cfg),
+            ReadFilePath(wxT("Italic"), dir, cfg),
+            ReadFilePath(wxT("Bold"), dir, cfg),
+            ReadFilePath(wxT("BoldItalic"), dir, cfg),
+            cfg.Read(wxT("IsFixed"), (long)false)
           )
     );
 }
@@ -227,7 +227,7 @@ void wxFontsManager::SetDefaultFonts(wxF
 {
     wxString name;
 
-    if ( cfg.Read(_T("Default"), &name) )
+    if ( cfg.Read(wxT("Default"), &name) )
     {
         m_defaultFacenames[wxFONTFAMILY_DECORATIVE] =
         m_defaultFacenames[wxFONTFAMILY_ROMAN] =
@@ -237,16 +237,16 @@ void wxFontsManager::SetDefaultFonts(wxF
         m_defaultFacenames[wxFONTFAMILY_TELETYPE] = name;
     }
 
-    if ( cfg.Read(_T("DefaultDecorative"), &name) )
+    if ( cfg.Read(wxT("DefaultDecorative"), &name) )
         m_defaultFacenames[wxFONTFAMILY_DECORATIVE] = name;
-    if ( cfg.Read(_T("DefaultRoman"), &name) )
+    if ( cfg.Read(wxT("DefaultRoman"), &name) )
         m_defaultFacenames[wxFONTFAMILY_ROMAN] = name;
-    if ( cfg.Read(_T("DefaultScript"), &name) )
+    if ( cfg.Read(wxT("DefaultScript"), &name) )
         m_defaultFacenames[wxFONTFAMILY_SCRIPT] = name;
-    if ( cfg.Read(_T("DefaultSwiss"), &name) )
+    if ( cfg.Read(wxT("DefaultSwiss"), &name) )
         m_defaultFacenames[wxFONTFAMILY_SWISS] = name;
-    if ( cfg.Read(_T("DefaultModern"), &name) )
+    if ( cfg.Read(wxT("DefaultModern"), &name) )
         m_defaultFacenames[wxFONTFAMILY_MODERN] = name;
-    if ( cfg.Read(_T("DefaultTeletype"), &name) )
+    if ( cfg.Read(wxT("DefaultTeletype"), &name) )
         m_defaultFacenames[wxFONTFAMILY_TELETYPE] = name;
 }
--- src/dfb/region.cpp-orig	2009-06-18 19:59:29.425782000 -0500
+++ src/dfb/region.cpp	2009-06-18 19:59:41.150040000 -0500
@@ -142,20 +142,20 @@ bool wxRegion::DoUnionWithRect(const wxR
     }
     else
     {
-        wxFAIL_MSG( _T("only rectangular regions are supported") );
+        wxFAIL_MSG( wxT("only rectangular regions are supported") );
         return false;
     }
 }
 
 bool wxRegion::DoUnionWithRegion(const wxRegion& region)
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
     return DoUnionWithRect(M_REGION_OF(region)->m_rect);
 }
 
 bool wxRegion::DoIntersect(const wxRegion& region)
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
 
     AllocExclusive();
     M_REGION->m_rect.Intersect(M_REGION_OF(region)->m_rect);
@@ -164,8 +164,8 @@ bool wxRegion::DoIntersect(const wxRegio
 
 bool wxRegion::DoSubtract(const wxRegion& region)
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
-    wxCHECK_MSG( Ok(), false, _T("invalid region") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
+    wxCHECK_MSG( Ok(), false, wxT("invalid region") );
 
     const wxRect& rect = M_REGION_OF(region)->m_rect;
 
@@ -183,15 +183,15 @@ bool wxRegion::DoSubtract(const wxRegion
     }
     else
     {
-        wxFAIL_MSG( _T("only rectangular regions implemented") );
+        wxFAIL_MSG( wxT("only rectangular regions implemented") );
         return false;
     }
 }
 
 bool wxRegion::DoXor(const wxRegion& region)
 {
-    wxCHECK_MSG( region.Ok(), false, _T("invalid region") );
-    wxFAIL_MSG( _T("Xor not implemented") );
+    wxCHECK_MSG( region.Ok(), false, wxT("invalid region") );
+    wxFAIL_MSG( wxT("Xor not implemented") );
     return false;
 }
 
@@ -202,7 +202,7 @@ bool wxRegion::DoXor(const wxRegion& reg
 
 wxRegionContain wxRegion::DoContainsPoint(wxCoord x, wxCoord y) const
 {
-    wxCHECK_MSG( Ok(), wxOutRegion, _T("invalid region") );
+    wxCHECK_MSG( Ok(), wxOutRegion, wxT("invalid region") );
 
     if (M_REGION->m_rect.Contains(x, y))
         return wxInRegion;
@@ -212,7 +212,7 @@ wxRegionContain wxRegion::DoContainsPoin
 
 wxRegionContain wxRegion::DoContainsRect(const wxRect& rect) const
 {
-    wxCHECK_MSG( Ok(), wxOutRegion, _T("invalid region") );
+    wxCHECK_MSG( Ok(), wxOutRegion, wxT("invalid region") );
 
     // 1) is the rectangle entirely covered by the region?
     if (M_REGION->m_rect.Contains(rect))
--- src/dfb/toplevel.cpp-orig	2009-06-18 19:59:45.995190000 -0500
+++ src/dfb/toplevel.cpp	2009-06-18 19:59:51.409742000 -0500
@@ -21,8 +21,8 @@
 #include "wx/evtloop.h"
 #include "wx/dfb/private.h"
 
-#define TRACE_EVENTS _T("events")
-#define TRACE_PAINT  _T("paint")
+#define TRACE_EVENTS wxT("events")
+#define TRACE_PAINT  wxT("paint")
 
 // ============================================================================
 // globals
@@ -126,7 +126,7 @@ bool wxTopLevelWindowDFB::Create(wxWindo
 
     // create DirectFB window:
     wxIDirectFBDisplayLayerPtr layer(wxIDirectFB::Get()->GetDisplayLayer());
-    wxCHECK_MSG( layer, false, _T("no display layer") );
+    wxCHECK_MSG( layer, false, wxT("no display layer") );
 
     DFBWindowDescription desc;
     desc.flags = (DFBWindowDescriptionFlags)
@@ -425,7 +425,7 @@ void wxTopLevelWindowDFB::HandleQueuedPa
             continue; // nothing to refresh
 
         wxLogTrace(TRACE_PAINT,
-                   _T("%p ('%s'): processing paint request [%i,%i,%i,%i]"),
+                   wxT("%p ('%s'): processing paint request [%i,%i,%i,%i]"),
                    this, GetName().c_str(),
                    clipped.x, clipped.y, clipped.GetRight(), clipped.GetBottom());
 
@@ -464,7 +464,7 @@ void wxTopLevelWindowDFB::HandleQueuedPa
     GetDfbSurface()->FlipToFront(rptr);
 
     wxLogTrace(TRACE_PAINT,
-               _T("%p ('%s'): processed %i paint requests, flipped surface: [%i,%i,%i,%i]"),
+               wxT("%p ('%s'): processed %i paint requests, flipped surface: [%i,%i,%i,%i]"),
                this, GetName().c_str(),
                requestsCount,
                paintedRect.x, paintedRect.y,
@@ -480,7 +480,7 @@ void wxTopLevelWindowDFB::DoRefreshRect(
         return;
 
     wxLogTrace(TRACE_PAINT,
-               _T("%p ('%s'): [TLW] refresh rect [%i,%i,%i,%i]"),
+               wxT("%p ('%s'): [TLW] refresh rect [%i,%i,%i,%i]"),
                this, GetName().c_str(),
                rect.x, rect.y, rect.GetRight(), rect.GetBottom());
 
@@ -499,9 +499,9 @@ void wxTopLevelWindowDFB::Update()
 
 void wxTopLevelWindowDFB::SetDfbFocus()
 {
-    wxCHECK_RET( IsShown(), _T("cannot set focus to hidden window") );
+    wxCHECK_RET( IsShown(), wxT("cannot set focus to hidden window") );
     wxASSERT_MSG( FindFocus() && FindFocus()->GetTLW() == this,
-                  _T("setting DirectFB focus to unexpected window") );
+                  wxT("setting DirectFB focus to unexpected window") );
 
     GetDirectFBWindow()->RequestFocus();
 }
@@ -514,7 +514,7 @@ void wxTopLevelWindowDFB::HandleDFBWindo
     if ( gs_dfbWindowsMap.find(event.window_id) == gs_dfbWindowsMap.end() )
     {
         wxLogTrace(TRACE_EVENTS,
-                   _T("received event for unknown DirectFB window, ignoring"));
+                   wxT("received event for unknown DirectFB window, ignoring"));
         return;
     }
 
@@ -535,7 +535,7 @@ void wxTopLevelWindowDFB::HandleDFBWindo
         case DWET_NONE:
         case DWET_ALL:
         {
-            wxFAIL_MSG( _T("invalid event type") );
+            wxFAIL_MSG( wxT("invalid event type") );
             break;
         }
 
@@ -546,12 +546,12 @@ void wxTopLevelWindowDFB::HandleDFBWindo
 
     if ( !recipient )
     {
-        wxLogTrace(TRACE_EVENTS, _T("ignoring event: no recipient window"));
+        wxLogTrace(TRACE_EVENTS, wxT("ignoring event: no recipient window"));
         return;
     }
 
     wxCHECK_RET( recipient && recipient->GetTLW() == tlw,
-                 _T("event recipient not in TLW which received the event") );
+                 wxT("event recipient not in TLW which received the event") );
 
     // process the event:
     (recipient->*handlerFunc)(event_);
--- src/dfb/evtloop.cpp-orig	2009-06-18 19:59:57.053557000 -0500
+++ src/dfb/evtloop.cpp	2009-06-18 20:00:02.917484000 -0500
@@ -31,7 +31,7 @@
 #include "wx/private/socketevtdispatch.h"
 #include "wx/dfb/private.h"
 
-#define TRACE_EVENTS _T("events")
+#define TRACE_EVENTS wxT("events")
 
 // ===========================================================================
 // implementation
@@ -76,14 +76,14 @@ wxIDirectFBEventBufferPtr wxEventLoop::G
 
 bool wxEventLoop::Pending() const
 {
-    wxCHECK_MSG( ms_buffer, false, _T("invalid event buffer") );
+    wxCHECK_MSG( ms_buffer, false, wxT("invalid event buffer") );
 
     return ms_buffer->HasEvent();
 }
 
 bool wxEventLoop::Dispatch()
 {
-    wxCHECK_MSG( ms_buffer, false, _T("invalid event buffer") );
+    wxCHECK_MSG( ms_buffer, false, wxT("invalid event buffer") );
 
     // NB: we don't block indefinitely waiting for an event, but instead
     //     time out after a brief period in order to make sure that
@@ -128,7 +128,7 @@ bool wxEventLoop::Dispatch()
 
 void wxEventLoop::WakeUp()
 {
-    wxCHECK_RET( ms_buffer, _T("invalid event buffer") );
+    wxCHECK_RET( ms_buffer, wxT("invalid event buffer") );
 
     ms_buffer->WakeUp();
 }
@@ -179,7 +179,7 @@ void wxEventLoop::HandleDFBEvent(const w
 #endif
         {
             wxLogTrace(TRACE_EVENTS,
-                       _T("ignoring event of unsupported class %i"),
+                       wxT("ignoring event of unsupported class %i"),
                        (int)event.GetClass());
         }
     }
--- src/dfb/settings.cpp-orig	2009-06-18 20:00:09.596883000 -0500
+++ src/dfb/settings.cpp	2009-06-18 20:00:16.864329000 -0500
@@ -58,7 +58,7 @@ wxFont wxSystemSettingsNative::GetFont(w
         }
 
         default:
-            wxFAIL_MSG( _T("unknown font type") );
+            wxFAIL_MSG( wxT("unknown font type") );
             return wxNullFont;
     }
 }
@@ -85,7 +85,7 @@ int wxSystemSettingsNative::GetMetric(wx
 #endif
 
         default:
-            wxFAIL_MSG( _T("unsupported metric") );
+            wxFAIL_MSG( wxT("unsupported metric") );
             return -1;
     }
 }
@@ -100,7 +100,7 @@ bool wxSystemSettingsNative::HasFeature(
             return false;
 
         default:
-            wxFAIL_MSG( _T("unknown feature") );
+            wxFAIL_MSG( wxT("unknown feature") );
             return false;
     }
 }
--- src/dfb/brush.cpp-orig	2009-06-18 20:00:21.645790000 -0500
+++ src/dfb/brush.cpp	2009-06-18 20:00:25.853769000 -0500
@@ -45,7 +45,7 @@ public:
     {
         if ( style != wxSOLID && style != wxTRANSPARENT )
         {
-            wxFAIL_MSG( _T("only wxSOLID and wxTRANSPARENT styles are supported") );
+            wxFAIL_MSG( wxT("only wxSOLID and wxTRANSPARENT styles are supported") );
             style = wxSOLID;
         }
 
--- src/dfb/overlay.cpp-orig	2009-06-18 20:00:31.098767000 -0500
+++ src/dfb/overlay.cpp	2009-06-18 20:00:35.413555000 -0500
@@ -98,7 +98,7 @@ void wxOverlayImpl::EndDrawing(wxWindowD
 void wxOverlayImpl::Clear(wxWindowDC *dc)
 {
     wxASSERT_MSG( IsOk(),
-                  _T("You cannot Clear an overlay that is not initialized") );
+                  wxT("You cannot Clear an overlay that is not initialized") );
 
     m_isEmpty = true;
 }
--- src/dfb/dcclient.cpp-orig	2009-06-18 20:00:41.428639000 -0500
+++ src/dfb/dcclient.cpp	2009-06-18 20:00:49.869631000 -0500
@@ -32,7 +32,7 @@
 
 #include "wx/dfb/private.h"
 
-#define TRACE_PAINT  _T("paint")
+#define TRACE_PAINT  wxT("paint")
 
 // ===========================================================================
 // implementation
@@ -72,7 +72,7 @@ static wxRect GetUncoveredWindowArea(wxW
 static
 wxIDirectFBSurfacePtr CreateDummySurface(wxWindow *win, const wxRect *rect)
 {
-    wxLogTrace(TRACE_PAINT, _T("%p ('%s'): creating dummy DC surface"),
+    wxLogTrace(TRACE_PAINT, wxT("%p ('%s'): creating dummy DC surface"),
                win, win->GetName().c_str());
     wxSize size(rect ? rect->GetSize() : win->GetSize());
     return win->GetDfbSurface()->CreateCompatible
@@ -95,7 +95,7 @@ wxWindowDC::wxWindowDC(wxWindow *win)
 
 void wxWindowDC::InitForWin(wxWindow *win, const wxRect *rect)
 {
-    wxCHECK_RET( win, _T("invalid window") );
+    wxCHECK_RET( win, wxT("invalid window") );
 
     m_win = win;
 
@@ -121,7 +121,7 @@ void wxWindowDC::InitForWin(wxWindow *wi
         if ( win->GetTLW()->IsPainting() && !updateRegion.IsEmpty() )
         {
             r.Intersect(updateRegion.AsRect());
-            wxCHECK_RET( !r.IsEmpty(), _T("invalid painting rectangle") );
+            wxCHECK_RET( !r.IsEmpty(), wxT("invalid painting rectangle") );
 
             // parent TLW will flip the entire surface when painting is done
             m_shouldFlip = false;
@@ -174,7 +174,7 @@ void wxWindowDC::InitForWin(wxWindow *wi
         return;
 
     wxLogTrace(TRACE_PAINT,
-               _T("%p ('%s'): creating DC for area [%i,%i,%i,%i], clipped to [%i,%i,%i,%i], origin [%i,%i]"),
+               wxT("%p ('%s'): creating DC for area [%i,%i,%i,%i], clipped to [%i,%i,%i,%i], origin [%i,%i]"),
                win, win->GetName().c_str(),
                rectOrig.x, rectOrig.y, rectOrig.GetRight(), rectOrig.GetBottom(),
                r.x, r.y, r.GetRight(), r.GetBottom(),
@@ -224,7 +224,7 @@ IMPLEMENT_DYNAMIC_CLASS(wxClientDC, wxWi
 
 wxClientDC::wxClientDC(wxWindow *win)
 {
-    wxCHECK_RET( win, _T("invalid window") );
+    wxCHECK_RET( win, wxT("invalid window") );
 
     wxRect rect = win->GetClientRect();
     InitForWin(win, &rect);
--- src/dfb/wrapdfb.cpp-orig	2009-06-18 20:00:55.503957000 -0500
+++ src/dfb/wrapdfb.cpp	2009-06-18 20:01:02.647466000 -0500
@@ -33,7 +33,7 @@ bool wxDfbCheckReturn(DFBResult code)
         // these are programming errors, assert:
         #define DFB_ASSERT(code)                                        \
             case code:                                                  \
-                wxFAIL_MSG( _T("DirectFB error: ") _T(#code) );         \
+                wxFAIL_MSG( wxT("DirectFB error: ") wxT(#code) );         \
                 return false                                            \
 
         DFB_ASSERT(DFB_DEAD);
@@ -130,7 +130,7 @@ wxIDirectFBSurface::CreateCompatible(con
             return NULL;
     }
 
-    wxCHECK_MSG( size.x > 0 && size.y > 0, NULL, _T("invalid size") );
+    wxCHECK_MSG( size.x > 0 && size.y > 0, NULL, wxT("invalid size") );
 
     DFBSurfaceDescription desc;
     desc.flags = (DFBSurfaceDescriptionFlags)(
--- src/dfb/utils.cpp-orig	2009-06-18 20:01:06.558532000 -0500
+++ src/dfb/utils.cpp	2009-06-18 20:01:13.596177000 -0500
@@ -109,7 +109,7 @@ wxPoint wxGetMousePosition()
 bool wxGetKeyState(wxKeyCode key)
 {
     wxASSERT_MSG(key != WXK_LBUTTON && key != WXK_RBUTTON && key != WXK_MBUTTON,
-                 _T("can't use wxGetKeyState() for mouse buttons"));
+                 wxT("can't use wxGetKeyState() for mouse buttons"));
 
     return false; // FIXME
 }
@@ -124,6 +124,6 @@ void wxBell()
 
 int wxAddProcessCallback(wxEndProcessData *proc_data, int fd)
 {
-    wxFAIL_MSG( _T("wxAddProcessCallback not implemented") );
+    wxFAIL_MSG( wxT("wxAddProcessCallback not implemented") );
     return 0;
 }
--- src/palmos/utils.cpp-orig	2009-06-18 19:47:23.466310000 -0500
+++ src/palmos/utils.cpp	2009-06-18 19:47:27.080138000 -0500
@@ -204,7 +204,7 @@ bool wxIsPlatform64Bit()
 
 wxString wxGetOsDescription()
 {
-    wxString strOS = _T("PalmOS");
+    wxString strOS = wxT("PalmOS");
 
     char *version = SysGetOSVersionString();
     if(version)
--- src/palmos/statbrpalm.cpp-orig	2009-06-18 19:47:34.249787000 -0500
+++ src/palmos/statbrpalm.cpp	2009-06-18 19:47:42.027607000 -0500
@@ -103,7 +103,7 @@ bool wxStatusBarPalm::Show( bool show )
 void wxStatusBarPalm::SetFieldsCount(int nFields, const int *widths)
 {
     // this is a Windows limitation
-    wxASSERT_MSG( (nFields > 0) && (nFields < 255), _T("too many fields") );
+    wxASSERT_MSG( (nFields > 0) && (nFields < 255), wxT("too many fields") );
 
     wxStatusBarBase::SetFieldsCount(nFields, widths);
 
@@ -126,7 +126,7 @@ void wxStatusBarPalm::SetFieldsWidth()
 void wxStatusBarPalm::SetStatusText(const wxString& strText, int nField)
 {
     wxCHECK_RET( (nField >= 0) && (nField < m_nFields),
-                 _T("invalid statusbar field index") );
+                 wxT("invalid statusbar field index") );
 
     SetStatusBufferText(strText,nField);
     DrawStatusBar();
@@ -135,7 +135,7 @@ void wxStatusBarPalm::SetStatusText(cons
 wxString wxStatusBarPalm::GetStatusText(int nField) const
 {
     wxCHECK_MSG( (nField >= 0) && (nField < m_nFields), wxEmptyString,
-                 _T("invalid statusbar field index") );
+                 wxT("invalid statusbar field index") );
 
     wxString text;
     return text;
--- src/palmos/datectrl.cpp-orig	2009-06-18 19:47:48.096383000 -0500
+++ src/palmos/datectrl.cpp	2009-06-18 19:47:52.275474000 -0500
@@ -123,7 +123,7 @@ bool wxDatePickerCtrl::SendClickEvent()
     int16_t day = m_dt.GetDay();
     int16_t year = m_dt.GetYear();
 
-    if(!SelectDay(selectDayByDay,&month,&day,&year,_T("Pick date")))
+    if(!SelectDay(selectDayByDay,&month,&day,&year,wxT("Pick date")))
         return false;
     wxDateTime dt(m_dt);
     dt.Set((wxDateTime::wxDateTime_t)day,
--- src/palmos/menu.cpp-orig	2009-06-18 19:47:56.367207000 -0500
+++ src/palmos/menu.cpp	2009-06-18 19:47:59.803343000 -0500
@@ -212,7 +212,7 @@ void wxMenu::EndRadioGroup()
 
 wxMenuItem* wxMenu::DoAppend(wxMenuItem *item)
 {
-    wxCHECK_MSG( item, NULL, _T("NULL item in wxMenu::DoAppend") );
+    wxCHECK_MSG( item, NULL, wxT("NULL item in wxMenu::DoAppend") );
 
     if(!wxMenuBase::DoAppend(item) || !DoInsertOrAppend(item))
     {
--- src/palmos/caret.cpp-orig	2009-06-18 19:48:04.147202000 -0500
+++ src/palmos/caret.cpp	2009-06-18 19:48:07.811320000 -0500
@@ -41,7 +41,7 @@
 
 #define CALL_CARET_API(api, args)   \
         if ( !api args )                \
-            wxLogLastError(_T(#api))
+            wxLogLastError(wxT(#api))
 
 // ===========================================================================
 // implementation
--- src/palmos/slider.cpp-orig	2009-06-18 19:48:13.231695000 -0500
+++ src/palmos/slider.cpp	2009-06-18 19:48:16.790561000 -0500
@@ -117,7 +117,7 @@ bool wxSlider::Create(wxWindow *parent, 
     // wxSL_TOP is ignored - always off
     // wxSL_SELRANGE is ignored - always off
     // wxSL_VERTICAL is impossible in native form
-    wxCHECK_MSG(!(style & wxSL_VERTICAL), false, _T("non vertical slider on PalmOS"));
+    wxCHECK_MSG(!(style & wxSL_VERTICAL), false, wxT("non vertical slider on PalmOS"));
 
     if(!wxControl::Create(parent, id, pos, size, style, validator, name))
         return false;
--- src/unix/dir.cpp-orig	2009-06-18 16:16:13.374289000 -0500
+++ src/unix/dir.cpp	2009-06-18 16:16:27.539273000 -0500
@@ -91,7 +91,7 @@ wxDirData::wxDirData(const wxString& dir
 
     // throw away the trailing slashes
     size_t n = m_dirname.length();
-    wxCHECK_RET( n, _T("empty dir name in wxDir") );
+    wxCHECK_RET( n, wxT("empty dir name in wxDir") );
 
     while ( n > 0 && m_dirname[--n] == '/' )
         ;
@@ -108,7 +108,7 @@ wxDirData::~wxDirData()
     {
         if ( closedir(m_dir) != 0 )
         {
-            wxLogLastError(_T("closedir"));
+            wxLogLastError(wxT("closedir"));
         }
     }
 }
@@ -120,7 +120,7 @@ bool wxDirData::Read(wxString *filename)
 
     // speed up string concatenation in the loop a bit
     wxString path = m_dirname;
-    path += _T('/');
+    path += wxT('/');
     path.reserve(path.length() + 255);
 
     wxString de_d_name;
@@ -183,7 +183,7 @@ bool wxDirData::Read(wxString *filename)
 
 wxDirData::wxDirData(const wxString& WXUNUSED(dirname))
 {
-    wxFAIL_MSG(_T("not implemented"));
+    wxFAIL_MSG(wxT("not implemented"));
 }
 
 wxDirData::~wxDirData()
@@ -245,7 +245,7 @@ wxString wxDir::GetName() const
     if ( m_data )
     {
         name = M_DIR->GetName();
-        if ( !name.empty() && (name.Last() == _T('/')) )
+        if ( !name.empty() && (name.Last() == wxT('/')) )
         {
             // chop off the last (back)slash
             name.Truncate(name.length() - 1);
@@ -268,7 +268,7 @@ bool wxDir::GetFirst(wxString *filename,
                      const wxString& filespec,
                      int flags) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
     M_DIR->Rewind();
 
@@ -280,16 +280,16 @@ bool wxDir::GetFirst(wxString *filename,
 
 bool wxDir::GetNext(wxString *filename) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
-    wxCHECK_MSG( filename, false, _T("bad pointer in wxDir::GetNext()") );
+    wxCHECK_MSG( filename, false, wxT("bad pointer in wxDir::GetNext()") );
 
     return M_DIR->Read(filename);
 }
 
 bool wxDir::HasSubDirs(const wxString& spec)
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
     if ( spec.empty() )
     {
--- src/unix/dlunix.cpp-orig	2009-06-18 16:16:36.951973000 -0500
+++ src/unix/dlunix.cpp	2009-06-18 16:16:57.170644000 -0500
@@ -67,11 +67,11 @@
 
 // standard shared libraries extensions for different Unix versions
 #if defined(__HPUX__)
-    const wxChar *wxDynamicLibrary::ms_dllext = _T(".sl");
+    const wxChar *wxDynamicLibrary::ms_dllext = wxT(".sl");
 #elif defined(__DARWIN__)
-    const wxChar *wxDynamicLibrary::ms_dllext = _T(".bundle");
+    const wxChar *wxDynamicLibrary::ms_dllext = wxT(".bundle");
 #else
-    const wxChar *wxDynamicLibrary::ms_dllext = _T(".so");
+    const wxChar *wxDynamicLibrary::ms_dllext = wxT(".so");
 #endif
 
 // ============================================================================
@@ -256,7 +256,7 @@ wxDllType wxDynamicLibrary::GetProgramHa
 wxDllType wxDynamicLibrary::RawLoad(const wxString& libname, int flags)
 {
     wxASSERT_MSG( !(flags & wxDL_NOW) || !(flags & wxDL_LAZY),
-                  _T("wxDL_LAZY and wxDL_NOW are mutually exclusive.") );
+                  wxT("wxDL_LAZY and wxDL_NOW are mutually exclusive.") );
 
 #ifdef USE_POSIX_DL_FUNCS
     // we need to use either RTLD_NOW or RTLD_LAZY because if we call dlopen()
@@ -356,22 +356,22 @@ public:
     {
         wxDynamicLibraryDetails *details = new wxDynamicLibraryDetails;
         details->m_path = path;
-        details->m_name = path.AfterLast(_T('/'));
+        details->m_name = path.AfterLast(wxT('/'));
         details->m_address = start;
         details->m_length = (char *)end - (char *)start;
 
         // try to extract the library version from its name
-        const size_t posExt = path.rfind(_T(".so"));
+        const size_t posExt = path.rfind(wxT(".so"));
         if ( posExt != wxString::npos )
         {
-            if ( path.c_str()[posExt + 3] == _T('.') )
+            if ( path.c_str()[posExt + 3] == wxT('.') )
             {
                 // assume "libfoo.so.x.y.z" case
                 details->m_version.assign(path, posExt + 4, wxString::npos);
             }
             else
             {
-                size_t posDash = path.find_last_of(_T('-'), posExt);
+                size_t posDash = path.find_last_of(wxT('-'), posExt);
                 if ( posDash != wxString::npos )
                 {
                     // assume "libbar-x.y.z.so" case
@@ -392,7 +392,7 @@ wxDynamicLibraryDetailsArray wxDynamicLi
 
 #ifdef __LINUX__
     // examine /proc/self/maps to find out what is loaded in our address space
-    wxFFile file(_T("/proc/self/maps"));
+    wxFFile file(wxT("/proc/self/maps"));
     if ( file.IsOpened() )
     {
         // details of the module currently being parsed
@@ -422,13 +422,13 @@ wxDynamicLibraryDetailsArray wxDynamicLi
                 default:
                     // chop '\n'
                     buf[strlen(buf) - 1] = '\0';
-                    wxLogDebug(_T("Failed to parse line \"%s\" in /proc/self/maps."),
+                    wxLogDebug(wxT("Failed to parse line \"%s\" in /proc/self/maps."),
                                buf);
                     continue;
             }
 
             wxASSERT_MSG( start >= endCur,
-                          _T("overlapping regions in /proc/self/maps?") );
+                          wxT("overlapping regions in /proc/self/maps?") );
 
             wxString pathNew = wxString::FromAscii(path);
             if ( pathCur.empty() )
--- src/unix/mimetype.cpp-orig	2009-06-18 16:17:05.289651000 -0500
+++ src/unix/mimetype.cpp	2009-06-18 16:17:18.181633000 -0500
@@ -994,7 +994,7 @@ void wxMimeTypesManagerImpl::LoadKDEApp(
 #if wxUSE_INTL // try "Name[locale name]" first
     wxLocale *locale = wxGetLocale();
     if ( locale )
-        nIndex = file.pIndexOf(_T("Name[")+locale->GetName()+_T("]="));
+        nIndex = file.pIndexOf(wxT("Name[")+locale->GetName()+wxT("]="));
 #endif // wxUSE_INTL
     if(nIndex == wxNOT_FOUND)
         nIndex = file.pIndexOf( wxT("Name=") );
@@ -1006,7 +1006,7 @@ void wxMimeTypesManagerImpl::LoadKDEApp(
     nIndex = wxNOT_FOUND;
 #if wxUSE_INTL // try "Icon[locale name]" first
     if ( locale )
-        nIndex = file.pIndexOf(_T("Icon[")+locale->GetName()+_T("]="));
+        nIndex = file.pIndexOf(wxT("Icon[")+locale->GetName()+wxT("]="));
 #endif // wxUSE_INTL
     if(nIndex == wxNOT_FOUND)
         nIndex = file.pIndexOf( wxT("Icon=") );
@@ -1031,7 +1031,7 @@ void wxMimeTypesManagerImpl::LoadKDEApp(
     sCmd.Replace(wxT("%i"), nameicon);
     sCmd.Replace(wxT("%m"), namemini);
 
-    wxStringTokenizer tokenizer(mimetypes, _T(";"));
+    wxStringTokenizer tokenizer(mimetypes, wxT(";"));
     while(tokenizer.HasMoreTokens()) {
         wxString mimetype = tokenizer.GetNextToken().Lower();
         int nIndex = m_aTypes.Index(mimetype);
@@ -1055,7 +1055,7 @@ void wxMimeTypesManagerImpl::LoadKDEApps
 
     wxString filename;
     // Look into .desktop files
-    bool cont = dir.GetFirst(&filename, _T("*.desktop"), wxDIR_FILES);
+    bool cont = dir.GetFirst(&filename, wxT("*.desktop"), wxDIR_FILES);
     while(cont) {
         wxFileName p(dirname, filename);
         LoadKDEApp( p.GetFullPath() );
--- src/unix/snglinst.cpp-orig	2009-06-18 16:17:33.685233000 -0500
+++ src/unix/snglinst.cpp	2009-06-18 16:17:43.233190000 -0500
@@ -348,10 +348,10 @@ bool wxSingleInstanceChecker::Create(con
                                      const wxString& path)
 {
     wxASSERT_MSG( !m_impl,
-                  _T("calling wxSingleInstanceChecker::Create() twice?") );
+                  wxT("calling wxSingleInstanceChecker::Create() twice?") );
 
     // must have the file name to create a lock file
-    wxASSERT_MSG( !name.empty(), _T("lock file name can't be empty") );
+    wxASSERT_MSG( !name.empty(), wxT("lock file name can't be empty") );
 
     m_impl = new wxSingleInstanceCheckerImpl;
 
@@ -361,9 +361,9 @@ bool wxSingleInstanceChecker::Create(con
         fullname = wxGetHomeDir();
     }
 
-    if ( fullname.Last() != _T('/') )
+    if ( fullname.Last() != wxT('/') )
     {
-        fullname += _T('/');
+        fullname += wxT('/');
     }
 
     fullname << name;
@@ -373,7 +373,7 @@ bool wxSingleInstanceChecker::Create(con
 
 bool wxSingleInstanceChecker::IsAnotherRunning() const
 {
-    wxCHECK_MSG( m_impl, false, _T("must call Create() first") );
+    wxCHECK_MSG( m_impl, false, wxT("must call Create() first") );
 
     const pid_t lockerPid = m_impl->GetLockerPID();
 
--- src/unix/stackwalk.cpp-orig	2009-06-18 16:17:51.641161000 -0500
+++ src/unix/stackwalk.cpp	2009-06-18 16:18:08.918558000 -0500
@@ -92,13 +92,13 @@ void wxStackFrame::OnGetName()
     // format is: "module(funcname+offset) [address]" but the part in
     // parentheses can be not present
     wxString syminfo = wxString::FromAscii(m_syminfo);
-    const size_t posOpen = syminfo.find(_T('('));
+    const size_t posOpen = syminfo.find(wxT('('));
     if ( posOpen != wxString::npos )
     {
-        const size_t posPlus = syminfo.find(_T('+'), posOpen + 1);
+        const size_t posPlus = syminfo.find(wxT('+'), posOpen + 1);
         if ( posPlus != wxString::npos )
         {
-            const size_t posClose = syminfo.find(_T(')'), posPlus + 1);
+            const size_t posClose = syminfo.find(wxT(')'), posPlus + 1);
             if ( posClose != wxString::npos )
             {
                 if ( m_name.empty() )
@@ -249,12 +249,12 @@ int wxStackWalker::InitFrames(wxStackFra
             name = wxString::FromAscii(g_buf);
             name.RemoveLast(); // trailing newline
 
-            if ( name == _T("??") )
+            if ( name == wxT("??") )
                 name.clear();
         }
         else
         {
-            wxLogDebug(_T("cannot read addr2line output for stack frame #%lu"),
+            wxLogDebug(wxT("cannot read addr2line output for stack frame #%lu"),
                        (unsigned long)i);
             return false;
         }
@@ -265,7 +265,7 @@ int wxStackWalker::InitFrames(wxStackFra
             filename = wxString::FromAscii(g_buf);
             filename.RemoveLast();
 
-            const size_t posColon = filename.find(_T(':'));
+            const size_t posColon = filename.find(wxT(':'));
             if ( posColon != wxString::npos )
             {
                 // parse line number (it's ok if it fails, this will just leave
@@ -274,13 +274,13 @@ int wxStackWalker::InitFrames(wxStackFra
 
                 // remove line number from 'filename'
                 filename.erase(posColon);
-                if ( filename == _T("??") )
+                if ( filename == wxT("??") )
                     filename.clear();
             }
             else
             {
-                wxLogDebug(_T("Unexpected addr2line format: \"%s\" - ")
-                           _T("the semicolon is missing"),
+                wxLogDebug(wxT("Unexpected addr2line format: \"%s\" - ")
+                           wxT("the semicolon is missing"),
                            filename.c_str());
             }
         }
--- src/unix/stdpaths.cpp-orig	2009-06-18 16:18:17.458117000 -0500
+++ src/unix/stdpaths.cpp	2009-06-18 16:18:37.570177000 -0500
@@ -70,17 +70,17 @@ wxString wxStandardPaths::GetInstallPref
 
 wxString wxStandardPaths::GetConfigDir() const
 {
-   return _T("/sys$manager");
+   return wxT("/sys$manager");
 }
 
 wxString wxStandardPaths::GetDataDir() const
 {
-   return AppendAppName(GetInstallPrefix() + _T("/sys$share"));
+   return AppendAppName(GetInstallPrefix() + wxT("/sys$share"));
 }
 
 wxString wxStandardPaths::GetLocalDataDir() const
 {
-   return AppendAppName(_T("/sys$manager"));
+   return AppendAppName(wxT("/sys$manager"));
 }
 
 wxString wxStandardPaths::GetUserDataDir() const
@@ -182,27 +182,27 @@ wxString wxStandardPaths::GetInstallPref
 
 wxString wxStandardPaths::GetConfigDir() const
 {
-   return _T("/etc");
+   return wxT("/etc");
 }
 
 wxString wxStandardPaths::GetDataDir() const
 {
-   return AppendAppName(GetInstallPrefix() + _T("/share"));
+   return AppendAppName(GetInstallPrefix() + wxT("/share"));
 }
 
 wxString wxStandardPaths::GetLocalDataDir() const
 {
-   return AppendAppName(_T("/etc"));
+   return AppendAppName(wxT("/etc"));
 }
 
 wxString wxStandardPaths::GetUserDataDir() const
 {
-   return AppendAppName(wxFileName::GetHomeDir() + _T("/."));
+   return AppendAppName(wxFileName::GetHomeDir() + wxT("/."));
 }
 
 wxString wxStandardPaths::GetPluginsDir() const
 {
-    return AppendAppName(GetInstallPrefix() + _T("/lib"));
+    return AppendAppName(GetInstallPrefix() + wxT("/lib"));
 }
 
 wxString
@@ -212,7 +212,7 @@ wxStandardPaths::GetLocalizedResourcesDi
     if ( category != ResourceCat_Messages )
         return wxStandardPathsBase::GetLocalizedResourcesDir(lang, category);
 
-    return GetInstallPrefix() + _T("/share/locale/") + lang + _T("/LC_MESSAGES");
+    return GetInstallPrefix() + wxT("/share/locale/") + lang + wxT("/LC_MESSAGES");
 }
 
 #endif // __VMS/!__VMS
--- src/unix/threadpsx.cpp-orig	2009-06-18 16:18:47.134250000 -0500
+++ src/unix/threadpsx.cpp	2009-06-18 16:19:02.267097000 -0500
@@ -82,10 +82,10 @@ enum wxThreadState
 static const wxThread::ExitCode EXITCODE_CANCELLED = (wxThread::ExitCode)-1;
 
 // trace mask for wxThread operations
-#define TRACE_THREADS   _T("thread")
+#define TRACE_THREADS   wxT("thread")
 
 // you can get additional debugging messages for the semaphore operations
-#define TRACE_SEMA      _T("semaphore")
+#define TRACE_SEMA      wxT("semaphore")
 
 // ----------------------------------------------------------------------------
 // private functions
@@ -216,7 +216,7 @@ wxMutexInternal::wxMutexInternal(wxMutex
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown mutex type") );
+            wxFAIL_MSG( wxT("unknown mutex type") );
             // fall through
 
         case wxMUTEX_DEFAULT:
@@ -251,18 +251,18 @@ wxMutexError wxMutexInternal::Lock()
         case EDEADLK:
             // only error checking mutexes return this value and so it's an
             // unexpected situation -- hence use assert, not wxLogDebug
-            wxFAIL_MSG( _T("mutex deadlock prevented") );
+            wxFAIL_MSG( wxT("mutex deadlock prevented") );
             return wxMUTEX_DEAD_LOCK;
 
         case EINVAL:
-            wxLogDebug(_T("pthread_mutex_lock(): mutex not initialized."));
+            wxLogDebug(wxT("pthread_mutex_lock(): mutex not initialized."));
             break;
 
         case 0:
             return wxMUTEX_NO_ERROR;
 
         default:
-            wxLogApiError(_T("pthread_mutex_lock()"), err);
+            wxLogApiError(wxT("pthread_mutex_lock()"), err);
     }
 
     return wxMUTEX_MISC_ERROR;
@@ -279,14 +279,14 @@ wxMutexError wxMutexInternal::TryLock()
             return wxMUTEX_BUSY;
 
         case EINVAL:
-            wxLogDebug(_T("pthread_mutex_trylock(): mutex not initialized."));
+            wxLogDebug(wxT("pthread_mutex_trylock(): mutex not initialized."));
             break;
 
         case 0:
             return wxMUTEX_NO_ERROR;
 
         default:
-            wxLogApiError(_T("pthread_mutex_trylock()"), err);
+            wxLogApiError(wxT("pthread_mutex_trylock()"), err);
     }
 
     return wxMUTEX_MISC_ERROR;
@@ -302,14 +302,14 @@ wxMutexError wxMutexInternal::Unlock()
             return wxMUTEX_UNLOCKED;
 
         case EINVAL:
-            wxLogDebug(_T("pthread_mutex_unlock(): mutex not initialized."));
+            wxLogDebug(wxT("pthread_mutex_unlock(): mutex not initialized."));
             break;
 
         case 0:
             return wxMUTEX_NO_ERROR;
 
         default:
-            wxLogApiError(_T("pthread_mutex_unlock()"), err);
+            wxLogApiError(wxT("pthread_mutex_unlock()"), err);
     }
 
     return wxMUTEX_MISC_ERROR;
@@ -358,7 +358,7 @@ wxConditionInternal::wxConditionInternal
 
     if ( !m_isOk )
     {
-        wxLogApiError(_T("pthread_cond_init()"), err);
+        wxLogApiError(wxT("pthread_cond_init()"), err);
     }
 }
 
@@ -369,7 +369,7 @@ wxConditionInternal::~wxConditionInterna
         int err = pthread_cond_destroy(&m_cond);
         if ( err != 0 )
         {
-            wxLogApiError(_T("pthread_cond_destroy()"), err);
+            wxLogApiError(wxT("pthread_cond_destroy()"), err);
         }
     }
 }
@@ -379,7 +379,7 @@ wxCondError wxConditionInternal::Wait()
     int err = pthread_cond_wait(&m_cond, GetPMutex());
     if ( err != 0 )
     {
-        wxLogApiError(_T("pthread_cond_wait()"), err);
+        wxLogApiError(wxT("pthread_cond_wait()"), err);
 
         return wxCOND_MISC_ERROR;
     }
@@ -412,7 +412,7 @@ wxCondError wxConditionInternal::WaitTim
             return wxCOND_NO_ERROR;
 
         default:
-            wxLogApiError(_T("pthread_cond_timedwait()"), err);
+            wxLogApiError(wxT("pthread_cond_timedwait()"), err);
     }
 
     return wxCOND_MISC_ERROR;
@@ -423,7 +423,7 @@ wxCondError wxConditionInternal::Signal(
     int err = pthread_cond_signal(&m_cond);
     if ( err != 0 )
     {
-        wxLogApiError(_T("pthread_cond_signal()"), err);
+        wxLogApiError(wxT("pthread_cond_signal()"), err);
 
         return wxCOND_MISC_ERROR;
     }
@@ -436,7 +436,7 @@ wxCondError wxConditionInternal::Broadca
     int err = pthread_cond_broadcast(&m_cond);
     if ( err != 0 )
     {
-        wxLogApiError(_T("pthread_cond_broadcast()"), err);
+        wxLogApiError(wxT("pthread_cond_broadcast()"), err);
 
         return wxCOND_MISC_ERROR;
     }
@@ -485,7 +485,7 @@ wxSemaphoreInternal::wxSemaphoreInternal
     if ( (initialcount < 0 || maxcount < 0) ||
             ((maxcount > 0) && (initialcount > maxcount)) )
     {
-        wxFAIL_MSG( _T("wxSemaphore: invalid initial or maximal count") );
+        wxFAIL_MSG( wxT("wxSemaphore: invalid initial or maximal count") );
 
         m_isOk = false;
     }
@@ -505,14 +505,14 @@ wxSemaError wxSemaphoreInternal::Wait()
     while ( m_count == 0 )
     {
         wxLogTrace(TRACE_SEMA,
-                   _T("Thread %ld waiting for semaphore to become signalled"),
+                   wxT("Thread %ld waiting for semaphore to become signalled"),
                    wxThread::GetCurrentId());
 
         if ( m_cond.Wait() != wxCOND_NO_ERROR )
             return wxSEMA_MISC_ERROR;
 
         wxLogTrace(TRACE_SEMA,
-                   _T("Thread %ld finished waiting for semaphore, count = %lu"),
+                   wxT("Thread %ld finished waiting for semaphore, count = %lu"),
                    wxThread::GetCurrentId(), (unsigned long)m_count);
     }
 
@@ -579,7 +579,7 @@ wxSemaError wxSemaphoreInternal::Post()
     m_count++;
 
     wxLogTrace(TRACE_SEMA,
-               _T("Thread %ld about to signal semaphore, count = %lu"),
+               wxT("Thread %ld about to signal semaphore, count = %lu"),
                wxThread::GetCurrentId(), (unsigned long)m_count);
 
     return m_cond.Signal() == wxCOND_NO_ERROR ? wxSEMA_NO_ERROR
@@ -639,13 +639,13 @@ public:
 #ifdef __WXDEBUG__
         static const wxChar *stateNames[] =
         {
-            _T("NEW"),
-            _T("RUNNING"),
-            _T("PAUSED"),
-            _T("EXITED"),
+            wxT("NEW"),
+            wxT("RUNNING"),
+            wxT("PAUSED"),
+            wxT("EXITED"),
         };
 
-        wxLogTrace(TRACE_THREADS, _T("Thread %ld: %s => %s."),
+        wxLogTrace(TRACE_THREADS, wxT("Thread %ld: %s => %s."),
                    (long)GetId(), stateNames[m_state], stateNames[state]);
 #endif // __WXDEBUG__
 
@@ -722,7 +722,7 @@ void *wxThreadInternal::PthreadStart(wxT
 {
     wxThreadInternal *pthread = thread->m_internal;
 
-    wxLogTrace(TRACE_THREADS, _T("Thread %ld started."), THR_ID(pthread));
+    wxLogTrace(TRACE_THREADS, wxT("Thread %ld started."), THR_ID(pthread));
 
     // associate the thread pointer with the newly created thread so that
     // wxThread::This() will work
@@ -760,13 +760,13 @@ void *wxThreadInternal::PthreadStart(wxT
     {
         // call the main entry
         wxLogTrace(TRACE_THREADS,
-                   _T("Thread %ld about to enter its Entry()."),
+                   wxT("Thread %ld about to enter its Entry()."),
                    THR_ID(pthread));
 
         pthread->m_exitcode = thread->Entry();
 
         wxLogTrace(TRACE_THREADS,
-                   _T("Thread %ld Entry() returned %lu."),
+                   wxT("Thread %ld Entry() returned %lu."),
                    THR_ID(pthread), wxPtrToUInt(pthread->m_exitcode));
 
         {
@@ -879,7 +879,7 @@ wxThreadError wxThreadInternal::Run()
 
 void wxThreadInternal::Wait()
 {
-    wxCHECK_RET( !m_isDetached, _T("can't wait for a detached thread") );
+    wxCHECK_RET( !m_isDetached, wxT("can't wait for a detached thread") );
 
     // if the thread we're waiting for is waiting for the GUI mutex, we will
     // deadlock so make sure we release it temporarily
@@ -887,7 +887,7 @@ void wxThreadInternal::Wait()
         wxMutexGuiLeave();
 
     wxLogTrace(TRACE_THREADS,
-               _T("Starting to wait for thread %ld to exit."),
+               wxT("Starting to wait for thread %ld to exit."),
                THR_ID(this));
 
     // to avoid memory leaks we should call pthread_join(), but it must only be
@@ -927,7 +927,7 @@ void wxThreadInternal::Pause()
                  wxT("thread must first be paused with wxThread::Pause().") );
 
    wxLogTrace(TRACE_THREADS,
-              _T("Thread %ld goes to sleep."), THR_ID(this));
+              wxT("Thread %ld goes to sleep."), THR_ID(this));
 
     // wait until the semaphore is Post()ed from Resume()
     m_semSuspend.Wait();
@@ -943,7 +943,7 @@ void wxThreadInternal::Resume()
     if ( IsReallyPaused() )
     {
        wxLogTrace(TRACE_THREADS,
-                  _T("Waking up thread %ld"), THR_ID(this));
+                  wxT("Waking up thread %ld"), THR_ID(this));
 
         // wake up Pause()
         m_semSuspend.Post();
@@ -954,7 +954,7 @@ void wxThreadInternal::Resume()
     else
     {
         wxLogTrace(TRACE_THREADS,
-                   _T("Thread %ld is not yet really paused"), THR_ID(this));
+                   wxT("Thread %ld is not yet really paused"), THR_ID(this));
     }
 
     SetState(STATE_RUNNING);
@@ -1000,7 +1000,7 @@ int wxThread::GetCPUCount()
     // it has 0 size but still can be read from)
     wxLogNull nolog;
 
-    wxFFile file(_T("/proc/cpuinfo"));
+    wxFFile file(wxT("/proc/cpuinfo"));
     if ( file.IsOpened() )
     {
         // slurp the whole file
@@ -1008,17 +1008,17 @@ int wxThread::GetCPUCount()
         if ( file.ReadAll(&s) )
         {
             // (ab)use Replace() to find the number of "processor: num" strings
-            size_t count = s.Replace(_T("processor\t:"), _T(""));
+            size_t count = s.Replace(wxT("processor\t:"), wxT(""));
             if ( count > 0 )
             {
                 return count;
             }
 
-            wxLogDebug(_T("failed to parse /proc/cpuinfo"));
+            wxLogDebug(wxT("failed to parse /proc/cpuinfo"));
         }
         else
         {
-            wxLogDebug(_T("failed to read /proc/cpuinfo"));
+            wxLogDebug(wxT("failed to read /proc/cpuinfo"));
         }
     }
 #endif // different ways to get number of CPUs
@@ -1051,7 +1051,7 @@ bool wxThread::SetConcurrency(size_t lev
     int rc = thr_setconcurrency(level);
     if ( rc != 0 )
     {
-        wxLogSysError(rc, _T("thr_setconcurrency() failed"));
+        wxLogSysError(rc, wxT("thr_setconcurrency() failed"));
     }
 
     return rc == 0;
@@ -1144,14 +1144,14 @@ wxThreadError wxThread::Create(unsigned 
         struct sched_param sp;
         if ( pthread_attr_getschedparam(&attr, &sp) != 0 )
         {
-            wxFAIL_MSG(_T("pthread_attr_getschedparam() failed"));
+            wxFAIL_MSG(wxT("pthread_attr_getschedparam() failed"));
         }
 
         sp.sched_priority = min_prio + (prio*(max_prio - min_prio))/100;
 
         if ( pthread_attr_setschedparam(&attr, &sp) != 0 )
         {
-            wxFAIL_MSG(_T("pthread_attr_setschedparam(priority) failed"));
+            wxFAIL_MSG(wxT("pthread_attr_setschedparam(priority) failed"));
         }
     }
 #endif // HAVE_THREAD_PRIORITY_FUNCTIONS
@@ -1160,7 +1160,7 @@ wxThreadError wxThread::Create(unsigned 
     // this will make the threads created by this process really concurrent
     if ( pthread_attr_setscope(&attr, PTHREAD_SCOPE_SYSTEM) != 0 )
     {
-        wxFAIL_MSG(_T("pthread_attr_setscope(PTHREAD_SCOPE_SYSTEM) failed"));
+        wxFAIL_MSG(wxT("pthread_attr_setscope(PTHREAD_SCOPE_SYSTEM) failed"));
     }
 #endif // HAVE_PTHREAD_ATTR_SETSCOPE
 
@@ -1171,7 +1171,7 @@ wxThreadError wxThread::Create(unsigned 
     {
         if ( pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED) != 0 )
         {
-            wxFAIL_MSG(_T("pthread_attr_setdetachstate(DETACHED) failed"));
+            wxFAIL_MSG(wxT("pthread_attr_setdetachstate(DETACHED) failed"));
         }
 
         // never try to join detached threads
@@ -1190,7 +1190,7 @@ wxThreadError wxThread::Create(unsigned 
 
     if ( pthread_attr_destroy(&attr) != 0 )
     {
-        wxFAIL_MSG(_T("pthread_attr_destroy() failed"));
+        wxFAIL_MSG(wxT("pthread_attr_destroy() failed"));
     }
 
     if ( rc != 0 )
@@ -1292,7 +1292,7 @@ wxThreadIdType wxThread::GetId() const
 wxThreadError wxThread::Pause()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't pause itself") );
+                 wxT("a thread can't pause itself") );
 
     wxCriticalSectionLocker lock(m_critsect);
 
@@ -1313,7 +1313,7 @@ wxThreadError wxThread::Pause()
 wxThreadError wxThread::Resume()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't resume itself") );
+                 wxT("a thread can't resume itself") );
 
     wxCriticalSectionLocker lock(m_critsect);
 
@@ -1322,7 +1322,7 @@ wxThreadError wxThread::Resume()
     switch ( state )
     {
         case STATE_PAUSED:
-            wxLogTrace(TRACE_THREADS, _T("Thread %ld suspended, resuming."),
+            wxLogTrace(TRACE_THREADS, wxT("Thread %ld suspended, resuming."),
                        GetId());
 
             m_internal->Resume();
@@ -1330,12 +1330,12 @@ wxThreadError wxThread::Resume()
             return wxTHREAD_NO_ERROR;
 
         case STATE_EXITED:
-            wxLogTrace(TRACE_THREADS, _T("Thread %ld exited, won't resume."),
+            wxLogTrace(TRACE_THREADS, wxT("Thread %ld exited, won't resume."),
                        GetId());
             return wxTHREAD_NO_ERROR;
 
         default:
-            wxLogDebug(_T("Attempt to resume a thread which is not paused."));
+            wxLogDebug(wxT("Attempt to resume a thread which is not paused."));
 
             return wxTHREAD_MISC_ERROR;
     }
@@ -1348,10 +1348,10 @@ wxThreadError wxThread::Resume()
 wxThread::ExitCode wxThread::Wait()
 {
     wxCHECK_MSG( This() != this, (ExitCode)-1,
-                 _T("a thread can't wait for itself") );
+                 wxT("a thread can't wait for itself") );
 
     wxCHECK_MSG( !m_isDetached, (ExitCode)-1,
-                 _T("can't wait for detached thread") );
+                 wxT("can't wait for detached thread") );
 
     m_internal->Wait();
 
@@ -1361,7 +1361,7 @@ wxThread::ExitCode wxThread::Wait()
 wxThreadError wxThread::Delete(ExitCode *rc)
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't delete itself") );
+                 wxT("a thread can't delete itself") );
 
     bool isDetached = m_isDetached;
 
@@ -1414,7 +1414,7 @@ wxThreadError wxThread::Delete(ExitCode 
 wxThreadError wxThread::Kill()
 {
     wxCHECK_MSG( This() != this, wxTHREAD_MISC_ERROR,
-                 _T("a thread can't kill itself") );
+                 wxT("a thread can't kill itself") );
 
     switch ( m_internal->GetState() )
     {
@@ -1465,7 +1465,7 @@ wxThreadError wxThread::Kill()
 void wxThread::Exit(ExitCode status)
 {
     wxASSERT_MSG( This() == this,
-                  _T("wxThread::Exit() can only be called in the context of the same thread") );
+                  wxT("wxThread::Exit() can only be called in the context of the same thread") );
 
     if ( m_isDetached )
     {
@@ -1504,14 +1504,14 @@ void wxThread::Exit(ExitCode status)
     // terminate the thread (pthread_exit() never returns)
     pthread_exit(status);
 
-    wxFAIL_MSG(_T("pthread_exit() failed"));
+    wxFAIL_MSG(wxT("pthread_exit() failed"));
 }
 
 // also test whether we were paused
 bool wxThread::TestDestroy()
 {
     wxASSERT_MSG( This() == this,
-                  _T("wxThread::TestDestroy() can only be called in the context of the same thread") );
+                  wxT("wxThread::TestDestroy() can only be called in the context of the same thread") );
 
     m_critsect.Enter();
 
@@ -1544,7 +1544,7 @@ wxThread::~wxThread()
     if ( m_internal->GetState() != STATE_EXITED &&
          m_internal->GetState() != STATE_NEW )
     {
-        wxLogDebug(_T("The thread %ld is being destroyed although it is still running! The application may crash."),
+        wxLogDebug(wxT("The thread %ld is being destroyed although it is still running! The application may crash."),
                    (long)GetId());
     }
 
@@ -1647,7 +1647,7 @@ void wxThreadModule::OnExit()
         if ( nThreadsBeingDeleted > 0 )
         {
             wxLogTrace(TRACE_THREADS,
-                       _T("Waiting for %lu threads to disappear"),
+                       wxT("Waiting for %lu threads to disappear"),
                        (unsigned long)nThreadsBeingDeleted);
 
             // have to wait until all of them disappear
@@ -1699,9 +1699,9 @@ static void ScheduleThreadForDeletion()
 
     gs_nThreadsBeingDeleted++;
 
-    wxLogTrace(TRACE_THREADS, _T("%lu thread%s waiting to be deleted"),
+    wxLogTrace(TRACE_THREADS, wxT("%lu thread%s waiting to be deleted"),
                (unsigned long)gs_nThreadsBeingDeleted,
-               gs_nThreadsBeingDeleted == 1 ? _T("") : _T("s"));
+               gs_nThreadsBeingDeleted == 1 ? wxT("") : wxT("s"));
 }
 
 static void DeleteThread(wxThread *This)
@@ -1710,14 +1710,14 @@ static void DeleteThread(wxThread *This)
     // or wxThreadModule::OnExit() would deadlock
     wxMutexLocker locker( *gs_mutexDeleteThread );
 
-    wxLogTrace(TRACE_THREADS, _T("Thread %ld auto deletes."), This->GetId());
+    wxLogTrace(TRACE_THREADS, wxT("Thread %ld auto deletes."), This->GetId());
 
     delete This;
 
     wxCHECK_RET( gs_nThreadsBeingDeleted > 0,
-                 _T("no threads scheduled for deletion, yet we delete one?") );
+                 wxT("no threads scheduled for deletion, yet we delete one?") );
 
-    wxLogTrace(TRACE_THREADS, _T("%lu scheduled for deletion threads left."),
+    wxLogTrace(TRACE_THREADS, wxT("%lu scheduled for deletion threads left."),
                (unsigned long)gs_nThreadsBeingDeleted - 1);
 
     if ( !--gs_nThreadsBeingDeleted )
--- src/unix/utilsunx.cpp-orig	2009-06-18 16:19:57.829388000 -0500
+++ src/unix/utilsunx.cpp	2009-06-18 16:20:09.879378000 -0500
@@ -241,7 +241,7 @@ int wxKill(long pid, wxSignal sig, wxKil
 
             default:
                 // this goes against Unix98 docs so log it
-                wxLogDebug(_T("unexpected kill(2) return value %d"), err);
+                wxLogDebug(wxT("unexpected kill(2) return value %d"), err);
 
                 // something else...
                 *rc = wxKILL_ERROR;
@@ -272,7 +272,7 @@ long wxExecute( const wxString& command,
     // don't know what yet, so for now just warn the user (this is the least we
     // can do) about it
     wxASSERT_MSG( wxThread::IsMain(),
-                    _T("wxExecute() can be called only from the main thread") );
+                    wxT("wxExecute() can be called only from the main thread") );
 #endif // wxUSE_THREADS
 
     int argc = 0;
@@ -361,12 +361,12 @@ static wxString wxMakeShellCommand(const
     if ( !command )
     {
         // just an interactive shell
-        cmd = _T("xterm");
+        cmd = wxT("xterm");
     }
     else
     {
         // execute command in a shell
-        cmd << _T("/bin/sh -c '") << command << _T('\'');
+        cmd << wxT("/bin/sh -c '") << command << wxT('\'');
     }
 
     return cmd;
@@ -379,7 +379,7 @@ bool wxShell(const wxString& command)
 
 bool wxShell(const wxString& command, wxArrayString& output)
 {
-    wxCHECK_MSG( !command.empty(), false, _T("can't exec shell non interactively") );
+    wxCHECK_MSG( !command.empty(), false, wxT("can't exec shell non interactively") );
 
     return wxExecute(wxMakeShellCommand(command), output);
 }
@@ -391,19 +391,19 @@ bool wxShutdown(wxShutdownFlags wFlags)
     switch ( wFlags )
     {
         case wxSHUTDOWN_POWEROFF:
-            level = _T('0');
+            level = wxT('0');
             break;
 
         case wxSHUTDOWN_REBOOT:
-            level = _T('6');
+            level = wxT('6');
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown wxShutdown() flag") );
+            wxFAIL_MSG( wxT("unknown wxShutdown() flag") );
             return false;
     }
 
-    return system(wxString::Format(_T("init %c"), level).mb_str()) == 0;
+    return system(wxString::Format(wxT("init %c"), level).mb_str()) == 0;
 }
 
 // ----------------------------------------------------------------------------
@@ -439,7 +439,7 @@ bool wxPipeInputStream::CanRead() const
             return false;
 
         default:
-            wxFAIL_MSG(_T("unexpected select() return value"));
+            wxFAIL_MSG(wxT("unexpected select() return value"));
             // still fall through
 
         case 1:
@@ -750,7 +750,7 @@ static wxString wxGetCommandOutput(const
     FILE *f = popen(cmd.ToAscii(), "r");
     if ( !f )
     {
-        wxLogSysError(_T("Executing \"%s\" failed"), cmd.c_str());
+        wxLogSysError(wxT("Executing \"%s\" failed"), cmd.c_str());
         return wxEmptyString;
     }
 
@@ -766,7 +766,7 @@ static wxString wxGetCommandOutput(const
 
     pclose(f);
 
-    if ( !s.empty() && s.Last() == _T('\n') )
+    if ( !s.empty() && s.Last() == wxT('\n') )
         s.RemoveLast();
 
     return s;
@@ -1068,7 +1068,7 @@ bool wxSetEnv(const wxString& variable, 
         unsetenv(variable.mb_str());
         return true;
 #else
-        value = _T(""); // we can't pass NULL to setenv()
+        value = wxT(""); // we can't pass NULL to setenv()
 #endif
     }
 
@@ -1078,7 +1078,7 @@ bool wxSetEnv(const wxString& variable, 
 #elif defined(HAVE_PUTENV)
     wxString s = variable;
     if ( value )
-        s << _T('=') << value;
+        s << wxT('=') << value;
 
     // transform to ANSI
     const wxWX2MBbuf p = s.mb_str();
@@ -1140,7 +1140,7 @@ bool wxHandleFatalExceptions(bool doit)
         ok &= sigaction(SIGSEGV, &act, &s_handlerSEGV) == 0;
         if ( !ok )
         {
-            wxLogDebug(_T("Failed to install our signal handler."));
+            wxLogDebug(wxT("Failed to install our signal handler."));
         }
 
         s_savedHandlers = true;
@@ -1154,7 +1154,7 @@ bool wxHandleFatalExceptions(bool doit)
         ok &= sigaction(SIGSEGV, &s_handlerSEGV, NULL) == 0;
         if ( !ok )
         {
-            wxLogDebug(_T("Failed to uninstall our signal handler."));
+            wxLogDebug(wxT("Failed to uninstall our signal handler."));
         }
 
         s_savedHandlers = false;
--- src/unix/utilsx11.cpp-orig	2009-06-18 16:20:23.967439000 -0500
+++ src/unix/utilsx11.cpp	2009-06-18 16:20:38.629055000 -0500
@@ -473,8 +473,8 @@ wxX11FullScreenMethod wxGetFullScreenMet
     wxMAKE_ATOM(_NET_WM_STATE_FULLSCREEN, disp);
     if (wxQueryWMspecSupport(disp, root, _NET_WM_STATE_FULLSCREEN))
     {
-        wxLogTrace(_T("fullscreen"),
-                   _T("detected _NET_WM_STATE_FULLSCREEN support"));
+        wxLogTrace(wxT("fullscreen"),
+                   wxT("detected _NET_WM_STATE_FULLSCREEN support"));
         return wxX11_FS_WMSPEC;
     }
 
@@ -482,12 +482,12 @@ wxX11FullScreenMethod wxGetFullScreenMet
     // kwin doesn't understand any other method:
     if (wxKwinRunning(disp, root))
     {
-        wxLogTrace(_T("fullscreen"), _T("detected kwin"));
+        wxLogTrace(wxT("fullscreen"), wxT("detected kwin"));
         return wxX11_FS_KDE;
     }
 
     // finally, fall back to ICCCM heuristic method:
-    wxLogTrace(_T("fullscreen"), _T("unknown WM, using _WIN_LAYER"));
+    wxLogTrace(wxT("fullscreen"), wxT("unknown WM, using _WIN_LAYER"));
     return wxX11_FS_GENERIC;
 }
 
@@ -818,7 +818,7 @@ bool wxGetKeyState(wxKeyCode key)
     if ( IsModifierKey(iKey) )  // If iKey is a modifier key, use a different method
     {
         XModifierKeymap *map = XGetModifierMapping(pDisplay);
-        wxCHECK_MSG( map, false, _T("failed to get X11 modifiers map") );
+        wxCHECK_MSG( map, false, wxT("failed to get X11 modifiers map") );
 
         for (int i = 0; i < 8; ++i)
         {
--- src/unix/sound_sdl.cpp-orig	2009-06-18 16:20:48.994123000 -0500
+++ src/unix/sound_sdl.cpp	2009-06-18 16:21:01.276503000 -0500
@@ -75,7 +75,7 @@ public:
           m_data(NULL), m_evtHandler(NULL) {}
     virtual ~wxSoundBackendSDL();
 
-    wxString GetName() const { return _T("Simple DirectMedia Layer"); }
+    wxString GetName() const { return wxT("Simple DirectMedia Layer"); }
     int GetPriority() const { return 9; }
     bool IsAvailable() const;
     bool HasNativeAsyncPlayback() const { return true; }
@@ -111,8 +111,8 @@ public:
 private:
     void OnNotify(wxSoundBackendSDLNotification& WXUNUSED(event))
     {
-        wxLogTrace(_T("sound"),
-                   _T("received playback status change notification"));
+        wxLogTrace(wxT("sound"),
+                   wxT("received playback status change notification"));
         m_backend->FinishedPlayback();
     }
     wxSoundBackendSDL *m_backend;
@@ -141,7 +141,7 @@ bool wxSoundBackendSDL::IsAvailable() co
             return false;
     }
     wxConstCast(this, wxSoundBackendSDL)->m_initialized = true;
-    wxLogTrace(_T("sound"), _T("initialized SDL audio subsystem"));
+    wxLogTrace(wxT("sound"), wxT("initialized SDL audio subsystem"));
     return true;
 }
 
@@ -210,13 +210,13 @@ bool wxSoundBackendSDL::OpenAudio()
         m_spec.callback = wx_sdl_audio_callback;
         m_spec.userdata = (void*)this;
 
-        wxLogTrace(_T("sound"), _T("opening SDL audio..."));
+        wxLogTrace(wxT("sound"), wxT("opening SDL audio..."));
         if (SDL_OpenAudio(&m_spec, NULL) >= 0)
         {
 #if wxUSE_LOG_DEBUG
             char driver[256];
             SDL_AudioDriverName(driver, 256);
-            wxLogTrace(_T("sound"), _T("opened audio, driver '%s'"),
+            wxLogTrace(wxT("sound"), wxT("opened audio, driver '%s'"),
                        wxString(driver, wxConvLocal).c_str());
 #endif
             m_audioOpen = true;
@@ -237,7 +237,7 @@ void wxSoundBackendSDL::CloseAudio()
     if (m_audioOpen)
     {
         SDL_CloseAudio();
-        wxLogTrace(_T("sound"), _T("closed audio"));
+        wxLogTrace(wxT("sound"), wxT("closed audio"));
         m_audioOpen = false;
     }
 }
@@ -280,7 +280,7 @@ bool wxSoundBackendSDL::Play(wxSoundData
     }
 
     SDL_LockAudio();
-    wxLogTrace(_T("sound"), _T("playing new sound"));
+    wxLogTrace(wxT("sound"), wxT("playing new sound"));
     m_playing = true;
     m_pos = 0;
     m_loop = (flags & wxSOUND_LOOP);
@@ -293,7 +293,7 @@ bool wxSoundBackendSDL::Play(wxSoundData
     // wait until playback finishes if called in sync mode:
     if (!(flags & wxSOUND_ASYNC))
     {
-        wxLogTrace(_T("sound"), _T("waiting for sample to finish"));
+        wxLogTrace(wxT("sound"), wxT("waiting for sample to finish"));
         while (m_playing && m_data == data)
         {
 #if wxUSE_THREADS
@@ -308,7 +308,7 @@ bool wxSoundBackendSDL::Play(wxSoundData
                 wxMutexGuiEnter();
 #endif
         }
-        wxLogTrace(_T("sound"), _T("sample finished"));
+        wxLogTrace(wxT("sound"), wxT("sample finished"));
     }
 
     return true;
--- src/unix/sound.cpp-orig	2009-06-18 16:21:05.906522000 -0500
+++ src/unix/sound.cpp	2009-06-18 16:21:17.619492000 -0500
@@ -104,7 +104,7 @@ public:
 class wxSoundBackendOSS : public wxSoundBackend
 {
 public:
-    wxString GetName() const { return _T("Open Sound System"); }
+    wxString GetName() const { return wxT("Open Sound System"); }
     int GetPriority() const { return 10; }
     bool IsAvailable() const;
     bool HasNativeAsyncPlayback() const { return false; }
@@ -152,7 +152,7 @@ bool wxSoundBackendOSS::Play(wxSoundData
         {
             if (status->m_stopRequested)
             {
-                wxLogTrace(_T("sound"), _T("playback stopped"));
+                wxLogTrace(wxT("sound"), wxT("playback stopped"));
                 close(dev);
                 return true;
             }
@@ -195,7 +195,7 @@ bool wxSoundBackendOSS::InitDSP(int dev,
     // Reset the dsp
     if (ioctl(dev, SNDCTL_DSP_RESET, 0) < 0)
     {
-        wxLogTrace(_T("sound"), _T("unable to reset dsp"));
+        wxLogTrace(wxT("sound"), wxT("unable to reset dsp"));
         return false;
     }
 
@@ -204,13 +204,13 @@ bool wxSoundBackendOSS::InitDSP(int dev,
     tmp = data->m_bitsPerSample;
     if (ioctl(dev, SNDCTL_DSP_SAMPLESIZE, &tmp) < 0)
     {
-        wxLogTrace(_T("sound"), _T("IOCTL failure (SNDCTL_DSP_SAMPLESIZE)"));
+        wxLogTrace(wxT("sound"), wxT("IOCTL failure (SNDCTL_DSP_SAMPLESIZE)"));
         return false;
     }
     if (tmp != data->m_bitsPerSample)
     {
-        wxLogTrace(_T("sound"),
-                   _T("Unable to set DSP sample size to %d (wants %d)"),
+        wxLogTrace(wxT("sound"),
+                   wxT("Unable to set DSP sample size to %d (wants %d)"),
                    data->m_bitsPerSample, tmp);
         m_needConversion = true;
     }
@@ -219,19 +219,19 @@ bool wxSoundBackendOSS::InitDSP(int dev,
     tmp = stereo;
     if (ioctl(dev, SNDCTL_DSP_STEREO, &tmp) < 0)
     {
-        wxLogTrace(_T("sound"), _T("IOCTL failure (SNDCTL_DSP_STEREO)"));
+        wxLogTrace(wxT("sound"), wxT("IOCTL failure (SNDCTL_DSP_STEREO)"));
         return false;
     }
     if (tmp != stereo)
     {
-        wxLogTrace(_T("sound"), _T("Unable to set DSP to %s."), stereo?  _T("stereo"):_T("mono"));
+        wxLogTrace(wxT("sound"), wxT("Unable to set DSP to %s."), stereo?  wxT("stereo"):wxT("mono"));
         m_needConversion = true;
     }
 
     tmp = data->m_samplingRate;
     if (ioctl(dev, SNDCTL_DSP_SPEED, &tmp) < 0)
     {
-        wxLogTrace(_T("sound"), _T("IOCTL failure (SNDCTL_DSP_SPEED)"));
+        wxLogTrace(wxT("sound"), wxT("IOCTL failure (SNDCTL_DSP_SPEED)"));
        return false;
     }
     if (tmp != data->m_samplingRate)
@@ -244,8 +244,8 @@ bool wxSoundBackendOSS::InitDSP(int dev,
         // file rates for something that we can't hear anyways.
         if (data->m_samplingRate - tmp > (tmp * .01) ||
             tmp - data->m_samplingRate > (tmp * .01)) {
-            wxLogTrace(_T("sound"),
-                       _T("Unable to set DSP sampling rate to %d (wants %d)"),
+            wxLogTrace(wxT("sound"),
+                       wxT("Unable to set DSP sampling rate to %d (wants %d)"),
                        data->m_samplingRate, tmp);
             m_needConversion = true;
         }
@@ -255,7 +255,7 @@ bool wxSoundBackendOSS::InitDSP(int dev,
     // the sampling rate, etc.
     if (ioctl(dev, SNDCTL_DSP_GETBLKSIZE, &m_DSPblkSize) < 0)
     {
-        wxLogTrace(_T("sound"), _T("IOCTL failure (SNDCTL_DSP_GETBLKSIZE)"));
+        wxLogTrace(wxT("sound"), wxT("IOCTL failure (SNDCTL_DSP_GETBLKSIZE)"));
         return false;
     }
     return true;
@@ -344,7 +344,7 @@ wxThread::ExitCode wxSoundAsyncPlaybackT
     m_data->DecRef();
     m_adapt->m_playing = false;
     m_adapt->m_mutexRightToPlay.Unlock();
-    wxLogTrace(_T("sound"), _T("terminated async playback thread"));
+    wxLogTrace(wxT("sound"), wxT("terminated async playback thread"));
     return 0;
 }
 #endif
@@ -363,7 +363,7 @@ bool wxSoundSyncOnlyAdaptor::Play(wxSoun
         wxThread *th = new wxSoundAsyncPlaybackThread(this, data, flags);
         th->Create();
         th->Run();
-        wxLogTrace(_T("sound"), _T("launched async playback thread"));
+        wxLogTrace(wxT("sound"), wxT("launched async playback thread"));
         return true;
 #else
         wxLogError(_("Unable to play sound asynchronously."));
@@ -385,7 +385,7 @@ bool wxSoundSyncOnlyAdaptor::Play(wxSoun
 
 void wxSoundSyncOnlyAdaptor::Stop()
 {
-    wxLogTrace(_T("sound"), _T("asking audio to stop"));
+    wxLogTrace(wxT("sound"), wxT("asking audio to stop"));
 
 #if wxUSE_THREADS
     // tell the player thread (if running) to stop playback ASAP:
@@ -397,7 +397,7 @@ void wxSoundSyncOnlyAdaptor::Stop()
     // our request to interrupt playback):
     m_mutexRightToPlay.Lock();
     m_mutexRightToPlay.Unlock();
-    wxLogTrace(_T("sound"), _T("audio was stopped"));
+    wxLogTrace(wxT("sound"), wxT("audio was stopped"));
 #endif
 }
 
@@ -449,7 +449,7 @@ bool wxSound::Create(const wxString& fil
                      bool WXUNUSED_UNLESS_DEBUG(isResource))
 {
     wxASSERT_MSG( !isResource,
-             _T("Loading sound from resources is only supported on Windows") );
+             wxT("Loading sound from resources is only supported on Windows") );
 
     Free();
 
@@ -509,12 +509,12 @@ bool wxSound::Create(int size, const wxB
             ms_backend = wxCreateSoundBackendSDL();
 #else
             wxString dllname;
-            dllname.Printf(_T("%s/%s"),
+            dllname.Printf(wxT("%s/%s"),
                 wxDynamicLibrary::GetPluginsDirectory().c_str(),
                 wxDynamicLibrary::CanonicalizePluginName(
-                    _T("sound_sdl"), wxDL_PLUGIN_BASE).c_str());
-            wxLogTrace(_T("sound"),
-                       _T("trying to load SDL plugin from '%s'..."),
+                    wxT("sound_sdl"), wxDL_PLUGIN_BASE).c_str());
+            wxLogTrace(wxT("sound"),
+                       wxT("trying to load SDL plugin from '%s'..."),
                        dllname.c_str());
             wxLogNull null;
             ms_backendSDL = new wxDynamicLibrary(dllname, wxDL_NOW);
@@ -557,8 +557,8 @@ bool wxSound::Create(int size, const wxB
         if (!ms_backend->HasNativeAsyncPlayback())
             ms_backend = new wxSoundSyncOnlyAdaptor(ms_backend);
 
-        wxLogTrace(_T("sound"),
-                   _T("using backend '%s'"), ms_backend->GetName().c_str());
+        wxLogTrace(wxT("sound"),
+                   wxT("using backend '%s'"), ms_backend->GetName().c_str());
     }
 }
 
@@ -566,7 +566,7 @@ bool wxSound::Create(int size, const wxB
 {
     if (ms_backend)
     {
-        wxLogTrace(_T("sound"), _T("unloading backend"));
+        wxLogTrace(wxT("sound"), wxT("unloading backend"));
 
         Stop();
 
@@ -580,7 +580,7 @@ bool wxSound::Create(int size, const wxB
 
 bool wxSound::DoPlay(unsigned flags) const
 {
-    wxCHECK_MSG( IsOk(), false, _T("Attempt to play invalid wave data") );
+    wxCHECK_MSG( IsOk(), false, wxT("Attempt to play invalid wave data") );
 
     EnsureBackend();
     wxSoundPlaybackStatus status;
--- src/unix/fontutil.cpp-orig	2009-06-18 16:21:24.497245000 -0500
+++ src/unix/fontutil.cpp	2009-06-18 16:21:34.356845000 -0500
@@ -235,7 +235,7 @@ void wxNativeFontInfo::SetStyle(wxFontSt
             pango_font_description_set_style( description, PANGO_STYLE_OBLIQUE );
             break;
         default:
-            wxFAIL_MSG( _T("unknown font style") );
+            wxFAIL_MSG( wxT("unknown font style") );
             // fall through
         case wxFONTSTYLE_NORMAL:
             pango_font_description_set_style( description, PANGO_STYLE_NORMAL );
@@ -254,7 +254,7 @@ void wxNativeFontInfo::SetWeight(wxFontW
             pango_font_description_set_weight(description, PANGO_WEIGHT_LIGHT);
             break;
         default:
-            wxFAIL_MSG( _T("unknown font weight") );
+            wxFAIL_MSG( wxT("unknown font weight") );
             // fall through
         case wxFONTWEIGHT_NORMAL:
             pango_font_description_set_weight(description, PANGO_WEIGHT_NORMAL);
@@ -263,7 +263,7 @@ void wxNativeFontInfo::SetWeight(wxFontW
 
 void wxNativeFontInfo::SetUnderlined(bool WXUNUSED(underlined))
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 bool wxNativeFontInfo::SetFaceName(const wxString& facename)
@@ -274,12 +274,12 @@ bool wxNativeFontInfo::SetFaceName(const
 
 void wxNativeFontInfo::SetFamily(wxFontFamily WXUNUSED(family))
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 void wxNativeFontInfo::SetEncoding(wxFontEncoding WXUNUSED(encoding))
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 }
 
 
@@ -297,15 +297,15 @@ bool wxNativeFontInfo::FromString(const 
     // pango > 1.13. Note that the segfault could happen also for pointsize
     // smaller than this limit !!
     wxString str(s);
-    const size_t pos = str.find_last_of(_T(" "));
+    const size_t pos = str.find_last_of(wxT(" "));
     double size;
     if ( pos != wxString::npos && wxString(str, pos + 1).ToDouble(&size) )
     {
         wxString sizeStr;
         if ( size < 1 )
-            sizeStr = _T("1");
+            sizeStr = wxT("1");
         else if ( size >= 1E6 )
-            sizeStr = _T("1E6");
+            sizeStr = wxT("1E6");
 
         if ( !sizeStr.empty() )
         {
@@ -460,7 +460,7 @@ static wxNativeFont wxLoadQueryFont(int 
 bool wxNativeEncodingInfo::FromString(const wxString& s)
 {
     // use ";", not "-" because it may be part of encoding name
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     wxString encid = tokenizer.GetNextToken();
     long enc;
@@ -485,10 +485,10 @@ bool wxNativeEncodingInfo::FromString(co
 wxString wxNativeEncodingInfo::ToString() const
 {
     wxString s;
-    s << (long)encoding << _T(';') << xregistry << _T(';') << xencoding;
+    s << (long)encoding << wxT(';') << xregistry << wxT(';') << xencoding;
     if ( !facename.empty() )
     {
-        s << _T(';') << facename;
+        s << wxT(';') << facename;
     }
 
     return s;
@@ -505,11 +505,11 @@ void wxNativeFontInfo::Init()
 
 bool wxNativeFontInfo::FromString(const wxString& s)
 {
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     // check the version
     wxString token = tokenizer.GetNextToken();
-    if ( token != _T('0') )
+    if ( token != wxT('0') )
         return false;
 
     xFontName = tokenizer.GetNextToken();
@@ -524,7 +524,7 @@ bool wxNativeFontInfo::FromString(const 
 wxString wxNativeFontInfo::ToString() const
 {
     // 0 is the version
-    return wxString::Format(_T("%d;%s"), 0, GetXFontName().c_str());
+    return wxString::Format(wxT("%d;%s"), 0, GetXFontName().c_str());
 }
 
 bool wxNativeFontInfo::FromUserString(const wxString& s)
@@ -546,7 +546,7 @@ bool wxNativeFontInfo::HasElements() con
 
 wxString wxNativeFontInfo::GetXFontComponent(wxXLFDField field) const
 {
-    wxCHECK_MSG( field < wxXLFD_MAX, wxEmptyString, _T("invalid XLFD field") );
+    wxCHECK_MSG( field < wxXLFD_MAX, wxEmptyString, wxT("invalid XLFD field") );
 
     if ( !HasElements() )
     {
@@ -561,7 +561,7 @@ wxString wxNativeFontInfo::GetXFontCompo
 bool wxNativeFontInfo::FromXFontName(const wxString& fontname)
 {
     // TODO: we should be able to handle the font aliases here, but how?
-    wxStringTokenizer tokenizer(fontname, _T("-"));
+    wxStringTokenizer tokenizer(fontname, wxT("-"));
 
     // skip the leading, usually empty field (font name registry)
     if ( !tokenizer.HasMoreTokens() )
@@ -578,7 +578,7 @@ bool wxNativeFontInfo::FromXFontName(con
         }
 
         wxString field = tokenizer.GetNextToken();
-        if ( !field.empty() && field != _T('*') )
+        if ( !field.empty() && field != wxT('*') )
         {
             // we're really initialized now
             m_isDefault = false;
@@ -605,11 +605,11 @@ wxString wxNativeFontInfo::GetXFontName(
             wxString elt = fontElements[n];
             if ( elt.empty() && n != wxXLFD_ADDSTYLE )
             {
-                elt = _T('*');
+                elt = wxT('*');
             }
 
             // const_cast
-            ((wxNativeFontInfo *)this)->xFontName << _T('-') << elt;
+            ((wxNativeFontInfo *)this)->xFontName << wxT('-') << elt;
         }
     }
 
@@ -619,18 +619,18 @@ wxString wxNativeFontInfo::GetXFontName(
 void
 wxNativeFontInfo::SetXFontComponent(wxXLFDField field, const wxString& value)
 {
-    wxCHECK_RET( field < wxXLFD_MAX, _T("invalid XLFD field") );
+    wxCHECK_RET( field < wxXLFD_MAX, wxT("invalid XLFD field") );
 
     // this class should be initialized with a valid font spec first and only
     // then the fields may be modified!
-    wxASSERT_MSG( !IsDefault(), _T("can't modify an uninitialized XLFD") );
+    wxASSERT_MSG( !IsDefault(), wxT("can't modify an uninitialized XLFD") );
 
     if ( !HasElements() )
     {
         // const_cast
         if ( !((wxNativeFontInfo *)this)->FromXFontName(xFontName) )
         {
-            wxFAIL_MSG( _T("can't set font element for invalid XLFD") );
+            wxFAIL_MSG( wxT("can't set font element for invalid XLFD") );
 
             return;
         }
@@ -677,13 +677,13 @@ wxFontStyle wxNativeFontInfo::GetStyle()
         default:
             // again, unknown but consider normal by default
 
-        case _T('r'):
+        case wxT('r'):
             return wxFONTSTYLE_NORMAL;
 
-        case _T('i'):
+        case wxT('i'):
             return wxFONTSTYLE_ITALIC;
 
-        case _T('o'):
+        case wxT('o'):
             return wxFONTSTYLE_SLANT;
     }
 }
@@ -691,9 +691,9 @@ wxFontStyle wxNativeFontInfo::GetStyle()
 wxFontWeight wxNativeFontInfo::GetWeight() const
 {
     const wxString s = GetXFontComponent(wxXLFD_WEIGHT).MakeLower();
-    if ( s.find(_T("bold")) != wxString::npos || s == _T("black") )
+    if ( s.find(wxT("bold")) != wxString::npos || s == wxT("black") )
         return wxFONTWEIGHT_BOLD;
-    else if ( s == _T("light") )
+    else if ( s == wxT("light") )
         return wxFONTWEIGHT_LIGHT;
 
     return wxFONTWEIGHT_NORMAL;
@@ -715,7 +715,7 @@ wxFontFamily wxNativeFontInfo::GetFamily
 {
     // and wxWidgets family -- to X foundry, but we have to translate it to
     // wxFontFamily somehow...
-    wxFAIL_MSG(_T("not implemented")); // GetXFontComponent(wxXLFD_FOUNDRY);
+    wxFAIL_MSG(wxT("not implemented")); // GetXFontComponent(wxXLFD_FOUNDRY);
 
     return wxFONTFAMILY_DEFAULT;
 }
@@ -723,14 +723,14 @@ wxFontFamily wxNativeFontInfo::GetFamily
 wxFontEncoding wxNativeFontInfo::GetEncoding() const
 {
     // we already have the code for this but need to refactor it first
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 
     return wxFONTENCODING_MAX;
 }
 
 void wxNativeFontInfo::SetPointSize(int pointsize)
 {
-    SetXFontComponent(wxXLFD_POINTSIZE, wxString::Format(_T("%d"), pointsize));
+    SetXFontComponent(wxXLFD_POINTSIZE, wxString::Format(wxT("%d"), pointsize));
 }
 
 void wxNativeFontInfo::SetStyle(wxFontStyle style)
@@ -739,18 +739,18 @@ void wxNativeFontInfo::SetStyle(wxFontSt
     switch ( style )
     {
         case wxFONTSTYLE_ITALIC:
-            s = _T('i');
+            s = wxT('i');
             break;
 
         case wxFONTSTYLE_SLANT:
-            s = _T('o');
+            s = wxT('o');
             break;
 
         case wxFONTSTYLE_NORMAL:
-            s = _T('r');
+            s = wxT('r');
 
         default:
-            wxFAIL_MSG( _T("unknown wxFontStyle in wxNativeFontInfo::SetStyle") );
+            wxFAIL_MSG( wxT("unknown wxFontStyle in wxNativeFontInfo::SetStyle") );
             return;
     }
 
@@ -763,19 +763,19 @@ void wxNativeFontInfo::SetWeight(wxFontW
     switch ( weight )
     {
         case wxFONTWEIGHT_BOLD:
-            s = _T("bold");
+            s = wxT("bold");
             break;
 
         case wxFONTWEIGHT_LIGHT:
-            s = _T("light");
+            s = wxT("light");
             break;
 
         case wxFONTWEIGHT_NORMAL:
-            s = _T("medium");
+            s = wxT("medium");
             break;
 
         default:
-            wxFAIL_MSG( _T("unknown wxFontWeight in wxNativeFontInfo::SetWeight") );
+            wxFAIL_MSG( wxT("unknown wxFontWeight in wxNativeFontInfo::SetWeight") );
             return;
     }
 
@@ -796,7 +796,7 @@ bool wxNativeFontInfo::SetFaceName(const
 void wxNativeFontInfo::SetFamily(wxFontFamily WXUNUSED(family))
 {
     // wxFontFamily -> X foundry, anyone?
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 
     // SetXFontComponent(wxXLFD_FOUNDRY, ...);
 }
@@ -818,7 +818,7 @@ void wxNativeFontInfo::SetEncoding(wxFon
 bool wxGetNativeFontEncoding(wxFontEncoding encoding,
                              wxNativeEncodingInfo *info)
 {
-    wxCHECK_MSG( info, false, _T("bad pointer in wxGetNativeFontEncoding") );
+    wxCHECK_MSG( info, false, wxT("bad pointer in wxGetNativeFontEncoding") );
 
     if ( encoding == wxFONTENCODING_DEFAULT )
     {
@@ -906,8 +906,8 @@ bool wxGetNativeFontEncoding(wxFontEncod
 bool wxTestFontEncoding(const wxNativeEncodingInfo& info)
 {
     wxString fontspec;
-    fontspec.Printf(_T("-*-%s-*-*-*-*-*-*-*-*-*-*-%s-%s"),
-                    !info.facename ? _T("*") : info.facename.c_str(),
+    fontspec.Printf(wxT("-*-%s-*-*-*-*-*-*-*-*-*-*-%s-%s"),
+                    !info.facename ? wxT("*") : info.facename.c_str(),
                     info.xregistry.c_str(),
                     info.xencoding.c_str());
 
@@ -969,7 +969,7 @@ wxNativeFont wxLoadQueryNearestFont(int 
         //
         //  Make sure point size is correct for scale factor.
         //
-        wxStringTokenizer tokenizer(*xFontName, _T("-"), wxTOKEN_RET_DELIMS);
+        wxStringTokenizer tokenizer(*xFontName, wxT("-"), wxTOKEN_RET_DELIMS);
         wxString newFontName;
 
         for(int i = 0; i < 8; i++)
@@ -1086,12 +1086,12 @@ wxNativeFont wxLoadQueryNearestFont(int 
                     // NULL or we'd crash in wxFont code
                     if ( !font )
                     {
-                        wxFAIL_MSG( _T("this encoding should be available!") );
+                        wxFAIL_MSG( wxT("this encoding should be available!") );
 
                         font = wxLoadQueryFont(-1,
                                                wxDEFAULT, wxNORMAL, wxNORMAL,
                                                false, wxEmptyString,
-                                               _T("*"), _T("*"),
+                                               wxT("*"), wxT("*"),
                                                xFontName);
                     }
                 }
@@ -1111,7 +1111,7 @@ static bool wxTestFontSpec(const wxStrin
 {
     // some X servers will fail to load this font because there are too many
     // matches so we must test explicitly for this
-    if ( fontspec == _T("-*-*-*-*-*-*-*-*-*-*-*-*-*-*") )
+    if ( fontspec == wxT("-*-*-*-*-*-*-*-*-*-*-*-*-*-*") )
     {
         return true;
     }
@@ -1280,7 +1280,7 @@ static wxNativeFont wxLoadQueryFont(int 
             break;
 
         default:
-            wxFAIL_MSG(_T("unknown font style"));
+            wxFAIL_MSG(wxT("unknown font style"));
             // fall back to normal
 
         case wxNORMAL:
@@ -1388,11 +1388,11 @@ static wxNativeFont wxLoadQueryFont(int 
     wxString sizeSpec;
     if ( pointSize == -1 )
     {
-        sizeSpec = _T('*');
+        sizeSpec = wxT('*');
     }
     else
     {
-        sizeSpec.Printf(_T("%d"), pointSize);
+        sizeSpec.Printf(wxT("%d"), pointSize);
     }
 
     // construct the X font spec from our data
--- src/unix/dialup.cpp-orig	2009-06-18 16:21:39.334443000 -0500
+++ src/unix/dialup.cpp	2009-06-18 16:21:46.815561000 -0500
@@ -250,7 +250,7 @@ public:
 
    virtual void Notify()
    {
-       wxLogTrace(_T("dialup"), wxT("Checking dial up network status."));
+       wxLogTrace(wxT("dialup"), wxT("Checking dial up network status."));
 
        m_dupman->CheckStatus();
    }
@@ -292,15 +292,15 @@ wxDialUpManagerImpl::wxDialUpManagerImpl
    m_BeaconPort = 80;
 
 #ifdef __SGI__
-   m_ConnectCommand = _T("/usr/etc/ppp");
+   m_ConnectCommand = wxT("/usr/etc/ppp");
 #elif defined(__LINUX__)
    // default values for Debian/GNU linux
-   m_ConnectCommand = _T("pon");
-   m_HangUpCommand = _T("poff");
+   m_ConnectCommand = wxT("pon");
+   m_HangUpCommand = wxT("poff");
 #endif
 
-   wxChar * dial = wxGetenv(_T("WXDIALUP_DIALCMD"));
-   wxChar * hup = wxGetenv(_T("WXDIALUP_HUPCMD"));
+   wxChar * dial = wxGetenv(wxT("WXDIALUP_DIALCMD"));
+   wxChar * hup = wxGetenv(wxT("WXDIALUP_HUPCMD"));
    SetConnectCommand(dial ? wxString(dial) : m_ConnectCommand,
                      hup ? wxString(hup) : m_HangUpCommand);
 }
@@ -509,7 +509,7 @@ void wxDialUpManagerImpl::CheckStatusInt
             break;
 
         default:
-            wxFAIL_MSG(_T("Unexpected netDeviceType"));
+            wxFAIL_MSG(wxT("Unexpected netDeviceType"));
     }
 }
 
@@ -597,7 +597,7 @@ wxDialUpManagerImpl::CheckProcNet()
     int netDevice = NetDevice_Unknown;
 
 #ifdef __LINUX__
-    if (wxFileExists(_T("/proc/net/route")))
+    if (wxFileExists(wxT("/proc/net/route")))
     {
         // cannot use wxFile::Length because file doesn't support seeking, so
         // use stdio directly
@@ -647,16 +647,16 @@ wxDialUpManagerImpl::CheckIfconfig()
     {
         static const wxChar *ifconfigLocations[] =
         {
-            _T("/sbin"),         // Linux, FreeBSD, Darwin
-            _T("/usr/sbin"),     // SunOS, Solaris, AIX, HP-UX
-            _T("/usr/etc"),      // IRIX
-            _T("/etc"),          // AIX 5
+            wxT("/sbin"),         // Linux, FreeBSD, Darwin
+            wxT("/usr/sbin"),     // SunOS, Solaris, AIX, HP-UX
+            wxT("/usr/etc"),      // IRIX
+            wxT("/etc"),          // AIX 5
         };
 
         for ( size_t n = 0; n < WXSIZEOF(ifconfigLocations); n++ )
         {
             wxString path(ifconfigLocations[n]);
-            path << _T("/ifconfig");
+            path << wxT("/ifconfig");
 
             if ( wxFileExists(path) )
             {
@@ -671,7 +671,7 @@ wxDialUpManagerImpl::CheckIfconfig()
         wxLogNull ln; // suppress all error messages
 
         wxASSERT_MSG( m_IfconfigPath.length(),
-                      _T("can't use ifconfig if it wasn't found") );
+                      wxT("can't use ifconfig if it wasn't found") );
 
         wxString tmpfile = wxGetTempFileName( wxT("_wxdialuptest") );
         wxString cmd = wxT("/bin/sh -c \'");
@@ -766,9 +766,9 @@ wxDialUpManagerImpl::NetConnection wxDia
         if (wxFileExists( wxT("SYS$SYSTEM:TCPIP$PING.EXE") ))
             m_PingPath = wxT("$SYS$SYSTEM:TCPIP$PING");
 #elif defined(__AIX__)
-        m_PingPath = _T("/etc/ping");
+        m_PingPath = wxT("/etc/ping");
 #elif defined(__SGI__)
-        m_PingPath = _T("/usr/etc/ping");
+        m_PingPath = wxT("/usr/etc/ping");
 #else
         if (wxFileExists( wxT("/bin/ping") ))
             m_PingPath = wxT("/bin/ping");
--- src/unix/displayx11.cpp-orig	2009-06-18 16:21:53.561739000 -0500
+++ src/unix/displayx11.cpp	2009-06-18 16:21:59.692274000 -0500
@@ -350,7 +350,7 @@ private:
 void wxClientDisplayRect(int *x, int *y, int *width, int *height)
 {
     Display * const dpy = (Display *)wxGetDisplay();
-    wxCHECK_RET( dpy, _T("can't be called before initializing the GUI") );
+    wxCHECK_RET( dpy, wxT("can't be called before initializing the GUI") );
 
     const Atom atomWorkArea = XInternAtom(dpy, "_NET_WORKAREA", True);
     if ( atomWorkArea )
@@ -386,7 +386,7 @@ void wxClientDisplayRect(int *x, int *y,
                     format != 32 ||
                         numItems != 4 )
             {
-                wxLogDebug(_T("XGetWindowProperty(\"_NET_WORKAREA\") failed"));
+                wxLogDebug(wxT("XGetWindowProperty(\"_NET_WORKAREA\") failed"));
                 return;
             }
 
--- src/unix/taskbarx11.cpp-orig	2009-06-18 16:22:06.246978000 -0500
+++ src/unix/taskbarx11.cpp	2009-06-18 16:22:19.911391000 -0500
@@ -61,7 +61,7 @@
     {
     public:
         wxTaskBarIconAreaBase()
-            : wxFrame(NULL, wxID_ANY, _T("systray icon"),
+            : wxFrame(NULL, wxID_ANY, wxT("systray icon"),
                       wxDefaultPosition, wxDefaultSize,
                       wxDEFAULT_FRAME_STYLE | wxFRAME_NO_TASKBAR |
                       wxSIMPLE_BORDER | wxFRAME_SHAPED) {}
@@ -138,8 +138,8 @@ wxTaskBarIconArea::wxTaskBarIconArea(wxT
 
     if (!IsProtocolSupported())
     {
-        wxLogTrace(_T("systray"),
-                   _T("using legacy KDE1,2 and GNOME 1.2 methods"));
+        wxLogTrace(wxT("systray"),
+                   wxT("using legacy KDE1,2 and GNOME 1.2 methods"));
         SetLegacyWMProperties();
     }
 }
@@ -206,7 +206,7 @@ void wxTaskBarIconArea::SetLegacyWMPrope
 
 void wxTaskBarIconArea::OnSizeChange(wxSizeEvent& WXUNUSED(event))
 {
-    wxLogTrace(_T("systray"), _T("icon size changed to %i x %i"),
+    wxLogTrace(wxT("systray"), wxT("icon size changed to %i x %i"),
                GetSize().x, GetSize().y);
     // rescale or reposition the icon as needed:
     wxBitmap bmp(m_bmp);
--- src/motif/font.cpp-orig	2009-06-18 19:40:21.206678000 -0500
+++ src/motif/font.cpp	2009-06-18 19:40:27.095844000 -0500
@@ -311,7 +311,7 @@ bool wxFont::Create(const wxString& font
         wxString registry = tn.GetNextToken().MakeUpper(),
                  encoding = tn.GetNextToken().MakeUpper();
 
-        if ( registry == _T("ISO8859") )
+        if ( registry == wxT("ISO8859") )
         {
             int cp;
             if ( wxSscanf(encoding, wxT("%d"), &cp) == 1 )
@@ -320,7 +320,7 @@ bool wxFont::Create(const wxString& font
                     (wxFontEncoding)(wxFONTENCODING_ISO8859_1 + cp - 1);
             }
         }
-        else if ( registry == _T("MICROSOFT") )
+        else if ( registry == wxT("MICROSOFT") )
         {
             int cp;
             if ( wxSscanf(encoding, wxT("cp125%d"), &cp) == 1 )
@@ -329,7 +329,7 @@ bool wxFont::Create(const wxString& font
                     (wxFontEncoding)(wxFONTENCODING_CP1250 + cp);
             }
         }
-        else if ( registry == _T("KOI8") )
+        else if ( registry == wxT("KOI8") )
         {
             M_FONTDATA->m_encoding = wxFONTENCODING_KOI8;
         }
--- src/motif/app.cpp-orig	2009-06-18 19:40:31.283869000 -0500
+++ src/motif/app.cpp	2009-06-18 19:40:36.393504000 -0500
@@ -235,7 +235,7 @@ bool wxApp::OnInitGui()
                 strcmp(loc, "POSIX") == 0 )
     {
         // we're using C locale, "fix" it
-        wxLogDebug(_T("HP-UX fontset hack: forcing locale to en_US.iso88591"));
+        wxLogDebug(wxT("HP-UX fontset hack: forcing locale to en_US.iso88591"));
         putenv(fixAll ? "LC_ALL=en_US.iso88591" : "LC_CTYPE=en_US.iso88591");
     }
 #endif // __HPUX__
@@ -249,10 +249,10 @@ bool wxApp::OnInitGui()
     // immediate crash inside XOpenIM() (if XIM is used) under IRIX
     wxString appname = wxTheApp->GetAppName();
     if ( appname.empty() )
-        appname = _T("wxapp");
+        appname = wxT("wxapp");
     wxString clsname = wxTheApp->GetClassName();
     if ( clsname.empty() )
-        clsname = _T("wx");
+        clsname = wxT("wx");
 
     Display *dpy = XtOpenDisplay((XtAppContext) wxTheApp->m_appContext,
         (String)NULL,
--- src/motif/toolbar.cpp-orig	2009-06-18 19:40:40.853203000 -0500
+++ src/motif/toolbar.cpp	2009-06-18 19:40:45.197923000 -0500
@@ -481,7 +481,7 @@ bool wxToolBar::Realize()
 wxToolBarToolBase *wxToolBar::FindToolForPosition(wxCoord WXUNUSED(x),
                                                   wxCoord WXUNUSED(y)) const
 {
-    wxFAIL_MSG( _T("TODO") );
+    wxFAIL_MSG( wxT("TODO") );
 
     return (wxToolBarToolBase *)NULL;
 }
--- src/motif/filedlg.cpp-orig	2009-06-18 19:40:50.232810000 -0500
+++ src/motif/filedlg.cpp	2009-06-18 19:40:58.219344000 -0500
@@ -90,19 +90,19 @@ static wxString ParseWildCard( const wxS
 {
 #ifdef __WXDEBUG__
     static const wxChar* msg =
-        _T("Motif file dialog does not understand this ")
-        _T("wildcard syntax");
+        wxT("Motif file dialog does not understand this ")
+        wxT("wildcard syntax");
 #endif
 
     wxArrayString wildDescriptions, wildFilters;
     const size_t count = wxParseCommonDialogsFilter(wild,
                                                     wildDescriptions,
                                                     wildFilters);
-    wxCHECK_MSG( count, _T("*.*"), wxT("wxFileDialog: bad wildcard string") );
-    wxCHECK_MSG( count == 1, _T("*.*"), msg );
+    wxCHECK_MSG( count, wxT("*.*"), wxT("wxFileDialog: bad wildcard string") );
+    wxCHECK_MSG( count == 1, wxT("*.*"), msg );
 
     // check for *.txt;*.rtf
-    wxStringTokenizer tok2( wildFilters[0], _T(";") );
+    wxStringTokenizer tok2( wildFilters[0], wxT(";") );
     wxString wildcard = tok2.GetNextToken();
 
     wxCHECK_MSG( tok2.CountTokens() <= 1, wildcard, msg );
--- src/motif/evtloop.cpp-orig	2009-06-18 19:41:03.679349000 -0500
+++ src/motif/evtloop.cpp	2009-06-18 19:41:10.008878000 -0500
@@ -98,13 +98,13 @@ bool wxEventLoopImpl::SendIdleMessage()
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     wxEventLoopActivator activate(this);
 
@@ -128,7 +128,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
     m_impl->SetKeepGoing( false );
--- src/motif/bmpmotif.cpp-orig	2009-06-18 19:41:16.706831000 -0500
+++ src/motif/bmpmotif.cpp	2009-06-18 19:41:21.555193000 -0500
@@ -36,7 +36,7 @@ Pixmap XCreateInsensitivePixmap( Display
 
 static inline wxCharBuffer GetCacheImageName(WXImage image)
 {
-    return wxString::Format(_T("wxBitmap_%p"), image).ToAscii();
+    return wxString::Format(wxT("wxBitmap_%p"), image).ToAscii();
 }
 
 wxBitmapCache::~wxBitmapCache()
--- src/motif/settings.cpp-orig	2009-06-18 19:41:26.501527000 -0500
+++ src/motif/settings.cpp	2009-06-18 19:41:31.359214000 -0500
@@ -159,7 +159,7 @@ wxColour wxSystemSettingsNative::GetColo
 
     default:
     case wxSYS_COLOUR_MAX:
-        wxFAIL_MSG( _T("unknown colour") );
+        wxFAIL_MSG( wxT("unknown colour") );
   }
   return *wxWHITE;
 }
--- src/mgl/pen.cpp-orig	2009-06-18 19:37:23.330027000 -0500
+++ src/mgl/pen.cpp	2009-06-18 19:38:01.654970000 -0500
@@ -112,9 +112,9 @@ wxPen::wxPen(const wxColour &colour, int
 
 wxPen::wxPen(const wxBitmap& stipple, int width)
 {
-    wxCHECK_RET( stipple.Ok(), _T("invalid bitmap") );
+    wxCHECK_RET( stipple.Ok(), wxT("invalid bitmap") );
     wxCHECK_RET( stipple.GetWidth() == 8 && stipple.GetHeight() == 8,
-                  _T("stipple bitmap must be 8x8") );
+                  wxT("stipple bitmap must be 8x8") );
 
     m_refData = new wxPenRefData();
     M_PENDATA->m_width = width;
@@ -176,9 +176,9 @@ void wxPen::SetStyle(int style)
 
 void wxPen::SetStipple(const wxBitmap& stipple)
 {
-    wxCHECK_RET( stipple.Ok(), _T("invalid bitmap") );
+    wxCHECK_RET( stipple.Ok(), wxT("invalid bitmap") );
     wxCHECK_RET( stipple.GetWidth() == 8 && stipple.GetHeight() == 8,
-                  _T("stipple bitmap must be 8x8") );
+                  wxT("stipple bitmap must be 8x8") );
 
     AllocExclusive();
     M_PENDATA->m_stipple = stipple;
--- src/mgl/fontmgr.cpp-orig	2009-06-18 19:38:09.012780000 -0500
+++ src/mgl/fontmgr.cpp	2009-06-18 19:38:17.769450000 -0500
@@ -40,7 +40,7 @@ wxFontInstance::wxFontInstance(float ptS
 {
     m_font = MGL_loadFontInstance(fontLib, ptSize, 0.0, 0.0, aa);
 
-    wxASSERT_MSG( m_font, _T("cannot create font instance") );
+    wxASSERT_MSG( m_font, wxT("cannot create font instance") );
 }
 
 wxFontInstance::~wxFontInstance()
@@ -59,7 +59,7 @@ void wxFontFace::Acquire()
 
     if ( m_refCnt == 1 )
     {
-        wxCHECK_RET( m_fontLib == NULL, _T("font lib already created") );
+        wxCHECK_RET( m_fontLib == NULL, wxT("font lib already created") );
 
         wxLogTrace("mgl_font", "opening library '%s'", m_fileName.mb_str());
         m_fontLib = MGL_openFontLib(m_fileName.fn_str());
@@ -72,7 +72,7 @@ void wxFontFace::Release()
 
     if ( m_refCnt == 0 )
     {
-        wxCHECK_RET( m_fontLib != NULL, _T("font lib not created") );
+        wxCHECK_RET( m_fontLib != NULL, wxT("font lib not created") );
 
         wxLogTrace("mgl_font", "closing library '%s'", m_fileName.mb_str());
         MGL_closeFontLib(m_fontLib);
@@ -107,7 +107,7 @@ wxFontInstance *wxFontFace::GetFontInsta
 
 wxFontInstance *wxFontFace::CreateFontInstance(float ptSize, bool aa)
 {
-    wxASSERT_MSG( m_fontLib, _T("font library not loaded!") );
+    wxASSERT_MSG( m_fontLib, wxT("font library not loaded!") );
 
     return new wxFontInstance(ptSize, aa, m_fontLib);
 }
@@ -156,14 +156,14 @@ wxString wxFontsManager::GetDefaultFacen
     switch ( family )
     {
         case wxSCRIPT:
-            return _T("Script");
+            return wxT("Script");
         case wxDECORATIVE:
-            return _T("Charter");
+            return wxT("Charter");
         case wxROMAN:
-            return _T("Times");
+            return wxT("Times");
         case wxTELETYPE:
         case wxMODERN:
-            return _T("Courier");
+            return wxT("Courier");
         case wxSWISS:
         case wxDEFAULT:
         default:
--- src/mgl/window.cpp-orig	2009-06-18 19:38:22.270302000 -0500
+++ src/mgl/window.cpp	2009-06-18 19:38:29.737156000 -0500
@@ -106,9 +106,9 @@ static wxWindowMGL* wxGetTopLevelParent(
 static void wxCaptureScreenshot(bool activeWindowOnly)
 {
 #ifdef __DOS__
-    #define SCREENSHOT_FILENAME _T("sshot%03i.png")
+    #define SCREENSHOT_FILENAME wxT("sshot%03i.png")
 #else
-    #define SCREENSHOT_FILENAME _T("screenshot-%03i.png")
+    #define SCREENSHOT_FILENAME wxT("screenshot-%03i.png")
 #endif
     static int screenshot_num = 0;
     wxString screenshot;
@@ -128,7 +128,7 @@ static void wxCaptureScreenshot(bool act
     g_displayDC->savePNGFromDC(screenshot.mb_str(),
                                r.x, r. y, r.x+r.width, r.y+r.height);
 
-    wxMessageBox(wxString::Format(_T("Screenshot captured: %s"),
+    wxMessageBox(wxString::Format(wxT("Screenshot captured: %s"),
                                   screenshot.c_str()));
 }
 
@@ -288,8 +288,8 @@ static long wxScanToKeyCode(event_t *eve
     #ifdef __WXDEBUG__
       #define KEY(mgl_key,wx_key) \
         case mgl_key: \
-          wxLogTrace(_T("keyevents"), \
-                     _T("key " #mgl_key ", mapped to " #wx_key)); \
+          wxLogTrace(wxT("keyevents"), \
+                     wxT("key " #mgl_key ", mapped to " #wx_key)); \
           key = wx_key; \
           break;
     #else
--- src/mgl/dirmgl.cpp-orig	2009-06-18 19:38:34.957313000 -0500
+++ src/mgl/dirmgl.cpp	2009-06-18 19:38:41.929831000 -0500
@@ -87,7 +87,7 @@ wxDirData::wxDirData(const wxString& dir
 
     // throw away the trailing slashes
     size_t n = m_dirname.length();
-    wxCHECK_RET( n, _T("empty dir name in wxDir") );
+    wxCHECK_RET( n, wxT("empty dir name in wxDir") );
 
     while ( n > 0 && m_dirname[--n] == wxFILE_SEP_PATH ) {}
 
@@ -104,7 +104,7 @@ void wxDirData::SetFileSpec(const wxStri
 {
 #ifdef __DOS__
     if ( filespec.empty() )
-        m_filespec = _T("*.*");
+        m_filespec = wxT("*.*");
     else
 #endif
     m_filespec = filespec;
@@ -250,7 +250,7 @@ bool wxDir::GetFirst(wxString *filename,
                      const wxString& filespec,
                      int flags) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
     M_DIR->Rewind();
 
@@ -262,9 +262,9 @@ bool wxDir::GetFirst(wxString *filename,
 
 bool wxDir::GetNext(wxString *filename) const
 {
-    wxCHECK_MSG( IsOpened(), false, _T("must wxDir::Open() first") );
+    wxCHECK_MSG( IsOpened(), false, wxT("must wxDir::Open() first") );
 
-    wxCHECK_MSG( filename, false, _T("bad pointer in wxDir::GetNext()") );
+    wxCHECK_MSG( filename, false, wxT("bad pointer in wxDir::GetNext()") );
 
     return M_DIR->Read(filename);
 }
--- src/mgl/region.cpp-orig	2009-06-18 19:38:46.385849000 -0500
+++ src/mgl/region.cpp	2009-06-18 19:38:50.554545000 -0500
@@ -147,7 +147,7 @@ void wxRegion::Clear()
 
 bool wxRegion::DoIsEqual(const wxRegion& WXUNUSED(region)) const
 {
-    wxFAIL_MSG( _T("not implemented") );
+    wxFAIL_MSG( wxT("not implemented") );
 
     return false;
 }
--- src/mgl/fontutil.cpp-orig	2009-06-18 19:38:55.424975000 -0500
+++ src/mgl/fontutil.cpp	2009-06-18 19:39:01.469191000 -0500
@@ -44,7 +44,7 @@
 //      encoding[;facename]
 bool wxNativeEncodingInfo::FromString(const wxString& s)
 {
-    wxStringTokenizer tokenizer(s, _T(";"));
+    wxStringTokenizer tokenizer(s, wxT(";"));
 
     wxString encid = tokenizer.GetNextToken();
     long enc;
@@ -64,7 +64,7 @@ wxString wxNativeEncodingInfo::ToString(
     s << (long)encoding;
     if ( !facename.empty() )
     {
-        s << _T(';') << facename;
+        s << wxT(';') << facename;
     }
 
     return s;
@@ -77,7 +77,7 @@ wxString wxNativeEncodingInfo::ToString(
 bool wxGetNativeFontEncoding(wxFontEncoding encoding,
                              wxNativeEncodingInfo *info)
 {
-    wxCHECK_MSG( info, false, _T("bad pointer in wxGetNativeFontEncoding") );
+    wxCHECK_MSG( info, false, wxT("bad pointer in wxGetNativeFontEncoding") );
 
     if ( encoding == wxFONTENCODING_DEFAULT )
     {
--- src/mgl/brush.cpp-orig	2009-06-18 19:39:05.963567000 -0500
+++ src/mgl/brush.cpp	2009-06-18 19:39:11.887508000 -0500
@@ -133,9 +133,9 @@ wxBrush::wxBrush(const wxColour &colour,
 
 wxBrush::wxBrush(const wxBitmap &stippleBitmap)
 {
-    wxCHECK_RET( stippleBitmap.Ok(), _T("invalid bitmap") );
+    wxCHECK_RET( stippleBitmap.Ok(), wxT("invalid bitmap") );
     wxCHECK_RET( stippleBitmap.GetWidth() == 8 && stippleBitmap.GetHeight() == 8,
-                  _T("stipple bitmap must be 8x8") );
+                  wxT("stipple bitmap must be 8x8") );
 
     m_refData = new wxBrushRefData();
     M_BRUSHDATA->m_colour = *wxBLACK;
@@ -238,9 +238,9 @@ void wxBrush::SetStipple(const wxBitmap&
 {
     AllocExclusive();
 
-    wxCHECK_RET( stipple.Ok(), _T("invalid bitmap") );
+    wxCHECK_RET( stipple.Ok(), wxT("invalid bitmap") );
     wxCHECK_RET( stipple.GetWidth() == 8 && stipple.GetHeight() == 8,
-                  _T("stipple bitmap must be 8x8") );
+                  wxT("stipple bitmap must be 8x8") );
 
     M_BRUSHDATA->m_stipple = stipple;
     wxBitmapToPixPattern(stipple, &(M_BRUSHDATA->m_pixPattern),
--- src/mgl/dc.cpp-orig	2009-06-18 19:39:16.142695000 -0500
+++ src/mgl/dc.cpp	2009-06-18 19:39:23.394227000 -0500
@@ -329,7 +329,7 @@ bool wxDC::DoFloodFill(wxCoord x, wxCoor
 
 bool wxDC::DoGetPixel(wxCoord x, wxCoord y, wxColour *col) const
 {
-    wxCHECK_MSG( col, false, _T("NULL colour parameter in wxDC::GetPixel"));
+    wxCHECK_MSG( col, false, wxT("NULL colour parameter in wxDC::GetPixel"));
 
     uchar r, g, b;
     m_MGLDC->unpackColorFast(m_MGLDC->getPixel(XLOG2DEV(x), YLOG2DEV(y)),
@@ -983,7 +983,7 @@ void wxDC::SelectMGLFatPen(int style, in
                                                         pixPattern->p[x][y][2]);
                     break;
                 default:
-                    wxFAIL_MSG(_T("invalid DC depth"));
+                    wxFAIL_MSG(wxT("invalid DC depth"));
                     break;
             }
             m_MGLDC->setPenPixmapPattern(slot, &pix);
--- src/mgl/evtloop.cpp-orig	2009-06-18 19:39:28.995407000 -0500
+++ src/mgl/evtloop.cpp	2009-06-18 19:39:35.458099000 -0500
@@ -106,13 +106,13 @@ bool wxEventLoopImpl::SendIdleEvent()
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     m_impl = new wxEventLoopImpl;
 
@@ -148,7 +148,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
     m_impl->SetKeepLooping(false);
@@ -175,7 +175,7 @@ bool wxEventLoop::Pending() const
 
 bool wxEventLoop::Dispatch()
 {
-    wxCHECK_MSG( IsRunning(), false, _T("can't call Dispatch() if not running") );
+    wxCHECK_MSG( IsRunning(), false, wxT("can't call Dispatch() if not running") );
 
     m_impl->Dispatch();
     return m_impl->GetKeepLooping();
--- src/mgl/cursor.cpp-orig	2009-06-18 19:39:42.077261000 -0500
+++ src/mgl/cursor.cpp	2009-06-18 19:39:48.265546000 -0500
@@ -72,7 +72,7 @@ wxCursor::wxCursor(int cursorId)
 
     if ( gs_cursorsHash->find(cursorId) != gs_cursorsHash->end() )
     {
-        wxLogTrace(_T("mglcursor"), _T("cursor id %i fetched from cache"), cursorId);
+        wxLogTrace(wxT("mglcursor"), wxT("cursor id %i fetched from cache"), cursorId);
         *this = (*gs_cursorsHash)[cursorId];
         return;
     }
@@ -135,7 +135,7 @@ wxCursor::wxCursor(int cursorId)
     else
     {
         (*gs_cursorsHash)[cursorId] = *this;
-        wxLogTrace(_T("mglcursor"), _T("cursor id %i added to cache (%s)"),
+        wxLogTrace(wxT("mglcursor"), wxT("cursor id %i added to cache (%s)"),
                    cursorId, cursorname);
     }
 }
--- src/mgl/settings.cpp-orig	2009-06-18 19:39:52.767020000 -0500
+++ src/mgl/settings.cpp	2009-06-18 19:39:56.800423000 -0500
@@ -112,7 +112,7 @@ bool wxSystemSettingsNative::HasFeature(
             return false;
 
         default:
-            wxFAIL_MSG( _T("unknown feature") );
+            wxFAIL_MSG( wxT("unknown feature") );
     }
 
     return false;
--- src/mgl/app.cpp-orig	2009-06-18 19:40:00.696961000 -0500
+++ src/mgl/app.cpp	2009-06-18 19:40:04.451118000 -0500
@@ -218,7 +218,7 @@ wxVideoMode wxGetDefaultDisplayMode()
     unsigned w, h, bpp;
 
     if ( !wxGetEnv(wxT("WXMODE"), &mode) ||
-         (wxSscanf(mode.c_str(), _T("%ux%u-%u"), &w, &h, &bpp) != 3) )
+         (wxSscanf(mode.c_str(), wxT("%ux%u-%u"), &w, &h, &bpp) != 3) )
     {
         w = 640, h = 480, bpp = 16;
     }
--- src/cocoa/evtloop.mm-orig	2009-06-18 19:35:49.670875000 -0500
+++ src/cocoa/evtloop.mm	2009-06-18 19:35:57.437538000 -0500
@@ -50,13 +50,13 @@ private:
 
 wxEventLoop::~wxEventLoop()
 {
-    wxASSERT_MSG( !m_impl, _T("should have been deleted in Run()") );
+    wxASSERT_MSG( !m_impl, wxT("should have been deleted in Run()") );
 }
 
 int wxEventLoop::Run()
 {
     // event loops are not recursive, you need to create another loop!
-    wxCHECK_MSG( !IsRunning(), -1, _T("can't reenter a message loop") );
+    wxCHECK_MSG( !IsRunning(), -1, wxT("can't reenter a message loop") );
 
     wxEventLoopActivator activate(this);
 
@@ -75,7 +75,7 @@ int wxEventLoop::Run()
 
 void wxEventLoop::Exit(int rc)
 {
-    wxCHECK_RET( IsRunning(), _T("can't call Exit() if not running") );
+    wxCHECK_RET( IsRunning(), wxT("can't call Exit() if not running") );
 
     m_impl->SetExitCode(rc);
 
@@ -115,7 +115,7 @@ bool wxEventLoop::Dispatch()
 {
     // This check is required by wxGTK but probably not really for wxCocoa
     // Keep it here to encourage developers to write cross-platform code
-    wxCHECK_MSG( IsRunning(), false, _T("can't call Dispatch() if not running") );
+    wxCHECK_MSG( IsRunning(), false, wxT("can't call Dispatch() if not running") );
     NSApplication *cocoaApp = [NSApplication sharedApplication];
     // Block to retrieve an event then send it
     if(NSEvent *event = [cocoaApp
--- src/cocoa/filedlg.mm-orig	2009-06-18 19:36:02.237055000 -0500
+++ src/cocoa/filedlg.mm	2009-06-18 19:36:10.574582000 -0500
@@ -168,8 +168,8 @@ void wxFileDialog::GetPaths(wxArrayStrin
     paths.Empty();
 
     wxString dir(m_dir);
-    if ( m_dir.Last() != _T('\\') )
-        dir += _T('\\');
+    if ( m_dir.Last() != wxT('\\') )
+        dir += wxT('\\');
 
     size_t count = m_fileNames.GetCount();
     for ( size_t n = 0; n < count; n++ )
@@ -191,7 +191,7 @@ void wxFileDialog::SetPath(const wxStrin
     wxString ext;
     wxSplitPath(path, &m_dir, &m_fileName, &ext);
     if ( !ext.empty() )
-        m_fileName << _T('.') << ext;
+        m_fileName << wxT('.') << ext;
 }
 
 int wxFileDialog::ShowModal()
--- src/cocoa/bitmap.mm-orig	2009-06-18 19:36:15.589376000 -0500
+++ src/cocoa/bitmap.mm	2009-06-18 19:36:20.030888000 -0500
@@ -526,7 +526,7 @@ void *wxBitmap::GetRawData(wxPixelDataBa
 
     if([bitmapRep bitsPerPixel]!=bpp)
     {
-        wxFAIL_MSG( _T("incorrect bitmap type in wxBitmap::GetRawData()") );
+        wxFAIL_MSG( wxT("incorrect bitmap type in wxBitmap::GetRawData()") );
         return NULL;
     }
     data.m_width = [bitmapRep pixelsWide];
--- src/cocoa/brush.mm-orig	2009-06-18 19:36:24.104680000 -0500
+++ src/cocoa/brush.mm	2009-06-18 19:36:30.492501000 -0500
@@ -195,19 +195,19 @@ void wxBrush::SetStipple(const wxBitmap&
 
 wxColour wxBrush::GetColour() const
 {
-    wxCHECK_MSG( Ok(), wxNullColour, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), wxNullColour, wxT("invalid brush") );
     return M_BRUSHDATA->GetColour();
 }
 
 int wxBrush::GetStyle() const
 {
-    wxCHECK_MSG( Ok(), 0, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), 0, wxT("invalid brush") );
     return M_BRUSHDATA->GetStyle();
 }
 
 wxBitmap *wxBrush::GetStipple() const
 {
-    wxCHECK_MSG( Ok(), 0, _T("invalid brush") );
+    wxCHECK_MSG( Ok(), 0, wxT("invalid brush") );
     return M_BRUSHDATA->GetStipple();
 }
 
--- src/cocoa/app.mm-orig	2009-06-18 19:36:34.284485000 -0500
+++ src/cocoa/app.mm	2009-06-18 19:36:38.190094000 -0500
@@ -135,7 +135,7 @@ bool wxApp::Initialize(int& argc, wxChar
     // application (otherwise applications would need to handle it)
     if ( argc > 1 )
     {
-        static const wxChar *ARG_PSN = _T("-psn_");
+        static const wxChar *ARG_PSN = wxT("-psn_");
         if ( wxStrncmp(argv[1], ARG_PSN, wxStrlen(ARG_PSN)) == 0 )
         {
             // remove this argument
--- src/cocoa/button.mm-orig	2009-06-18 19:36:42.829007000 -0500
+++ src/cocoa/button.mm	2009-06-18 19:36:57.552800000 -0500
@@ -111,7 +111,7 @@ void wxButton::SetDefault()
     wxTopLevelWindow * const
         tlw = wxDynamicCast(wxGetTopLevelParent(this), wxTopLevelWindow);
 
-    wxCHECK_RET( tlw != NULL, _T("button without top level window?") );
+    wxCHECK_RET( tlw != NULL, wxT("button without top level window?") );
 
     tlw->SetDefaultItem(this);
 }
--- tests/formatconverter/formatconvertertest.cpp-orig	2009-06-18 19:01:55.102748000 -0500
+++ tests/formatconverter/formatconvertertest.cpp	2009-06-18 19:02:02.646139000 -0500
@@ -32,7 +32,7 @@
 // I've put in some checks, such as this which will flag up any platforms
 // where this is not the case:
 //
-//  CPPUNIT_ASSERT(wxString::Format(_T("%hs"), "test") == _T("test"));
+//  CPPUNIT_ASSERT(wxString::Format(wxT("%hs"), "test") == wxT("test"));
 //
 
 // For compilers that support precompilation, includes "wx/wx.h".
@@ -114,110 +114,110 @@ class FormatConverterTestCase : public T
 void FormatConverterTestCase::format_d()
 {
 #ifdef CAN_TEST
-    doTest(_T("d"), _T("d"));
+    doTest(wxT("d"), wxT("d"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(_T("%d"), 255) == _T("255"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%05d"), 255) == _T("00255"));
-    CPPUNIT_ASSERT(wxString::Format(_T("% 5d"), 255) == _T("  255"));
-    CPPUNIT_ASSERT(wxString::Format(_T("% 5d"), -255) == _T(" -255"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%-5d"), -255) == _T("-255 "));
-    CPPUNIT_ASSERT(wxString::Format(_T("%+5d"), 255) == _T(" +255"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%*d"), 5, 255) == _T("  255"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%d"), 255) == wxT("255"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%05d"), 255) == wxT("00255"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("% 5d"), 255) == wxT("  255"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("% 5d"), -255) == wxT(" -255"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%-5d"), -255) == wxT("-255 "));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%+5d"), 255) == wxT(" +255"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%*d"), 5, 255) == wxT("  255"));
 }
 
 void FormatConverterTestCase::format_hd()
 {
 #ifdef CAN_TEST
-    doTest(_T("hd"), _T("hd"));
+    doTest(wxT("hd"), wxT("hd"));
 #endif
     short s = 32767;
-    CPPUNIT_ASSERT(wxString::Format(_T("%hd"), s) == _T("32767"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%hd"), s) == wxT("32767"));
 }
 
 void FormatConverterTestCase::format_ld()
 {
 #ifdef CAN_TEST
-    doTest(_T("ld"), _T("ld"));
+    doTest(wxT("ld"), wxT("ld"));
 #endif
     long l = 2147483647L;
-    CPPUNIT_ASSERT(wxString::Format(_T("%ld"), l) == _T("2147483647"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%ld"), l) == wxT("2147483647"));
 }
 
 void FormatConverterTestCase::format_s()
 {
 #ifdef CAN_TEST
-    doTest(_T("s"), _T("ls"));
+    doTest(wxT("s"), wxT("ls"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(_T("%s!"), _T("test")) == _T("test!"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%6s!"), _T("test")) == _T("  test!"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%-6s!"), _T("test")) == _T("test  !"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%.6s!"), _T("test")) == _T("test!"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%6.4s!"), _T("testing")) == _T("  test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%s!"), wxT("test")) == wxT("test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%6s!"), wxT("test")) == wxT("  test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%-6s!"), wxT("test")) == wxT("test  !"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%.6s!"), wxT("test")) == wxT("test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%6.4s!"), wxT("testing")) == wxT("  test!"));
 }
 
 void FormatConverterTestCase::format_hs()
 {
 #ifdef CAN_TEST
-    doTest(_T("hs"), _T("hs"));
+    doTest(wxT("hs"), wxT("hs"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%hs!")), "test") == _T("test!"));
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%6hs!")), "test") == _T("  test!"));
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%-6hs!")), "test") == _T("test  !"));
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%.6hs!")), "test") == _T("test!"));
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%6.4hs!")), "testing") == _T("  test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%hs!")), "test") == wxT("test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%6hs!")), "test") == wxT("  test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%-6hs!")), "test") == wxT("test  !"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%.6hs!")), "test") == wxT("test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%6.4hs!")), "testing") == wxT("  test!"));
 }
 
 void FormatConverterTestCase::format_ls()
 {
 #ifdef CAN_TEST
-    doTest(_T("ls"), _T("ls"));
+    doTest(wxT("ls"), wxT("ls"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(_T("%ls!"), L"test") == _T("test!"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%6ls!"), L"test") == _T("  test!"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%-6ls!"), L"test") == _T("test  !"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%.6ls!"), L"test") == _T("test!"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%6.4ls!"), L"testing") == _T("  test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%ls!"), L"test") == wxT("test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%6ls!"), L"test") == wxT("  test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%-6ls!"), L"test") == wxT("test  !"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%.6ls!"), L"test") == wxT("test!"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%6.4ls!"), L"testing") == wxT("  test!"));
 }
 
 void FormatConverterTestCase::format_c()
 {
 #ifdef CAN_TEST
-    doTest(_T("c"), _T("lc"));
+    doTest(wxT("c"), wxT("lc"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(_T("%c"), _T('x')) == _T("x"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%2c"), _T('x')) == _T(" x"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%-2c"), _T('x')) == _T("x "));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%c"), wxT('x')) == wxT("x"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%2c"), wxT('x')) == wxT(" x"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%-2c"), wxT('x')) == wxT("x "));
 }
 
 void FormatConverterTestCase::format_hc()
 {
 #ifdef CAN_TEST
-    doTest(_T("hc"), _T("hc"));
+    doTest(wxT("hc"), wxT("hc"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%hc")), 'x') == _T("x"));
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%2hc")), 'x') == _T(" x"));
-    CPPUNIT_ASSERT(wxString::Format(wxString(_T("%-2hc")), 'x') == _T("x "));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%hc")), 'x') == wxT("x"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%2hc")), 'x') == wxT(" x"));
+    CPPUNIT_ASSERT(wxString::Format(wxString(wxT("%-2hc")), 'x') == wxT("x "));
 }
 
 void FormatConverterTestCase::format_lc()
 {
 #ifdef CAN_TEST
-    doTest(_T("lc"), _T("lc"));
+    doTest(wxT("lc"), wxT("lc"));
 #endif
-    CPPUNIT_ASSERT(wxString::Format(_T("%lc"), L'x') == _T("x"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%2lc"), L'x') == _T(" x"));
-    CPPUNIT_ASSERT(wxString::Format(_T("%-2lc"), L'x') == _T("x "));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%lc"), L'x') == wxT("x"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%2lc"), L'x') == wxT(" x"));
+    CPPUNIT_ASSERT(wxString::Format(wxT("%-2lc"), L'x') == wxT("x "));
 }
 
 #ifdef CAN_TEST
 
-void FormatConverterTestCase::format_S()  { doTest(_T("S"),  _T("s"));  }
-void FormatConverterTestCase::format_hS() { doTest(_T("hS"), _T("s"));  }
-void FormatConverterTestCase::format_lS() { doTest(_T("lS"), _T("ls")); }
+void FormatConverterTestCase::format_S()  { doTest(wxT("S"),  wxT("s"));  }
+void FormatConverterTestCase::format_hS() { doTest(wxT("hS"), wxT("s"));  }
+void FormatConverterTestCase::format_lS() { doTest(wxT("lS"), wxT("ls")); }
 
-void FormatConverterTestCase::format_C()  { doTest(_T("C"),  _T("c"));  }
-void FormatConverterTestCase::format_hC() { doTest(_T("hC"), _T("c"));  }
-void FormatConverterTestCase::format_lC() { doTest(_T("lC"), _T("lc")); }
+void FormatConverterTestCase::format_C()  { doTest(wxT("C"),  wxT("c"));  }
+void FormatConverterTestCase::format_hC() { doTest(wxT("hC"), wxT("c"));  }
+void FormatConverterTestCase::format_lC() { doTest(wxT("lC"), wxT("lc")); }
 
 // It's possible that although a format converts correctly alone, it leaves
 // the converter in a bad state that will affect subsequent formats, so
@@ -229,15 +229,15 @@ void FormatConverterTestCase::testLonger
         const wxChar *input;
         const wxChar *expected;
     } formats[] = {
-        { _T("%d"),     _T("%d"),    },
-        { _T("%*hd"),   _T("%*hd")   },
-        { _T("%.4ld"),  _T("%.4ld")  },
-        { _T("%-.*s"),  _T("%-.*ls") },
-        { _T("%.*hs"),  _T("%.*hs"), },
-        { _T("%-.9ls"), _T("%-.9ls") },
-        { _T("%-*c"),   _T("%-*lc")  },
-        { _T("%3hc"),   _T("%3hc")   },
-        { _T("%-5lc"),  _T("%-5lc")  }
+        { wxT("%d"),     wxT("%d"),    },
+        { wxT("%*hd"),   wxT("%*hd")   },
+        { wxT("%.4ld"),  wxT("%.4ld")  },
+        { wxT("%-.*s"),  wxT("%-.*ls") },
+        { wxT("%.*hs"),  wxT("%.*hs"), },
+        { wxT("%-.9ls"), wxT("%-.9ls") },
+        { wxT("%-*c"),   wxT("%-*lc")  },
+        { wxT("%3hc"),   wxT("%3hc")   },
+        { wxT("%-5lc"),  wxT("%-5lc")  }
     };
     size_t i, j;
 
@@ -264,17 +264,17 @@ void FormatConverterTestCase::doTest(con
                                      const wxChar *expected)
 {
     static const wxChar *flag_width[] =
-        { _T(""), _T("*"), _T("10"), _T("-*"), _T("-10"), NULL };
+        { wxT(""), wxT("*"), wxT("10"), wxT("-*"), wxT("-10"), NULL };
     static const wxChar *precision[] =
-        { _T(""), _T(".*"), _T(".10"), NULL };
+        { wxT(""), wxT(".*"), wxT(".10"), NULL };
     static const wxChar *empty[] =
-        { _T(""), NULL };
+        { wxT(""), NULL };
 
     // no precision for %c or %C
-    const wxChar **precs = wxTolower(input[wxStrlen(input)-1]) == _T('c') ?
+    const wxChar **precs = wxTolower(input[wxStrlen(input)-1]) == wxT('c') ?
         empty : precision;
 
-    wxString fmt(_T("%"));
+    wxString fmt(wxT("%"));
 
     // try the test for a variety of combinations of flag, width and precision
     for (const wxChar **prec = precs; *prec; prec++)
@@ -287,9 +287,9 @@ void FormatConverterTestCase::check(cons
                                     const wxString& expected)
 {
     wxString result = wxConvertFormat(input);
-    wxString msg = _T("input: '") + input +
-                   _T("', result: '") + result +
-                   _T("', expected: '") + expected + _T("'");
+    wxString msg = wxT("input: '") + input +
+                   wxT("', result: '") + result +
+                   wxT("', expected: '") + expected + wxT("'");
     CPPUNIT_ASSERT_MESSAGE(string(msg.mb_str()), result == expected);
 }
 
--- tests/filename/filenametest.cpp-orig	2009-06-18 19:01:33.895294000 -0500
+++ tests/filename/filenametest.cpp	2009-06-18 19:01:39.793768000 -0500
@@ -50,55 +50,55 @@ static struct TestFileNameInfo
 } filenames[] =
 {
     // the empty string
-    { _T(""), _(""), _(""), _(""), _(""), false, wxPATH_UNIX }, 
-    { _T(""), _(""), _(""), _(""), _(""), false, wxPATH_DOS }, 
-    { _T(""), _(""), _(""), _(""), _(""), false, wxPATH_VMS }, 
+    { wxT(""), _(""), _(""), _(""), _(""), false, wxPATH_UNIX }, 
+    { wxT(""), _(""), _(""), _(""), _(""), false, wxPATH_DOS }, 
+    { wxT(""), _(""), _(""), _(""), _(""), false, wxPATH_VMS }, 
 
     // Unix file names
-    { _T("/usr/bin/ls"), _T(""), _T("/usr/bin"), _T("ls"), _T(""), true, wxPATH_UNIX },
-    { _T("/usr/bin/"), _T(""), _T("/usr/bin"), _T(""), _T(""), true, wxPATH_UNIX },
-    { _T("~/.zshrc"), _T(""), _T("~"), _T(".zshrc"), _T(""), true, wxPATH_UNIX },
-    { _T("../../foo"), _T(""), _T("../.."), _T("foo"), _T(""), false, wxPATH_UNIX },
-    { _T("foo.bar"), _T(""), _T(""), _T("foo"), _T("bar"), false, wxPATH_UNIX },
-    { _T("~/foo.bar"), _T(""), _T("~"), _T("foo"), _T("bar"), true, wxPATH_UNIX },
-    { _T("/foo"), _T(""), _T("/"), _T("foo"), _T(""), true, wxPATH_UNIX },
-    { _T("Mahogany-0.60/foo.bar"), _T(""), _T("Mahogany-0.60"), _T("foo"), _T("bar"), false, wxPATH_UNIX },
-    { _T("/tmp/wxwin.tar.bz"), _T(""), _T("/tmp"), _T("wxwin.tar"), _T("bz"), true, wxPATH_UNIX },
+    { wxT("/usr/bin/ls"), wxT(""), wxT("/usr/bin"), wxT("ls"), wxT(""), true, wxPATH_UNIX },
+    { wxT("/usr/bin/"), wxT(""), wxT("/usr/bin"), wxT(""), wxT(""), true, wxPATH_UNIX },
+    { wxT("~/.zshrc"), wxT(""), wxT("~"), wxT(".zshrc"), wxT(""), true, wxPATH_UNIX },
+    { wxT("../../foo"), wxT(""), wxT("../.."), wxT("foo"), wxT(""), false, wxPATH_UNIX },
+    { wxT("foo.bar"), wxT(""), wxT(""), wxT("foo"), wxT("bar"), false, wxPATH_UNIX },
+    { wxT("~/foo.bar"), wxT(""), wxT("~"), wxT("foo"), wxT("bar"), true, wxPATH_UNIX },
+    { wxT("/foo"), wxT(""), wxT("/"), wxT("foo"), wxT(""), true, wxPATH_UNIX },
+    { wxT("Mahogany-0.60/foo.bar"), wxT(""), wxT("Mahogany-0.60"), wxT("foo"), wxT("bar"), false, wxPATH_UNIX },
+    { wxT("/tmp/wxwin.tar.bz"), wxT(""), wxT("/tmp"), wxT("wxwin.tar"), wxT("bz"), true, wxPATH_UNIX },
 
     // Windows file names
-    { _T("foo.bar"), _T(""), _T(""), _T("foo"), _T("bar"), false, wxPATH_DOS },
-    { _T("\\foo.bar"), _T(""), _T("\\"), _T("foo"), _T("bar"), false, wxPATH_DOS },
-    { _T("c:foo.bar"), _T("c"), _T(""), _T("foo"), _T("bar"), false, wxPATH_DOS },
-    { _T("c:\\foo.bar"), _T("c"), _T("\\"), _T("foo"), _T("bar"), true, wxPATH_DOS },
-    { _T("c:\\Windows\\command.com"), _T("c"), _T("\\Windows"), _T("command"), _T("com"), true, wxPATH_DOS },
+    { wxT("foo.bar"), wxT(""), wxT(""), wxT("foo"), wxT("bar"), false, wxPATH_DOS },
+    { wxT("\\foo.bar"), wxT(""), wxT("\\"), wxT("foo"), wxT("bar"), false, wxPATH_DOS },
+    { wxT("c:foo.bar"), wxT("c"), wxT(""), wxT("foo"), wxT("bar"), false, wxPATH_DOS },
+    { wxT("c:\\foo.bar"), wxT("c"), wxT("\\"), wxT("foo"), wxT("bar"), true, wxPATH_DOS },
+    { wxT("c:\\Windows\\command.com"), wxT("c"), wxT("\\Windows"), wxT("command"), wxT("com"), true, wxPATH_DOS },
 
     // NB: when using the wxFileName::GetLongPath() function on these two strings,
     //     the program will hang various seconds. All those time is taken by the
     //     call to the win32 API GetLongPathName()...
-    { _T("\\\\server\\foo.bar"), _T("server"), _T("\\"), _T("foo"), _T("bar"), true, wxPATH_DOS },
-    { _T("\\\\server\\dir\\foo.bar"), _T("server"), _T("\\dir"), _T("foo"), _T("bar"), true, wxPATH_DOS },
+    { wxT("\\\\server\\foo.bar"), wxT("server"), wxT("\\"), wxT("foo"), wxT("bar"), true, wxPATH_DOS },
+    { wxT("\\\\server\\dir\\foo.bar"), wxT("server"), wxT("\\dir"), wxT("foo"), wxT("bar"), true, wxPATH_DOS },
 
     // consecutive [back]slashes should be treated as single occurrences of
     // them and not interpreted as share names if there is a volume name
-    { _T("c:\\aaa\\bbb\\ccc"), _T("c"), _T("\\aaa\\bbb"), _T("ccc"), _T(""), true, wxPATH_DOS },
-    { _T("c:\\\\aaa\\bbb\\ccc"), _T("c"), _T("\\\\aaa\\bbb"), _T("ccc"), _T(""), true, wxPATH_DOS },
+    { wxT("c:\\aaa\\bbb\\ccc"), wxT("c"), wxT("\\aaa\\bbb"), wxT("ccc"), wxT(""), true, wxPATH_DOS },
+    { wxT("c:\\\\aaa\\bbb\\ccc"), wxT("c"), wxT("\\\\aaa\\bbb"), wxT("ccc"), wxT(""), true, wxPATH_DOS },
 
     // wxFileName support for Mac file names is broken currently
 #if 0
     // Mac file names
-    { _T("Volume:Dir:File"), _T("Volume"), _T("Dir"), _T("File"), _T(""), true, wxPATH_MAC },
-    { _T("Volume:Dir:Subdir:File"), _T("Volume"), _T("Dir:Subdir"), _T("File"), _T(""), true, wxPATH_MAC },
-    { _T("Volume:"), _T("Volume"), _T(""), _T(""), _T(""), true, wxPATH_MAC },
-    { _T(":Dir:File"), _T(""), _T("Dir"), _T("File"), _T(""), false, wxPATH_MAC },
-    { _T(":File.Ext"), _T(""), _T(""), _T("File"), _T(".Ext"), false, wxPATH_MAC },
-    { _T("File.Ext"), _T(""), _T(""), _T("File"), _T(".Ext"), false, wxPATH_MAC },
+    { wxT("Volume:Dir:File"), wxT("Volume"), wxT("Dir"), wxT("File"), wxT(""), true, wxPATH_MAC },
+    { wxT("Volume:Dir:Subdir:File"), wxT("Volume"), wxT("Dir:Subdir"), wxT("File"), wxT(""), true, wxPATH_MAC },
+    { wxT("Volume:"), wxT("Volume"), wxT(""), wxT(""), wxT(""), true, wxPATH_MAC },
+    { wxT(":Dir:File"), wxT(""), wxT("Dir"), wxT("File"), wxT(""), false, wxPATH_MAC },
+    { wxT(":File.Ext"), wxT(""), wxT(""), wxT("File"), wxT(".Ext"), false, wxPATH_MAC },
+    { wxT("File.Ext"), wxT(""), wxT(""), wxT("File"), wxT(".Ext"), false, wxPATH_MAC },
 #endif // 0
 
     // VMS file names
     // NB: on Windows they have the same effect of the \\server\\ strings
     //     (see the note above)
-    { _T("device:[dir1.dir2.dir3]file.txt"), _T("device"), _T("dir1.dir2.dir3"), _T("file"), _T("txt"), true, wxPATH_VMS },
-    { _T("file.txt"), _T(""), _T(""), _T("file"), _T("txt"), false, wxPATH_VMS },
+    { wxT("device:[dir1.dir2.dir3]file.txt"), wxT("device"), wxT("dir1.dir2.dir3"), wxT("file"), wxT("txt"), true, wxPATH_VMS },
+    { wxT("file.txt"), wxT(""), wxT(""), wxT("file"), wxT("txt"), false, wxPATH_VMS },
 };
 
 // ----------------------------------------------------------------------------
@@ -158,13 +158,13 @@ void FileNameTestCase::TestConstruction(
         {
             // copy the backslashes at beginning unchanged
             const wxChar *p = fni.fullname;
-            while ( *p == _T('\\') )
+            while ( *p == wxT('\\') )
                 fullnameOrig += *p++;
 
             // replace consecutive slashes with single ones in the rest
-            for ( wxChar chPrev = _T('\0'); *p; p++ )
+            for ( wxChar chPrev = wxT('\0'); *p; p++ )
             {
-                if ( *p == _T('\\') && chPrev == _T('\\') )
+                if ( *p == wxT('\\') && chPrev == wxT('\\') )
                     continue;
 
                 chPrev = *p;
@@ -176,7 +176,7 @@ void FileNameTestCase::TestConstruction(
             fullnameOrig = fni.fullname;
         }
 
-        fullnameOrig.Replace(_T("//"), _T("/"));
+        fullnameOrig.Replace(wxT("//"), wxT("/"));
 
 
         wxString fullname = fn.GetFullPath(fni.format);
@@ -187,8 +187,8 @@ void FileNameTestCase::TestConstruction(
         // if the test is run from root directory or its direct subdirectory
         CPPUNIT_ASSERT_MESSAGE
         (
-            (const char *)wxString::Format(_T("Normalize(%s) failed"), fni.fullname).mb_str(),
-            fn.Normalize(wxPATH_NORM_ALL, _T("/foo/bar/baz"), fni.format)
+            (const char *)wxString::Format(wxT("Normalize(%s) failed"), fni.fullname).mb_str(),
+            fn.Normalize(wxPATH_NORM_ALL, wxT("/foo/bar/baz"), fni.format)
         );
 
         if ( *fni.volume && *fni.path )
@@ -250,19 +250,19 @@ void FileNameTestCase::TestSplit()
     }
 
     // special case of empty extension
-    wxFileName fn(_T("foo."));
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("foo.")), fn.GetFullPath() );
+    wxFileName fn(wxT("foo."));
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("foo.")), fn.GetFullPath() );
 }
 
 void FileNameTestCase::TestSetPath()
 {
-    wxFileName fn(_T("d:\\test\\foo.bar"), wxPATH_DOS);
-    fn.SetPath(_T("c:\\temp"), wxPATH_DOS);
-    CPPUNIT_ASSERT( fn.SameAs(wxFileName(_T("c:\\temp\\foo.bar"), wxPATH_DOS)) );
-
-    fn = wxFileName(_T("/usr/bin/ls"), wxPATH_UNIX);
-    fn.SetPath(_T("/usr/local/bin"), wxPATH_UNIX);
-    CPPUNIT_ASSERT( fn.SameAs(wxFileName(_T("/usr/local/bin/ls"), wxPATH_UNIX)) );
+    wxFileName fn(wxT("d:\\test\\foo.bar"), wxPATH_DOS);
+    fn.SetPath(wxT("c:\\temp"), wxPATH_DOS);
+    CPPUNIT_ASSERT( fn.SameAs(wxFileName(wxT("c:\\temp\\foo.bar"), wxPATH_DOS)) );
+
+    fn = wxFileName(wxT("/usr/bin/ls"), wxPATH_UNIX);
+    fn.SetPath(wxT("/usr/local/bin"), wxPATH_UNIX);
+    CPPUNIT_ASSERT( fn.SameAs(wxFileName(wxT("/usr/local/bin/ls"), wxPATH_UNIX)) );
 }
 
 void FileNameTestCase::TestNormalize()
@@ -321,7 +321,7 @@ void FileNameTestCase::TestNormalize()
     };
 
     // set the env var ABCDEF
-    wxSetEnv(_T("ABCDEF"), _T("abcdef"));
+    wxSetEnv(wxT("ABCDEF"), wxT("abcdef"));
 
     for ( size_t i = 0; i < WXSIZEOF(tests); i++ )
     {
@@ -330,18 +330,18 @@ void FileNameTestCase::TestNormalize()
         // be sure this normalization does not fail
         CPPUNIT_ASSERT_MESSAGE
         (
-            (const char *)wxString::Format(_T("Normalize(%s) failed"), tests[i].original).mb_str(),
+            (const char *)wxString::Format(wxT("Normalize(%s) failed"), tests[i].original).mb_str(),
             fn.Normalize(tests[i].flags, cwd, wxPATH_UNIX)
         );
 
         // compare result with expected string
         wxString expected(tests[i].expected);
-        expected.Replace(_T("HOME/"), home);
-        expected.Replace(_T("CWD/"), cwd);
+        expected.Replace(wxT("HOME/"), home);
+        expected.Replace(wxT("CWD/"), cwd);
         CPPUNIT_ASSERT_EQUAL_MESSAGE
         (
             (const char *)
-            wxString::Format(_T("Test #%lu (\"%s\") failed"),
+            wxString::Format(wxT("Test #%lu (\"%s\") failed"),
                              (unsigned long)i, tests[i].original).mb_str(),
             expected, fn.GetFullPath(wxPATH_UNIX)
         );
@@ -357,20 +357,20 @@ wxString wxTestStripExtension(wxString s
 void FileNameTestCase::TestStrip()
 {
     //test a crash
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("")), wxTestStripExtension(_T("")) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("")), wxTestStripExtension(wxT("")) );
 
     //others
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("")), wxTestStripExtension(_T(".")) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("")), wxTestStripExtension(_T(".wav")) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("good")), wxTestStripExtension(_T("good.wav")) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("good.wav")), wxTestStripExtension(_T("good.wav.wav")) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("")), wxTestStripExtension(wxT(".")) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("")), wxTestStripExtension(wxT(".wav")) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("good")), wxTestStripExtension(wxT("good.wav")) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("good.wav")), wxTestStripExtension(wxT("good.wav.wav")) );
 }
 
 #ifdef __WINDOWS__
 
 void FileNameTestCase::TestShortLongPath()
 {
-    wxFileName fn(_T("C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe"));
+    wxFileName fn(wxT("C:\\Program Files\\Windows NT\\Accessories\\wordpad.exe"));
 
     // incredibly enough, GetLongPath() used to return different results during
     // the first and subsequent runs, test for this
--- tests/strings/unicode.cpp-orig	2009-06-18 18:59:18.612983000 -0500
+++ tests/strings/unicode.cpp	2009-06-18 18:59:25.101434000 -0500
@@ -239,7 +239,7 @@ void UnicodeTestCase::ConversionUTF7()
         { "a+", NULL },
     };
 
-    wxCSConv conv(_T("utf-7"));
+    wxCSConv conv(wxT("utf-7"));
     for ( size_t n = 0; n < WXSIZEOF(utf7data); n++ )
     {
         const StringConversionData& d = utf7data[n];
@@ -269,7 +269,7 @@ void UnicodeTestCase::ConversionUTF8()
         { "\xc2", NULL },
     };
 
-    wxCSConv conv(_T("utf-8"));
+    wxCSConv conv(wxT("utf-8"));
     for ( size_t n = 0; n < WXSIZEOF(utf8data); n++ )
     {
         const StringConversionData& d = utf8data[n];
@@ -333,11 +333,11 @@ void UnicodeTestCase::ConversionUTF32()
 void UnicodeTestCase::IsConvOk()
 {
     CPPUNIT_ASSERT( wxCSConv(wxFONTENCODING_SYSTEM).IsOk() );
-    CPPUNIT_ASSERT( wxCSConv(_T("UTF-8")).IsOk() );
-    CPPUNIT_ASSERT( !wxCSConv(_T("NoSuchConversion")).IsOk() );
+    CPPUNIT_ASSERT( wxCSConv(wxT("UTF-8")).IsOk() );
+    CPPUNIT_ASSERT( !wxCSConv(wxT("NoSuchConversion")).IsOk() );
 
 #ifdef __WINDOWS__
-    CPPUNIT_ASSERT( wxCSConv(_T("WINDOWS-437")).IsOk() );
+    CPPUNIT_ASSERT( wxCSConv(wxT("WINDOWS-437")).IsOk() );
 #endif
 }
 
--- tests/strings/tokenizer.cpp-orig	2009-06-18 19:00:10.467996000 -0500
+++ tests/strings/tokenizer.cpp	2009-06-18 19:00:15.747626000 -0500
@@ -76,54 +76,54 @@ static const struct TokenizerTestData
 }
 gs_testData[] =
 {
-    { _T(""),                   _T(" "),              wxTOKEN_DEFAULT,       0 },
-    { _T(""),                   _T(" "),              wxTOKEN_RET_EMPTY,     0 },
-    { _T(""),                   _T(" "),              wxTOKEN_RET_EMPTY_ALL, 0 },
-    { _T(""),                   _T(" "),              wxTOKEN_RET_DELIMS,    0 },
-    { _T(":"),                  _T(":"),              wxTOKEN_RET_EMPTY,     1 },
-    { _T(":"),                  _T(":"),              wxTOKEN_RET_DELIMS,    1 },
-    { _T(":"),                  _T(":"),              wxTOKEN_RET_EMPTY_ALL, 2 },
-    { _T("::"),                 _T(":"),              wxTOKEN_RET_EMPTY,     1 },
-    { _T("::"),                 _T(":"),              wxTOKEN_RET_DELIMS,    1 },
-    { _T("::"),                 _T(":"),              wxTOKEN_RET_EMPTY_ALL, 3 },
-
-    { _T("Hello, world"),       _T(" "),              wxTOKEN_DEFAULT,       2 },
-    { _T("Hello,   world  "),   _T(" "),              wxTOKEN_DEFAULT,       2 },
-    { _T("Hello, world"),       _T(","),              wxTOKEN_DEFAULT,       2 },
-    { _T("Hello, world!"),      _T(",!"),             wxTOKEN_DEFAULT,       2 },
-    { _T("Hello,, world!"),     _T(",!"),             wxTOKEN_DEFAULT,       3 },
-    { _T("Hello,, world!"),     _T(",!"),             wxTOKEN_STRTOK,        2 },
-    { _T("Hello, world!"),      _T(",!"),             wxTOKEN_RET_EMPTY_ALL, 3 },
-
-    { _T("username:password:uid:gid:gecos:home:shell"),
-                                _T(":"),              wxTOKEN_DEFAULT,       7 },
-
-    { _T("1:2::3:"),            _T(":"),              wxTOKEN_DEFAULT,       4 },
-    { _T("1:2::3:"),            _T(":"),              wxTOKEN_RET_EMPTY,     4 },
-    { _T("1:2::3:"),            _T(":"),              wxTOKEN_RET_EMPTY_ALL, 5 },
-    { _T("1:2::3:"),            _T(":"),              wxTOKEN_RET_DELIMS,    4 },
-    { _T("1:2::3:"),            _T(":"),              wxTOKEN_STRTOK,        3 },
-
-    { _T("1:2::3::"),           _T(":"),              wxTOKEN_DEFAULT,       4 },
-    { _T("1:2::3::"),           _T(":"),              wxTOKEN_RET_EMPTY,     4 },
-    { _T("1:2::3::"),           _T(":"),              wxTOKEN_RET_EMPTY_ALL, 6 },
-    { _T("1:2::3::"),           _T(":"),              wxTOKEN_RET_DELIMS,    4 },
-    { _T("1:2::3::"),           _T(":"),              wxTOKEN_STRTOK,        3 },
-
-    { _T("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_DEFAULT,       4 },
-    { _T("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_STRTOK,        4 },
-    { _T("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_RET_EMPTY,     6 },
-    { _T("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_RET_EMPTY_ALL, 9 },
+    { wxT(""),                   wxT(" "),              wxTOKEN_DEFAULT,       0 },
+    { wxT(""),                   wxT(" "),              wxTOKEN_RET_EMPTY,     0 },
+    { wxT(""),                   wxT(" "),              wxTOKEN_RET_EMPTY_ALL, 0 },
+    { wxT(""),                   wxT(" "),              wxTOKEN_RET_DELIMS,    0 },
+    { wxT(":"),                  wxT(":"),              wxTOKEN_RET_EMPTY,     1 },
+    { wxT(":"),                  wxT(":"),              wxTOKEN_RET_DELIMS,    1 },
+    { wxT(":"),                  wxT(":"),              wxTOKEN_RET_EMPTY_ALL, 2 },
+    { wxT("::"),                 wxT(":"),              wxTOKEN_RET_EMPTY,     1 },
+    { wxT("::"),                 wxT(":"),              wxTOKEN_RET_DELIMS,    1 },
+    { wxT("::"),                 wxT(":"),              wxTOKEN_RET_EMPTY_ALL, 3 },
+
+    { wxT("Hello, world"),       wxT(" "),              wxTOKEN_DEFAULT,       2 },
+    { wxT("Hello,   world  "),   wxT(" "),              wxTOKEN_DEFAULT,       2 },
+    { wxT("Hello, world"),       wxT(","),              wxTOKEN_DEFAULT,       2 },
+    { wxT("Hello, world!"),      wxT(",!"),             wxTOKEN_DEFAULT,       2 },
+    { wxT("Hello,, world!"),     wxT(",!"),             wxTOKEN_DEFAULT,       3 },
+    { wxT("Hello,, world!"),     wxT(",!"),             wxTOKEN_STRTOK,        2 },
+    { wxT("Hello, world!"),      wxT(",!"),             wxTOKEN_RET_EMPTY_ALL, 3 },
+
+    { wxT("username:password:uid:gid:gecos:home:shell"),
+                                wxT(":"),              wxTOKEN_DEFAULT,       7 },
+
+    { wxT("1:2::3:"),            wxT(":"),              wxTOKEN_DEFAULT,       4 },
+    { wxT("1:2::3:"),            wxT(":"),              wxTOKEN_RET_EMPTY,     4 },
+    { wxT("1:2::3:"),            wxT(":"),              wxTOKEN_RET_EMPTY_ALL, 5 },
+    { wxT("1:2::3:"),            wxT(":"),              wxTOKEN_RET_DELIMS,    4 },
+    { wxT("1:2::3:"),            wxT(":"),              wxTOKEN_STRTOK,        3 },
+
+    { wxT("1:2::3::"),           wxT(":"),              wxTOKEN_DEFAULT,       4 },
+    { wxT("1:2::3::"),           wxT(":"),              wxTOKEN_RET_EMPTY,     4 },
+    { wxT("1:2::3::"),           wxT(":"),              wxTOKEN_RET_EMPTY_ALL, 6 },
+    { wxT("1:2::3::"),           wxT(":"),              wxTOKEN_RET_DELIMS,    4 },
+    { wxT("1:2::3::"),           wxT(":"),              wxTOKEN_STRTOK,        3 },
+
+    { wxT("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_DEFAULT,       4 },
+    { wxT("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_STRTOK,        4 },
+    { wxT("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_RET_EMPTY,     6 },
+    { wxT("1 \t3\t4  6   "),     wxDEFAULT_DELIMITERS, wxTOKEN_RET_EMPTY_ALL, 9 },
 
-    { _T("01/02/99"),           _T("/-"),             wxTOKEN_DEFAULT,       3 },
-    { _T("01-02/99"),           _T("/-"),             wxTOKEN_RET_DELIMS,    3 },
+    { wxT("01/02/99"),           wxT("/-"),             wxTOKEN_DEFAULT,       3 },
+    { wxT("01-02/99"),           wxT("/-"),             wxTOKEN_RET_DELIMS,    3 },
 };
 
 // helper function returning the string showing the index for which the test
 // fails in the diagnostic message
 static std::string Nth(size_t n)
 {
-    return std::string(wxString::Format(_T("for loop index %lu"),
+    return std::string(wxString::Format(wxT("for loop index %lu"),
                                         (unsigned long)n).mb_str());
 }
 
@@ -184,9 +184,9 @@ DoTestGetPosition(const wxChar *s, const
 
 void TokenizerTestCase::GetPosition()
 {
-    DoTestGetPosition(_T("foo"), _T("_"), 3, 0);
-    DoTestGetPosition(_T("foo_bar"), _T("_"), 4, 7, 0);
-    DoTestGetPosition(_T("foo_bar_"), _T("_"), 4, 8, 0);
+    DoTestGetPosition(wxT("foo"), wxT("_"), 3, 0);
+    DoTestGetPosition(wxT("foo_bar"), wxT("_"), 4, 7, 0);
+    DoTestGetPosition(wxT("foo_bar_"), wxT("_"), 4, 8, 0);
 }
 
 // helper for GetString(): the parameters are the same as for DoTestGetPosition
@@ -221,26 +221,26 @@ DoTestGetString(const wxChar *s, const w
 
 void TokenizerTestCase::GetString()
 {
-    DoTestGetString(_T("foo"), _T("_"), 3, 0);
-    DoTestGetString(_T("foo_bar"), _T("_"), 4, 7, 0);
-    DoTestGetString(_T("foo_bar_"), _T("_"), 4, 8, 0);
+    DoTestGetString(wxT("foo"), wxT("_"), 3, 0);
+    DoTestGetString(wxT("foo_bar"), wxT("_"), 4, 7, 0);
+    DoTestGetString(wxT("foo_bar_"), wxT("_"), 4, 8, 0);
 }
 
 void TokenizerTestCase::LastDelimiter()
 {
-    wxStringTokenizer tkz(_T("a+-b=c"), _T("+-="));
+    wxStringTokenizer tkz(wxT("a+-b=c"), wxT("+-="));
 
     tkz.GetNextToken();
-    CPPUNIT_ASSERT_EQUAL( _T('+'), tkz.GetLastDelimiter() );
+    CPPUNIT_ASSERT_EQUAL( wxT('+'), tkz.GetLastDelimiter() );
 
     tkz.GetNextToken();
-    CPPUNIT_ASSERT_EQUAL( _T('-'), tkz.GetLastDelimiter() );
+    CPPUNIT_ASSERT_EQUAL( wxT('-'), tkz.GetLastDelimiter() );
 
     tkz.GetNextToken();
-    CPPUNIT_ASSERT_EQUAL( _T('='), tkz.GetLastDelimiter() );
+    CPPUNIT_ASSERT_EQUAL( wxT('='), tkz.GetLastDelimiter() );
 
     tkz.GetNextToken();
-    CPPUNIT_ASSERT_EQUAL( _T('\0'), tkz.GetLastDelimiter() );
+    CPPUNIT_ASSERT_EQUAL( wxT('\0'), tkz.GetLastDelimiter() );
 }
 
 void TokenizerTestCase::StrtokCompat()
--- tests/strings/stdstrings.cpp-orig	2009-06-18 19:00:23.855708000 -0500
+++ tests/strings/stdstrings.cpp	2009-06-18 19:00:31.143673000 -0500
@@ -78,82 +78,82 @@ StdStringTestCase::StdStringTestCase()
 
 void StdStringTestCase::StdConstructors()
 {
-    wxString s1(_T("abcdefgh")),
-             s2(_T("abcdefghijklm"), 8),
-             s3(_T("abcdefghijklm")),
-             s4(8, _T('a'));
+    wxString s1(wxT("abcdefgh")),
+             s2(wxT("abcdefghijklm"), 8),
+             s3(wxT("abcdefghijklm")),
+             s4(8, wxT('a'));
     wxString s5(s1),
              s6(s3, 0, 8),
              s7(s3.begin(), s3.begin() + 8);
     wxString s8(s1, 4, 8);
 
-    CPPUNIT_ASSERT( s1 == _T("abcdefgh") );
+    CPPUNIT_ASSERT( s1 == wxT("abcdefgh") );
     CPPUNIT_ASSERT( s2 == s1 );
-    CPPUNIT_ASSERT( s4 == _T("aaaaaaaa") );
-    CPPUNIT_ASSERT( s5 == _T("abcdefgh") );
+    CPPUNIT_ASSERT( s4 == wxT("aaaaaaaa") );
+    CPPUNIT_ASSERT( s5 == wxT("abcdefgh") );
     CPPUNIT_ASSERT( s6 == s1 );
     CPPUNIT_ASSERT( s7 == s1 );
-    CPPUNIT_ASSERT( s8 == _T("efgh") );
+    CPPUNIT_ASSERT( s8 == wxT("efgh") );
 }
 
 void StdStringTestCase::StdAppend()
 {
     wxString s1, s2, s3, s4, s5, s6, s7, s8;
 
-    s1 = s2 = s3 = s4 = s5 = s6 = _T("abc");
-    s1.append(_T("def"));
-    s2.append(_T("defgh"), 3);
-    s3.append(wxString(_T("abcdef")), 3, 6);
+    s1 = s2 = s3 = s4 = s5 = s6 = wxT("abc");
+    s1.append(wxT("def"));
+    s2.append(wxT("defgh"), 3);
+    s3.append(wxString(wxT("abcdef")), 3, 6);
     s4.append(s1);
-    s5.append(3, _T('a'));
+    s5.append(3, wxT('a'));
     s6.append(s1.begin() + 3, s1.end());
 
-    CPPUNIT_ASSERT( s1 == _T("abcdef") );
-    CPPUNIT_ASSERT( s2 == _T("abcdef") );
-    CPPUNIT_ASSERT( s3 == _T("abcdef") );
-    CPPUNIT_ASSERT( s4 == _T("abcabcdef") );
-    CPPUNIT_ASSERT( s5 == _T("abcaaa") );
-    CPPUNIT_ASSERT( s6 == _T("abcdef") );
+    CPPUNIT_ASSERT( s1 == wxT("abcdef") );
+    CPPUNIT_ASSERT( s2 == wxT("abcdef") );
+    CPPUNIT_ASSERT( s3 == wxT("abcdef") );
+    CPPUNIT_ASSERT( s4 == wxT("abcabcdef") );
+    CPPUNIT_ASSERT( s5 == wxT("abcaaa") );
+    CPPUNIT_ASSERT( s6 == wxT("abcdef") );
 
-    s7 = s8 = wxString(_T("null\0time"), 9);
+    s7 = s8 = wxString(wxT("null\0time"), 9);
 
-    s7.append(_T("def"));
-    s8.append(_T("defgh"), 3);
+    s7.append(wxT("def"));
+    s8.append(wxT("defgh"), 3);
 
-    CPPUNIT_ASSERT( s7 == wxString(_T("null\0timedef"), 12) );
-    CPPUNIT_ASSERT( s8 == wxString(_T("null\0timedef"), 12) );
+    CPPUNIT_ASSERT( s7 == wxString(wxT("null\0timedef"), 12) );
+    CPPUNIT_ASSERT( s8 == wxString(wxT("null\0timedef"), 12) );
 }
 
 void StdStringTestCase::StdAssign()
 {
     wxString s1, s2, s3, s4, s5, s6, s7, s8;
 
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("abc");
-    s1.assign(_T("def"));
-    s2.assign(_T("defgh"), 3);
-    s3.assign(wxString(_T("abcdef")), 3, 6);
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = wxT("abc");
+    s1.assign(wxT("def"));
+    s2.assign(wxT("defgh"), 3);
+    s3.assign(wxString(wxT("abcdef")), 3, 6);
     s4.assign(s1);
-    s5.assign(3, _T('a'));
+    s5.assign(3, wxT('a'));
     s6.assign(s1.begin() + 1, s1.end());
 
-    CPPUNIT_ASSERT( s1 == _T("def") );
-    CPPUNIT_ASSERT( s2 == _T("def") );
-    CPPUNIT_ASSERT( s3 == _T("def") );
-    CPPUNIT_ASSERT( s4 == _T("def") );
-    CPPUNIT_ASSERT( s5 == _T("aaa") );
-    CPPUNIT_ASSERT( s6 == _T("ef") );
+    CPPUNIT_ASSERT( s1 == wxT("def") );
+    CPPUNIT_ASSERT( s2 == wxT("def") );
+    CPPUNIT_ASSERT( s3 == wxT("def") );
+    CPPUNIT_ASSERT( s4 == wxT("def") );
+    CPPUNIT_ASSERT( s5 == wxT("aaa") );
+    CPPUNIT_ASSERT( s6 == wxT("ef") );
 }
 
 void StdStringTestCase::StdCompare()
 {
     wxString s1, s2, s3, s4, s5, s6, s7, s8;
 
-    s1 = _T("abcdefgh");
-    s2 = _T("abcdefgh");
-    s3 = _T("abc");
-    s4 = _T("abcdefghi");
-    s5 = _T("aaa");
-    s6 = _T("zzz");
+    s1 = wxT("abcdefgh");
+    s2 = wxT("abcdefgh");
+    s3 = wxT("abc");
+    s4 = wxT("abcdefghi");
+    s5 = wxT("aaa");
+    s6 = wxT("zzz");
 
     CPPUNIT_ASSERT( s1.compare(s2) == 0 );
     CPPUNIT_ASSERT( s1.compare(s3) > 0 );
@@ -161,22 +161,22 @@ void StdStringTestCase::StdCompare()
     CPPUNIT_ASSERT( s1.compare(s5) > 0 );
     CPPUNIT_ASSERT( s1.compare(s6) < 0 );
     CPPUNIT_ASSERT( s1.compare(1, 12, s1) > 0);
-    CPPUNIT_ASSERT( s1.compare(_T("abcdefgh")) == 0);
-    CPPUNIT_ASSERT( s1.compare(1, 7, _T("bcdefgh")) == 0);
-    CPPUNIT_ASSERT( s1.compare(1, 7, _T("bcdefgh"), 7) == 0);
+    CPPUNIT_ASSERT( s1.compare(wxT("abcdefgh")) == 0);
+    CPPUNIT_ASSERT( s1.compare(1, 7, wxT("bcdefgh")) == 0);
+    CPPUNIT_ASSERT( s1.compare(1, 7, wxT("bcdefgh"), 7) == 0);
 }
 
 void StdStringTestCase::StdErase()
 {
     wxString s1, s2, s3, s4, s5, s6, s7;
 
-    s1 = _T("abcdefgh");
-    s2 = _T("abcdefgh");
-    s3 = _T("abc");
-    s4 = _T("abcdefghi");
-    s5 = _T("aaa");
-    s6 = _T("zzz");
-    s7 = _T("zabcdefg");
+    s1 = wxT("abcdefgh");
+    s2 = wxT("abcdefgh");
+    s3 = wxT("abc");
+    s4 = wxT("abcdefghi");
+    s5 = wxT("aaa");
+    s6 = wxT("zzz");
+    s7 = wxT("zabcdefg");
 
     s1.erase(1, 1);
     s2.erase(4, 12);
@@ -184,13 +184,13 @@ void StdStringTestCase::StdErase()
     wxString::iterator it2 = s4.erase(s4.begin() + 4, s4.begin() + 6);
     wxString::iterator it3 = s7.erase(s7.begin() + 4, s7.begin() + 8);
 
-    CPPUNIT_ASSERT( s1 == _T("acdefgh") );
-    CPPUNIT_ASSERT( s2 == _T("abcd") );
-    CPPUNIT_ASSERT( s3 == _T("ac") );
-    CPPUNIT_ASSERT( s4 == _T("abcdghi") );
-    CPPUNIT_ASSERT( s7 == _T("zabc") );
-    CPPUNIT_ASSERT( *it == _T('c') );
-    CPPUNIT_ASSERT( *it2 == _T('g') );
+    CPPUNIT_ASSERT( s1 == wxT("acdefgh") );
+    CPPUNIT_ASSERT( s2 == wxT("abcd") );
+    CPPUNIT_ASSERT( s3 == wxT("ac") );
+    CPPUNIT_ASSERT( s4 == wxT("abcdghi") );
+    CPPUNIT_ASSERT( s7 == wxT("zabc") );
+    CPPUNIT_ASSERT( *it == wxT('c') );
+    CPPUNIT_ASSERT( *it2 == wxT('g') );
     CPPUNIT_ASSERT( it3 == s7.end() );
 }
 
@@ -198,20 +198,20 @@ void StdStringTestCase::StdFind()
 {
     //                0         1         2
     //                01234567890123456789012345
-    wxString s1 = _T("abcdefgABCDEFGabcABCabcABC");
-    wxString s2 = _T("gAB");
+    wxString s1 = wxT("abcdefgABCDEFGabcABCabcABC");
+    wxString s2 = wxT("gAB");
 
-    CPPUNIT_ASSERT( s1.find(_T('A')) == 7u );
-    CPPUNIT_ASSERT( s1.find(_T('A'), 7) == 7u );
-    CPPUNIT_ASSERT( s1.find(_T('Z')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find(_T('C'), 22) == 25u );
-
-    CPPUNIT_ASSERT( s1.find(_T("gAB")) == 6u );
-    CPPUNIT_ASSERT( s1.find(_T("gAB"), 7) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find(_T("gAB"), 6) == 6u );
+    CPPUNIT_ASSERT( s1.find(wxT('A')) == 7u );
+    CPPUNIT_ASSERT( s1.find(wxT('A'), 7) == 7u );
+    CPPUNIT_ASSERT( s1.find(wxT('Z')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find(wxT('C'), 22) == 25u );
+
+    CPPUNIT_ASSERT( s1.find(wxT("gAB")) == 6u );
+    CPPUNIT_ASSERT( s1.find(wxT("gAB"), 7) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find(wxT("gAB"), 6) == 6u );
 
-    CPPUNIT_ASSERT( s1.find(_T("gABZZZ"), 2, 3) == 6u );
-    CPPUNIT_ASSERT( s1.find(_T("gABZZZ"), 7, 3) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find(wxT("gABZZZ"), 2, 3) == 6u );
+    CPPUNIT_ASSERT( s1.find(wxT("gABZZZ"), 7, 3) == wxString::npos );
 
     CPPUNIT_ASSERT( s1.find(s2) == 6u );
     CPPUNIT_ASSERT( s1.find(s2, 7) == wxString::npos );
@@ -219,26 +219,26 @@ void StdStringTestCase::StdFind()
 
     //                   0          1          2
     //                   0123456 78901234567 8901234567
-    //wxString _s1 = _T("abcdefg\0ABCDEFGabc\0ABCabcABC");
-    //wxString _s2 = _T("g\0AB");
-    wxString _s1 = _T("abcdefgABCDEFGabcABCabcABC");
-    wxString _s2 = _T("gAB");
+    //wxString _s1 = wxT("abcdefg\0ABCDEFGabc\0ABCabcABC");
+    //wxString _s2 = wxT("g\0AB");
+    wxString _s1 = wxT("abcdefgABCDEFGabcABCabcABC");
+    wxString _s2 = wxT("gAB");
 
     _s1.insert(7, 1, '\0');
     _s1.insert(18, 1, '\0');
     _s2.insert(1, 1, '\0');
 
-    CPPUNIT_ASSERT( _s1.find(_T('A')) == 8u );
-    CPPUNIT_ASSERT( _s1.find(_T('A'), 8) == 8u );
-    CPPUNIT_ASSERT( _s1.find(_T('Z')) == wxString::npos );
-    CPPUNIT_ASSERT( _s1.find(_T('C'), 22) == 27u );
-
-    CPPUNIT_ASSERT( _s1.find(_T("AB")) == 8u );
-    CPPUNIT_ASSERT( _s1.find(_T("AB"), 26) == wxString::npos );
-    CPPUNIT_ASSERT( _s1.find(_T("AB"), 23) == 25u );
+    CPPUNIT_ASSERT( _s1.find(wxT('A')) == 8u );
+    CPPUNIT_ASSERT( _s1.find(wxT('A'), 8) == 8u );
+    CPPUNIT_ASSERT( _s1.find(wxT('Z')) == wxString::npos );
+    CPPUNIT_ASSERT( _s1.find(wxT('C'), 22) == 27u );
+
+    CPPUNIT_ASSERT( _s1.find(wxT("AB")) == 8u );
+    CPPUNIT_ASSERT( _s1.find(wxT("AB"), 26) == wxString::npos );
+    CPPUNIT_ASSERT( _s1.find(wxT("AB"), 23) == 25u );
 
-    CPPUNIT_ASSERT( _s1.find(_T("ABZZZ"), 2, 2) == 8u );
-    CPPUNIT_ASSERT( _s1.find(_T("ABZZZ"), 26, 2) == wxString::npos );
+    CPPUNIT_ASSERT( _s1.find(wxT("ABZZZ"), 2, 2) == 8u );
+    CPPUNIT_ASSERT( _s1.find(wxT("ABZZZ"), 26, 2) == wxString::npos );
 
     CPPUNIT_ASSERT( _s1.find(_s2) == 6u );
     CPPUNIT_ASSERT( _s1.find(_s2, 7) == wxString::npos );
@@ -249,157 +249,157 @@ void StdStringTestCase::StdFindFirst()
 {
     //                0         1         2         3
     //                01234567890123456789012345678901234
-    wxString s1 = _T("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
-    wxString s2 = _T("aaaaaa");
+    wxString s1 = wxT("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
+    wxString s2 = wxT("aaaaaa");
 
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T('a')) == 6u );
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T('a'), 7) == 7u );
-    CPPUNIT_ASSERT( s2.find_first_not_of(_T('a')) == wxString::npos );
-
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abde"), 4) == 7u );
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abde"), 7) == 7u );
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abcdefghijkl")) == wxString::npos );
-
-    CPPUNIT_ASSERT( s1.find_first_not_of(_T("abcdefghi"), 0, 4) == 9u );
-
-    CPPUNIT_ASSERT( s1.find_first_of(_T('c')) == 7u );
-    CPPUNIT_ASSERT( s1.find_first_of(_T('v')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_first_of(_T('c'), 10) == 24u );
-
-    CPPUNIT_ASSERT( s1.find_first_of(_T("ijkl")) == 13u );
-    CPPUNIT_ASSERT( s1.find_first_of(_T("ddcfg"), 17) == 24u );
-    CPPUNIT_ASSERT( s1.find_first_of(_T("ddcfga"), 17, 5) == 24u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(wxT('a')) == 6u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(wxT('a'), 7) == 7u );
+    CPPUNIT_ASSERT( s2.find_first_not_of(wxT('a')) == wxString::npos );
+
+    CPPUNIT_ASSERT( s1.find_first_not_of(wxT("abde"), 4) == 7u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(wxT("abde"), 7) == 7u );
+    CPPUNIT_ASSERT( s1.find_first_not_of(wxT("abcdefghijkl")) == wxString::npos );
+
+    CPPUNIT_ASSERT( s1.find_first_not_of(wxT("abcdefghi"), 0, 4) == 9u );
+
+    CPPUNIT_ASSERT( s1.find_first_of(wxT('c')) == 7u );
+    CPPUNIT_ASSERT( s1.find_first_of(wxT('v')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_first_of(wxT('c'), 10) == 24u );
+
+    CPPUNIT_ASSERT( s1.find_first_of(wxT("ijkl")) == 13u );
+    CPPUNIT_ASSERT( s1.find_first_of(wxT("ddcfg"), 17) == 24u );
+    CPPUNIT_ASSERT( s1.find_first_of(wxT("ddcfga"), 17, 5) == 24u );
 }
 
 void StdStringTestCase::StdFindLast()
 {
     //                0         1         2         3
     //                01234567890123456789012345678901234
-    wxString s1 = _T("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
-    wxString s2 = _T("aaaaaa");
+    wxString s1 = wxT("aaaaaabcdefghlkjiaaaaaabcdbcdbcdbcd");
+    wxString s2 = wxT("aaaaaa");
 
-    CPPUNIT_ASSERT( s2.find_last_not_of(_T('a')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d')) == 33u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d'), 25) == 24u );
+    CPPUNIT_ASSERT( s2.find_last_not_of(wxT('a')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT('d')) == 33u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT('d'), 25) == 24u );
 
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("bcd")) == 22u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abc"), 24) == 16u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT("bcd")) == 22u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT("abc"), 24) == 16u );
 
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abcdefghijklmnopqrstuv"), 24, 3) == 16u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT("abcdefghijklmnopqrstuv"), 24, 3) == 16u );
 
-    CPPUNIT_ASSERT( s2.find_last_of(_T('c')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_last_of(_T('a')) == 22u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T('b'), 24) == 23u );
+    CPPUNIT_ASSERT( s2.find_last_of(wxT('c')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT('a')) == 22u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT('b'), 24) == 23u );
 
-    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklm")) == 16u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklma"), 33, 4) == 16u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T("a"), 17) == 17u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT("ijklm")) == 16u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT("ijklma"), 33, 4) == 16u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT("a"), 17) == 17u );
 
 
 
     //                  0          1          2         3
     //                  012345 67890123456789 01234567890123456
-//    wxString s1 = _T("aaaaaa\0bcdefghlkjiaa\0aaaabcdbcdbcdbcd");
-//    wxString s2 = _T("aaaaaa\0");
+//    wxString s1 = wxT("aaaaaa\0bcdefghlkjiaa\0aaaabcdbcdbcdbcd");
+//    wxString s2 = wxT("aaaaaa\0");
     s1.insert(6,1,'\0');
     s1.insert(20,1,'\0');
     s2.insert(6,1,'\0');
 
-    CPPUNIT_ASSERT( s2.find_last_not_of(_T('a')) == 6u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d')) == 35u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T('d'), 27) == 26u );
-
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("bcd")) == 24u );
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abc"), 26) == 20u );
-
-    CPPUNIT_ASSERT( s1.find_last_not_of(_T("abcdefghijklmnopqrstuv"), 26, 3) == 20u );
-
-    CPPUNIT_ASSERT( s2.find_last_of(_T('c')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.find_last_of(_T('a')) == 24u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T('b'), 26) == 25u );
-
-    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklm")) == 17u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T("ijklma"), 35, 4) == 17u );
-    CPPUNIT_ASSERT( s1.find_last_of(_T("a"), 18) == 18u );
+    CPPUNIT_ASSERT( s2.find_last_not_of(wxT('a')) == 6u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT('d')) == 35u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT('d'), 27) == 26u );
+
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT("bcd")) == 24u );
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT("abc"), 26) == 20u );
+
+    CPPUNIT_ASSERT( s1.find_last_not_of(wxT("abcdefghijklmnopqrstuv"), 26, 3) == 20u );
+
+    CPPUNIT_ASSERT( s2.find_last_of(wxT('c')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT('a')) == 24u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT('b'), 26) == 25u );
+
+    CPPUNIT_ASSERT( s1.find_last_of(wxT("ijklm")) == 17u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT("ijklma"), 35, 4) == 17u );
+    CPPUNIT_ASSERT( s1.find_last_of(wxT("a"), 18) == 18u );
 }
 
 void StdStringTestCase::StdInsert()
 {
     wxString s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;
 
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("aaaa");
-    s9 = s10 = _T("cdefg");
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = wxT("aaaa");
+    s9 = s10 = wxT("cdefg");
 
-    s1.insert(1, _T("cc") );
-    s2.insert(2, _T("cdef"), 3);
+    s1.insert(1, wxT("cc") );
+    s2.insert(2, wxT("cdef"), 3);
     s3.insert(2, s10);
     s4.insert(2, s10, 3, 7);
-    s5.insert(1, 2, _T('c'));
-    s6.insert(s6.begin() + 3, _T('X'));
+    s5.insert(1, 2, wxT('c'));
+    s6.insert(s6.begin() + 3, wxT('X'));
     s7.insert(s7.begin(), s9.begin(), s9.end() - 1);
-    s8.insert(s8.begin(), 2, _T('c'));
+    s8.insert(s8.begin(), 2, wxT('c'));
 
-    CPPUNIT_ASSERT( s1 == _T("accaaa") );
-    CPPUNIT_ASSERT( s2 == _T("aacdeaa") );
-    CPPUNIT_ASSERT( s3 == _T("aacdefgaa") );
-    CPPUNIT_ASSERT( s4 == _T("aafgaa") );
-    CPPUNIT_ASSERT( s5 == _T("accaaa") );
-    CPPUNIT_ASSERT( s6 == _T("aaaXa") );
-    CPPUNIT_ASSERT( s7 == _T("cdefaaaa") );
-    CPPUNIT_ASSERT( s8 == _T("ccaaaa") );
-
-    s1 = s2 = s3 = _T("aaaa");
-    s1.insert(0, _T("ccc"), 2);
-    s2.insert(4, _T("ccc"), 2);
+    CPPUNIT_ASSERT( s1 == wxT("accaaa") );
+    CPPUNIT_ASSERT( s2 == wxT("aacdeaa") );
+    CPPUNIT_ASSERT( s3 == wxT("aacdefgaa") );
+    CPPUNIT_ASSERT( s4 == wxT("aafgaa") );
+    CPPUNIT_ASSERT( s5 == wxT("accaaa") );
+    CPPUNIT_ASSERT( s6 == wxT("aaaXa") );
+    CPPUNIT_ASSERT( s7 == wxT("cdefaaaa") );
+    CPPUNIT_ASSERT( s8 == wxT("ccaaaa") );
+
+    s1 = s2 = s3 = wxT("aaaa");
+    s1.insert(0, wxT("ccc"), 2);
+    s2.insert(4, wxT("ccc"), 2);
 
-    CPPUNIT_ASSERT( s1 == _T("ccaaaa") );
-    CPPUNIT_ASSERT( s2 == _T("aaaacc") );
+    CPPUNIT_ASSERT( s1 == wxT("ccaaaa") );
+    CPPUNIT_ASSERT( s2 == wxT("aaaacc") );
 }
 
 void StdStringTestCase::StdReplace()
 {
     wxString s1, s2, s3, s4, s5, s6, s7, s8, s9;
 
-    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = _T("QWERTYUIOP");
-    s9 = _T("werty");
+    s1 = s2 = s3 = s4 = s5 = s6 = s7 = s8 = wxT("QWERTYUIOP");
+    s9 = wxT("werty");
 
-    s1.replace(3, 4, _T("rtyu"));
-    s1.replace(8, 7, _T("opopop"));
-    s2.replace(10, 12, _T("WWWW"));
+    s1.replace(3, 4, wxT("rtyu"));
+    s1.replace(8, 7, wxT("opopop"));
+    s2.replace(10, 12, wxT("WWWW"));
     s3.replace(1, 5, s9);
     s4.replace(1, 4, s9, 0, 4);
     s5.replace(1, 2, s9, 1, 12);
     s6.replace(0, 123, s9, 0, 123);
     s7.replace(2, 7, s9);
 
-    CPPUNIT_ASSERT( s1 == _T("QWErtyuIopopop") );
-    CPPUNIT_ASSERT( s2 == _T("QWERTYUIOPWWWW") );
-    CPPUNIT_ASSERT( s3 == _T("QwertyUIOP") );
-    CPPUNIT_ASSERT( s4 == _T("QwertYUIOP") );
-    CPPUNIT_ASSERT( s5 == _T("QertyRTYUIOP") );
+    CPPUNIT_ASSERT( s1 == wxT("QWErtyuIopopop") );
+    CPPUNIT_ASSERT( s2 == wxT("QWERTYUIOPWWWW") );
+    CPPUNIT_ASSERT( s3 == wxT("QwertyUIOP") );
+    CPPUNIT_ASSERT( s4 == wxT("QwertYUIOP") );
+    CPPUNIT_ASSERT( s5 == wxT("QertyRTYUIOP") );
     CPPUNIT_ASSERT( s6 == s9);
-    CPPUNIT_ASSERT( s7 == _T("QWwertyP") );
+    CPPUNIT_ASSERT( s7 == wxT("QWwertyP") );
 }
 
 void StdStringTestCase::StdRFind()
 {
     //                0         1         2
     //                01234567890123456789012345
-    wxString s1 = _T("abcdefgABCDEFGabcABCabcABC");
-    wxString s2 = _T("gAB");
-    wxString s3 = _T("ab");
-
-    CPPUNIT_ASSERT( s1.rfind(_T('A')) == 23u );
-    CPPUNIT_ASSERT( s1.rfind(_T('A'), 7) == 7u );
-    CPPUNIT_ASSERT( s1.rfind(_T('Z')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(_T('C'), 22) == 19u );
-
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB")) == 22u );
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 15) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 21) == 16u );
+    wxString s1 = wxT("abcdefgABCDEFGabcABCabcABC");
+    wxString s2 = wxT("gAB");
+    wxString s3 = wxT("ab");
+
+    CPPUNIT_ASSERT( s1.rfind(wxT('A')) == 23u );
+    CPPUNIT_ASSERT( s1.rfind(wxT('A'), 7) == 7u );
+    CPPUNIT_ASSERT( s1.rfind(wxT('Z')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(wxT('C'), 22) == 19u );
+
+    CPPUNIT_ASSERT( s1.rfind(wxT("cAB")) == 22u );
+    CPPUNIT_ASSERT( s1.rfind(wxT("cAB"), 15) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(wxT("cAB"), 21) == 16u );
 
-    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 7, 3) == 6u );
-    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 5, 3) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(wxT("gABZZZ"), 7, 3) == 6u );
+    CPPUNIT_ASSERT( s1.rfind(wxT("gABZZZ"), 5, 3) == wxString::npos );
 
     CPPUNIT_ASSERT( s1.rfind(s2) == 6u );
     CPPUNIT_ASSERT( s1.rfind(s2, 5) == wxString::npos );
@@ -409,71 +409,71 @@ void StdStringTestCase::StdRFind()
 
     //                  0          1          2
     //                  01234 56789012 345678901234567
-//    wxString s1 = _T("abcde\0fgABCDE\0FGabcABCabcABC");
-//    wxString s2 = _T("gAB");
-//    wxString s3 = _T("ab");
+//    wxString s1 = wxT("abcde\0fgABCDE\0FGabcABCabcABC");
+//    wxString s2 = wxT("gAB");
+//    wxString s3 = wxT("ab");
 
     s1.insert(5,1,'\0');
     s1.insert(13,1,'\0');
 
-    CPPUNIT_ASSERT( s1.rfind(_T('A')) == 25u );
-    CPPUNIT_ASSERT( s1.rfind(_T('A'), 8) == 8u );
-    CPPUNIT_ASSERT( s1.rfind(_T('Z')) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(_T('C'), 22) == 21u );
-
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB")) == 24u );
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 15) == wxString::npos );
-    CPPUNIT_ASSERT( s1.rfind(_T("cAB"), 21) == 18u );
+    CPPUNIT_ASSERT( s1.rfind(wxT('A')) == 25u );
+    CPPUNIT_ASSERT( s1.rfind(wxT('A'), 8) == 8u );
+    CPPUNIT_ASSERT( s1.rfind(wxT('Z')) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(wxT('C'), 22) == 21u );
+
+    CPPUNIT_ASSERT( s1.rfind(wxT("cAB")) == 24u );
+    CPPUNIT_ASSERT( s1.rfind(wxT("cAB"), 15) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(wxT("cAB"), 21) == 18u );
 
-    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 8, 3) == 7u );
-    CPPUNIT_ASSERT( s1.rfind(_T("gABZZZ"), 5, 3) == wxString::npos );
+    CPPUNIT_ASSERT( s1.rfind(wxT("gABZZZ"), 8, 3) == 7u );
+    CPPUNIT_ASSERT( s1.rfind(wxT("gABZZZ"), 5, 3) == wxString::npos );
 }
 
 void StdStringTestCase::StdResize()
 {
     wxString s1, s2, s3, s4;
 
-    s1 = s2 = s3 = s4 = _T("abcABCdefDEF");
+    s1 = s2 = s3 = s4 = wxT("abcABCdefDEF");
 
     s1.resize( 12 );
     s2.resize( 10 );
-    s3.resize( 14, _T(' ') );
-    s4.resize( 14, _T('W') );
+    s3.resize( 14, wxT(' ') );
+    s4.resize( 14, wxT('W') );
 
-    CPPUNIT_ASSERT( s1 == _T("abcABCdefDEF") );
-    CPPUNIT_ASSERT( s2 == _T("abcABCdefD") );
-    CPPUNIT_ASSERT( s3 == _T("abcABCdefDEF  ") );
-    CPPUNIT_ASSERT( s4 == _T("abcABCdefDEFWW") );
+    CPPUNIT_ASSERT( s1 == wxT("abcABCdefDEF") );
+    CPPUNIT_ASSERT( s2 == wxT("abcABCdefD") );
+    CPPUNIT_ASSERT( s3 == wxT("abcABCdefDEF  ") );
+    CPPUNIT_ASSERT( s4 == wxT("abcABCdefDEFWW") );
 }
 
 void StdStringTestCase::StdRiter()
 {
-    const wxString s(_T("fozbar"));
+    const wxString s(wxT("fozbar"));
 
     wxString::const_reverse_iterator ri(s.rbegin());
-    CPPUNIT_ASSERT_EQUAL( _T('r'), *ri );
-    CPPUNIT_ASSERT_EQUAL( _T('a'), *++ri );
-    CPPUNIT_ASSERT_EQUAL( _T('r'), *--ri );
+    CPPUNIT_ASSERT_EQUAL( wxT('r'), *ri );
+    CPPUNIT_ASSERT_EQUAL( wxT('a'), *++ri );
+    CPPUNIT_ASSERT_EQUAL( wxT('r'), *--ri );
 
     ri = s.rend();
     ri--;
-    CPPUNIT_ASSERT_EQUAL( _T('f'), *ri );
+    CPPUNIT_ASSERT_EQUAL( wxT('f'), *ri );
 
     --ri;
-    CPPUNIT_ASSERT_EQUAL( _T('o'), *ri );
+    CPPUNIT_ASSERT_EQUAL( wxT('o'), *ri );
 
     wxString::const_iterator i = ri.base();
-    CPPUNIT_ASSERT_EQUAL( _T('z'), *i );
+    CPPUNIT_ASSERT_EQUAL( wxT('z'), *i );
 }
 
 void StdStringTestCase::StdSubstr()
 {
-    wxString s1 = _T("abcdefgABCDEFG");
+    wxString s1 = wxT("abcdefgABCDEFG");
 
     CPPUNIT_ASSERT( s1.substr( 0, 14 ) == s1 );
-    CPPUNIT_ASSERT( s1.substr( 1, 13 ) == _T("bcdefgABCDEFG") );
-    CPPUNIT_ASSERT( s1.substr( 1, 20 ) == _T("bcdefgABCDEFG") );
-    CPPUNIT_ASSERT( s1.substr( 14, 30 ) == _T("") );
+    CPPUNIT_ASSERT( s1.substr( 1, 13 ) == wxT("bcdefgABCDEFG") );
+    CPPUNIT_ASSERT( s1.substr( 1, 20 ) == wxT("bcdefgABCDEFG") );
+    CPPUNIT_ASSERT( s1.substr( 14, 30 ) == wxT("") );
 
     s1.insert(3,1,'\0');
     s1.insert(8,1,'\0');
@@ -487,6 +487,6 @@ void StdStringTestCase::StdSubstr()
     CPPUNIT_ASSERT( s1.substr( 0, 17 ) == s1 );
     CPPUNIT_ASSERT( s1.substr( 1, 17 ) == s2 );
     CPPUNIT_ASSERT( s1.substr( 1, 20 ) == s2 );
-    CPPUNIT_ASSERT( s1.substr( 17, 30 ) == _T("") );
+    CPPUNIT_ASSERT( s1.substr( 17, 30 ) == wxT("") );
 }
 
--- tests/strings/vsnprintf.cpp-orig	2009-06-18 19:00:39.771767000 -0500
+++ tests/strings/vsnprintf.cpp	2009-06-18 19:00:45.629805000 -0500
@@ -186,7 +186,7 @@ void VsnprintfTestCase::N()
 {
     int nchar;
 
-    wxSnprintf(buf, MAX_TEST_LEN, _T("%d %s%n\n"), 3, _T("bears"), &nchar);
+    wxSnprintf(buf, MAX_TEST_LEN, wxT("%d %s%n\n"), 3, wxT("bears"), &nchar);
     CPPUNIT_ASSERT_EQUAL( 7, nchar );
 }
 
@@ -434,10 +434,10 @@ static void DoMisc(
     // Prepare messages so that it is possible to see from the error which
     // test was running.
     wxString errStr, overflowStr;
-    errStr << _T("No.: ") << ++count << _T(", expected: ") << expectedLen
-           << _T(" '") << expectedString << _T("', result: ");
-    overflowStr << errStr << _T("buffer overflow");
-    errStr << n << _T(" '") << buf << _T("'");
+    errStr << wxT("No.: ") << ++count << wxT(", expected: ") << expectedLen
+           << wxT(" '") << expectedString << wxT("', result: ");
+    overflowStr << errStr << wxT("buffer overflow");
+    errStr << n << wxT(" '") << buf << wxT("'");
 
     // turn them into std::strings
     std::string errMsg(errStr.mb_str());
--- tests/strings/strings.cpp-orig	2009-06-18 19:00:50.325650000 -0500
+++ tests/strings/strings.cpp	2009-06-18 19:00:55.642186000 -0500
@@ -106,12 +106,12 @@ void StringTestCase::String()
 
     for (int i = 0; i < 2; ++i)
     {
-        a = _T("Hello");
-        b = _T(" world");
-        c = _T("! How'ya doin'?");
+        a = wxT("Hello");
+        b = wxT(" world");
+        c = wxT("! How'ya doin'?");
         a += b;
         a += c;
-        c = _T("Hello world! What's up?");
+        c = wxT("Hello world! What's up?");
         CPPUNIT_ASSERT( c != a );
     }
 }
@@ -124,12 +124,12 @@ void StringTestCase::PChar()
 
     for (int i = 0; i < 2; ++i)
     {
-        wxStrcpy (a, _T("Hello"));
-        wxStrcpy (b, _T(" world"));
-        wxStrcpy (c, _T("! How'ya doin'?"));
+        wxStrcpy (a, wxT("Hello"));
+        wxStrcpy (b, wxT(" world"));
+        wxStrcpy (c, wxT("! How'ya doin'?"));
         wxStrcat (a, b);
         wxStrcat (a, c);
-        wxStrcpy (c, _T("Hello world! What's up?"));
+        wxStrcpy (c, wxT("Hello world! What's up?"));
         CPPUNIT_ASSERT( wxStrcmp (c, a) != 0 );
     }
 }
@@ -137,18 +137,18 @@ void StringTestCase::PChar()
 void StringTestCase::Format()
 {
     wxString s1,s2;
-    s1.Printf(_T("%03d"), 18);
-    CPPUNIT_ASSERT( s1 == wxString::Format(_T("%03d"), 18) );
-    s2.Printf(_T("Number 18: %s\n"), s1.c_str());
-    CPPUNIT_ASSERT( s2 == wxString::Format(_T("Number 18: %s\n"), s1.c_str()) );
+    s1.Printf(wxT("%03d"), 18);
+    CPPUNIT_ASSERT( s1 == wxString::Format(wxT("%03d"), 18) );
+    s2.Printf(wxT("Number 18: %s\n"), s1.c_str());
+    CPPUNIT_ASSERT( s2 == wxString::Format(wxT("Number 18: %s\n"), s1.c_str()) );
 
     static const size_t lengths[] = { 1, 512, 1024, 1025, 2048, 4096, 4097 };
     for ( size_t n = 0; n < WXSIZEOF(lengths); n++ )
     {
         const size_t len = lengths[n];
 
-        wxString s(_T('Z'), len);
-        CPPUNIT_ASSERT_EQUAL( len, wxString::Format(_T("%s"), s.c_str()).length());
+        wxString s(wxT('Z'), len);
+        CPPUNIT_ASSERT_EQUAL( len, wxString::Format(wxT("%s"), s.c_str()).length());
     }
 }
 
@@ -160,28 +160,28 @@ void StringTestCase::Constructors()
             CPPUNIT_ASSERT( s == res );                                        \
         }
 
-    TEST_CTOR((_T('Z'), 4), _T("ZZZZ"));
-    TEST_CTOR((_T("Hello"), 4), _T("Hell"));
-    TEST_CTOR((_T("Hello"), 5), _T("Hello"));
-
-    static const wxChar *s = _T("?really!");
-    const wxChar *start = wxStrchr(s, _T('r'));
-    const wxChar *end = wxStrchr(s, _T('!'));
-    TEST_CTOR((start, end), _T("really"));
+    TEST_CTOR((wxT('Z'), 4), wxT("ZZZZ"));
+    TEST_CTOR((wxT("Hello"), 4), wxT("Hell"));
+    TEST_CTOR((wxT("Hello"), 5), wxT("Hello"));
+
+    static const wxChar *s = wxT("?really!");
+    const wxChar *start = wxStrchr(s, wxT('r'));
+    const wxChar *end = wxStrchr(s, wxT('!'));
+    TEST_CTOR((start, end), wxT("really"));
 }
 
 
 void StringTestCase::Extraction()
 {
-    wxString s(_T("Hello, world!"));
+    wxString s(wxT("Hello, world!"));
 
-    CPPUNIT_ASSERT( wxStrcmp( s.c_str() , _T("Hello, world!") ) == 0 );
-    CPPUNIT_ASSERT( wxStrcmp( s.Left(5).c_str() , _T("Hello") ) == 0 );
-    CPPUNIT_ASSERT( wxStrcmp( s.Right(6).c_str() , _T("world!") ) == 0 );
-    CPPUNIT_ASSERT( wxStrcmp( s(3, 5).c_str() , _T("lo, w") ) == 0 );
-    CPPUNIT_ASSERT( wxStrcmp( s.Mid(3).c_str() , _T("lo, world!") ) == 0 );
-    CPPUNIT_ASSERT( wxStrcmp( s.substr(3, 5).c_str() , _T("lo, w") ) == 0 );
-    CPPUNIT_ASSERT( wxStrcmp( s.substr(3).c_str() , _T("lo, world!") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s.c_str() , wxT("Hello, world!") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s.Left(5).c_str() , wxT("Hello") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s.Right(6).c_str() , wxT("world!") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s(3, 5).c_str() , wxT("lo, w") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s.Mid(3).c_str() , wxT("lo, world!") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s.substr(3, 5).c_str() , wxT("lo, w") ) == 0 );
+    CPPUNIT_ASSERT( wxStrcmp( s.substr(3).c_str() , wxT("lo, world!") ) == 0 );
 
     wxString rest;
 
@@ -190,13 +190,13 @@ void StringTestCase::Extraction()
         if ( result )                                                         \
             CPPUNIT_ASSERT_EQUAL(wxString(correct_rest), rest)
 
-    TEST_STARTS_WITH( _T("Hello"),           _T(", world!"),      true  );
-    TEST_STARTS_WITH( _T("Hello, "),         _T("world!"),        true  );
-    TEST_STARTS_WITH( _T("Hello, world!"),   _T(""),              true  );
-    TEST_STARTS_WITH( _T("Hello, world!!!"), _T(""),              false );
-    TEST_STARTS_WITH( _T(""),                _T("Hello, world!"), true  );
-    TEST_STARTS_WITH( _T("Goodbye"),         _T(""),              false );
-    TEST_STARTS_WITH( _T("Hi"),              _T(""),              false );
+    TEST_STARTS_WITH( wxT("Hello"),           wxT(", world!"),      true  );
+    TEST_STARTS_WITH( wxT("Hello, "),         wxT("world!"),        true  );
+    TEST_STARTS_WITH( wxT("Hello, world!"),   wxT(""),              true  );
+    TEST_STARTS_WITH( wxT("Hello, world!!!"), wxT(""),              false );
+    TEST_STARTS_WITH( wxT(""),                wxT("Hello, world!"), true  );
+    TEST_STARTS_WITH( wxT("Goodbye"),         wxT(""),              false );
+    TEST_STARTS_WITH( wxT("Hi"),              wxT(""),              false );
 
     #undef TEST_STARTS_WITH
 
@@ -205,15 +205,15 @@ void StringTestCase::Extraction()
         if ( result )                                                         \
             CPPUNIT_ASSERT_EQUAL(wxString(correct_rest), rest)
 
-    TEST_ENDS_WITH( _T(""),                 _T("Hello, world!"), true  );
-    TEST_ENDS_WITH( _T("!"),                _T("Hello, world"),  true  );
-    TEST_ENDS_WITH( _T(", world!"),         _T("Hello"),         true  );
-    TEST_ENDS_WITH( _T("ello, world!"),     _T("H"),             true  );
-    TEST_ENDS_WITH( _T("Hello, world!"),    _T(""),              true  );
-    TEST_ENDS_WITH( _T("very long string"), _T(""),              false );
-    TEST_ENDS_WITH( _T("?"),                _T(""),              false );
-    TEST_ENDS_WITH( _T("Hello, world"),     _T(""),              false );
-    TEST_ENDS_WITH( _T("Gello, world!"),    _T(""),              false );
+    TEST_ENDS_WITH( wxT(""),                 wxT("Hello, world!"), true  );
+    TEST_ENDS_WITH( wxT("!"),                wxT("Hello, world"),  true  );
+    TEST_ENDS_WITH( wxT(", world!"),         wxT("Hello"),         true  );
+    TEST_ENDS_WITH( wxT("ello, world!"),     wxT("H"),             true  );
+    TEST_ENDS_WITH( wxT("Hello, world!"),    wxT(""),              true  );
+    TEST_ENDS_WITH( wxT("very long string"), wxT(""),              false );
+    TEST_ENDS_WITH( wxT("?"),                wxT(""),              false );
+    TEST_ENDS_WITH( wxT("Hello, world"),     wxT(""),              false );
+    TEST_ENDS_WITH( wxT("Gello, world!"),    wxT(""),              false );
 
     #undef TEST_ENDS_WITH
 }
@@ -223,15 +223,15 @@ void StringTestCase::Trim()
     #define TEST_TRIM( str , dir , result )  \
         CPPUNIT_ASSERT( wxString(str).Trim(dir) == result )
 
-    TEST_TRIM( _T("  Test  "),  true, _T("  Test") );
-    TEST_TRIM( _T("    "),      true, _T("")       );
-    TEST_TRIM( _T(" "),         true, _T("")       );
-    TEST_TRIM( _T(""),          true, _T("")       );
-
-    TEST_TRIM( _T("  Test  "),  false, _T("Test  ") );
-    TEST_TRIM( _T("    "),      false, _T("")       );
-    TEST_TRIM( _T(" "),         false, _T("")       );
-    TEST_TRIM( _T(""),          false, _T("")       );
+    TEST_TRIM( wxT("  Test  "),  true, wxT("  Test") );
+    TEST_TRIM( wxT("    "),      true, wxT("")       );
+    TEST_TRIM( wxT(" "),         true, wxT("")       );
+    TEST_TRIM( wxT(""),          true, wxT("")       );
+
+    TEST_TRIM( wxT("  Test  "),  false, wxT("Test  ") );
+    TEST_TRIM( wxT("    "),      false, wxT("")       );
+    TEST_TRIM( wxT(" "),         false, wxT("")       );
+    TEST_TRIM( wxT(""),          false, wxT("")       );
 
     #undef TEST_TRIM
 }
@@ -239,11 +239,11 @@ void StringTestCase::Trim()
 void StringTestCase::Find()
 {
     #define TEST_FIND( str , start , result )  \
-        CPPUNIT_ASSERT( wxString(str).find(_T("ell"), start) == result );
+        CPPUNIT_ASSERT( wxString(str).find(wxT("ell"), start) == result );
 
-    TEST_FIND( _T("Well, hello world"),  0, 1              );
-    TEST_FIND( _T("Well, hello world"),  6, 7              );
-    TEST_FIND( _T("Well, hello world"),  9, wxString::npos );
+    TEST_FIND( wxT("Well, hello world"),  0, 1              );
+    TEST_FIND( wxT("Well, hello world"),  6, 7              );
+    TEST_FIND( wxT("Well, hello world"),  9, wxString::npos );
 
     #undef TEST_FIND
 }
@@ -257,11 +257,11 @@ void StringTestCase::Replace()
             CPPUNIT_ASSERT( s == result ); \
         }
 
-    TEST_REPLACE( _T("012-AWORD-XYZ"), 4, 5, _T("BWORD"),  _T("012-BWORD-XYZ") );
-    TEST_REPLACE( _T("increase"),      0, 2, _T("de"),     _T("decrease")      );
-    TEST_REPLACE( _T("wxWindow"),      8, 0, _T("s"),      _T("wxWindows")     );
-    TEST_REPLACE( _T("foobar"),        3, 0, _T("-"),      _T("foo-bar")       );
-    TEST_REPLACE( _T("barfoo"),        0, 6, _T("foobar"), _T("foobar")        );
+    TEST_REPLACE( wxT("012-AWORD-XYZ"), 4, 5, wxT("BWORD"),  wxT("012-BWORD-XYZ") );
+    TEST_REPLACE( wxT("increase"),      0, 2, wxT("de"),     wxT("decrease")      );
+    TEST_REPLACE( wxT("wxWindow"),      8, 0, wxT("s"),      wxT("wxWindows")     );
+    TEST_REPLACE( wxT("foobar"),        3, 0, wxT("-"),      wxT("foo-bar")       );
+    TEST_REPLACE( wxT("barfoo"),        0, 6, wxT("foobar"), wxT("foobar")        );
 
     
     #define TEST_NULLCHARREPLACE( o , olen, pos , len , replacement , r, rlen ) \
@@ -271,8 +271,8 @@ void StringTestCase::Replace()
             CPPUNIT_ASSERT( s == wxString(r,rlen) ); \
         }
     
-    TEST_NULLCHARREPLACE( _T("null\0char"), 9, 5, 1, _T("d"), 
-                          _T("null\0dhar"), 9 );   
+    TEST_NULLCHARREPLACE( wxT("null\0char"), 9, 5, 1, wxT("d"), 
+                          wxT("null\0dhar"), 9 );   
 
     #define TEST_WXREPLACE( o , olen, olds, news, all, r, rlen ) \
         { \
@@ -281,11 +281,11 @@ void StringTestCase::Replace()
             CPPUNIT_ASSERT( s == wxString(r,rlen) ); \
         }
     
-    TEST_WXREPLACE( _T("null\0char"), 9, _T("c"), _T("de"), true,
-                          _T("null\0dehar"), 10 );   
+    TEST_WXREPLACE( wxT("null\0char"), 9, wxT("c"), wxT("de"), true,
+                          wxT("null\0dehar"), 10 );   
 
-    TEST_WXREPLACE( _T("null\0dehar"), 10, _T("de"), _T("c"), true,
-                          _T("null\0char"), 9 );   
+    TEST_WXREPLACE( wxT("null\0dehar"), 10, wxT("de"), wxT("c"), true,
+                          wxT("null\0char"), 9 );   
 
     #undef TEST_WXREPLACE
     #undef TEST_NULLCHARREPLACE
@@ -297,17 +297,17 @@ void StringTestCase::Match()
     #define TEST_MATCH( s1 , s2 , result ) \
         CPPUNIT_ASSERT( wxString(s1).Matches(s2) == result )
 
-    TEST_MATCH( _T("foobar"),    _T("foo*"),   true  );
-    TEST_MATCH( _T("foobar"),    _T("*oo*"),   true  );
-    TEST_MATCH( _T("foobar"),    _T("*bar"),   true  );
-    TEST_MATCH( _T("foobar"),    _T("??????"), true  );
-    TEST_MATCH( _T("foobar"),    _T("f??b*"),  true  );
-    TEST_MATCH( _T("foobar"),    _T("f?b*"),   false );
-    TEST_MATCH( _T("foobar"),    _T("*goo*"),  false );
-    TEST_MATCH( _T("foobar"),    _T("*foo"),   false );
-    TEST_MATCH( _T("foobarfoo"), _T("*foo"),   true  );
-    TEST_MATCH( _T(""),          _T("*"),      true  );
-    TEST_MATCH( _T(""),          _T("?"),      false );
+    TEST_MATCH( wxT("foobar"),    wxT("foo*"),   true  );
+    TEST_MATCH( wxT("foobar"),    wxT("*oo*"),   true  );
+    TEST_MATCH( wxT("foobar"),    wxT("*bar"),   true  );
+    TEST_MATCH( wxT("foobar"),    wxT("??????"), true  );
+    TEST_MATCH( wxT("foobar"),    wxT("f??b*"),  true  );
+    TEST_MATCH( wxT("foobar"),    wxT("f?b*"),   false );
+    TEST_MATCH( wxT("foobar"),    wxT("*goo*"),  false );
+    TEST_MATCH( wxT("foobar"),    wxT("*foo"),   false );
+    TEST_MATCH( wxT("foobarfoo"), wxT("*foo"),   true  );
+    TEST_MATCH( wxT(""),          wxT("*"),      true  );
+    TEST_MATCH( wxT(""),          wxT("?"),      false );
 
     #undef TEST_MATCH
 }
@@ -315,7 +315,7 @@ void StringTestCase::Match()
 
 void StringTestCase::CaseChanges()
 {
-    wxString s1(_T("Hello!"));
+    wxString s1(wxT("Hello!"));
     wxString s1u(s1);
     wxString s1l(s1);
     s1u.MakeUpper();
@@ -324,8 +324,8 @@ void StringTestCase::CaseChanges()
     s2u.MakeUpper();
     s2l.MakeLower();
 
-    CPPUNIT_ASSERT( s1u == _T("HELLO!") );
-    CPPUNIT_ASSERT( s1l == _T("hello!") );
+    CPPUNIT_ASSERT( s1u == wxT("HELLO!") );
+    CPPUNIT_ASSERT( s1l == wxT("hello!") );
     CPPUNIT_ASSERT( s2u == wxEmptyString );
     CPPUNIT_ASSERT( s2l == wxEmptyString );
 }
@@ -421,15 +421,15 @@ void StringTestCase::Contains()
         bool contains;
     } containsData[] =
     {
-        { _T(""),       _T(""),         true  },
-        { _T(""),       _T("foo"),      false },
-        { _T("foo"),    _T(""),         true  },
-        { _T("foo"),    _T("f"),        true  },
-        { _T("foo"),    _T("o"),        true  },
-        { _T("foo"),    _T("oo"),       true  },
-        { _T("foo"),    _T("ooo"),      false },
-        { _T("foo"),    _T("oooo"),     false },
-        { _T("foo"),    _T("fooo"),     false },
+        { wxT(""),       wxT(""),         true  },
+        { wxT(""),       wxT("foo"),      false },
+        { wxT("foo"),    wxT(""),         true  },
+        { wxT("foo"),    wxT("f"),        true  },
+        { wxT("foo"),    wxT("o"),        true  },
+        { wxT("foo"),    wxT("oo"),       true  },
+        { wxT("foo"),    wxT("ooo"),      false },
+        { wxT("foo"),    wxT("oooo"),     false },
+        { wxT("foo"),    wxT("fooo"),     false },
     };
 
     for ( size_t n = 0; n < WXSIZEOF(containsData); n++ )
@@ -470,23 +470,23 @@ static const struct ToLongData
     bool IsOk() const { return !(flags & Number_Invalid); }
 } longData[] =
 {
-    { _T("1"), 1, Number_Ok },
-    { _T("0"), 0, Number_Ok },
-    { _T("a"), 0, Number_Invalid },
-    { _T("12345"), 12345, Number_Ok },
-    { _T("--1"), 0, Number_Invalid },
+    { wxT("1"), 1, Number_Ok },
+    { wxT("0"), 0, Number_Ok },
+    { wxT("a"), 0, Number_Invalid },
+    { wxT("12345"), 12345, Number_Ok },
+    { wxT("--1"), 0, Number_Invalid },
 
-    { _T("-1"), -1, Number_Signed | Number_Long },
+    { wxT("-1"), -1, Number_Signed | Number_Long },
     // this is surprizing but consistent with strtoul() behaviour
-    { _T("-1"), ULONG_MAX, Number_Unsigned | Number_Long },
+    { wxT("-1"), ULONG_MAX, Number_Unsigned | Number_Long },
 
     // this must overflow, even with 64 bit long
-    { _T("922337203685477580711"), 0, Number_Invalid },
+    { wxT("922337203685477580711"), 0, Number_Invalid },
 
 #ifdef wxLongLong_t
-    { _T("2147483648"), wxLL(2147483648), Number_LongLong },
-    { _T("-2147483648"), wxLL(-2147483648), Number_LongLong | Number_Signed },
-    { _T("9223372036854775808"), wxULL(9223372036854775808), Number_LongLong |
+    { wxT("2147483648"), wxLL(2147483648), Number_LongLong },
+    { wxT("-2147483648"), wxLL(-2147483648), Number_LongLong | Number_Signed },
+    { wxT("9223372036854775808"), wxULL(9223372036854775808), Number_LongLong |
                                                              Number_Unsigned },
 #endif // wxLongLong_t
 };
@@ -541,7 +541,7 @@ void StringTestCase::ToLongLong()
             (
                 std::string(wxString::Format
                 (
-                    _T("Conversion of \"%s\" to long long failed"),
+                    wxT("Conversion of \"%s\" to long long failed"),
                     ld.str
                 ).mb_str()),
                 wxString(ld.str).ToLongLong(&l)
@@ -554,7 +554,7 @@ void StringTestCase::ToLongLong()
             (
                 std::string(wxString::Format
                 (
-                    _T("Conversion of \"%s\" to long long succeeded"),
+                    wxT("Conversion of \"%s\" to long long succeeded"),
                     ld.str
                 ).mb_str()),
                 !wxString(ld.str).ToLongLong(&l)
@@ -579,7 +579,7 @@ void StringTestCase::ToULongLong()
             (
                 std::string(wxString::Format
                 (
-                    _T("Conversion of \"%s\" to unsigned long long failed"),
+                    wxT("Conversion of \"%s\" to unsigned long long failed"),
                     ld.str
                 ).mb_str()),
                 wxString(ld.str).ToULongLong(&ul)
@@ -592,7 +592,7 @@ void StringTestCase::ToULongLong()
             (
                 std::string(wxString::Format
                 (
-                    _T("Conversion of \"%s\" to unsigned long long succeeded"),
+                    wxT("Conversion of \"%s\" to unsigned long long succeeded"),
                     ld.str
                 ).mb_str()),
                 !wxString(ld.str).ToULongLong(&ul)
@@ -613,21 +613,21 @@ void StringTestCase::ToDouble()
         bool ok;
     } doubleData[] =
     {
-        { _T("1"), 1, true },
-        { _T("1.23"), 1.23, true },
-        { _T(".1"), .1, true },
-        { _T("1."), 1, true },
-        { _T("1.."), 0, false },
-        { _T("0"), 0, true },
-        { _T("a"), 0, false },
-        { _T("12345"), 12345, true },
-        { _T("-1"), -1, true },
-        { _T("--1"), 0, false },
+        { wxT("1"), 1, true },
+        { wxT("1.23"), 1.23, true },
+        { wxT(".1"), .1, true },
+        { wxT("1."), 1, true },
+        { wxT("1.."), 0, false },
+        { wxT("0"), 0, true },
+        { wxT("a"), 0, false },
+        { wxT("12345"), 12345, true },
+        { wxT("-1"), -1, true },
+        { wxT("--1"), 0, false },
     };
 
     // we need to use decimal point, not comma or whatever is its value for the
     // current locale
-    wxSetlocale(LC_ALL, _T("C"));
+    wxSetlocale(LC_ALL, wxT("C"));
 
     size_t n;
     for ( n = 0; n < WXSIZEOF(doubleData); n++ )
@@ -643,25 +643,25 @@ void StringTestCase::ToDouble()
 void StringTestCase::WriteBuf()
 {
     wxString s;
-    wxStrcpy(wxStringBuffer(s, 10), _T("foo"));
+    wxStrcpy(wxStringBuffer(s, 10), wxT("foo"));
 
-    CPPUNIT_ASSERT_EQUAL(_T('f'), s[0u]);
-    CPPUNIT_ASSERT_EQUAL(_T('o'), s[1]);
-    CPPUNIT_ASSERT_EQUAL(_T('o'), s[2]);
+    CPPUNIT_ASSERT_EQUAL(wxT('f'), s[0u]);
+    CPPUNIT_ASSERT_EQUAL(wxT('o'), s[1]);
+    CPPUNIT_ASSERT_EQUAL(wxT('o'), s[2]);
     WX_ASSERT_SIZET_EQUAL(3, s.length());
 
     {
         wxChar *p = s.GetWriteBuf(10);
-        wxStrcpy(p, _T("barrbaz"));
+        wxStrcpy(p, wxT("barrbaz"));
         s.UngetWriteBuf(4);
 
-        CPPUNIT_ASSERT_EQUAL(_T('b'), s[0u]);
-        CPPUNIT_ASSERT_EQUAL(_T('a'), s[1]);
-        CPPUNIT_ASSERT_EQUAL(_T('r'), s[2]);
-        CPPUNIT_ASSERT_EQUAL(_T('r'), s[3]);
+        CPPUNIT_ASSERT_EQUAL(wxT('b'), s[0u]);
+        CPPUNIT_ASSERT_EQUAL(wxT('a'), s[1]);
+        CPPUNIT_ASSERT_EQUAL(wxT('r'), s[2]);
+        CPPUNIT_ASSERT_EQUAL(wxT('r'), s[3]);
         WX_ASSERT_SIZET_EQUAL(4, s.length());
 
-        CPPUNIT_ASSERT_EQUAL( 0, wxStrcmp(_T("barr"), s) );
+        CPPUNIT_ASSERT_EQUAL( 0, wxStrcmp(wxT("barr"), s) );
     }
 }
 #endif //!wxUSE_STL
@@ -674,7 +674,7 @@ static bool IsFoo(/* non-const */ char *
 
 void StringTestCase::CharStr()
 {
-    wxString s(_T("foo"));
+    wxString s(wxT("foo"));
 
     CPPUNIT_ASSERT( IsFoo(s.char_str()) );
 }
--- tests/strings/crt.cpp-orig	2009-06-18 19:00:59.710557000 -0500
+++ tests/strings/crt.cpp	2009-06-18 19:01:05.102984000 -0500
@@ -52,18 +52,18 @@ CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( C
 void CrtTestCase::SetGetEnv()
 {
     wxString val;
-    wxSetEnv(_T("TESTVAR"), _T("value"));
-    CPPUNIT_ASSERT( wxGetEnv(_T("TESTVAR"), &val) == true );
-    CPPUNIT_ASSERT( val == _T("value") );
-    wxSetEnv(_T("TESTVAR"), _T("something else"));
-    CPPUNIT_ASSERT( wxGetEnv(_T("TESTVAR"), &val) );
-    CPPUNIT_ASSERT( val == _T("something else") );
+    wxSetEnv(wxT("TESTVAR"), wxT("value"));
+    CPPUNIT_ASSERT( wxGetEnv(wxT("TESTVAR"), &val) == true );
+    CPPUNIT_ASSERT( val == wxT("value") );
+    wxSetEnv(wxT("TESTVAR"), wxT("something else"));
+    CPPUNIT_ASSERT( wxGetEnv(wxT("TESTVAR"), &val) );
+    CPPUNIT_ASSERT( val == wxT("something else") );
 
     // this test doesn't work under Unix systems without setenv(): putenv() can
     // only be used to add or modify environment variables but not to unset
     // them
 #if !defined(__UNIX__) || defined(HAVE_SETENV)
-    CPPUNIT_ASSERT( wxUnsetEnv(_T("TESTVAR")) );
-    CPPUNIT_ASSERT( wxGetEnv(_T("TESTVAR"), NULL) == false );
+    CPPUNIT_ASSERT( wxUnsetEnv(wxT("TESTVAR")) );
+    CPPUNIT_ASSERT( wxGetEnv(wxT("TESTVAR"), NULL) == false );
 #endif
 }
--- tests/lists/lists.cpp-orig	2009-06-18 18:59:39.811701000 -0500
+++ tests/lists/lists.cpp	2009-06-18 18:59:45.559585000 -0500
@@ -163,8 +163,8 @@ void ListsTestCase::wxListCtorTest()
 {
     {
         wxListBazs list1;
-        list1.Append(new Baz(_T("first")));
-        list1.Append(new Baz(_T("second")));
+        list1.Append(new Baz(wxT("first")));
+        list1.Append(new Baz(wxT("second")));
 
         CPPUNIT_ASSERT( list1.GetCount() == 2 );
         CPPUNIT_ASSERT( Baz::GetNumber() == 2 );
--- tests/arrays/arrays.cpp-orig	2009-06-18 18:59:05.047308000 -0500
+++ tests/arrays/arrays.cpp	2009-06-18 18:59:09.820384000 -0500
@@ -179,133 +179,133 @@ CPPUNIT_TEST_SUITE_NAMED_REGISTRATION( A
 void ArraysTestCase::wxStringArrayTest()
 {
     wxArrayString a1;
-    a1.Add(_T("thermit"));
-    a1.Add(_T("condor"));
-    a1.Add(_T("lion"), 3);
-    a1.Add(_T("dog"));
-    a1.Add(_T("human"));
-    a1.Add(_T("alligator"));
-
-    CPPUNIT_ASSERT( COMPARE_8_VALUES( a1 , _T("thermit") ,
-                                           _T("condor") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("alligator") ) );
+    a1.Add(wxT("thermit"));
+    a1.Add(wxT("condor"));
+    a1.Add(wxT("lion"), 3);
+    a1.Add(wxT("dog"));
+    a1.Add(wxT("human"));
+    a1.Add(wxT("alligator"));
+
+    CPPUNIT_ASSERT( COMPARE_8_VALUES( a1 , wxT("thermit") ,
+                                           wxT("condor") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("alligator") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a1 , 8 ) );
 
     wxArrayString a2(a1);
 
-    CPPUNIT_ASSERT( COMPARE_8_VALUES( a2 , _T("thermit") ,
-                                           _T("condor") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("alligator") ) );
+    CPPUNIT_ASSERT( COMPARE_8_VALUES( a2 , wxT("thermit") ,
+                                           wxT("condor") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("alligator") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a2 , 8 ) );
 
     wxSortedArrayString a3(a1);
 
-    CPPUNIT_ASSERT( COMPARE_8_VALUES( a3 , _T("alligator") ,
-                                           _T("condor") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("thermit") ) );
+    CPPUNIT_ASSERT( COMPARE_8_VALUES( a3 , wxT("alligator") ,
+                                           wxT("condor") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("thermit") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a3 , 8 ) );
 
     wxSortedArrayString a4;
     for (wxArrayString::iterator it = a1.begin(), en = a1.end(); it != en; ++it)
         a4.Add(*it);
 
-    CPPUNIT_ASSERT( COMPARE_8_VALUES( a4 , _T("alligator") ,
-                                           _T("condor") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("lion") ,
-                                           _T("thermit") ) );
+    CPPUNIT_ASSERT( COMPARE_8_VALUES( a4 , wxT("alligator") ,
+                                           wxT("condor") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("lion") ,
+                                           wxT("thermit") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a4 , 8 ) );
 
     a1.RemoveAt(2,3);
 
-    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , _T("thermit") ,
-                                           _T("condor") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("alligator") ) );
+    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , wxT("thermit") ,
+                                           wxT("condor") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("alligator") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a1 , 5 ) );
 
     a2 = a1;
 
-    CPPUNIT_ASSERT( COMPARE_5_VALUES( a2 , _T("thermit") ,
-                                           _T("condor") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("alligator") ) );
+    CPPUNIT_ASSERT( COMPARE_5_VALUES( a2 , wxT("thermit") ,
+                                           wxT("condor") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("alligator") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a2 , 5 ) );
 
     a1.Sort(false);
 
-    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , _T("alligator") ,
-                                           _T("condor") ,
-                                           _T("dog") ,
-                                           _T("human") ,
-                                           _T("thermit") ) );
+    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , wxT("alligator") ,
+                                           wxT("condor") ,
+                                           wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("thermit") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a1 , 5 ) );
 
     a1.Sort(true);
 
-    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , _T("thermit") ,
-                                           _T("human") ,
-                                           _T("dog") ,
-                                           _T("condor") ,
-                                           _T("alligator") ) );
+    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , wxT("thermit") ,
+                                           wxT("human") ,
+                                           wxT("dog") ,
+                                           wxT("condor") ,
+                                           wxT("alligator") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a1 , 5 ) );
 
     a1.Sort(&StringLenCompare);
 
-    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , _T("dog") ,
-                                           _T("human") ,
-                                           _T("condor") ,
-                                           _T("thermit") ,
-                                           _T("alligator") ) );
+    CPPUNIT_ASSERT( COMPARE_5_VALUES( a1 , wxT("dog") ,
+                                           wxT("human") ,
+                                           wxT("condor") ,
+                                           wxT("thermit") ,
+                                           wxT("alligator") ) );
     CPPUNIT_ASSERT( COMPARE_COUNT( a1 , 5 ) );
-    CPPUNIT_ASSERT( a1.Index( _T("dog") ) == 0 );
-    CPPUNIT_ASSERT( a1.Index( _T("human") ) == 1 );
-    CPPUNIT_ASSERT( a1.Index( _T("humann") ) == wxNOT_FOUND );
-    CPPUNIT_ASSERT( a1.Index( _T("condor") ) == 2 );
-    CPPUNIT_ASSERT( a1.Index( _T("thermit") ) == 3 );
-    CPPUNIT_ASSERT( a1.Index( _T("alligator") ) == 4 );
+    CPPUNIT_ASSERT( a1.Index( wxT("dog") ) == 0 );
+    CPPUNIT_ASSERT( a1.Index( wxT("human") ) == 1 );
+    CPPUNIT_ASSERT( a1.Index( wxT("humann") ) == wxNOT_FOUND );
+    CPPUNIT_ASSERT( a1.Index( wxT("condor") ) == 2 );
+    CPPUNIT_ASSERT( a1.Index( wxT("thermit") ) == 3 );
+    CPPUNIT_ASSERT( a1.Index( wxT("alligator") ) == 4 );
 
     wxArrayString a5;
 
-    CPPUNIT_ASSERT( a5.Add( _T("x"), 1 ) == 0 );
-    CPPUNIT_ASSERT( a5.Add( _T("a"), 3 ) == 1 );
+    CPPUNIT_ASSERT( a5.Add( wxT("x"), 1 ) == 0 );
+    CPPUNIT_ASSERT( a5.Add( wxT("a"), 3 ) == 1 );
 
-    CPPUNIT_ASSERT( COMPARE_4_VALUES( a5, _T("x") ,
-                                          _T("a") ,
-                                          _T("a") ,
-                                          _T("a") ) );
+    CPPUNIT_ASSERT( COMPARE_4_VALUES( a5, wxT("x") ,
+                                          wxT("a") ,
+                                          wxT("a") ,
+                                          wxT("a") ) );
 }
 
 void ArraysTestCase::wxObjArrayTest()
 {
     {
         ArrayBars bars;
-        Bar bar(_T("first bar in general, second bar in array (two copies!)"));
+        Bar bar(wxT("first bar in general, second bar in array (two copies!)"));
 
         CPPUNIT_ASSERT( bars.GetCount() == 0 );
         CPPUNIT_ASSERT( Bar::GetNumber() == 1 );
 
-        bars.Add(new Bar(_T("first bar in array")));
+        bars.Add(new Bar(wxT("first bar in array")));
         bars.Add(bar,2);
 
         CPPUNIT_ASSERT( bars.GetCount() == 3 );
--- tests/filekind/filekind.cpp-orig	2009-06-18 18:59:56.821481000 -0500
+++ tests/filekind/filekind.cpp	2009-06-18 19:00:03.294287000 -0500
@@ -107,7 +107,7 @@ void FileKindTestCase::File()
 {
     TempFile tmp; // put first
     wxFile file;
-    tmp.m_name = wxFileName::CreateTempFileName(_T("wxft"), &file);
+    tmp.m_name = wxFileName::CreateTempFileName(wxT("wxft"), &file);
     TestFd(file, true);
     file.Close();
 
--- tests/longlong/longlongtest.cpp-orig	2009-06-18 18:58:50.565388000 -0500
+++ tests/longlong/longlongtest.cpp	2009-06-18 18:58:57.213060000 -0500
@@ -279,7 +279,7 @@ void LongLongTestCase::ToString()
     for ( size_t n = 0; n < WXSIZEOF(testLongs); n++ )
     {
         wxLongLong a = testLongs[n];
-        s1 = wxString::Format(_T("%ld"), testLongs[n]);
+        s1 = wxString::Format(wxT("%ld"), testLongs[n]);
         s2 = a.ToString();
         CPPUNIT_ASSERT( s1 == s2 );
 
@@ -301,25 +301,25 @@ void LongLongTestCase::ToString()
     }
 
     wxLongLong a(0x12345678, 0x87654321);
-    CPPUNIT_ASSERT( a.ToString() == _T("1311768467139281697") );
+    CPPUNIT_ASSERT( a.ToString() == wxT("1311768467139281697") );
     a.Negate();
-    CPPUNIT_ASSERT( a.ToString() == _T("-1311768467139281697") );
+    CPPUNIT_ASSERT( a.ToString() == wxT("-1311768467139281697") );
 
     wxLongLong llMin(-2147483647L - 1L, 0);
-    CPPUNIT_ASSERT( llMin.ToString() == _T("-9223372036854775808") );
+    CPPUNIT_ASSERT( llMin.ToString() == wxT("-9223372036854775808") );
 
 #if wxUSE_LONGLONG_WX
     wxLongLongWx a1(a.GetHi(), a.GetLo());
-    CPPUNIT_ASSERT( a1.ToString() == _T("-1311768467139281697") );
+    CPPUNIT_ASSERT( a1.ToString() == wxT("-1311768467139281697") );
     a1.Negate();
-    CPPUNIT_ASSERT( a1.ToString() == _T("1311768467139281697") );
+    CPPUNIT_ASSERT( a1.ToString() == wxT("1311768467139281697") );
 #endif
 
 #if wxUSE_LONGLONG_NATIVE
     wxLongLongNative a2(a.GetHi(), a.GetLo());
-    CPPUNIT_ASSERT( a2.ToString() == _T("-1311768467139281697") );
+    CPPUNIT_ASSERT( a2.ToString() == wxT("-1311768467139281697") );
     a2.Negate();
-    CPPUNIT_ASSERT( a2.ToString() == _T("1311768467139281697") );
+    CPPUNIT_ASSERT( a2.ToString() == wxT("1311768467139281697") );
 #endif
 
 }
--- tests/filesys/filesystest.cpp-orig	2009-06-18 18:58:17.175398000 -0500
+++ tests/filesys/filesystest.cpp	2009-06-18 18:58:25.027753000 -0500
@@ -84,20 +84,20 @@ void FileSystemTestCase::UrlParsing()
     } data[] =
     {
         // simple case:
-        { _T("http://www.root.cz/index.html"),
-                _T("http"), _T(""), _T("//www.root.cz/index.html"), _T("")},
+        { wxT("http://www.root.cz/index.html"),
+                wxT("http"), wxT(""), wxT("//www.root.cz/index.html"), wxT("")},
         // anchors:
-        { _T("http://www.root.cz/index.html#lbl"),
-                _T("http"), _T(""), _T("//www.root.cz/index.html"), _T("lbl")},
+        { wxT("http://www.root.cz/index.html#lbl"),
+                wxT("http"), wxT(""), wxT("//www.root.cz/index.html"), wxT("lbl")},
         // file is default protocol:
-        { _T("testfile.html"),
-                _T("file"), _T(""), _T("testfile.html"), _T("")},
+        { wxT("testfile.html"),
+                wxT("file"), wxT(""), wxT("testfile.html"), wxT("")},
         // stacked protocols:
-        { _T("file:myzipfile.zip#zip:index.htm"),
-                _T("zip"), _T("file:myzipfile.zip"), _T("index.htm"), _T("")},
+        { wxT("file:myzipfile.zip#zip:index.htm"),
+                wxT("zip"), wxT("file:myzipfile.zip"), wxT("index.htm"), wxT("")},
         // changes to ':' parsing often break things:
-        { _T("file:a#b:foo"),
-                _T("b"), _T("file:a"), _T("foo"), _T("")}
+        { wxT("file:a#b:foo"),
+                wxT("b"), wxT("file:a"), wxT("foo"), wxT("")}
     };
 
     UrlTester tst;
@@ -114,7 +114,7 @@ void FileSystemTestCase::UrlParsing()
 void FileSystemTestCase::FileNameToUrlConversion()
 {
 #ifdef __WINDOWS__
-    wxFileName fn1(_T("\\\\server\\share\\path\\to\\file"));
+    wxFileName fn1(wxT("\\\\server\\share\\path\\to\\file"));
     wxString url1 = wxFileSystem::FileNameToURL(fn1);
    
     CPPUNIT_ASSERT( fn1.SameAs(wxFileSystem::URLToFileName(url1)) );
--- tests/textfile/textfiletest.cpp-orig	2009-06-18 18:58:34.814555000 -0500
+++ tests/textfile/textfiletest.cpp	2009-06-18 18:58:41.002612000 -0500
@@ -110,8 +110,8 @@ void TextFileTestCase::ReadDOS()
     CPPUNIT_ASSERT_EQUAL( (size_t)3, f.GetLineCount() );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_Dos, f.GetLineType(0) );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_None, f.GetLineType(2) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("bar")), f.GetLine(1) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("baz")), f.GetLastLine() );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("bar")), f.GetLine(1) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("baz")), f.GetLastLine() );
 }
 
 void TextFileTestCase::ReadUnix()
@@ -124,8 +124,8 @@ void TextFileTestCase::ReadUnix()
     CPPUNIT_ASSERT_EQUAL( (size_t)3, f.GetLineCount() );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_Unix, f.GetLineType(0) );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_None, f.GetLineType(2) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("bar")), f.GetLine(1) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("baz")), f.GetLastLine() );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("bar")), f.GetLine(1) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("baz")), f.GetLastLine() );
 }
 
 void TextFileTestCase::ReadMac()
@@ -138,8 +138,8 @@ void TextFileTestCase::ReadMac()
     CPPUNIT_ASSERT_EQUAL( (size_t)3, f.GetLineCount() );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_Mac, f.GetLineType(0) );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_None, f.GetLineType(2) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("bar")), f.GetLine(1) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("baz")), f.GetLastLine() );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("bar")), f.GetLine(1) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("baz")), f.GetLastLine() );
 }
 
 void TextFileTestCase::ReadMixed()
@@ -153,9 +153,9 @@ void TextFileTestCase::ReadMixed()
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_Mac, f.GetLineType(0) );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_Dos, f.GetLineType(1) );
     CPPUNIT_ASSERT_EQUAL( wxTextFileType_Unix, f.GetLineType(2) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("foo")), f.GetFirstLine() );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("bar")), f.GetLine(1) );
-    CPPUNIT_ASSERT_EQUAL( wxString(_T("baz")), f.GetLastLine() );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("foo")), f.GetFirstLine() );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("bar")), f.GetLine(1) );
+    CPPUNIT_ASSERT_EQUAL( wxString(wxT("baz")), f.GetLastLine() );
 }
 
 #if wxUSE_UNICODE
--- tests/fontmap/fontmaptest.cpp-orig	2009-06-18 18:57:44.314527000 -0500
+++ tests/fontmap/fontmaptest.cpp	2009-06-18 18:57:51.661547000 -0500
@@ -57,55 +57,55 @@ void FontMapperTestCase::NamesAndDesc()
     static const wxChar *charsets[] =
     {
         // some valid charsets
-        _T("us-ascii"    ),
-        _T("iso8859-1"   ),
-        _T("iso-8859-12" ),
-        _T("koi8-r"      ),
-        _T("utf-7"       ),
-        _T("cp1250"      ),
-        _T("windows-1252"),
+        wxT("us-ascii"    ),
+        wxT("iso8859-1"   ),
+        wxT("iso-8859-12" ),
+        wxT("koi8-r"      ),
+        wxT("utf-7"       ),
+        wxT("cp1250"      ),
+        wxT("windows-1252"),
 
         // and now some bogus ones
-        _T(""            ),
-        _T("cp1249"      ),
-        _T("iso--8859-1" ),
-        _T("iso-8859-19" ),
+        wxT(""            ),
+        wxT("cp1249"      ),
+        wxT("iso--8859-1" ),
+        wxT("iso-8859-19" ),
     };
 
     static const wxChar *names[] =
     {
         // some valid charsets
-        _T("default"     ),
-        _T("iso-8859-1"  ),
-        _T("iso-8859-12" ),
-        _T("koi8-r"      ),
-        _T("utf-7"       ),
-        _T("windows-1250"),
-        _T("windows-1252"),
+        wxT("default"     ),
+        wxT("iso-8859-1"  ),
+        wxT("iso-8859-12" ),
+        wxT("koi8-r"      ),
+        wxT("utf-7"       ),
+        wxT("windows-1250"),
+        wxT("windows-1252"),
 
         // and now some bogus ones
-        _T("default"     ),
-        _T("unknown--1"  ),
-        _T("unknown--1"  ),
-        _T("unknown--1"  ),
+        wxT("default"     ),
+        wxT("unknown--1"  ),
+        wxT("unknown--1"  ),
+        wxT("unknown--1"  ),
     };
 
     static const wxChar *descriptions[] =
     {
         // some valid charsets
-        _T("Default encoding"                  ),
-        _T("Western European (ISO-8859-1)"     ),
-        _T("Indian (ISO-8859-12)"              ),
-        _T("KOI8-R"                            ),
-        _T("Unicode 7 bit (UTF-7)"             ),
-        _T("Windows Central European (CP 1250)"),
-        _T("Windows Western European (CP 1252)"),
+        wxT("Default encoding"                  ),
+        wxT("Western European (ISO-8859-1)"     ),
+        wxT("Indian (ISO-8859-12)"              ),
+        wxT("KOI8-R"                            ),
+        wxT("Unicode 7 bit (UTF-7)"             ),
+        wxT("Windows Central European (CP 1250)"),
+        wxT("Windows Western European (CP 1252)"),
 
         // and now some bogus ones
-        _T("Default encoding"                  ),
-        _T("Unknown encoding (-1)"             ),
-        _T("Unknown encoding (-1)"             ),
-        _T("Unknown encoding (-1)"             ),
+        wxT("Default encoding"                  ),
+        wxT("Unknown encoding (-1)"             ),
+        wxT("Unknown encoding (-1)"             ),
+        wxT("Unknown encoding (-1)"             ),
     };
 
     for ( size_t n = 0; n < WXSIZEOF(charsets); n++ )
--- tests/datetime/datetimetest.cpp-orig	2009-06-18 18:57:31.112340000 -0500
+++ tests/datetime/datetimetest.cpp	2009-06-18 18:57:36.835418000 -0500
@@ -118,23 +118,23 @@ struct Date
     wxString Format() const
     {
         wxString s;
-        s.Printf(_T("%02d:%02d:%02d %10s %02d, %4d%s"),
+        s.Printf(wxT("%02d:%02d:%02d %10s %02d, %4d%s"),
                  hour, min, sec,
                  wxDateTime::GetMonthName(month).c_str(),
                  day,
                  abs(wxDateTime::ConvertYearToBC(year)),
-                 year > 0 ? _T("AD") : _T("BC"));
+                 year > 0 ? wxT("AD") : wxT("BC"));
         return s;
     }
 
     wxString FormatDate() const
     {
         wxString s;
-        s.Printf(_T("%02d-%s-%4d%s"),
+        s.Printf(wxT("%02d-%s-%4d%s"),
                  day,
                  wxDateTime::GetMonthName(month, wxDateTime::Name_Abbr).c_str(),
                  abs(wxDateTime::ConvertYearToBC(year)),
-                 year > 0 ? _T("AD") : _T("BC"));
+                 year > 0 ? wxT("AD") : wxT("BC"));
         return s;
     }
 };
@@ -315,21 +315,21 @@ void DateTimeTestCase::TestTimeWDays()
             wxString s, which;
             switch ( nWeek < -1 ? -nWeek : nWeek )
             {
-                case 1: which = _T("first"); break;
-                case 2: which = _T("second"); break;
-                case 3: which = _T("third"); break;
-                case 4: which = _T("fourth"); break;
-                case 5: which = _T("fifth"); break;
+                case 1: which = wxT("first"); break;
+                case 2: which = wxT("second"); break;
+                case 3: which = wxT("third"); break;
+                case 4: which = wxT("fourth"); break;
+                case 5: which = wxT("fifth"); break;
 
-                case -1: which = _T("last"); break;
+                case -1: which = wxT("last"); break;
             }
 
             if ( nWeek < -1 )
             {
-                which += _T(" from end");
+                which += wxT(" from end");
             }
 
-            s.Printf(_T("The %s %s of %s in %d"),
+            s.Printf(wxT("The %s %s of %s in %d"),
                      which.c_str(),
                      wxDateTime::GetWeekDayName(wday).c_str(),
                      wxDateTime::GetMonthName(month).c_str(),
@@ -605,12 +605,12 @@ void DateTimeTestCase::TestTimeFormat()
         const wxChar *format;
     } formatTestFormats[] =
     {
-       { CompareYear, _T("---> %c") }, // %c could use 2 digit years
-       { CompareDate, _T("Date is %A, %d of %B, in year %Y") },
-       { CompareYear, _T("Date is %x, time is %X") }, // %x could use 2 digits
-       { CompareTime, _T("Time is %H:%M:%S or %I:%M:%S %p") },
-       { CompareNone, _T("The day of year: %j, the week of year: %W") },
-       { CompareDate, _T("ISO date without separators: %Y%m%d") },
+       { CompareYear, wxT("---> %c") }, // %c could use 2 digit years
+       { CompareDate, wxT("Date is %A, %d of %B, in year %Y") },
+       { CompareYear, wxT("Date is %x, time is %X") }, // %x could use 2 digits
+       { CompareTime, wxT("Time is %H:%M:%S or %I:%M:%S %p") },
+       { CompareNone, wxT("The day of year: %j, the week of year: %W") },
+       { CompareDate, wxT("ISO date without separators: %Y%m%d") },
     };
 
     static const Date formatTestDates[] =
@@ -677,7 +677,7 @@ void DateTimeTestCase::TestTimeFormat()
                         break;
 
                     case CompareNone:
-                        wxFAIL_MSG( _T("unexpected") );
+                        wxFAIL_MSG( wxT("unexpected") );
                         break;
                 }
             }
@@ -694,20 +694,20 @@ void DateTimeTestCase::TestTimeSpanForma
         const wxChar *result;
     } testSpans[] =
     {
-        {   12, 34, 56, 789, _T("%H:%M:%S.%l"),   _T("12:34:56.789")          },
-        {    1,  2,  3,   0, _T("%H:%M:%S"),      _T("01:02:03")              },
-        {    1,  2,  3,   0, _T("%S"),            _T("3723")                  },
-        {   -1, -2, -3,   0, _T("%S"),            _T("-3723")                 },
-        {   -1, -2, -3,   0, _T("%H:%M:%S"),      _T("-01:02:03")             },
-        {   26,  0,  0,   0, _T("%H"),            _T("26")                    },
-        {   26,  0,  0,   0, _T("%D, %H"),        _T("1, 02")                 },
-        {  -26,  0,  0,   0, _T("%H"),            _T("-26")                   },
-        {  -26,  0,  0,   0, _T("%D, %H"),        _T("-1, 02")                },
-        {  219,  0,  0,   0, _T("%H"),            _T("219")                   },
-        {  219,  0,  0,   0, _T("%D, %H"),        _T("9, 03")                 },
-        {  219,  0,  0,   0, _T("%E, %D, %H"),    _T("1, 2, 03")              },
-        {    0, -1,  0,   0, _T("%H:%M:%S"),      _T("-00:01:00")             },
-        {    0,  0, -1,   0, _T("%H:%M:%S"),      _T("-00:00:01")             },
+        {   12, 34, 56, 789, wxT("%H:%M:%S.%l"),   wxT("12:34:56.789")          },
+        {    1,  2,  3,   0, wxT("%H:%M:%S"),      wxT("01:02:03")              },
+        {    1,  2,  3,   0, wxT("%S"),            wxT("3723")                  },
+        {   -1, -2, -3,   0, wxT("%S"),            wxT("-3723")                 },
+        {   -1, -2, -3,   0, wxT("%H:%M:%S"),      wxT("-01:02:03")             },
+        {   26,  0,  0,   0, wxT("%H"),            wxT("26")                    },
+        {   26,  0,  0,   0, wxT("%D, %H"),        wxT("1, 02")                 },
+        {  -26,  0,  0,   0, wxT("%H"),            wxT("-26")                   },
+        {  -26,  0,  0,   0, wxT("%D, %H"),        wxT("-1, 02")                },
+        {  219,  0,  0,   0, wxT("%H"),            wxT("219")                   },
+        {  219,  0,  0,   0, wxT("%D, %H"),        wxT("9, 03")                 },
+        {  219,  0,  0,   0, wxT("%E, %D, %H"),    wxT("1, 2, 03")              },
+        {    0, -1,  0,   0, wxT("%H:%M:%S"),      wxT("-00:01:00")             },
+        {    0,  0, -1,   0, wxT("%H:%M:%S"),      wxT("-00:00:01")             },
     };
 
     for ( size_t n = 0; n < WXSIZEOF(testSpans); n++ )
@@ -759,23 +759,23 @@ void DateTimeTestCase::TestParceRFC822()
     } parseTestDates[] =
     {
         {
-            _T("Sat, 18 Dec 1999 00:46:40 +0100"),
+            wxT("Sat, 18 Dec 1999 00:46:40 +0100"),
             { 17, wxDateTime::Dec, 1999, 23, 46, 40 },
             true
         },
         {
-            _T("Wed, 1 Dec 1999 05:17:20 +0300"),
+            wxT("Wed, 1 Dec 1999 05:17:20 +0300"),
             {  1, wxDateTime::Dec, 1999, 2, 17, 20 },
             true
         },
         {
-            _T("Sun, 28 Aug 2005 03:31:30 +0200"),
+            wxT("Sun, 28 Aug 2005 03:31:30 +0200"),
             {  28, wxDateTime::Aug, 2005, 1, 31, 30 },
             true
         },
 
         {
-            _T("Sat, 18 Dec 1999 10:48:30 -0500"),
+            wxT("Sat, 18 Dec 1999 10:48:30 -0500"),
             {  18, wxDateTime::Dec, 1999, 15, 48, 30 },
             true
         },
@@ -808,21 +808,21 @@ void DateTimeTestCase::TestDateParse()
         bool good;
     } parseTestDates[] =
     {
-        { _T("21 Mar 2006"), { 21, wxDateTime::Mar, 2006 }, true },
-        { _T("29 Feb 1976"), { 29, wxDateTime::Feb, 1976 }, true },
-        { _T("Feb 29 1976"), { 29, wxDateTime::Feb, 1976 }, true },
-        { _T("31/03/06"),    { 31, wxDateTime::Mar,    6 }, true },
-        { _T("31/03/2006"),  { 31, wxDateTime::Mar, 2006 }, true },
+        { wxT("21 Mar 2006"), { 21, wxDateTime::Mar, 2006 }, true },
+        { wxT("29 Feb 1976"), { 29, wxDateTime::Feb, 1976 }, true },
+        { wxT("Feb 29 1976"), { 29, wxDateTime::Feb, 1976 }, true },
+        { wxT("31/03/06"),    { 31, wxDateTime::Mar,    6 }, true },
+        { wxT("31/03/2006"),  { 31, wxDateTime::Mar, 2006 }, true },
 
         // some invalid ones too
-        { _T("29 Feb 2006") },
-        { _T("31/04/06") },
-        { _T("bloordyblop") }
+        { wxT("29 Feb 2006") },
+        { wxT("31/04/06") },
+        { wxT("bloordyblop") }
     };
 
     // special cases
     wxDateTime dt;
-    CPPUNIT_ASSERT( dt.ParseDate(_T("today")) );
+    CPPUNIT_ASSERT( dt.ParseDate(wxT("today")) );
     CPPUNIT_ASSERT_EQUAL( wxDateTime::Today(), dt );
 
     for ( size_t n = 0; n < WXSIZEOF(parseTestDates); n++ )
--- tests/uris/uris.cpp-orig	2009-06-18 18:58:01.140504000 -0500
+++ tests/uris/uris.cpp	2009-06-18 18:58:05.530357000 -0500
@@ -386,7 +386,7 @@ void URITestCase::URLCompat()
         wxInputStream* is = urlProblem.GetInputStream();
         CPPUNIT_ASSERT(is != NULL);
 
-        wxFile fOut(_T("test.html"), wxFile::write);
+        wxFile fOut(wxT("test.html"), wxFile::write);
         wxASSERT(fOut.IsOpened());
 
         char buf[1001];
--- tests/streams/zlibstream.cpp-orig	2009-06-18 18:54:51.429645000 -0500
+++ tests/streams/zlibstream.cpp	2009-06-18 18:54:56.811258000 -0500
@@ -35,7 +35,7 @@ using std::string;
 
 #define DATABUFFER_SIZE 1024
 
-static const wxString FILENAME_GZ = _T("zlibtest.gz");
+static const wxString FILENAME_GZ = wxT("zlibtest.gz");
 
 ///////////////////////////////////////////////////////////////////////////////
 // The test case
@@ -159,7 +159,7 @@ zlibStream::zlibStream()
 
 /* Example code on how to produce test data...
     {
-        wxFFileOutputStream fstream_out(_T("gentest.cpp"));
+        wxFFileOutputStream fstream_out(wxT("gentest.cpp"));
         wxTextOutputStream out( fstream_out );
 
         genExtTestData(out, "zlib data created with wxWidgets 2.5.x [March 27], wxZLIB_NO_HEADER, zlib 1.1.4", wxZLIB_NO_HEADER);
@@ -377,10 +377,10 @@ void zlibStream::doTestStreamData(int in
     if (fail_pos != DATABUFFER_SIZE || !bWasEOF)
     {
         wxString msg;
-        msg << _T("Wrong data item at pos ") << fail_pos
-            << _T(" (Org_val ") << GetDataBuffer()[fail_pos]
-            << _T(" != Zlib_val ") << last_value
-            << _T("), with compression level ") << compress_level;
+        msg << wxT("Wrong data item at pos ") << fail_pos
+            << wxT(" (Org_val ") << GetDataBuffer()[fail_pos]
+            << wxT(" != Zlib_val ") << last_value
+            << wxT("), with compression level ") << compress_level;
         CPPUNIT_FAIL(string(msg.mb_str()));
     }
 }
@@ -403,18 +403,18 @@ void zlibStream::doDecompress_ExternalDa
 #endif
     case wxZLIB_ZLIB:
         if (!(data_size >= 1 && data[0] == 0x78))
-            wxLogError(_T("zlib data seems to not be zlib data!"));
+            wxLogError(wxT("zlib data seems to not be zlib data!"));
         break;
     case wxZLIB_GZIP:
         if (!(data_size >= 2 && data[0] == 0x1F && data[1] == 0x8B))
-            wxLogError(_T("gzip data seems to not be gzip data!"));
+            wxLogError(wxT("gzip data seems to not be gzip data!"));
         break;
     case wxZLIB_AUTO:
         if (!(data_size >= 1 && data[0] == 0x78) ||
             !(data_size >= 2 && data[0] == 0x1F && data[1] == 0x8B))
-            wxLogError(_T("Data seems to not be zlib or gzip data!"));
+            wxLogError(wxT("Data seems to not be zlib or gzip data!"));
     default:
-        wxLogError(_T("Unknown flag, skipping quick test."));
+        wxLogError(wxT("Unknown flag, skipping quick test."));
     };
 
     // Creat the needed streams.
@@ -525,25 +525,25 @@ void zlibStream::genExtTestData(wxTextOu
         memstream_out.CopyTo(data, size);
     }
 
-    out << _T("void zlibStream::Decompress_wxXXXData()") << _T("\n");
-    out << _T("{") << _T("\n") << _T("    const unsigned char data[] = {");
+    out << wxT("void zlibStream::Decompress_wxXXXData()") << wxT("\n");
+    out << wxT("{") << wxT("\n") << wxT("    const unsigned char data[] = {");
 
     size_t i;
     for (i = 0; i < size; i++)
     {
         if (i+1 != size)
-            out << wxString::Format(_T("%d,"), data[i]);
+            out << wxString::Format(wxT("%d,"), data[i]);
         else
-            out << wxString::Format(_T("%d"), data[i]);
+            out << wxString::Format(wxT("%d"), data[i]);
     }
     delete [] data;
 
-    out << _T("};") << _T("\n");
-    out << _T("    const char *value = \"") << wxString(buf, wxConvUTF8) << _T("\";") << _T("\n");
-    out << _T("    const size_t data_size = sizeof(data);") << _T("\n");
-    out << _T("    const size_t value_size = strlen(value);") << _T("\n");
-    out << _T("    doDecompress_ExternalData(data, value, data_size, value_size);") << _T("\n");
-    out << _T("}") << _T("\n");
+    out << wxT("};") << wxT("\n");
+    out << wxT("    const char *value = \"") << wxString(buf, wxConvUTF8) << wxT("\";") << wxT("\n");
+    out << wxT("    const size_t data_size = sizeof(data);") << wxT("\n");
+    out << wxT("    const size_t value_size = strlen(value);") << wxT("\n");
+    out << wxT("    doDecompress_ExternalData(data, value, data_size, value_size);") << wxT("\n");
+    out << wxT("}") << wxT("\n");
 }
 
 
--- tests/streams/datastreamtest.cpp-orig	2009-06-18 18:55:06.252034000 -0500
+++ tests/streams/datastreamtest.cpp	2009-06-18 18:55:17.062772000 -0500
@@ -75,7 +75,7 @@ DataStreamTestCase::DataStreamTestCase()
 static
 wxFloat64 TestFloatRW(wxFloat64 fValue)
 {
-    wxFileOutputStream* pFileOutput = new wxFileOutputStream( _T("mytext.dat") );
+    wxFileOutputStream* pFileOutput = new wxFileOutputStream( wxT("mytext.dat") );
     wxDataOutputStream* pDataOutput = new wxDataOutputStream( *pFileOutput );
 
     *pDataOutput << fValue;
@@ -83,7 +83,7 @@ wxFloat64 TestFloatRW(wxFloat64 fValue)
     delete pDataOutput;
     delete pFileOutput;
 
-    wxFileInputStream* pFileInput = new wxFileInputStream( _T("mytext.dat") );
+    wxFileInputStream* pFileInput = new wxFileInputStream( wxT("mytext.dat") );
     wxDataInputStream* pDataInput = new wxDataInputStream( *pFileInput );
 
     wxFloat64 fInFloat;
@@ -115,14 +115,14 @@ private:
         ValueArray InValues(Size);
 
         {
-            wxFileOutputStream FileOutput( _T("mytext.dat") );
+            wxFileOutputStream FileOutput( wxT("mytext.dat") );
             wxDataOutputStream DataOutput( FileOutput );
 
             (DataOutput.*pfnWriter)(Values, Size);
         }
 
         {
-            wxFileInputStream FileInput( _T("mytext.dat") );
+            wxFileInputStream FileInput( wxT("mytext.dat") );
             wxDataInputStream DataInput( FileInput );
 
             (DataInput.*pfnReader)(&*InValues.begin(), InValues.size());
@@ -165,14 +165,14 @@ T TestRW(const T &Value)
     T InValue;
 
     {
-        wxFileOutputStream FileOutput( _T("mytext.dat") );
+        wxFileOutputStream FileOutput( wxT("mytext.dat") );
         wxDataOutputStream DataOutput( FileOutput );
 
         DataOutput << Value;
     }
 
     {
-        wxFileInputStream FileInput( _T("mytext.dat") );
+        wxFileInputStream FileInput( wxT("mytext.dat") );
         wxDataInputStream DataInput( FileInput );
 
         DataInput >> InValue;
--- tests/streams/textstreamtest.cpp-orig	2009-06-18 18:55:24.959924000 -0500
+++ tests/streams/textstreamtest.cpp	2009-06-18 18:55:32.348824000 -0500
@@ -104,15 +104,15 @@ TextStreamTestCase::TextStreamTestCase()
 
 void TextStreamTestCase::Endline()
 {
-    wxFileOutputStream* pOutFile = new wxFileOutputStream(_T("test.txt"));
+    wxFileOutputStream* pOutFile = new wxFileOutputStream(wxT("test.txt"));
     wxTextOutputStream* pOutText = new wxTextOutputStream(*pOutFile);
-    *pOutText   << _T("Test text") << endl
-                << _T("More Testing Text (There should be newline before this)");
+    *pOutText   << wxT("Test text") << endl
+                << wxT("More Testing Text (There should be newline before this)");
 
     delete pOutText;
     delete pOutFile;
 
-    wxFileInputStream* pInFile = new wxFileInputStream(_T("test.txt"));
+    wxFileInputStream* pInFile = new wxFileInputStream(wxT("test.txt"));
 
     char szIn[9 + NEWLINELEN];
 
@@ -129,7 +129,7 @@ template <typename T>
 static void DoTestRoundTrip(const T *values, size_t numValues)
 {
     {
-        wxFileOutputStream fileOut(_T("test.txt"));
+        wxFileOutputStream fileOut(wxT("test.txt"));
         wxTextOutputStream textOut(fileOut);
 
         for ( size_t n = 0; n < numValues; n++ )
@@ -139,7 +139,7 @@ static void DoTestRoundTrip(const T *val
     }
 
     {
-        wxFileInputStream fileIn(_T("test.txt"));
+        wxFileInputStream fileIn(wxT("test.txt"));
         wxTextInputStream textIn(fileIn);
 
         T value;
--- tests/streams/largefile.cpp-orig	2009-06-18 18:55:38.354398000 -0500
+++ tests/streams/largefile.cpp	2009-06-18 18:55:43.283235000 -0500
@@ -71,7 +71,7 @@ void LargeFileTest::runTest()
 {
     // self deleting temp file
     struct TmpFile {
-        TmpFile() : m_name(wxFileName::CreateTempFileName(_T("wxlfs-"))) { }
+        TmpFile() : m_name(wxFileName::CreateTempFileName(wxT("wxlfs-"))) { }
         ~TmpFile() { if (!m_name.empty()) wxRemoveFile(m_name); }
         wxString m_name;
     } tmpfile;
@@ -84,12 +84,12 @@ void LargeFileTest::runTest()
     if (!HasLFS()) {
         haveLFS = false;
         wxString n(getName().c_str(), *wxConvCurrent);
-        wxLogInfo(n + _T(": No large file support, testing up to 2GB only"));
+        wxLogInfo(n + wxT(": No large file support, testing up to 2GB only"));
     }
     else if (IsFAT(tmpfile.m_name)) {
         fourGigLimit = true;
         wxString n(getName().c_str(), *wxConvCurrent);
-        wxLogInfo(n + _T(": FAT volumes are limited to 4GB files"));
+        wxLogInfo(n + wxT(": FAT volumes are limited to 4GB files"));
     }
 
     // size of the test blocks
@@ -246,7 +246,7 @@ wxInputStream *LargeFileTest_wxFFile::Ma
 
 wxOutputStream *LargeFileTest_wxFFile::MakeOutStream(const wxString& name) const
 {
-    wxFFile file(name, _T("w"));
+    wxFFile file(name, wxT("w"));
     CPPUNIT_ASSERT(file.IsOpened());
     FILE *fp = file.fp();
     file.Detach();
@@ -321,17 +321,17 @@ void GetVolumeInfo(const wxString& path)
     // extract the volume 'C:\' or '\\tooter\share\' from the path
     wxString vol;
     
-    if (path.substr(1, 2) == _T(":\\")) {
+    if (path.substr(1, 2) == wxT(":\\")) {
         vol = path.substr(0, 3);
     } else {
-        if (path.substr(0, 2) == _T("\\\\")) {
-            size_t i = path.find(_T('\\'), 2);
+        if (path.substr(0, 2) == wxT("\\\\")) {
+            size_t i = path.find(wxT('\\'), 2);
 
             if (i != wxString::npos && i > 2) {
-                size_t j = path.find(_T('\\'), ++i);
+                size_t j = path.find(wxT('\\'), ++i);
 
                 if (j != i)
-                    vol = path.substr(0, j) + _T("\\");
+                    vol = path.substr(0, j) + wxT("\\");
             }
         }
     }
@@ -343,7 +343,7 @@ void GetVolumeInfo(const wxString& path)
                                 &volumeFlags, 
                                 volumeType,
                                 WXSIZEOF(volumeType)))
-        wxLogSysError(_T("GetVolumeInformation() failed"));
+        wxLogSysError(wxT("GetVolumeInformation() failed"));
 
     volumeInfoInit = true;
 }
@@ -352,7 +352,7 @@ bool IsFAT(const wxString& path)
 {
     if (!volumeInfoInit)
         GetVolumeInfo(path);
-    return wxString(volumeType).Upper().find(_T("FAT")) != wxString::npos;
+    return wxString(volumeType).Upper().find(wxT("FAT")) != wxString::npos;
 }
 
 void MakeSparse(const wxString& path, int fd)
@@ -373,7 +373,7 @@ CppUnit::Test* GetlargeFileSuite()
 {
     if (!volumeInfoInit) {
         wxFile file;
-        wxString path = wxFileName::CreateTempFileName(_T("wxlfs-"), &file);
+        wxString path = wxFileName::CreateTempFileName(wxT("wxlfs-"), &file);
         MakeSparse(path, file.fd());
         wxRemoveFile(path);
     }
--- tests/streams/ffilestream.cpp-orig	2009-06-18 18:56:13.652396000 -0500
+++ tests/streams/ffilestream.cpp	2009-06-18 18:56:19.295522000 -0500
@@ -26,8 +26,8 @@
 
 #define DATABUFFER_SIZE     1024
 
-static const wxString FILENAME_FFILEINSTREAM = _T("ffileinstream.test");
-static const wxString FILENAME_FFILEOUTSTREAM = _T("ffileoutstream.test");
+static const wxString FILENAME_FFILEINSTREAM = wxT("ffileinstream.test");
+static const wxString FILENAME_FFILEOUTSTREAM = wxT("ffileoutstream.test");
 
 ///////////////////////////////////////////////////////////////////////////////
 // The test case
--- tests/streams/sstream.cpp-orig	2009-06-18 18:56:25.951053000 -0500
+++ tests/streams/sstream.cpp	2009-06-18 18:56:31.589492000 -0500
@@ -74,7 +74,7 @@ strStream::strStream()
     m_str.reserve(LEN);
     for ( size_t n = 0; n < LEN; n++ )
     {
-        m_str += _T('A') + n % (_T('Z') - _T('A') + 1);
+        m_str += wxT('A') + n % (wxT('Z') - wxT('A') + 1);
     }
 }
 
--- tests/streams/bstream.h-orig	2009-06-18 18:56:36.890517000 -0500
+++ tests/streams/bstream.h	2009-06-18 18:56:41.830142000 -0500
@@ -371,7 +371,7 @@ protected:
     { 
         if (m_pCurrentIn)
         {
-            wxFAIL_MSG(_T("Error in test case, the previouse input stream needs to be delete first!"));
+            wxFAIL_MSG(wxT("Error in test case, the previouse input stream needs to be delete first!"));
         }
 
         m_pCurrentIn = DoCreateInStream();
@@ -382,7 +382,7 @@ protected:
     { 
         if (m_pCurrentOut)
         {
-            wxFAIL_MSG(_T("Error in test case, the previouse output stream needs to be delete first!"));
+            wxFAIL_MSG(wxT("Error in test case, the previouse output stream needs to be delete first!"));
         }
 
         m_pCurrentOut = DoCreateOutStream();
--- tests/streams/tempfile.cpp-orig	2009-06-18 18:57:11.947872000 -0500
+++ tests/streams/tempfile.cpp	2009-06-18 18:57:22.023780000 -0500
@@ -43,7 +43,7 @@ private:
 TestFile::TestFile()
 {
     wxFile file;
-    m_name = wxFileName::CreateTempFileName(_T("wxtest"), &file);
+    m_name = wxFileName::CreateTempFileName(wxT("wxtest"), &file);
     file.Write("Before", 6);
 }
 
--- tests/streams/filestream.cpp-orig	2009-06-21 16:45:37.234439000 -0500
+++ tests/streams/filestream.cpp	2009-06-18 18:56:56.314326000 -0500
@@ -26,8 +26,8 @@
 
 #define DATABUFFER_SIZE     1024
 
-static const wxString FILENAME_FILEINSTREAM = _T("fileinstream.test");
-static const wxString FILENAME_FILEOUTSTREAM = _T("fileoutstream.test");
+static const wxString FILENAME_FILEINSTREAM = wxT("fileinstream.test");
+static const wxString FILENAME_FILEOUTSTREAM = wxT("fileoutstream.test");
 
 ///////////////////////////////////////////////////////////////////////////////
 // The test case
--- tests/archive/archivetest.cpp-orig	2009-06-18 18:54:19.943653000 -0500
+++ tests/archive/archivetest.cpp	2009-06-18 18:54:26.023783000 -0500
@@ -333,7 +333,7 @@ private:
 
 TempDir::TempDir()
 {
-    wxString tmp = wxFileName::CreateTempFileName(_T("arctest-"));
+    wxString tmp = wxFileName::CreateTempFileName(wxT("arctest-"));
     if (!tmp.empty()) {
         wxRemoveFile(tmp);
         m_original = wxGetCwd();
@@ -354,26 +354,26 @@ TempDir::~TempDir()
 void TempDir::RemoveDir(wxString& path)
 {
     wxCHECK_RET(!m_tmp.empty() && path.substr(0, m_tmp.length()) == m_tmp,
-                _T("remove '") + path + _T("' fails safety check"));
+                wxT("remove '") + path + wxT("' fails safety check"));
 
     const wxChar *files[] = {
-        _T("text/empty"),
-        _T("text/small"),
-        _T("bin/bin1000"),
-        _T("bin/bin4095"),
-        _T("bin/bin4096"),
-        _T("bin/bin4097"),
-        _T("bin/bin16384"),
-        _T("zero/zero5"),
-        _T("zero/zero1024"),
-        _T("zero/zero32768"),
-        _T("zero/zero16385"),
-        _T("zero/newname"),
-        _T("newfile"),
+        wxT("text/empty"),
+        wxT("text/small"),
+        wxT("bin/bin1000"),
+        wxT("bin/bin4095"),
+        wxT("bin/bin4096"),
+        wxT("bin/bin4097"),
+        wxT("bin/bin16384"),
+        wxT("zero/zero5"),
+        wxT("zero/zero1024"),
+        wxT("zero/zero32768"),
+        wxT("zero/zero16385"),
+        wxT("zero/newname"),
+        wxT("newfile"),
     };
 
     const wxChar *dirs[] = {
-        _T("text/"), _T("bin/"), _T("zero/"), _T("empty/")
+        wxT("text/"), wxT("bin/"), wxT("zero/"), wxT("empty/")
     };
 
     wxString tmp = m_tmp + wxFileName::GetPathSeparator();
@@ -386,7 +386,7 @@ void TempDir::RemoveDir(wxString& path)
         wxRmdir(tmp + wxFileName(dirs[i], wxPATH_UNIX).GetFullPath());
 
     if (!wxRmdir(m_tmp))
-        wxLogSysError(_T("can't remove temporary dir '%s'"), m_tmp.c_str());
+        wxLogSysError(wxT("can't remove temporary dir '%s'"), m_tmp.c_str());
 }
 
 
@@ -576,13 +576,13 @@ void ArchiveTestCase<ClassFactoryT>::Cre
         // It should be possible to create a directory entry just by supplying
         // a name that looks like a directory, or alternatively any old name
         // can be identified as a directory using SetIsDir or PutNextDirEntry
-        bool setIsDir = name.Last() == _T('/') && (choices & 1);
+        bool setIsDir = name.Last() == wxT('/') && (choices & 1);
         if (setIsDir)
             name.erase(name.length() - 1);
 
         // provide some context for the error message so that we know which
         // iteration of the loop we were on
-        string error_entry((_T(" '") + name + _T("'")).mb_str());
+        string error_entry((wxT(" '") + name + wxT("'")).mb_str());
         string error_context(" failed for entry" + error_entry);
 
         if ((choices & 2) || testEntry.IsText()) {
@@ -609,7 +609,7 @@ void ArchiveTestCase<ClassFactoryT>::Cre
                                       testEntry.GetLength()));
         }
 
-        if (it->first.Last() != _T('/')) {
+        if (it->first.Last() != wxT('/')) {
             // for non-dirs write the data
             arc->Write(testEntry.GetData(), testEntry.GetSize());
             CPPUNIT_ASSERT_MESSAGE("LastWrite check" + error_context,
@@ -667,7 +667,7 @@ void ArchiveTestCase<ClassFactoryT>::Cre
 
     if ((m_options & PipeOut) == 0) {
         wxFileName fn(tmpdir.GetName());
-        fn.SetExt(_T("arc"));
+        fn.SetExt(wxT("arc"));
         wxString tmparc = fn.GetPath(wxPATH_GET_SEPARATOR) + fn.GetFullName();
 
         // call the archiver to create an archive file
@@ -685,7 +685,7 @@ void ArchiveTestCase<ClassFactoryT>::Cre
     else {
         // for the non-seekable test, have the archiver output to "-"
         // and read the archive via a pipe
-        PFileInputStream in(wxString::Format(archiver, _T("-")));
+        PFileInputStream in(wxString::Format(archiver, wxT("-")));
         if (in.Ok())
             out.Write(in);
     }
@@ -702,10 +702,10 @@ void ArchiveTestCase<ClassFactoryT>::Mod
     auto_ptr<OutputStreamT> arcOut(m_factory->NewStream(out));
     EntryT *pEntry;
 
-    const wxString deleteName = _T("bin/bin1000");
-    const wxString renameFrom = _T("zero/zero1024");
-    const wxString renameTo   = _T("zero/newname");
-    const wxString newName    = _T("newfile");
+    const wxString deleteName = wxT("bin/bin1000");
+    const wxString renameFrom = wxT("zero/zero1024");
+    const wxString renameTo   = wxT("zero/newname");
+    const wxString newName    = wxT("newfile");
     const char *newData       = "New file added as a test\n";
 
     arcOut->CopyArchiveMetaData(*arcIn);
@@ -717,7 +717,7 @@ void ArchiveTestCase<ClassFactoryT>::Mod
 
         // provide some context for the error message so that we know which
         // iteration of the loop we were on
-        string error_entry((_T(" '") + name + _T("'")).mb_str());
+        string error_entry((wxT(" '") + name + wxT("'")).mb_str());
         string error_context(" failed for entry" + error_entry);
 
         if (name == deleteName) {
@@ -792,7 +792,7 @@ void ArchiveTestCase<ClassFactoryT>::Ext
 
         // provide some context for the error message so that we know which
         // iteration of the loop we were on
-        string error_entry((_T(" '") + name + _T("'")).mb_str());
+        string error_entry((wxT(" '") + name + wxT("'")).mb_str());
         string error_context(" failed for entry" + error_entry);
 
         TestEntries::iterator it = m_testEntries.find(name);
@@ -816,7 +816,7 @@ void ArchiveTestCase<ClassFactoryT>::Ext
             "arc->GetLength() == entry->GetSize()" + error_context,
             arc->GetLength() == entry->GetSize());
 
-        if (name.Last() != _T('/'))
+        if (name.Last() != wxT('/'))
         {
             CPPUNIT_ASSERT_MESSAGE("!IsDir" + error_context,
                 !entry->IsDir());
@@ -876,7 +876,7 @@ void ArchiveTestCase<ClassFactoryT>::Ext
 
     if ((m_options & PipeIn) == 0) {
         wxFileName fn(tmpdir.GetName());
-        fn.SetExt(_T("arc"));
+        fn.SetExt(wxT("arc"));
         wxString tmparc = fn.GetPath(wxPATH_GET_SEPARATOR) + fn.GetFullName();
 
         if (m_options & Stub)
@@ -896,7 +896,7 @@ void ArchiveTestCase<ClassFactoryT>::Ext
     else {
         // for the non-seekable test, have the archiver extract "-" and
         // feed it the archive via a pipe
-        PFileOutputStream out(wxString::Format(unarchiver, _T("-")));
+        PFileOutputStream out(wxString::Format(unarchiver, wxT("-")));
         if (out.Ok())
             out.Write(in);
     }
@@ -927,11 +927,11 @@ void ArchiveTestCase<ClassFactoryT>::Ver
 
             bool isDir = wxDirExists(path);
             if (isDir)
-                name += _T("/");
+                name += wxT("/");
 
             // provide some context for the error message so that we know which
             // iteration of the loop we were on
-            string error_entry((_T(" '") + name + _T("'")).mb_str());
+            string error_entry((wxT(" '") + name + wxT("'")).mb_str());
             string error_context(" failed for entry" + error_entry);
 
             TestEntries::iterator it = m_testEntries.find(name);
@@ -1110,8 +1110,8 @@ void ArchiveTestCase<ClassFactoryT>::Rea
 #endif
 
     // the names of two entries to read
-    const wxChar *name = _T("text/small");
-    const wxChar *name2 = _T("bin/bin1000");
+    const wxChar *name = wxT("text/small");
+    const wxChar *name2 = wxT("bin/bin1000");
 
     // open them
     typename ArchiveCatalog::iterator j;
@@ -1232,9 +1232,9 @@ void CorruptionTestCase::CreateArchive(w
 {
     auto_ptr<wxArchiveOutputStream> arc(m_factory->NewStream(out));
 
-    arc->PutNextDirEntry(_T("dir"));
-    arc->PutNextEntry(_T("file"));
-    arc->Write(_T("foo"), 3);
+    arc->PutNextDirEntry(wxT("dir"));
+    arc->PutNextEntry(wxT("file"));
+    arc->Write(wxT("foo"), 3);
 }
 
 void CorruptionTestCase::ExtractArchive(wxInputStream& in)
@@ -1264,7 +1264,7 @@ int TestId::m_seed = 6219;
 string TestId::MakeId()
 {
     m_seed = (m_seed * 171) % 30269;
-    return string(wxString::Format(_T("%-6d"), m_seed).mb_str());
+    return string(wxString::Format(wxT("%-6d"), m_seed).mb_str());
 }
 
 
@@ -1275,10 +1275,10 @@ ArchiveTestSuite::ArchiveTestSuite(strin
   : CppUnit::TestSuite("archive/" + name),
     m_name(name.c_str(), *wxConvCurrent)
 {
-    m_name = _T("wx") + m_name.Left(1).Upper() + m_name.Mid(1).Lower();
-    m_path.AddEnvList(_T("PATH"));
-    m_archivers.push_back(_T(""));
-    m_unarchivers.push_back(_T(""));
+    m_name = wxT("wx") + m_name.Left(1).Upper() + m_name.Mid(1).Lower();
+    m_path.AddEnvList(wxT("PATH"));
+    m_archivers.push_back(wxT(""));
+    m_unarchivers.push_back(wxT(""));
 }
 
 // add the command for an external archiver to the list, testing for it in
@@ -1292,9 +1292,9 @@ void ArchiveTestSuite::AddCmd(wxArrayStr
 
 bool ArchiveTestSuite::IsInPath(const wxString& cmd)
 {
-    wxString c = cmd.BeforeFirst(_T(' '));
+    wxString c = cmd.BeforeFirst(wxT(' '));
 #ifdef __WXMSW__
-    c += _T(".exe");
+    c += wxT(".exe");
 #endif
     return !m_path.FindValidPath(c).empty();
 }
@@ -1329,7 +1329,7 @@ ArchiveTestSuite *ArchiveTestSuite::make
 
     for (int options = 0; options <= PipeIn; options += PipeIn) 
     {
-        wxObject *pObj = wxCreateDynamicObject(m_name + _T("ClassFactory"));
+        wxObject *pObj = wxCreateDynamicObject(m_name + wxT("ClassFactory"));
         wxArchiveClassFactory *factory;
         factory = wxDynamicCast(pObj, wxArchiveClassFactory);
 
@@ -1368,29 +1368,29 @@ string ArchiveTestSuite::Description(con
     wxString descr;
 
     if (genericInterface)
-        descr << _T("wxArchive (") << type << _T(")");
+        descr << wxT("wxArchive (") << type << wxT(")");
     else
         descr << type;
 
     if (!archiver.empty()) {
-        const wxChar *fn = (options & PipeOut) != 0 ? _T("-") : _T("file");
-        descr << _T(" (") << wxString::Format(archiver, fn) << _T(")");
+        const wxChar *fn = (options & PipeOut) != 0 ? wxT("-") : wxT("file");
+        descr << wxT(" (") << wxString::Format(archiver, fn) << wxT(")");
     }
     if (!unarchiver.empty()) {
-        const wxChar *fn = (options & PipeIn) != 0 ? _T("-") : _T("file");
-        descr << _T(" (") << wxString::Format(unarchiver, fn) << _T(")");
+        const wxChar *fn = (options & PipeIn) != 0 ? wxT("-") : wxT("file");
+        descr << wxT(" (") << wxString::Format(unarchiver, fn) << wxT(")");
     }
 
     wxString optstr;
 
     if ((options & PipeIn) != 0)
-        optstr += _T("|PipeIn");
+        optstr += wxT("|PipeIn");
     if ((options & PipeOut) != 0)
-        optstr += _T("|PipeOut");
+        optstr += wxT("|PipeOut");
     if ((options & Stub) != 0)
-        optstr += _T("|Stub");
+        optstr += wxT("|Stub");
     if (!optstr.empty())
-        optstr = _T(" (") + optstr.substr(1) + _T(")");
+        optstr = wxT(" (") + optstr.substr(1) + wxT(")");
 
     descr << optstr;
 
--- tests/archive/ziptest.cpp-orig	2009-06-18 18:54:36.332720000 -0500
+++ tests/archive/ziptest.cpp	2009-06-18 18:54:42.815830000 -0500
@@ -64,7 +64,7 @@ protected:
 
 void ZipTestCase::OnCreateArchive(wxZipOutputStream& zip)
 {
-    m_comment << _T("Comment for test ") << m_id;
+    m_comment << wxT("Comment for test ") << m_id;
     zip.SetComment(m_comment);
 }
 
@@ -84,7 +84,7 @@ void ZipTestCase::OnCreateEntry(wxZipOut
         switch ((m_id + m_count) % 5) {
             case 0:
             {
-                wxString comment = _T("Comment for ") + entry->GetName();
+                wxString comment = wxT("Comment for ") + entry->GetName();
                 entry->SetComment(comment);
                 // lowercase the expected result, and the notifier should do
                 // the same for the zip entries when ModifyArchive() runs
@@ -110,7 +110,7 @@ void ZipTestCase::OnEntryExtracted(wxZip
 {
     // provide some context for the error message so that we know which
     // iteration of the loop we were on
-    wxString name = _T(" '") + entry.GetName() + _T("'");
+    wxString name = wxT(" '") + entry.GetName() + wxT("'");
     string error_entry(name.mb_str());
     string error_context(" failed for entry" + error_entry);
 
@@ -175,8 +175,8 @@ void ZipPipeTestCase::runTest()
 {
     TestOutputStream out(m_options);
 
-    wxString testdata = _T("test data to pipe through zip");
-    wxString cmd = _T("echo ") + testdata + _T(" | zip -q - -");
+    wxString testdata = wxT("test data to pipe through zip");
+    wxString cmd = wxT("echo ") + testdata + wxT(" | zip -q - -");
 
     {
         PFileInputStream in(cmd);
@@ -225,8 +225,8 @@ protected:
 ziptest::ziptest()
   : ArchiveTestSuite("zip")
 {
-    AddArchiver(_T("zip -qr %s *"));
-    AddUnArchiver(_T("unzip -q %s"));
+    AddArchiver(wxT("zip -qr %s *"));
+    AddUnArchiver(wxT("unzip -q %s"));
 }
 
 ArchiveTestSuite *ziptest::makeSuite()
@@ -235,10 +235,10 @@ ArchiveTestSuite *ziptest::makeSuite()
 
 #ifndef WXARC_NO_POPEN 
     // if have popen then can check the piped output of 'zip - -'
-    if (IsInPath(_T("zip")))
+    if (IsInPath(wxT("zip")))
         for (int options = 0; options <= PipeIn; options += PipeIn) {
-            string name = Description(_T("ZipPipeTestCase"), options,
-                                      false, _T(""), _T("zip -q - -"));
+            string name = Description(wxT("ZipPipeTestCase"), options,
+                                      false, wxT(""), wxT("zip -q - -"));
             addTest(new ZipPipeTestCase(name, options));
         }
 #endif
--- tests/archive/tartest.cpp-orig	2009-06-18 19:02:12.582234000 -0500
+++ tests/archive/tartest.cpp	2009-06-18 19:02:18.275117000 -0500
@@ -44,8 +44,8 @@ protected:
 tartest::tartest()
   : ArchiveTestSuite("tar")
 {
-    AddArchiver(_T("tar cf %s *"));
-    AddUnArchiver(_T("tar xf %s"));
+    AddArchiver(wxT("tar cf %s *"));
+    AddUnArchiver(wxT("tar xf %s"));
 }
 
 CppUnit::Test *tartest::makeTest(
--- tests/mbconv/mbconvtest.cpp-orig	2009-06-18 18:53:50.030900000 -0500
+++ tests/mbconv/mbconvtest.cpp	2009-06-18 18:53:56.763134000 -0500
@@ -252,22 +252,22 @@ wxString CByteArrayFormat( const void* d
     const unsigned char* bytes = (unsigned char*)data;
     wxString result;
 
-    result.Printf( _T("const static unsigned char %s[%i] = \n{"), name, (int)len );
+    result.Printf( wxT("const static unsigned char %s[%i] = \n{"), name, (int)len );
 
     for ( size_t i = 0; i < len; i++ )
     {
         if ( i != 0 )
         {
-            result.append( _T(",") );
+            result.append( wxT(",") );
         }
         if ((i%16)==0)
         {
-            result.append( _T("\n    ") );
+            result.append( wxT("\n    ") );
         }
-        wxString byte = wxString::Format( _T("0x%02x"), bytes[i] );
+        wxString byte = wxString::Format( wxT("0x%02x"), bytes[i] );
         result.append(byte);
     }
-    result.append( _T("\n};\n") );
+    result.append( wxT("\n};\n") );
     return result;
 }
 
@@ -784,7 +784,7 @@ WXDLLIMPEXP_BASE wxMBConv* new_wxMBConv_
 void MBConvTestCase::FontmapTests()
 {
 #ifdef wxUSE_FONTMAP
-    wxMBConv* converter = new_wxMBConv_wxwin( _T("CP1252") );
+    wxMBConv* converter = new_wxMBConv_wxwin( wxT("CP1252") );
     if ( !converter )
     {
         return;
@@ -803,7 +803,7 @@ void MBConvTestCase::FontmapTests()
 
 void MBConvTestCase::BufSize()
 {
-    wxCSConv conv1251(_T("CP1251"));
+    wxCSConv conv1251(wxT("CP1251"));
     CPPUNIT_ASSERT( conv1251.IsOk() );
     const char *cp1251text =
         "\313\301\326\305\324\323\321 \325\304\301\336\316\331\315";
@@ -830,7 +830,7 @@ void MBConvTestCase::BufSize()
 
 
     // test in the other direction too, using an encoding with multibyte NUL
-    wxCSConv convUTF16(_T("UTF-16LE"));
+    wxCSConv convUTF16(wxT("UTF-16LE"));
     CPPUNIT_ASSERT( convUTF16.IsOk() );
     const wchar_t *utf16text = L"Hello";
 
@@ -856,7 +856,7 @@ WXDLLIMPEXP_BASE wxMBConv* new_wxMBConv_
 void MBConvTestCase::IconvTests()
 {
 #ifdef HAVE_ICONV
-    wxMBConv* converter = new_wxMBConv_iconv( _T("CP932") );
+    wxMBConv* converter = new_wxMBConv_iconv( wxT("CP932") );
     if ( !converter )
     {
         return;
--- tests/mbconv/convautotest.cpp-orig	2009-06-18 18:54:02.603472000 -0500
+++ tests/mbconv/convautotest.cpp	2009-06-18 18:54:09.682057000 -0500
@@ -78,37 +78,37 @@ void ConvAutoTestCase::TestFirstChar(con
 
 void ConvAutoTestCase::Empty()
 {
-    TestFirstChar("", _T('\0'));
+    TestFirstChar("", wxT('\0'));
 }
 
 void ConvAutoTestCase::Short()
 {
-    TestFirstChar("1", _T('1'));
+    TestFirstChar("1", wxT('1'));
 }
 
 void ConvAutoTestCase::None()
 {
-    TestFirstChar("Hello world", _T('H'));
+    TestFirstChar("Hello world", wxT('H'));
 }
 
 void ConvAutoTestCase::UTF32LE()
 {
-    TestFirstChar("\xff\xfe\0\0A\0\0\0", _T('A'));
+    TestFirstChar("\xff\xfe\0\0A\0\0\0", wxT('A'));
 }
 
 void ConvAutoTestCase::UTF32BE()
 {
-    TestFirstChar("\0\0\xfe\xff\0\0\0B", _T('B'));
+    TestFirstChar("\0\0\xfe\xff\0\0\0B", wxT('B'));
 }
 
 void ConvAutoTestCase::UTF16LE()
 {
-    TestFirstChar("\xff\xfeZ\0", _T('Z'));
+    TestFirstChar("\xff\xfeZ\0", wxT('Z'));
 }
 
 void ConvAutoTestCase::UTF16BE()
 {
-    TestFirstChar("\xfe\xff\0Y", _T('Y'));
+    TestFirstChar("\xfe\xff\0Y", wxT('Y'));
 }
 
 void ConvAutoTestCase::UTF8()
--- tests/regex/regextest.cpp-orig	2009-06-18 18:53:13.790810000 -0500
+++ tests/regex/regextest.cpp	2009-06-18 18:53:19.164903000 -0500
@@ -85,7 +85,7 @@ private:
     void parseFlags(const wxString& flags);
     void doTest(int flavor);
     static wxString quote(const wxString& arg);
-    const wxChar *convError() const { return _T("<cannot convert>"); }
+    const wxChar *convError() const { return wxT("<cannot convert>"); }
 
     // assertions - adds some information about the test that failed
     void fail(const wxString& msg) const;
@@ -140,13 +140,13 @@ RegExTestCase::RegExTestCase(
         badconv = badconv || *m_expected.rbegin() == convError();
     }
 
-    failIf(badconv, _T("cannot convert to default character encoding"));
+    failIf(badconv, wxT("cannot convert to default character encoding"));
 
     // the flags need further parsing...
     parseFlags(m_flags);
 
 #ifndef wxHAS_REGEX_ADVANCED
-    failIf(!m_basic && !m_extended, _T("advanced regexs not available"));
+    failIf(!m_basic && !m_extended, wxT("advanced regexs not available"));
 #endif
 }
 
@@ -209,7 +209,7 @@ void RegExTestCase::parseFlags(const wxS
             // anything else we must skip the test
             default:
                 fail(wxString::Format(
-                     _T("requires unsupported flag '%c'"), *p));
+                     wxT("requires unsupported flag '%c'"), *p));
         }
     }
 }
@@ -236,29 +236,29 @@ void RegExTestCase::doTest(int flavor)
 
     // 'e' - test that the pattern fails to compile
     if (m_mode == 'e') {
-        failIf(re.IsValid(), _T("compile succeeded (should fail)"));
+        failIf(re.IsValid(), wxT("compile succeeded (should fail)"));
         return;
     }
-    failIf(!re.IsValid(), _T("compile failed"));
+    failIf(!re.IsValid(), wxT("compile failed"));
 
     bool matches = re.Matches(m_data, m_matchFlags);
 
     // 'f' or 'p' - test that the pattern does not match
     if (m_mode == 'f' || m_mode == 'p') {
-        failIf(matches, _T("match succeeded (should fail)"));
+        failIf(matches, wxT("match succeeded (should fail)"));
         return;
     }
 
     // otherwise 'm' or 'i' - test the pattern does match
-    failIf(!matches, _T("match failed"));
+    failIf(!matches, wxT("match failed"));
 
     if (m_compileFlags & wxRE_NOSUB)
         return;
 
     // check wxRegEx has correctly counted the number of subexpressions
     wxString msg;
-    msg << _T("GetMatchCount() == ") << re.GetMatchCount()
-        << _T(", expected ") << m_expected.size();
+    msg << wxT("GetMatchCount() == ") << re.GetMatchCount()
+        << wxT(", expected ") << m_expected.size();
     failIf(m_expected.size() != re.GetMatchCount(), msg);
 
     for (size_t i = 0; i < m_expected.size(); i++) {
@@ -266,7 +266,7 @@ void RegExTestCase::doTest(int flavor)
         size_t start, len;
 
         msg.clear();
-        msg << _T("wxRegEx::GetMatch failed for match ") << i;
+        msg << wxT("wxRegEx::GetMatch failed for match ") << i;
         failIf(!re.GetMatch(&start, &len, i), msg);
 
         // m - check the match returns the strings given
@@ -274,20 +274,20 @@ void RegExTestCase::doTest(int flavor)
             if (start < INT_MAX)
                 result = m_data.substr(start, len);
             else
-                result = _T("");
+                result = wxT("");
 
         // i - check the match returns the offsets given
         else if (m_mode == 'i')
             if (start > INT_MAX)
-                result = _T("-1 -1");
+                result = wxT("-1 -1");
             else if (start + len > 0)
-                result << start << _T(" ") << start + len - 1;
+                result << start << wxT(" ") << start + len - 1;
             else
-                result << start << _T(" -1");
+                result << start << wxT(" -1");
 
         msg.clear();
-        msg << _T("match(") << i << _T(") == ") << quote(result)
-            << _T(", expected == ") << quote(m_expected[i]);
+        msg << wxT("match(") << i << wxT(") == ") << quote(result)
+            << wxT(", expected == ") << quote(m_expected[i]);
         failIf(result != m_expected[i], msg);
     }
 }
@@ -299,16 +299,16 @@ void RegExTestCase::fail(const wxString&
     wxString str;
     wxArrayString::const_iterator it;
 
-    str << (wxChar)m_mode << _T(" ") << m_id << _T(" ") << m_flags << _T(" ")
-        << quote(m_pattern) << _T(" ") << quote(m_data);
+    str << (wxChar)m_mode << wxT(" ") << m_id << wxT(" ") << m_flags << wxT(" ")
+        << quote(m_pattern) << wxT(" ") << quote(m_data);
 
     for (it = m_expected.begin(); it != m_expected.end(); ++it)
-        str << _T(" ") << quote(*it);
+        str << wxT(" ") << quote(*it);
 
     if (str.length() > 77)
-        str = str.substr(0, 74) + _T("...");
+        str = str.substr(0, 74) + wxT("...");
 
-    str << _T("\n ") << msg;
+    str << wxT("\n ") << msg;
 
     // no lossy convs so using utf8
     CPPUNIT_FAIL(string(str.mb_str(wxConvUTF8)));
@@ -318,8 +318,8 @@ void RegExTestCase::fail(const wxString&
 //
 wxString RegExTestCase::quote(const wxString& arg)
 {
-    const wxChar *needEscape = _T("\a\b\t\n\v\f\r\"\\");
-    const wxChar *escapes = _T("abtnvfr\"\\");
+    const wxChar *needEscape = wxT("\a\b\t\n\v\f\r\"\\");
+    const wxChar *escapes = wxT("abtnvfr\"\\");
     wxString str;
 
     for (size_t i = 0; i < arg.length(); i++) {
@@ -327,15 +327,15 @@ wxString RegExTestCase::quote(const wxSt
         const wxChar *p = wxStrchr(needEscape, ch);
 
         if (p)
-            str += wxString::Format(_T("\\%c"), escapes[p - needEscape]);
+            str += wxString::Format(wxT("\\%c"), escapes[p - needEscape]);
         else if (wxIscntrl(ch))
-            str += wxString::Format(_T("\\%03o"), ch);
+            str += wxString::Format(wxT("\\%03o"), ch);
         else
             str += ch;
     }
 
     return str.length() == arg.length() && str.find(' ') == wxString::npos ?
-        str : _T("\"") + str + _T("\"");
+        str : wxT("\"") + str + wxT("\"");
 }
 
 
@@ -375,7 +375,7 @@ void RegExTestSuite::add(
             name, mode, id, flags, pattern, data, expected_results));
     }
     catch (Exception& e) {
-        wxLogInfo(wxString::Format(_T("skipping: %s\n %s\n"),
+        wxLogInfo(wxString::Format(wxT("skipping: %s\n %s\n"),
             wxString(name.c_str(), wxConvUTF8).c_str(),
             wxString(e.what(), wxConvUTF8).c_str()));
     }
--- tests/regex/wxregextest.cpp-orig	2009-06-18 18:53:30.461451000 -0500
+++ tests/regex/wxregextest.cpp	2009-06-18 18:53:35.860604000 -0500
@@ -104,7 +104,7 @@ void RegExMatchTestCase::runTest()
         CPPUNIT_ASSERT_MESSAGE("match failed", ok);
 
         wxStringTokenizer tkz(wxString(m_expected, *wxConvCurrent),
-                              _T("\t"), wxTOKEN_RET_EMPTY);
+                              wxT("\t"), wxTOKEN_RET_EMPTY);
         size_t i;
 
         for (i = 0; i < re.GetMatchCount() && tkz.HasMoreTokens(); i++) {
@@ -112,7 +112,7 @@ void RegExMatchTestCase::runTest()
             wxString result = re.GetMatch(m_text, i);
 
             wxString msgstr;
-            msgstr.Printf(_T("\\%d == '%s' (expected '%s')"),
+            msgstr.Printf(wxT("\\%d == '%s' (expected '%s')"),
                           (int)i, result.c_str(), expected.c_str());
 
             CPPUNIT_ASSERT_MESSAGE((const char*)msgstr.mb_str(),
@@ -166,10 +166,10 @@ void RegExReplaceTestCase::runTest()
     size_t nRepl = re.Replace(&text, m_repl);
 
     wxString msgstr;
-    msgstr.Printf(_T("returns '%s' (expected '%s')"), text.c_str(), m_expected.c_str());
+    msgstr.Printf(wxT("returns '%s' (expected '%s')"), text.c_str(), m_expected.c_str());
     CPPUNIT_ASSERT_MESSAGE((const char*)msgstr.mb_str(), text == m_expected);
 
-    msgstr.Printf(_T("matches %d times (expected %d)"), (int)nRepl, (int)m_count);
+    msgstr.Printf(wxT("matches %d times (expected %d)"), (int)nRepl, (int)m_count);
     CPPUNIT_ASSERT_MESSAGE((const char*)msgstr.mb_str(), nRepl == m_count);
 }
 
@@ -258,7 +258,7 @@ void wxRegExTestSuite::add(
     int flags /*=wxRE_DEFAULT*/)
 {
     addTest(new RegExCompileTestCase(
-                (_T("/") + Conv(pattern) + _T("/") + FlagStr(flags)).mb_str(),
+                (wxT("/") + Conv(pattern) + wxT("/") + FlagStr(flags)).mb_str(),
                 Conv(pattern), correct, flags));
 }
 
@@ -272,9 +272,9 @@ void wxRegExTestSuite::add(
 {
     wxString name;
 
-    name << _T("'") << Conv(text) << _T("' =~ /") << Conv(pattern) << _T("/")
+    name << wxT("'") << Conv(text) << wxT("' =~ /") << Conv(pattern) << wxT("/")
          << FlagStr(flags);
-    name.Replace(_T("\n"), _T("\\n"));
+    name.Replace(wxT("\n"), wxT("\\n"));
 
     addTest(new RegExMatchTestCase(name.mb_str(), Conv(pattern),
                                    Conv(text), expected, flags));
@@ -292,9 +292,9 @@ void wxRegExTestSuite::add(
 {
     wxString name;
 
-    name << _T("'") << Conv(text) << _T("' =~ s/") << Conv(pattern) << _T("/")
-         << Conv(replacement) << _T("/g") << FlagStr(flags);
-    name.Replace(_T("\n"), _T("\\n"));
+    name << wxT("'") << Conv(text) << wxT("' =~ s/") << Conv(pattern) << wxT("/")
+         << Conv(replacement) << wxT("/g") << FlagStr(flags);
+    name.Replace(wxT("\n"), wxT("\\n"));
 
     addTest(new RegExReplaceTestCase(
                     name.mb_str(), Conv(pattern), Conv(text),
@@ -314,19 +314,19 @@ wxString wxRegExTestSuite::FlagStr(int f
         switch (flags & (1 << i)) {
             case 0: break;
 #ifdef wxHAS_REGEX_ADVANCED
-            case wxRE_ADVANCED: str += _T(" | wxRE_ADVANCED"); break;
+            case wxRE_ADVANCED: str += wxT(" | wxRE_ADVANCED"); break;
 #endif
-            case wxRE_BASIC:    str += _T(" | wxRE_BASIC"); break;
-            case wxRE_ICASE:    str += _T(" | wxRE_ICASE"); break;
-            case wxRE_NOSUB:    str += _T(" | wxRE_NOSUB"); break;
-            case wxRE_NEWLINE:  str += _T(" | wxRE_NEWLINE"); break;
-            case wxRE_NOTBOL:   str += _T(" | wxRE_NOTBOL"); break;
-            case wxRE_NOTEOL:   str += _T(" | wxRE_NOTEOL"); break;
+            case wxRE_BASIC:    str += wxT(" | wxRE_BASIC"); break;
+            case wxRE_ICASE:    str += wxT(" | wxRE_ICASE"); break;
+            case wxRE_NOSUB:    str += wxT(" | wxRE_NOSUB"); break;
+            case wxRE_NEWLINE:  str += wxT(" | wxRE_NEWLINE"); break;
+            case wxRE_NOTBOL:   str += wxT(" | wxRE_NOTBOL"); break;
+            case wxRE_NOTEOL:   str += wxT(" | wxRE_NOTEOL"); break;
             default: wxFAIL; break;
         }
     }
 
-    return _T(" (") + str.Mid(3) + _T(")");
+    return wxT(" (") + str.Mid(3) + wxT(")");
 };
 
 // register in the unnamed registry so that these tests are run by default
--- tests/hashes/hashes.cpp-orig	2009-06-18 18:52:59.138272000 -0500
+++ tests/hashes/hashes.cpp	2009-06-18 18:53:05.042939000 -0500
@@ -162,16 +162,16 @@ void HashesTestCase::wxHashTableTest()
         for ( i = 0; i < COUNT/2; ++i )
             CPPUNIT_ASSERT( hash.Get(i) == NULL);
 
-        hash2.Put(_T("foo"), &o + 1);
-        hash2.Put(_T("bar"), &o + 2);
-        hash2.Put(_T("baz"), &o + 3);
+        hash2.Put(wxT("foo"), &o + 1);
+        hash2.Put(wxT("bar"), &o + 2);
+        hash2.Put(wxT("baz"), &o + 3);
 
-        CPPUNIT_ASSERT(hash2.Get(_T("moo")) == NULL);
-        CPPUNIT_ASSERT(hash2.Get(_T("bar")) == &o + 2);
+        CPPUNIT_ASSERT(hash2.Get(wxT("moo")) == NULL);
+        CPPUNIT_ASSERT(hash2.Get(wxT("bar")) == &o + 2);
 
-        hash2.Put(_T("bar"), &o + 0);
+        hash2.Put(wxT("bar"), &o + 0);
 
-        CPPUNIT_ASSERT(hash2.Get(_T("bar")) == &o + 2);
+        CPPUNIT_ASSERT(hash2.Get(wxT("bar")) == &o + 2);
     }
 
     // and now some corner-case testing; 3 and 13 hash to the same bucket
@@ -530,16 +530,16 @@ void HashesTestCase::wxHashSetTest()
 {
     wxStringHashSet set1;
 
-    set1.insert( _T("abc") );
+    set1.insert( wxT("abc") );
 
     CPPUNIT_ASSERT( set1.size() == 1 );
 
-    set1.insert( _T("bbc") );
-    set1.insert( _T("cbc") );
+    set1.insert( wxT("bbc") );
+    set1.insert( wxT("cbc") );
 
     CPPUNIT_ASSERT( set1.size() == 3 );
 
-    set1.insert( _T("abc") );
+    set1.insert( wxT("abc") );
 
     CPPUNIT_ASSERT( set1.size() == 3 );
 
@@ -547,11 +547,11 @@ void HashesTestCase::wxHashSetTest()
     int dummy;
     MyStruct tmp;
 
-    tmp.ptr = &dummy; tmp.str = _T("ABC");
+    tmp.ptr = &dummy; tmp.str = wxT("ABC");
     set2.insert( tmp );
     tmp.ptr = &dummy + 1;
     set2.insert( tmp );
-    tmp.ptr = &dummy; tmp.str = _T("CDE");
+    tmp.ptr = &dummy; tmp.str = wxT("CDE");
     set2.insert( tmp );
 
     CPPUNIT_ASSERT( set2.size() == 2 );
@@ -560,5 +560,5 @@ void HashesTestCase::wxHashSetTest()
 
     CPPUNIT_ASSERT( it != set2.end() );
     CPPUNIT_ASSERT( it->ptr == &dummy );
-    CPPUNIT_ASSERT( it->str == _T("ABC") );
+    CPPUNIT_ASSERT( it->str == wxT("ABC") );
 }
--- tests/fileconf/fileconftest.cpp-orig	2009-06-18 18:52:46.369815000 -0500
+++ tests/fileconf/fileconftest.cpp	2009-06-18 18:52:51.887774000 -0500
@@ -27,13 +27,13 @@
 #include "wx/log.h"
 
 static const wxChar *testconfig =
-_T("[root]\n")
-_T("entry=value\n")
-_T("[root/group1]\n")
-_T("[root/group1/subgroup]\n")
-_T("subentry=subvalue\n")
-_T("subentry2=subvalue2\n")
-_T("[root/group2]\n")
+wxT("[root]\n")
+wxT("entry=value\n")
+wxT("[root/group1]\n")
+wxT("[root/group1/subgroup]\n")
+wxT("subentry=subvalue\n")
+wxT("subentry2=subvalue2\n")
+wxT("[root/group2]\n")
 ;
 
 // ----------------------------------------------------------------------------
@@ -124,34 +124,34 @@ void FileConfigTestCase::Path()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CPPUNIT_ASSERT( ChangePath(fc, _T("")) == _T("") );
-    CPPUNIT_ASSERT( ChangePath(fc, _T("/")) == _T("") );
-    CPPUNIT_ASSERT( ChangePath(fc, _T("root")) == _T("/root") );
-    CPPUNIT_ASSERT( ChangePath(fc, _T("/root")) == _T("/root") );
-    CPPUNIT_ASSERT( ChangePath(fc, _T("/root/group1/subgroup")) == _T("/root/group1/subgroup") );
-    CPPUNIT_ASSERT( ChangePath(fc, _T("/root/group2")) == _T("/root/group2") );
+    CPPUNIT_ASSERT( ChangePath(fc, wxT("")) == wxT("") );
+    CPPUNIT_ASSERT( ChangePath(fc, wxT("/")) == wxT("") );
+    CPPUNIT_ASSERT( ChangePath(fc, wxT("root")) == wxT("/root") );
+    CPPUNIT_ASSERT( ChangePath(fc, wxT("/root")) == wxT("/root") );
+    CPPUNIT_ASSERT( ChangePath(fc, wxT("/root/group1/subgroup")) == wxT("/root/group1/subgroup") );
+    CPPUNIT_ASSERT( ChangePath(fc, wxT("/root/group2")) == wxT("/root/group2") );
 }
 
 void FileConfigTestCase::AddEntries()
 {
     wxFileConfig fc;
 
-    wxVERIFY_FILECONFIG( _T(""), fc  );
+    wxVERIFY_FILECONFIG( wxT(""), fc  );
 
-    fc.Write(_T("/Foo"), _T("foo"));
-    wxVERIFY_FILECONFIG( _T("Foo=foo\n"), fc  );
+    fc.Write(wxT("/Foo"), wxT("foo"));
+    wxVERIFY_FILECONFIG( wxT("Foo=foo\n"), fc  );
 
-    fc.Write(_T("/Bar/Baz"), _T("baz"));
-    wxVERIFY_FILECONFIG( _T("Foo=foo\n[Bar]\nBaz=baz\n"), fc  );
+    fc.Write(wxT("/Bar/Baz"), wxT("baz"));
+    wxVERIFY_FILECONFIG( wxT("Foo=foo\n[Bar]\nBaz=baz\n"), fc  );
 
     fc.DeleteAll();
-    wxVERIFY_FILECONFIG( _T(""), fc  );
+    wxVERIFY_FILECONFIG( wxT(""), fc  );
 
-    fc.Write(_T("/Bar/Baz"), _T("baz"));
-    wxVERIFY_FILECONFIG( _T("[Bar]\nBaz=baz\n"), fc  );
+    fc.Write(wxT("/Bar/Baz"), wxT("baz"));
+    wxVERIFY_FILECONFIG( wxT("[Bar]\nBaz=baz\n"), fc  );
 
-    fc.Write(_T("/Foo"), _T("foo"));
-    wxVERIFY_FILECONFIG( _T("Foo=foo\n[Bar]\nBaz=baz\n"), fc  );
+    fc.Write(wxT("/Foo"), wxT("foo"));
+    wxVERIFY_FILECONFIG( wxT("Foo=foo\n[Bar]\nBaz=baz\n"), fc  );
 }
 
 void
@@ -160,7 +160,7 @@ FileConfigTestCase::CheckGroupEntries(co
                                       size_t nEntries,
                                       ...)
 {
-    wxConfigPathChanger change(&fc, wxString(path) + _T("/"));
+    wxConfigPathChanger change(&fc, wxString(path) + wxT("/"));
 
     CPPUNIT_ASSERT( fc.GetNumberOfEntries() == nEntries );
 
@@ -187,7 +187,7 @@ FileConfigTestCase::CheckGroupSubgroups(
                                         size_t nGroups,
                                         ...)
 {
-    wxConfigPathChanger change(&fc, wxString(path) + _T("/"));
+    wxConfigPathChanger change(&fc, wxString(path) + wxT("/"));
 
     CPPUNIT_ASSERT( fc.GetNumberOfGroups() == nGroups );
 
@@ -213,11 +213,11 @@ void FileConfigTestCase::GetEntries()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CheckGroupEntries(fc, _T(""), 0);
-    CheckGroupEntries(fc, _T("/root"), 1, _T("entry"));
-    CheckGroupEntries(fc, _T("/root/group1"), 0);
-    CheckGroupEntries(fc, _T("/root/group1/subgroup"),
-                        2, _T("subentry"), _T("subentry2"));
+    CheckGroupEntries(fc, wxT(""), 0);
+    CheckGroupEntries(fc, wxT("/root"), 1, wxT("entry"));
+    CheckGroupEntries(fc, wxT("/root/group1"), 0);
+    CheckGroupEntries(fc, wxT("/root/group1/subgroup"),
+                        2, wxT("subentry"), wxT("subentry2"));
 }
 
 void FileConfigTestCase::GetGroups()
@@ -225,10 +225,10 @@ void FileConfigTestCase::GetGroups()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CheckGroupSubgroups(fc, _T(""), 1, _T("root"));
-    CheckGroupSubgroups(fc, _T("/root"), 2, _T("group1"), _T("group2"));
-    CheckGroupSubgroups(fc, _T("/root/group1"), 1, _T("subgroup"));
-    CheckGroupSubgroups(fc, _T("/root/group2"), 0);
+    CheckGroupSubgroups(fc, wxT(""), 1, wxT("root"));
+    CheckGroupSubgroups(fc, wxT("/root"), 2, wxT("group1"), wxT("group2"));
+    CheckGroupSubgroups(fc, wxT("/root/group1"), 1, wxT("subgroup"));
+    CheckGroupSubgroups(fc, wxT("/root/group2"), 0);
 }
 
 void FileConfigTestCase::HasEntry()
@@ -236,15 +236,15 @@ void FileConfigTestCase::HasEntry()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CPPUNIT_ASSERT( !fc.HasEntry(_T("root")) );
-    CPPUNIT_ASSERT( fc.HasEntry(_T("root/entry")) );
-    CPPUNIT_ASSERT( fc.HasEntry(_T("/root/entry")) );
-    CPPUNIT_ASSERT( fc.HasEntry(_T("root/group1/subgroup/subentry")) );
-    CPPUNIT_ASSERT( !fc.HasEntry(_T("")) );
-    CPPUNIT_ASSERT( !fc.HasEntry(_T("root/group1")) );
-    CPPUNIT_ASSERT( !fc.HasEntry(_T("subgroup/subentry")) );
-    CPPUNIT_ASSERT( !fc.HasEntry(_T("/root/no_such_group/entry")) );
-    CPPUNIT_ASSERT( !fc.HasGroup(_T("/root/no_such_group")) );
+    CPPUNIT_ASSERT( !fc.HasEntry(wxT("root")) );
+    CPPUNIT_ASSERT( fc.HasEntry(wxT("root/entry")) );
+    CPPUNIT_ASSERT( fc.HasEntry(wxT("/root/entry")) );
+    CPPUNIT_ASSERT( fc.HasEntry(wxT("root/group1/subgroup/subentry")) );
+    CPPUNIT_ASSERT( !fc.HasEntry(wxT("")) );
+    CPPUNIT_ASSERT( !fc.HasEntry(wxT("root/group1")) );
+    CPPUNIT_ASSERT( !fc.HasEntry(wxT("subgroup/subentry")) );
+    CPPUNIT_ASSERT( !fc.HasEntry(wxT("/root/no_such_group/entry")) );
+    CPPUNIT_ASSERT( !fc.HasGroup(wxT("/root/no_such_group")) );
 }
 
 void FileConfigTestCase::HasGroup()
@@ -252,15 +252,15 @@ void FileConfigTestCase::HasGroup()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CPPUNIT_ASSERT( fc.HasGroup(_T("root")) );
-    CPPUNIT_ASSERT( fc.HasGroup(_T("root/group1")) );
-    CPPUNIT_ASSERT( fc.HasGroup(_T("root/group1/subgroup")) );
-    CPPUNIT_ASSERT( fc.HasGroup(_T("root/group2")) );
-    CPPUNIT_ASSERT( !fc.HasGroup(_T("")) );
-    CPPUNIT_ASSERT( !fc.HasGroup(_T("root/group")) );
-    CPPUNIT_ASSERT( !fc.HasGroup(_T("root//subgroup")) );
-    CPPUNIT_ASSERT( !fc.HasGroup(_T("foot/subgroup")) );
-    CPPUNIT_ASSERT( !fc.HasGroup(_T("foot")) );
+    CPPUNIT_ASSERT( fc.HasGroup(wxT("root")) );
+    CPPUNIT_ASSERT( fc.HasGroup(wxT("root/group1")) );
+    CPPUNIT_ASSERT( fc.HasGroup(wxT("root/group1/subgroup")) );
+    CPPUNIT_ASSERT( fc.HasGroup(wxT("root/group2")) );
+    CPPUNIT_ASSERT( !fc.HasGroup(wxT("")) );
+    CPPUNIT_ASSERT( !fc.HasGroup(wxT("root/group")) );
+    CPPUNIT_ASSERT( !fc.HasGroup(wxT("root//subgroup")) );
+    CPPUNIT_ASSERT( !fc.HasGroup(wxT("foot/subgroup")) );
+    CPPUNIT_ASSERT( !fc.HasGroup(wxT("foot")) );
 }
 
 void FileConfigTestCase::Save()
@@ -275,24 +275,24 @@ void FileConfigTestCase::DeleteEntry()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CPPUNIT_ASSERT( !fc.DeleteEntry(_T("foo")) );
+    CPPUNIT_ASSERT( !fc.DeleteEntry(wxT("foo")) );
 
-    CPPUNIT_ASSERT( fc.DeleteEntry(_T("root/group1/subgroup/subentry")) );
-    wxVERIFY_FILECONFIG( _T("[root]\n")
-                         _T("entry=value\n")
-                         _T("[root/group1]\n")
-                         _T("[root/group1/subgroup]\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[root/group2]\n"),
+    CPPUNIT_ASSERT( fc.DeleteEntry(wxT("root/group1/subgroup/subentry")) );
+    wxVERIFY_FILECONFIG( wxT("[root]\n")
+                         wxT("entry=value\n")
+                         wxT("[root/group1]\n")
+                         wxT("[root/group1/subgroup]\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[root/group2]\n"),
                          fc );
 
     // group should be deleted now as well as it became empty
-    wxConfigPathChanger change(&fc, _T("root/group1/subgroup/subentry2"));
-    CPPUNIT_ASSERT( fc.DeleteEntry(_T("subentry2")) );
-    wxVERIFY_FILECONFIG( _T("[root]\n")
-                         _T("entry=value\n")
-                         _T("[root/group1]\n")
-                         _T("[root/group2]\n"),
+    wxConfigPathChanger change(&fc, wxT("root/group1/subgroup/subentry2"));
+    CPPUNIT_ASSERT( fc.DeleteEntry(wxT("subentry2")) );
+    wxVERIFY_FILECONFIG( wxT("[root]\n")
+                         wxT("entry=value\n")
+                         wxT("[root/group1]\n")
+                         wxT("[root/group2]\n"),
                          fc );
 }
 
@@ -301,21 +301,21 @@ void FileConfigTestCase::DeleteGroup()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CPPUNIT_ASSERT( !fc.DeleteGroup(_T("foo")) );
+    CPPUNIT_ASSERT( !fc.DeleteGroup(wxT("foo")) );
 
-    CPPUNIT_ASSERT( fc.DeleteGroup(_T("root/group1")) );
-    wxVERIFY_FILECONFIG( _T("[root]\n")
-                         _T("entry=value\n")
-                         _T("[root/group2]\n"),
+    CPPUNIT_ASSERT( fc.DeleteGroup(wxT("root/group1")) );
+    wxVERIFY_FILECONFIG( wxT("[root]\n")
+                         wxT("entry=value\n")
+                         wxT("[root/group2]\n"),
                          fc );
 
     // notice trailing slash: it should be ignored
-    CPPUNIT_ASSERT( fc.DeleteGroup(_T("root/group2/")) );
-    wxVERIFY_FILECONFIG( _T("[root]\n")
-                         _T("entry=value\n"),
+    CPPUNIT_ASSERT( fc.DeleteGroup(wxT("root/group2/")) );
+    wxVERIFY_FILECONFIG( wxT("[root]\n")
+                         wxT("entry=value\n"),
                          fc );
 
-    CPPUNIT_ASSERT( fc.DeleteGroup(_T("root")) );
+    CPPUNIT_ASSERT( fc.DeleteGroup(wxT("root")) );
     CPPUNIT_ASSERT( Dump(fc).empty() );
 }
 
@@ -333,29 +333,29 @@ void FileConfigTestCase::RenameEntry()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    fc.SetPath(_T("root"));
-    CPPUNIT_ASSERT( fc.RenameEntry(_T("entry"), _T("newname")) );
-    wxVERIFY_FILECONFIG( _T("[root]\n")
-                         _T("newname=value\n")
-                         _T("[root/group1]\n")
-                         _T("[root/group1/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[root/group2]\n"),
-                         fc );
-
-    fc.SetPath(_T("group1/subgroup"));
-    CPPUNIT_ASSERT( !fc.RenameEntry(_T("entry"), _T("newname")) );
-    CPPUNIT_ASSERT( !fc.RenameEntry(_T("subentry"), _T("subentry2")) );
-
-    CPPUNIT_ASSERT( fc.RenameEntry(_T("subentry"), _T("subentry1")) );
-    wxVERIFY_FILECONFIG( _T("[root]\n")
-                         _T("newname=value\n")
-                         _T("[root/group1]\n")
-                         _T("[root/group1/subgroup]\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("subentry1=subvalue\n")
-                         _T("[root/group2]\n"),
+    fc.SetPath(wxT("root"));
+    CPPUNIT_ASSERT( fc.RenameEntry(wxT("entry"), wxT("newname")) );
+    wxVERIFY_FILECONFIG( wxT("[root]\n")
+                         wxT("newname=value\n")
+                         wxT("[root/group1]\n")
+                         wxT("[root/group1/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[root/group2]\n"),
+                         fc );
+
+    fc.SetPath(wxT("group1/subgroup"));
+    CPPUNIT_ASSERT( !fc.RenameEntry(wxT("entry"), wxT("newname")) );
+    CPPUNIT_ASSERT( !fc.RenameEntry(wxT("subentry"), wxT("subentry2")) );
+
+    CPPUNIT_ASSERT( fc.RenameEntry(wxT("subentry"), wxT("subentry1")) );
+    wxVERIFY_FILECONFIG( wxT("[root]\n")
+                         wxT("newname=value\n")
+                         wxT("[root/group1]\n")
+                         wxT("[root/group1/subgroup]\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("subentry1=subvalue\n")
+                         wxT("[root/group2]\n"),
                          fc );
 }
 
@@ -364,118 +364,118 @@ void FileConfigTestCase::RenameGroup()
     wxStringInputStream sis(testconfig);
     wxFileConfig fc(sis);
 
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("root"), _T("foot")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/group1]\n")
-                         _T("[foot/group1/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/group2]\n"),
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("root"), wxT("foot")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/group1]\n")
+                         wxT("[foot/group1/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/group2]\n"),
                          fc );
 
     // renaming a path doesn't work, it must be the immediate group
-    CPPUNIT_ASSERT( !fc.RenameGroup(_T("foot/group1"), _T("group2")) );
+    CPPUNIT_ASSERT( !fc.RenameGroup(wxT("foot/group1"), wxT("group2")) );
 
 
-    fc.SetPath(_T("foot"));
+    fc.SetPath(wxT("foot"));
 
     // renaming to a name of existing group doesn't work
-    CPPUNIT_ASSERT( !fc.RenameGroup(_T("group1"), _T("group2")) );
+    CPPUNIT_ASSERT( !fc.RenameGroup(wxT("group1"), wxT("group2")) );
 
     // try exchanging the groups names and then restore them back
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("group1"), _T("groupTmp")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/groupTmp]\n")
-                         _T("[foot/groupTmp/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/group2]\n"),
-                         fc );
-
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("group2"), _T("group1")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/groupTmp]\n")
-                         _T("[foot/groupTmp/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/group1]\n"),
-                         fc );
-
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("groupTmp"), _T("group2")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/group2]\n")
-                         _T("[foot/group2/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/group1]\n"),
-                         fc );
-
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("group1"), _T("groupTmp")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/group2]\n")
-                         _T("[foot/group2/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/groupTmp]\n"),
-                         fc );
-
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("group2"), _T("group1")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/group1]\n")
-                         _T("[foot/group1/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/groupTmp]\n"),
-                         fc );
-
-    CPPUNIT_ASSERT( fc.RenameGroup(_T("groupTmp"), _T("group2")) );
-    wxVERIFY_FILECONFIG( _T("[foot]\n")
-                         _T("entry=value\n")
-                         _T("[foot/group1]\n")
-                         _T("[foot/group1/subgroup]\n")
-                         _T("subentry=subvalue\n")
-                         _T("subentry2=subvalue2\n")
-                         _T("[foot/group2]\n"),
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("group1"), wxT("groupTmp")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/groupTmp]\n")
+                         wxT("[foot/groupTmp/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/group2]\n"),
+                         fc );
+
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("group2"), wxT("group1")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/groupTmp]\n")
+                         wxT("[foot/groupTmp/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/group1]\n"),
+                         fc );
+
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("groupTmp"), wxT("group2")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/group2]\n")
+                         wxT("[foot/group2/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/group1]\n"),
+                         fc );
+
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("group1"), wxT("groupTmp")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/group2]\n")
+                         wxT("[foot/group2/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/groupTmp]\n"),
+                         fc );
+
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("group2"), wxT("group1")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/group1]\n")
+                         wxT("[foot/group1/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/groupTmp]\n"),
+                         fc );
+
+    CPPUNIT_ASSERT( fc.RenameGroup(wxT("groupTmp"), wxT("group2")) );
+    wxVERIFY_FILECONFIG( wxT("[foot]\n")
+                         wxT("entry=value\n")
+                         wxT("[foot/group1]\n")
+                         wxT("[foot/group1/subgroup]\n")
+                         wxT("subentry=subvalue\n")
+                         wxT("subentry2=subvalue2\n")
+                         wxT("[foot/group2]\n"),
                          fc );
 }
 
 void FileConfigTestCase::CreateSubgroupAndEntries()
 {
     wxFileConfig fc;
-    fc.Write(_T("sub/sub_first"), _T("sub_one"));
-    fc.Write(_T("first"), _T("one"));
+    fc.Write(wxT("sub/sub_first"), wxT("sub_one"));
+    fc.Write(wxT("first"), wxT("one"));
 
-    wxVERIFY_FILECONFIG( _T("first=one\n")
-                         _T("[sub]\n")
-                         _T("sub_first=sub_one\n"),
+    wxVERIFY_FILECONFIG( wxT("first=one\n")
+                         wxT("[sub]\n")
+                         wxT("sub_first=sub_one\n"),
                          fc );
 }
 
 void FileConfigTestCase::CreateEntriesAndSubgroup()
 {
     wxFileConfig fc;
-    fc.Write(_T("first"), _T("one"));
-    fc.Write(_T("second"), _T("two"));
-    fc.Write(_T("sub/sub_first"), _T("sub_one"));
-
-    wxVERIFY_FILECONFIG( _T("first=one\n")
-                         _T("second=two\n")
-                         _T("[sub]\n")
-                         _T("sub_first=sub_one\n"),
+    fc.Write(wxT("first"), wxT("one"));
+    fc.Write(wxT("second"), wxT("two"));
+    fc.Write(wxT("sub/sub_first"), wxT("sub_one"));
+
+    wxVERIFY_FILECONFIG( wxT("first=one\n")
+                         wxT("second=two\n")
+                         wxT("[sub]\n")
+                         wxT("sub_first=sub_one\n"),
                          fc );
 }
 
 static void EmptyConfigAndWriteKey()
 {
-    wxFileConfig fc(_T("deleteconftest"));
+    wxFileConfig fc(wxT("deleteconftest"));
 
-    const wxString groupPath = _T("/root");
+    const wxString groupPath = wxT("/root");
 
     if ( fc.Exists(groupPath) )
     {
@@ -489,7 +489,7 @@ static void EmptyConfigAndWriteKey()
 
 
     // this crashes on second call of this function
-    CPPUNIT_ASSERT( fc.Write(groupPath + _T("/entry"), _T("value")) );
+    CPPUNIT_ASSERT( fc.Write(groupPath + wxT("/entry"), wxT("value")) );
 }
 
 void FileConfigTestCase::DeleteLastGroup()
@@ -509,7 +509,7 @@ void FileConfigTestCase::DeleteLastGroup
 
     // clean up
     wxLogNull noLogging;
-    (void) ::wxRemoveFile(wxFileConfig::GetLocalFileName(_T("deleteconftest")));
+    (void) ::wxRemoveFile(wxFileConfig::GetLocalFileName(wxT("deleteconftest")));
 }
 
 #endif // wxUSE_FILECONFIG
--- tests/test.cpp-orig	2009-06-18 19:01:19.453449000 -0500
+++ tests/test.cpp	2009-06-18 19:01:24.626400000 -0500
@@ -80,13 +80,13 @@ void TestApp::OnInitCmdLine(wxCmdLinePar
     wxAppConsole::OnInitCmdLine(parser);
 
     static const wxCmdLineEntryDesc cmdLineDesc[] = {
-        { wxCMD_LINE_SWITCH, _T("l"), _T("list"),
-            _T("list the test suites, do not run them"),
+        { wxCMD_LINE_SWITCH, wxT("l"), wxT("list"),
+            wxT("list the test suites, do not run them"),
             wxCMD_LINE_VAL_NONE, 0 },
-        { wxCMD_LINE_SWITCH, _T("L"), _T("longlist"),
-            _T("list the test cases, do not run them"),
+        { wxCMD_LINE_SWITCH, wxT("L"), wxT("longlist"),
+            wxT("list the test cases, do not run them"),
             wxCMD_LINE_VAL_NONE, 0 },
-        { wxCMD_LINE_PARAM, 0, 0, _T("REGISTRY"), wxCMD_LINE_VAL_STRING,
+        { wxCMD_LINE_PARAM, 0, 0, wxT("REGISTRY"), wxCMD_LINE_VAL_STRING,
             wxCMD_LINE_PARAM_OPTIONAL | wxCMD_LINE_PARAM_MULTIPLE },
         { wxCMD_LINE_NONE , 0, 0, 0, wxCMD_LINE_VAL_NONE, 0 }
     };
@@ -104,8 +104,8 @@ bool TestApp::OnCmdLineParsed(wxCmdLineP
     else
         m_registries.push_back("");
 
-    m_longlist = parser.Found(_T("longlist"));
-    m_list = m_longlist || parser.Found(_T("list"));
+    m_longlist = parser.Found(wxT("longlist"));
+    m_list = m_longlist || parser.Found(wxT("list"));
 
     return wxAppConsole::OnCmdLineParsed(parser);
 }
@@ -124,7 +124,7 @@ int TestApp::OnRun()
         TestSuite *suite = dynamic_cast<TestSuite*>(test.get());
 
         if (suite && suite->countTestCases() == 0)
-            wxLogError(_T("No such test suite: %s"),
+            wxLogError(wxT("No such test suite: %s"),
                 wxString(m_registries[i].c_str(), wxConvUTF8).c_str());
         else if (m_list)
             List(test.get());
--- utils/emulator/src/emulator.cpp-orig	2009-06-18 17:56:22.897715000 -0500
+++ utils/emulator/src/emulator.cpp	2009-06-18 17:56:45.768022000 -0500
@@ -73,12 +73,12 @@ IMPLEMENT_APP(wxEmulatorApp)
 
 static const wxCmdLineEntryDesc sg_cmdLineDesc[] =
 {
-    { wxCMD_LINE_OPTION, _T("u"), _T("use-display"),   _T("display number to use (default 100)"), (wxCmdLineParamType)0, 0 },
+    { wxCMD_LINE_OPTION, wxT("u"), wxT("use-display"),   wxT("display number to use (default 100)"), (wxCmdLineParamType)0, 0 },
 
-    { wxCMD_LINE_SWITCH, _T("h"), _T("help"),   _T("displays help on the command line parameters"), (wxCmdLineParamType)0, 0 },
-    { wxCMD_LINE_SWITCH, _T("v"), _T("version"),    _T("print version"), (wxCmdLineParamType)0, 0 },
+    { wxCMD_LINE_SWITCH, wxT("h"), wxT("help"),   wxT("displays help on the command line parameters"), (wxCmdLineParamType)0, 0 },
+    { wxCMD_LINE_SWITCH, wxT("v"), wxT("version"),    wxT("print version"), (wxCmdLineParamType)0, 0 },
 
-    { wxCMD_LINE_PARAM,  NULL, NULL, _T("config file 1"), wxCMD_LINE_VAL_STRING, wxCMD_LINE_PARAM_OPTIONAL },
+    { wxCMD_LINE_PARAM,  NULL, NULL, wxT("config file 1"), wxCMD_LINE_VAL_STRING, wxCMD_LINE_PARAM_OPTIONAL },
 
     { wxCMD_LINE_NONE, NULL, NULL, NULL, (wxCmdLineParamType)0, 0 }
 };
@@ -116,10 +116,10 @@ bool wxEmulatorApp::OnInit()
 
     // If the development version, go up a directory.
 #ifdef __WXMSW__
-    if ((m_appDir.Right(5).CmpNoCase(_T("DEBUG")) == 0) ||
-        (m_appDir.Right(11).CmpNoCase(_T("DEBUGSTABLE")) == 0) ||
-        (m_appDir.Right(7).CmpNoCase(_T("RELEASE")) == 0) ||
-        (m_appDir.Right(13).CmpNoCase(_T("RELEASESTABLE")) == 0)
+    if ((m_appDir.Right(5).CmpNoCase(wxT("DEBUG")) == 0) ||
+        (m_appDir.Right(11).CmpNoCase(wxT("DEBUGSTABLE")) == 0) ||
+        (m_appDir.Right(7).CmpNoCase(wxT("RELEASE")) == 0) ||
+        (m_appDir.Right(13).CmpNoCase(wxT("RELEASESTABLE")) == 0)
         )
         m_appDir = wxPathOnly(m_appDir);
 #endif
@@ -175,7 +175,7 @@ bool wxEmulatorApp::OnInit()
     }
 
     // create the main application window
-    wxEmulatorFrame *frame = new wxEmulatorFrame(_T("wxEmulator"),
+    wxEmulatorFrame *frame = new wxEmulatorFrame(wxT("wxEmulator"),
                                  wxPoint(50, 50), wxSize(450, 340));
 
 #if wxUSE_STATUSBAR
@@ -273,14 +273,14 @@ wxEmulatorFrame::wxEmulatorFrame(const w
 
     // the "About" item should be in the help menu
     wxMenu *helpMenu = new wxMenu;
-    helpMenu->Append(Emulator_About, _T("&About...\tF1"), _T("Show about dialog"));
+    helpMenu->Append(Emulator_About, wxT("&About...\tF1"), wxT("Show about dialog"));
 
-    menuFile->Append(Emulator_Quit, _T("E&xit\tAlt-X"), _T("Quit this program"));
+    menuFile->Append(Emulator_Quit, wxT("E&xit\tAlt-X"), wxT("Quit this program"));
 
     // now append the freshly created menu to the menu bar...
     wxMenuBar *menuBar = new wxMenuBar();
-    menuBar->Append(menuFile, _T("&File"));
-    menuBar->Append(helpMenu, _T("&Help"));
+    menuBar->Append(menuFile, wxT("&File"));
+    menuBar->Append(helpMenu, wxT("&Help"));
 
     // ... and attach this menu bar to the frame
     SetMenuBar(menuBar);
@@ -304,9 +304,9 @@ void wxEmulatorFrame::OnQuit(wxCommandEv
 void wxEmulatorFrame::OnAbout(wxCommandEvent& WXUNUSED(event))
 {
     wxString msg;
-    msg.Printf( _T("wxEmulator is an environment for testing embedded X11 apps.\n"));
+    msg.Printf( wxT("wxEmulator is an environment for testing embedded X11 apps.\n"));
 
-    wxMessageBox(msg, _T("About wxEmulator"), wxOK | wxICON_INFORMATION, this);
+    wxMessageBox(msg, wxT("About wxEmulator"), wxOK | wxICON_INFORMATION, this);
 }
 
 void wxEmulatorFrame::OnCloseWindow(wxCloseEvent& WXUNUSED(event))
@@ -522,17 +522,17 @@ wxBitmapType wxDetermineImageType(const 
     wxSplitPath(filename, & path, & name, & ext);
 
     ext.MakeLower();
-    if (ext == _T("jpg") || ext == _T("jpeg"))
+    if (ext == wxT("jpg") || ext == wxT("jpeg"))
         return wxBITMAP_TYPE_JPEG;
-    if (ext == _T("gif"))
+    if (ext == wxT("gif"))
         return wxBITMAP_TYPE_GIF;
-    if (ext == _T("bmp"))
+    if (ext == wxT("bmp"))
         return wxBITMAP_TYPE_BMP;
-    if (ext == _T("png"))
+    if (ext == wxT("png"))
         return wxBITMAP_TYPE_PNG;
-    if (ext == _T("pcx"))
+    if (ext == wxT("pcx"))
         return wxBITMAP_TYPE_PCX;
-    if (ext == _T("tif") || ext == _T("tiff"))
+    if (ext == wxT("tif") || ext == wxT("tiff"))
         return wxBITMAP_TYPE_TIF;
 
     return wxBITMAP_TYPE_INVALID;
--- utils/wxrc/wxrc.cpp-orig	2009-06-18 17:49:02.725733000 -0500
+++ utils/wxrc/wxrc.cpp	2009-06-18 17:49:11.889416000 -0500
@@ -63,9 +63,9 @@ private:
         wxXmlNode* children;
         while (node)
         {
-            if (node->GetName() == _T("object")
-                && node->GetPropVal(_T("class"),&classValue)
-                && node->GetPropVal(_T("name"),&nameValue))
+            if (node->GetName() == wxT("object")
+                && node->GetPropVal(wxT("class"),&classValue)
+                && node->GetPropVal(wxT("name"),&nameValue))
             {
                 m_wdata.Add(XRCWidgetData(nameValue,classValue));
             }
@@ -82,24 +82,24 @@ public:
                     const wxXmlNode* node) :
         m_className(className) , m_parentClassName(parentClassName)
     {
-        if ( className == _T("wxMenu") )
+        if ( className == wxT("wxMenu") )
         {
-            m_ancestorClassNames.insert(_T("wxMenu"));
-            m_ancestorClassNames.insert(_T("wxMenuBar"));
+            m_ancestorClassNames.insert(wxT("wxMenu"));
+            m_ancestorClassNames.insert(wxT("wxMenuBar"));
         }
-        else if ( className == _T("wxMDIChildFrame") )
+        else if ( className == wxT("wxMDIChildFrame") )
         {
-            m_ancestorClassNames.insert(_T("wxMDIParentFrame"));
+            m_ancestorClassNames.insert(wxT("wxMDIParentFrame"));
         }
-        else if( className == _T("wxMenuBar") ||
-                    className == _T("wxStatusBar") ||
-                        className == _T("wxToolBar") )
+        else if( className == wxT("wxMenuBar") ||
+                    className == wxT("wxStatusBar") ||
+                        className == wxT("wxToolBar") )
         {
-            m_ancestorClassNames.insert(_T("wxFrame"));
+            m_ancestorClassNames.insert(wxT("wxFrame"));
         }
         else
         {
-            m_ancestorClassNames.insert(_T("wxWindow"));
+            m_ancestorClassNames.insert(wxT("wxWindow"));
         }
 
         BrowseXmlNode(node->GetChildren());
@@ -112,16 +112,16 @@ public:
 
     bool IsRealClass(const wxString& name)
     {
-        if (name == _T("tool") ||
-            name == _T("data") ||
-            name == _T("unknown") ||
-            name == _T("notebookpage") ||
-            name == _T("separator") ||
-            name == _T("sizeritem") ||
-            name == _T("wxMenu") ||
-            name == _T("wxMenuBar") ||
-            name == _T("wxMenuItem") ||
-            name.EndsWith(_T("Sizer")) )
+        if (name == wxT("tool") ||
+            name == wxT("data") ||
+            name == wxT("unknown") ||
+            name == wxT("notebookpage") ||
+            name == wxT("separator") ||
+            name == wxT("sizeritem") ||
+            name == wxT("wxMenu") ||
+            name == wxT("wxMenuBar") ||
+            name == wxT("wxMenuItem") ||
+            name.EndsWith(wxT("Sizer")) )
         {
             return false;
         }
@@ -131,8 +131,8 @@ public:
     void GenerateHeaderCode(wxFFile& file)
     {
 
-        file.Write(_T("class ") + m_className + _T(" : public ") + m_parentClassName
-                   + _T(" {\nprotected:\n"));
+        file.Write(wxT("class ") + m_className + wxT(" : public ") + m_parentClassName
+                   + wxT(" {\nprotected:\n"));
         size_t i;
         for(i=0;i<m_wdata.Count();++i)
         {
@@ -140,60 +140,60 @@ public:
             if( !IsRealClass(w.GetClass()) ) continue;
             if( w.GetName().Length() == 0 ) continue;
             file.Write(
-                _T(" ") + w.GetClass() + _T("* ") + w.GetName()
-                + _T(";\n"));
+                wxT(" ") + w.GetClass() + wxT("* ") + w.GetName()
+                + wxT(";\n"));
         }
-        file.Write(_T("\nprivate:\n void InitWidgetsFromXRC(wxWindow *parent){\n")
-                   _T("  wxXmlResource::Get()->LoadObject(this,parent,_T(\"")
+        file.Write(wxT("\nprivate:\n void InitWidgetsFromXRC(wxWindow *parent){\n")
+                   wxT("  wxXmlResource::Get()->LoadObject(this,parent,wxT(\"")
                    +  m_className
-                   +  _T("\"), _T(\"")
+                   +  wxT("\"), wxT(\"")
                    +  m_parentClassName
-                   +  _T("\"));\n"));
+                   +  wxT("\"));\n"));
         for(i=0;i<m_wdata.Count();++i)
         {
             const XRCWidgetData& w = m_wdata.Item(i);
             if( !IsRealClass(w.GetClass()) ) continue;
             if( w.GetName().Length() == 0 ) continue;
-            file.Write( _T("  ")
+            file.Write( wxT("  ")
                         + w.GetName()
-                        + _T(" = XRCCTRL(*this,\"")
+                        + wxT(" = XRCCTRL(*this,\"")
                         + w.GetName()
-                        + _T("\",")
+                        + wxT("\",")
                         + w.GetClass()
-                        + _T(");\n"));
+                        + wxT(");\n"));
         }
-        file.Write(_T(" }\n"));
+        file.Write(wxT(" }\n"));
 
-        file.Write( _T("public:\n"));
+        file.Write( wxT("public:\n"));
 
         if ( m_ancestorClassNames.size() == 1 )
         {
             file.Write
                  (
                     m_className +
-                    _T("(") +
+                    wxT("(") +
                         *m_ancestorClassNames.begin() +
-                        _T(" *parent=NULL){\n") +
-                    _T("  InitWidgetsFromXRC((wxWindow *)parent);\n")
-                    _T(" }\n")
-                    _T("};\n")
+                        wxT(" *parent=NULL){\n") +
+                    wxT("  InitWidgetsFromXRC((wxWindow *)parent);\n")
+                    wxT(" }\n")
+                    wxT("};\n")
                  );
         }
         else
         {
-            file.Write(m_className + _T("(){\n") +
-                       _T("  InitWidgetsFromXRC(NULL);\n")
-                       _T(" }\n")
-                       _T("};\n"));
+            file.Write(m_className + wxT("(){\n") +
+                       wxT("  InitWidgetsFromXRC(NULL);\n")
+                       wxT(" }\n")
+                       wxT("};\n"));
 
             for ( StringSet::const_iterator it = m_ancestorClassNames.begin();
                   it != m_ancestorClassNames.end();
                   ++it )
             {
-                file.Write(m_className + _T("(") + *it + _T(" *parent){\n") +
-                            _T("  InitWidgetsFromXRC((wxWindow *)parent);\n")
-                            _T(" }\n")
-                            _T("};\n"));
+                file.Write(m_className + wxT("(") + *it + wxT(" *parent){\n") +
+                            wxT("  InitWidgetsFromXRC((wxWindow *)parent);\n")
+                            wxT(" }\n")
+                            wxT("};\n"));
             }
         }
     }
@@ -241,19 +241,19 @@ int XmlResApp::OnRun()
 {
     static const wxCmdLineEntryDesc cmdLineDesc[] =
     {
-        { wxCMD_LINE_SWITCH, _T("h"), _T("help"),  _T("show help message"),
+        { wxCMD_LINE_SWITCH, wxT("h"), wxT("help"),  wxT("show help message"),
               wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
-        { wxCMD_LINE_SWITCH, _T("v"), _T("verbose"), _T("be verbose"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("e"), _T("extra-cpp-code"),  _T("output C++ header file with XRC derived classes"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("c"), _T("cpp-code"),  _T("output C++ source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("p"), _T("python-code"),  _T("output wxPython source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("g"), _T("gettext"),  _T("output list of translatable strings (to stdout or file if -o used)"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_OPTION, _T("n"), _T("function"),  _T("C++/Python function name (with -c or -p) [InitXmlResource]"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_OPTION, _T("o"), _T("output"),  _T("output file [resource.xrs/cpp]"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("v"), wxT("verbose"), wxT("be verbose"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("e"), wxT("extra-cpp-code"),  wxT("output C++ header file with XRC derived classes"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("c"), wxT("cpp-code"),  wxT("output C++ source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("p"), wxT("python-code"),  wxT("output wxPython source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("g"), wxT("gettext"),  wxT("output list of translatable strings (to stdout or file if -o used)"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_OPTION, wxT("n"), wxT("function"),  wxT("C++/Python function name (with -c or -p) [InitXmlResource]"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_OPTION, wxT("o"), wxT("output"),  wxT("output file [resource.xrs/cpp]"), (wxCmdLineParamType)0, 0 },
 #if 0 // not yet implemented
-        { wxCMD_LINE_OPTION, _T("l"), _T("list-of-handlers"),  _T("output list of necessary handlers to this file"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_OPTION, wxT("l"), wxT("list-of-handlers"),  wxT("output list of necessary handlers to this file"), (wxCmdLineParamType)0, 0 },
 #endif
-        { wxCMD_LINE_PARAM,  NULL, NULL, _T("input file(s)"),
+        { wxCMD_LINE_PARAM,  NULL, NULL, wxT("input file(s)"),
               wxCMD_LINE_VAL_STRING,
               wxCMD_LINE_PARAM_MULTIPLE | wxCMD_LINE_OPTION_MANDATORY },
 
@@ -284,25 +284,25 @@ int XmlResApp::OnRun()
 
 void XmlResApp::ParseParams(const wxCmdLineParser& cmdline)
 {
-    flagGettext = cmdline.Found(_T("g"));
-    flagVerbose = cmdline.Found(_T("v"));
-    flagCPP = cmdline.Found(_T("c"));
-    flagPython = cmdline.Found(_T("p"));
-    flagH = flagCPP && cmdline.Found(_T("e"));
+    flagGettext = cmdline.Found(wxT("g"));
+    flagVerbose = cmdline.Found(wxT("v"));
+    flagCPP = cmdline.Found(wxT("c"));
+    flagPython = cmdline.Found(wxT("p"));
+    flagH = flagCPP && cmdline.Found(wxT("e"));
 
 
-    if (!cmdline.Found(_T("o"), &parOutput))
+    if (!cmdline.Found(wxT("o"), &parOutput))
     {
         if (flagGettext)
             parOutput = wxEmptyString;
         else
         {
             if (flagCPP)
-                parOutput = _T("resource.cpp");
+                parOutput = wxT("resource.cpp");
             else if (flagPython)
-                parOutput = _T("resource.py");
+                parOutput = wxT("resource.py");
             else
-                parOutput = _T("resource.xrs");
+                parOutput = wxT("resource.xrs");
         }
     }
     if (!parOutput.empty())
@@ -312,10 +312,10 @@ void XmlResApp::ParseParams(const wxCmdL
         parOutput = fn.GetFullPath();
         parOutputPath = wxPathOnly(parOutput);
     }
-    if (!parOutputPath) parOutputPath = _T(".");
+    if (!parOutputPath) parOutputPath = wxT(".");
 
-    if (!cmdline.Found(_T("n"), &parFuncname))
-        parFuncname = _T("InitXmlResource");
+    if (!cmdline.Found(wxT("n"), &parFuncname))
+        parFuncname = wxT("InitXmlResource");
 
     for (size_t i = 0; i < cmdline.GetParamCount(); i++)
     {
@@ -361,19 +361,19 @@ void XmlResApp::CompileRes()
 wxString XmlResApp::GetInternalFileName(const wxString& name, const wxArrayString& flist)
 {
     wxString name2 = name;
-    name2.Replace(_T(":"), _T("_"));
-    name2.Replace(_T("/"), _T("_"));
-    name2.Replace(_T("\\"), _T("_"));
-    name2.Replace(_T("*"), _T("_"));
-    name2.Replace(_T("?"), _T("_"));
+    name2.Replace(wxT(":"), wxT("_"));
+    name2.Replace(wxT("/"), wxT("_"));
+    name2.Replace(wxT("\\"), wxT("_"));
+    name2.Replace(wxT("*"), wxT("_"));
+    name2.Replace(wxT("?"), wxT("_"));
 
-    wxString s = wxFileNameFromPath(parOutput) + _T("$") + name2;
+    wxString s = wxFileNameFromPath(parOutput) + wxT("$") + name2;
 
     if (wxFileExists(s) && flist.Index(s) == wxNOT_FOUND)
     {
         for (int i = 0;; i++)
         {
-            s.Printf(wxFileNameFromPath(parOutput) + _T("$%03i-") + name2, i);
+            s.Printf(wxFileNameFromPath(parOutput) + wxT("$%03i-") + name2, i);
             if (!wxFileExists(s) || flist.Index(s) != wxNOT_FOUND)
                 break;
         }
@@ -388,13 +388,13 @@ wxArrayString XmlResApp::PrepareTempFile
     for (size_t i = 0; i < parFiles.Count(); i++)
     {
         if (flagVerbose)
-            wxPrintf(_T("processing ") + parFiles[i] +  _T("...\n"));
+            wxPrintf(wxT("processing ") + parFiles[i] +  wxT("...\n"));
 
         wxXmlDocument doc;
 
         if (!doc.Load(parFiles[i]))
         {
-            wxLogError(_T("Error parsing file ") + parFiles[i]);
+            wxLogError(wxT("Error parsing file ") + parFiles[i]);
             retCode = 1;
             continue;
         }
@@ -408,9 +408,9 @@ wxArrayString XmlResApp::PrepareTempFile
             wxXmlNode* node = (doc.GetRoot())->GetChildren();
                 wxString classValue,nameValue;
                 while(node){
-                    if(node->GetName() == _T("object")
-                     && node->GetPropVal(_T("class"),&classValue)
-                     && node->GetPropVal(_T("name"),&nameValue)){
+                    if(node->GetName() == wxT("object")
+                     && node->GetPropVal(wxT("class"),&classValue)
+                     && node->GetPropVal(wxT("name"),&nameValue)){
 
                       aXRCWndClassData.Add(
                         XRCWndClassData(nameValue,classValue,node)
@@ -435,34 +435,34 @@ static bool NodeContainsFilename(wxXmlNo
    const wxString name = node->GetName();
 
    // Any bitmaps (bitmap2 is used for disabled toolbar buttons):
-   if ( name == _T("bitmap") || name == _T("bitmap2") )
+   if ( name == wxT("bitmap") || name == wxT("bitmap2") )
        return true;
 
-   if ( name == _T("icon") )
+   if ( name == wxT("icon") )
        return true;
 
    // wxBitmapButton:
    wxXmlNode *parent = node->GetParent();
    if (parent != NULL &&
-       parent->GetPropVal(_T("class"), _T("")) == _T("wxBitmapButton") &&
-       (name == _T("focus") ||
-        name == _T("disabled") ||
-        name == _T("hover") ||
-        name == _T("selected")))
+       parent->GetPropVal(wxT("class"), wxT("")) == wxT("wxBitmapButton") &&
+       (name == wxT("focus") ||
+        name == wxT("disabled") ||
+        name == wxT("hover") ||
+        name == wxT("selected")))
        return true;
 
    // wxBitmap or wxIcon toplevel resources:
-   if ( name == _T("object") )
+   if ( name == wxT("object") )
    {
-       wxString klass = node->GetPropVal(_T("class"), wxEmptyString);
-       if (klass == _T("wxBitmap") || klass == _T("wxIcon"))
+       wxString klass = node->GetPropVal(wxT("class"), wxEmptyString);
+       if (klass == wxT("wxBitmap") || klass == wxT("wxIcon"))
            return true;
    }
 
    // URLs in wxHtmlWindow:
-   if ( name == _T("url") &&
+   if ( name == wxT("url") &&
         parent != NULL &&
-        parent->GetPropVal(_T("class"), _T("")) == _T("wxHtmlWindow") )
+        parent->GetPropVal(wxT("class"), wxT("")) == wxT("wxHtmlWindow") )
    {
        // FIXME: this is wrong for e.g. http:// URLs
        return true;
@@ -494,7 +494,7 @@ void XmlResApp::FindFilesInXML(wxXmlNode
                 fullname = inputPath + wxFILE_SEP_PATH + n->GetContent();
 
             if (flagVerbose)
-                wxPrintf(_T("adding     ") + fullname +  _T("...\n"));
+                wxPrintf(wxT("adding     ") + fullname +  wxT("...\n"));
 
             wxString filename = GetInternalFileName(n->GetContent(), flist);
             n->SetContent(filename);
@@ -530,22 +530,22 @@ void XmlResApp::MakePackageZIP(const wxA
     wxString files;
 
     for (size_t i = 0; i < flist.Count(); i++)
-        files += flist[i] + _T(" ");
+        files += flist[i] + wxT(" ");
     files.RemoveLast();
 
     if (flagVerbose)
-        wxPrintf(_T("compressing ") + parOutput +  _T("...\n"));
+        wxPrintf(wxT("compressing ") + parOutput +  wxT("...\n"));
 
     wxString cwd = wxGetCwd();
     wxSetWorkingDirectory(parOutputPath);
-    int execres = wxExecute(_T("zip -9 -j ") +
-                            wxString(flagVerbose ? _T("\"") : _T("-q \"")) +
-                            parOutput + _T("\" ") + files, true);
+    int execres = wxExecute(wxT("zip -9 -j ") +
+                            wxString(flagVerbose ? wxT("\"") : wxT("-q \"")) +
+                            parOutput + wxT("\" ") + files, true);
     wxSetWorkingDirectory(cwd);
     if (execres == -1)
     {
-        wxLogError(_T("Unable to execute zip program. Make sure it is in the path."));
-        wxLogError(_T("You can download it at http://www.cdrom.com/pub/infozip/"));
+        wxLogError(wxT("Unable to execute zip program. Make sure it is in the path."));
+        wxLogError(wxT("You can download it at http://www.cdrom.com/pub/infozip/"));
         retCode = 1;
         return;
     }
@@ -565,9 +565,9 @@ static wxString FileToCppArray(wxString 
     const size_t lng = wx_truncate_cast(size_t, offset);
     wxASSERT_MSG( !(lng - offset), wxT("Huge file not supported") );
 
-    snum.Printf(_T("%i"), num);
-    output.Printf(_T("static size_t xml_res_size_") + snum + _T(" = %i;\n"), lng);
-    output += _T("static unsigned char xml_res_file_") + snum + _T("[] = {\n");
+    snum.Printf(wxT("%i"), num);
+    output.Printf(wxT("static size_t xml_res_size_") + snum + wxT(" = %i;\n"), lng);
+    output += wxT("static unsigned char xml_res_file_") + snum + wxT("[] = {\n");
     // we cannot use string literals because MSVC is dumb wannabe compiler
     // with arbitrary limitation to 2048 strings :(
 
@@ -576,12 +576,12 @@ static wxString FileToCppArray(wxString 
 
     for (size_t i = 0, linelng = 0; i < lng; i++)
     {
-        tmp.Printf(_T("%i"), buffer[i]);
-        if (i != 0) output << _T(',');
+        tmp.Printf(wxT("%i"), buffer[i]);
+        if (i != 0) output << wxT(',');
         if (linelng > 70)
         {
             linelng = 0;
-            output << _T("\n");
+            output << wxT("\n");
         }
         output << tmp;
         linelng += tmp.Length()+1;
@@ -589,7 +589,7 @@ static wxString FileToCppArray(wxString 
 
     delete[] buffer;
 
-    output += _T("};\n\n");
+    output += wxT("};\n\n");
 
     return output;
 }
@@ -601,51 +601,51 @@ void XmlResApp::MakePackageCPP(const wxA
     size_t i;
 
     if (flagVerbose)
-        wxPrintf(_T("creating C++ source file ") + parOutput +  _T("...\n"));
+        wxPrintf(wxT("creating C++ source file ") + parOutput +  wxT("...\n"));
 
-    file.Write(_T("")
-_T("//\n")
-_T("// This file was automatically generated by wxrc, do not edit by hand.\n")
-_T("//\n\n")
-_T("#include <wx/wxprec.h>\n")
-_T("\n")
-_T("#ifdef __BORLANDC__\n")
-_T("    #pragma hdrstop\n")
-_T("#endif\n")
-_T("\n")
-_T("")
-_T("#include <wx/filesys.h>\n")
-_T("#include <wx/fs_mem.h>\n")
-_T("#include <wx/xrc/xmlres.h>\n")
-_T("#include <wx/xrc/xh_all.h>\n")
-_T("\n")
-_T("#if wxCHECK_VERSION(2,8,5) && wxABI_VERSION >= 20805\n")
-_T("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
-_T("        wxMemoryFSHandler::AddFileWithMimeType(name, data, size, mime)\n")
-_T("#else\n")
-_T("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
-_T("        wxMemoryFSHandler::AddFile(name, data, size)\n")
-_T("#endif\n")
-_T("\n"));
+    file.Write(wxT("")
+wxT("//\n")
+wxT("// This file was automatically generated by wxrc, do not edit by hand.\n")
+wxT("//\n\n")
+wxT("#include <wx/wxprec.h>\n")
+wxT("\n")
+wxT("#ifdef __BORLANDC__\n")
+wxT("    #pragma hdrstop\n")
+wxT("#endif\n")
+wxT("\n")
+wxT("")
+wxT("#include <wx/filesys.h>\n")
+wxT("#include <wx/fs_mem.h>\n")
+wxT("#include <wx/xrc/xmlres.h>\n")
+wxT("#include <wx/xrc/xh_all.h>\n")
+wxT("\n")
+wxT("#if wxCHECK_VERSION(2,8,5) && wxABI_VERSION >= 20805\n")
+wxT("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
+wxT("        wxMemoryFSHandler::AddFileWithMimeType(name, data, size, mime)\n")
+wxT("#else\n")
+wxT("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
+wxT("        wxMemoryFSHandler::AddFile(name, data, size)\n")
+wxT("#endif\n")
+wxT("\n"));
 
     for (i = 0; i < flist.Count(); i++)
         file.Write(
               FileToCppArray(parOutputPath + wxFILE_SEP_PATH + flist[i], i));
 
-    file.Write(_T("")
-_T("void ") + parFuncname + wxT("()\n")
-_T("{\n")
-_T("\n")
-_T("    // Check for memory FS. If not present, load the handler:\n")
-_T("    {\n")
-_T("        wxMemoryFSHandler::AddFile(wxT(\"XRC_resource/dummy_file\"), wxT(\"dummy one\"));\n")
-_T("        wxFileSystem fsys;\n")
-_T("        wxFSFile *f = fsys.OpenFile(wxT(\"memory:XRC_resource/dummy_file\"));\n")
-_T("        wxMemoryFSHandler::RemoveFile(wxT(\"XRC_resource/dummy_file\"));\n")
-_T("        if (f) delete f;\n")
-_T("        else wxFileSystem::AddHandler(new wxMemoryFSHandler);\n")
-_T("    }\n")
-_T("\n"));
+    file.Write(wxT("")
+wxT("void ") + parFuncname + wxT("()\n")
+wxT("{\n")
+wxT("\n")
+wxT("    // Check for memory FS. If not present, load the handler:\n")
+wxT("    {\n")
+wxT("        wxMemoryFSHandler::AddFile(wxT(\"XRC_resource/dummy_file\"), wxT(\"dummy one\"));\n")
+wxT("        wxFileSystem fsys;\n")
+wxT("        wxFSFile *f = fsys.OpenFile(wxT(\"memory:XRC_resource/dummy_file\"));\n")
+wxT("        wxMemoryFSHandler::RemoveFile(wxT(\"XRC_resource/dummy_file\"));\n")
+wxT("        if (f) delete f;\n")
+wxT("        else wxFileSystem::AddHandler(new wxMemoryFSHandler);\n")
+wxT("    }\n")
+wxT("\n"));
 
     for (i = 0; i < flist.Count(); i++)
     {
@@ -653,8 +653,8 @@ _T("\n"));
 
         wxString mime;
         wxString ext = wxFileName(flist[i]).GetExt();
-        if ( ext.Lower() == _T("xrc") )
-            mime = _T("text/xml");
+        if ( ext.Lower() == wxT("xrc") )
+            mime = wxT("text/xml");
 #if wxUSE_MIMETYPE
         else
         {
@@ -667,19 +667,19 @@ _T("\n"));
         }
 #endif // wxUSE_MIMETYPE
 
-        s.Printf(_T("    XRC_ADD_FILE(wxT(\"XRC_resource/") + flist[i] +
-                 _T("\"), xml_res_file_%i, xml_res_size_%i, _T(\"%s\"));\n"),
+        s.Printf(wxT("    XRC_ADD_FILE(wxT(\"XRC_resource/") + flist[i] +
+                 wxT("\"), xml_res_file_%i, xml_res_size_%i, wxT(\"%s\"));\n"),
                  i, i, mime.c_str());
         file.Write(s);
     }
 
     for (i = 0; i < parFiles.Count(); i++)
     {
-        file.Write(_T("    wxXmlResource::Get()->Load(wxT(\"memory:XRC_resource/") +
-                   GetInternalFileName(parFiles[i], flist) + _T("\"));\n"));
+        file.Write(wxT("    wxXmlResource::Get()->Load(wxT(\"memory:XRC_resource/") +
+                   GetInternalFileName(parFiles[i], flist) + wxT("\"));\n"));
     }
 
-    file.Write(_T("}\n"));
+    file.Write(wxT("}\n"));
 
 
 }
@@ -687,23 +687,23 @@ _T("\n"));
 void XmlResApp::GenCPPHeader()
 {
     wxString fileSpec = ((parOutput.BeforeLast('.')).AfterLast('/')).AfterLast('\\');
-    wxString heaFileName = fileSpec + _T(".h");
+    wxString heaFileName = fileSpec + wxT(".h");
 
     wxFFile file(heaFileName, wxT("wt"));
     file.Write(
-_T("//\n")
-_T("// This file was automatically generated by wxrc, do not edit by hand.\n")
-_T("//\n\n")
-_T("#ifndef __")  + fileSpec + _T("_h__\n")
-_T("#define __")  + fileSpec + _T("_h__\n")
+wxT("//\n")
+wxT("// This file was automatically generated by wxrc, do not edit by hand.\n")
+wxT("//\n\n")
+wxT("#ifndef __")  + fileSpec + wxT("_h__\n")
+wxT("#define __")  + fileSpec + wxT("_h__\n")
 );
     for(size_t i=0;i<aXRCWndClassData.Count();++i){
                 aXRCWndClassData.Item(i).GenerateHeaderCode(file);
     }
     file.Write(
-                _T("\nvoid \n")
+                wxT("\nvoid \n")
                 + parFuncname
-                + _T("();\n#endif\n"));
+                + wxT("();\n#endif\n"));
 }
 
 static wxString FileToPythonArray(wxString filename, int num)
@@ -718,8 +718,8 @@ static wxString FileToPythonArray(wxStri
     const size_t lng = wx_truncate_cast(size_t, offset);
     wxASSERT_MSG( !(offset - lng), wxT("Huge file not supported") );
 
-    snum.Printf(_T("%i"), num);
-    output = _T("    xml_res_file_") + snum + _T(" = '''\\\n");
+    snum.Printf(wxT("%i"), num);
+    output = wxT("    xml_res_file_") + snum + wxT(" = '''\\\n");
 
     unsigned char *buffer = new unsigned char[lng];
     file.Read(buffer, lng);
@@ -733,15 +733,15 @@ static wxString FileToPythonArray(wxStri
             linelng = 0;
         }
         else if (c < 32 || c > 127 || c == '\'')
-            tmp.Printf(_T("\\x%02x"), c);
+            tmp.Printf(wxT("\\x%02x"), c);
         else if (c == '\\')
-            tmp = _T("\\\\");
+            tmp = wxT("\\\\");
         else
             tmp = (wxChar)c;
         if (linelng > 70)
         {
             linelng = 0;
-            output << _T("\\\n");
+            output << wxT("\\\n");
         }
         output << tmp;
         linelng += tmp.Length();
@@ -749,7 +749,7 @@ static wxString FileToPythonArray(wxStri
 
     delete[] buffer;
 
-    output += _T("'''\n\n");
+    output += wxT("'''\n\n");
 
     return output;
 }
@@ -761,52 +761,52 @@ void XmlResApp::MakePackagePython(const 
     size_t i;
 
     if (flagVerbose)
-        wxPrintf(_T("creating Python source file ") + parOutput +  _T("...\n"));
+        wxPrintf(wxT("creating Python source file ") + parOutput +  wxT("...\n"));
 
     file.Write(
-       _T("#\n")
-       _T("# This file was automatically generated by wxrc, do not edit by hand.\n")
-       _T("#\n\n")
-       _T("import wx\n")
-       _T("import wx.xrc\n\n")
+       wxT("#\n")
+       wxT("# This file was automatically generated by wxrc, do not edit by hand.\n")
+       wxT("#\n\n")
+       wxT("import wx\n")
+       wxT("import wx.xrc\n\n")
     );
 
 
-    file.Write(_T("def ") + parFuncname + _T("():\n"));
+    file.Write(wxT("def ") + parFuncname + wxT("():\n"));
 
     for (i = 0; i < flist.Count(); i++)
         file.Write(
           FileToPythonArray(parOutputPath + wxFILE_SEP_PATH + flist[i], i));
 
     file.Write(
-        _T("    # check if the memory filesystem handler has been loaded yet, and load it if not\n")
-        _T("    wx.MemoryFSHandler.AddFile('XRC_resource/dummy_file', 'dummy value')\n")
-        _T("    fsys = wx.FileSystem()\n")
-        _T("    f = fsys.OpenFile('memory:XRC_resource/dummy_file')\n")
-        _T("    wx.MemoryFSHandler.RemoveFile('XRC_resource/dummy_file')\n")
-        _T("    if f is not None:\n")
-        _T("        f.Destroy()\n")
-        _T("    else:\n")
-        _T("        wx.FileSystem.AddHandler(wx.MemoryFSHandler())\n")
-        _T("\n")
-        _T("    # load all the strings as memory files and load into XmlRes\n")
+        wxT("    # check if the memory filesystem handler has been loaded yet, and load it if not\n")
+        wxT("    wx.MemoryFSHandler.AddFile('XRC_resource/dummy_file', 'dummy value')\n")
+        wxT("    fsys = wx.FileSystem()\n")
+        wxT("    f = fsys.OpenFile('memory:XRC_resource/dummy_file')\n")
+        wxT("    wx.MemoryFSHandler.RemoveFile('XRC_resource/dummy_file')\n")
+        wxT("    if f is not None:\n")
+        wxT("        f.Destroy()\n")
+        wxT("    else:\n")
+        wxT("        wx.FileSystem.AddHandler(wx.MemoryFSHandler())\n")
+        wxT("\n")
+        wxT("    # load all the strings as memory files and load into XmlRes\n")
         );
 
 
     for (i = 0; i < flist.Count(); i++)
     {
         wxString s;
-        s.Printf(_T("    wx.MemoryFSHandler.AddFile('XRC_resource/") + flist[i] +
-                 _T("', xml_res_file_%i)\n"), i);
+        s.Printf(wxT("    wx.MemoryFSHandler.AddFile('XRC_resource/") + flist[i] +
+                 wxT("', xml_res_file_%i)\n"), i);
         file.Write(s);
     }
     for (i = 0; i < parFiles.Count(); i++)
     {
-        file.Write(_T("    wx.xrc.XmlResource.Get().Load('memory:XRC_resource/") +
-                   GetInternalFileName(parFiles[i], flist) + _T("')\n"));
+        file.Write(wxT("    wx.xrc.XmlResource.Get().Load('memory:XRC_resource/") +
+                   GetInternalFileName(parFiles[i], flist) + wxT("')\n"));
     }
 
-    file.Write(_T("\n"));
+    file.Write(wxT("\n"));
 }
 
 
@@ -822,7 +822,7 @@ void XmlResApp::OutputGettext()
         fout.Open(parOutput, wxT("wt"));
 
     for (size_t i = 0; i < str.GetCount(); i++)
-        fout.Write(_T("_(\"") + str[i] + _T("\");\n"));
+        fout.Write(wxT("_(\"") + str[i] + wxT("\");\n"));
 
     if (!parOutput) fout.Detach();
 }
@@ -836,12 +836,12 @@ wxArrayString XmlResApp::FindStrings()
     for (size_t i = 0; i < parFiles.Count(); i++)
     {
         if (flagVerbose)
-            wxPrintf(_T("processing ") + parFiles[i] +  _T("...\n"));
+            wxPrintf(wxT("processing ") + parFiles[i] +  wxT("...\n"));
 
         wxXmlDocument doc;
         if (!doc.Load(parFiles[i]))
         {
-            wxLogError(_T("Error parsing file ") + parFiles[i]);
+            wxLogError(wxT("Error parsing file ") + parFiles[i]);
             retCode = 1;
             continue;
         }
@@ -908,20 +908,20 @@ wxArrayString XmlResApp::FindStrings(wxX
             n->GetType() == wxXML_CDATA_SECTION_NODE) &&
             // ...it is textnode...
             (
-                node/*not n!*/->GetName() == _T("label") ||
-                (node/*not n!*/->GetName() == _T("value") &&
+                node/*not n!*/->GetName() == wxT("label") ||
+                (node/*not n!*/->GetName() == wxT("value") &&
                                !n->GetContent().IsNumber()) ||
-                node/*not n!*/->GetName() == _T("help") ||
-                node/*not n!*/->GetName() == _T("longhelp") ||
-                node/*not n!*/->GetName() == _T("tooltip") ||
-                node/*not n!*/->GetName() == _T("htmlcode") ||
-                node/*not n!*/->GetName() == _T("title") ||
-                node/*not n!*/->GetName() == _T("item")
+                node/*not n!*/->GetName() == wxT("help") ||
+                node/*not n!*/->GetName() == wxT("longhelp") ||
+                node/*not n!*/->GetName() == wxT("tooltip") ||
+                node/*not n!*/->GetName() == wxT("htmlcode") ||
+                node/*not n!*/->GetName() == wxT("title") ||
+                node/*not n!*/->GetName() == wxT("item")
             ))
             // ...and known to contain translatable string
         {
             if (!flagGettext ||
-                node->GetPropVal(_T("translate"), _T("1")) != _T("0"))
+                node->GetPropVal(wxT("translate"), wxT("1")) != wxT("0"))
             {
                 arr.Add(ConvertText(n->GetContent()));
             }
--- utils/hhp2cached/hhp2cached.cpp-orig	2009-06-18 18:00:08.127739000 -0500
+++ utils/hhp2cached/hhp2cached.cpp	2009-06-18 18:00:19.053566000 -0500
@@ -33,7 +33,7 @@ bool MyApp::OnInit()
     for (int i = 1; i < argc; i++)
     {
         wxHtmlHelpData data;
-        wxPrintf(_T("Processing %s...\n"), argv[i]);
+        wxPrintf(wxT("Processing %s...\n"), argv[i]);
         data.SetTempDir(wxPathOnly(argv[i]));
         data.AddBook(argv[i]);
     }
--- utils/HelpGen/src/cjparser.cpp-orig	2009-06-18 17:58:06.981849000 -0500
+++ utils/HelpGen/src/cjparser.cpp	2009-06-18 17:58:24.685868000 -0500
@@ -388,7 +388,7 @@ static inline void skip_preprocessor_dir
     {
         skip_to_eol(cur);
 
-        if ( *(cur-1) != _T('\\') )
+        if ( *(cur-1) != wxT('\\') )
             break;
 
         if ( cur < _gSrcEnd )
@@ -899,8 +899,8 @@ static void arrange_indirection_tokens_b
 {
     // TBD:: FIXME:: return value of operators !
 
-    while ( identifier[0u] == _T('*') ||
-            identifier[0u] == _T('&')
+    while ( identifier[0u] == wxT('*') ||
+            identifier[0u] == wxT('&')
           )
     {
         type += identifier[0u];
@@ -936,7 +936,7 @@ static inline void get_string_between( w
 {
     char saved = *end;
 
-    *end  = _T('\0');
+    *end  = wxT('\0');
     *pStr = start;
     *end  = saved;
 }
@@ -950,14 +950,14 @@ static wxChar* set_comment_text( wxStrin
 
     skip_comments( end );
 
-    if ( *(end-1) == _T('/') )
+    if ( *(end-1) == wxT('/') )
         end -= 2;
 
     start += 2;
 
     // skip multiple leading '/''s or '*''s
-    while( *start == _T('/') && start < end ) ++start;
-    while( *start == _T('*') && start < end ) ++start;
+    while( *start == wxT('/') && start < end ) ++start;
+    while( *start == wxT('*') && start < end ) ++start;
 
     get_string_between( start, end, &text );
 
@@ -1064,13 +1064,13 @@ spFile* CJSourceParser::Parse( char* sta
             continue;
         }
 
-        if ( *m_cur >= _T('0') && *m_cur <= _T('9') )
+        if ( *m_cur >= wxT('0') && *m_cur <= wxT('9') )
         {
             skip_token( m_cur );
             continue;
         }
 
-        if ( *m_cur == _T('}') )
+        if ( *m_cur == wxT('}') )
         {
             if ( mCurCtxType != SP_CTX_CLASS )
             {
@@ -1207,7 +1207,7 @@ void CJSourceParser::AttachComments( spC
         // find the end of comment
         wxChar* start = _gCommentsQueue[i];
 
-        pComment->mIsMultiline = ( *(start+1) == _T('*') );
+        pComment->mIsMultiline = ( *(start+1) == wxT('*') );
 
         // first comment in the queue and multiline
         // comments are always treated as a begining
@@ -1249,7 +1249,7 @@ void CJSourceParser::AttachComments( spC
         set_comment_text( pComment->m_Text, cur );
 
         pComment->mStartsPar = 1;
-        pComment->mIsMultiline = ( *(cur+1) == _T('*') );
+        pComment->mIsMultiline = ( *(cur+1) == wxT('*') );
 
         // mark this comment, so that it would not
         // get in the comments list of the next context
@@ -1290,9 +1290,9 @@ void CJSourceParser::AddMacroNode( wxCha
     // determine the type exactly and assign
     // a name to the context
 
-    if ( *start == _T('d') )
+    if ( *start == wxT('d') )
     {
-        if ( cmp_tokens_fast( start, _T("define"), 6 ) )
+        if ( cmp_tokens_fast( start, wxT("define"), 6 ) )
         {
             char* tok = start+6;
 
@@ -1310,13 +1310,13 @@ void CJSourceParser::AddMacroNode( wxCha
                 pPL->mDefType = SP_PREP_DEF_REDEFINE_SYMBOL;
         }
     }
-    else if ( *start == _T('i') )
+    else if ( *start == wxT('i') )
     {
-        if ( cmp_tokens_fast( start, _T("include"), 7 ) )
+        if ( cmp_tokens_fast( start, wxT("include"), 7 ) )
         {
             pPL->mDefType = SP_PREP_DEF_INCLUDE_FILE;
         }
-        else if ( *++start == _T('f') )
+        else if ( *++start == wxT('f') )
         {
             // either "#if" or "#ifdef"
             cur = start;
@@ -1326,14 +1326,14 @@ void CJSourceParser::AddMacroNode( wxCha
             wxString condition = get_token_str( cur );
 
             // currently, everything except '0' is true
-            if ( condition == _T("0") ) {
+            if ( condition == wxT("0") ) {
                 // skip until the following else or enif
                 while ( cur < _gSrcEnd ) {
                     skip_to_eol( cur );
                     skip_eol( cur );
 
                     get_next_token( cur );
-                    if ( *cur++ == _T('#') && *cur == _T('e') )
+                    if ( *cur++ == wxT('#') && *cur == wxT('e') )
                         break;
                 }
             }
@@ -1341,7 +1341,7 @@ void CJSourceParser::AddMacroNode( wxCha
             // TODO parse the condition...
         }
     }
-    else if ( cmp_tokens_fast( start, _T("else"), 4 ) )
+    else if ( cmp_tokens_fast( start, wxT("else"), 4 ) )
     {
         // skip until "#endif"
         while ( cur < _gSrcEnd ) {
@@ -1349,7 +1349,7 @@ void CJSourceParser::AddMacroNode( wxCha
             skip_eol( cur );
 
             get_next_token( cur );
-            if ( *cur++ == _T('#') && cmp_tokens_fast( cur, "endif", 5 ) )
+            if ( *cur++ == wxT('#') && cmp_tokens_fast( cur, "endif", 5 ) )
                 break;
         }
     }
@@ -1876,7 +1876,7 @@ void CJSourceParser::ParseMemberVar( cha
         // if comma, than variable list continues
         // otherwise the variable type reached - stop
 
-        if ( *cur == _T('=') )
+        if ( *cur == wxT('=') )
         {
             // yes, we've mistaken, it was not a identifier,
             // but it's default value
--- utils/HelpGen/src/srcparser.cpp-orig	2009-06-18 17:58:30.394627000 -0500
+++ utils/HelpGen/src/srcparser.cpp	2009-06-18 17:58:42.946544000 -0500
@@ -414,9 +414,9 @@ spOperation::spOperation()
 wxString spOperation::GetFullName(MarkupTagsT tags)
 {
     wxString txt = tags[TAG_BOLD].start + m_RetType;
-    txt += _T(" ");
+    txt += wxT(" ");
     txt += m_Name;
-    txt += _T("( ");
+    txt += wxT("( ");
     txt += tags[TAG_BOLD].end;
 
     for( size_t i = 0; i != mMembers.size(); ++i )
@@ -427,7 +427,7 @@ wxString spOperation::GetFullName(Markup
         spParameter& param = *((spParameter*)mMembers[i]);
 
         if ( i != 0 )
-            txt += _T(", ");
+            txt += wxT(", ");
 
         txt += tags[TAG_BOLD].start;
 
@@ -436,12 +436,12 @@ wxString spOperation::GetFullName(Markup
         txt += tags[TAG_BOLD].end;
         txt += tags[TAG_ITALIC].start;
 
-        txt += _T(" ");
+        txt += wxT(" ");
         txt += param.m_Name;
 
         if ( !param.m_InitVal.empty() )
         {
-            txt += _T(" = ");
+            txt += wxT(" = ");
             txt += tags[TAG_BOLD].start;
 
             txt += param.m_InitVal;
@@ -469,7 +469,7 @@ wxString spPreprocessorLine::CPP_GetIncl
 
     size_t i = 0;
 
-    while( i < m_Line.length() && m_Line[i] != _T('"') && m_Line[i] != _T('<') )
+    while( i < m_Line.length() && m_Line[i] != wxT('"') && m_Line[i] != wxT('<') )
 
         ++i;
 
@@ -477,7 +477,7 @@ wxString spPreprocessorLine::CPP_GetIncl
 
     size_t start = i;
 
-    while( i < m_Line.length() && m_Line[i] != _T('"') && m_Line[i] != _T('>') )
+    while( i < m_Line.length() && m_Line[i] != wxT('"') && m_Line[i] != wxT('>') )
 
         ++i;
 
@@ -600,8 +600,8 @@ void spOperation::DumpThis(const wxStrin
     }
 
     wxString constStr,virtualStr;
-    if(mIsConstant) constStr = _T("const ");
-    if(mIsVirtual) virtualStr = _T("virtual ");
+    if(mIsConstant) constStr = wxT("const ");
+    if(mIsVirtual) virtualStr = wxT("virtual ");
 
     wxLogDebug("%s%s%s%s function named '%s::%s' of type '%s'",
                indent.c_str(),
--- utils/HelpGen/src/docripper.cpp-orig	2009-06-18 17:58:48.310834000 -0500
+++ utils/HelpGen/src/docripper.cpp	2009-06-18 17:58:55.184794000 -0500
@@ -206,11 +206,11 @@ void RipperDocGen::AppendComments( spCon
                      ( str[n] == 10 && str[n+1] == 10 )
                    )
                 {
-                    str.insert( n + 1, _T("<p>") ); // FIXME:: quick-hack
+                    str.insert( n + 1, wxT("<p>") ); // FIXME:: quick-hack
                     len += 3;
                 }
             }
-            str[n] = _T(' ');
+            str[n] = wxT(' ');
         }
     str += m_Tags[TAG_PARAGRAPH].end;
 }
@@ -263,7 +263,7 @@ wxString RipperDocGen::GetScopedName( sp
         return ofCtx.GetName();
     else
         return ofCtx.GetOutterContext()->GetName() +
-               _T("::") + ofCtx.GetName();
+               wxT("::") + ofCtx.GetName();
 }
 
 void RipperDocGen::AddToCurrentClass( ScriptSection* pSection, spContext& ctx,
--- utils/HelpGen/src/HelpGen.cpp-orig	2009-06-18 17:59:00.719045000 -0500
+++ utils/HelpGen/src/HelpGen.cpp	2009-06-18 17:59:07.578249000 -0500
@@ -140,7 +140,7 @@ struct FunctionDocEntry
                 return 1;
             }
 
-            wxString dtorname = wxString(_T("~")) + classname;
+            wxString dtorname = wxString(wxT("~")) + classname;
 
             // there is only one dtor, so the logic here is simpler
             if ( (*pp1)->name == dtorname ) {
@@ -197,7 +197,7 @@ public:
             return true;
 
         if ( !Write(m_text) ) {
-            wxLogError(_T("Failed to output generated documentation."));
+            wxLogError(wxT("Failed to output generated documentation."));
 
             return false;
         }
@@ -902,7 +902,7 @@ void HelpGenVisitor::CloseClass()
                 wxString section(m_arrayFuncDocs[n].text);
 
                 // Strip leading whitespace
-                int pos = section.Find(_T("\\membersection"));
+                int pos = section.Find(wxT("\\membersection"));
                 if (pos > -1)
                 {
                     section = section.Mid(pos);
@@ -1163,9 +1163,9 @@ void HelpGenVisitor::VisitEnumeration( s
     wxString enumeration = GetAllComments(en),
              enumerationVerb;
 
-    enumerationVerb << _T("\\begin{verbatim}\n")
+    enumerationVerb << wxT("\\begin{verbatim}\n")
                     << en.m_EnumContent
-                    << _T("\n\\end{verbatim}\n");
+                    << wxT("\n\\end{verbatim}\n");
 
     // remember for later use if we're not inside a class yet
     if ( !m_inClass ) {
@@ -1194,9 +1194,9 @@ void HelpGenVisitor::VisitTypeDef( spTyp
     }
 
     wxString typedefdoc;
-    typedefdoc << _T("{\\small \\begin{verbatim}\n")
-               << _T("typedef ") << td.m_OriginalType << _T(' ') << td.GetName()
-               << _T("\n\\end{verbatim}}\n")
+    typedefdoc << wxT("{\\small \\begin{verbatim}\n")
+               << wxT("typedef ") << td.m_OriginalType << wxT(' ') << td.GetName()
+               << wxT("\n\\end{verbatim}}\n")
                << GetAllComments(td);
 
     // remember for later use if we're not inside a class yet
@@ -1296,14 +1296,14 @@ void HelpGenVisitor::VisitOperation( spO
         MakeLabel(m_classname, funcname).c_str());
 
     wxString constStr;
-    if(op.mIsConstant) constStr = _T("const");
+    if(op.mIsConstant) constStr = wxT("const");
 
     wxString virtualStr;
-    if(op.mIsVirtual) virtualStr = _T("virtual ");
+    if(op.mIsVirtual) virtualStr = wxT("virtual ");
 
     wxString func;
-    func.Printf(_T("\n")
-                _T("\\%sfunc{%s%s}{%s}{"),
+    func.Printf(wxT("\n")
+                wxT("\\%sfunc{%s%s}{%s}{"),
                 constStr.c_str(),
                 virtualStr.c_str(),
                 op.m_RetType.c_str(),
@@ -1688,7 +1688,7 @@ bool DocManager::ParseTeXFile(const wxSt
 
         wxString constStr;
         if (foundCommand == ConstFunc)
-            constStr = _T(" const");
+            constStr = wxT(" const");
 
         wxLogVerbose("file %s(%d): found '%s %s::%s(%s)%s'",
                      m_filename.c_str(),
@@ -1838,7 +1838,7 @@ bool DocManager::DumpDifferences(spConte
                 if ( isVirtual != method.HasFlag(MethodInfo::Virtual) )
                 {
                     wxString virtualStr;
-                    if(isVirtual)virtualStr = _T("not ");
+                    if(isVirtual)virtualStr = wxT("not ");
 
                     wxLogWarning("'%s::%s' is incorrectly documented as %s"
                                  "virtual.",
@@ -1851,7 +1851,7 @@ bool DocManager::DumpDifferences(spConte
                 if ( isConst != method.HasFlag(MethodInfo::Const) )
                 {
                     wxString constStr;
-                    if(isConst)constStr = _T("not ");
+                    if(isConst)constStr = wxT("not ");
 
                     wxLogWarning("'%s::%s' is incorrectly documented as %s"
                                  "constant.",
--- utils/HelpGen/src/scriptbinder.cpp-orig	2009-06-18 17:59:18.204352000 -0500
+++ utils/HelpGen/src/scriptbinder.cpp	2009-06-18 17:59:22.559733000 -0500
@@ -340,7 +340,7 @@ ScriptSection::ScriptSection( const wxSt
     // generate GUID
 
     wxChar buf[32];
-    wxSprintf( buf, _T("%d"), ++m_IdCounter );
+    wxSprintf( buf, wxT("%d"), ++m_IdCounter );
     m_Id = buf;
 }
 
--- utils/tex2rtf/src/tex2any.cpp-orig	2009-06-18 17:49:49.430826000 -0500
+++ utils/tex2rtf/src/tex2any.cpp	2009-06-18 17:49:58.345683000 -0500
@@ -52,13 +52,13 @@ TexChunk *      CentreHeaderOdd = NULL;
 TexChunk *      CentreFooterOdd = NULL;
 TexChunk *      RightHeaderOdd = NULL;
 TexChunk *      RightFooterOdd = NULL;
-wxChar *        PageStyle = copystring(_T("plain"));
+wxChar *        PageStyle = copystring(wxT("plain"));
 
 int             DocumentStyle = LATEX_REPORT;
 int             MinorDocumentStyle = 0;
 wxPathList      TexPathList;
-wxChar *        BibliographyStyleString = copystring(_T("plain"));
-wxChar *        DocumentStyleString = copystring(_T("report"));
+wxChar *        BibliographyStyleString = copystring(wxT("plain"));
+wxChar *        DocumentStyleString = copystring(wxT("report"));
 wxChar *        MinorDocumentStyleString = NULL;
 int             ParSkip = 0;
 int             ParIndent = 0;
@@ -77,18 +77,18 @@ int             HUGEFont3 = 28;
 // text) and must start at the first character of the line, or tex2rtf
 // will fail to process them correctly (a limitation of tex2rtf, not TeX)
 static const wxString syntaxTokens[] =
-{ _T("\\begin{verbatim}"),
-  _T("\\begin{toocomplex}"),
-  _T("\\end{verbatim}"),
-  _T("\\end{toocomplex}"),
-  _T("\\verb"),
-  _T("\\begin{comment}"),
-  _T("\\end{comment}"),
-  _T("\\verbatiminput"),
-//  _T("\\par"),
-  _T("\\input"),
-  _T("\\helpinput"),
-  _T("\\include"),
+{ wxT("\\begin{verbatim}"),
+  wxT("\\begin{toocomplex}"),
+  wxT("\\end{verbatim}"),
+  wxT("\\end{toocomplex}"),
+  wxT("\\verb"),
+  wxT("\\begin{comment}"),
+  wxT("\\end{comment}"),
+  wxT("\\verbatiminput"),
+//  wxT("\\par"),
+  wxT("\\input"),
+  wxT("\\helpinput"),
+  wxT("\\include"),
   wxEmptyString
 };
 
@@ -136,11 +136,11 @@ bool            useWord = true; // Inser
 int             contentsDepth = 4; // Depth of Word table of contents
 bool            indexSubsections = true; // Index subsections in linear RTF
 // Linear RTF method of including bitmaps. Can be "includepicture", "hex"
-wxChar         *bitmapMethod = copystring(_T("includepicture"));
+wxChar         *bitmapMethod = copystring(wxT("includepicture"));
 bool            upperCaseNames = false;
 // HTML background and text colours
 wxChar         *backgroundImageString = NULL;
-wxChar         *backgroundColourString = copystring(_T("255;255;255"));
+wxChar         *backgroundColourString = copystring(wxT("255;255;255"));
 wxChar         *textColourString = NULL;
 wxChar         *linkColourString = NULL;
 wxChar         *followedLinkColourString = NULL;
@@ -158,20 +158,20 @@ extern wxHashTable TexReferences;
  */
 
 // Names to help with internationalisation
-wxChar *ContentsNameString = copystring(_T("Contents"));
-wxChar *AbstractNameString = copystring(_T("Abstract"));
-wxChar *GlossaryNameString = copystring(_T("Glossary"));
-wxChar *ReferencesNameString = copystring(_T("References"));
-wxChar *FiguresNameString = copystring(_T("List of Figures"));
-wxChar *TablesNameString = copystring(_T("List of Tables"));
-wxChar *FigureNameString = copystring(_T("Figure"));
-wxChar *TableNameString = copystring(_T("Table"));
-wxChar *IndexNameString = copystring(_T("Index"));
-wxChar *ChapterNameString = copystring(_T("chapter"));
-wxChar *SectionNameString = copystring(_T("section"));
-wxChar *SubsectionNameString = copystring(_T("subsection"));
-wxChar *SubsubsectionNameString = copystring(_T("subsubsection"));
-wxChar *UpNameString = copystring(_T("Up"));
+wxChar *ContentsNameString = copystring(wxT("Contents"));
+wxChar *AbstractNameString = copystring(wxT("Abstract"));
+wxChar *GlossaryNameString = copystring(wxT("Glossary"));
+wxChar *ReferencesNameString = copystring(wxT("References"));
+wxChar *FiguresNameString = copystring(wxT("List of Figures"));
+wxChar *TablesNameString = copystring(wxT("List of Tables"));
+wxChar *FigureNameString = copystring(wxT("Figure"));
+wxChar *TableNameString = copystring(wxT("Table"));
+wxChar *IndexNameString = copystring(wxT("Index"));
+wxChar *ChapterNameString = copystring(wxT("chapter"));
+wxChar *SectionNameString = copystring(wxT("section"));
+wxChar *SubsectionNameString = copystring(wxT("subsection"));
+wxChar *SubsubsectionNameString = copystring(wxT("subsubsection"));
+wxChar *UpNameString = copystring(wxT("Up"));
 
 /*
  * Section numbering
@@ -227,8 +227,8 @@ TexRef::TexRef(const wxChar *label, cons
 {
     refLabel = copystring(label);
     refFile = file ? copystring(file) : (wxChar*) NULL;
-    sectionNumber = section ? copystring(section) : copystring(_T("??"));
-    sectionName = sectionN ? copystring(sectionN) : copystring(_T("??"));
+    sectionNumber = section ? copystring(section) : copystring(wxT("??"));
+    sectionName = sectionN ? copystring(sectionN) : copystring(wxT("??"));
 }
 
 TexRef::~TexRef(void)
@@ -265,9 +265,9 @@ void TexOutput(const wxChar *s, bool ord
     }
 
   if (CurrentOutput1)
-    wxFprintf(CurrentOutput1, _T("%s"), s);
+    wxFprintf(CurrentOutput1, wxT("%s"), s);
   if (CurrentOutput2)
-    wxFprintf(CurrentOutput2, _T("%s"), s);
+    wxFprintf(CurrentOutput2, wxT("%s"), s);
 }
 
 /*
@@ -284,13 +284,13 @@ void ForbidWarning(TexMacroDef *def)
   {
     case FORBID_WARN:
     {
-      informBuf.Printf(_T("Warning: it is recommended that command %s is not used."), def->name);
+      informBuf.Printf(wxT("Warning: it is recommended that command %s is not used."), def->name);
       OnInform((const wxChar *)informBuf.c_str());
       break;
     }
     case FORBID_ABSOLUTELY:
     {
-      informBuf.Printf(_T("Error: command %s cannot be used and will lead to errors."), def->name);
+      informBuf.Printf(wxT("Error: command %s cannot be used and will lead to errors."), def->name);
       OnInform((const wxChar *)informBuf.c_str());
       break;
     }
@@ -307,7 +307,7 @@ TexMacroDef *MatchMacro(wxChar *buffer, 
     wxChar macroBuf[40];
 
     // First, try to find begin{thing}
-    if (wxStrncmp(buffer+i, _T("begin{"), 6) == 0)
+    if (wxStrncmp(buffer+i, wxT("begin{"), 6) == 0)
     {
         i += 6;
 
@@ -411,7 +411,7 @@ bool FindEndEnvironment(wxChar *buffer, 
   int i = (*pos);
 
   // Try to find end{thing}
-  if ((wxStrncmp(buffer+i, _T("end{"), 4) == 0) &&
+  if ((wxStrncmp(buffer+i, wxT("end{"), 4) == 0) &&
       (wxStrncmp(buffer+i+4, env, wxStrlen(env)) == 0))
   {
     *pos = i + 5 + wxStrlen(env);
@@ -449,14 +449,14 @@ bool read_a_line(wxChar *buf)
     if (bufIndex >= MAX_LINE_BUFFER_SIZE)
     {
        wxString errBuf;
-       errBuf.Printf(_T("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
+       errBuf.Printf(wxT("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
            LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str(), MAX_LINE_BUFFER_SIZE);
        OnError((wxChar *)errBuf.c_str());
        return false;
     }
 
-    if (((bufIndex == 14) && (wxStrncmp(buf, _T("\\end{verbatim}"), 14) == 0)) ||
-         ((bufIndex == 16) && (wxStrncmp(buf, _T("\\end{toocomplex}"), 16) == 0)))
+    if (((bufIndex == 14) && (wxStrncmp(buf, wxT("\\end{verbatim}"), 14) == 0)) ||
+         ((bufIndex == 16) && (wxStrncmp(buf, wxT("\\end{toocomplex}"), 16) == 0)))
       readInVerbatim = false;
 
     lastChar = ch;
@@ -464,15 +464,15 @@ bool read_a_line(wxChar *buf)
 
     if (checkCurlyBraces)
     {
-        if (ch == '{' && !readInVerbatim && lastChar != _T('\\'))
+        if (ch == '{' && !readInVerbatim && lastChar != wxT('\\'))
            leftCurly++;
-        if (ch == '}' && !readInVerbatim && lastChar != _T('\\'))
+        if (ch == '}' && !readInVerbatim && lastChar != wxT('\\'))
         {
            rightCurly++;
            if (rightCurly > leftCurly)
            {
                wxString errBuf;
-               errBuf.Printf(_T("An extra right Curly brace ('}') was detected at line %lu inside file %s"), LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str());
+               errBuf.Printf(wxT("An extra right Curly brace ('}') was detected at line %lu inside file %s"), LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str());
                OnError((wxChar *)errBuf.c_str());
 
                // Reduce the count of right Curly braces, so the mismatched count
@@ -500,12 +500,12 @@ bool read_a_line(wxChar *buf)
           if (bufIndex+5 >= MAX_LINE_BUFFER_SIZE)
           {
              wxString errBuf;
-             errBuf.Printf(_T("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
+             errBuf.Printf(wxT("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
                  LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str(),MAX_LINE_BUFFER_SIZE);
              OnError((wxChar *)errBuf.c_str());
              return false;
           }
-          wxStrcat(buf, _T("\\par"));
+          wxStrcat(buf, wxT("\\par"));
           bufIndex += 5;
 
         }
@@ -515,7 +515,7 @@ bool read_a_line(wxChar *buf)
           if (bufIndex >= MAX_LINE_BUFFER_SIZE)
           {
              wxString errBuf;
-             errBuf.Printf(_T("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
+             errBuf.Printf(wxT("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
                  LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str(),MAX_LINE_BUFFER_SIZE);
              OnError((wxChar *)errBuf.c_str());
              return false;
@@ -540,7 +540,7 @@ bool read_a_line(wxChar *buf)
                 if (bufIndex+5 >= MAX_LINE_BUFFER_SIZE)
                 {
                    wxString errBuf;
-                   errBuf.Printf(_T("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
+                   errBuf.Printf(wxT("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
                        LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str(),MAX_LINE_BUFFER_SIZE);
                    OnError((wxChar *)errBuf.c_str());
                    return false;
@@ -563,7 +563,7 @@ bool read_a_line(wxChar *buf)
             if (bufIndex+5 >= MAX_LINE_BUFFER_SIZE)
             {
               wxString errBuf;
-              errBuf.Printf(_T("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
+              errBuf.Printf(wxT("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
                   LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str(),MAX_LINE_BUFFER_SIZE);
               OnError((wxChar *)errBuf.c_str());
               return false;
@@ -578,7 +578,7 @@ bool read_a_line(wxChar *buf)
             if (bufIndex >= MAX_LINE_BUFFER_SIZE)
             {
               wxString errBuf;
-              errBuf.Printf(_T("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
+              errBuf.Printf(wxT("Line %lu of file %s is too long.  Lines can be no longer than %lu characters.  Truncated."),
                   LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str(),MAX_LINE_BUFFER_SIZE);
               OnError((wxChar *)errBuf.c_str());
               return false;
@@ -599,7 +599,7 @@ bool read_a_line(wxChar *buf)
                     if ((bufIndex > 0 && (buf[bufIndex-1] == '\\')) && (buf[0] != '%'))
                     {
 //                        wxString errBuf;
-//                        errBuf.Printf(_T("An underscore ('_') was detected at line %lu inside file %s that should NOT have a '\\' before it."),
+//                        errBuf.Printf(wxT("An underscore ('_') was detected at line %lu inside file %s that should NOT have a '\\' before it."),
 //                            LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str());
 //                        OnError((wxChar *)errBuf.c_str());
                     }
@@ -610,15 +610,15 @@ bool read_a_line(wxChar *buf)
                     if (bufIndex == 0)
                     {
                         wxString errBuf;
-                        errBuf.Printf(_T("An underscore ('_') was detected at line %lu inside file %s that may need a '\\' before it."),
+                        errBuf.Printf(wxT("An underscore ('_') was detected at line %lu inside file %s that may need a '\\' before it."),
                             LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str());
                         OnError((wxChar *)errBuf.c_str());
                     }
                     else if ((buf[bufIndex-1] != '\\') && (buf[0] != '%') &&  // If it is a comment line, then no warnings
-                        (wxStrncmp(buf, _T("\\input"), 6))) // do not report filenames that have underscores in them
+                        (wxStrncmp(buf, wxT("\\input"), 6))) // do not report filenames that have underscores in them
                     {
                         wxString errBuf;
-                        errBuf.Printf(_T("An underscore ('_') was detected at line %lu inside file %s that may need a '\\' before it."),
+                        errBuf.Printf(wxT("An underscore ('_') was detected at line %lu inside file %s that may need a '\\' before it."),
                             LineNumbers[CurrentInputIndex], (const wxChar*) currentFileName.c_str());
                         OnError((wxChar *)errBuf.c_str());
                     }
@@ -643,7 +643,7 @@ bool read_a_line(wxChar *buf)
           if (leftCurly != rightCurly)
           {
             wxString errBuf;
-            errBuf.Printf(_T("Curly braces do not match inside file %s\n%lu opens, %lu closes"),
+            errBuf.Printf(wxT("Curly braces do not match inside file %s\n%lu opens, %lu closes"),
                           (const wxChar*) currentFileName.c_str(),leftCurly,rightCurly);
             OnError((wxChar *)errBuf.c_str());
           }
@@ -655,7 +655,7 @@ bool read_a_line(wxChar *buf)
       {
         readingVerbatim = false;
         readInVerbatim = false;
-        wxStrcat(buf, _T("\\end{verbatim}\n"));
+        wxStrcat(buf, wxT("\\end{verbatim}\n"));
         return false;
       }
     }
@@ -665,14 +665,14 @@ bool read_a_line(wxChar *buf)
   buf[bufIndex] = 0;
 
   // Strip out comment environment
-  if (wxStrncmp(buf, _T("\\begin{comment}"), 15) == 0)
+  if (wxStrncmp(buf, wxT("\\begin{comment}"), 15) == 0)
   {
-    while (wxStrncmp(buf, _T("\\end{comment}"), 13) != 0)
+    while (wxStrncmp(buf, wxT("\\end{comment}"), 13) != 0)
       read_a_line(buf);
     return read_a_line(buf);
   }
   // Read a verbatim input file as if it were a verbatim environment
-  else if (wxStrncmp(buf, _T("\\verbatiminput"), 14) == 0)
+  else if (wxStrncmp(buf, wxT("\\verbatiminput"), 14) == 0)
   {
     int wordLen = 14;
     wxChar *fileName = buf + wordLen + 1;
@@ -681,7 +681,7 @@ bool read_a_line(wxChar *buf)
     buf[j] = 0;
 
     // thing}\par -- eliminate the \par!
-    if (wxStrncmp((buf + wxStrlen(buf)-5), _T("\\par"), 4) == 0)
+    if (wxStrncmp((buf + wxStrlen(buf)-5), wxT("\\par"), 4) == 0)
     {
       j -= 5;
       buf[j] = 0;
@@ -695,17 +695,17 @@ bool read_a_line(wxChar *buf)
     if (actualFile.empty())
     {
       wxString errBuf;
-      errBuf.Printf(_T("Could not find file: %s"),fileName);
+      errBuf.Printf(wxT("Could not find file: %s"),fileName);
       OnError((wxChar *)errBuf.c_str());
     }
     else
     {
       wxString informStr;
-      informStr.Printf(_T("Processing: %s"),actualFile.c_str());
+      informStr.Printf(wxT("Processing: %s"),actualFile.c_str());
       OnInform((wxChar *)informStr.c_str());
       CurrentInputIndex ++;
 
-      Inputs[CurrentInputIndex] = wxFopen(actualFile, _T("r"));
+      Inputs[CurrentInputIndex] = wxFopen(actualFile, wxT("r"));
       LineNumbers[CurrentInputIndex] = 1;
       if (FileNames[CurrentInputIndex])
         delete[] FileNames[CurrentInputIndex];
@@ -714,26 +714,26 @@ bool read_a_line(wxChar *buf)
       if (!Inputs[CurrentInputIndex])
       {
         CurrentInputIndex --;
-        OnError(_T("Could not open verbatiminput file."));
+        OnError(wxT("Could not open verbatiminput file."));
       }
       else
       {
         readingVerbatim = true;
         readInVerbatim = true;
-        wxStrcpy(buf, _T("\\begin{verbatim}\n"));
+        wxStrcpy(buf, wxT("\\begin{verbatim}\n"));
         return false;
       }
     }
     return false;
   }
-  else if (wxStrncmp(buf, _T("\\input"), 6) == 0 || wxStrncmp(buf, _T("\\helpinput"), 10) == 0 ||
-      wxStrncmp(buf, _T("\\include"), 8) == 0)
+  else if (wxStrncmp(buf, wxT("\\input"), 6) == 0 || wxStrncmp(buf, wxT("\\helpinput"), 10) == 0 ||
+      wxStrncmp(buf, wxT("\\include"), 8) == 0)
   {
     int wordLen;
-    if (wxStrncmp(buf, _T("\\input"), 6) == 0)
+    if (wxStrncmp(buf, wxT("\\input"), 6) == 0)
       wordLen = 6;
     else
-    if (wxStrncmp(buf, _T("\\include"), 8) == 0)
+    if (wxStrncmp(buf, wxT("\\include"), 8) == 0)
       wordLen = 8;
     else
       wordLen = 10;
@@ -745,19 +745,19 @@ bool read_a_line(wxChar *buf)
 
     // \input{thing}\par -- eliminate the \par!
 //    if (wxStrncmp((buf + wxStrlen(buf)-5), "\\par", 4) == 0)
-    if (wxStrncmp((buf + wxStrlen(buf)-4), _T("\\par"), 4) == 0) // Bug fix 8/2/95 Ulrich Leodolter
+    if (wxStrncmp((buf + wxStrlen(buf)-4), wxT("\\par"), 4) == 0) // Bug fix 8/2/95 Ulrich Leodolter
     {
 //      j -= 5;
       j -= 4; // Ditto
       buf[j] = 0;
     }
 
-    if (buf[j-1] == _T('}'))
+    if (buf[j-1] == wxT('}'))
         buf[j-1] = 0; // Ignore final brace
 
     // Remove backslashes from name
     wxString fileNameStr(fileName);
-    fileNameStr.Replace(_T("\\"), _T(""));
+    fileNameStr.Replace(wxT("\\"), wxT(""));
 
     // Ignore some types of input files (e.g. macro definition files)
     wxChar *fileOnly = wxFileNameFromPath((wxChar*) (const wxChar*) fileNameStr);
@@ -769,7 +769,7 @@ bool read_a_line(wxChar *buf)
     if (actualFile.empty())
     {
       wxChar buf2[400];
-      wxSnprintf(buf2, sizeof(buf2), _T("%s.tex"), fileNameStr.c_str());
+      wxSnprintf(buf2, sizeof(buf2), wxT("%s.tex"), fileNameStr.c_str());
       actualFile = TexPathList.FindValidPath(buf2);
     }
     currentFileName = actualFile;
@@ -777,7 +777,7 @@ bool read_a_line(wxChar *buf)
     if (actualFile.empty())
     {
       wxString errBuf;
-      errBuf.Printf(_T("Could not find file: %s"),fileName);
+      errBuf.Printf(wxT("Could not find file: %s"),fileName);
       OnError((wxChar *)errBuf.c_str());
     }
     else
@@ -787,11 +787,11 @@ bool read_a_line(wxChar *buf)
       TexPathList.EnsureFileAccessible(actualFile);
 
       wxString informStr;
-      informStr.Printf(_T("Processing: %s"),actualFile.c_str());
+      informStr.Printf(wxT("Processing: %s"),actualFile.c_str());
       OnInform((wxChar *)informStr.c_str());
       CurrentInputIndex ++;
 
-      Inputs[CurrentInputIndex] = wxFopen(actualFile, _T("r"));
+      Inputs[CurrentInputIndex] = wxFopen(actualFile, wxT("r"));
       LineNumbers[CurrentInputIndex] = 1;
       if (FileNames[CurrentInputIndex])
         delete[] FileNames[CurrentInputIndex];
@@ -800,7 +800,7 @@ bool read_a_line(wxChar *buf)
       if (!Inputs[CurrentInputIndex])
       {
         wxString errBuf;
-        errBuf.Printf(_T("Could not open include file %s"), (const wxChar*) actualFile);
+        errBuf.Printf(wxT("Could not open include file %s"), (const wxChar*) actualFile);
         CurrentInputIndex --;
         OnError((wxChar *)errBuf.c_str());
       }
@@ -817,20 +817,20 @@ bool read_a_line(wxChar *buf)
           size_t pos = bufStr.find(syntaxTokens[index]);
           if (pos != wxString::npos && pos != 0)
           {
-              size_t commentStart = bufStr.find(_T("%"));
+              size_t commentStart = bufStr.find(wxT("%"));
               if (commentStart == wxString::npos || commentStart > pos)
               {
                   wxString errBuf;
-                  if (syntaxTokens[index] == _T("\\verb"))
+                  if (syntaxTokens[index] == wxT("\\verb"))
                   {
-                      errBuf.Printf(_T("'%s$....$' was detected at line %lu inside file %s.  Please replace this form with \\tt{....}"),
+                      errBuf.Printf(wxT("'%s$....$' was detected at line %lu inside file %s.  Please replace this form with \\tt{....}"),
                                     syntaxTokens[index].c_str(),
                                     LineNumbers[CurrentInputIndex],
                                     currentFileName.c_str());
                   }
                   else
                   {
-                      errBuf.Printf(_T("'%s' was detected at line %lu inside file %s that is not the only text on the line, starting at column one."),
+                      errBuf.Printf(wxT("'%s' was detected at line %lu inside file %s that is not the only text on the line, starting at column one."),
                                     syntaxTokens[index].c_str(),
                                     LineNumbers[CurrentInputIndex],
                                     currentFileName.c_str());
@@ -841,11 +841,11 @@ bool read_a_line(wxChar *buf)
       }
   }  // checkSyntax
 
-  if (wxStrncmp(buf, _T("\\begin{verbatim}"), 16) == 0 ||
-      wxStrncmp(buf, _T("\\begin{toocomplex}"), 18) == 0)
+  if (wxStrncmp(buf, wxT("\\begin{verbatim}"), 16) == 0 ||
+      wxStrncmp(buf, wxT("\\begin{toocomplex}"), 18) == 0)
     readInVerbatim = true;
-  else if (wxStrncmp(buf, _T("\\end{verbatim}"), 14) == 0 ||
-           wxStrncmp(buf, _T("\\end{toocomplex}"), 16) == 0)
+  else if (wxStrncmp(buf, wxT("\\end{verbatim}"), 14) == 0 ||
+           wxStrncmp(buf, wxT("\\end{toocomplex}"), 16) == 0)
     readInVerbatim = false;
 
   if (checkCurlyBraces)
@@ -853,7 +853,7 @@ bool read_a_line(wxChar *buf)
       if (ch == EOF && leftCurly != rightCurly)
       {
         wxString errBuf;
-        errBuf.Printf(_T("Curly braces do not match inside file %s\n%lu opens, %lu closes"),
+        errBuf.Printf(wxT("Curly braces do not match inside file %s\n%lu opens, %lu closes"),
             (const wxChar*) currentFileName.c_str(),leftCurly,rightCurly);
         OnError((wxChar *)errBuf.c_str());
       }
@@ -869,10 +869,10 @@ bool read_a_line(wxChar *buf)
 
 bool ParseNewCommand(wxChar *buffer, int *pos)
 {
-  if ((wxStrncmp((buffer+(*pos)), _T("newcommand"), 10) == 0) ||
-      (wxStrncmp((buffer+(*pos)), _T("renewcommand"), 12) == 0))
+  if ((wxStrncmp((buffer+(*pos)), wxT("newcommand"), 10) == 0) ||
+      (wxStrncmp((buffer+(*pos)), wxT("renewcommand"), 12) == 0))
   {
-    if (wxStrncmp((buffer+(*pos)), _T("newcommand"), 10) == 0)
+    if (wxStrncmp((buffer+(*pos)), wxT("newcommand"), 10) == 0)
       *pos = *pos + 12;
     else
       *pos = *pos + 14;
@@ -881,7 +881,7 @@ bool ParseNewCommand(wxChar *buffer, int
     wxChar commandValue[1000];
     int noArgs = 0;
     int i = 0;
-    while (buffer[*pos] != _T('}') && (buffer[*pos] != 0))
+    while (buffer[*pos] != wxT('}') && (buffer[*pos] != 0))
     {
       commandName[i] = buffer[*pos];
       *pos += 1;
@@ -890,7 +890,7 @@ bool ParseNewCommand(wxChar *buffer, int
     commandName[i] = 0;
     i = 0;
     *pos += 1;
-    if (buffer[*pos] == _T('['))
+    if (buffer[*pos] == wxT('['))
     {
       *pos += 1;
       noArgs = (int)(buffer[*pos]) - 48;
@@ -901,9 +901,9 @@ bool ParseNewCommand(wxChar *buffer, int
     while (!end)
     {
       wxChar ch = buffer[*pos];
-      if (ch == _T('{'))
+      if (ch == wxT('{'))
         braceCount ++;
-      else if (ch == _T('}'))
+      else if (ch == wxT('}'))
       {
         braceCount --;
         if (braceCount == 0)
@@ -956,13 +956,13 @@ void MacroError(wxChar *buffer)
     macroBuf[23] = 0;
   }
 
-  errBuf.Printf(_T("Could not find macro: %s at line %d, file %s"),
+  errBuf.Printf(wxT("Could not find macro: %s at line %d, file %s"),
              macroBuf, (int)(LineNumbers[CurrentInputIndex]-1), FileNames[CurrentInputIndex]);
   OnError((wxChar *)errBuf.c_str());
 
-  if (wxStrcmp(macroBuf,_T("\\end{document}")) == 0)
+  if (wxStrcmp(macroBuf,wxT("\\end{document}")) == 0)
   {
-      OnInform( _T("Halted build due to unrecoverable error.") );
+      OnInform( wxT("Halted build due to unrecoverable error.") );
       stopRunning = true;
   }
 }
@@ -1046,8 +1046,8 @@ int ParseArg(TexChunk *thisArg, wxList& 
       wxString bufStr = buffer;
 //      if (bufStr.find("\\begin{verbatim}") != wxString::npos ||
 //          bufStr.find("\\begin{toocomplex}") != wxString::npos)
-      if (wxStrncmp(buffer, _T("\\begin{verbatim}"), 16) == 0 ||
-          wxStrncmp(buffer, _T("\\begin{toocomplex}"), 18) == 0)
+      if (wxStrncmp(buffer, wxT("\\begin{verbatim}"), 16) == 0 ||
+          wxStrncmp(buffer, wxT("\\begin{toocomplex}"), 18) == 0)
       {
         if (buf_ptr > 0)
         {
@@ -1060,8 +1060,8 @@ int ParseArg(TexChunk *thisArg, wxList& 
         buf_ptr = 0;
 
         eof = read_a_line(buffer);
-        while (!eof && (wxStrncmp(buffer, _T("\\end{verbatim}"), 14) != 0) &&
-                       (wxStrncmp(buffer, _T("\\end{toocomplex}"), 16) != 0)
+        while (!eof && (wxStrncmp(buffer, wxT("\\end{verbatim}"), 14) != 0) &&
+                       (wxStrncmp(buffer, wxT("\\end{toocomplex}"), 16) != 0)
                )
         {
           wxStrcat(BigBuffer, buffer);
@@ -1088,7 +1088,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
         // after a verbatim): EXCEPT in HTML
         if (convertMode != TEX_HTML)
         {
-          TexMacroDef *parDef = (TexMacroDef *)MacroDefs.Get(_T("\\"));
+          TexMacroDef *parDef = (TexMacroDef *)MacroDefs.Get(wxT("\\"));
           TexChunk *parChunk = new TexChunk(CHUNK_TYPE_MACRO, parDef);
           parChunk->no_args = 0;
           parChunk->macroId = ltBACKSLASHCHAR;
@@ -1099,13 +1099,13 @@ int ParseArg(TexChunk *thisArg, wxList& 
 
     wxChar wxCh = buffer[pos];
     // End of optional argument -- pretend it's right brace for simplicity
-    if (thisArg->optional && (wxCh == _T(']')))
-      wxCh = _T('}');
+    if (thisArg->optional && (wxCh == wxT(']')))
+      wxCh = wxT('}');
 
     switch (wxCh)
     {
       case 0:
-      case _T('}'):  // End of argument
+      case wxT('}'):  // End of argument
       {
         if (buf_ptr > 0)
         {
@@ -1114,10 +1114,10 @@ int ParseArg(TexChunk *thisArg, wxList& 
           chunk->value = copystring(BigBuffer);
           children.Append((wxObject *)chunk);
         }
-        if (wxCh == _T('}')) pos ++;
+        if (wxCh == wxT('}')) pos ++;
         return pos;
       }
-      case _T('\\'):
+      case wxT('\\'):
       {
         if (buf_ptr > 0)  // Finish off the string we've read so far
         {
@@ -1145,7 +1145,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
         if (ParseNewCommand(buffer, &pos))
           break;
 
-        if (wxStrncmp(buffer+pos, _T("special"), 7) == 0)
+        if (wxStrncmp(buffer+pos, wxT("special"), 7) == 0)
         {
           pos += 7;
 
@@ -1159,7 +1159,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
           while (!end)
           {
             wxChar ch = buffer[pos];
-            if (ch == _T('}'))
+            if (ch == wxT('}'))
             {
               noBraces --;
               if (noBraces == 0)
@@ -1169,26 +1169,26 @@ int ParseArg(TexChunk *thisArg, wxList& 
               }
               else
               {
-                wxTex2RTFBuffer[i] = _T('}');
+                wxTex2RTFBuffer[i] = wxT('}');
                 i ++;
               }
               pos ++;
             }
-            else if (ch == _T('{'))
+            else if (ch == wxT('{'))
             {
-              wxTex2RTFBuffer[i] = _T('{');
+              wxTex2RTFBuffer[i] = wxT('{');
               i ++;
               pos ++;
             }
-            else if (ch == _T('\\') && buffer[pos+1] == _T('}'))
+            else if (ch == wxT('\\') && buffer[pos+1] == wxT('}'))
             {
-              wxTex2RTFBuffer[i] = _T('}');
+              wxTex2RTFBuffer[i] = wxT('}');
               pos += 2;
               i++;
             }
-            else if (ch == _T('\\') && buffer[pos+1] == _T('{'))
+            else if (ch == wxT('\\') && buffer[pos+1] == wxT('{'))
             {
-              wxTex2RTFBuffer[i] = _T('{');
+              wxTex2RTFBuffer[i] = wxT('{');
               pos += 2;
               i++;
             }
@@ -1204,7 +1204,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
           TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
           chunk->no_args = 1;
           chunk->macroId = ltSPECIAL;
-          TexMacroDef *specialDef = (TexMacroDef *)MacroDefs.Get(_T("special"));
+          TexMacroDef *specialDef = (TexMacroDef *)MacroDefs.Get(wxT("special"));
           chunk->def = specialDef;
           TexChunk *arg = new TexChunk(CHUNK_TYPE_ARG, specialDef);
           chunk->children.Append((wxObject *)arg);
@@ -1219,10 +1219,10 @@ int ParseArg(TexChunk *thisArg, wxList& 
 
           children.Append((wxObject *)chunk);
         }
-        else if (wxStrncmp(buffer+pos, _T("verb"), 4) == 0)
+        else if (wxStrncmp(buffer+pos, wxT("verb"), 4) == 0)
         {
           pos += 4;
-          if (buffer[pos] == _T('*'))
+          if (buffer[pos] == wxT('*'))
             pos ++;
 
           // Find the delimiter character
@@ -1245,7 +1245,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
           TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
           chunk->no_args = 1;
           chunk->macroId = ltVERB;
-          TexMacroDef *verbDef = (TexMacroDef *)MacroDefs.Get(_T("verb"));
+          TexMacroDef *verbDef = (TexMacroDef *)MacroDefs.Get(wxT("verb"));
           chunk->def = verbDef;
           TexChunk *arg = new TexChunk(CHUNK_TYPE_ARG, verbDef);
           chunk->children.Append((wxObject *)arg);
@@ -1279,7 +1279,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
             children.Append((wxObject *)chunk);
 
           // Eliminate newline after a \begin{} or a \\ if possible
-          if ((env || wxStrcmp(def->name, _T("\\")) == 0) && (buffer[pos] == 13))
+          if ((env || wxStrcmp(def->name, wxT("\\")) == 0) && (buffer[pos] == 13))
           {
               pos ++;
               if (buffer[pos] == 10)
@@ -1300,9 +1300,9 @@ int ParseArg(TexChunk *thisArg, wxList& 
             if (customMacro->macroBody)
             {
               wxChar macroBuf[300];
-//              wxStrcpy(macroBuf, _T("{"));
+//              wxStrcpy(macroBuf, wxT("{"));
               wxStrcpy(macroBuf, customMacro->macroBody);
-              wxStrcat(macroBuf, _T("}"));
+              wxStrcat(macroBuf, wxT("}"));
               ParseArg(thisArg, children, macroBuf, 0, NULL, true, chunk);
             }
 
@@ -1318,10 +1318,10 @@ int ParseArg(TexChunk *thisArg, wxList& 
       }
       // Parse constructs like {\bf thing} as if they were
       // \bf{thing}
-      case _T('{'):
+      case wxT('{'):
       {
         pos ++;
-        if (buffer[pos] == _T('\\'))
+        if (buffer[pos] == wxT('\\'))
         {
           if (buf_ptr > 0)
           {
@@ -1356,9 +1356,9 @@ int ParseArg(TexChunk *thisArg, wxList& 
               if (customMacro->macroBody)
               {
                 wxChar macroBuf[300];
-//                wxStrcpy(macroBuf, _T("{"));
+//                wxStrcpy(macroBuf, wxT("{"));
                 wxStrcpy(macroBuf, customMacro->macroBody);
-                wxStrcat(macroBuf, _T("}"));
+                wxStrcat(macroBuf, wxT("}"));
                 ParseArg(thisArg, children, macroBuf, 0, NULL, true, chunk);
               }
 
@@ -1379,7 +1379,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
           */
           if (!SoloBlockDef)
           {
-            SoloBlockDef = new TexMacroDef(ltSOLO_BLOCK, _T("solo block"), 1, false);
+            SoloBlockDef = new TexMacroDef(ltSOLO_BLOCK, wxT("solo block"), 1, false);
           }
           // Save text so far
           if (buf_ptr > 0)
@@ -1407,7 +1407,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
         }
         break;
       }
-      case _T('$'):
+      case wxT('$'):
       {
         if (buf_ptr > 0)
         {
@@ -1420,11 +1420,11 @@ int ParseArg(TexChunk *thisArg, wxList& 
 
         pos ++;
 
-        if (buffer[pos] == _T('$'))
+        if (buffer[pos] == wxT('$'))
         {
           TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
           chunk->no_args = 0;
-//          chunk->name = copystring(_T("$$"));
+//          chunk->name = copystring(wxT("$$"));
           chunk->macroId = ltSPECIALDOUBLEDOLLAR;
           children.Append((wxObject *)chunk);
           pos ++;
@@ -1433,13 +1433,13 @@ int ParseArg(TexChunk *thisArg, wxList& 
         {
           TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
           chunk->no_args = 0;
-//          chunk->name = copystring(_T("_$"));
+//          chunk->name = copystring(wxT("_$"));
           chunk->macroId = ltSPECIALDOLLAR;
           children.Append((wxObject *)chunk);
         }
         break;
       }
-      case _T('~'):
+      case wxT('~'):
       {
         if (buf_ptr > 0)
         {
@@ -1453,12 +1453,12 @@ int ParseArg(TexChunk *thisArg, wxList& 
         pos ++;
         TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
         chunk->no_args = 0;
-//        chunk->name = copystring(_T("_~"));
+//        chunk->name = copystring(wxT("_~"));
         chunk->macroId = ltSPECIALTILDE;
         children.Append((wxObject *)chunk);
         break;
       }
-      case _T('#'): // Either treat as a special TeX character or as a macro arg
+      case wxT('#'): // Either treat as a special TeX character or as a macro arg
       {
         if (buf_ptr > 0)
         {
@@ -1474,7 +1474,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
         {
           TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
           chunk->no_args = 0;
-//          chunk->name = copystring(_T("_#"));
+//          chunk->name = copystring(wxT("_#"));
           chunk->macroId = ltSPECIALHASH;
           children.Append((wxObject *)chunk);
         }
@@ -1494,12 +1494,12 @@ int ParseArg(TexChunk *thisArg, wxList& 
         }
         break;
       }
-      case _T('&'):
+      case wxT('&'):
       {
         // Remove white space before and after the ampersand,
         // since this is probably a table column separator with
         // some convenient -- but useless -- white space in the text.
-        while ((buf_ptr > 0) && ((BigBuffer[buf_ptr-1] == _T(' ')) || (BigBuffer[buf_ptr-1] == 9)))
+        while ((buf_ptr > 0) && ((BigBuffer[buf_ptr-1] == wxT(' ')) || (BigBuffer[buf_ptr-1] == 9)))
           buf_ptr --;
 
         if (buf_ptr > 0)
@@ -1513,18 +1513,18 @@ int ParseArg(TexChunk *thisArg, wxList& 
 
         pos ++;
 
-        while (buffer[pos] == _T(' ') || buffer[pos] == 9)
+        while (buffer[pos] == wxT(' ') || buffer[pos] == 9)
           pos ++;
 
         TexChunk *chunk = new TexChunk(CHUNK_TYPE_MACRO);
         chunk->no_args = 0;
-//        chunk->name = copystring(_T("_&"));
+//        chunk->name = copystring(wxT("_&"));
         chunk->macroId = ltSPECIALAMPERSAND;
         children.Append((wxObject *)chunk);
         break;
       }
       // Eliminate end-of-line comment
-      case _T('%'):
+      case wxT('%'):
       {
         wxCh = buffer[pos];
         while (wxCh != 10 && wxCh != 13 && wxCh != 0)
@@ -1542,7 +1542,7 @@ int ParseArg(TexChunk *thisArg, wxList& 
       // Eliminate tab
       case 9:
       {
-        BigBuffer[buf_ptr] = _T(' ');
+        BigBuffer[buf_ptr] = wxT(' ');
         BigBuffer[buf_ptr+1] = 0;
         buf_ptr ++;
         pos ++;
@@ -1637,10 +1637,10 @@ int ParseMacroBody(const wxChar *WXUNUSE
         wxString tmpBuffer(buffer);
         if (tmpBuffer.length() > 4)
         {
-            if (tmpBuffer.Right(4) == _T("\\par"))
+            if (tmpBuffer.Right(4) == wxT("\\par"))
                 tmpBuffer = tmpBuffer.Mid(0,tmpBuffer.length()-4);
         }
-        errBuf.Printf(_T("Missing macro argument in the line:\n\t%s\n"),tmpBuffer.c_str());
+        errBuf.Printf(wxT("Missing macro argument in the line:\n\t%s\n"),tmpBuffer.c_str());
         OnError((wxChar *)errBuf.c_str());
       }
 
@@ -1677,8 +1677,8 @@ bool TexLoadFile(const wxString& filenam
     stopRunning = false;
     wxStrcpy(TexFileRoot, filename);
     StripExtension(TexFileRoot);
-    wxSnprintf(TexBibName, 300, _T("%s.bb"), TexFileRoot);
-    wxSnprintf(TexTmpBibName, 300, _T("%s.bb1"), TexFileRoot);
+    wxSnprintf(TexBibName, 300, wxT("%s.bb"), TexFileRoot);
+    wxSnprintf(TexTmpBibName, 300, wxT("%s.bb1"), TexFileRoot);
 
     TexPathList.EnsureFileAccessible(filename);
 
@@ -1687,13 +1687,13 @@ bool TexLoadFile(const wxString& filenam
 
     line_buffer = new wxChar[MAX_LINE_BUFFER_SIZE];
 
-    Inputs[0] = wxFopen(filename, _T("r"));
+    Inputs[0] = wxFopen(filename, wxT("r"));
     LineNumbers[0] = 1;
     FileNames[0] = copystring(filename);
     if (Inputs[0])
     {
         read_a_line(line_buffer);
-        ParseMacroBody(_T("toplevel"), TopLevel, 1, line_buffer, 0, NULL, true);
+        ParseMacroBody(wxT("toplevel"), TopLevel, 1, line_buffer, 0, NULL, true);
         if (Inputs[0]) fclose(Inputs[0]);
         return true;
     }
@@ -1795,9 +1795,9 @@ void GetArgData1(TexChunk *chunk)
       if (def && def->ignore)
         return;
 
-      if (def && (wxStrcmp(def->name, _T("solo block")) != 0))
+      if (def && (wxStrcmp(def->name, wxT("solo block")) != 0))
       {
-        wxStrcat(currentArgData, _T("\\"));
+        wxStrcat(currentArgData, wxT("\\"));
         wxStrcat(currentArgData, def->name);
       }
 
@@ -1805,9 +1805,9 @@ void GetArgData1(TexChunk *chunk)
       while (node)
       {
         TexChunk *child_chunk = (TexChunk *)node->GetData();
-        wxStrcat(currentArgData, _T("{"));
+        wxStrcat(currentArgData, wxT("{"));
         GetArgData1(child_chunk);
-        wxStrcat(currentArgData, _T("}"));
+        wxStrcat(currentArgData, wxT("}"));
         node = node->GetNext();
       }
       break;
@@ -1984,10 +1984,10 @@ void TexInitialize(int bufSize)
 {
   InitialiseColourTable();
 #ifdef __WXMSW__
-  TexPathList.AddEnvList(_T("TEXINPUT"));
+  TexPathList.AddEnvList(wxT("TEXINPUT"));
 #endif
 #ifdef __UNIX__
-  TexPathList.AddEnvList(_T("TEXINPUTS"));
+  TexPathList.AddEnvList(wxT("TEXINPUTS"));
 #endif
   int i;
   for (i = 0; i < 15; i++)
@@ -1997,18 +1997,18 @@ void TexInitialize(int bufSize)
     FileNames[i] = NULL;
   }
 
-  IgnorableInputFiles.Add(_T("psbox.tex"));
+  IgnorableInputFiles.Add(wxT("psbox.tex"));
   BigBuffer = new wxChar[(bufSize*1000)];
   currentArgData = new wxChar[2000];
   TexFileRoot = new wxChar[300];
   TexBibName = new wxChar[300];
   TexTmpBibName = new wxChar[300];
-  AddMacroDef(ltTOPLEVEL, _T("toplevel"), 1);
+  AddMacroDef(ltTOPLEVEL, wxT("toplevel"), 1);
   TopLevel = new TexChunk(CHUNK_TYPE_MACRO);
-//  TopLevel->name = copystring(_T("toplevel"));
+//  TopLevel->name = copystring(wxT("toplevel"));
   TopLevel->macroId = ltTOPLEVEL;
   TopLevel->no_args = 1;
-  VerbatimMacroDef = (TexMacroDef *)MacroDefs.Get(_T("verbatim"));
+  VerbatimMacroDef = (TexMacroDef *)MacroDefs.Get(wxT("verbatim"));
 }
 
 void TexCleanUp(void)
@@ -2032,7 +2032,7 @@ void TexCleanUp(void)
   if (TopLevel)
     delete TopLevel;
   TopLevel = new TexChunk(CHUNK_TYPE_MACRO);
-//  TopLevel->name = copystring(_T("toplevel"));
+//  TopLevel->name = copystring(wxT("toplevel"));
   TopLevel->macroId = ltTOPLEVEL;
   TopLevel->no_args = 1;
 
@@ -2041,8 +2041,8 @@ void TexCleanUp(void)
   DocumentDate = NULL;
   DocumentStyle = LATEX_REPORT;
   MinorDocumentStyle = 0;
-  BibliographyStyleString = copystring(_T("plain"));
-  DocumentStyleString = copystring(_T("report"));
+  BibliographyStyleString = copystring(wxT("plain"));
+  DocumentStyleString = copystring(wxT("report"));
   MinorDocumentStyleString = NULL;
 
   // gt - Changed this so if this is the final pass
@@ -2093,485 +2093,485 @@ void DefineDefaultMacros(void)
   // Put names which subsume other names at the TOP
   // so they get recognized first
 
-  AddMacroDef(ltACCENT_GRAVE,        _T("`"), 1);
-  AddMacroDef(ltACCENT_ACUTE,        _T("'"), 1);
-  AddMacroDef(ltACCENT_CARET,        _T("^"), 1);
-  AddMacroDef(ltACCENT_UMLAUT,       _T("\""), 1);
-  AddMacroDef(ltACCENT_TILDE,        _T("~"), 1);
-  AddMacroDef(ltACCENT_DOT,          _T("."), 1);
-  AddMacroDef(ltACCENT_CADILLA,      _T("c"), 1);
-  AddMacroDef(ltSMALLSPACE1,         _T(","), 0);
-  AddMacroDef(ltSMALLSPACE2,         _T(";"), 0);
-
-  AddMacroDef(ltABSTRACT,            _T("abstract"), 1);
-  AddMacroDef(ltADDCONTENTSLINE,     _T("addcontentsline"), 3);
-  AddMacroDef(ltADDTOCOUNTER,        _T("addtocounter"), 2);
-  AddMacroDef(ltALEPH,               _T("aleph"), 0);
-  AddMacroDef(ltALPHA,               _T("alpha"), 0);
-  AddMacroDef(ltALPH1,               _T("alph"), 1);
-  AddMacroDef(ltALPH2,               _T("Alph"), 1);
-  AddMacroDef(ltANGLE,               _T("angle"), 0);
-  AddMacroDef(ltAPPENDIX,            _T("appendix"), 0);
-  AddMacroDef(ltAPPROX,              _T("approx"), 0);
-  AddMacroDef(ltARABIC,              _T("arabic"), 1);
-  AddMacroDef(ltARRAY,               _T("array"), 1);
-  AddMacroDef(ltAST,                 _T("ast"), 0);
-  AddMacroDef(ltASYMP,               _T("asymp"), 0);
-  AddMacroDef(ltAUTHOR,              _T("author"), 1);
-
-  AddMacroDef(ltBACKGROUNDCOLOUR,    _T("backgroundcolour"), 1);
-  AddMacroDef(ltBACKGROUNDIMAGE,     _T("backgroundimage"), 1);
-  AddMacroDef(ltBACKGROUND,          _T("background"), 1);
-  AddMacroDef(ltBACKSLASHRAW,        _T("backslashraw"), 0);
-  AddMacroDef(ltBACKSLASH,           _T("backslash"), 0);
-  AddMacroDef(ltBASELINESKIP,        _T("baselineskip"), 1);
-  AddMacroDef(ltBCOL,                _T("bcol"), 2);
-  AddMacroDef(ltBETA,                _T("beta"), 0);
-  AddMacroDef(ltBFSERIES,            _T("bfseries"), 1);
-  AddMacroDef(ltBF,                  _T("bf"), 1);
-  AddMacroDef(ltBIBITEM,             _T("bibitem"), 2);
+  AddMacroDef(ltACCENT_GRAVE,        wxT("`"), 1);
+  AddMacroDef(ltACCENT_ACUTE,        wxT("'"), 1);
+  AddMacroDef(ltACCENT_CARET,        wxT("^"), 1);
+  AddMacroDef(ltACCENT_UMLAUT,       wxT("\""), 1);
+  AddMacroDef(ltACCENT_TILDE,        wxT("~"), 1);
+  AddMacroDef(ltACCENT_DOT,          wxT("."), 1);
+  AddMacroDef(ltACCENT_CADILLA,      wxT("c"), 1);
+  AddMacroDef(ltSMALLSPACE1,         wxT(","), 0);
+  AddMacroDef(ltSMALLSPACE2,         wxT(";"), 0);
+
+  AddMacroDef(ltABSTRACT,            wxT("abstract"), 1);
+  AddMacroDef(ltADDCONTENTSLINE,     wxT("addcontentsline"), 3);
+  AddMacroDef(ltADDTOCOUNTER,        wxT("addtocounter"), 2);
+  AddMacroDef(ltALEPH,               wxT("aleph"), 0);
+  AddMacroDef(ltALPHA,               wxT("alpha"), 0);
+  AddMacroDef(ltALPH1,               wxT("alph"), 1);
+  AddMacroDef(ltALPH2,               wxT("Alph"), 1);
+  AddMacroDef(ltANGLE,               wxT("angle"), 0);
+  AddMacroDef(ltAPPENDIX,            wxT("appendix"), 0);
+  AddMacroDef(ltAPPROX,              wxT("approx"), 0);
+  AddMacroDef(ltARABIC,              wxT("arabic"), 1);
+  AddMacroDef(ltARRAY,               wxT("array"), 1);
+  AddMacroDef(ltAST,                 wxT("ast"), 0);
+  AddMacroDef(ltASYMP,               wxT("asymp"), 0);
+  AddMacroDef(ltAUTHOR,              wxT("author"), 1);
+
+  AddMacroDef(ltBACKGROUNDCOLOUR,    wxT("backgroundcolour"), 1);
+  AddMacroDef(ltBACKGROUNDIMAGE,     wxT("backgroundimage"), 1);
+  AddMacroDef(ltBACKGROUND,          wxT("background"), 1);
+  AddMacroDef(ltBACKSLASHRAW,        wxT("backslashraw"), 0);
+  AddMacroDef(ltBACKSLASH,           wxT("backslash"), 0);
+  AddMacroDef(ltBASELINESKIP,        wxT("baselineskip"), 1);
+  AddMacroDef(ltBCOL,                wxT("bcol"), 2);
+  AddMacroDef(ltBETA,                wxT("beta"), 0);
+  AddMacroDef(ltBFSERIES,            wxT("bfseries"), 1);
+  AddMacroDef(ltBF,                  wxT("bf"), 1);
+  AddMacroDef(ltBIBITEM,             wxT("bibitem"), 2);
              // For convenience, bibitem has 2 args: label and item.
                               // The Latex syntax permits writing as 2 args.
-  AddMacroDef(ltBIBLIOGRAPHYSTYLE,   _T("bibliographystyle"), 1);
-  AddMacroDef(ltBIBLIOGRAPHY,        _T("bibliography"), 1);
-  AddMacroDef(ltBIGTRIANGLEDOWN,     _T("bigtriangledown"), 0);
-  AddMacroDef(ltBOT,                 _T("bot"), 0);
-  AddMacroDef(ltBOXIT,               _T("boxit"), 1);
-  AddMacroDef(ltBOX,                 _T("box"), 0);
-  AddMacroDef(ltBRCLEAR,             _T("brclear"), 0);
-  AddMacroDef(ltBULLET,              _T("bullet"), 0);
-
-  AddMacroDef(ltCAPTIONSTAR,         _T("caption*"), 1);
-  AddMacroDef(ltCAPTION,             _T("caption"), 1);
-  AddMacroDef(ltCAP,                 _T("cap"), 0);
-  AddMacroDef(ltCDOTS,               _T("cdots"), 0);
-  AddMacroDef(ltCDOT,                _T("cdot"), 0);
-  AddMacroDef(ltCENTERLINE,          _T("centerline"), 1);
-  AddMacroDef(ltCENTERING,           _T("centering"), 0);
-  AddMacroDef(ltCENTER,              _T("center"), 1);
-  AddMacroDef(ltCEXTRACT,            _T("cextract"), 0);
-  AddMacroDef(ltCHAPTERHEADING,      _T("chapterheading"), 1);
-  AddMacroDef(ltCHAPTERSTAR,         _T("chapter*"), 1);
-  AddMacroDef(ltCHAPTER,             _T("chapter"), 1);
-  AddMacroDef(ltCHI,                 _T("chi"), 0);
-  AddMacroDef(ltCINSERT,             _T("cinsert"), 0);
-  AddMacroDef(ltCIRC,                _T("circ"), 0);
-  AddMacroDef(ltCITE,                _T("cite"), 1);
-  AddMacroDef(ltCLASS,               _T("class"), 1);
-  AddMacroDef(ltCLEARDOUBLEPAGE,     _T("cleardoublepage"), 0);
-  AddMacroDef(ltCLEARPAGE,           _T("clearpage"), 0);
-  AddMacroDef(ltCLINE,               _T("cline"), 1);
-  AddMacroDef(ltCLIPSFUNC,           _T("clipsfunc"), 3);
-  AddMacroDef(ltCLUBSUIT,            _T("clubsuit"), 0);
-  AddMacroDef(ltCOLUMNSEP,           _T("columnsep"), 1);
-  AddMacroDef(ltCOMMENT,             _T("comment"), 1, true);
-  AddMacroDef(ltCONG,                _T("cong"), 0);
-  AddMacroDef(ltCOPYRIGHT,           _T("copyright"), 0);
-  AddMacroDef(ltCPARAM,              _T("cparam"), 2);
-  AddMacroDef(ltCHEAD,               _T("chead"), 1);
-  AddMacroDef(ltCFOOT,               _T("cfoot"), 1);
-  AddMacroDef(ltCUP,                 _T("cup"), 0);
-
-  AddMacroDef(ltDASHV,               _T("dashv"), 0);
-  AddMacroDef(ltDATE,                _T("date"), 1);
-  AddMacroDef(ltDELTA,               _T("delta"), 0);
-  AddMacroDef(ltCAP_DELTA,           _T("Delta"), 0);
-  AddMacroDef(ltDEFINECOLOUR,        _T("definecolour"), 4);
-  AddMacroDef(ltDEFINECOLOR,         _T("definecolor"), 4);
-  AddMacroDef(ltDESCRIPTION,         _T("description"), 1);
-  AddMacroDef(ltDESTRUCT,            _T("destruct"), 1);
-  AddMacroDef(ltDIAMOND2,            _T("diamond2"), 0);
-  AddMacroDef(ltDIAMOND,             _T("diamond"), 0);
-  AddMacroDef(ltDIV,                 _T("div"), 0);
-  AddMacroDef(ltDOCUMENTCLASS,       _T("documentclass"), 1);
-  AddMacroDef(ltDOCUMENTSTYLE,       _T("documentstyle"), 1);
-  AddMacroDef(ltDOCUMENT,            _T("document"), 1);
-  AddMacroDef(ltDOUBLESPACE,         _T("doublespace"), 1);
-  AddMacroDef(ltDOTEQ,               _T("doteq"), 0);
-  AddMacroDef(ltDOWNARROW,           _T("downarrow"), 0);
-  AddMacroDef(ltDOWNARROW2,          _T("Downarrow"), 0);
-
-  AddMacroDef(ltEMPTYSET,            _T("emptyset"), 0);
-  AddMacroDef(ltEMPH,                _T("emph"), 1);
-  AddMacroDef(ltEM,                  _T("em"), 1);
-  AddMacroDef(ltENUMERATE,           _T("enumerate"), 1);
-  AddMacroDef(ltEPSILON,             _T("epsilon"), 0);
-  AddMacroDef(ltEQUATION,            _T("equation"), 1);
-  AddMacroDef(ltEQUIV,               _T("equiv"), 0);
-  AddMacroDef(ltETA,                 _T("eta"), 0);
-  AddMacroDef(ltEVENSIDEMARGIN,      _T("evensidemargin"), 1);
-  AddMacroDef(ltEXISTS,              _T("exists"), 0);
-
-  AddMacroDef(ltFBOX,                _T("fbox"), 1);
-  AddMacroDef(ltFCOL,                _T("fcol"), 2);
-  AddMacroDef(ltFIGURE,              _T("figure"), 1);
-  AddMacroDef(ltFIGURESTAR,          _T("figure*"), 1);
-  AddMacroDef(ltFLUSHLEFT,           _T("flushleft"), 1);
-  AddMacroDef(ltFLUSHRIGHT,          _T("flushright"), 1);
-  AddMacroDef(ltFOLLOWEDLINKCOLOUR,  _T("followedlinkcolour"), 1);
-  AddMacroDef(ltFOOTHEIGHT,          _T("footheight"), 1);
-  AddMacroDef(ltFOOTNOTEPOPUP,       _T("footnotepopup"), 2);
-  AddMacroDef(ltFOOTNOTE,            _T("footnote"), 1);
-  AddMacroDef(ltFOOTSKIP,            _T("footskip"), 1);
-  AddMacroDef(ltFORALL,              _T("forall"), 0);
-  AddMacroDef(ltFRAMEBOX,            _T("framebox"), 1);
-  AddMacroDef(ltFROWN,               _T("frown"), 0);
-  AddMacroDef(ltFUNCTIONSECTION,     _T("functionsection"), 1);
-  AddMacroDef(ltFUNC,                _T("func"), 3);
-  AddMacroDef(ltFOOTNOTESIZE,        _T("footnotesize"), 0);
-  AddMacroDef(ltFANCYPLAIN,          _T("fancyplain"), 2);
-
-  AddMacroDef(ltGAMMA,               _T("gamma"), 0);
-  AddMacroDef(ltCAP_GAMMA,           _T("Gamma"), 0);
-  AddMacroDef(ltGEQ,                 _T("geq"), 0);
-  AddMacroDef(ltGE,                  _T("ge"), 0);
-  AddMacroDef(ltGG,                  _T("gg"), 0);
-  AddMacroDef(ltGLOSSARY,            _T("glossary"), 1);
-  AddMacroDef(ltGLOSS,               _T("gloss"), 1);
-
-  AddMacroDef(ltHEADHEIGHT,          _T("headheight"), 1);
-  AddMacroDef(ltHEARTSUIT,           _T("heartsuit"), 0);
-  AddMacroDef(ltHELPGLOSSARY,        _T("helpglossary"), 1);
-  AddMacroDef(ltHELPIGNORE,          _T("helpignore"), 1, true);
-  AddMacroDef(ltHELPONLY,            _T("helponly"), 1);
-  AddMacroDef(ltHELPINPUT,           _T("helpinput"), 1);
-  AddMacroDef(ltHELPFONTFAMILY,      _T("helpfontfamily"), 1);
-  AddMacroDef(ltHELPFONTSIZE,        _T("helpfontsize"), 1);
-  AddMacroDef(ltHELPREFN,            _T("helprefn"), 2);
-  AddMacroDef(ltHELPREF,             _T("helpref"), 2);
-  AddMacroDef(ltHFILL,               _T("hfill"), 0);
-  AddMacroDef(ltHLINE,               _T("hline"), 0);
-  AddMacroDef(ltHRULE,               _T("hrule"), 0);
-  AddMacroDef(ltHSPACESTAR,          _T("hspace*"), 1);
-  AddMacroDef(ltHSPACE,              _T("hspace"), 1);
-  AddMacroDef(ltHSKIPSTAR,           _T("hskip*"), 1);
-  AddMacroDef(ltHSKIP,               _T("hskip"), 1);
-  AddMacroDef(lthuge,                _T("huge"), 1);
-  AddMacroDef(ltHuge,                _T("Huge"), 1);
-  AddMacroDef(ltHUGE,                _T("HUGE"), 1);
-  AddMacroDef(ltHTMLIGNORE,          _T("htmlignore"), 1);
-  AddMacroDef(ltHTMLONLY,            _T("htmlonly"), 1);
-
-  AddMacroDef(ltIM,                  _T("im"), 0);
-  AddMacroDef(ltINCLUDEONLY,         _T("includeonly"), 1);
-  AddMacroDef(ltINCLUDE,             _T("include"), 1);
-  AddMacroDef(ltINDENTED,            _T("indented"), 2);
-  AddMacroDef(ltINDEX,               _T("index"), 1);
-  AddMacroDef(ltINPUT,               _T("input"), 1, true);
-  AddMacroDef(ltIOTA,                _T("iota"), 0);
-  AddMacroDef(ltITEMIZE,             _T("itemize"), 1);
-  AddMacroDef(ltITEM,                _T("item"), 0);
-  AddMacroDef(ltIMAGEMAP,            _T("imagemap"), 3);
-  AddMacroDef(ltIMAGEL,              _T("imagel"), 2);
-  AddMacroDef(ltIMAGER,              _T("imager"), 2);
-  AddMacroDef(ltIMAGE,               _T("image"), 2);
-  AddMacroDef(ltIN,                  _T("in"), 0);
-  AddMacroDef(ltINFTY,               _T("infty"), 0);
-  AddMacroDef(ltITSHAPE,             _T("itshape"), 1);
-  AddMacroDef(ltIT,                  _T("it"), 1);
-  AddMacroDef(ltITEMSEP,             _T("itemsep"), 1);
-  AddMacroDef(ltINSERTATLEVEL,       _T("insertatlevel"), 2);
-
-  AddMacroDef(ltKAPPA,               _T("kappa"), 0);
-  AddMacroDef(ltKILL,                _T("kill"), 0);
-
-  AddMacroDef(ltLABEL,               _T("label"), 1);
-  AddMacroDef(ltLAMBDA,              _T("lambda"), 0);
-  AddMacroDef(ltCAP_LAMBDA,          _T("Lambda"), 0);
-  AddMacroDef(ltlarge,               _T("large"), 1);
-  AddMacroDef(ltLarge,               _T("Large"), 1);
-  AddMacroDef(ltLARGE,               _T("LARGE"), 1);
-  AddMacroDef(ltLATEXIGNORE,         _T("latexignore"), 1);
-  AddMacroDef(ltLATEXONLY,           _T("latexonly"), 1);
-  AddMacroDef(ltLATEX,               _T("LaTeX"), 0);
-  AddMacroDef(ltLBOX,                _T("lbox"), 1);
-  AddMacroDef(ltLBRACERAW,           _T("lbraceraw"), 0);
-  AddMacroDef(ltLDOTS,               _T("ldots"), 0);
-  AddMacroDef(ltLEQ,                 _T("leq"), 0);
-  AddMacroDef(ltLE,                  _T("le"), 0);
-  AddMacroDef(ltLEFTARROW,           _T("leftarrow"), 0);
-  AddMacroDef(ltLEFTRIGHTARROW,      _T("leftrightarrow"), 0);
-  AddMacroDef(ltLEFTARROW2,          _T("Leftarrow"), 0);
-  AddMacroDef(ltLEFTRIGHTARROW2,     _T("Leftrightarrow"), 0);
-  AddMacroDef(ltLINEBREAK,           _T("linebreak"), 0);
-  AddMacroDef(ltLINKCOLOUR,          _T("linkcolour"), 1);
-  AddMacroDef(ltLISTOFFIGURES,       _T("listoffigures"), 0);
-  AddMacroDef(ltLISTOFTABLES,        _T("listoftables"), 0);
-  AddMacroDef(ltLHEAD,               _T("lhead"), 1);
-  AddMacroDef(ltLFOOT,               _T("lfoot"), 1);
-  AddMacroDef(ltLOWERCASE,           _T("lowercase"), 1);
-  AddMacroDef(ltLL,                  _T("ll"), 0);
-
-  AddMacroDef(ltMAKEGLOSSARY,        _T("makeglossary"), 0);
-  AddMacroDef(ltMAKEINDEX,           _T("makeindex"), 0);
-  AddMacroDef(ltMAKETITLE,           _T("maketitle"), 0);
-  AddMacroDef(ltMARKRIGHT,           _T("markright"), 1);
-  AddMacroDef(ltMARKBOTH,            _T("markboth"), 2);
-  AddMacroDef(ltMARGINPARWIDTH,      _T("marginparwidth"), 1);
-  AddMacroDef(ltMARGINPARSEP,        _T("marginparsep"), 1);
-  AddMacroDef(ltMARGINPARODD,        _T("marginparodd"), 1);
-  AddMacroDef(ltMARGINPAREVEN,       _T("marginpareven"), 1);
-  AddMacroDef(ltMARGINPAR,           _T("marginpar"), 1);
-  AddMacroDef(ltMBOX,                _T("mbox"), 1);
-  AddMacroDef(ltMDSERIES,            _T("mdseries"), 1);
-  AddMacroDef(ltMEMBERSECTION,       _T("membersection"), 1);
-  AddMacroDef(ltMEMBER,              _T("member"), 2);
-  AddMacroDef(ltMID,                 _T("mid"), 0);
-  AddMacroDef(ltMODELS,              _T("models"), 0);
-  AddMacroDef(ltMP,                  _T("mp"), 0);
-  AddMacroDef(ltMULTICOLUMN,         _T("multicolumn"), 3);
-  AddMacroDef(ltMU,                  _T("mu"), 0);
-
-  AddMacroDef(ltNABLA,               _T("nabla"), 0);
-  AddMacroDef(ltNEG,                 _T("neg"), 0);
-  AddMacroDef(ltNEQ,                 _T("neq"), 0);
-  AddMacroDef(ltNEWCOUNTER,          _T("newcounter"), 1, false, (bool)FORBID_ABSOLUTELY);
-  AddMacroDef(ltNEWLINE,             _T("newline"), 0);
-  AddMacroDef(ltNEWPAGE,             _T("newpage"), 0);
-  AddMacroDef(ltNI,                  _T("ni"), 0);
-  AddMacroDef(ltNOCITE,              _T("nocite"), 1);
-  AddMacroDef(ltNOINDENT,            _T("noindent"), 0);
-  AddMacroDef(ltNOLINEBREAK,         _T("nolinebreak"), 0);
-  AddMacroDef(ltNOPAGEBREAK,         _T("nopagebreak"), 0);
-  AddMacroDef(ltNORMALSIZE,          _T("normalsize"), 1);
-  AddMacroDef(ltNORMALBOX,           _T("normalbox"), 1);
-  AddMacroDef(ltNORMALBOXD,          _T("normalboxd"), 1);
-  AddMacroDef(ltNOTEQ,               _T("noteq"), 0);
-  AddMacroDef(ltNOTIN,               _T("notin"), 0);
-  AddMacroDef(ltNOTSUBSET,           _T("notsubset"), 0);
-  AddMacroDef(ltNU,                  _T("nu"), 0);
-
-  AddMacroDef(ltODDSIDEMARGIN,       _T("oddsidemargin"), 1);
-  AddMacroDef(ltOMEGA,               _T("omega"), 0);
-  AddMacroDef(ltCAP_OMEGA,           _T("Omega"), 0);
-  AddMacroDef(ltONECOLUMN,           _T("onecolumn"), 0);
-  AddMacroDef(ltOPLUS,               _T("oplus"), 0);
-  AddMacroDef(ltOSLASH,              _T("oslash"), 0);
-  AddMacroDef(ltOTIMES,              _T("otimes"), 0);
-
-  AddMacroDef(ltPAGEBREAK,           _T("pagebreak"), 0);
-  AddMacroDef(ltPAGEREF,             _T("pageref"), 1);
-  AddMacroDef(ltPAGESTYLE,           _T("pagestyle"), 1);
-  AddMacroDef(ltPAGENUMBERING,       _T("pagenumbering"), 1);
-  AddMacroDef(ltPARAGRAPHSTAR,       _T("paragraph*"), 1);
-  AddMacroDef(ltPARAGRAPH,           _T("paragraph"), 1);
-  AddMacroDef(ltPARALLEL,            _T("parallel"), 0);
-  AddMacroDef(ltPARAM,               _T("param"), 2);
-  AddMacroDef(ltPARINDENT,           _T("parindent"), 1);
-  AddMacroDef(ltPARSKIP,             _T("parskip"), 1);
-  AddMacroDef(ltPARTIAL,             _T("partial"), 0);
-  AddMacroDef(ltPARTSTAR,            _T("part*"), 1);
-  AddMacroDef(ltPART,                _T("part"), 1);
-  AddMacroDef(ltPAR,                 _T("par"), 0);
-  AddMacroDef(ltPERP,                _T("perp"), 0);
-  AddMacroDef(ltPHI,                 _T("phi"), 0);
-  AddMacroDef(ltCAP_PHI,             _T("Phi"), 0);
-  AddMacroDef(ltPFUNC,               _T("pfunc"), 3);
-  AddMacroDef(ltPICTURE,             _T("picture"), 1);
-  AddMacroDef(ltPI,                  _T("pi"), 0);
-  AddMacroDef(ltCAP_PI,              _T("Pi"), 0);
-  AddMacroDef(ltPM,                  _T("pm"), 0);
-  AddMacroDef(ltPOPREFONLY,          _T("poprefonly"), 1);
-  AddMacroDef(ltPOPREF,              _T("popref"), 2);
-  AddMacroDef(ltPOUNDS,              _T("pounds"), 0);
-  AddMacroDef(ltPREC,                _T("prec"), 0);
-  AddMacroDef(ltPRECEQ,              _T("preceq"), 0);
-  AddMacroDef(ltPRINTINDEX,          _T("printindex"), 0);
-  AddMacroDef(ltPROPTO,              _T("propto"), 0);
-  AddMacroDef(ltPSBOXTO,             _T("psboxto"), 1, false, (bool)FORBID_ABSOLUTELY);
-  AddMacroDef(ltPSBOX,               _T("psbox"), 1, false, (bool)FORBID_ABSOLUTELY);
-  AddMacroDef(ltPSI,                 _T("psi"), 0);
-  AddMacroDef(ltCAP_PSI,             _T("Psi"), 0);
-
-  AddMacroDef(ltQUOTE,               _T("quote"), 1);
-  AddMacroDef(ltQUOTATION,           _T("quotation"), 1);
-
-  AddMacroDef(ltRAGGEDBOTTOM,        _T("raggedbottom"), 0);
-  AddMacroDef(ltRAGGEDLEFT,          _T("raggedleft"), 0);
-  AddMacroDef(ltRAGGEDRIGHT,         _T("raggedright"), 0);
-  AddMacroDef(ltRBRACERAW,           _T("rbraceraw"), 0);
-  AddMacroDef(ltREF,                 _T("ref"), 1);
-  AddMacroDef(ltREGISTERED,          _T("registered"), 0);
-  AddMacroDef(ltRE,                  _T("we"), 0);
-  AddMacroDef(ltRHO,                 _T("rho"), 0);
-  AddMacroDef(ltRIGHTARROW,          _T("rightarrow"), 0);
-  AddMacroDef(ltRIGHTARROW2,         _T("rightarrow2"), 0);
-  AddMacroDef(ltRMFAMILY,            _T("rmfamily"), 1);
-  AddMacroDef(ltRM,                  _T("rm"), 1);
-  AddMacroDef(ltROMAN,               _T("roman"), 1);
-  AddMacroDef(ltROMAN2,              _T("Roman"), 1);
+  AddMacroDef(ltBIBLIOGRAPHYSTYLE,   wxT("bibliographystyle"), 1);
+  AddMacroDef(ltBIBLIOGRAPHY,        wxT("bibliography"), 1);
+  AddMacroDef(ltBIGTRIANGLEDOWN,     wxT("bigtriangledown"), 0);
+  AddMacroDef(ltBOT,                 wxT("bot"), 0);
+  AddMacroDef(ltBOXIT,               wxT("boxit"), 1);
+  AddMacroDef(ltBOX,                 wxT("box"), 0);
+  AddMacroDef(ltBRCLEAR,             wxT("brclear"), 0);
+  AddMacroDef(ltBULLET,              wxT("bullet"), 0);
+
+  AddMacroDef(ltCAPTIONSTAR,         wxT("caption*"), 1);
+  AddMacroDef(ltCAPTION,             wxT("caption"), 1);
+  AddMacroDef(ltCAP,                 wxT("cap"), 0);
+  AddMacroDef(ltCDOTS,               wxT("cdots"), 0);
+  AddMacroDef(ltCDOT,                wxT("cdot"), 0);
+  AddMacroDef(ltCENTERLINE,          wxT("centerline"), 1);
+  AddMacroDef(ltCENTERING,           wxT("centering"), 0);
+  AddMacroDef(ltCENTER,              wxT("center"), 1);
+  AddMacroDef(ltCEXTRACT,            wxT("cextract"), 0);
+  AddMacroDef(ltCHAPTERHEADING,      wxT("chapterheading"), 1);
+  AddMacroDef(ltCHAPTERSTAR,         wxT("chapter*"), 1);
+  AddMacroDef(ltCHAPTER,             wxT("chapter"), 1);
+  AddMacroDef(ltCHI,                 wxT("chi"), 0);
+  AddMacroDef(ltCINSERT,             wxT("cinsert"), 0);
+  AddMacroDef(ltCIRC,                wxT("circ"), 0);
+  AddMacroDef(ltCITE,                wxT("cite"), 1);
+  AddMacroDef(ltCLASS,               wxT("class"), 1);
+  AddMacroDef(ltCLEARDOUBLEPAGE,     wxT("cleardoublepage"), 0);
+  AddMacroDef(ltCLEARPAGE,           wxT("clearpage"), 0);
+  AddMacroDef(ltCLINE,               wxT("cline"), 1);
+  AddMacroDef(ltCLIPSFUNC,           wxT("clipsfunc"), 3);
+  AddMacroDef(ltCLUBSUIT,            wxT("clubsuit"), 0);
+  AddMacroDef(ltCOLUMNSEP,           wxT("columnsep"), 1);
+  AddMacroDef(ltCOMMENT,             wxT("comment"), 1, true);
+  AddMacroDef(ltCONG,                wxT("cong"), 0);
+  AddMacroDef(ltCOPYRIGHT,           wxT("copyright"), 0);
+  AddMacroDef(ltCPARAM,              wxT("cparam"), 2);
+  AddMacroDef(ltCHEAD,               wxT("chead"), 1);
+  AddMacroDef(ltCFOOT,               wxT("cfoot"), 1);
+  AddMacroDef(ltCUP,                 wxT("cup"), 0);
+
+  AddMacroDef(ltDASHV,               wxT("dashv"), 0);
+  AddMacroDef(ltDATE,                wxT("date"), 1);
+  AddMacroDef(ltDELTA,               wxT("delta"), 0);
+  AddMacroDef(ltCAP_DELTA,           wxT("Delta"), 0);
+  AddMacroDef(ltDEFINECOLOUR,        wxT("definecolour"), 4);
+  AddMacroDef(ltDEFINECOLOR,         wxT("definecolor"), 4);
+  AddMacroDef(ltDESCRIPTION,         wxT("description"), 1);
+  AddMacroDef(ltDESTRUCT,            wxT("destruct"), 1);
+  AddMacroDef(ltDIAMOND2,            wxT("diamond2"), 0);
+  AddMacroDef(ltDIAMOND,             wxT("diamond"), 0);
+  AddMacroDef(ltDIV,                 wxT("div"), 0);
+  AddMacroDef(ltDOCUMENTCLASS,       wxT("documentclass"), 1);
+  AddMacroDef(ltDOCUMENTSTYLE,       wxT("documentstyle"), 1);
+  AddMacroDef(ltDOCUMENT,            wxT("document"), 1);
+  AddMacroDef(ltDOUBLESPACE,         wxT("doublespace"), 1);
+  AddMacroDef(ltDOTEQ,               wxT("doteq"), 0);
+  AddMacroDef(ltDOWNARROW,           wxT("downarrow"), 0);
+  AddMacroDef(ltDOWNARROW2,          wxT("Downarrow"), 0);
+
+  AddMacroDef(ltEMPTYSET,            wxT("emptyset"), 0);
+  AddMacroDef(ltEMPH,                wxT("emph"), 1);
+  AddMacroDef(ltEM,                  wxT("em"), 1);
+  AddMacroDef(ltENUMERATE,           wxT("enumerate"), 1);
+  AddMacroDef(ltEPSILON,             wxT("epsilon"), 0);
+  AddMacroDef(ltEQUATION,            wxT("equation"), 1);
+  AddMacroDef(ltEQUIV,               wxT("equiv"), 0);
+  AddMacroDef(ltETA,                 wxT("eta"), 0);
+  AddMacroDef(ltEVENSIDEMARGIN,      wxT("evensidemargin"), 1);
+  AddMacroDef(ltEXISTS,              wxT("exists"), 0);
+
+  AddMacroDef(ltFBOX,                wxT("fbox"), 1);
+  AddMacroDef(ltFCOL,                wxT("fcol"), 2);
+  AddMacroDef(ltFIGURE,              wxT("figure"), 1);
+  AddMacroDef(ltFIGURESTAR,          wxT("figure*"), 1);
+  AddMacroDef(ltFLUSHLEFT,           wxT("flushleft"), 1);
+  AddMacroDef(ltFLUSHRIGHT,          wxT("flushright"), 1);
+  AddMacroDef(ltFOLLOWEDLINKCOLOUR,  wxT("followedlinkcolour"), 1);
+  AddMacroDef(ltFOOTHEIGHT,          wxT("footheight"), 1);
+  AddMacroDef(ltFOOTNOTEPOPUP,       wxT("footnotepopup"), 2);
+  AddMacroDef(ltFOOTNOTE,            wxT("footnote"), 1);
+  AddMacroDef(ltFOOTSKIP,            wxT("footskip"), 1);
+  AddMacroDef(ltFORALL,              wxT("forall"), 0);
+  AddMacroDef(ltFRAMEBOX,            wxT("framebox"), 1);
+  AddMacroDef(ltFROWN,               wxT("frown"), 0);
+  AddMacroDef(ltFUNCTIONSECTION,     wxT("functionsection"), 1);
+  AddMacroDef(ltFUNC,                wxT("func"), 3);
+  AddMacroDef(ltFOOTNOTESIZE,        wxT("footnotesize"), 0);
+  AddMacroDef(ltFANCYPLAIN,          wxT("fancyplain"), 2);
+
+  AddMacroDef(ltGAMMA,               wxT("gamma"), 0);
+  AddMacroDef(ltCAP_GAMMA,           wxT("Gamma"), 0);
+  AddMacroDef(ltGEQ,                 wxT("geq"), 0);
+  AddMacroDef(ltGE,                  wxT("ge"), 0);
+  AddMacroDef(ltGG,                  wxT("gg"), 0);
+  AddMacroDef(ltGLOSSARY,            wxT("glossary"), 1);
+  AddMacroDef(ltGLOSS,               wxT("gloss"), 1);
+
+  AddMacroDef(ltHEADHEIGHT,          wxT("headheight"), 1);
+  AddMacroDef(ltHEARTSUIT,           wxT("heartsuit"), 0);
+  AddMacroDef(ltHELPGLOSSARY,        wxT("helpglossary"), 1);
+  AddMacroDef(ltHELPIGNORE,          wxT("helpignore"), 1, true);
+  AddMacroDef(ltHELPONLY,            wxT("helponly"), 1);
+  AddMacroDef(ltHELPINPUT,           wxT("helpinput"), 1);
+  AddMacroDef(ltHELPFONTFAMILY,      wxT("helpfontfamily"), 1);
+  AddMacroDef(ltHELPFONTSIZE,        wxT("helpfontsize"), 1);
+  AddMacroDef(ltHELPREFN,            wxT("helprefn"), 2);
+  AddMacroDef(ltHELPREF,             wxT("helpref"), 2);
+  AddMacroDef(ltHFILL,               wxT("hfill"), 0);
+  AddMacroDef(ltHLINE,               wxT("hline"), 0);
+  AddMacroDef(ltHRULE,               wxT("hrule"), 0);
+  AddMacroDef(ltHSPACESTAR,          wxT("hspace*"), 1);
+  AddMacroDef(ltHSPACE,              wxT("hspace"), 1);
+  AddMacroDef(ltHSKIPSTAR,           wxT("hskip*"), 1);
+  AddMacroDef(ltHSKIP,               wxT("hskip"), 1);
+  AddMacroDef(lthuge,                wxT("huge"), 1);
+  AddMacroDef(ltHuge,                wxT("Huge"), 1);
+  AddMacroDef(ltHUGE,                wxT("HUGE"), 1);
+  AddMacroDef(ltHTMLIGNORE,          wxT("htmlignore"), 1);
+  AddMacroDef(ltHTMLONLY,            wxT("htmlonly"), 1);
+
+  AddMacroDef(ltIM,                  wxT("im"), 0);
+  AddMacroDef(ltINCLUDEONLY,         wxT("includeonly"), 1);
+  AddMacroDef(ltINCLUDE,             wxT("include"), 1);
+  AddMacroDef(ltINDENTED,            wxT("indented"), 2);
+  AddMacroDef(ltINDEX,               wxT("index"), 1);
+  AddMacroDef(ltINPUT,               wxT("input"), 1, true);
+  AddMacroDef(ltIOTA,                wxT("iota"), 0);
+  AddMacroDef(ltITEMIZE,             wxT("itemize"), 1);
+  AddMacroDef(ltITEM,                wxT("item"), 0);
+  AddMacroDef(ltIMAGEMAP,            wxT("imagemap"), 3);
+  AddMacroDef(ltIMAGEL,              wxT("imagel"), 2);
+  AddMacroDef(ltIMAGER,              wxT("imager"), 2);
+  AddMacroDef(ltIMAGE,               wxT("image"), 2);
+  AddMacroDef(ltIN,                  wxT("in"), 0);
+  AddMacroDef(ltINFTY,               wxT("infty"), 0);
+  AddMacroDef(ltITSHAPE,             wxT("itshape"), 1);
+  AddMacroDef(ltIT,                  wxT("it"), 1);
+  AddMacroDef(ltITEMSEP,             wxT("itemsep"), 1);
+  AddMacroDef(ltINSERTATLEVEL,       wxT("insertatlevel"), 2);
+
+  AddMacroDef(ltKAPPA,               wxT("kappa"), 0);
+  AddMacroDef(ltKILL,                wxT("kill"), 0);
+
+  AddMacroDef(ltLABEL,               wxT("label"), 1);
+  AddMacroDef(ltLAMBDA,              wxT("lambda"), 0);
+  AddMacroDef(ltCAP_LAMBDA,          wxT("Lambda"), 0);
+  AddMacroDef(ltlarge,               wxT("large"), 1);
+  AddMacroDef(ltLarge,               wxT("Large"), 1);
+  AddMacroDef(ltLARGE,               wxT("LARGE"), 1);
+  AddMacroDef(ltLATEXIGNORE,         wxT("latexignore"), 1);
+  AddMacroDef(ltLATEXONLY,           wxT("latexonly"), 1);
+  AddMacroDef(ltLATEX,               wxT("LaTeX"), 0);
+  AddMacroDef(ltLBOX,                wxT("lbox"), 1);
+  AddMacroDef(ltLBRACERAW,           wxT("lbraceraw"), 0);
+  AddMacroDef(ltLDOTS,               wxT("ldots"), 0);
+  AddMacroDef(ltLEQ,                 wxT("leq"), 0);
+  AddMacroDef(ltLE,                  wxT("le"), 0);
+  AddMacroDef(ltLEFTARROW,           wxT("leftarrow"), 0);
+  AddMacroDef(ltLEFTRIGHTARROW,      wxT("leftrightarrow"), 0);
+  AddMacroDef(ltLEFTARROW2,          wxT("Leftarrow"), 0);
+  AddMacroDef(ltLEFTRIGHTARROW2,     wxT("Leftrightarrow"), 0);
+  AddMacroDef(ltLINEBREAK,           wxT("linebreak"), 0);
+  AddMacroDef(ltLINKCOLOUR,          wxT("linkcolour"), 1);
+  AddMacroDef(ltLISTOFFIGURES,       wxT("listoffigures"), 0);
+  AddMacroDef(ltLISTOFTABLES,        wxT("listoftables"), 0);
+  AddMacroDef(ltLHEAD,               wxT("lhead"), 1);
+  AddMacroDef(ltLFOOT,               wxT("lfoot"), 1);
+  AddMacroDef(ltLOWERCASE,           wxT("lowercase"), 1);
+  AddMacroDef(ltLL,                  wxT("ll"), 0);
+
+  AddMacroDef(ltMAKEGLOSSARY,        wxT("makeglossary"), 0);
+  AddMacroDef(ltMAKEINDEX,           wxT("makeindex"), 0);
+  AddMacroDef(ltMAKETITLE,           wxT("maketitle"), 0);
+  AddMacroDef(ltMARKRIGHT,           wxT("markright"), 1);
+  AddMacroDef(ltMARKBOTH,            wxT("markboth"), 2);
+  AddMacroDef(ltMARGINPARWIDTH,      wxT("marginparwidth"), 1);
+  AddMacroDef(ltMARGINPARSEP,        wxT("marginparsep"), 1);
+  AddMacroDef(ltMARGINPARODD,        wxT("marginparodd"), 1);
+  AddMacroDef(ltMARGINPAREVEN,       wxT("marginpareven"), 1);
+  AddMacroDef(ltMARGINPAR,           wxT("marginpar"), 1);
+  AddMacroDef(ltMBOX,                wxT("mbox"), 1);
+  AddMacroDef(ltMDSERIES,            wxT("mdseries"), 1);
+  AddMacroDef(ltMEMBERSECTION,       wxT("membersection"), 1);
+  AddMacroDef(ltMEMBER,              wxT("member"), 2);
+  AddMacroDef(ltMID,                 wxT("mid"), 0);
+  AddMacroDef(ltMODELS,              wxT("models"), 0);
+  AddMacroDef(ltMP,                  wxT("mp"), 0);
+  AddMacroDef(ltMULTICOLUMN,         wxT("multicolumn"), 3);
+  AddMacroDef(ltMU,                  wxT("mu"), 0);
+
+  AddMacroDef(ltNABLA,               wxT("nabla"), 0);
+  AddMacroDef(ltNEG,                 wxT("neg"), 0);
+  AddMacroDef(ltNEQ,                 wxT("neq"), 0);
+  AddMacroDef(ltNEWCOUNTER,          wxT("newcounter"), 1, false, (bool)FORBID_ABSOLUTELY);
+  AddMacroDef(ltNEWLINE,             wxT("newline"), 0);
+  AddMacroDef(ltNEWPAGE,             wxT("newpage"), 0);
+  AddMacroDef(ltNI,                  wxT("ni"), 0);
+  AddMacroDef(ltNOCITE,              wxT("nocite"), 1);
+  AddMacroDef(ltNOINDENT,            wxT("noindent"), 0);
+  AddMacroDef(ltNOLINEBREAK,         wxT("nolinebreak"), 0);
+  AddMacroDef(ltNOPAGEBREAK,         wxT("nopagebreak"), 0);
+  AddMacroDef(ltNORMALSIZE,          wxT("normalsize"), 1);
+  AddMacroDef(ltNORMALBOX,           wxT("normalbox"), 1);
+  AddMacroDef(ltNORMALBOXD,          wxT("normalboxd"), 1);
+  AddMacroDef(ltNOTEQ,               wxT("noteq"), 0);
+  AddMacroDef(ltNOTIN,               wxT("notin"), 0);
+  AddMacroDef(ltNOTSUBSET,           wxT("notsubset"), 0);
+  AddMacroDef(ltNU,                  wxT("nu"), 0);
+
+  AddMacroDef(ltODDSIDEMARGIN,       wxT("oddsidemargin"), 1);
+  AddMacroDef(ltOMEGA,               wxT("omega"), 0);
+  AddMacroDef(ltCAP_OMEGA,           wxT("Omega"), 0);
+  AddMacroDef(ltONECOLUMN,           wxT("onecolumn"), 0);
+  AddMacroDef(ltOPLUS,               wxT("oplus"), 0);
+  AddMacroDef(ltOSLASH,              wxT("oslash"), 0);
+  AddMacroDef(ltOTIMES,              wxT("otimes"), 0);
+
+  AddMacroDef(ltPAGEBREAK,           wxT("pagebreak"), 0);
+  AddMacroDef(ltPAGEREF,             wxT("pageref"), 1);
+  AddMacroDef(ltPAGESTYLE,           wxT("pagestyle"), 1);
+  AddMacroDef(ltPAGENUMBERING,       wxT("pagenumbering"), 1);
+  AddMacroDef(ltPARAGRAPHSTAR,       wxT("paragraph*"), 1);
+  AddMacroDef(ltPARAGRAPH,           wxT("paragraph"), 1);
+  AddMacroDef(ltPARALLEL,            wxT("parallel"), 0);
+  AddMacroDef(ltPARAM,               wxT("param"), 2);
+  AddMacroDef(ltPARINDENT,           wxT("parindent"), 1);
+  AddMacroDef(ltPARSKIP,             wxT("parskip"), 1);
+  AddMacroDef(ltPARTIAL,             wxT("partial"), 0);
+  AddMacroDef(ltPARTSTAR,            wxT("part*"), 1);
+  AddMacroDef(ltPART,                wxT("part"), 1);
+  AddMacroDef(ltPAR,                 wxT("par"), 0);
+  AddMacroDef(ltPERP,                wxT("perp"), 0);
+  AddMacroDef(ltPHI,                 wxT("phi"), 0);
+  AddMacroDef(ltCAP_PHI,             wxT("Phi"), 0);
+  AddMacroDef(ltPFUNC,               wxT("pfunc"), 3);
+  AddMacroDef(ltPICTURE,             wxT("picture"), 1);
+  AddMacroDef(ltPI,                  wxT("pi"), 0);
+  AddMacroDef(ltCAP_PI,              wxT("Pi"), 0);
+  AddMacroDef(ltPM,                  wxT("pm"), 0);
+  AddMacroDef(ltPOPREFONLY,          wxT("poprefonly"), 1);
+  AddMacroDef(ltPOPREF,              wxT("popref"), 2);
+  AddMacroDef(ltPOUNDS,              wxT("pounds"), 0);
+  AddMacroDef(ltPREC,                wxT("prec"), 0);
+  AddMacroDef(ltPRECEQ,              wxT("preceq"), 0);
+  AddMacroDef(ltPRINTINDEX,          wxT("printindex"), 0);
+  AddMacroDef(ltPROPTO,              wxT("propto"), 0);
+  AddMacroDef(ltPSBOXTO,             wxT("psboxto"), 1, false, (bool)FORBID_ABSOLUTELY);
+  AddMacroDef(ltPSBOX,               wxT("psbox"), 1, false, (bool)FORBID_ABSOLUTELY);
+  AddMacroDef(ltPSI,                 wxT("psi"), 0);
+  AddMacroDef(ltCAP_PSI,             wxT("Psi"), 0);
+
+  AddMacroDef(ltQUOTE,               wxT("quote"), 1);
+  AddMacroDef(ltQUOTATION,           wxT("quotation"), 1);
+
+  AddMacroDef(ltRAGGEDBOTTOM,        wxT("raggedbottom"), 0);
+  AddMacroDef(ltRAGGEDLEFT,          wxT("raggedleft"), 0);
+  AddMacroDef(ltRAGGEDRIGHT,         wxT("raggedright"), 0);
+  AddMacroDef(ltRBRACERAW,           wxT("rbraceraw"), 0);
+  AddMacroDef(ltREF,                 wxT("ref"), 1);
+  AddMacroDef(ltREGISTERED,          wxT("registered"), 0);
+  AddMacroDef(ltRE,                  wxT("we"), 0);
+  AddMacroDef(ltRHO,                 wxT("rho"), 0);
+  AddMacroDef(ltRIGHTARROW,          wxT("rightarrow"), 0);
+  AddMacroDef(ltRIGHTARROW2,         wxT("rightarrow2"), 0);
+  AddMacroDef(ltRMFAMILY,            wxT("rmfamily"), 1);
+  AddMacroDef(ltRM,                  wxT("rm"), 1);
+  AddMacroDef(ltROMAN,               wxT("roman"), 1);
+  AddMacroDef(ltROMAN2,              wxT("Roman"), 1);
 //  AddMacroDef(lt"row", 1);
-  AddMacroDef(ltRTFSP,               _T("rtfsp"), 0);
-  AddMacroDef(ltRTFIGNORE,           _T("rtfignore"), 1);
-  AddMacroDef(ltRTFONLY,             _T("rtfonly"), 1);
-  AddMacroDef(ltRULEDROW,            _T("ruledrow"), 1);
-  AddMacroDef(ltDRULED,              _T("druled"), 1);
-  AddMacroDef(ltRULE,                _T("rule"), 2);
-  AddMacroDef(ltRHEAD,               _T("rhead"), 1);
-  AddMacroDef(ltRFOOT,               _T("rfoot"), 1);
-  AddMacroDef(ltROW,                 _T("row"), 1);
-
-  AddMacroDef(ltSCSHAPE,             _T("scshape"), 1);
-  AddMacroDef(ltSC,                  _T("sc"), 1);
-  AddMacroDef(ltSECTIONHEADING,      _T("sectionheading"), 1);
-  AddMacroDef(ltSECTIONSTAR,         _T("section*"), 1);
-  AddMacroDef(ltSECTION,             _T("section"), 1);
-  AddMacroDef(ltSETCOUNTER,          _T("setcounter"), 2);
-  AddMacroDef(ltSFFAMILY,            _T("sffamily"), 1);
-  AddMacroDef(ltSF,                  _T("sf"), 1);
-  AddMacroDef(ltSHARP,               _T("sharp"), 0);
-  AddMacroDef(ltSHORTCITE,           _T("shortcite"), 1);
-  AddMacroDef(ltSIGMA,               _T("sigma"), 0);
-  AddMacroDef(ltCAP_SIGMA,           _T("Sigma"), 0);
-  AddMacroDef(ltSIM,                 _T("sim"), 0);
-  AddMacroDef(ltSIMEQ,               _T("simeq"), 0);
-  AddMacroDef(ltSINGLESPACE,         _T("singlespace"), 1);
-  AddMacroDef(ltSIZEDBOX,            _T("sizedbox"), 2);
-  AddMacroDef(ltSIZEDBOXD,           _T("sizedboxd"), 2);
-  AddMacroDef(ltSLOPPYPAR,           _T("sloppypar"), 1);
-  AddMacroDef(ltSLOPPY,              _T("sloppy"), 0);
-  AddMacroDef(ltSLSHAPE,             _T("slshape"), 1);
-  AddMacroDef(ltSL,                  _T("sl"), 1);
-  AddMacroDef(ltSMALL,               _T("small"), 1);
-  AddMacroDef(ltSMILE,               _T("smile"), 0);
-  AddMacroDef(ltSS,                  _T("ss"), 0);
-  AddMacroDef(ltSTAR,                _T("star"), 0);
-  AddMacroDef(ltSUBITEM,             _T("subitem"), 0);
-  AddMacroDef(ltSUBPARAGRAPHSTAR,    _T("subparagraph*"), 1);
-  AddMacroDef(ltSUBPARAGRAPH,        _T("subparagraph"), 1);
-  AddMacroDef(ltSPECIAL,             _T("special"), 1);
-  AddMacroDef(ltSUBSECTIONSTAR,      _T("subsection*"), 1);
-  AddMacroDef(ltSUBSECTION,          _T("subsection"), 1);
-  AddMacroDef(ltSUBSETEQ,            _T("subseteq"), 0);
-  AddMacroDef(ltSUBSET,              _T("subset"), 0);
-  AddMacroDef(ltSUCC,                _T("succ"), 0);
-  AddMacroDef(ltSUCCEQ,              _T("succeq"), 0);
-  AddMacroDef(ltSUPSETEQ,            _T("supseteq"), 0);
-  AddMacroDef(ltSUPSET,              _T("supset"), 0);
-  AddMacroDef(ltSUBSUBSECTIONSTAR,   _T("subsubsection*"), 1);
-  AddMacroDef(ltSUBSUBSECTION,       _T("subsubsection"), 1);
-  AddMacroDef(ltSUPERTABULAR,        _T("supertabular"), 2, false);
-  AddMacroDef(ltSURD,                _T("surd"), 0);
-  AddMacroDef(ltSCRIPTSIZE,          _T("scriptsize"), 1);
-  AddMacroDef(ltSETHEADER,           _T("setheader"), 6);
-  AddMacroDef(ltSETFOOTER,           _T("setfooter"), 6);
-  AddMacroDef(ltSETHOTSPOTCOLOUR,    _T("sethotspotcolour"), 1);
-  AddMacroDef(ltSETHOTSPOTCOLOR,     _T("sethotspotcolor"), 1);
-  AddMacroDef(ltSETHOTSPOTUNDERLINE, _T("sethotspotunderline"), 1);
-  AddMacroDef(ltSETTRANSPARENCY,     _T("settransparency"), 1);
-  AddMacroDef(ltSPADESUIT,           _T("spadesuit"), 0);
-
-  AddMacroDef(ltTABBING,             _T("tabbing"), 2);
-  AddMacroDef(ltTABLEOFCONTENTS,     _T("tableofcontents"), 0);
-  AddMacroDef(ltTABLE,               _T("table"), 1);
-  AddMacroDef(ltTABULAR,             _T("tabular"), 2, false);
-  AddMacroDef(ltTAB,                 _T("tab"), 0);
-  AddMacroDef(ltTAU,                 _T("tau"), 0);
-  AddMacroDef(ltTEXTRM,              _T("textrm"), 1);
-  AddMacroDef(ltTEXTSF,              _T("textsf"), 1);
-  AddMacroDef(ltTEXTTT,              _T("texttt"), 1);
-  AddMacroDef(ltTEXTBF,              _T("textbf"), 1);
-  AddMacroDef(ltTEXTIT,              _T("textit"), 1);
-  AddMacroDef(ltTEXTSL,              _T("textsl"), 1);
-  AddMacroDef(ltTEXTSC,              _T("textsc"), 1);
-  AddMacroDef(ltTEXTWIDTH,           _T("textwidth"), 1);
-  AddMacroDef(ltTEXTHEIGHT,          _T("textheight"), 1);
-  AddMacroDef(ltTEXTCOLOUR,          _T("textcolour"), 1);
-  AddMacroDef(ltTEX,                 _T("TeX"), 0);
-  AddMacroDef(ltTHEBIBLIOGRAPHY,     _T("thebibliography"), 2);
-  AddMacroDef(ltTHETA,               _T("theta"), 0);
-  AddMacroDef(ltTIMES,               _T("times"), 0);
-  AddMacroDef(ltCAP_THETA,           _T("Theta"), 0);
-  AddMacroDef(ltTITLEPAGE,           _T("titlepage"), 1);
-  AddMacroDef(ltTITLE,               _T("title"), 1);
-  AddMacroDef(ltTINY,                _T("tiny"), 1);
-  AddMacroDef(ltTODAY,               _T("today"), 0);
-  AddMacroDef(ltTOPMARGIN,           _T("topmargin"), 1);
-  AddMacroDef(ltTOPSKIP,             _T("topskip"), 1);
-  AddMacroDef(ltTRIANGLE,            _T("triangle"), 0);
-  AddMacroDef(ltTTFAMILY,            _T("ttfamily"), 1);
-  AddMacroDef(ltTT,                  _T("tt"), 1);
-  AddMacroDef(ltTYPEIN,              _T("typein"), 1);
-  AddMacroDef(ltTYPEOUT,             _T("typeout"), 1);
-  AddMacroDef(ltTWOCOLWIDTHA,        _T("twocolwidtha"), 1);
-  AddMacroDef(ltTWOCOLWIDTHB,        _T("twocolwidthb"), 1);
-  AddMacroDef(ltTWOCOLSPACING,       _T("twocolspacing"), 1);
-  AddMacroDef(ltTWOCOLITEMRULED,     _T("twocolitemruled"), 2);
-  AddMacroDef(ltTWOCOLITEM,          _T("twocolitem"), 2);
-  AddMacroDef(ltTWOCOLLIST,          _T("twocollist"), 1);
-  AddMacroDef(ltTWOCOLUMN,           _T("twocolumn"), 0);
-  AddMacroDef(ltTHEPAGE,             _T("thepage"), 0);
-  AddMacroDef(ltTHECHAPTER,          _T("thechapter"), 0);
-  AddMacroDef(ltTHESECTION,          _T("thesection"), 0);
-  AddMacroDef(ltTHISPAGESTYLE,       _T("thispagestyle"), 1);
-
-  AddMacroDef(ltUNDERLINE,           _T("underline"), 1);
-  AddMacroDef(ltUPSILON,             _T("upsilon"), 0);
-  AddMacroDef(ltCAP_UPSILON,         _T("Upsilon"), 0);
-  AddMacroDef(ltUPARROW,             _T("uparrow"), 0);
-  AddMacroDef(ltUPARROW2,            _T("Uparrow"), 0);
-  AddMacroDef(ltUPPERCASE,           _T("uppercase"), 1);
-  AddMacroDef(ltUPSHAPE,             _T("upshape"), 1);
-  AddMacroDef(ltURLREF,              _T("urlref"), 2);
-  AddMacroDef(ltUSEPACKAGE,          _T("usepackage"), 1);
-
-  AddMacroDef(ltVAREPSILON,          _T("varepsilon"), 0);
-  AddMacroDef(ltVARPHI,              _T("varphi"), 0);
-  AddMacroDef(ltVARPI,               _T("varpi"), 0);
-  AddMacroDef(ltVARRHO,              _T("varrho"), 0);
-  AddMacroDef(ltVARSIGMA,            _T("varsigma"), 0);
-  AddMacroDef(ltVARTHETA,            _T("vartheta"), 0);
-  AddMacroDef(ltVDOTS,               _T("vdots"), 0);
-  AddMacroDef(ltVEE,                 _T("vee"), 0);
-  AddMacroDef(ltVERBATIMINPUT,       _T("verbatiminput"), 1);
-  AddMacroDef(ltVERBATIM,            _T("verbatim"), 1);
-  AddMacroDef(ltVERBSTAR,            _T("verb*"), 1);
-  AddMacroDef(ltVERB,                _T("verb"), 1);
-  AddMacroDef(ltVERSE,               _T("verse"), 1);
-  AddMacroDef(ltVFILL,               _T("vfill"), 0);
-  AddMacroDef(ltVLINE,               _T("vline"), 0);
-  AddMacroDef(ltVOID,                _T("void"), 0);
-  AddMacroDef(ltVDASH,               _T("vdash"), 0);
-  AddMacroDef(ltVRULE,               _T("vrule"), 0);
-  AddMacroDef(ltVSPACESTAR,          _T("vspace*"), 1);
-  AddMacroDef(ltVSKIPSTAR,           _T("vskip*"), 1);
-  AddMacroDef(ltVSPACE,              _T("vspace"), 1);
-  AddMacroDef(ltVSKIP,               _T("vskip"), 1);
-
-  AddMacroDef(ltWEDGE,               _T("wedge"), 0);
-  AddMacroDef(ltWXCLIPS,             _T("wxclips"), 0);
-  AddMacroDef(ltWINHELPIGNORE,       _T("winhelpignore"), 1);
-  AddMacroDef(ltWINHELPONLY,         _T("winhelponly"), 1);
-  AddMacroDef(ltWP,                  _T("wp"), 0);
-
-  AddMacroDef(ltXI,                  _T("xi"), 0);
-  AddMacroDef(ltCAP_XI,              _T("Xi"), 0);
-  AddMacroDef(ltXLPIGNORE,           _T("xlpignore"), 1);
-  AddMacroDef(ltXLPONLY,             _T("xlponly"), 1);
-
-  AddMacroDef(ltZETA,                _T("zeta"), 0);
-
-  AddMacroDef(ltSPACE,               _T(" "), 0);
-  AddMacroDef(ltBACKSLASHCHAR,       _T("\\"), 0);
-  AddMacroDef(ltPIPE,                _T("|"), 0);
-  AddMacroDef(ltFORWARDSLASH,        _T("/"), 0);
-  AddMacroDef(ltUNDERSCORE,          _T("_"), 0);
-  AddMacroDef(ltAMPERSAND,           _T("&"), 0);
-  AddMacroDef(ltPERCENT,             _T("%"), 0);
-  AddMacroDef(ltDOLLAR,              _T("$"), 0);
-  AddMacroDef(ltHASH,                _T("#"), 0);
-  AddMacroDef(ltLPARENTH,            _T("("), 0);
-  AddMacroDef(ltRPARENTH,            _T(")"), 0);
-  AddMacroDef(ltLBRACE,              _T("{"), 0);
-  AddMacroDef(ltRBRACE,              _T("}"), 0);
-//  AddMacroDef(ltEQUALS,              _T("="), 0);
-  AddMacroDef(ltRANGLEBRA,           _T(">"), 0);
-  AddMacroDef(ltLANGLEBRA,           _T("<"), 0);
-  AddMacroDef(ltPLUS,                _T("+"), 0);
-  AddMacroDef(ltDASH,                _T("-"), 0);
-  AddMacroDef(ltAT_SYMBOL,           _T("@"), 0);
-//  AddMacroDef(ltSINGLEQUOTE,         _T("'"), 0);
-//  AddMacroDef(ltBACKQUOTE,           _T("`"), 0);
+  AddMacroDef(ltRTFSP,               wxT("rtfsp"), 0);
+  AddMacroDef(ltRTFIGNORE,           wxT("rtfignore"), 1);
+  AddMacroDef(ltRTFONLY,             wxT("rtfonly"), 1);
+  AddMacroDef(ltRULEDROW,            wxT("ruledrow"), 1);
+  AddMacroDef(ltDRULED,              wxT("druled"), 1);
+  AddMacroDef(ltRULE,                wxT("rule"), 2);
+  AddMacroDef(ltRHEAD,               wxT("rhead"), 1);
+  AddMacroDef(ltRFOOT,               wxT("rfoot"), 1);
+  AddMacroDef(ltROW,                 wxT("row"), 1);
+
+  AddMacroDef(ltSCSHAPE,             wxT("scshape"), 1);
+  AddMacroDef(ltSC,                  wxT("sc"), 1);
+  AddMacroDef(ltSECTIONHEADING,      wxT("sectionheading"), 1);
+  AddMacroDef(ltSECTIONSTAR,         wxT("section*"), 1);
+  AddMacroDef(ltSECTION,             wxT("section"), 1);
+  AddMacroDef(ltSETCOUNTER,          wxT("setcounter"), 2);
+  AddMacroDef(ltSFFAMILY,            wxT("sffamily"), 1);
+  AddMacroDef(ltSF,                  wxT("sf"), 1);
+  AddMacroDef(ltSHARP,               wxT("sharp"), 0);
+  AddMacroDef(ltSHORTCITE,           wxT("shortcite"), 1);
+  AddMacroDef(ltSIGMA,               wxT("sigma"), 0);
+  AddMacroDef(ltCAP_SIGMA,           wxT("Sigma"), 0);
+  AddMacroDef(ltSIM,                 wxT("sim"), 0);
+  AddMacroDef(ltSIMEQ,               wxT("simeq"), 0);
+  AddMacroDef(ltSINGLESPACE,         wxT("singlespace"), 1);
+  AddMacroDef(ltSIZEDBOX,            wxT("sizedbox"), 2);
+  AddMacroDef(ltSIZEDBOXD,           wxT("sizedboxd"), 2);
+  AddMacroDef(ltSLOPPYPAR,           wxT("sloppypar"), 1);
+  AddMacroDef(ltSLOPPY,              wxT("sloppy"), 0);
+  AddMacroDef(ltSLSHAPE,             wxT("slshape"), 1);
+  AddMacroDef(ltSL,                  wxT("sl"), 1);
+  AddMacroDef(ltSMALL,               wxT("small"), 1);
+  AddMacroDef(ltSMILE,               wxT("smile"), 0);
+  AddMacroDef(ltSS,                  wxT("ss"), 0);
+  AddMacroDef(ltSTAR,                wxT("star"), 0);
+  AddMacroDef(ltSUBITEM,             wxT("subitem"), 0);
+  AddMacroDef(ltSUBPARAGRAPHSTAR,    wxT("subparagraph*"), 1);
+  AddMacroDef(ltSUBPARAGRAPH,        wxT("subparagraph"), 1);
+  AddMacroDef(ltSPECIAL,             wxT("special"), 1);
+  AddMacroDef(ltSUBSECTIONSTAR,      wxT("subsection*"), 1);
+  AddMacroDef(ltSUBSECTION,          wxT("subsection"), 1);
+  AddMacroDef(ltSUBSETEQ,            wxT("subseteq"), 0);
+  AddMacroDef(ltSUBSET,              wxT("subset"), 0);
+  AddMacroDef(ltSUCC,                wxT("succ"), 0);
+  AddMacroDef(ltSUCCEQ,              wxT("succeq"), 0);
+  AddMacroDef(ltSUPSETEQ,            wxT("supseteq"), 0);
+  AddMacroDef(ltSUPSET,              wxT("supset"), 0);
+  AddMacroDef(ltSUBSUBSECTIONSTAR,   wxT("subsubsection*"), 1);
+  AddMacroDef(ltSUBSUBSECTION,       wxT("subsubsection"), 1);
+  AddMacroDef(ltSUPERTABULAR,        wxT("supertabular"), 2, false);
+  AddMacroDef(ltSURD,                wxT("surd"), 0);
+  AddMacroDef(ltSCRIPTSIZE,          wxT("scriptsize"), 1);
+  AddMacroDef(ltSETHEADER,           wxT("setheader"), 6);
+  AddMacroDef(ltSETFOOTER,           wxT("setfooter"), 6);
+  AddMacroDef(ltSETHOTSPOTCOLOUR,    wxT("sethotspotcolour"), 1);
+  AddMacroDef(ltSETHOTSPOTCOLOR,     wxT("sethotspotcolor"), 1);
+  AddMacroDef(ltSETHOTSPOTUNDERLINE, wxT("sethotspotunderline"), 1);
+  AddMacroDef(ltSETTRANSPARENCY,     wxT("settransparency"), 1);
+  AddMacroDef(ltSPADESUIT,           wxT("spadesuit"), 0);
+
+  AddMacroDef(ltTABBING,             wxT("tabbing"), 2);
+  AddMacroDef(ltTABLEOFCONTENTS,     wxT("tableofcontents"), 0);
+  AddMacroDef(ltTABLE,               wxT("table"), 1);
+  AddMacroDef(ltTABULAR,             wxT("tabular"), 2, false);
+  AddMacroDef(ltTAB,                 wxT("tab"), 0);
+  AddMacroDef(ltTAU,                 wxT("tau"), 0);
+  AddMacroDef(ltTEXTRM,              wxT("textrm"), 1);
+  AddMacroDef(ltTEXTSF,              wxT("textsf"), 1);
+  AddMacroDef(ltTEXTTT,              wxT("texttt"), 1);
+  AddMacroDef(ltTEXTBF,              wxT("textbf"), 1);
+  AddMacroDef(ltTEXTIT,              wxT("textit"), 1);
+  AddMacroDef(ltTEXTSL,              wxT("textsl"), 1);
+  AddMacroDef(ltTEXTSC,              wxT("textsc"), 1);
+  AddMacroDef(ltTEXTWIDTH,           wxT("textwidth"), 1);
+  AddMacroDef(ltTEXTHEIGHT,          wxT("textheight"), 1);
+  AddMacroDef(ltTEXTCOLOUR,          wxT("textcolour"), 1);
+  AddMacroDef(ltTEX,                 wxT("TeX"), 0);
+  AddMacroDef(ltTHEBIBLIOGRAPHY,     wxT("thebibliography"), 2);
+  AddMacroDef(ltTHETA,               wxT("theta"), 0);
+  AddMacroDef(ltTIMES,               wxT("times"), 0);
+  AddMacroDef(ltCAP_THETA,           wxT("Theta"), 0);
+  AddMacroDef(ltTITLEPAGE,           wxT("titlepage"), 1);
+  AddMacroDef(ltTITLE,               wxT("title"), 1);
+  AddMacroDef(ltTINY,                wxT("tiny"), 1);
+  AddMacroDef(ltTODAY,               wxT("today"), 0);
+  AddMacroDef(ltTOPMARGIN,           wxT("topmargin"), 1);
+  AddMacroDef(ltTOPSKIP,             wxT("topskip"), 1);
+  AddMacroDef(ltTRIANGLE,            wxT("triangle"), 0);
+  AddMacroDef(ltTTFAMILY,            wxT("ttfamily"), 1);
+  AddMacroDef(ltTT,                  wxT("tt"), 1);
+  AddMacroDef(ltTYPEIN,              wxT("typein"), 1);
+  AddMacroDef(ltTYPEOUT,             wxT("typeout"), 1);
+  AddMacroDef(ltTWOCOLWIDTHA,        wxT("twocolwidtha"), 1);
+  AddMacroDef(ltTWOCOLWIDTHB,        wxT("twocolwidthb"), 1);
+  AddMacroDef(ltTWOCOLSPACING,       wxT("twocolspacing"), 1);
+  AddMacroDef(ltTWOCOLITEMRULED,     wxT("twocolitemruled"), 2);
+  AddMacroDef(ltTWOCOLITEM,          wxT("twocolitem"), 2);
+  AddMacroDef(ltTWOCOLLIST,          wxT("twocollist"), 1);
+  AddMacroDef(ltTWOCOLUMN,           wxT("twocolumn"), 0);
+  AddMacroDef(ltTHEPAGE,             wxT("thepage"), 0);
+  AddMacroDef(ltTHECHAPTER,          wxT("thechapter"), 0);
+  AddMacroDef(ltTHESECTION,          wxT("thesection"), 0);
+  AddMacroDef(ltTHISPAGESTYLE,       wxT("thispagestyle"), 1);
+
+  AddMacroDef(ltUNDERLINE,           wxT("underline"), 1);
+  AddMacroDef(ltUPSILON,             wxT("upsilon"), 0);
+  AddMacroDef(ltCAP_UPSILON,         wxT("Upsilon"), 0);
+  AddMacroDef(ltUPARROW,             wxT("uparrow"), 0);
+  AddMacroDef(ltUPARROW2,            wxT("Uparrow"), 0);
+  AddMacroDef(ltUPPERCASE,           wxT("uppercase"), 1);
+  AddMacroDef(ltUPSHAPE,             wxT("upshape"), 1);
+  AddMacroDef(ltURLREF,              wxT("urlref"), 2);
+  AddMacroDef(ltUSEPACKAGE,          wxT("usepackage"), 1);
+
+  AddMacroDef(ltVAREPSILON,          wxT("varepsilon"), 0);
+  AddMacroDef(ltVARPHI,              wxT("varphi"), 0);
+  AddMacroDef(ltVARPI,               wxT("varpi"), 0);
+  AddMacroDef(ltVARRHO,              wxT("varrho"), 0);
+  AddMacroDef(ltVARSIGMA,            wxT("varsigma"), 0);
+  AddMacroDef(ltVARTHETA,            wxT("vartheta"), 0);
+  AddMacroDef(ltVDOTS,               wxT("vdots"), 0);
+  AddMacroDef(ltVEE,                 wxT("vee"), 0);
+  AddMacroDef(ltVERBATIMINPUT,       wxT("verbatiminput"), 1);
+  AddMacroDef(ltVERBATIM,            wxT("verbatim"), 1);
+  AddMacroDef(ltVERBSTAR,            wxT("verb*"), 1);
+  AddMacroDef(ltVERB,                wxT("verb"), 1);
+  AddMacroDef(ltVERSE,               wxT("verse"), 1);
+  AddMacroDef(ltVFILL,               wxT("vfill"), 0);
+  AddMacroDef(ltVLINE,               wxT("vline"), 0);
+  AddMacroDef(ltVOID,                wxT("void"), 0);
+  AddMacroDef(ltVDASH,               wxT("vdash"), 0);
+  AddMacroDef(ltVRULE,               wxT("vrule"), 0);
+  AddMacroDef(ltVSPACESTAR,          wxT("vspace*"), 1);
+  AddMacroDef(ltVSKIPSTAR,           wxT("vskip*"), 1);
+  AddMacroDef(ltVSPACE,              wxT("vspace"), 1);
+  AddMacroDef(ltVSKIP,               wxT("vskip"), 1);
+
+  AddMacroDef(ltWEDGE,               wxT("wedge"), 0);
+  AddMacroDef(ltWXCLIPS,             wxT("wxclips"), 0);
+  AddMacroDef(ltWINHELPIGNORE,       wxT("winhelpignore"), 1);
+  AddMacroDef(ltWINHELPONLY,         wxT("winhelponly"), 1);
+  AddMacroDef(ltWP,                  wxT("wp"), 0);
+
+  AddMacroDef(ltXI,                  wxT("xi"), 0);
+  AddMacroDef(ltCAP_XI,              wxT("Xi"), 0);
+  AddMacroDef(ltXLPIGNORE,           wxT("xlpignore"), 1);
+  AddMacroDef(ltXLPONLY,             wxT("xlponly"), 1);
+
+  AddMacroDef(ltZETA,                wxT("zeta"), 0);
+
+  AddMacroDef(ltSPACE,               wxT(" "), 0);
+  AddMacroDef(ltBACKSLASHCHAR,       wxT("\\"), 0);
+  AddMacroDef(ltPIPE,                wxT("|"), 0);
+  AddMacroDef(ltFORWARDSLASH,        wxT("/"), 0);
+  AddMacroDef(ltUNDERSCORE,          wxT("_"), 0);
+  AddMacroDef(ltAMPERSAND,           wxT("&"), 0);
+  AddMacroDef(ltPERCENT,             wxT("%"), 0);
+  AddMacroDef(ltDOLLAR,              wxT("$"), 0);
+  AddMacroDef(ltHASH,                wxT("#"), 0);
+  AddMacroDef(ltLPARENTH,            wxT("("), 0);
+  AddMacroDef(ltRPARENTH,            wxT(")"), 0);
+  AddMacroDef(ltLBRACE,              wxT("{"), 0);
+  AddMacroDef(ltRBRACE,              wxT("}"), 0);
+//  AddMacroDef(ltEQUALS,              wxT("="), 0);
+  AddMacroDef(ltRANGLEBRA,           wxT(">"), 0);
+  AddMacroDef(ltLANGLEBRA,           wxT("<"), 0);
+  AddMacroDef(ltPLUS,                wxT("+"), 0);
+  AddMacroDef(ltDASH,                wxT("-"), 0);
+  AddMacroDef(ltAT_SYMBOL,           wxT("@"), 0);
+//  AddMacroDef(ltSINGLEQUOTE,         wxT("'"), 0);
+//  AddMacroDef(ltBACKQUOTE,           wxT("`"), 0);
 }
 
 /*
@@ -2623,111 +2623,111 @@ void DefaultOnMacro(int macroId, int no_
     }
     case ltSPECIALAMPERSAND:
       if (start)
-        TexOutput(_T("  "));
+        TexOutput(wxT("  "));
       break;
 
     case ltCINSERT:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;&lt;"));
+            TexOutput(wxT("&lt;&lt;"));
         else
-            TexOutput(_T("<<"), true);
+            TexOutput(wxT("<<"), true);
       }
       break;
     case ltCEXTRACT:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&gt;&gt;"));
+            TexOutput(wxT("&gt;&gt;"));
         else
-            TexOutput(_T(">>"), true);
+            TexOutput(wxT(">>"), true);
       }
       break;
     case ltDESTRUCT:
       if (start)
-        TexOutput(_T("~"), true);
+        TexOutput(wxT("~"), true);
       break;
     case ltTILDE:
       if (start)
-        TexOutput(_T("~"), true);
+        TexOutput(wxT("~"), true);
       break;
     case ltSPECIALTILDE:
       if (start)
-        TexOutput(_T(" "), true);
+        TexOutput(wxT(" "), true);
       break;
     case ltUNDERSCORE:
       if (start)
-        TexOutput(_T("_"), true);
+        TexOutput(wxT("_"), true);
       break;
     case ltHASH:
       if (start)
-        TexOutput(_T("#"), true);
+        TexOutput(wxT("#"), true);
       break;
     case ltAMPERSAND:
       if (start)
-        TexOutput(_T("&"), true);
+        TexOutput(wxT("&"), true);
       break;
     case ltSPACE:
       if (start)
-        TexOutput(_T(" "), true);
+        TexOutput(wxT(" "), true);
       break;
     case ltPIPE:
       if (start)
-        TexOutput(_T("|"), true);
+        TexOutput(wxT("|"), true);
       break;
     case ltPERCENT:
       if (start)
-        TexOutput(_T("%"), true);
+        TexOutput(wxT("%"), true);
       break;
     case ltDOLLAR:
       if (start)
-        TexOutput(_T("$"), true);
+        TexOutput(wxT("$"), true);
       break;
     case ltLPARENTH:
       if (start)
-        TexOutput(_T(""), true);
+        TexOutput(wxT(""), true);
       break;
     case ltRPARENTH:
       if (start)
-        TexOutput(_T(""), true);
+        TexOutput(wxT(""), true);
       break;
     case ltLBRACE:
       if (start)
-        TexOutput(_T("{"), true);
+        TexOutput(wxT("{"), true);
       break;
     case ltRBRACE:
       if (start)
-        TexOutput(_T("}"), true);
+        TexOutput(wxT("}"), true);
       break;
     case ltCOPYRIGHT:
       if (start)
-        TexOutput(_T("(c)"), true);
+        TexOutput(wxT("(c)"), true);
       break;
     case ltREGISTERED:
       if (start)
-        TexOutput(_T("(r)"), true);
+        TexOutput(wxT("(r)"), true);
       break;
     case ltBACKSLASH:
       if (start)
-        TexOutput(_T("\\"), true);
+        TexOutput(wxT("\\"), true);
       break;
     case ltLDOTS:
     case ltCDOTS:
       if (start)
-        TexOutput(_T("..."), true);
+        TexOutput(wxT("..."), true);
       break;
     case ltVDOTS:
       if (start)
-        TexOutput(_T("|"), true);
+        TexOutput(wxT("|"), true);
       break;
     case ltLATEX:
       if (start)
-        TexOutput(_T("LaTeX"), true);
+        TexOutput(wxT("LaTeX"), true);
       break;
     case ltTEX:
       if (start)
-        TexOutput(_T("TeX"), true);
+        TexOutput(wxT("TeX"), true);
       break;
     case ltPOUNDS:
       if (start)
@@ -2766,112 +2766,112 @@ void DefaultOnMacro(int macroId, int no_
 
     // Symbols
     case ltALPHA:
-      if (start) TexOutput(_T("alpha"));
+      if (start) TexOutput(wxT("alpha"));
       break;
     case ltBETA:
-      if (start) TexOutput(_T("beta"));
+      if (start) TexOutput(wxT("beta"));
       break;
     case ltGAMMA:
-      if (start) TexOutput(_T("gamma"));
+      if (start) TexOutput(wxT("gamma"));
       break;
     case ltDELTA:
-      if (start) TexOutput(_T("delta"));
+      if (start) TexOutput(wxT("delta"));
       break;
     case ltEPSILON:
     case ltVAREPSILON:
-      if (start) TexOutput(_T("epsilon"));
+      if (start) TexOutput(wxT("epsilon"));
       break;
     case ltZETA:
-      if (start) TexOutput(_T("zeta"));
+      if (start) TexOutput(wxT("zeta"));
       break;
     case ltETA:
-      if (start) TexOutput(_T("eta"));
+      if (start) TexOutput(wxT("eta"));
       break;
     case ltTHETA:
     case ltVARTHETA:
-      if (start) TexOutput(_T("theta"));
+      if (start) TexOutput(wxT("theta"));
       break;
     case ltIOTA:
-      if (start) TexOutput(_T("iota"));
+      if (start) TexOutput(wxT("iota"));
       break;
     case ltKAPPA:
-      if (start) TexOutput(_T("kappa"));
+      if (start) TexOutput(wxT("kappa"));
       break;
     case ltLAMBDA:
-      if (start) TexOutput(_T("lambda"));
+      if (start) TexOutput(wxT("lambda"));
       break;
     case ltMU:
-      if (start) TexOutput(_T("mu"));
+      if (start) TexOutput(wxT("mu"));
       break;
     case ltNU:
-      if (start) TexOutput(_T("nu"));
+      if (start) TexOutput(wxT("nu"));
       break;
     case ltXI:
-      if (start) TexOutput(_T("xi"));
+      if (start) TexOutput(wxT("xi"));
       break;
     case ltPI:
     case ltVARPI:
-      if (start) TexOutput(_T("pi"));
+      if (start) TexOutput(wxT("pi"));
       break;
     case ltRHO:
     case ltVARRHO:
-      if (start) TexOutput(_T("rho"));
+      if (start) TexOutput(wxT("rho"));
       break;
     case ltSIGMA:
     case ltVARSIGMA:
-      if (start) TexOutput(_T("sigma"));
+      if (start) TexOutput(wxT("sigma"));
       break;
     case ltTAU:
-      if (start) TexOutput(_T("tau"));
+      if (start) TexOutput(wxT("tau"));
       break;
     case ltUPSILON:
-      if (start) TexOutput(_T("upsilon"));
+      if (start) TexOutput(wxT("upsilon"));
       break;
     case ltPHI:
     case ltVARPHI:
-      if (start) TexOutput(_T("phi"));
+      if (start) TexOutput(wxT("phi"));
       break;
     case ltCHI:
-      if (start) TexOutput(_T("chi"));
+      if (start) TexOutput(wxT("chi"));
       break;
     case ltPSI:
-      if (start) TexOutput(_T("psi"));
+      if (start) TexOutput(wxT("psi"));
       break;
     case ltOMEGA:
-      if (start) TexOutput(_T("omega"));
+      if (start) TexOutput(wxT("omega"));
       break;
     case ltCAP_GAMMA:
-      if (start) TexOutput(_T("GAMMA"));
+      if (start) TexOutput(wxT("GAMMA"));
       break;
     case ltCAP_DELTA:
-      if (start) TexOutput(_T("DELTA"));
+      if (start) TexOutput(wxT("DELTA"));
       break;
     case ltCAP_THETA:
-      if (start) TexOutput(_T("THETA"));
+      if (start) TexOutput(wxT("THETA"));
       break;
     case ltCAP_LAMBDA:
-      if (start) TexOutput(_T("LAMBDA"));
+      if (start) TexOutput(wxT("LAMBDA"));
       break;
     case ltCAP_XI:
-      if (start) TexOutput(_T("XI"));
+      if (start) TexOutput(wxT("XI"));
       break;
     case ltCAP_PI:
-      if (start) TexOutput(_T("PI"));
+      if (start) TexOutput(wxT("PI"));
       break;
     case ltCAP_SIGMA:
-      if (start) TexOutput(_T("SIGMA"));
+      if (start) TexOutput(wxT("SIGMA"));
       break;
     case ltCAP_UPSILON:
-      if (start) TexOutput(_T("UPSILON"));
+      if (start) TexOutput(wxT("UPSILON"));
       break;
     case ltCAP_PHI:
-      if (start) TexOutput(_T("PHI"));
+      if (start) TexOutput(wxT("PHI"));
       break;
     case ltCAP_PSI:
-      if (start) TexOutput(_T("PSI"));
+      if (start) TexOutput(wxT("PSI"));
       break;
     case ltCAP_OMEGA:
-      if (start) TexOutput(_T("OMEGA"));
+      if (start) TexOutput(wxT("OMEGA"));
       break;
 
     // Binary operation symbols
@@ -2880,34 +2880,34 @@ void DefaultOnMacro(int macroId, int no_
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;="));
+            TexOutput(wxT("&lt;="));
         else
-            TexOutput(_T("<="));
+            TexOutput(wxT("<="));
       }
       break;
     case ltLL:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;&lt;"));
+            TexOutput(wxT("&lt;&lt;"));
         else
-            TexOutput(_T("<<"));
+            TexOutput(wxT("<<"));
       }
       break;
     case ltSUBSET:
-      if (start) TexOutput(_T("SUBSET"));
+      if (start) TexOutput(wxT("SUBSET"));
       break;
     case ltSUBSETEQ:
-      if (start) TexOutput(_T("SUBSETEQ"));
+      if (start) TexOutput(wxT("SUBSETEQ"));
       break;
     case ltIN:
-      if (start) TexOutput(_T("IN"));
+      if (start) TexOutput(wxT("IN"));
       break;
     case ltVDASH:
-      if (start) TexOutput(_T("VDASH"));
+      if (start) TexOutput(wxT("VDASH"));
       break;
     case ltMODELS:
-      if (start) TexOutput(_T("MODELS"));
+      if (start) TexOutput(wxT("MODELS"));
       break;
     case ltGE:
     case ltGEQ:
@@ -2915,9 +2915,9 @@ void DefaultOnMacro(int macroId, int no_
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&gt;="));
+            TexOutput(wxT("&gt;="));
         else
-            TexOutput(_T(">="));
+            TexOutput(wxT(">="));
       }
       break;
     }
@@ -2925,87 +2925,87 @@ void DefaultOnMacro(int macroId, int no_
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&gt;&gt;"));
+            TexOutput(wxT("&gt;&gt;"));
         else
-            TexOutput(_T(">>"));
+            TexOutput(wxT(">>"));
       }
       break;
     case ltSUPSET:
-      if (start) TexOutput(_T("SUPSET"));
+      if (start) TexOutput(wxT("SUPSET"));
       break;
     case ltSUPSETEQ:
-      if (start) TexOutput(_T("SUPSETEQ"));
+      if (start) TexOutput(wxT("SUPSETEQ"));
       break;
     case ltNI:
-      if (start) TexOutput(_T("NI"));
+      if (start) TexOutput(wxT("NI"));
       break;
     case ltDASHV:
-      if (start) TexOutput(_T("DASHV"));
+      if (start) TexOutput(wxT("DASHV"));
       break;
     case ltPERP:
-      if (start) TexOutput(_T("PERP"));
+      if (start) TexOutput(wxT("PERP"));
       break;
     case ltNEQ:
-      if (start) TexOutput(_T("NEQ"));
+      if (start) TexOutput(wxT("NEQ"));
       break;
     case ltDOTEQ:
-      if (start) TexOutput(_T("DOTEQ"));
+      if (start) TexOutput(wxT("DOTEQ"));
       break;
     case ltAPPROX:
-      if (start) TexOutput(_T("APPROX"));
+      if (start) TexOutput(wxT("APPROX"));
       break;
     case ltCONG:
-      if (start) TexOutput(_T("CONG"));
+      if (start) TexOutput(wxT("CONG"));
       break;
     case ltEQUIV:
-      if (start) TexOutput(_T("EQUIV"));
+      if (start) TexOutput(wxT("EQUIV"));
       break;
     case ltPROPTO:
-      if (start) TexOutput(_T("PROPTO"));
+      if (start) TexOutput(wxT("PROPTO"));
       break;
     case ltPREC:
-      if (start) TexOutput(_T("PREC"));
+      if (start) TexOutput(wxT("PREC"));
       break;
     case ltPRECEQ:
-      if (start) TexOutput(_T("PRECEQ"));
+      if (start) TexOutput(wxT("PRECEQ"));
       break;
     case ltPARALLEL:
-      if (start) TexOutput(_T("|"));
+      if (start) TexOutput(wxT("|"));
       break;
     case ltSIM:
-      if (start) TexOutput(_T("~"));
+      if (start) TexOutput(wxT("~"));
       break;
     case ltSIMEQ:
-      if (start) TexOutput(_T("SIMEQ"));
+      if (start) TexOutput(wxT("SIMEQ"));
       break;
     case ltASYMP:
-      if (start) TexOutput(_T("ASYMP"));
+      if (start) TexOutput(wxT("ASYMP"));
       break;
     case ltSMILE:
-      if (start) TexOutput(_T(":-)"));
+      if (start) TexOutput(wxT(":-)"));
       break;
     case ltFROWN:
-      if (start) TexOutput(_T(":-("));
+      if (start) TexOutput(wxT(":-("));
       break;
     case ltSUCC:
-      if (start) TexOutput(_T("SUCC"));
+      if (start) TexOutput(wxT("SUCC"));
       break;
     case ltSUCCEQ:
-      if (start) TexOutput(_T("SUCCEQ"));
+      if (start) TexOutput(wxT("SUCCEQ"));
       break;
     case ltMID:
-      if (start) TexOutput(_T("|"));
+      if (start) TexOutput(wxT("|"));
       break;
 
     // Negated relation symbols
     case ltNOTEQ:
-      if (start) TexOutput(_T("!="));
+      if (start) TexOutput(wxT("!="));
       break;
     case ltNOTIN:
-      if (start) TexOutput(_T("NOTIN"));
+      if (start) TexOutput(wxT("NOTIN"));
       break;
     case ltNOTSUBSET:
-      if (start) TexOutput(_T("NOTSUBSET"));
+      if (start) TexOutput(wxT("NOTSUBSET"));
       break;
 
     // Arrows
@@ -3013,204 +3013,204 @@ void DefaultOnMacro(int macroId, int no_
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;--"));
+            TexOutput(wxT("&lt;--"));
         else
-            TexOutput(_T("<--"));
+            TexOutput(wxT("<--"));
       }
       break;
     case ltLEFTARROW2:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;=="));
+            TexOutput(wxT("&lt;=="));
         else
-            TexOutput(_T("<=="));
+            TexOutput(wxT("<=="));
       }
       break;
     case ltRIGHTARROW:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("--&gt;"));
+            TexOutput(wxT("--&gt;"));
         else
-            TexOutput(_T("-->"));
+            TexOutput(wxT("-->"));
       }
       break;
     case ltRIGHTARROW2:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("==&gt;"));
+            TexOutput(wxT("==&gt;"));
         else
-            TexOutput(_T("==>"));
+            TexOutput(wxT("==>"));
       }
       break;
     case ltLEFTRIGHTARROW:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;--&gt;"));
+            TexOutput(wxT("&lt;--&gt;"));
         else
-            TexOutput(_T("<-->"));
+            TexOutput(wxT("<-->"));
       }
       break;
     case ltLEFTRIGHTARROW2:
       if (start)
       {
         if (convertMode == TEX_HTML)
-            TexOutput(_T("&lt;==&gt;"));
+            TexOutput(wxT("&lt;==&gt;"));
         else
-            TexOutput(_T("<==>"));
+            TexOutput(wxT("<==>"));
       }
       break;
     case ltUPARROW:
-      if (start) TexOutput(_T("UPARROW"));
+      if (start) TexOutput(wxT("UPARROW"));
       break;
     case ltUPARROW2:
-      if (start) TexOutput(_T("UPARROW2"));
+      if (start) TexOutput(wxT("UPARROW2"));
       break;
     case ltDOWNARROW:
-      if (start) TexOutput(_T("DOWNARROW"));
+      if (start) TexOutput(wxT("DOWNARROW"));
       break;
     case ltDOWNARROW2:
-      if (start) TexOutput(_T("DOWNARROW2"));
+      if (start) TexOutput(wxT("DOWNARROW2"));
       break;
     // Miscellaneous symbols
     case ltALEPH:
-      if (start) TexOutput(_T("ALEPH"));
+      if (start) TexOutput(wxT("ALEPH"));
       break;
     case ltWP:
-      if (start) TexOutput(_T("WP"));
+      if (start) TexOutput(wxT("WP"));
       break;
     case ltRE:
-      if (start) TexOutput(_T("RE"));
+      if (start) TexOutput(wxT("RE"));
       break;
     case ltIM:
-      if (start) TexOutput(_T("IM"));
+      if (start) TexOutput(wxT("IM"));
       break;
     case ltEMPTYSET:
-      if (start) TexOutput(_T("EMPTYSET"));
+      if (start) TexOutput(wxT("EMPTYSET"));
       break;
     case ltNABLA:
-      if (start) TexOutput(_T("NABLA"));
+      if (start) TexOutput(wxT("NABLA"));
       break;
     case ltSURD:
-      if (start) TexOutput(_T("SURD"));
+      if (start) TexOutput(wxT("SURD"));
       break;
     case ltPARTIAL:
-      if (start) TexOutput(_T("PARTIAL"));
+      if (start) TexOutput(wxT("PARTIAL"));
       break;
     case ltBOT:
-      if (start) TexOutput(_T("BOT"));
+      if (start) TexOutput(wxT("BOT"));
       break;
     case ltFORALL:
-      if (start) TexOutput(_T("FORALL"));
+      if (start) TexOutput(wxT("FORALL"));
       break;
     case ltEXISTS:
-      if (start) TexOutput(_T("EXISTS"));
+      if (start) TexOutput(wxT("EXISTS"));
       break;
     case ltNEG:
-      if (start) TexOutput(_T("NEG"));
+      if (start) TexOutput(wxT("NEG"));
       break;
     case ltSHARP:
-      if (start) TexOutput(_T("SHARP"));
+      if (start) TexOutput(wxT("SHARP"));
       break;
     case ltANGLE:
-      if (start) TexOutput(_T("ANGLE"));
+      if (start) TexOutput(wxT("ANGLE"));
       break;
     case ltTRIANGLE:
-      if (start) TexOutput(_T("TRIANGLE"));
+      if (start) TexOutput(wxT("TRIANGLE"));
       break;
     case ltCLUBSUIT:
-      if (start) TexOutput(_T("CLUBSUIT"));
+      if (start) TexOutput(wxT("CLUBSUIT"));
       break;
     case ltDIAMONDSUIT:
-      if (start) TexOutput(_T("DIAMONDSUIT"));
+      if (start) TexOutput(wxT("DIAMONDSUIT"));
       break;
     case ltHEARTSUIT:
-      if (start) TexOutput(_T("HEARTSUIT"));
+      if (start) TexOutput(wxT("HEARTSUIT"));
       break;
     case ltSPADESUIT:
-      if (start) TexOutput(_T("SPADESUIT"));
+      if (start) TexOutput(wxT("SPADESUIT"));
       break;
     case ltINFTY:
-      if (start) TexOutput(_T("INFTY"));
+      if (start) TexOutput(wxT("INFTY"));
       break;
     case ltPM:
-      if (start) TexOutput(_T("PM"));
+      if (start) TexOutput(wxT("PM"));
       break;
     case ltMP:
-      if (start) TexOutput(_T("MP"));
+      if (start) TexOutput(wxT("MP"));
       break;
     case ltTIMES:
-      if (start) TexOutput(_T("TIMES"));
+      if (start) TexOutput(wxT("TIMES"));
       break;
     case ltDIV:
-      if (start) TexOutput(_T("DIV"));
+      if (start) TexOutput(wxT("DIV"));
       break;
     case ltCDOT:
-      if (start) TexOutput(_T("CDOT"));
+      if (start) TexOutput(wxT("CDOT"));
       break;
     case ltAST:
-      if (start) TexOutput(_T("AST"));
+      if (start) TexOutput(wxT("AST"));
       break;
     case ltSTAR:
-      if (start) TexOutput(_T("STAR"));
+      if (start) TexOutput(wxT("STAR"));
       break;
     case ltCAP:
-      if (start) TexOutput(_T("CAP"));
+      if (start) TexOutput(wxT("CAP"));
       break;
     case ltCUP:
-      if (start) TexOutput(_T("CUP"));
+      if (start) TexOutput(wxT("CUP"));
       break;
     case ltVEE:
-      if (start) TexOutput(_T("VEE"));
+      if (start) TexOutput(wxT("VEE"));
       break;
     case ltWEDGE:
-      if (start) TexOutput(_T("WEDGE"));
+      if (start) TexOutput(wxT("WEDGE"));
       break;
     case ltCIRC:
-      if (start) TexOutput(_T("CIRC"));
+      if (start) TexOutput(wxT("CIRC"));
       break;
     case ltBULLET:
-      if (start) TexOutput(_T("BULLET"));
+      if (start) TexOutput(wxT("BULLET"));
       break;
     case ltDIAMOND:
-      if (start) TexOutput(_T("DIAMOND"));
+      if (start) TexOutput(wxT("DIAMOND"));
       break;
     case ltOSLASH:
-      if (start) TexOutput(_T("OSLASH"));
+      if (start) TexOutput(wxT("OSLASH"));
       break;
     case ltBOX:
-      if (start) TexOutput(_T("BOX"));
+      if (start) TexOutput(wxT("BOX"));
       break;
     case ltDIAMOND2:
-      if (start) TexOutput(_T("DIAMOND2"));
+      if (start) TexOutput(wxT("DIAMOND2"));
       break;
     case ltBIGTRIANGLEDOWN:
-      if (start) TexOutput(_T("BIGTRIANGLEDOWN"));
+      if (start) TexOutput(wxT("BIGTRIANGLEDOWN"));
       break;
     case ltOPLUS:
-      if (start) TexOutput(_T("OPLUS"));
+      if (start) TexOutput(wxT("OPLUS"));
       break;
     case ltOTIMES:
-      if (start) TexOutput(_T("OTIMES"));
+      if (start) TexOutput(wxT("OTIMES"));
       break;
     case ltSS:
-      if (start) TexOutput(_T("s"));
+      if (start) TexOutput(wxT("s"));
       break;
     case ltBACKSLASHRAW:
-      if (start) TexOutput(_T("\\"));
+      if (start) TexOutput(wxT("\\"));
       break;
     case ltLBRACERAW:
-      if (start) TexOutput(_T("{"));
+      if (start) TexOutput(wxT("{"));
       break;
     case ltRBRACERAW:
-      if (start) TexOutput(_T("}"));
+      if (start) TexOutput(wxT("}"));
       break;
     case ltSMALLSPACE1:
     case ltSMALLSPACE2:
-      if (start) TexOutput(_T(" "));
+      if (start) TexOutput(wxT(" "));
       break;
     default:
       break;
@@ -3238,7 +3238,7 @@ bool DefaultOnArgument(int macroId, int 
           wxStrcpy(buf, texRef->sectionNumber);
           int len = wxStrlen(buf);
           int i = 0;
-          if (wxStrcmp(buf, _T("??")) != 0)
+          if (wxStrcmp(buf, wxT("??")) != 0)
           {
             while (i < len)
             {
@@ -3255,11 +3255,11 @@ bool DefaultOnArgument(int macroId, int 
         else
         {
            wxString informBuf;
-           informBuf.Printf(_T("Warning: unresolved reference '%s'"), refName);
+           informBuf.Printf(wxT("Warning: unresolved reference '%s'"), refName);
            OnInform((wxChar *)informBuf.c_str());
         }
       }
-      else TexOutput(_T("??"), true);
+      else TexOutput(wxT("??"), true);
       return false;
     }
     break;
@@ -3292,27 +3292,27 @@ bool DefaultOnArgument(int macroId, int 
     if (start && !IsArgOptional())
     {
       DocumentStyleString = copystring(GetArgData());
-      if (wxStrncmp(DocumentStyleString, _T("art"), 3) == 0)
+      if (wxStrncmp(DocumentStyleString, wxT("art"), 3) == 0)
         DocumentStyle = LATEX_ARTICLE;
-      else if (wxStrncmp(DocumentStyleString, _T("rep"), 3) == 0)
+      else if (wxStrncmp(DocumentStyleString, wxT("rep"), 3) == 0)
         DocumentStyle = LATEX_REPORT;
-      else if (wxStrncmp(DocumentStyleString, _T("book"), 4) == 0 ||
-               wxStrncmp(DocumentStyleString, _T("thesis"), 6) == 0)
+      else if (wxStrncmp(DocumentStyleString, wxT("book"), 4) == 0 ||
+               wxStrncmp(DocumentStyleString, wxT("thesis"), 6) == 0)
         DocumentStyle = LATEX_BOOK;
-      else if (wxStrncmp(DocumentStyleString, _T("letter"), 6) == 0)
+      else if (wxStrncmp(DocumentStyleString, wxT("letter"), 6) == 0)
         DocumentStyle = LATEX_LETTER;
-      else if (wxStrncmp(DocumentStyleString, _T("slides"), 6) == 0)
+      else if (wxStrncmp(DocumentStyleString, wxT("slides"), 6) == 0)
         DocumentStyle = LATEX_SLIDES;
 
-      if (StringMatch(_T("10"), DocumentStyleString))
+      if (StringMatch(wxT("10"), DocumentStyleString))
         SetFontSizes(10);
-      else if (StringMatch(_T("11"), DocumentStyleString))
+      else if (StringMatch(wxT("11"), DocumentStyleString))
         SetFontSizes(11);
-      else if (StringMatch(_T("12"), DocumentStyleString))
+      else if (StringMatch(wxT("12"), DocumentStyleString))
         SetFontSizes(12);
 
       OnMacro(ltHELPFONTSIZE, 1, true);
-      wxSnprintf(currentArgData, 2000, _T("%d"), normalFont);
+      wxSnprintf(currentArgData, 2000, wxT("%d"), normalFont);
       haveArgData = true;
       OnArgument(ltHELPFONTSIZE, 1, true);
       OnArgument(ltHELPFONTSIZE, 1, false);
@@ -3323,11 +3323,11 @@ bool DefaultOnArgument(int macroId, int 
     {
       MinorDocumentStyleString = copystring(GetArgData());
 
-      if (StringMatch(_T("10"), MinorDocumentStyleString))
+      if (StringMatch(wxT("10"), MinorDocumentStyleString))
         SetFontSizes(10);
-      else if (StringMatch(_T("11"), MinorDocumentStyleString))
+      else if (StringMatch(wxT("11"), MinorDocumentStyleString))
         SetFontSizes(11);
-      else if (StringMatch(_T("12"), MinorDocumentStyleString))
+      else if (StringMatch(wxT("12"), MinorDocumentStyleString))
         SetFontSizes(12);
     }
     return false;
@@ -3406,17 +3406,17 @@ bool DefaultOnArgument(int macroId, int 
         if (ref)
         {
           TexOutput(ref->sectionNumber, true);
-          if (wxStrcmp(ref->sectionNumber, _T("??")) == 0)
+          if (wxStrcmp(ref->sectionNumber, wxT("??")) == 0)
           {
             wxString informBuf;
-            informBuf.Printf(_T("Warning: unresolved citation %s."), citeKey);
+            informBuf.Printf(wxT("Warning: unresolved citation %s."), citeKey);
             OnInform((wxChar *)informBuf.c_str());
           }
         }
         citeKey = ParseMultifieldString(citeKeys, &pos);
         if (citeKey)
         {
-          TexOutput(_T(", "), true);
+          TexOutput(wxT(", "), true);
         }
       }
       return false;
@@ -3438,11 +3438,11 @@ bool DefaultOnArgument(int macroId, int 
     if (start)
     {
       wxChar *data = GetArgData();
-      if (wxStrcmp(data, _T("10")) == 0)
+      if (wxStrcmp(data, wxT("10")) == 0)
         SetFontSizes(10);
-      else if (wxStrcmp(data, _T("11")) == 0)
+      else if (wxStrcmp(data, wxT("11")) == 0)
         SetFontSizes(11);
-      else if (wxStrcmp(data, _T("12")) == 0)
+      else if (wxStrcmp(data, wxT("12")) == 0)
         SetFontSizes(12);
       return false;
     }
@@ -3452,7 +3452,7 @@ bool DefaultOnArgument(int macroId, int 
   {
     if (start)
     {
-      TexOutput(_T(" ??"), true);
+      TexOutput(wxT(" ??"), true);
       return false;
     }
     break;
@@ -3501,9 +3501,9 @@ bool DefaultOnArgument(int macroId, int 
   case ltFOOTNOTE:
   {
     if (start)
-      TexOutput(_T(" ("), true);
+      TexOutput(wxT(" ("), true);
     else
-      TexOutput(_T(")"), true);
+      TexOutput(wxT(")"), true);
     break;
   }
   case ltBIBLIOGRAPHY:
@@ -3513,7 +3513,7 @@ bool DefaultOnArgument(int macroId, int 
       int ch;
       wxChar smallBuf[2];
       smallBuf[1] = 0;
-      FILE *fd = wxFopen(TexBibName, _T("r"));
+      FILE *fd = wxFopen(TexBibName, wxT("r"));
       if (fd)
       {
         ch = getc(fd);
@@ -3528,7 +3528,7 @@ bool DefaultOnArgument(int macroId, int 
       }
       else
       {
-        OnInform(_T("Run Tex2RTF again to include bibliography."));
+        OnInform(wxT("Run Tex2RTF again to include bibliography."));
       }
 
       // Read in the .bib file, resolve all known references, write out the RTF.
@@ -3542,7 +3542,7 @@ bool DefaultOnArgument(int macroId, int 
         wxString actualFile = TexPathList.FindValidPath(fileBuf);
         if (actualFile.empty())
         {
-          wxStrcat(fileBuf, _T(".bib"));
+          wxStrcat(fileBuf, wxT(".bib"));
           actualFile = TexPathList.FindValidPath(fileBuf);
         }
         if (!actualFile.empty())
@@ -3550,14 +3550,14 @@ bool DefaultOnArgument(int macroId, int 
           if (!ReadBib((wxChar*) (const wxChar*) actualFile))
           {
             wxString errBuf;
-            errBuf.Printf(_T(".bib file %s not found or malformed"), (const wxChar*) actualFile);
+            errBuf.Printf(wxT(".bib file %s not found or malformed"), (const wxChar*) actualFile);
             OnError((wxChar *)errBuf.c_str());
           }
         }
         else
         {
           wxString errBuf;
-          errBuf.Printf(_T(".bib file %s not found"), fileBuf);
+          errBuf.Printf(wxT(".bib file %s not found"), fileBuf);
           OnError((wxChar *)errBuf.c_str());
         }
         bibFile = ParseMultifieldString(allFiles, &pos);
@@ -3568,7 +3568,7 @@ bool DefaultOnArgument(int macroId, int 
       // Write it a new bib section in the appropriate format.
       FILE *save1 = CurrentOutput1;
       FILE *save2 = CurrentOutput2;
-      FILE *Biblio = wxFopen(TexTmpBibName, _T("w"));
+      FILE *Biblio = wxFopen(TexTmpBibName, wxT("w"));
       SetCurrentOutput(Biblio);
       OutputBib();
       fclose(Biblio);
--- utils/tex2rtf/src/tex2rtf.cpp-orig	2009-06-18 17:50:15.611715000 -0500
+++ utils/tex2rtf/src/tex2rtf.cpp	2009-06-18 17:50:22.802639000 -0500
@@ -114,7 +114,7 @@ FILE *WinHelpContentsFile = NULL;
 
 wxString InputFile;
 wxString OutputFile;
-wxChar *MacroFile = copystring(_T("tex2rtf.ini"));
+wxChar *MacroFile = copystring(wxT("tex2rtf.ini"));
 
 wxChar *FileRoot = NULL;
 wxChar *ContentsName = NULL;    // Contents page from last time around
@@ -123,7 +123,7 @@ wxChar *TmpFrameContentsName = NULL; // 
 wxChar *WinHelpContentsFileName = NULL; // WinHelp .cnt file
 wxChar *RefFileName = NULL;         // Reference file name
 
-wxChar *RTFCharset = copystring(_T("ansi"));
+wxChar *RTFCharset = copystring(wxT("ansi"));
 
 #ifdef __WXMSW__
 int BufSize = 100;             // Size of buffer in K
@@ -151,7 +151,7 @@ bool MyApp::OnInit()
 {
   // Use default list of macros defined in tex2any.cc
   DefineDefaultMacros();
-  AddMacroDef(ltHARDY, _T("hardy"), 0);
+  AddMacroDef(ltHARDY, wxT("hardy"), 0);
 
   FileRoot = new wxChar[300];
   ContentsName = new wxChar[300];
@@ -167,14 +167,14 @@ bool MyApp::OnInit()
   // Read input/output files
   if (argc > 1)
   {
-      if (argv[1][0] != _T('-'))
+      if (argv[1][0] != wxT('-'))
       {
           InputFile = argv[1];
           n ++;
 
           if (argc > 2)
           {
-              if (argv[2][0] != _T('-'))
+              if (argv[2][0] != wxT('-'))
               {
                   OutputFile = argv[2];
                   n ++;
@@ -188,45 +188,45 @@ bool MyApp::OnInit()
   int i;
   for (i = n; i < argc;)
   {
-    if (wxStrcmp(argv[i], _T("-winhelp")) == 0)
+    if (wxStrcmp(argv[i], wxT("-winhelp")) == 0)
     {
       i ++;
       convertMode = TEX_RTF;
       winHelp = true;
     }
 #ifndef NO_GUI
-    else if (wxStrcmp(argv[i], _T("-interactive")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-interactive")) == 0)
     {
       i ++;
       isInteractive = true;
     }
 #endif
-    else if (wxStrcmp(argv[i], _T("-sync")) == 0)  // Don't yield
+    else if (wxStrcmp(argv[i], wxT("-sync")) == 0)  // Don't yield
     {
       i ++;
       isSync = true;
     }
-    else if (wxStrcmp(argv[i], _T("-rtf")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-rtf")) == 0)
     {
       i ++;
       convertMode = TEX_RTF;
     }
-    else if (wxStrcmp(argv[i], _T("-html")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-html")) == 0)
     {
       i ++;
       convertMode = TEX_HTML;
     }
-    else if (wxStrcmp(argv[i], _T("-xlp")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-xlp")) == 0)
     {
       i ++;
       convertMode = TEX_XLP;
     }
-    else if (wxStrcmp(argv[i], _T("-twice")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-twice")) == 0)
     {
       i ++;
       runTwice = true;
     }
-    else if (wxStrcmp(argv[i], _T("-macros")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-macros")) == 0)
     {
       i ++;
       if (i < argc)
@@ -235,7 +235,7 @@ bool MyApp::OnInit()
         i ++;
       }
     }
-    else if (wxStrcmp(argv[i], _T("-bufsize")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-bufsize")) == 0)
     {
       i ++;
       if (i < argc)
@@ -244,41 +244,41 @@ bool MyApp::OnInit()
         i ++;
       }
     }
-    else if (wxStrcmp(argv[i], _T("-charset")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-charset")) == 0)
     {
       i ++;
       if (i < argc)
       {
         wxChar *s = argv[i];
         i ++;
-        if (wxStrcmp(s, _T("ansi")) == 0 || wxStrcmp(s, _T("pc")) == 0 || wxStrcmp(s, _T("mac")) == 0 ||
-            wxStrcmp(s, _T("pca")) == 0)
+        if (wxStrcmp(s, wxT("ansi")) == 0 || wxStrcmp(s, wxT("pc")) == 0 || wxStrcmp(s, wxT("mac")) == 0 ||
+            wxStrcmp(s, wxT("pca")) == 0)
           RTFCharset = copystring(s);
         else
         {
-          OnError(_T("Incorrect argument for -charset"));
+          OnError(wxT("Incorrect argument for -charset"));
           return false;
         }
       }
     }
-    else if (wxStrcmp(argv[i], _T("-checkcurlybraces")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-checkcurlybraces")) == 0)
     {
       i ++;
       checkCurlyBraces = true;
     }
-    else if (wxStrcmp(argv[i], _T("-checkcurleybraces")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-checkcurleybraces")) == 0)
     {
       // Support the old, incorrectly spelled version of -checkcurlybraces
       // so that old scripts which run tex2rtf -checkcurleybraces still work.
       i ++;
       checkCurlyBraces = true;
     }
-    else if (wxStrcmp(argv[i], _T("-checksyntax")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-checksyntax")) == 0)
     {
       i ++;
       checkSyntax = true;
     }
-    else if (wxStrcmp(argv[i], _T("-version")) == 0)
+    else if (wxStrcmp(argv[i], wxT("-version")) == 0)
     {
       i ++;
       ShowVersion();
@@ -291,7 +291,7 @@ bool MyApp::OnInit()
     else
     {
       wxString buf;
-      buf.Printf(_T("Invalid switch %s.\n"), argv[i]);
+      buf.Printf(wxT("Invalid switch %s.\n"), argv[i]);
       OnError((wxChar *)buf.c_str());
 #ifdef NO_GUI
       ShowOptions();
@@ -322,7 +322,7 @@ bool MyApp::OnInit()
   wxDDEInitialize();
   Tex2RTFLastStatus[0] = 0; // DDE connection return value
   TheTex2RTFServer = new Tex2RTFServer;
-  TheTex2RTFServer->Create(_T("TEX2RTF"));
+  TheTex2RTFServer->Create(wxT("TEX2RTF"));
 #endif
 
   TexInitialize(BufSize);
@@ -333,7 +333,7 @@ bool MyApp::OnInit()
   if (isInteractive)
   {
     // Create the main frame window
-    frame = new MyFrame(NULL, wxID_ANY, _T("Tex2RTF"), wxDefaultPosition, wxSize(400, 300));
+    frame = new MyFrame(NULL, wxID_ANY, wxT("Tex2RTF"), wxDefaultPosition, wxSize(400, 300));
 #if wxUSE_STATUSBAR
     frame->CreateStatusBar(2);
 #endif // wxUSE_STATUSBAR
@@ -345,58 +345,58 @@ bool MyApp::OnInit()
     if (!InputFile.empty())
     {
         wxString title;
-        title.Printf( _T("Tex2RTF [%s]"), wxFileNameFromPath(InputFile).c_str());
+        title.Printf( wxT("Tex2RTF [%s]"), wxFileNameFromPath(InputFile).c_str());
         frame->SetTitle(title);
     }
 
     // Make a menubar
     wxMenu *file_menu = new wxMenu;
-    file_menu->Append(TEX_GO, _T("&Go"), _T("Run converter"));
-    file_menu->Append(TEX_SET_INPUT, _T("Set &Input File"), _T("Set the LaTeX input file"));
-    file_menu->Append(TEX_SET_OUTPUT, _T("Set &Output File"), _T("Set the output file"));
+    file_menu->Append(TEX_GO, wxT("&Go"), wxT("Run converter"));
+    file_menu->Append(TEX_SET_INPUT, wxT("Set &Input File"), wxT("Set the LaTeX input file"));
+    file_menu->Append(TEX_SET_OUTPUT, wxT("Set &Output File"), wxT("Set the output file"));
     file_menu->AppendSeparator();
-    file_menu->Append(TEX_VIEW_LATEX, _T("View &LaTeX File"), _T("View the LaTeX input file"));
-    file_menu->Append(TEX_VIEW_OUTPUT, _T("View Output &File"), _T("View output file"));
-    file_menu->Append(TEX_SAVE_FILE, _T("&Save log file"), _T("Save displayed text into file"));
+    file_menu->Append(TEX_VIEW_LATEX, wxT("View &LaTeX File"), wxT("View the LaTeX input file"));
+    file_menu->Append(TEX_VIEW_OUTPUT, wxT("View Output &File"), wxT("View output file"));
+    file_menu->Append(TEX_SAVE_FILE, wxT("&Save log file"), wxT("Save displayed text into file"));
     file_menu->AppendSeparator();
-    file_menu->Append(TEX_QUIT, _T("E&xit"), _T("Exit Tex2RTF"));
+    file_menu->Append(TEX_QUIT, wxT("E&xit"), wxT("Exit Tex2RTF"));
 
     wxMenu *macro_menu = new wxMenu;
 
-    macro_menu->Append(TEX_LOAD_CUSTOM_MACROS, _T("&Load Custom Macros"), _T("Load custom LaTeX macro file"));
-    macro_menu->Append(TEX_VIEW_CUSTOM_MACROS, _T("View &Custom Macros"), _T("View custom LaTeX macros"));
+    macro_menu->Append(TEX_LOAD_CUSTOM_MACROS, wxT("&Load Custom Macros"), wxT("Load custom LaTeX macro file"));
+    macro_menu->Append(TEX_VIEW_CUSTOM_MACROS, wxT("View &Custom Macros"), wxT("View custom LaTeX macros"));
 
     wxMenu *mode_menu = new wxMenu;
 
-    mode_menu->Append(TEX_MODE_RTF, _T("Output linear &RTF"), _T("Wordprocessor-compatible RTF"));
-    mode_menu->Append(TEX_MODE_WINHELP, _T("Output &WinHelp RTF"), _T("WinHelp-compatible RTF"));
-    mode_menu->Append(TEX_MODE_HTML, _T("Output &HTML"), _T("HTML World Wide Web hypertext file"));
-    mode_menu->Append(TEX_MODE_XLP, _T("Output &XLP"), _T("wxHelp hypertext help file"));
+    mode_menu->Append(TEX_MODE_RTF, wxT("Output linear &RTF"), wxT("Wordprocessor-compatible RTF"));
+    mode_menu->Append(TEX_MODE_WINHELP, wxT("Output &WinHelp RTF"), wxT("WinHelp-compatible RTF"));
+    mode_menu->Append(TEX_MODE_HTML, wxT("Output &HTML"), wxT("HTML World Wide Web hypertext file"));
+    mode_menu->Append(TEX_MODE_XLP, wxT("Output &XLP"), wxT("wxHelp hypertext help file"));
 
     wxMenu *options_menu = new wxMenu;
 
-    options_menu->Append(TEX_OPTIONS_CURLY_BRACE, _T("Curly brace matching"), _T("Checks for mismatched curly braces"),true);
-    options_menu->Append(TEX_OPTIONS_SYNTAX_CHECKING, _T("Syntax checking"), _T("Syntax checking for common errors"),true);
+    options_menu->Append(TEX_OPTIONS_CURLY_BRACE, wxT("Curly brace matching"), wxT("Checks for mismatched curly braces"),true);
+    options_menu->Append(TEX_OPTIONS_SYNTAX_CHECKING, wxT("Syntax checking"), wxT("Syntax checking for common errors"),true);
 
     options_menu->Check(TEX_OPTIONS_CURLY_BRACE, checkCurlyBraces);
     options_menu->Check(TEX_OPTIONS_SYNTAX_CHECKING, checkSyntax);
 
     wxMenu *help_menu = new wxMenu;
 
-    help_menu->Append(TEX_HELP, _T("&Help"), _T("Tex2RTF Contents Page"));
-    help_menu->Append(TEX_ABOUT, _T("&About Tex2RTF"), _T("About Tex2RTF"));
+    help_menu->Append(TEX_HELP, wxT("&Help"), wxT("Tex2RTF Contents Page"));
+    help_menu->Append(TEX_ABOUT, wxT("&About Tex2RTF"), wxT("About Tex2RTF"));
 
     menuBar = new wxMenuBar;
-    menuBar->Append(file_menu, _T("&File"));
-    menuBar->Append(macro_menu, _T("&Macros"));
-    menuBar->Append(mode_menu, _T("&Conversion Mode"));
-    menuBar->Append(options_menu, _T("&Options"));
-    menuBar->Append(help_menu, _T("&Help"));
+    menuBar->Append(file_menu, wxT("&File"));
+    menuBar->Append(macro_menu, wxT("&Macros"));
+    menuBar->Append(mode_menu, wxT("&Conversion Mode"));
+    menuBar->Append(options_menu, wxT("&Options"));
+    menuBar->Append(help_menu, wxT("&Help"));
 
     frame->SetMenuBar(menuBar);
     frame->textWindow = new wxTextCtrl(frame, wxID_ANY, wxEmptyString, wxDefaultPosition, wxDefaultSize, wxTE_READONLY|wxTE_MULTILINE);
 
-    (*frame->textWindow) << _T("Welcome to Tex2RTF.\n");
+    (*frame->textWindow) << wxT("Welcome to Tex2RTF.\n");
 //    ShowOptions();
 
 #if wxUSE_HELP
@@ -405,7 +405,7 @@ bool MyApp::OnInit()
 #else
     HelpInstance = new wxHelpController;
 #endif
-    HelpInstance->Initialize(_T("tex2rtf"));
+    HelpInstance->Initialize(wxT("tex2rtf"));
 #endif // wxUSE_HELP
 
     /*
@@ -418,29 +418,29 @@ bool MyApp::OnInit()
         ReadCustomMacros(path);
 
 #if wxUSE_STATUSBAR
-    wxString inStr(_T("In "));
+    wxString inStr(wxT("In "));
     switch (convertMode)
     {
         case TEX_RTF:
             if(winHelp)
-                inStr += _T("WinHelp RTF");
+                inStr += wxT("WinHelp RTF");
             else
-                inStr += _T("linear RTF");
+                inStr += wxT("linear RTF");
             break;
 
         case TEX_HTML:
-            inStr += _T("HTML");
+            inStr += wxT("HTML");
             break;
 
         case TEX_XLP:
-            inStr += _T("XLP");
+            inStr += wxT("XLP");
             break;
 
         default:
-            inStr += _T("unknown");
+            inStr += wxT("unknown");
             break;
     }
-    inStr += _T(" mode.");
+    inStr += wxT(" mode.");
     frame->SetStatusText(inStr, 1);
 #endif // wxUSE_STATUSBAR
 
@@ -610,30 +610,30 @@ int MyApp::OnExit()
 void ShowVersion(void)
 {
     wxChar buf[100];
-    wxSnprintf(buf, sizeof(buf), _T("Tex2RTF version %.2f"), versionNo);
+    wxSnprintf(buf, sizeof(buf), wxT("Tex2RTF version %.2f"), versionNo);
     OnInform(buf);
 }
 
 void ShowOptions(void)
 {
     ShowVersion();
-    OnInform(_T("Usage: tex2rtf [input] [output] [switches]\n"));
-    OnInform(_T("where valid switches are"));
+    OnInform(wxT("Usage: tex2rtf [input] [output] [switches]\n"));
+    OnInform(wxT("where valid switches are"));
 #ifndef NO_GUI
-    OnInform(_T("    -interactive"));
+    OnInform(wxT("    -interactive"));
 #endif
-    OnInform(_T("    -bufsize <size in K>"));
-    OnInform(_T("    -charset <pc | pca | ansi | mac> (default ansi)"));
-    OnInform(_T("    -twice"));
-    OnInform(_T("    -sync"));
-    OnInform(_T("    -checkcurlybraces"));
-    OnInform(_T("    -checksyntax"));
-    OnInform(_T("    -version"));
-    OnInform(_T("    -macros <filename>"));
-    OnInform(_T("    -winhelp"));
-    OnInform(_T("    -rtf"));
-    OnInform(_T("    -html"));
-    OnInform(_T("    -xlp\n"));
+    OnInform(wxT("    -bufsize <size in K>"));
+    OnInform(wxT("    -charset <pc | pca | ansi | mac> (default ansi)"));
+    OnInform(wxT("    -twice"));
+    OnInform(wxT("    -sync"));
+    OnInform(wxT("    -checkcurlybraces"));
+    OnInform(wxT("    -checksyntax"));
+    OnInform(wxT("    -version"));
+    OnInform(wxT("    -macros <filename>"));
+    OnInform(wxT("    -winhelp"));
+    OnInform(wxT("    -rtf"));
+    OnInform(wxT("    -html"));
+    OnInform(wxT("    -xlp\n"));
 }
 
 #ifndef NO_GUI
@@ -699,10 +699,10 @@ void MyFrame::OnGo(wxCommandEvent& WXUNU
       if (stopRunning)
       {
 #if wxUSE_STATUSBAR
-        SetStatusText(_T("Build aborted!"));
+        SetStatusText(wxT("Build aborted!"));
 #endif // wxUSE_STATUSBAR
         wxString errBuf;
-        errBuf.Printf(_T("\nErrors encountered during this pass: %lu\n"), errorCount);
+        errBuf.Printf(wxT("\nErrors encountered during this pass: %lu\n"), errorCount);
         OnInform((wxChar *)errBuf.c_str());
       }
 
@@ -731,13 +731,13 @@ void MyFrame::OnSetOutput(wxCommandEvent
 void MyFrame::OnSaveFile(wxCommandEvent& WXUNUSED(event))
 {
 #if wxUSE_FILEDLG
-    wxString s = wxFileSelector(_T("Save text to file"), wxEmptyString, wxEmptyString, _T("txt"), _T("*.txt"));
+    wxString s = wxFileSelector(wxT("Save text to file"), wxEmptyString, wxEmptyString, wxT("txt"), wxT("*.txt"));
     if (!s.empty())
     {
         textWindow->SaveFile(s);
 #if wxUSE_STATUSBAR
         wxChar buf[350];
-        wxSnprintf(buf, sizeof(buf), _T("Saved text to %s"), (const wxChar*) s.c_str());
+        wxSnprintf(buf, sizeof(buf), wxT("Saved text to %s"), (const wxChar*) s.c_str());
         frame->SetStatusText(buf, 0);
 #endif // wxUSE_STATUSBAR
     }
@@ -752,7 +752,7 @@ void MyFrame::OnViewOutput(wxCommandEven
         textWindow->LoadFile(OutputFile);
         wxChar buf[300];
         wxString str(wxFileNameFromPath(OutputFile));
-        wxSnprintf(buf, sizeof(buf), _T("Tex2RTF [%s]"), (const wxChar*) str.c_str());
+        wxSnprintf(buf, sizeof(buf), wxT("Tex2RTF [%s]"), (const wxChar*) str.c_str());
         frame->SetTitle(buf);
     }
 }
@@ -765,7 +765,7 @@ void MyFrame::OnViewLatex(wxCommandEvent
         textWindow->LoadFile(InputFile);
         wxChar buf[300];
         wxString str(wxFileNameFromPath(OutputFile));
-        wxSnprintf(buf, sizeof(buf), _T("Tex2RTF [%s]"), (const wxChar*) str.c_str());
+        wxSnprintf(buf, sizeof(buf), wxT("Tex2RTF [%s]"), (const wxChar*) str.c_str());
         frame->SetTitle(buf);
     }
 }
@@ -774,7 +774,7 @@ void MyFrame::OnLoadMacros(wxCommandEven
 {
     textWindow->Clear();
 #if wxUSE_FILEDLG
-    wxString s = wxFileSelector(_T("Choose custom macro file"), wxPathOnly(MacroFile), wxFileNameFromPath(MacroFile), _T("ini"), _T("*.ini"));
+    wxString s = wxFileSelector(wxT("Choose custom macro file"), wxPathOnly(MacroFile), wxFileNameFromPath(MacroFile), wxT("ini"), wxT("*.ini"));
     if (!s.empty() && wxFileExists(s))
     {
         MacroFile = copystring(s);
@@ -798,7 +798,7 @@ void MyFrame::OnModeRTF(wxCommandEvent& 
     InputFile = wxEmptyString;
     OutputFile = wxEmptyString;
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("In linear RTF mode."), 1);
+    SetStatusText(wxT("In linear RTF mode."), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -809,7 +809,7 @@ void MyFrame::OnModeWinHelp(wxCommandEve
     InputFile = wxEmptyString;
     OutputFile = wxEmptyString;
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("In WinHelp RTF mode."), 1);
+    SetStatusText(wxT("In WinHelp RTF mode."), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -820,7 +820,7 @@ void MyFrame::OnModeHTML(wxCommandEvent&
     InputFile = wxEmptyString;
     OutputFile = wxEmptyString;
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("In HTML mode."), 1);
+    SetStatusText(wxT("In HTML mode."), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -830,7 +830,7 @@ void MyFrame::OnModeXLP(wxCommandEvent& 
     InputFile = wxEmptyString;
     OutputFile = wxEmptyString;
 #if wxUSE_STATUSBAR
-    SetStatusText(_T("In XLP mode."), 1);
+    SetStatusText(wxT("In XLP mode."), 1);
 #endif // wxUSE_STATUSBAR
 }
 
@@ -840,11 +840,11 @@ void MyFrame::OnOptionsCurlyBrace(wxComm
 #if wxUSE_STATUSBAR
     if (checkCurlyBraces)
     {
-        SetStatusText(_T("Checking curly braces: YES"), 1);
+        SetStatusText(wxT("Checking curly braces: YES"), 1);
     }
     else
     {
-        SetStatusText(_T("Checking curly braces: NO"), 1);
+        SetStatusText(wxT("Checking curly braces: NO"), 1);
     }
 #endif // wxUSE_STATUSBAR
 }
@@ -856,11 +856,11 @@ void MyFrame::OnOptionsSyntaxChecking(wx
 #if wxUSE_STATUSBAR
     if (checkSyntax)
     {
-        SetStatusText(_T("Checking syntax: YES"), 1);
+        SetStatusText(wxT("Checking syntax: YES"), 1);
     }
     else
     {
-        SetStatusText(_T("Checking syntax: NO"), 1);
+        SetStatusText(wxT("Checking syntax: NO"), 1);
     }
 #endif // wxUSE_STATUSBAR
 }
@@ -878,8 +878,8 @@ void MyFrame::OnAbout(wxCommandEvent& WX
 {
       wxChar buf[300];
       wxString platform = wxGetOsDescription();
-      wxSnprintf(buf, sizeof(buf), _T("Tex2RTF Version %.2f %s\nLaTeX to RTF, WinHelp, and HTML Conversion\n\n(c) Julian Smart, George Tasker and others, 1999-2005"), versionNo, platform.c_str());
-      wxMessageBox(buf, _T("About Tex2RTF"));
+      wxSnprintf(buf, sizeof(buf), wxT("Tex2RTF Version %.2f %s\nLaTeX to RTF, WinHelp, and HTML Conversion\n\n(c) Julian Smart, George Tasker and others, 1999-2005"), versionNo, platform.c_str());
+      wxMessageBox(buf, wxT("About Tex2RTF"));
 }
 
 void ChooseInputFile(bool force)
@@ -887,7 +887,7 @@ void ChooseInputFile(bool force)
 #if wxUSE_FILEDLG
     if (force || InputFile.empty())
     {
-        wxString s = wxFileSelector(_T("Choose LaTeX input file"), wxPathOnly(InputFile), wxFileNameFromPath(InputFile), _T("tex"), _T("*.tex"));
+        wxString s = wxFileSelector(wxT("Choose LaTeX input file"), wxPathOnly(InputFile), wxFileNameFromPath(InputFile), wxT("tex"), wxT("*.tex"));
         if (!s.empty())
         {
             // Different file, so clear index entries.
@@ -899,7 +899,7 @@ void ChooseInputFile(bool force)
             InputFile = s;
             wxString str = wxFileNameFromPath(InputFile);
             wxString buf;
-            buf.Printf(_T("Tex2RTF [%s]"), str.c_str());
+            buf.Printf(wxT("Tex2RTF [%s]"), str.c_str());
             frame->SetTitle((wxChar *)buf.c_str());
             OutputFile = wxEmptyString;
         }
@@ -913,7 +913,7 @@ void ChooseOutputFile(bool force)
 {
     wxChar extensionBuf[10];
     wxChar wildBuf[10];
-    wxStrcpy(wildBuf, _T("*."));
+    wxStrcpy(wildBuf, wxT("*."));
     wxString path;
     if (!OutputFile.empty())
         path = wxPathOnly(OutputFile);
@@ -924,27 +924,27 @@ void ChooseOutputFile(bool force)
     {
         case TEX_RTF:
         {
-            wxStrcpy(extensionBuf, _T("rtf"));
-            wxStrcat(wildBuf, _T("rtf"));
+            wxStrcpy(extensionBuf, wxT("rtf"));
+            wxStrcat(wildBuf, wxT("rtf"));
             break;
         }
         case TEX_XLP:
         {
-            wxStrcpy(extensionBuf, _T("xlp"));
-            wxStrcat(wildBuf, _T("xlp"));
+            wxStrcpy(extensionBuf, wxT("xlp"));
+            wxStrcat(wildBuf, wxT("xlp"));
             break;
         }
         case TEX_HTML:
         {
-            wxStrcpy(extensionBuf, _T("html"));
-            wxStrcat(wildBuf, _T("html"));
+            wxStrcpy(extensionBuf, wxT("html"));
+            wxStrcat(wildBuf, wxT("html"));
             break;
         }
     }
 #if wxUSE_FILEDLG
     if (force || OutputFile.empty())
     {
-        wxString s = wxFileSelector(_T("Choose output file"), path, wxFileNameFromPath(OutputFile),
+        wxString s = wxFileSelector(wxT("Choose output file"), path, wxFileNameFromPath(OutputFile),
                                     extensionBuf, wildBuf);
         if (!s.empty())
             OutputFile = s;
@@ -971,7 +971,7 @@ bool Go(void)
     wxChar buf[300];
     wxString str = wxFileNameFromPath(InputFile);
 
-    wxSnprintf(buf, sizeof(buf), _T("Tex2RTF [%s]"), (const wxChar*) str);
+    wxSnprintf(buf, sizeof(buf), wxT("Tex2RTF [%s]"), (const wxChar*) str);
     frame->SetTitle(buf);
   }
 
@@ -994,16 +994,16 @@ bool Go(void)
         sName[5] = '\0';  // that should do!
   }
 
-  wxSnprintf(ContentsName, 300, _T("%s.con"), FileRoot);
-  wxSnprintf(TmpContentsName, 300, _T("%s.cn1"), FileRoot);
-  wxSnprintf(TmpFrameContentsName, 300, _T("%s.frc"), FileRoot);
-  wxSnprintf(WinHelpContentsFileName, 300, _T("%s.cnt"), FileRoot);
-  wxSnprintf(RefFileName, 300, _T("%s.ref"), FileRoot);
+  wxSnprintf(ContentsName, 300, wxT("%s.con"), FileRoot);
+  wxSnprintf(TmpContentsName, 300, wxT("%s.cn1"), FileRoot);
+  wxSnprintf(TmpFrameContentsName, 300, wxT("%s.frc"), FileRoot);
+  wxSnprintf(WinHelpContentsFileName, 300, wxT("%s.cnt"), FileRoot);
+  wxSnprintf(RefFileName, 300, wxT("%s.ref"), FileRoot);
 
   TexPathList.EnsureFileAccessible(InputFile);
   if (!bulletFile)
   {
-    wxString s = TexPathList.FindValidPath(_T("bullet.bmp"));
+    wxString s = TexPathList.FindValidPath(wxT("bullet.bmp"));
     if (!s.empty())
     {
       wxString str = wxFileNameFromPath(s);
@@ -1020,7 +1020,7 @@ bool Go(void)
   {
     if (!wxFileExists(InputFile))
     {
-      OnError(_T("Cannot open input file!"));
+      OnError(wxT("Cannot open input file!"));
       TexCleanUp();
       return false;
     }
@@ -1028,12 +1028,12 @@ bool Go(void)
     if (isInteractive)
     {
       wxString buf;
-      buf.Printf(_T("Working, pass %d...Click CLOSE to abort"), passNumber);
+      buf.Printf(wxT("Working, pass %d...Click CLOSE to abort"), passNumber);
       frame->SetStatusText((wxChar *)buf.c_str());
     }
 #endif
     OkToClose = false;
-    OnInform(_T("Reading LaTeX file..."));
+    OnInform(wxT("Reading LaTeX file..."));
     TexLoadFile(InputFile);
 
     if (stopRunning)
@@ -1063,7 +1063,7 @@ bool Go(void)
   }
   if (stopRunning)
   {
-    OnInform(_T("*** Aborted by user."));
+    OnInform(wxT("*** Aborted by user."));
     success = false;
     stopRunning = false;
     OkToClose = true;
@@ -1078,28 +1078,28 @@ bool Go(void)
     wxString buf;
 #ifndef NO_GUI
     wxLongLong elapsed = wxGetLocalTimeMillis() - localTime;
-    buf.Printf(_T("Finished PASS #%d in %ld seconds.\n"), passNumber, (long)(elapsed.GetLo()/1000.0));
+    buf.Printf(wxT("Finished PASS #%d in %ld seconds.\n"), passNumber, (long)(elapsed.GetLo()/1000.0));
     OnInform((wxChar *)buf.c_str());
 
     if (errorCount)
     {
-        buf.Printf(_T("Errors encountered during this pass: %lu\n"), errorCount);
+        buf.Printf(wxT("Errors encountered during this pass: %lu\n"), errorCount);
         OnInform((wxChar *)buf.c_str());
     }
 
 #if wxUSE_STATUSBAR
     if (isInteractive)
     {
-      buf.Printf(_T("Done, %d %s."), passNumber, (passNumber > 1) ? _T("passes") : _T("pass"));
+      buf.Printf(wxT("Done, %d %s."), passNumber, (passNumber > 1) ? wxT("passes") : wxT("pass"));
       frame->SetStatusText((wxChar *)buf.c_str());
     }
 #endif // wxUSE_STATUSBAR
 #else
-    buf.Printf(_T("Done, %d %s."), passNumber, (passNumber > 1) ? _T("passes") : _T("pass"));
+    buf.Printf(wxT("Done, %d %s."), passNumber, (passNumber > 1) ? wxT("passes") : wxT("pass"));
     OnInform((wxChar *)buf.c_str());
     if (errorCount)
     {
-        buf.Printf(_T("Errors encountered during this pass: %lu\n"), errorCount);
+        buf.Printf(wxT("Errors encountered during this pass: %lu\n"), errorCount);
         OnInform((wxChar *)buf.c_str());
     }
 #endif
@@ -1113,10 +1113,10 @@ bool Go(void)
   startedSections = false;
 
 #if !defined(NO_GUI) && wxUSE_STATUSBAR
-  frame->SetStatusText(_T("Aborted by user."));
+  frame->SetStatusText(wxT("Aborted by user."));
 #endif // GUI
 
-  OnInform(_T("Sorry, unsuccessful."));
+  OnInform(wxT("Sorry, unsuccessful."));
   OkToClose = true;
   return false;
 }
@@ -1132,7 +1132,7 @@ void OnError(const wxChar *msg)
 #else
     if (isInteractive && frame)
     {
-        (*frame->textWindow) << _T("Error: ") << msg << _T("\n");
+        (*frame->textWindow) << wxT("Error: ") << msg << wxT("\n");
     }
     else
     {
@@ -1157,7 +1157,7 @@ void OnInform(const wxChar *msg)
 #else
     if (isInteractive && frame)
     {
-       (*frame->textWindow) << msg << _T("\n");
+       (*frame->textWindow) << msg << wxT("\n");
     }
     else
     {
@@ -1232,7 +1232,7 @@ bool OnArgument(int macroId, int arg_no,
 
 wxConnectionBase *Tex2RTFServer::OnAcceptConnection(const wxString& topic)
 {
-  if (topic == _T("TEX2RTF"))
+  if (topic == wxT("TEX2RTF"))
   {
     if (!ipc_buffer)
       ipc_buffer = new wxChar[1000];
@@ -1287,46 +1287,46 @@ bool SplitCommand(wxChar *data, wxChar *
 
 bool Tex2RTFConnection::OnExecute(const wxString& WXUNUSED(topic), wxChar *data, int WXUNUSED(size), wxIPCFormat WXUNUSED(format))
 {
-  wxStrcpy(Tex2RTFLastStatus, _T("OK"));
+  wxStrcpy(Tex2RTFLastStatus, wxT("OK"));
 
   wxChar firstArg[50];
   wxChar secondArg[300];
   if (SplitCommand(data, firstArg, secondArg))
   {
     bool hasArg = (wxStrlen(secondArg) > 0);
-    if (wxStrcmp(firstArg, _T("INPUT")) == 0 && hasArg)
+    if (wxStrcmp(firstArg, wxT("INPUT")) == 0 && hasArg)
     {
         InputFile = secondArg;
         if (frame)
         {
             wxChar buf[100];
             wxString str = wxFileNameFromPath(InputFile);
-            wxSnprintf(buf, sizeof(buf), _T("Tex2RTF [%s]"), (const wxChar*) str);
+            wxSnprintf(buf, sizeof(buf), wxT("Tex2RTF [%s]"), (const wxChar*) str);
             frame->SetTitle(buf);
         }
     }
-    else if (wxStrcmp(firstArg, _T("OUTPUT")) == 0 && hasArg)
+    else if (wxStrcmp(firstArg, wxT("OUTPUT")) == 0 && hasArg)
     {
         OutputFile = secondArg;
     }
-    else if (wxStrcmp(firstArg, _T("GO")) == 0)
+    else if (wxStrcmp(firstArg, wxT("GO")) == 0)
     {
-      wxStrcpy(Tex2RTFLastStatus, _T("WORKING"));
+      wxStrcpy(Tex2RTFLastStatus, wxT("WORKING"));
       if (!Go())
-        wxStrcpy(Tex2RTFLastStatus, _T("CONVERSION ERROR"));
+        wxStrcpy(Tex2RTFLastStatus, wxT("CONVERSION ERROR"));
       else
-        wxStrcpy(Tex2RTFLastStatus, _T("OK"));
+        wxStrcpy(Tex2RTFLastStatus, wxT("OK"));
     }
-    else if (wxStrcmp(firstArg, _T("EXIT")) == 0)
+    else if (wxStrcmp(firstArg, wxT("EXIT")) == 0)
     {
       if (frame) frame->Close();
     }
-    else if (wxStrcmp(firstArg, _T("MINIMIZE")) == 0 || wxStrcmp(firstArg, _T("ICONIZE")) == 0)
+    else if (wxStrcmp(firstArg, wxT("MINIMIZE")) == 0 || wxStrcmp(firstArg, wxT("ICONIZE")) == 0)
     {
       if (frame)
         frame->Iconize(true);
     }
-    else if (wxStrcmp(firstArg, _T("SHOW")) == 0 || wxStrcmp(firstArg, _T("RESTORE")) == 0)
+    else if (wxStrcmp(firstArg, wxT("SHOW")) == 0 || wxStrcmp(firstArg, wxT("RESTORE")) == 0)
     {
       if (frame)
       {
@@ -1339,18 +1339,18 @@ bool Tex2RTFConnection::OnExecute(const 
       // Try for a setting
       wxStrcpy(Tex2RTFLastStatus, RegisterSetting(firstArg, secondArg, false));
 #if !defined(NO_GUI) && wxUSE_STATUSBAR
-      if (frame && wxStrcmp(firstArg, _T("conversionMode")) == 0)
+      if (frame && wxStrcmp(firstArg, wxT("conversionMode")) == 0)
       {
         wxChar buf[100];
-        wxStrcpy(buf, _T("In "));
+        wxStrcpy(buf, wxT("In "));
 
         if (winHelp && (convertMode == TEX_RTF))
-          wxStrcat(buf, _T("WinHelp RTF"));
+          wxStrcat(buf, wxT("WinHelp RTF"));
         else if (!winHelp && (convertMode == TEX_RTF))
-          wxStrcat(buf, _T("linear RTF"));
-        else if (convertMode == TEX_HTML) wxStrcat(buf, _T("HTML"));
-        else if (convertMode == TEX_XLP) wxStrcat(buf, _T("XLP"));
-          wxStrcat(buf, _T(" mode."));
+          wxStrcat(buf, wxT("linear RTF"));
+        else if (convertMode == TEX_HTML) wxStrcat(buf, wxT("HTML"));
+        else if (convertMode == TEX_XLP) wxStrcat(buf, wxT("XLP"));
+          wxStrcat(buf, wxT(" mode."));
         frame->SetStatusText(buf, 1);
       }
 #endif
--- utils/tex2rtf/src/texutils.cpp-orig	2009-06-18 17:50:31.988676000 -0500
+++ utils/tex2rtf/src/texutils.cpp	2009-06-18 17:50:39.725403000 -0500
@@ -77,7 +77,7 @@ void OutputCurrentSectionToString(wxChar
 
 void OutputChunkToString(TexChunk *chunk, wxChar *buf)
 {
-  FILE *tempfd = wxFopen(_T("tmp.tmp"), _T("w"));
+  FILE *tempfd = wxFopen(wxT("tmp.tmp"), wxT("w"));
   if (!tempfd)
     return;
 
@@ -95,7 +95,7 @@ void OutputChunkToString(TexChunk *chunk
   fclose(tempfd);
 
   // Read from file into string
-  tempfd = wxFopen(_T("tmp.tmp"), _T("r"));
+  tempfd = wxFopen(wxT("tmp.tmp"), wxT("r"));
   if (!tempfd)
     return;
 
@@ -114,7 +114,7 @@ void OutputChunkToString(TexChunk *chunk
     }
   }
   fclose(tempfd);
-  wxRemoveFile(_T("tmp.tmp"));
+  wxRemoveFile(wxT("tmp.tmp"));
 }
 
 // Called by Tex2Any to simulate a section
@@ -196,7 +196,7 @@ wxChar *FindTopicName(TexChunk *chunk)
     return topicName;
   else
   {
-    wxSnprintf(topicBuf, sizeof(topicBuf), _T("topic%ld"), topicCounter);
+    wxSnprintf(topicBuf, sizeof(topicBuf), wxT("topic%ld"), topicCounter);
     topicCounter ++;
     return topicBuf;
   }
@@ -238,20 +238,20 @@ int ParseUnitArgument(wxChar *unitArg)
 
   if (unitArg && (len > 0) && (isdigit(unitArg[0]) || unitArg[0] == '-'))
   {
-    wxSscanf(unitArg, _T("%f"), &unitValue);
+    wxSscanf(unitArg, wxT("%f"), &unitValue);
     if (len > 1)
     {
       wxChar units[3];
       units[0] = unitArg[len-2];
       units[1] = unitArg[len-1];
       units[2] = 0;
-      if (wxStrcmp(units, _T("in")) == 0)
+      if (wxStrcmp(units, wxT("in")) == 0)
         conversionFactor = 72.0;
-      else if (wxStrcmp(units, _T("cm")) == 0)
+      else if (wxStrcmp(units, wxT("cm")) == 0)
         conversionFactor = (float)72.0/(float)2.51;
-      else if (wxStrcmp(units, _T("mm")) == 0)
+      else if (wxStrcmp(units, wxT("mm")) == 0)
         conversionFactor = (float)72.0/(float)25.1;
-      else if (wxStrcmp(units, _T("pt")) == 0)
+      else if (wxStrcmp(units, wxT("pt")) == 0)
         conversionFactor = 1;
     }
     return (int)(unitValue*conversionFactor);
@@ -355,30 +355,30 @@ void AddTexRef(wxChar *name, wxChar *fil
   if (chapter)
   {
     wxChar buf2[10];
-    wxSnprintf(buf2, sizeof(buf2), _T("%d"), chapter);
+    wxSnprintf(buf2, sizeof(buf2), wxT("%d"), chapter);
     wxStrcat(buf, buf2);
   }
   if (section)
   {
     wxChar buf2[10];
     if (chapter)
-      wxStrcat(buf, _T("."));
+      wxStrcat(buf, wxT("."));
 
-    wxSnprintf(buf2, sizeof(buf2), _T("%d"), section);
+    wxSnprintf(buf2, sizeof(buf2), wxT("%d"), section);
     wxStrcat(buf, buf2);
   }
   if (subsection)
   {
     wxChar buf2[10];
-    wxStrcat(buf, _T("."));
-    wxSnprintf(buf2, sizeof(buf2), _T("%d"), subsection);
+    wxStrcat(buf, wxT("."));
+    wxSnprintf(buf2, sizeof(buf2), wxT("%d"), subsection);
     wxStrcat(buf, buf2);
   }
   if (subsubsection)
   {
     wxChar buf2[10];
-    wxStrcat(buf, _T("."));
-    wxSnprintf(buf2, sizeof(buf2), _T("%d"), subsubsection);
+    wxStrcat(buf, wxT("."));
+    wxSnprintf(buf2, sizeof(buf2), wxT("%d"), subsubsection);
     wxStrcat(buf, buf2);
   }
   wxChar *tmp = ((wxStrlen(buf) > 0) ? buf : (wxChar *)NULL);
@@ -403,17 +403,17 @@ void WriteTexReferences(wxChar *filename
         TexRef *ref = (TexRef *)node->GetData();
         wxString converter = ref->refLabel;
         converter << wxT(" ");
-        converter << (ref->refFile ? ref->refFile : _T("??"));
+        converter << (ref->refFile ? ref->refFile : wxT("??"));
         converter << wxT(" ");
-        converter << (ref->sectionName ? ref->sectionName : _T("??")) ;
+        converter << (ref->sectionName ? ref->sectionName : wxT("??")) ;
         converter << wxT(" ");
-        converter << (ref->sectionNumber ? ref->sectionNumber : _T("??")) ;
+        converter << (ref->sectionNumber ? ref->sectionNumber : wxT("??")) ;
         file.AddLine(converter);
 
-        if (!ref->sectionNumber || (wxStrcmp(ref->sectionNumber, _T("??")) == 0 && wxStrcmp(ref->sectionName, _T("??")) == 0))
+        if (!ref->sectionNumber || (wxStrcmp(ref->sectionNumber, wxT("??")) == 0 && wxStrcmp(ref->sectionName, wxT("??")) == 0))
         {
             wxChar buf[200];
-            wxSnprintf(buf, sizeof(buf), _T("Warning: reference %s not resolved."), ref->refLabel);
+            wxSnprintf(buf, sizeof(buf), wxT("Warning: reference %s not resolved."), ref->refLabel);
             OnInform(buf);
         }
         node = TexReferences.Next();
@@ -470,7 +470,7 @@ void ReadTexReferences(wxChar *filename)
 
 void BibEatWhiteSpace(wxString& line)
 {
-    while(!line.empty() && (line[0] == _T(' ') || line[0] == _T('\t') || line[0] == (wxChar)EOF))
+    while(!line.empty() && (line[0] == wxT(' ') || line[0] == wxT('\t') || line[0] == (wxChar)EOF))
     {
         if (line[0] == 10)
             BibLine ++;
@@ -478,7 +478,7 @@ void BibEatWhiteSpace(wxString& line)
     }
 
     // Ignore end-of-line comments
-    if ( !line.empty() && (line[0] == _T('%') || line[0] == _T(';') || line[0] == _T('#')))
+    if ( !line.empty() && (line[0] == wxT('%') || line[0] == wxT(';') || line[0] == wxT('#')))
     {
         line.clear();
     }
@@ -517,12 +517,12 @@ wxString BibReadWord(wxString& line)
     wxString val;
 
     while (!line.empty() &&
-           line[0] != _T('\t') &&
-           line[0] != _T(' ') &&
-           line[0] != _T('{') &&
-           line[0] != _T('(') &&
-           line[0] != _T(',') &&
-           line[0] != _T('='))
+           line[0] != wxT('\t') &&
+           line[0] != wxT(' ') &&
+           line[0] != wxT('{') &&
+           line[0] != wxT('(') &&
+           line[0] != wxT(',') &&
+           line[0] != wxT('='))
     {
         val << line[0];
         line = line.substr(1);
@@ -554,16 +554,16 @@ wxString BibReadToEOL(wxString& line)
 
     wxString val;
     bool inQuotes = false;
-    if (line[0] == _T('"'))
+    if (line[0] == wxT('"'))
     {
         line = line.substr(1);
         inQuotes = true;
     }
     // If in quotes, read white space too. If not,
     // stop at white space or comment.
-    while (!line.empty() && line[0] != _T('"') &&
-           (inQuotes || ((line[0] != _T(' ')) && (line[0] != 9) &&
-                          (line[0] != _T(';')) && (line[0] != _T('%')) && (line[0] != _T('#')))))
+    while (!line.empty() && line[0] != wxT('"') &&
+           (inQuotes || ((line[0] != wxT(' ')) && (line[0] != 9) &&
+                          (line[0] != wxT(';')) && (line[0] != wxT('%')) && (line[0] != wxT('#')))))
     {
         val << line[0];
         line = line.substr(1);
@@ -588,9 +588,9 @@ void BibReadToEOL(wxSTD istream& istr, w
     }
     // If in quotes, read white space too. If not,
     // stop at white space or comment.
-    while (!istr.eof() && ch != 13 && ch != 10 && ch != _T('"') &&
-           (inQuotes || ((ch != _T(' ')) && (ch != 9) &&
-                          (ch != _T(';')) && (ch != _T('%')) && (ch != _T('#')))))
+    while (!istr.eof() && ch != 13 && ch != 10 && ch != wxT('"') &&
+           (inQuotes || ((ch != wxT(' ')) && (ch != 9) &&
+                          (ch != wxT(';')) && (ch != wxT('%')) && (ch != wxT('#')))))
     {
         istr.get(ch);
         buffer[i] = ch;
@@ -614,7 +614,7 @@ wxString BibReadValue(wxString& line,
     if (line.length() >= 4000)
     {
         wxChar buf[100];
-        wxSnprintf(buf, sizeof(buf), _T("Sorry, value > 4000 chars in bib file at line %ld."), BibLine);
+        wxSnprintf(buf, sizeof(buf), wxT("Sorry, value > 4000 chars in bib file at line %ld."), BibLine);
         wxLogError(buf, "Tex2RTF Fatal Error");
         return wxEmptyString;
     }
@@ -624,10 +624,10 @@ wxString BibReadValue(wxString& line,
         wxChar ch = line[0];
         line = line.substr(1);
 
-        if (ch == _T('{'))
+        if (ch == wxT('{'))
             braceCount ++;
 
-        if (ch == _T('}'))
+        if (ch == wxT('}'))
         {
             braceCount --;
             if (braceCount == 0)
@@ -636,7 +636,7 @@ wxString BibReadValue(wxString& line,
                 break;
             }
         }
-        else if (quotesMayTerminate && ch == _T('"'))
+        else if (quotesMayTerminate && ch == wxT('"'))
         {
             stopping = true;
             break;
@@ -644,7 +644,7 @@ wxString BibReadValue(wxString& line,
 
         if (!stopping)
         {
-            if (!ignoreBraces || (ch != _T('{') && ch != _T('}')))
+            if (!ignoreBraces || (ch != wxT('{') && ch != wxT('}')))
             {
                 val << ch;
             }
@@ -668,7 +668,7 @@ void BibReadValue(wxSTD istream& istr, w
         if (i >= 4000)
         {
             wxChar buf[100];
-            wxSnprintf(buf, sizeof(buf), _T("Sorry, value > 4000 chars in bib file at line %ld."), BibLine);
+            wxSnprintf(buf, sizeof(buf), wxT("Sorry, value > 4000 chars in bib file at line %ld."), BibLine);
             wxLogError(buf, "Tex2RTF Fatal Error");
             return;
         }
@@ -718,7 +718,7 @@ bool ReadBib(wxChar *filename)
 
   BibLine = 1;
 
-  OnInform(_T("Reading .bib file..."));
+  OnInform(wxT("Reading .bib file..."));
 
   char ch;
   wxChar fieldValue[4000];
@@ -733,7 +733,7 @@ bool ReadBib(wxChar *filename)
     istr.get(ch);
     if (ch != '@')
     {
-      wxSnprintf(buf, sizeof(buf), _T("Expected @: malformed bib file at line %ld (%s)"), BibLine, filename);
+      wxSnprintf(buf, sizeof(buf), wxT("Expected @: malformed bib file at line %ld (%s)"), BibLine, filename);
       OnError(buf);
       return false;
     }
@@ -742,19 +742,19 @@ bool ReadBib(wxChar *filename)
     istr.get(ch);
     if (ch != '{' && ch != '(')
     {
-      wxSnprintf(buf, sizeof(buf), _T("Expected { or ( after record type: malformed .bib file at line %ld (%s)"), BibLine, filename);
+      wxSnprintf(buf, sizeof(buf), wxT("Expected { or ( after record type: malformed .bib file at line %ld (%s)"), BibLine, filename);
       OnError(buf);
       return false;
     }
     BibEatWhiteSpace(istr);
-    if (StringMatch(recordType, _T("string"), false, true))
+    if (StringMatch(recordType, wxT("string"), false, true))
     {
       BibReadWord(istr, recordType);
       BibEatWhiteSpace(istr);
       istr.get(ch);
       if (ch != '=')
       {
-        wxSnprintf(buf, sizeof(buf), _T("Expected = after string key: malformed .bib file at line %ld (%s)"), BibLine, filename);
+        wxSnprintf(buf, sizeof(buf), wxT("Expected = after string key: malformed .bib file at line %ld (%s)"), BibLine, filename);
         OnError(buf);
         return false;
       }
@@ -762,7 +762,7 @@ bool ReadBib(wxChar *filename)
       istr.get(ch);
       if (ch != '"' && ch != '{')
       {
-        wxSnprintf(buf, sizeof(buf), _T("Expected = after string key: malformed .bib file at line %ld (%s)"), BibLine, filename);
+        wxSnprintf(buf, sizeof(buf), wxT("Expected = after string key: malformed .bib file at line %ld (%s)"), BibLine, filename);
         OnError(buf);
         return false;
       }
@@ -802,7 +802,7 @@ bool ReadBib(wxChar *filename)
           istr.get(ch);
           if (ch != '=')
           {
-            wxSnprintf(buf, sizeof(buf), _T("Expected = after field type: malformed .bib file at line %ld (%s)"), BibLine, filename);
+            wxSnprintf(buf, sizeof(buf), wxT("Expected = after field type: malformed .bib file at line %ld (%s)"), BibLine, filename);
             OnError(buf);
             return false;
           }
@@ -821,64 +821,64 @@ bool ReadBib(wxChar *filename)
             }
           }
           else
-            BibReadValue(istr, fieldValue, true, (ch == _T('"') ? true : false));
+            BibReadValue(istr, fieldValue, true, (ch == wxT('"') ? true : false));
 
           // Now we can add a field
-          if (StringMatch(recordField, _T("author"), false, true))
+          if (StringMatch(recordField, wxT("author"), false, true))
             bibEntry->author = copystring(fieldValue);
-          else if (StringMatch(recordField, _T("key"), false, true))
+          else if (StringMatch(recordField, wxT("key"), false, true))
             {}
-          else if (StringMatch(recordField, _T("annotate"), false, true))
+          else if (StringMatch(recordField, wxT("annotate"), false, true))
             {}
-          else if (StringMatch(recordField, _T("abstract"), false, true))
+          else if (StringMatch(recordField, wxT("abstract"), false, true))
             {}
-          else if (StringMatch(recordField, _T("edition"), false, true))
+          else if (StringMatch(recordField, wxT("edition"), false, true))
             {}
-          else if (StringMatch(recordField, _T("howpublished"), false, true))
+          else if (StringMatch(recordField, wxT("howpublished"), false, true))
             {}
-          else if (StringMatch(recordField, _T("note"), false, true) || StringMatch(recordField, _T("notes"), false, true))
+          else if (StringMatch(recordField, wxT("note"), false, true) || StringMatch(recordField, wxT("notes"), false, true))
             {}
-          else if (StringMatch(recordField, _T("series"), false, true))
+          else if (StringMatch(recordField, wxT("series"), false, true))
             {}
-          else if (StringMatch(recordField, _T("type"), false, true))
+          else if (StringMatch(recordField, wxT("type"), false, true))
             {}
-          else if (StringMatch(recordField, _T("keywords"), false, true))
+          else if (StringMatch(recordField, wxT("keywords"), false, true))
             {}
-          else if (StringMatch(recordField, _T("editor"), false, true) || StringMatch(recordField, _T("editors"), false, true))
+          else if (StringMatch(recordField, wxT("editor"), false, true) || StringMatch(recordField, wxT("editors"), false, true))
             bibEntry->editor= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("title"), false, true))
+          else if (StringMatch(recordField, wxT("title"), false, true))
             bibEntry->title= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("booktitle"), false, true))
+          else if (StringMatch(recordField, wxT("booktitle"), false, true))
             bibEntry->booktitle= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("journal"), false, true))
+          else if (StringMatch(recordField, wxT("journal"), false, true))
             bibEntry->journal= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("volume"), false, true))
+          else if (StringMatch(recordField, wxT("volume"), false, true))
             bibEntry->volume= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("number"), false, true))
+          else if (StringMatch(recordField, wxT("number"), false, true))
             bibEntry->number= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("year"), false, true))
+          else if (StringMatch(recordField, wxT("year"), false, true))
             bibEntry->year= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("month"), false, true))
+          else if (StringMatch(recordField, wxT("month"), false, true))
             bibEntry->month= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("pages"), false, true))
+          else if (StringMatch(recordField, wxT("pages"), false, true))
             bibEntry->pages= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("publisher"), false, true))
+          else if (StringMatch(recordField, wxT("publisher"), false, true))
             bibEntry->publisher= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("address"), false, true))
+          else if (StringMatch(recordField, wxT("address"), false, true))
             bibEntry->address= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("institution"), false, true) || StringMatch(recordField, _T("school"), false, true))
+          else if (StringMatch(recordField, wxT("institution"), false, true) || StringMatch(recordField, wxT("school"), false, true))
             bibEntry->institution= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("organization"), false, true) || StringMatch(recordField, _T("organisation"), false, true))
+          else if (StringMatch(recordField, wxT("organization"), false, true) || StringMatch(recordField, wxT("organisation"), false, true))
             bibEntry->organization= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("comment"), false, true) || StringMatch(recordField, _T("comments"), false, true))
+          else if (StringMatch(recordField, wxT("comment"), false, true) || StringMatch(recordField, wxT("comments"), false, true))
             bibEntry->comment= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("annote"), false, true))
+          else if (StringMatch(recordField, wxT("annote"), false, true))
             bibEntry->comment= copystring(fieldValue);
-          else if (StringMatch(recordField, _T("chapter"), false, true))
+          else if (StringMatch(recordField, wxT("chapter"), false, true))
             bibEntry->chapter= copystring(fieldValue);
           else
           {
-            wxSnprintf(buf, sizeof(buf), _T("Unrecognised bib field type %s at line %ld (%s)"), recordField, BibLine, filename);
+            wxSnprintf(buf, sizeof(buf), wxT("Unrecognised bib field type %s at line %ld (%s)"), recordField, BibLine, filename);
             OnError(buf);
           }
         }
@@ -900,7 +900,7 @@ void OutputBibItem(TexRef *ref, BibEntry
   OnArgument(ltNUMBEREDBIBITEM, 1, false);
   OnArgument(ltNUMBEREDBIBITEM, 2, true);
 
-  TexOutput(_T(" "));
+  TexOutput(wxT(" "));
   OnMacro(ltBF, 1, true);
   OnArgument(ltBF, 1, true);
   if (bib->author)
@@ -908,9 +908,9 @@ void OutputBibItem(TexRef *ref, BibEntry
   OnArgument(ltBF, 1, false);
   OnMacro(ltBF, 1, false);
   if (bib->author && (wxStrlen(bib->author) > 0) && (bib->author[wxStrlen(bib->author) - 1] != '.'))
-    TexOutput(_T(". "));
+    TexOutput(wxT(". "));
   else
-    TexOutput(_T(" "));
+    TexOutput(wxT(" "));
 
   if (bib->year)
   {
@@ -918,19 +918,19 @@ void OutputBibItem(TexRef *ref, BibEntry
   }
   if (bib->month)
   {
-    TexOutput(_T(" ("));
+    TexOutput(wxT(" ("));
     TexOutput(bib->month);
-    TexOutput(_T(")"));
+    TexOutput(wxT(")"));
   }
   if (bib->year || bib->month)
-    TexOutput(_T(". "));
+    TexOutput(wxT(". "));
 
-  if (StringMatch(bib->type, _T("article"), false, true))
+  if (StringMatch(bib->type, wxT("article"), false, true))
   {
     if (bib->title)
     {
       TexOutput(bib->title);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
     }
     if (bib->journal)
     {
@@ -942,7 +942,7 @@ void OutputBibItem(TexRef *ref, BibEntry
     }
     if (bib->volume)
     {
-      TexOutput(_T(", "));
+      TexOutput(wxT(", "));
       OnMacro(ltBF, 1, true);
       OnArgument(ltBF, 1, true);
       TexOutput(bib->volume);
@@ -951,70 +951,70 @@ void OutputBibItem(TexRef *ref, BibEntry
     }
     if (bib->number)
     {
-      TexOutput(_T("("));
+      TexOutput(wxT("("));
       TexOutput(bib->number);
-      TexOutput(_T(")"));
+      TexOutput(wxT(")"));
     }
     if (bib->pages)
     {
-      TexOutput(_T(", pages "));
+      TexOutput(wxT(", pages "));
       TexOutput(bib->pages);
     }
-    TexOutput(_T("."));
+    TexOutput(wxT("."));
   }
-  else if (StringMatch(bib->type, _T("book"), false, true) ||
-           StringMatch(bib->type, _T("unpublished"), false, true) ||
-           StringMatch(bib->type, _T("manual"), false, true) ||
-           StringMatch(bib->type, _T("phdthesis"), false, true) ||
-           StringMatch(bib->type, _T("mastersthesis"), false, true) ||
-           StringMatch(bib->type, _T("misc"), false, true) ||
-           StringMatch(bib->type, _T("techreport"), false, true) ||
-           StringMatch(bib->type, _T("booklet"), false, true))
+  else if (StringMatch(bib->type, wxT("book"), false, true) ||
+           StringMatch(bib->type, wxT("unpublished"), false, true) ||
+           StringMatch(bib->type, wxT("manual"), false, true) ||
+           StringMatch(bib->type, wxT("phdthesis"), false, true) ||
+           StringMatch(bib->type, wxT("mastersthesis"), false, true) ||
+           StringMatch(bib->type, wxT("misc"), false, true) ||
+           StringMatch(bib->type, wxT("techreport"), false, true) ||
+           StringMatch(bib->type, wxT("booklet"), false, true))
   {
     if (bib->title || bib->booktitle)
     {
       OnMacro(ltIT, 1, true);
       OnArgument(ltIT, 1, true);
       TexOutput(bib->title ? bib->title : bib->booktitle);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
       OnArgument(ltIT, 1, false);
       OnMacro(ltIT, 1, false);
     }
-    if (StringMatch(bib->type, _T("phdthesis"), false, true))
-      TexOutput(_T("PhD thesis. "));
-    if (StringMatch(bib->type, _T("techreport"), false, true))
-      TexOutput(_T("Technical report. "));
+    if (StringMatch(bib->type, wxT("phdthesis"), false, true))
+      TexOutput(wxT("PhD thesis. "));
+    if (StringMatch(bib->type, wxT("techreport"), false, true))
+      TexOutput(wxT("Technical report. "));
     if (bib->editor)
     {
-      TexOutput(_T("Ed. "));
+      TexOutput(wxT("Ed. "));
       TexOutput(bib->editor);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
     }
     if (bib->institution)
     {
       TexOutput(bib->institution);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
     }
     if (bib->organization)
     {
       TexOutput(bib->organization);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
     }
     if (bib->publisher)
     {
       TexOutput(bib->publisher);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
     }
     if (bib->address)
     {
       TexOutput(bib->address);
-      TexOutput(_T(". "));
+      TexOutput(wxT(". "));
     }
   }
-  else if (StringMatch(bib->type, _T("inbook"), false, true) ||
-           StringMatch(bib->type, _T("inproceedings"), false, true) ||
-           StringMatch(bib->type, _T("incollection"), false, true) ||
-           StringMatch(bib->type, _T("conference"), false, true))
+  else if (StringMatch(bib->type, wxT("inbook"), false, true) ||
+           StringMatch(bib->type, wxT("inproceedings"), false, true) ||
+           StringMatch(bib->type, wxT("incollection"), false, true) ||
+           StringMatch(bib->type, wxT("conference"), false, true))
   {
     if (bib->title)
     {
@@ -1022,36 +1022,36 @@ void OutputBibItem(TexRef *ref, BibEntry
     }
     if (bib->booktitle)
     {
-      TexOutput(_T(", from "));
+      TexOutput(wxT(", from "));
       OnMacro(ltIT, 1, true);
       OnArgument(ltIT, 1, true);
       TexOutput(bib->booktitle);
-      TexOutput(_T("."));
+      TexOutput(wxT("."));
       OnArgument(ltIT, 1, false);
       OnMacro(ltIT, 1, false);
     }
     if (bib->editor)
     {
-      TexOutput(_T(", ed. "));
+      TexOutput(wxT(", ed. "));
       TexOutput(bib->editor);
     }
     if (bib->publisher)
     {
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
       TexOutput(bib->publisher);
     }
     if (bib->address)
     {
-      if (bib->publisher) TexOutput(_T(", "));
-      else TexOutput(_T(" "));
+      if (bib->publisher) TexOutput(wxT(", "));
+      else TexOutput(wxT(" "));
       TexOutput(bib->address);
     }
     if (bib->publisher || bib->address)
-      TexOutput(_T("."));
+      TexOutput(wxT("."));
 
     if (bib->volume)
     {
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
       OnMacro(ltBF, 1, true);
       OnArgument(ltBF, 1, true);
       TexOutput(bib->volume);
@@ -1062,28 +1062,28 @@ void OutputBibItem(TexRef *ref, BibEntry
     {
       if (bib->volume)
       {
-        TexOutput(_T("("));
+        TexOutput(wxT("("));
         TexOutput(bib->number);
-        TexOutput(_T(")."));
+        TexOutput(wxT(")."));
       }
       else
       {
-        TexOutput(_T(" Number "));
+        TexOutput(wxT(" Number "));
         TexOutput(bib->number);
-        TexOutput(_T("."));
+        TexOutput(wxT("."));
       }
     }
     if (bib->chapter)
     {
-      TexOutput(_T(" Chap. "));
+      TexOutput(wxT(" Chap. "));
       TexOutput(bib->chapter);
     }
     if (bib->pages)
     {
-      if (bib->chapter) TexOutput(_T(", pages "));
-      else TexOutput(_T(" Pages "));
+      if (bib->chapter) TexOutput(wxT(", pages "));
+      else TexOutput(wxT(" Pages "));
       TexOutput(bib->pages);
-      TexOutput(_T("."));
+      TexOutput(wxT("."));
     }
   }
   OnArgument(ltNUMBEREDBIBITEM, 2, false);
@@ -1093,7 +1093,7 @@ void OutputBibItem(TexRef *ref, BibEntry
 void OutputBib(void)
 {
   // Write the heading
-  ForceTopicName(_T("bibliography"));
+  ForceTopicName(wxT("bibliography"));
   FakeCurrentSection(ReferencesNameString);
   ForceTopicName(NULL);
 
@@ -1127,7 +1127,7 @@ static int citeCount = 1;
 void ResolveBibReferences(void)
 {
   if (CitationList.GetCount() > 0)
-    OnInform(_T("Resolving bibliographic references..."));
+    OnInform(wxT("Resolving bibliographic references..."));
 
   citeCount = 1;
   wxChar buf[200];
@@ -1144,13 +1144,13 @@ void ResolveBibReferences(void)
       // Unused Variable
       //BibEntry *entry = (BibEntry *)bibNode->GetData();
       if (ref->sectionNumber) delete[] ref->sectionNumber;
-      wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+      wxSnprintf(buf, sizeof(buf), wxT("[%d]"), citeCount);
       ref->sectionNumber = copystring(buf);
       citeCount ++;
     }
     else
     {
-      wxSnprintf(buf, sizeof(buf), _T("Warning: bib ref %s not resolved."), citeKey);
+      wxSnprintf(buf, sizeof(buf), wxT("Warning: bib ref %s not resolved."), citeKey);
       OnInform(buf);
     }
     node = node->GetNext();
@@ -1165,7 +1165,7 @@ void AddCitation(wxChar *citeKey)
 
   if (!TexReferences.Get(citeKey))
   {
-    TexReferences.Put(citeKey, new TexRef(citeKey, _T("??"), NULL));
+    TexReferences.Put(citeKey, new TexRef(citeKey, wxT("??"), NULL));
   }
 }
 
@@ -1184,11 +1184,11 @@ bool StringTobool(const wxString& val)
     wxString up(val);
     up.MakeUpper();
 
-    if (up.IsSameAs(_T("YES")) ||
-        up.IsSameAs(_T("TRUE")) ||
-        up.IsSameAs(_T("ON")) ||
-        up.IsSameAs(_T("OK")) |
-        up.IsSameAs(_T("1")))
+    if (up.IsSameAs(wxT("YES")) ||
+        up.IsSameAs(wxT("TRUE")) ||
+        up.IsSameAs(wxT("ON")) ||
+        up.IsSameAs(wxT("OK")) |
+        up.IsSameAs(wxT("1")))
         return true;
 
     return false;
@@ -1210,160 +1210,160 @@ wxChar *RegisterSetting(const wxString& 
     wxString settingValueStr( settingValue );
 
     static wxChar errorCode[100];
-    wxStrcpy(errorCode, _T("OK"));
-    if (StringMatch(settingName, _T("chapterName"), false, true))
+    wxStrcpy(errorCode, wxT("OK"));
+    if (StringMatch(settingName, wxT("chapterName"), false, true))
     {
         delete[] ChapterNameString;
         ChapterNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("sectionName"), false, true))
+    else if (StringMatch(settingName, wxT("sectionName"), false, true))
     {
         delete[] SectionNameString;
         SectionNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("subsectionName"), false, true))
+    else if (StringMatch(settingName, wxT("subsectionName"), false, true))
     {
         delete[] SubsectionNameString;
         SubsectionNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("subsubsectionName"), false, true))
+    else if (StringMatch(settingName, wxT("subsubsectionName"), false, true))
     {
         delete[] SubsubsectionNameString;
         SubsubsectionNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("indexName"), false, true))
+    else if (StringMatch(settingName, wxT("indexName"), false, true))
     {
         delete[] IndexNameString;
         IndexNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("contentsName"), false, true))
+    else if (StringMatch(settingName, wxT("contentsName"), false, true))
     {
         delete[] ContentsNameString;
         ContentsNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("glossaryName"), false, true))
+    else if (StringMatch(settingName, wxT("glossaryName"), false, true))
     {
         delete[] GlossaryNameString;
         GlossaryNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("referencesName"), false, true))
+    else if (StringMatch(settingName, wxT("referencesName"), false, true))
     {
         delete[] ReferencesNameString;
         ReferencesNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("tablesName"), false, true))
+    else if (StringMatch(settingName, wxT("tablesName"), false, true))
     {
         delete[] TablesNameString;
         TablesNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("figuresName"), false, true))
+    else if (StringMatch(settingName, wxT("figuresName"), false, true))
     {
         delete[] FiguresNameString;
         FiguresNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("tableName"), false, true))
+    else if (StringMatch(settingName, wxT("tableName"), false, true))
     {
         delete[] TableNameString;
         TableNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("figureName"), false, true))
+    else if (StringMatch(settingName, wxT("figureName"), false, true))
     {
         delete[] FigureNameString;
         FigureNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("abstractName"), false, true))
+    else if (StringMatch(settingName, wxT("abstractName"), false, true))
     {
         delete[] AbstractNameString;
         AbstractNameString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("chapterFontSize"), false, true))
+    else if (StringMatch(settingName, wxT("chapterFontSize"), false, true))
         RegisterIntSetting(settingValueStr, &chapterFont);
-    else if (StringMatch(settingName, _T("sectionFontSize"), false, true))
+    else if (StringMatch(settingName, wxT("sectionFontSize"), false, true))
         RegisterIntSetting(settingValueStr, &sectionFont);
-    else if (StringMatch(settingName, _T("subsectionFontSize"), false, true))
+    else if (StringMatch(settingName, wxT("subsectionFontSize"), false, true))
         RegisterIntSetting(settingValueStr, &subsectionFont);
-    else if (StringMatch(settingName, _T("titleFontSize"), false, true))
+    else if (StringMatch(settingName, wxT("titleFontSize"), false, true))
         RegisterIntSetting(settingValueStr, &titleFont);
-    else if (StringMatch(settingName, _T("authorFontSize"), false, true))
+    else if (StringMatch(settingName, wxT("authorFontSize"), false, true))
         RegisterIntSetting(settingValueStr, &authorFont);
-    else if (StringMatch(settingName, _T("ignoreInput"), false, true))
+    else if (StringMatch(settingName, wxT("ignoreInput"), false, true))
         IgnorableInputFiles.Add(wxFileNameFromPath(settingValue));
-    else if (StringMatch(settingName, _T("mirrorMargins"), false, true))
+    else if (StringMatch(settingName, wxT("mirrorMargins"), false, true))
         mirrorMargins = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("runTwice"), false, true))
+    else if (StringMatch(settingName, wxT("runTwice"), false, true))
         runTwice = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("isInteractive"), false, true))
+    else if (StringMatch(settingName, wxT("isInteractive"), false, true))
         isInteractive = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("headerRule"), false, true))
+    else if (StringMatch(settingName, wxT("headerRule"), false, true))
         headerRule = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("footerRule"), false, true))
+    else if (StringMatch(settingName, wxT("footerRule"), false, true))
         footerRule = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("combineSubSections"), false, true))
+    else if (StringMatch(settingName, wxT("combineSubSections"), false, true))
         combineSubSections = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("listLabelIndent"), false, true))
+    else if (StringMatch(settingName, wxT("listLabelIndent"), false, true))
         RegisterIntSetting(settingValueStr, &labelIndentTab);
-    else if (StringMatch(settingName, _T("listItemIndent"), false, true))
+    else if (StringMatch(settingName, wxT("listItemIndent"), false, true))
         RegisterIntSetting(settingValueStr, &itemIndentTab);
-    else if (StringMatch(settingName, _T("useUpButton"), false, true))
+    else if (StringMatch(settingName, wxT("useUpButton"), false, true))
         useUpButton = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("useHeadingStyles"), false, true))
+    else if (StringMatch(settingName, wxT("useHeadingStyles"), false, true))
         useHeadingStyles = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("useWord"), false, true))
+    else if (StringMatch(settingName, wxT("useWord"), false, true))
         useWord = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("contentsDepth"), false, true))
+    else if (StringMatch(settingName, wxT("contentsDepth"), false, true))
         RegisterIntSetting(settingValueStr, &contentsDepth);
-    else if (StringMatch(settingName, _T("generateHPJ"), false, true))
+    else if (StringMatch(settingName, wxT("generateHPJ"), false, true))
         generateHPJ = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("truncateFilenames"), false, true))
+    else if (StringMatch(settingName, wxT("truncateFilenames"), false, true))
         truncateFilenames = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("winHelpVersion"), false, true))
+    else if (StringMatch(settingName, wxT("winHelpVersion"), false, true))
         RegisterIntSetting(settingValueStr, &winHelpVersion);
-    else if (StringMatch(settingName, _T("winHelpContents"), false, true))
+    else if (StringMatch(settingName, wxT("winHelpContents"), false, true))
         winHelpContents = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("htmlIndex"), false, true))
+    else if (StringMatch(settingName, wxT("htmlIndex"), false, true))
         htmlIndex = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("htmlWorkshopFiles"), false, true))
+    else if (StringMatch(settingName, wxT("htmlWorkshopFiles"), false, true))
         htmlWorkshopFiles = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("htmlFrameContents"), false, true))
+    else if (StringMatch(settingName, wxT("htmlFrameContents"), false, true))
         htmlFrameContents = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("htmlStylesheet"), false, true))
+    else if (StringMatch(settingName, wxT("htmlStylesheet"), false, true))
     {
         if (htmlStylesheet)
             delete[] htmlStylesheet;
         htmlStylesheet = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("upperCaseNames"), false, true))
+    else if (StringMatch(settingName, wxT("upperCaseNames"), false, true))
         upperCaseNames = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("ignoreBadRefs"), false, true))
+    else if (StringMatch(settingName, wxT("ignoreBadRefs"), false, true))
         ignoreBadRefs = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("htmlFaceName"), false, true))
+    else if (StringMatch(settingName, wxT("htmlFaceName"), false, true))
     {
         delete[] htmlFaceName;
         htmlFaceName = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("winHelpTitle"), false, true))
+    else if (StringMatch(settingName, wxT("winHelpTitle"), false, true))
     {
         if (winHelpTitle)
             delete[] winHelpTitle;
         winHelpTitle = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("indexSubsections"), false, true))
+    else if (StringMatch(settingName, wxT("indexSubsections"), false, true))
         indexSubsections = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("compatibility"), false, true))
+    else if (StringMatch(settingName, wxT("compatibility"), false, true))
         compatibilityMode = StringTobool(settingValue);
-    else if (StringMatch(settingName, _T("defaultColumnWidth"), false, true))
+    else if (StringMatch(settingName, wxT("defaultColumnWidth"), false, true))
     {
         RegisterIntSetting(settingValueStr, &defaultTableColumnWidth);
         defaultTableColumnWidth = 20*defaultTableColumnWidth;
     }
-    else if (StringMatch(settingName, _T("bitmapMethod"), false, true))
+    else if (StringMatch(settingName, wxT("bitmapMethod"), false, true))
     {
-        if ((wxStrcmp(settingValue, _T("includepicture")) != 0) && (wxStrcmp(settingValue, _T("hex")) != 0) &&
-            (wxStrcmp(settingValue, _T("import")) != 0))
+        if ((wxStrcmp(settingValue, wxT("includepicture")) != 0) && (wxStrcmp(settingValue, wxT("hex")) != 0) &&
+            (wxStrcmp(settingValue, wxT("import")) != 0))
         {
             if (interactive)
-                OnError(_T("Unknown bitmapMethod"));
-            wxStrcpy(errorCode, _T("Unknown bitmapMethod"));
+                OnError(wxT("Unknown bitmapMethod"));
+            wxStrcpy(errorCode, wxT("Unknown bitmapMethod"));
         }
         else
         {
@@ -1371,69 +1371,69 @@ wxChar *RegisterSetting(const wxString& 
             bitmapMethod = copystring(settingValue);
         }
     }
-    else if (StringMatch(settingName, _T("htmlBrowseButtons"), false, true))
+    else if (StringMatch(settingName, wxT("htmlBrowseButtons"), false, true))
     {
-        if (wxStrcmp(settingValue, _T("none")) == 0)
+        if (wxStrcmp(settingValue, wxT("none")) == 0)
             htmlBrowseButtons = HTML_BUTTONS_NONE;
-        else if (wxStrcmp(settingValue, _T("bitmap")) == 0)
+        else if (wxStrcmp(settingValue, wxT("bitmap")) == 0)
             htmlBrowseButtons = HTML_BUTTONS_BITMAP;
-        else if (wxStrcmp(settingValue, _T("text")) == 0)
+        else if (wxStrcmp(settingValue, wxT("text")) == 0)
             htmlBrowseButtons = HTML_BUTTONS_TEXT;
         else
         {
             if (interactive)
-                OnInform(_T("Initialisation file error: htmlBrowseButtons must be one of none, bitmap, or text."));
-            wxStrcpy(errorCode, _T("Initialisation file error: htmlBrowseButtons must be one of none, bitmap, or text."));
+                OnInform(wxT("Initialisation file error: htmlBrowseButtons must be one of none, bitmap, or text."));
+            wxStrcpy(errorCode, wxT("Initialisation file error: htmlBrowseButtons must be one of none, bitmap, or text."));
         }
     }
-    else if (StringMatch(settingName, _T("backgroundImage"), false, true))
+    else if (StringMatch(settingName, wxT("backgroundImage"), false, true))
     {
         backgroundImageString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("backgroundColour"), false, true))
+    else if (StringMatch(settingName, wxT("backgroundColour"), false, true))
     {
         delete[] backgroundColourString;
         backgroundColourString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("textColour"), false, true))
+    else if (StringMatch(settingName, wxT("textColour"), false, true))
     {
         textColourString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("linkColour"), false, true))
+    else if (StringMatch(settingName, wxT("linkColour"), false, true))
     {
         linkColourString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("followedLinkColour"), false, true))
+    else if (StringMatch(settingName, wxT("followedLinkColour"), false, true))
     {
         followedLinkColourString = copystring(settingValue);
     }
-    else if (StringMatch(settingName, _T("conversionMode"), false, true))
+    else if (StringMatch(settingName, wxT("conversionMode"), false, true))
     {
-        if (StringMatch(settingValue, _T("RTF"), false, true))
+        if (StringMatch(settingValue, wxT("RTF"), false, true))
         {
             winHelp = false; convertMode = TEX_RTF;
         }
-        else if (StringMatch(settingValue, _T("WinHelp"), false, true))
+        else if (StringMatch(settingValue, wxT("WinHelp"), false, true))
         {
             winHelp = true; convertMode = TEX_RTF;
         }
-        else if (StringMatch(settingValue, _T("XLP"), false, true) ||
-                 StringMatch(settingValue, _T("wxHelp"), false, true))
+        else if (StringMatch(settingValue, wxT("XLP"), false, true) ||
+                 StringMatch(settingValue, wxT("wxHelp"), false, true))
         {
             convertMode = TEX_XLP;
         }
-        else if (StringMatch(settingValue, _T("HTML"), false, true))
+        else if (StringMatch(settingValue, wxT("HTML"), false, true))
         {
             convertMode = TEX_HTML;
         }
         else
         {
             if (interactive)
-                OnInform(_T("Initialisation file error: conversionMode must be one of\nRTF, WinHelp, XLP (or wxHelp), HTML."));
-            wxStrcpy(errorCode, _T("Initialisation file error: conversionMode must be one of\nRTF, WinHelp, XLP (or wxHelp), HTML."));
+                OnInform(wxT("Initialisation file error: conversionMode must be one of\nRTF, WinHelp, XLP (or wxHelp), HTML."));
+            wxStrcpy(errorCode, wxT("Initialisation file error: conversionMode must be one of\nRTF, WinHelp, XLP (or wxHelp), HTML."));
         }
     }
-    else if (StringMatch(settingName, _T("documentFontSize"), false, true))
+    else if (StringMatch(settingName, wxT("documentFontSize"), false, true))
     {
         int n;
         RegisterIntSetting(settingValueStr, &n);
@@ -1442,7 +1442,7 @@ wxChar *RegisterSetting(const wxString& 
         else
         {
             wxChar buf[200];
-            wxSnprintf(buf, sizeof(buf), _T("Initialisation file error: nonstandard document font size %d."), n);
+            wxSnprintf(buf, sizeof(buf), wxT("Initialisation file error: nonstandard document font size %d."), n);
             if (interactive)
                 OnInform(buf);
             wxStrcpy(errorCode, buf);
@@ -1451,7 +1451,7 @@ wxChar *RegisterSetting(const wxString& 
     else
     {
         wxChar buf[200];
-        wxSnprintf(buf, sizeof(buf), _T("Initialisation file error: unrecognised setting %s."), settingName.c_str());
+        wxSnprintf(buf, sizeof(buf), wxT("Initialisation file error: unrecognised setting %s."), settingName.c_str());
         if (interactive)
             OnInform(buf);
         wxStrcpy(errorCode, buf);
@@ -1476,13 +1476,13 @@ bool ReadCustomMacros(const wxString& fi
         BibEatWhiteSpace(line);
         if (line.empty()) continue;
 
-        if (line[0] != _T('\\')) // Not a macro definition, so must be NAME=VALUE
+        if (line[0] != wxT('\\')) // Not a macro definition, so must be NAME=VALUE
         {
             wxString settingName = BibReadWord(line);
             BibEatWhiteSpace(line);
-            if (line.empty() || line[0] != _T('='))
+            if (line.empty() || line[0] != wxT('='))
             {
-                OnError(_T("Expected = following name: malformed tex2rtf.ini file."));
+                OnError(wxT("Expected = following name: malformed tex2rtf.ini file."));
                 return false;
             }
             else
@@ -1498,24 +1498,24 @@ bool ReadCustomMacros(const wxString& fi
             line = line.substr(1);
             wxString macroName = BibReadWord(line);
             BibEatWhiteSpace(line);
-            if (line[0] != _T('['))
+            if (line[0] != wxT('['))
             {
-                OnError(_T("Expected [ followed by number of arguments: malformed tex2rtf.ini file."));
+                OnError(wxT("Expected [ followed by number of arguments: malformed tex2rtf.ini file."));
                 return false;
             }
             line = line.substr(1);
-            wxString noAargStr = line.BeforeFirst(_T(']'));
-            line = line.AfterFirst(_T(']'));
+            wxString noAargStr = line.BeforeFirst(wxT(']'));
+            line = line.AfterFirst(wxT(']'));
             long noArgs;
             if (!noAargStr.ToLong(&noArgs) || line.empty())
             {
-                OnError(_T("Expected ] following number of arguments: malformed tex2rtf.ini file."));
+                OnError(wxT("Expected ] following number of arguments: malformed tex2rtf.ini file."));
                 return false;
             }
             BibEatWhiteSpace(line);
-            if (line[0] != _T('{'))
+            if (line[0] != wxT('{'))
             {
-                OnError(_T("Expected { followed by macro body: malformed tex2rtf.ini file."));
+                OnError(wxT("Expected { followed by macro body: malformed tex2rtf.ini file."));
                 return false;
             }
 
@@ -1531,7 +1531,7 @@ bool ReadCustomMacros(const wxString& fi
 
     }
     wxChar mbuf[200];
-    wxSnprintf(mbuf, sizeof(mbuf), _T("Read initialization file %s."), filename.c_str());
+    wxSnprintf(mbuf, sizeof(mbuf), wxT("Read initialization file %s."), filename.c_str());
     OnInform(mbuf);
     return true;
 }
@@ -1553,7 +1553,7 @@ void ShowCustomMacros(void)
   wxNode *node = CustomMacroList.GetFirst();
   if (!node)
   {
-    OnInform(_T("No custom macros loaded.\n"));
+    OnInform(wxT("No custom macros loaded.\n"));
     return;
   }
 
@@ -1561,8 +1561,8 @@ void ShowCustomMacros(void)
   while (node)
   {
     CustomMacro *macro = (CustomMacro *)node->GetData();
-    wxSnprintf(buf, sizeof(buf), _T("\\%s[%d]\n    {%s}"), macro->macroName, macro->noArgs,
-     macro->macroBody ? macro->macroBody : _T(""));
+    wxSnprintf(buf, sizeof(buf), wxT("\\%s[%d]\n    {%s}"), macro->macroName, macro->noArgs,
+     macro->macroBody ? macro->macroBody : wxT(""));
     OnInform(buf);
     node = node->GetNext();
   }
@@ -1579,12 +1579,12 @@ wxChar *ParseMultifieldString(wxChar *al
   bool keepGoing = true;
   while ((fieldIndex <= len) && keepGoing)
   {
-    if (allFields[fieldIndex] == _T(' '))
+    if (allFields[fieldIndex] == wxT(' '))
     {
       // Skip
       fieldIndex ++;
     }
-    else if (allFields[fieldIndex] == _T(','))
+    else if (allFields[fieldIndex] == wxT(','))
     {
       *pos = fieldIndex + 1;
       keepGoing = false;
@@ -1672,7 +1672,7 @@ bool FindColourHTMLString(wxChar *theNam
     ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
     if (wxStrcmp(theName, entry->name) == 0)
     {
-        wxStrcpy(buf, _T("#"));
+        wxStrcpy(buf, wxT("#"));
 
         wxChar buf2[3];
         DecToHex(entry->red, buf2);
@@ -1693,25 +1693,25 @@ bool FindColourHTMLString(wxChar *theNam
 void InitialiseColourTable(void)
 {
   // \\red0\\green0\\blue0;
-  AddColour(_T("black"), 0,0,0);
+  AddColour(wxT("black"), 0,0,0);
 
   // \\red0\\green0\\blue255;\\red0\\green255\\blue255;\n");
-  AddColour(_T("cyan"), 0,255,255);
+  AddColour(wxT("cyan"), 0,255,255);
 
   // \\red0\\green255\\blue0;
-  AddColour(_T("green"), 0,255,0);
+  AddColour(wxT("green"), 0,255,0);
 
   // \\red255\\green0\\blue255;
-  AddColour(_T("magenta"), 255,0,255);
+  AddColour(wxT("magenta"), 255,0,255);
 
   // \\red255\\green0\\blue0;
-  AddColour(_T("red"), 255,0,0);
+  AddColour(wxT("red"), 255,0,0);
 
   // \\red255\\green255\\blue0;
-  AddColour(_T("yellow"), 255,255,0);
+  AddColour(wxT("yellow"), 255,255,0);
 
   // \\red255\\green255\\blue255;}");
-  AddColour(_T("white"), 255,255,255);
+  AddColour(wxT("white"), 255,255,255);
 }
 
 /*
--- utils/tex2rtf/src/rtfutils.cpp-orig	2009-06-18 17:50:48.610251000 -0500
+++ utils/tex2rtf/src/rtfutils.cpp	2009-06-18 17:54:25.104278000 -0500
@@ -120,9 +120,9 @@ static wxChar *CurrentTopic = NULL;
 
 static bool InPopups()
 {
-  if (CurrentChapterName && (wxStrcmp(CurrentChapterName, _T("popups")) == 0))
+  if (CurrentChapterName && (wxStrcmp(CurrentChapterName, wxT("popups")) == 0))
     return true;
-  if (CurrentSectionName && (wxStrcmp(CurrentSectionName, _T("popups")) == 0))
+  if (CurrentSectionName && (wxStrcmp(CurrentSectionName, wxT("popups")) == 0))
     return true;
   return false;
 }
@@ -223,10 +223,10 @@ void OutputSectionKeyword(FILE *fd)
     else if ( wxTex2RTFBuffer[i] == '{' )
         return;
 
-  wxFprintf(fd, _T("K{\\footnote {K} "));
-  wxFprintf(fd, _T("%s"), wxTex2RTFBuffer);
+  wxFprintf(fd, wxT("K{\\footnote {K} "));
+  wxFprintf(fd, wxT("%s"), wxTex2RTFBuffer);
 
-  wxFprintf(fd, _T("}\n"));
+  wxFprintf(fd, wxT("}\n"));
 }
 
 // Write a line for the .cnt file, if we're doing this.
@@ -278,10 +278,10 @@ void WriteWinHelpContentsFileLine(wxChar
       {
         // At this level, we have a pointer to a further hierarchy.
         // So we need a 'book' consisting of (say) Chapter 1.
-        wxFprintf(WinHelpContentsFile, _T("%d %s\n"), level, title);
+        wxFprintf(WinHelpContentsFile, wxT("%d %s\n"), level, title);
 
         // Then we have a 'page' consisting of the text for this chapter
-        wxFprintf(WinHelpContentsFile, _T("%d %s=%s\n"), level+1, title, topicName);
+        wxFprintf(WinHelpContentsFile, wxT("%d %s=%s\n"), level+1, title, topicName);
 
         // Then we'll be writing out further pages or books at level + 1...
 
@@ -291,7 +291,7 @@ void WriteWinHelpContentsFileLine(wxChar
       }
       else
       {
-        wxFprintf(WinHelpContentsFile, _T("%d %s=%s\n"), level, title, topicName);
+        wxFprintf(WinHelpContentsFile, wxT("%d %s=%s\n"), level, title, topicName);
       }
     }
     else
@@ -299,13 +299,13 @@ void WriteWinHelpContentsFileLine(wxChar
       if (level == 1 || ContentsLevels[level-1])
       {
         // Always have a book at level 1
-        wxFprintf(WinHelpContentsFile, _T("%d %s\n"), level, title);
-        wxFprintf(WinHelpContentsFile, _T("%d %s=%s\n"), level+1, title, topicName);
+        wxFprintf(WinHelpContentsFile, wxT("%d %s\n"), level, title);
+        wxFprintf(WinHelpContentsFile, wxT("%d %s=%s\n"), level+1, title, topicName);
         ContentsLevels[level-1] = true;
       }
       else
         // Probably doesn't have children if it hasn't been added to the topic table
-        wxFprintf(WinHelpContentsFile, _T("%d %s=%s\n"), level, title, topicName);
+        wxFprintf(WinHelpContentsFile, wxT("%d %s=%s\n"), level, title, topicName);
     }
   }
 }
@@ -358,15 +358,15 @@ void GenerateKeywordsForTopic(wxChar *to
 
       // {K} is a strange fix to prevent words beginning with K not
       // being indexed properly
-      TexOutput(_T("K{\\footnote {K} "));
+      TexOutput(wxT("K{\\footnote {K} "));
       TexOutput(buf1);
       if (wxStrlen(buf2) > 0)
       {
         // Output subentry
-        TexOutput(_T(", "));
+        TexOutput(wxT(", "));
         TexOutput(buf2);
       }
-      TexOutput(_T("}\n"));
+      TexOutput(wxT("}\n"));
       node = node->GetNext();
     }
   }
@@ -384,14 +384,14 @@ void GenerateIndexEntry(wxChar *entry)
     wxChar buf1[100]; wxChar buf2[100];
     SplitIndexEntry(entry, buf1, buf2);
 
-    TexOutput(_T("{\\xe\\v {"));
+    TexOutput(wxT("{\\xe\\v {"));
     TexOutput(buf1);
     if (wxStrlen(buf2) > 0)
     {
-      TexOutput(_T("\\:"));
+      TexOutput(wxT("\\:"));
       TexOutput(buf2);
     }
-    TexOutput(_T("}}"));
+    TexOutput(wxT("}}"));
   }
 }
 
@@ -402,15 +402,15 @@ void GenerateIndexEntry(wxChar *entry)
 
 void WriteColourTable(FILE *fd)
 {
-  wxFprintf(fd, _T("{\\colortbl"));
+  wxFprintf(fd, wxT("{\\colortbl"));
   wxNode *node = ColourTable.GetFirst();
   while (node)
   {
     ColourTableEntry *entry = (ColourTableEntry *)node->GetData();
-    wxFprintf(fd, _T("\\red%d\\green%d\\blue%d;\n"), entry->red, entry->green, entry->blue);
+    wxFprintf(fd, wxT("\\red%d\\green%d\\blue%d;\n"), entry->red, entry->green, entry->blue);
     node = node->GetNext();
   }
-  wxFprintf(fd, _T("}"));
+  wxFprintf(fd, wxT("}"));
 }
 
 /*
@@ -424,22 +424,22 @@ void WriteHeadingStyle(FILE *fd, int hea
   {
     case 1:
     {
-      wxFprintf(fd, _T("\\sb300\\sa260\\f2\\b\\fs%d"), chapterFont*2);
+      wxFprintf(fd, wxT("\\sb300\\sa260\\f2\\b\\fs%d"), chapterFont*2);
       break;
     }
     case 2:
     {
-      wxFprintf(fd, _T("\\sb200\\sa240\\f2\\b\\fs%d"), sectionFont*2);
+      wxFprintf(fd, wxT("\\sb200\\sa240\\f2\\b\\fs%d"), sectionFont*2);
       break;
     }
     case 3:
     {
-      wxFprintf(fd, _T("\\sb120\\sa240\\f2\\b\\fs%d"), subsectionFont*2);
+      wxFprintf(fd, wxT("\\sb120\\sa240\\f2\\b\\fs%d"), subsectionFont*2);
       break;
     }
     case 4:
     {
-      wxFprintf(fd, _T("\\sb120\\sa240\\f2\\b\\fs%d"), subsectionFont*2);
+      wxFprintf(fd, wxT("\\sb120\\sa240\\f2\\b\\fs%d"), subsectionFont*2);
       break;
     }
     default:
@@ -449,66 +449,66 @@ void WriteHeadingStyle(FILE *fd, int hea
 
 void WriteRTFHeader(FILE *fd)
 {
-  wxFprintf(fd, _T("{\\rtf1\\%s \\deff0\n"), RTFCharset);
-  wxFprintf(fd, _T("{\\fonttbl{\\f0\\froman Times New Roman;}{\\f1\\ftech Symbol;}{\\f2\\fswiss Arial;}\n"));
-  wxFprintf(fd, _T("{\\f3\\fmodern Courier New;}{\\f4\\ftech Wingdings;}{\\f5\\ftech Monotype Sorts;}\n}"));
+  wxFprintf(fd, wxT("{\\rtf1\\%s \\deff0\n"), RTFCharset);
+  wxFprintf(fd, wxT("{\\fonttbl{\\f0\\froman Times New Roman;}{\\f1\\ftech Symbol;}{\\f2\\fswiss Arial;}\n"));
+  wxFprintf(fd, wxT("{\\f3\\fmodern Courier New;}{\\f4\\ftech Wingdings;}{\\f5\\ftech Monotype Sorts;}\n}"));
   /*
    * Style sheet
    */
-  wxFprintf(fd, _T("{\\stylesheet{\\f2\\fs22\\sa200 \\snext0 Normal;}\n"));
+  wxFprintf(fd, wxT("{\\stylesheet{\\f2\\fs22\\sa200 \\snext0 Normal;}\n"));
   // Headings
-  wxFprintf(fd, _T("{\\s1 ")); WriteHeadingStyle(fd, 1); wxFprintf(fd, _T("\\sbasedon0\\snext0 heading 1;}\n"));
-  wxFprintf(fd, _T("{\\s2 ")); WriteHeadingStyle(fd, 2); wxFprintf(fd, _T("\\sbasedon0\\snext0 heading 2;}\n"));
-  wxFprintf(fd, _T("{\\s3 ")); WriteHeadingStyle(fd, 3); wxFprintf(fd, _T("\\sbasedon0\\snext0 heading 3;}\n"));
-  wxFprintf(fd, _T("{\\s4 ")); WriteHeadingStyle(fd, 4); wxFprintf(fd, _T("\\sbasedon0\\snext0 heading 4;}\n"));
+  wxFprintf(fd, wxT("{\\s1 ")); WriteHeadingStyle(fd, 1); wxFprintf(fd, wxT("\\sbasedon0\\snext0 heading 1;}\n"));
+  wxFprintf(fd, wxT("{\\s2 ")); WriteHeadingStyle(fd, 2); wxFprintf(fd, wxT("\\sbasedon0\\snext0 heading 2;}\n"));
+  wxFprintf(fd, wxT("{\\s3 ")); WriteHeadingStyle(fd, 3); wxFprintf(fd, wxT("\\sbasedon0\\snext0 heading 3;}\n"));
+  wxFprintf(fd, wxT("{\\s4 ")); WriteHeadingStyle(fd, 4); wxFprintf(fd, wxT("\\sbasedon0\\snext0 heading 4;}\n"));
 
   // Code style
-  wxFprintf(fd, _T("{\\s10\\ql \\li720\\ri0\\nowidctlpar\\faauto\\rin0\\lin720\\itap0 \\cbpat17\
+  wxFprintf(fd, wxT("{\\s10\\ql \\li720\\ri0\\nowidctlpar\\faauto\\rin0\\lin720\\itap0 \\cbpat17\
 \\f2\\fs20 \\sbasedon0 \\snext24 Code;}\n"));
 
   // Table of contents styles
-  wxFprintf(fd, _T("{\\s20\\sb300\\tqr\\tldot\\tx8640 \\b\\f2 \\sbasedon0\\snext0 toc 1;}\n"));
+  wxFprintf(fd, wxT("{\\s20\\sb300\\tqr\\tldot\\tx8640 \\b\\f2 \\sbasedon0\\snext0 toc 1;}\n"));
 
-  wxFprintf(fd, _T("{\\s21\\sb90\\tqr\\tldot\\li400\\tqr\\tx8640 \\f2\\fs20\\sbasedon0\\snext0 toc 2;}\n"));
-  wxFprintf(fd, _T("{\\s22\\sb90\\tqr\\tldot\\li800\\tx8640 \\f2\\fs20 \\sbasedon0\\snext0 toc 3;}\n"));
-  wxFprintf(fd, _T("{\\s23\\sb90\\tqr\\tldot\\li1200\\tx8640 \\f2\\fs20 \\sbasedon0\\snext0 toc 4;}\n"));
+  wxFprintf(fd, wxT("{\\s21\\sb90\\tqr\\tldot\\li400\\tqr\\tx8640 \\f2\\fs20\\sbasedon0\\snext0 toc 2;}\n"));
+  wxFprintf(fd, wxT("{\\s22\\sb90\\tqr\\tldot\\li800\\tx8640 \\f2\\fs20 \\sbasedon0\\snext0 toc 3;}\n"));
+  wxFprintf(fd, wxT("{\\s23\\sb90\\tqr\\tldot\\li1200\\tx8640 \\f2\\fs20 \\sbasedon0\\snext0 toc 4;}\n"));
 
   // Index styles
-  wxFprintf(fd, _T("{\\s30\\fi-200\\li200\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 1;}\n"));
-  wxFprintf(fd, _T("{\\s31\\fi-200\\li400\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 2;}\n"));
-  wxFprintf(fd, _T("{\\s32\\fi-200\\li600\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 3;}\n"));
-  wxFprintf(fd, _T("{\\s33\\fi-200\\li800\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 4;}\n"));
-  wxFprintf(fd, _T("{\\s35\\qc\\sb240\\sa120 \\b\\f2\\fs26 \\sbasedon0\\snext30 index heading;}\n"));
-  wxFprintf(fd, _T("}\n"));
+  wxFprintf(fd, wxT("{\\s30\\fi-200\\li200\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 1;}\n"));
+  wxFprintf(fd, wxT("{\\s31\\fi-200\\li400\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 2;}\n"));
+  wxFprintf(fd, wxT("{\\s32\\fi-200\\li600\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 3;}\n"));
+  wxFprintf(fd, wxT("{\\s33\\fi-200\\li800\\tqr\\tx3960 \\f2\\fs18 \\sbasedon0\\snext0 index 4;}\n"));
+  wxFprintf(fd, wxT("{\\s35\\qc\\sb240\\sa120 \\b\\f2\\fs26 \\sbasedon0\\snext30 index heading;}\n"));
+  wxFprintf(fd, wxT("}\n"));
 
   WriteColourTable(fd);
-  wxFprintf(fd, _T("\n\\ftnbj\\ftnrestart")); // Latex default is footnotes at bottom of page, not section.
-  wxFprintf(fd, _T("\n"));
+  wxFprintf(fd, wxT("\n\\ftnbj\\ftnrestart")); // Latex default is footnotes at bottom of page, not section.
+  wxFprintf(fd, wxT("\n"));
 }
 
 void OutputNumberStyle(wxChar *numberStyle)
 {
   if (numberStyle)
   {
-    if (wxStrcmp(numberStyle, _T("arabic")) == 0)
+    if (wxStrcmp(numberStyle, wxT("arabic")) == 0)
     {
-      TexOutput(_T("\\pgndec"));
+      TexOutput(wxT("\\pgndec"));
     }
-    else if (wxStrcmp(numberStyle, _T("roman")) == 0)
+    else if (wxStrcmp(numberStyle, wxT("roman")) == 0)
     {
-      TexOutput(_T("\\pgnlcrm"));
+      TexOutput(wxT("\\pgnlcrm"));
     }
-    else if (wxStrcmp(numberStyle, _T("Roman")) == 0)
+    else if (wxStrcmp(numberStyle, wxT("Roman")) == 0)
     {
-      TexOutput(_T("\\pgnucrm"));
+      TexOutput(wxT("\\pgnucrm"));
     }
-    else if (wxStrcmp(numberStyle, _T("alph")) == 0)
+    else if (wxStrcmp(numberStyle, wxT("alph")) == 0)
     {
-      TexOutput(_T("\\pgnlcltr"));
+      TexOutput(wxT("\\pgnlcltr"));
     }
-    else if (wxStrcmp(numberStyle, _T("Alph")) == 0)
+    else if (wxStrcmp(numberStyle, wxT("Alph")) == 0)
     {
-      TexOutput(_T("\\pgnucltr"));
+      TexOutput(wxT("\\pgnucltr"));
     }
   }
 }
@@ -524,56 +524,56 @@ bool WriteHPJ(const wxString& filename)
     wxChar rtfFile[50];
     wxStrcpy(hpjFilename, filename);
     StripExtension(hpjFilename);
-    wxStrcat(hpjFilename, _T(".hpj"));
+    wxStrcat(hpjFilename, wxT(".hpj"));
 
     wxStrcpy(helpFile, wxFileNameFromPath(filename));
     StripExtension(helpFile);
     wxStrcpy(rtfFile, helpFile);
-    wxStrcat(helpFile, _T(".hlp"));
-    wxStrcat(rtfFile, _T(".rtf"));
+    wxStrcat(helpFile, wxT(".hlp"));
+    wxStrcat(rtfFile, wxT(".rtf"));
 
-    FILE *fd = wxFopen(hpjFilename, _T("w"));
+    FILE *fd = wxFopen(hpjFilename, wxT("w"));
     if (!fd)
         return false;
 
     wxChar *helpTitle = winHelpTitle;
     if (!helpTitle)
-        helpTitle = _T("Untitled");
+        helpTitle = wxT("Untitled");
 
     wxString thePath = wxPathOnly(InputFile);
     if (thePath.empty())
-        thePath = _T(".");
-    wxFprintf(fd, _T("[OPTIONS]\n"));
-    wxFprintf(fd, _T("BMROOT=%s ; Assume that bitmaps are where the source is\n"), thePath.c_str());
-    wxFprintf(fd, _T("TITLE=%s\n"), helpTitle);
-    wxFprintf(fd, _T("CONTENTS=Contents\n"));
+        thePath = wxT(".");
+    wxFprintf(fd, wxT("[OPTIONS]\n"));
+    wxFprintf(fd, wxT("BMROOT=%s ; Assume that bitmaps are where the source is\n"), thePath.c_str());
+    wxFprintf(fd, wxT("TITLE=%s\n"), helpTitle);
+    wxFprintf(fd, wxT("CONTENTS=Contents\n"));
 
     if (winHelpVersion > 3)
     {
-        wxFprintf(fd, _T("; COMPRESS=12 Hall Zeck ; Max compression, but needs lots of memory\n"));
-        wxFprintf(fd, _T("COMPRESS=8 Zeck\n"));
-        wxFprintf(fd, _T("LCID=0x809 0x0 0x0 ;English (British)\n"));
-        wxFprintf(fd, _T("HLP=.\\%s.hlp\n"), wxFileNameFromPath(FileRoot));
+        wxFprintf(fd, wxT("; COMPRESS=12 Hall Zeck ; Max compression, but needs lots of memory\n"));
+        wxFprintf(fd, wxT("COMPRESS=8 Zeck\n"));
+        wxFprintf(fd, wxT("LCID=0x809 0x0 0x0 ;English (British)\n"));
+        wxFprintf(fd, wxT("HLP=.\\%s.hlp\n"), wxFileNameFromPath(FileRoot));
     }
     else
     {
-        wxFprintf(fd, _T("COMPRESS=HIGH\n"));
+        wxFprintf(fd, wxT("COMPRESS=HIGH\n"));
     }
-    wxFprintf(fd, _T("\n"));
+    wxFprintf(fd, wxT("\n"));
 
     if (winHelpVersion > 3)
     {
-        wxFprintf(fd, _T("[WINDOWS]\n"));
-        wxFprintf(fd, _T("Main=\"\",(553,102,400,600),20736,(r14876671),(r12632256),f3\n"));
-        wxFprintf(fd, _T("\n"));
+        wxFprintf(fd, wxT("[WINDOWS]\n"));
+        wxFprintf(fd, wxT("Main=\"\",(553,102,400,600),20736,(r14876671),(r12632256),f3\n"));
+        wxFprintf(fd, wxT("\n"));
     }
 
-    wxFprintf(fd, _T("[FILES]\n%s\n\n"), rtfFile);
-    wxFprintf(fd, _T("[CONFIG]\n"));
+    wxFprintf(fd, wxT("[FILES]\n%s\n\n"), rtfFile);
+    wxFprintf(fd, wxT("[CONFIG]\n"));
     if (useUpButton)
-        wxFprintf(fd, _T("CreateButton(\"Up\", \"&Up\", \"JumpId(`%s', `Contents')\")\n"), helpFile);
-    wxFprintf(fd, _T("BrowseButtons()\n\n"));
-    wxFprintf(fd, _T("[MAP]\n\n[BITMAPS]\n\n"));
+        wxFprintf(fd, wxT("CreateButton(\"Up\", \"&Up\", \"JumpId(`%s', `Contents')\")\n"), helpFile);
+    wxFprintf(fd, wxT("BrowseButtons()\n\n"));
+    wxFprintf(fd, wxT("[MAP]\n\n[BITMAPS]\n\n"));
     fclose(fd);
     return true;
 }
@@ -602,8 +602,8 @@ void ProcessText2RTF(TexChunk *chunk)
     {
       if (inVerbatim)
       {
-        BigBuffer[ptr] = 0; wxStrcat(BigBuffer, _T("\\par\n")); ptr += 5;
-//        BigBuffer[ptr] = 0; wxStrcat(BigBuffer, _T("\\par{\\v this was verbatim}\n")); ptr += 5;
+        BigBuffer[ptr] = 0; wxStrcat(BigBuffer, wxT("\\par\n")); ptr += 5;
+//        BigBuffer[ptr] = 0; wxStrcat(BigBuffer, wxT("\\par{\\v this was verbatim}\n")); ptr += 5;
         i ++;
         changed = true;
       }
@@ -759,11 +759,11 @@ wxChar *GetBrowseString(void)
 {
   wxChar buf[10];
   browseId ++;
-  wxSnprintf(buf, sizeof(buf), _T("%ld"), browseId);
+  wxSnprintf(buf, sizeof(buf), wxT("%ld"), browseId);
   int noZeroes = 5-wxStrlen(buf);
-  wxStrcpy(browseBuf, _T("browse"));
+  wxStrcpy(browseBuf, wxT("browse"));
   for (int i = 0; i < noZeroes; i++)
-    wxStrcat(browseBuf, _T("0"));
+    wxStrcat(browseBuf, wxT("0"));
   wxStrcat(browseBuf, buf);
   return browseBuf;
 }
@@ -803,11 +803,11 @@ void WriteEnvironmentStyles(void)
   if (!inTabular && (ParIndent > 0) && (forbidParindent == 0))
   {
     wxChar buf[15];
-    wxSnprintf(buf, sizeof(buf), _T("\\fi%d"), ParIndent*20); // Convert points to TWIPS
+    wxSnprintf(buf, sizeof(buf), wxT("\\fi%d"), ParIndent*20); // Convert points to TWIPS
     TexOutput(buf);
   }
   if (environmentStack.GetCount() > 0 || (ParIndent > 0))
-    TexOutput(_T("\n"));
+    TexOutput(wxT("\n"));
 }
 
 
@@ -819,55 +819,55 @@ void WriteEnvironmentStyles(void)
 void OutputRTFHeaderCommands(void)
 {
   wxChar buf[300];
-  if (PageStyle && wxStrcmp(PageStyle, _T("plain")) == 0)
+  if (PageStyle && wxStrcmp(PageStyle, wxT("plain")) == 0)
   {
-    TexOutput(_T("{\\headerl }{\\headerr }"));
+    TexOutput(wxT("{\\headerl }{\\headerr }"));
   }
-  else if (PageStyle && wxStrcmp(PageStyle, _T("empty")) == 0)
+  else if (PageStyle && wxStrcmp(PageStyle, wxT("empty")) == 0)
   {
-    TexOutput(_T("{\\headerl }{\\headerr }"));
+    TexOutput(wxT("{\\headerl }{\\headerr }"));
   }
-  else if (PageStyle && wxStrcmp(PageStyle, _T("headings")) == 0)
+  else if (PageStyle && wxStrcmp(PageStyle, wxT("headings")) == 0)
   {
     // Left header
-    TexOutput(_T("{\\headerl\\fi0 "));
+    TexOutput(wxT("{\\headerl\\fi0 "));
 
     if (headerRule)
-      TexOutput(_T("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
+      TexOutput(wxT("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
 
-    TexOutput(_T("{\\i \\qr "));
+    TexOutput(wxT("{\\i \\qr "));
     if (DocumentStyle == LATEX_ARTICLE)
     {
-      wxSnprintf(buf, sizeof(buf), _T("SECTION %d"), sectionNo);
+      wxSnprintf(buf, sizeof(buf), wxT("SECTION %d"), sectionNo);
       TexOutput(buf);
     }
     else
     {
-      wxSnprintf(buf, sizeof(buf), _T("CHAPTER %d: "), chapterNo);
+      wxSnprintf(buf, sizeof(buf), wxT("CHAPTER %d: "), chapterNo);
       TexOutput(buf);
     }
-    TexOutput(_T("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
-    TexOutput(_T("}\\par\\pard}"));
+    TexOutput(wxT("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+    TexOutput(wxT("}\\par\\pard}"));
 
     // Right header
-    TexOutput(_T("{\\headerr\\fi0 "));
+    TexOutput(wxT("{\\headerr\\fi0 "));
 
     if (headerRule)
-      TexOutput(_T("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
+      TexOutput(wxT("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
 
-    TexOutput(_T("{\\i \\qc "));
+    TexOutput(wxT("{\\i \\qc "));
     if (DocumentStyle == LATEX_ARTICLE)
     {
-      wxSnprintf(buf, sizeof(buf), _T("SECTION %d"), sectionNo);
+      wxSnprintf(buf, sizeof(buf), wxT("SECTION %d"), sectionNo);
       TexOutput(buf);
     }
     else
     {
-      wxSnprintf(buf, sizeof(buf), _T("CHAPTER %d"), chapterNo);
+      wxSnprintf(buf, sizeof(buf), wxT("CHAPTER %d"), chapterNo);
       TexOutput(buf);
     }
-    TexOutput(_T("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
-    TexOutput(_T("}\\par\\pard}"));
+    TexOutput(wxT("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+    TexOutput(wxT("}\\par\\pard}"));
   }
   else
   {
@@ -876,70 +876,70 @@ void OutputRTFHeaderCommands(void)
 
     if (LeftHeaderEven || CentreHeaderEven || RightHeaderEven)
     {
-      TexOutput(_T("{\\headerl\\fi0 "));
+      TexOutput(wxT("{\\headerl\\fi0 "));
 
       if (headerRule)
-        TexOutput(_T("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
+        TexOutput(wxT("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
 
       if (LeftHeaderEven)
       {
         if (!CentreHeaderEven && !RightHeaderEven)
-          TexOutput(_T("\\ql "));
+          TexOutput(wxT("\\ql "));
         TraverseChildrenFromChunk(LeftHeaderEven);
       }
       if (CentreHeaderEven)
       {
         if (!LeftHeaderEven && !RightHeaderEven)
-          TexOutput(_T("\\qc "));
+          TexOutput(wxT("\\qc "));
         else
-          TexOutput(_T("\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(CentreHeaderEven);
       }
       if (RightHeaderEven)
       {
         if (!LeftHeaderEven && !CentreHeaderEven)
-          TexOutput(_T("\\qr "));
+          TexOutput(wxT("\\qr "));
         else
-          TexOutput(_T("\\tab\\tab\\tab\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(RightHeaderEven);
       }
-      TexOutput(_T("\\par\\pard}"));
+      TexOutput(wxT("\\par\\pard}"));
     }
 
     if (LeftHeaderOdd || CentreHeaderOdd || RightHeaderOdd)
     {
-      TexOutput(_T("{\\headerr\\fi0 "));
+      TexOutput(wxT("{\\headerr\\fi0 "));
 
       if (headerRule)
-        TexOutput(_T("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
+        TexOutput(wxT("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
 
       if (LeftHeaderOdd)
       {
         if (!CentreHeaderOdd && !RightHeaderOdd)
-          TexOutput(_T("\\ql "));
+          TexOutput(wxT("\\ql "));
         TraverseChildrenFromChunk(LeftHeaderOdd);
       }
       if (CentreHeaderOdd)
       {
         if (!LeftHeaderOdd && !RightHeaderOdd)
-          TexOutput(_T("\\qc "));
+          TexOutput(wxT("\\qc "));
         else
-          TexOutput(_T("\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(CentreHeaderOdd);
       }
       if (RightHeaderOdd)
       {
         if (!LeftHeaderOdd && !CentreHeaderOdd)
-          TexOutput(_T("\\qr "));
+          TexOutput(wxT("\\qr "));
         else
-          TexOutput(_T("\\tab\\tab\\tab\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(RightHeaderOdd);
       }
-      TexOutput(_T("\\par\\pard}"));
+      TexOutput(wxT("\\par\\pard}"));
     }
     // As an approximation, don't put a header on the first page of a section.
     // This may not always be desired, but it's a reasonable guess.
-    TexOutput(_T("{\\headerf }"));
+    TexOutput(wxT("{\\headerf }"));
 
     forbidResetPar = oldForbidResetPar;
   }
@@ -947,120 +947,120 @@ void OutputRTFHeaderCommands(void)
 
 void OutputRTFFooterCommands(void)
 {
-  if (PageStyle && wxStrcmp(PageStyle, _T("plain")) == 0)
+  if (PageStyle && wxStrcmp(PageStyle, wxT("plain")) == 0)
   {
-    TexOutput(_T("{\\footerl\\fi0 "));
+    TexOutput(wxT("{\\footerl\\fi0 "));
     if (footerRule)
-      TexOutput(_T("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
-    TexOutput(_T("{\\qc "));
-    TexOutput(_T("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
-    TexOutput(_T("}\\par\\pard}"));
+      TexOutput(wxT("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
+    TexOutput(wxT("{\\qc "));
+    TexOutput(wxT("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+    TexOutput(wxT("}\\par\\pard}"));
 
-    TexOutput(_T("{\\footerr\\fi0 "));
+    TexOutput(wxT("{\\footerr\\fi0 "));
     if (footerRule)
-      TexOutput(_T("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
-    TexOutput(_T("{\\qc "));
-    TexOutput(_T("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
-    TexOutput(_T("}\\par\\pard}"));
+      TexOutput(wxT("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
+    TexOutput(wxT("{\\qc "));
+    TexOutput(wxT("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+    TexOutput(wxT("}\\par\\pard}"));
   }
-  else if (PageStyle && wxStrcmp(PageStyle, _T("empty")) == 0)
+  else if (PageStyle && wxStrcmp(PageStyle, wxT("empty")) == 0)
   {
-    TexOutput(_T("{\\footerl }{\\footerr }"));
+    TexOutput(wxT("{\\footerl }{\\footerr }"));
   }
-  else if (PageStyle && wxStrcmp(PageStyle, _T("headings")) == 0)
+  else if (PageStyle && wxStrcmp(PageStyle, wxT("headings")) == 0)
   {
-    TexOutput(_T("{\\footerl }{\\footerr }"));
+    TexOutput(wxT("{\\footerl }{\\footerr }"));
   }
   else
   {
     if (LeftFooterEven || CentreFooterEven || RightFooterEven)
     {
-      TexOutput(_T("{\\footerl\\fi0 "));
+      TexOutput(wxT("{\\footerl\\fi0 "));
       if (footerRule)
-        TexOutput(_T("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
+        TexOutput(wxT("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
       if (LeftFooterEven)
       {
         if (!CentreFooterEven && !RightFooterEven)
-          TexOutput(_T("\\ql "));
+          TexOutput(wxT("\\ql "));
         TraverseChildrenFromChunk(LeftFooterEven);
       }
       if (CentreFooterEven)
       {
         if (!LeftFooterEven && !RightFooterEven)
-          TexOutput(_T("\\qc "));
+          TexOutput(wxT("\\qc "));
         else
-          TexOutput(_T("\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(CentreFooterEven);
       }
       if (RightFooterEven)
       {
         if (!LeftFooterEven && !CentreFooterEven)
-          TexOutput(_T("\\qr "));
+          TexOutput(wxT("\\qr "));
         else
-          TexOutput(_T("\\tab\\tab\\tab\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(RightFooterEven);
       }
-      TexOutput(_T("\\par\\pard}"));
+      TexOutput(wxT("\\par\\pard}"));
     }
 
     if (LeftFooterOdd || CentreFooterOdd || RightFooterOdd)
     {
-      TexOutput(_T("{\\footerr\\fi0 "));
+      TexOutput(wxT("{\\footerr\\fi0 "));
       if (footerRule)
-        TexOutput(_T("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
+        TexOutput(wxT("\\brdrt\\brdrs\\brdrw15\\brsp20 "));
       if (LeftFooterOdd)
       {
         if (!CentreFooterOdd && !RightFooterOdd)
-          TexOutput(_T("\\ql "));
+          TexOutput(wxT("\\ql "));
         TraverseChildrenFromChunk(LeftFooterOdd);
       }
       if (CentreFooterOdd)
       {
         if (!LeftFooterOdd && !RightFooterOdd)
-          TexOutput(_T("\\qc "));
+          TexOutput(wxT("\\qc "));
         else
-          TexOutput(_T("\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(CentreFooterOdd);
       }
       if (RightFooterOdd)
       {
         if (!LeftFooterOdd && !CentreFooterOdd)
-          TexOutput(_T("\\qr "));
+          TexOutput(wxT("\\qr "));
         else
-          TexOutput(_T("\\tab\\tab\\tab\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(RightFooterOdd);
       }
-      TexOutput(_T("\\par\\pard}"));
+      TexOutput(wxT("\\par\\pard}"));
     }
 
     // As an approximation, put a footer on the first page of a section.
     // This may not always be desired, but it's a reasonable guess.
     if (LeftFooterOdd || CentreFooterOdd || RightFooterOdd)
     {
-      TexOutput(_T("{\\footerf\\fi0 "));
+      TexOutput(wxT("{\\footerf\\fi0 "));
       if (LeftFooterOdd)
       {
         if (!CentreFooterOdd && !RightFooterOdd)
-          TexOutput(_T("\\ql "));
+          TexOutput(wxT("\\ql "));
         TraverseChildrenFromChunk(LeftFooterOdd);
       }
       if (CentreFooterOdd)
       {
         if (!LeftFooterOdd && !RightFooterOdd)
-          TexOutput(_T("\\qc "));
+          TexOutput(wxT("\\qc "));
         else
-          TexOutput(_T("\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(CentreFooterOdd);
       }
       if (RightFooterOdd)
       {
         if (!LeftFooterOdd && !CentreFooterOdd)
-          TexOutput(_T("\\qr "));
+          TexOutput(wxT("\\qr "));
         else
-          TexOutput(_T("\\tab\\tab\\tab\\tab\\tab\\tab "));
+          TexOutput(wxT("\\tab\\tab\\tab\\tab\\tab\\tab "));
         TraverseChildrenFromChunk(RightFooterOdd);
       }
-      TexOutput(_T("\\par\\pard}"));
+      TexOutput(wxT("\\par\\pard}"));
     }
   }
 }
@@ -1070,7 +1070,7 @@ void RTFOnMacro(int macroId, int no_args
 {
 /*
   wxChar tmpBuf[40];
-  wxSnprintf(tmpBuf, sizeof(tmpBuf), _T("%d (%d)"), macroId, (int)start);
+  wxSnprintf(tmpBuf, sizeof(tmpBuf), wxT("%d (%d)"), macroId, (int)start);
   OutputDebugString("RTFOnMacro Start "); OutputDebugString(tmpBuf);
   OutputDebugString("\n"); wxYield();
 */
@@ -1121,9 +1121,9 @@ void RTFOnMacro(int macroId, int no_args
       if (winHelp)
       {
         if (!InPopups())
-          wxFprintf(Contents, _T("\n{\\uldb "));
-        wxFprintf(Chapters, _T("\\page"));
-        wxFprintf(Chapters, _T("\n${\\footnote "));
+          wxFprintf(Contents, wxT("\n{\\uldb "));
+        wxFprintf(Chapters, wxT("\\page"));
+        wxFprintf(Chapters, wxT("\n${\\footnote "));
         if (!InPopups())
           SetCurrentOutputs(Contents, Chapters);
         else
@@ -1131,12 +1131,12 @@ void RTFOnMacro(int macroId, int no_args
       }
       else
       {
-        wxFprintf(Chapters, _T("\\sect\\pgncont\\titlepg\n"));
+        wxFprintf(Chapters, wxT("\\sect\\pgncont\\titlepg\n"));
 
         // If a non-custom page style, we generate the header now.
-        if (PageStyle && (wxStrcmp(PageStyle, _T("plain")) == 0 ||
-                          wxStrcmp(PageStyle, _T("empty")) == 0 ||
-                          wxStrcmp(PageStyle, _T("headings")) == 0))
+        if (PageStyle && (wxStrcmp(PageStyle, wxT("plain")) == 0 ||
+                          wxStrcmp(PageStyle, wxT("empty")) == 0 ||
+                          wxStrcmp(PageStyle, wxT("headings")) == 0))
         {
           OutputRTFHeaderCommands();
           OutputRTFFooterCommands();
@@ -1153,11 +1153,11 @@ void RTFOnMacro(int macroId, int no_args
           if (macroId == ltCHAPTER)
           {
             // Section
-            wxFprintf(Contents, _T("\\par\n\\pard{\\b %d\\tab "), chapterNo);
+            wxFprintf(Contents, wxT("\\par\n\\pard{\\b %d\\tab "), chapterNo);
           }
           else if (macroId == ltCHAPTERHEADING)
           {
-            wxFprintf(Contents, _T("\\par\n\\pard{\\b "));
+            wxFprintf(Contents, wxT("\\par\n\\pard{\\b "));
           }
           else SetCurrentOutput(NULL); // No entry in table of contents
         }
@@ -1172,11 +1172,11 @@ void RTFOnMacro(int macroId, int no_args
 
         if (winHelp)
         {
-          wxFprintf(Contents, _T("}{\\v %s}\\pard\\par\n"), topicName);
+          wxFprintf(Contents, wxT("}{\\v %s}\\pard\\par\n"), topicName);
           //WriteEnvironmentStyles();
         }
         else if ((macroId == ltCHAPTER) || (macroId == ltCHAPTERHEADING))
-          wxFprintf(Contents, _T("}\\par\\par\\pard\n"));
+          wxFprintf(Contents, wxT("}\\par\\par\\pard\n"));
 
         // From here, just output to chapter
         SetCurrentOutput(Chapters);
@@ -1184,8 +1184,8 @@ void RTFOnMacro(int macroId, int no_args
 
       if (winHelp)
       {
-        wxFprintf(Chapters, _T("}\n#{\\footnote %s}\n"), topicName);
-        wxFprintf(Chapters, _T("+{\\footnote %s}\n"), GetBrowseString());
+        wxFprintf(Chapters, wxT("}\n#{\\footnote %s}\n"), topicName);
+        wxFprintf(Chapters, wxT("+{\\footnote %s}\n"), GetBrowseString());
 
         OutputSectionKeyword(Chapters);
 
@@ -1195,37 +1195,37 @@ void RTFOnMacro(int macroId, int no_args
           // If we're generating a .cnt file, we don't want to be able
           // jump up to the old-style contents page, so disable it.
           if (winHelpContents)
-            wxFprintf(Chapters, _T("!{\\footnote DisableButton(\"Up\")}\n"));
+            wxFprintf(Chapters, wxT("!{\\footnote DisableButton(\"Up\")}\n"));
           else
-            wxFprintf(Chapters, _T("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
-               wxFileNameFromPath(FileRoot), _T("Contents"));
+            wxFprintf(Chapters, wxT("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
+               wxFileNameFromPath(FileRoot), wxT("Contents"));
         }
       }
 
       if (!InPopups())
       {
-      wxChar *styleCommand = _T("");
+      wxChar *styleCommand = wxT("");
       if (!winHelp && useHeadingStyles && (macroId == ltCHAPTER || macroId == ltCHAPTERHEADING || macroId == ltCHAPTERHEADINGSTAR))
-        styleCommand = _T("\\s1");
-      wxFprintf(Chapters, _T("\\pard{%s"), ((winHelp && !InPopups()) ? _T("\\keepn\\sa140\\sb140") : styleCommand));
-      WriteHeadingStyle(Chapters, 1);  wxFprintf(Chapters, _T(" "));
+        styleCommand = wxT("\\s1");
+      wxFprintf(Chapters, wxT("\\pard{%s"), ((winHelp && !InPopups()) ? wxT("\\keepn\\sa140\\sb140") : styleCommand));
+      WriteHeadingStyle(Chapters, 1);  wxFprintf(Chapters, wxT(" "));
       if (!winHelp)
       {
         if (macroId == ltCHAPTER)
         {
           if (useWord)
 //            wxFprintf(Chapters, "{\\bkmkstart %s}%d{\\bkmkend %s}. ", topicName, chapterNo,
-            wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
+            wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
           else
-            wxFprintf(Chapters, _T("%d. "), chapterNo);
+            wxFprintf(Chapters, wxT("%d. "), chapterNo);
         }
         else if ( useWord )
         {
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
         }
       }
       OutputCurrentSection();
-      TexOutput(_T("\\par\\pard}\n"));
+      TexOutput(wxT("\\par\\pard}\n"));
       }
       issuedNewParagraph = 1;
       WriteEnvironmentStyles();
@@ -1270,20 +1270,20 @@ void RTFOnMacro(int macroId, int no_args
         // Newline for a new section if this is an article
         if ((DocumentStyle == LATEX_ARTICLE) &&
             ((macroId == ltSECTION) || (macroId == ltSECTIONSTAR) || (macroId == ltSECTIONHEADINGSTAR)))
-          wxFprintf(Sections, _T("\\page\n"));
+          wxFprintf(Sections, wxT("\\page\n"));
 
         if (!InPopups())
-          wxFprintf(jumpFrom, _T("\n{\\uldb "));
+          wxFprintf(jumpFrom, wxT("\n{\\uldb "));
       }
       else
       {
         if (DocumentStyle == LATEX_ARTICLE)
         {
-          TexOutput(_T("\\sect\\pgncont\n"));
+          TexOutput(wxT("\\sect\\pgncont\n"));
           // If a non-custom page style, we generate the header now.
-          if (PageStyle && (wxStrcmp(PageStyle, _T("plain")) == 0 ||
-                            wxStrcmp(PageStyle, _T("empty")) == 0 ||
-                            wxStrcmp(PageStyle, _T("headings")) == 0))
+          if (PageStyle && (wxStrcmp(PageStyle, wxT("plain")) == 0 ||
+                            wxStrcmp(PageStyle, wxT("empty")) == 0 ||
+                            wxStrcmp(PageStyle, wxT("headings")) == 0))
           {
             OutputRTFHeaderCommands();
             OutputRTFFooterCommands();
@@ -1296,9 +1296,9 @@ void RTFOnMacro(int macroId, int no_args
           if (!InPopups())
           {
             if (DocumentStyle == LATEX_REPORT)
-              wxFprintf(Contents, _T("\n\\pard{\\tab %d.%d\\tab "), chapterNo, sectionNo);
+              wxFprintf(Contents, wxT("\n\\pard{\\tab %d.%d\\tab "), chapterNo, sectionNo);
             else
-              wxFprintf(Contents, _T("\\par\n\\pard{\\b %d\\tab "), sectionNo);
+              wxFprintf(Contents, wxT("\\par\n\\pard{\\b %d\\tab "), sectionNo);
           }
         }
         else if (macroId == ltSECTIONHEADING)
@@ -1306,9 +1306,9 @@ void RTFOnMacro(int macroId, int no_args
           if (!InPopups())
           {
             if (DocumentStyle == LATEX_REPORT)
-              wxFprintf(Contents, _T("\n\\pard{\\tab ")); //, chapterNo, sectionNo);
+              wxFprintf(Contents, wxT("\n\\pard{\\tab ")); //, chapterNo, sectionNo);
             else
-              wxFprintf(Contents, _T("\\par\n\\pard{\\b ")); //, sectionNo);
+              wxFprintf(Contents, wxT("\\par\n\\pard{\\b ")); //, sectionNo);
           }
         }
         else SetCurrentOutput(NULL);
@@ -1317,12 +1317,12 @@ void RTFOnMacro(int macroId, int no_args
       if (startedSections)
       {
         if (winHelp)
-          wxFprintf(Sections, _T("\\page\n"));
+          wxFprintf(Sections, wxT("\\page\n"));
       }
       startedSections = true;
 
       if (winHelp)
-        wxFprintf(Sections, _T("\n${\\footnote "));
+        wxFprintf(Sections, wxT("\n${\\footnote "));
 
       // Output heading to contents page
       if (!InPopups())
@@ -1332,36 +1332,36 @@ void RTFOnMacro(int macroId, int no_args
       {
         if (!InPopups())
         {
-          wxFprintf(jumpFrom, _T("}{\\v %s}\\pard\\par\n"), topicName);
+          wxFprintf(jumpFrom, wxT("}{\\v %s}\\pard\\par\n"), topicName);
           //WriteEnvironmentStyles();
         }
       }
       else if ((macroId != ltSECTIONSTAR) && (macroId != ltGLOSS))
       {
         if (DocumentStyle == LATEX_REPORT)
-          wxFprintf(Contents, _T("}\\par\\pard\n"));
+          wxFprintf(Contents, wxT("}\\par\\pard\n"));
         else
-          wxFprintf(Contents, _T("}\\par\\par\\pard\n"));
+          wxFprintf(Contents, wxT("}\\par\\par\\pard\n"));
       }
 
       SetCurrentOutput(winHelp ? Sections : Chapters);
 
       if (winHelp)
       {
-        wxFprintf(Sections, _T("}\n#{\\footnote %s}\n"), topicName);
-        wxFprintf(Sections, _T("+{\\footnote %s}\n"), GetBrowseString());
+        wxFprintf(Sections, wxT("}\n#{\\footnote %s}\n"), topicName);
+        wxFprintf(Sections, wxT("+{\\footnote %s}\n"), GetBrowseString());
         OutputSectionKeyword(Sections);
         GenerateKeywordsForTopic(topicName);
         if (useUpButton)
         {
           if (DocumentStyle == LATEX_ARTICLE)
           {
-            wxFprintf(Sections, _T("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
-               wxFileNameFromPath(FileRoot), _T("Contents"));
+            wxFprintf(Sections, wxT("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
+               wxFileNameFromPath(FileRoot), wxT("Contents"));
           }
           else if (CurrentChapterName)
           {
-            wxFprintf(Sections, _T("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
+            wxFprintf(Sections, wxT("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
                wxFileNameFromPath(FileRoot), CurrentChapterName);
           }
         }
@@ -1369,24 +1369,24 @@ void RTFOnMacro(int macroId, int no_args
 
       if (!InPopups())
       {
-      wxChar *styleCommand = _T("");
+      wxChar *styleCommand = wxT("");
       if (!winHelp && useHeadingStyles && (macroId != ltSECTIONSTAR))
       {
         if (DocumentStyle == LATEX_ARTICLE)
-          styleCommand = _T("\\s1");
+          styleCommand = wxT("\\s1");
         else
-          styleCommand = _T("\\s2");
+          styleCommand = wxT("\\s2");
       }
-      wxChar *keep = _T("");
+      wxChar *keep = wxT("");
       if (winHelp && (macroId != ltGLOSS) && !InPopups())
-        keep = _T("\\keepn\\sa140\\sb140");
+        keep = wxT("\\keepn\\sa140\\sb140");
 
-      wxFprintf(winHelp ? Sections : Chapters, _T("\\pard{%s%s"),
+      wxFprintf(winHelp ? Sections : Chapters, wxT("\\pard{%s%s"),
          keep, styleCommand);
 
       WriteHeadingStyle((winHelp ? Sections : Chapters),
                         (DocumentStyle == LATEX_ARTICLE ? 1 : 2));
-      wxFprintf(winHelp ? Sections : Chapters, _T(" "));
+      wxFprintf(winHelp ? Sections : Chapters, wxT(" "));
 
       if (!winHelp)
       {
@@ -1395,30 +1395,30 @@ void RTFOnMacro(int macroId, int no_args
           if (DocumentStyle == LATEX_REPORT)
           {
             if (useWord)
-//              wxFprintf(Chapters, _T("{\\bkmkstart %s}%d.%d{\\bkmkend %s}. "), topicName, chapterNo, sectionNo,
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
+//              wxFprintf(Chapters, wxT("{\\bkmkstart %s}%d.%d{\\bkmkend %s}. "), topicName, chapterNo, sectionNo,
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
                   topicName);
             else
-              wxFprintf(Chapters, _T("%d.%d. "), chapterNo, sectionNo);
+              wxFprintf(Chapters, wxT("%d.%d. "), chapterNo, sectionNo);
           }
           else
           {
             if (useWord)
 //              wxFprintf(Chapters, "{\\bkmkstart %s}%d{\\bkmkend %s}. ", topicName, sectionNo,
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
                  topicName);
             else
-              wxFprintf(Chapters, _T("%d. "), sectionNo);
+              wxFprintf(Chapters, wxT("%d. "), sectionNo);
           }
         }
         else if ( useWord )
         {
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
         }
       }
       OutputCurrentSection();
-      TexOutput(_T("\\par\\pard}\n"));
-//      TexOutput(_T("\\par\\pard}\\par\n"));
+      TexOutput(wxT("\\par\\pard}\n"));
+//      TexOutput(wxT("\\par\\pard}\\par\n"));
       }
       issuedNewParagraph = 1;
       WriteEnvironmentStyles();
@@ -1435,7 +1435,7 @@ void RTFOnMacro(int macroId, int no_args
     {
       if (winHelp && !Sections)
       {
-        OnError(_T("You cannot have a subsection before a section!"));
+        OnError(wxT("You cannot have a subsection before a section!"));
       }
       else
       {
@@ -1459,7 +1459,7 @@ void RTFOnMacro(int macroId, int no_args
         SetCurrentOutputs(Sections, Subsections);
         SetCurrentOutputs(Sections, Subsections);
         if (!InPopups())
-          wxFprintf(Sections, _T("\n{\\uldb "));
+          wxFprintf(Sections, wxT("\n{\\uldb "));
       }
       else
       {
@@ -1468,9 +1468,9 @@ void RTFOnMacro(int macroId, int no_args
         {
           SetCurrentOutput(Contents);
           if (DocumentStyle == LATEX_REPORT)
-            wxFprintf(Contents, _T("\n\\pard\\tab\\tab %d.%d.%d\\tab "), chapterNo, sectionNo, subsectionNo);
+            wxFprintf(Contents, wxT("\n\\pard\\tab\\tab %d.%d.%d\\tab "), chapterNo, sectionNo, subsectionNo);
           else
-            wxFprintf(Contents, _T("\n\\pard\\tab %d.%d\\tab "), sectionNo, subsectionNo);
+            wxFprintf(Contents, wxT("\n\\pard\\tab %d.%d\\tab "), sectionNo, subsectionNo);
         } else SetCurrentOutput(NULL);
       }
       if (startedSections)
@@ -1478,18 +1478,18 @@ void RTFOnMacro(int macroId, int no_args
         if (winHelp)
         {
           if (!InPopups())
-            wxFprintf(Subsections, _T("\\page\n"));
+            wxFprintf(Subsections, wxT("\\page\n"));
         }
         // Experimental JACS 2004-02-21
 #if 0
         else
-          wxFprintf(Chapters, _T("\\par\n"));
+          wxFprintf(Chapters, wxT("\\par\n"));
 #endif
       }
       startedSections = true;
 
       if (winHelp)
-        wxFprintf(Subsections, _T("\n${\\footnote "));
+        wxFprintf(Subsections, wxT("\n${\\footnote "));
 
       // Output to contents page
       if (!InPopups())
@@ -1499,55 +1499,55 @@ void RTFOnMacro(int macroId, int no_args
       {
         if (!InPopups())
         {
-          wxFprintf(Sections, _T("}{\\v %s}\\pard\\par\n"), topicName);
+          wxFprintf(Sections, wxT("}{\\v %s}\\pard\\par\n"), topicName);
           //WriteEnvironmentStyles();
         }
       }
       else if ((macroId != ltSUBSECTIONSTAR) && (macroId != ltMEMBERSECTION) &&
          (macroId != ltFUNCTIONSECTION))
-        wxFprintf(Contents, _T("\\par\\pard\n"));
+        wxFprintf(Contents, wxT("\\par\\pard\n"));
 
       SetCurrentOutput(winHelp ? Subsections : Chapters);
       if (winHelp)
       {
-        wxFprintf(Subsections, _T("}\n#{\\footnote %s}\n"), topicName);
-        wxFprintf(Subsections, _T("+{\\footnote %s}\n"), GetBrowseString());
+        wxFprintf(Subsections, wxT("}\n#{\\footnote %s}\n"), topicName);
+        wxFprintf(Subsections, wxT("+{\\footnote %s}\n"), GetBrowseString());
         OutputSectionKeyword(Subsections);
         GenerateKeywordsForTopic(topicName);
         if (useUpButton && CurrentSectionName)
         {
-          wxFprintf(Subsections, _T("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
+          wxFprintf(Subsections, wxT("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
              wxFileNameFromPath(FileRoot), CurrentSectionName);
         }
       }
       if (!winHelp && indexSubsections && useWord)
       {
         // Insert index entry for this subsection
-        TexOutput(_T("{\\xe\\v {"));
+        TexOutput(wxT("{\\xe\\v {"));
         OutputCurrentSection();
-        TexOutput(_T("}}"));
+        TexOutput(wxT("}}"));
       }
 
       if (!InPopups())
       {
-      wxChar *styleCommand = _T("");
+      wxChar *styleCommand = wxT("");
       if (!winHelp && useHeadingStyles && (macroId != ltSUBSECTIONSTAR))
       {
         if (DocumentStyle == LATEX_ARTICLE)
-          styleCommand = _T("\\s2");
+          styleCommand = wxT("\\s2");
         else
-          styleCommand = _T("\\s3");
+          styleCommand = wxT("\\s3");
       }
-      wxChar *keep = _T("");
+      wxChar *keep = wxT("");
       if (winHelp && !InPopups())
-        keep = _T("\\keepn\\sa140\\sb140");
+        keep = wxT("\\keepn\\sa140\\sb140");
 
-      wxFprintf(winHelp ? Subsections : Chapters, _T("\\pard{%s%s"),
+      wxFprintf(winHelp ? Subsections : Chapters, wxT("\\pard{%s%s"),
          keep, styleCommand);
 
       WriteHeadingStyle((winHelp ? Subsections : Chapters),
                         (DocumentStyle == LATEX_ARTICLE ? 2 : 3));
-      wxFprintf(winHelp ? Subsections : Chapters, _T(" "));
+      wxFprintf(winHelp ? Subsections : Chapters, wxT(" "));
 
       if (!winHelp)
       {
@@ -1557,32 +1557,32 @@ void RTFOnMacro(int macroId, int no_args
           if (DocumentStyle == LATEX_REPORT)
           {
             if (useWord)
-//              wxFprintf(Chapters, _T("{\\bkmkstart %s}%d.%d.%d{\\bkmkend %s}. "), topicName, chapterNo, sectionNo, subsectionNo,
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
+//              wxFprintf(Chapters, wxT("{\\bkmkstart %s}%d.%d.%d{\\bkmkend %s}. "), topicName, chapterNo, sectionNo, subsectionNo,
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
                        topicName);
             else
-              wxFprintf(Chapters, _T("%d.%d.%d. "), chapterNo, sectionNo, subsectionNo);
+              wxFprintf(Chapters, wxT("%d.%d.%d. "), chapterNo, sectionNo, subsectionNo);
           }
           else
           {
             if (useWord)
-//              wxFprintf(Chapters, _T("{\\bkmkstart %s}%d.%d{\\bkmkend %s}. "), topicName, sectionNo, subsectionNo,
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
+//              wxFprintf(Chapters, wxT("{\\bkmkstart %s}%d.%d{\\bkmkend %s}. "), topicName, sectionNo, subsectionNo,
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
                        topicName);
             else
-              wxFprintf(Chapters, _T("%d.%d. "), sectionNo, subsectionNo);
+              wxFprintf(Chapters, wxT("%d.%d. "), sectionNo, subsectionNo);
           }
         }
         else if ( useWord )
         {
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
         }
       }
       OutputCurrentSection(); // Repeat section header
 
       // Experimental JACS
-      TexOutput(_T("\\par\\pard}\n"));
-      // TexOutput(_T("\\par\\pard}\\par\n"));
+      TexOutput(wxT("\\par\\pard}\n"));
+      // TexOutput(wxT("\\par\\pard}\\par\n"));
       }
       issuedNewParagraph = 1;
       WriteEnvironmentStyles();
@@ -1597,7 +1597,7 @@ void RTFOnMacro(int macroId, int no_args
     {
       if (winHelp && !Subsections)
       {
-        OnError(_T("You cannot have a subsubsection before a subsection!"));
+        OnError(wxT("You cannot have a subsubsection before a subsection!"));
       }
       else
       {
@@ -1617,7 +1617,7 @@ void RTFOnMacro(int macroId, int no_args
       if (winHelp)
       {
         SetCurrentOutputs(Subsections, Subsubsections);
-        wxFprintf(Subsections, _T("\n{\\uldb "));
+        wxFprintf(Subsections, wxT("\n{\\uldb "));
       }
       else
       {
@@ -1626,7 +1626,7 @@ void RTFOnMacro(int macroId, int no_args
           if (DocumentStyle == LATEX_ARTICLE)
           {
             SetCurrentOutput(Contents);
-            wxFprintf(Contents, _T("\n\\tab\\tab %d.%d.%d\\tab "),
+            wxFprintf(Contents, wxT("\n\\tab\\tab %d.%d.%d\\tab "),
                                sectionNo, subsectionNo, subsubsectionNo);
           }
           else
@@ -1639,69 +1639,69 @@ void RTFOnMacro(int macroId, int no_args
       if (startedSections)
       {
         if (winHelp)
-          wxFprintf(Subsubsections, _T("\\page\n"));
+          wxFprintf(Subsubsections, wxT("\\page\n"));
         // Experimental JACS 2004-02-21
 #if 0
         else
-          wxFprintf(Chapters, _T("\\par\n"));
+          wxFprintf(Chapters, wxT("\\par\n"));
 #endif
       }
 
       startedSections = true;
 
       if (winHelp)
-        wxFprintf(Subsubsections, _T("\n${\\footnote "));
+        wxFprintf(Subsubsections, wxT("\n${\\footnote "));
 
       // Output header to contents page
       OutputCurrentSection();
 
       if (winHelp)
       {
-        wxFprintf(Subsections, _T("}{\\v %s}\\pard\\par\n"), topicName);
+        wxFprintf(Subsections, wxT("}{\\v %s}\\pard\\par\n"), topicName);
         //WriteEnvironmentStyles();
       }
       else if ((DocumentStyle == LATEX_ARTICLE) && (macroId != ltSUBSUBSECTIONSTAR))
-        wxFprintf(Contents, _T("\\par\\pard\n"));
+        wxFprintf(Contents, wxT("\\par\\pard\n"));
 
       SetCurrentOutput(winHelp ? Subsubsections : Chapters);
       if (winHelp)
       {
-        wxFprintf(Subsubsections, _T("}\n#{\\footnote %s}\n"), topicName);
-        wxFprintf(Subsubsections, _T("+{\\footnote %s}\n"), GetBrowseString());
+        wxFprintf(Subsubsections, wxT("}\n#{\\footnote %s}\n"), topicName);
+        wxFprintf(Subsubsections, wxT("+{\\footnote %s}\n"), GetBrowseString());
         OutputSectionKeyword(Subsubsections);
         GenerateKeywordsForTopic(topicName);
         if (useUpButton && CurrentSubsectionName)
         {
-          wxFprintf(Subsubsections, _T("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
+          wxFprintf(Subsubsections, wxT("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
              wxFileNameFromPath(FileRoot), CurrentSubsectionName);
         }
       }
       if (!winHelp && indexSubsections && useWord)
       {
         // Insert index entry for this subsubsection
-        TexOutput(_T("{\\xe\\v {"));
+        TexOutput(wxT("{\\xe\\v {"));
         OutputCurrentSection();
-        TexOutput(_T("}}"));
+        TexOutput(wxT("}}"));
       }
 
-      wxChar *styleCommand = _T("");
+      wxChar *styleCommand = wxT("");
       if (!winHelp && useHeadingStyles && (macroId != ltSUBSUBSECTIONSTAR))
       {
         if (DocumentStyle == LATEX_ARTICLE)
-          styleCommand = _T("\\s3");
+          styleCommand = wxT("\\s3");
         else
-          styleCommand = _T("\\s4");
+          styleCommand = wxT("\\s4");
       }
-      wxChar *keep = _T("");
+      wxChar *keep = wxT("");
       if (winHelp)
-        keep = _T("\\keepn\\sa140\\sb140");
+        keep = wxT("\\keepn\\sa140\\sb140");
 
-      wxFprintf(winHelp ? Subsubsections : Chapters, _T("\\pard{%s%s"),
+      wxFprintf(winHelp ? Subsubsections : Chapters, wxT("\\pard{%s%s"),
          keep, styleCommand);
 
       WriteHeadingStyle((winHelp ? Subsubsections : Chapters),
                         (DocumentStyle == LATEX_ARTICLE ? 3 : 4));
-      wxFprintf(winHelp ? Subsubsections : Chapters, _T(" "));
+      wxFprintf(winHelp ? Subsubsections : Chapters, wxT(" "));
 
       if (!winHelp)
       {
@@ -1710,32 +1710,32 @@ void RTFOnMacro(int macroId, int no_args
           if (DocumentStyle == LATEX_ARTICLE)
           {
             if (useWord)
-//              wxFprintf(Chapters, _T("{\\bkmkstart %s}%d.%d.%d{\\bkmkend %s}. "), topicName, sectionNo, subsectionNo, subsubsectionNo,
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
+//              wxFprintf(Chapters, wxT("{\\bkmkstart %s}%d.%d.%d{\\bkmkend %s}. "), topicName, sectionNo, subsectionNo, subsubsectionNo,
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
                      topicName);
             else
-              wxFprintf(Chapters, _T("%d.%d.%d. "), sectionNo, subsectionNo, subsubsectionNo);
+              wxFprintf(Chapters, wxT("%d.%d.%d. "), sectionNo, subsectionNo, subsubsectionNo);
           }
           else
           {
             if (useWord)
-//              wxFprintf(Chapters, _T("{\\bkmkstart %s}%d.%d.%d.%d{\\bkmkend %s}. "), topicName, chapterNo, sectionNo, subsectionNo, subsubsectionNo,
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
+//              wxFprintf(Chapters, wxT("{\\bkmkstart %s}%d.%d.%d.%d{\\bkmkend %s}. "), topicName, chapterNo, sectionNo, subsectionNo, subsubsectionNo,
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName,
                       topicName);
             else
-              wxFprintf(Chapters, _T("%d.%d.%d.%d. "), chapterNo, sectionNo, subsectionNo, subsubsectionNo);
+              wxFprintf(Chapters, wxT("%d.%d.%d.%d. "), chapterNo, sectionNo, subsectionNo, subsubsectionNo);
           }
         }
         else if ( useWord )
         {
-              wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
+              wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), topicName, topicName);
         }
       }
       OutputCurrentSection(); // Repeat section header
-      TexOutput(_T("\\par\\pard}\n"));
+      TexOutput(wxT("\\par\\pard}\n"));
       issuedNewParagraph = 1;
       WriteEnvironmentStyles();
-//      TexOutput(_T("\\par\\pard}\\par\n"));
+//      TexOutput(wxT("\\par\\pard}\\par\n"));
 //      issuedNewParagraph = 2;
     }
     }
@@ -1749,7 +1749,7 @@ void RTFOnMacro(int macroId, int no_args
       wxChar *topicName = FindTopicName(GetNextChunk());
       SetCurrentTopic(topicName);
 
-      TexOutput(_T("\\pard\\par"));
+      TexOutput(wxT("\\pard\\par"));
       wxChar figBuf[200];
 
       if (inFigure)
@@ -1759,13 +1759,13 @@ void RTFOnMacro(int macroId, int no_args
         if (winHelp || !useWord)
         {
           if (DocumentStyle != LATEX_ARTICLE)
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d.%d: "), FigureNameString, chapterNo, figureNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d.%d: "), FigureNameString, chapterNo, figureNo);
           else
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d: "), FigureNameString, figureNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d: "), FigureNameString, figureNo);
         }
         else
         {
-          wxSnprintf(figBuf, sizeof(figBuf), _T("%s {\\field\\flddirty{\\*\\fldinst  SEQ Figure \\\\* ARABIC }{\\fldrslt {\\bkmkstart %s}??{\\bkmkend %s}}}: "),
+          wxSnprintf(figBuf, sizeof(figBuf), wxT("%s {\\field\\flddirty{\\*\\fldinst  SEQ Figure \\\\* ARABIC }{\\fldrslt {\\bkmkstart %s}??{\\bkmkend %s}}}: "),
                FigureNameString, topicName, topicName);
         }
       }
@@ -1776,13 +1776,13 @@ void RTFOnMacro(int macroId, int no_args
         if (winHelp || !useWord)
         {
           if (DocumentStyle != LATEX_ARTICLE)
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d.%d: "), TableNameString, chapterNo, tableNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d.%d: "), TableNameString, chapterNo, tableNo);
           else
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d: "), TableNameString, tableNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d: "), TableNameString, tableNo);
         }
         else
         {
-          wxSnprintf(figBuf, sizeof(figBuf), _T("%s {\\field\\flddirty{\\*\\fldinst  SEQ Table \\\\* ARABIC }{\\fldrslt {\\bkmkstart %s}??{\\bkmkend %s}}}: "),
+          wxSnprintf(figBuf, sizeof(figBuf), wxT("%s {\\field\\flddirty{\\*\\fldinst  SEQ Table \\\\* ARABIC }{\\fldrslt {\\bkmkstart %s}??{\\bkmkend %s}}}: "),
                TableNameString, topicName, topicName);
         }
       }
@@ -1793,14 +1793,14 @@ void RTFOnMacro(int macroId, int no_args
             ((DocumentStyle != LATEX_ARTICLE) ? n : 0));
 
       if (winHelp)
-        TexOutput(_T("\\qc{\\b "));
+        TexOutput(wxT("\\qc{\\b "));
       else
-        TexOutput(_T("\\ql{\\b "));
+        TexOutput(wxT("\\ql{\\b "));
       TexOutput(figBuf);
 
       OutputCurrentSection();
 
-      TexOutput(_T("}\\par\\pard\n"));
+      TexOutput(wxT("}\\par\\pard\n"));
       WriteEnvironmentStyles();
     }
     break;
@@ -1811,27 +1811,27 @@ void RTFOnMacro(int macroId, int no_args
 //    SetCurrentOutput(winHelp ? Subsections : Chapters);
     if (start)
     {
-      TexOutput(_T("{"));
+      TexOutput(wxT("{"));
     }
     else
     {
-      TexOutput(_T("}\n"));
+      TexOutput(wxT("}\n"));
       if (winHelp)
       {
-        TexOutput(_T("K{\\footnote {K} "));
+        TexOutput(wxT("K{\\footnote {K} "));
         suppressNameDecoration = true;
         TraverseChildrenFromChunk(currentMember);
         suppressNameDecoration = false;
-        TexOutput(_T("}\n"));
+        TexOutput(wxT("}\n"));
       }
       if (!winHelp && useWord)
       {
         // Insert index entry for this function
-        TexOutput(_T("{\\xe\\v {"));
+        TexOutput(wxT("{\\xe\\v {"));
         suppressNameDecoration = true;  // Necessary so don't print "(\\bf" etc.
         TraverseChildrenFromChunk(currentMember);
         suppressNameDecoration = false;
-        TexOutput(_T("}}"));
+        TexOutput(wxT("}}"));
       }
     }
     break;
@@ -1841,27 +1841,27 @@ void RTFOnMacro(int macroId, int no_args
 //    SetCurrentOutput(winHelp ? Subsections : Chapters);
     if (start)
     {
-      TexOutput(_T("{"));
+      TexOutput(wxT("{"));
     }
     else
     {
-      TexOutput(_T("}\n"));
+      TexOutput(wxT("}\n"));
       if (winHelp)
       {
-        TexOutput(_T("K{\\footnote {K} "));
+        TexOutput(wxT("K{\\footnote {K} "));
         suppressNameDecoration = true;  // Necessary so don't print "(\\bf" etc.
         TraverseChildrenFromChunk(currentMember);
         suppressNameDecoration = false;
-        TexOutput(_T("}\n"));
+        TexOutput(wxT("}\n"));
       }
       if (!winHelp && useWord)
       {
         // Insert index entry for this function
-        TexOutput(_T("{\\xe\\v {"));
+        TexOutput(wxT("{\\xe\\v {"));
         suppressNameDecoration = true;  // Necessary so don't print "(\\bf" etc.
         TraverseChildrenFromChunk(currentMember);
         suppressNameDecoration = false;
-        TexOutput(_T("}}"));
+        TexOutput(wxT("}}"));
       }
     }
     break;
@@ -1871,25 +1871,25 @@ void RTFOnMacro(int macroId, int no_args
 //    SetCurrentOutput(winHelp ? Subsections : Chapters);
     if (start)
     {
-      TexOutput(_T("{\\b "));
+      TexOutput(wxT("{\\b "));
     }
     else
     {
-      TexOutput(_T("}\n"));
+      TexOutput(wxT("}\n"));
       if (winHelp)
       {
-        TexOutput(_T("K{\\footnote {K} "));
+        TexOutput(wxT("K{\\footnote {K} "));
         TraverseChildrenFromChunk(currentMember);
-        TexOutput(_T("}\n"));
+        TexOutput(wxT("}\n"));
       }
       if (!winHelp && useWord)
       {
         // Insert index entry for this function
-        TexOutput(_T("{\\xe\\v {"));
+        TexOutput(wxT("{\\xe\\v {"));
         suppressNameDecoration = true;  // Necessary so don't print "(\\bf" etc.
         TraverseChildrenFromChunk(currentMember);
         suppressNameDecoration = false;
-        TexOutput(_T("}}"));
+        TexOutput(wxT("}}"));
       }
     }
     break;
@@ -1907,19 +1907,19 @@ void RTFOnMacro(int macroId, int no_args
       if (!winHelp && useWord)
       {
         // Insert Word for Windows table of contents
-        TexOutput(_T("\\par\\pard\\pgnrestart\\sect\\titlepg"));
+        TexOutput(wxT("\\par\\pard\\pgnrestart\\sect\\titlepg"));
 
        // In linear RTF, same as chapter headings.
-        wxSnprintf(buf, sizeof(buf), _T("{\\b\\fs%d %s}\\par\\par\\pard\n\n"), chapterFont*2, ContentsNameString);
+        wxSnprintf(buf, sizeof(buf), wxT("{\\b\\fs%d %s}\\par\\par\\pard\n\n"), chapterFont*2, ContentsNameString);
 
         TexOutput(buf);
-        wxSnprintf(buf, sizeof(buf), _T("{\\field{\\*\\fldinst TOC \\\\o \"1-%d\" }{\\fldrslt PRESS F9 TO REFORMAT CONTENTS}}\n"), contentsDepth);
+        wxSnprintf(buf, sizeof(buf), wxT("{\\field{\\*\\fldinst TOC \\\\o \"1-%d\" }{\\fldrslt PRESS F9 TO REFORMAT CONTENTS}}\n"), contentsDepth);
         TexOutput(buf);
-//        TexOutput(_T("\\sect\\sectd"));
+//        TexOutput(wxT("\\sect\\sectd"));
       }
       else
       {
-        FILE *fd = wxFopen(ContentsName, _T("r"));
+        FILE *fd = wxFopen(ContentsName, wxT("r"));
         if (fd)
         {
           int ch = getc(fd);
@@ -1932,8 +1932,8 @@ void RTFOnMacro(int macroId, int no_args
         }
         else
         {
-          TexOutput(_T("{\\i RUN TEX2RTF AGAIN FOR CONTENTS PAGE}\\par\n"));
-          OnInform(_T("Run Tex2RTF again to include contents page."));
+          TexOutput(wxT("{\\i RUN TEX2RTF AGAIN FOR CONTENTS PAGE}\\par\n"));
+          OnInform(wxT("Run Tex2RTF again to include contents page."));
         }
       }
     }
@@ -1942,19 +1942,19 @@ void RTFOnMacro(int macroId, int no_args
   case ltVOID:
   {
 //    if (start)
-//      TexOutput(_T("{\\b void}"));
+//      TexOutput(wxT("{\\b void}"));
     break;
   }
   case ltHARDY:
   {
     if (start)
-      TexOutput(_T("{\\scaps HARDY}"));
+      TexOutput(wxT("{\\scaps HARDY}"));
     break;
   }
   case ltWXCLIPS:
   {
     if (start)
-      TexOutput(_T("wxCLIPS"));
+      TexOutput(wxT("wxCLIPS"));
     break;
   }
   case ltSPECIALAMPERSAND:
@@ -1962,9 +1962,9 @@ void RTFOnMacro(int macroId, int no_args
     if (start)
     {
       if (inTabular)
-        TexOutput(_T("\\cell "));
+        TexOutput(wxT("\\cell "));
       else
-        TexOutput(_T("&"));
+        TexOutput(wxT("&"));
     }
     break;
   }
@@ -1973,9 +1973,9 @@ void RTFOnMacro(int macroId, int no_args
     if (start)
     {
       #if 1 // if(inVerbatim)
-        TexOutput(_T("~"));
+        TexOutput(wxT("~"));
       #else
-        TexOutput(_T(" "));
+        TexOutput(wxT(" "));
       #endif
     }
     break;
@@ -1986,38 +1986,38 @@ void RTFOnMacro(int macroId, int no_args
     {
       if (inTabular)
       {
-//        TexOutput(_T("\\cell\\row\\trowd\\trgaph108\\trleft-108\n"));
-        TexOutput(_T("\\cell\\row\\trowd\\trgaph108\n"));
+//        TexOutput(wxT("\\cell\\row\\trowd\\trgaph108\\trleft-108\n"));
+        TexOutput(wxT("\\cell\\row\\trowd\\trgaph108\n"));
         int currentWidth = 0;
         for (int i = 0; i < noColumns; i++)
         {
           currentWidth += TableData[i].width;
           if (TableData[i].rightBorder)
-            TexOutput(_T("\\clbrdrr\\brdrs\\brdrw15"));
+            TexOutput(wxT("\\clbrdrr\\brdrs\\brdrw15"));
 
           if (TableData[i].leftBorder)
-            TexOutput(_T("\\clbrdrl\\brdrs\\brdrw15"));
+            TexOutput(wxT("\\clbrdrl\\brdrs\\brdrw15"));
 
-          wxSnprintf(buf, sizeof(buf), _T("\\cellx%d"), currentWidth);
+          wxSnprintf(buf, sizeof(buf), wxT("\\cellx%d"), currentWidth);
           TexOutput(buf);
         }
-        TexOutput(_T("\\pard\\intbl\n"));
+        TexOutput(wxT("\\pard\\intbl\n"));
       }
       else
-        TexOutput(_T("\\line\n"));
+        TexOutput(wxT("\\line\n"));
     }
     break;
   }
   case ltRANGLEBRA:
   {
     if (start)
-      TexOutput(_T("\tab "));
+      TexOutput(wxT("\tab "));
     break;
   }
   case ltRTFSP:  // Explicit space, RTF only
   {
     if (start)
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
    break;
   }
   case ltITEMIZE:
@@ -2029,9 +2029,9 @@ void RTFOnMacro(int macroId, int no_args
       if (indentLevel > 0)
       {
         // Experimental JACS 2004-02-21
-        TexOutput(_T("\\par\n"));
+        TexOutput(wxT("\\par\n"));
         issuedNewParagraph = 1;
-//        TexOutput(_T("\\par\\par\n"));
+//        TexOutput(wxT("\\par\\par\n"));
 //        issuedNewParagraph = 2;
       }
       else
@@ -2040,14 +2040,14 @@ void RTFOnMacro(int macroId, int no_args
         // just done so
         if (!issuedNewParagraph)
         {
-          TexOutput(_T("\\par\\pard"));
+          TexOutput(wxT("\\par\\pard"));
           WriteEnvironmentStyles();
           issuedNewParagraph = 1;
         }
         else issuedNewParagraph = 0;
       }
       indentLevel ++;
-      TexOutput(_T("\\fi0\n"));
+      TexOutput(wxT("\\fi0\n"));
       int listType;
       if (macroId == ltENUMERATE)
         listType = LATEX_ENUMERATE;
@@ -2067,7 +2067,7 @@ void RTFOnMacro(int macroId, int no_args
       ItemizeStruc *struc = new ItemizeStruc(listType, indentSize2, indentSize1);
       itemizeStack.Insert(struc);
 
-      wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\tx%d\\li%d\\sa200"), indentSize1, indentSize2, indentSize2);
+      wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\tx%d\\li%d\\sa200"), indentSize1, indentSize2, indentSize2);
       PushEnvironmentStyle(buf);
     }
     else
@@ -2108,8 +2108,8 @@ void RTFOnMacro(int macroId, int no_args
       ItemizeStruc *struc = new ItemizeStruc(LATEX_TWOCOL, indentSize);
       itemizeStack.Insert(struc);
 
-//      wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\ri%d"), indentSize, indentSize, TwoColWidthA+TwoColWidthB+oldIndent);
-      wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\sa200"), indentSize, indentSize);
+//      wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\ri%d"), indentSize, indentSize, TwoColWidthA+TwoColWidthB+oldIndent);
+      wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\sa200"), indentSize, indentSize);
       PushEnvironmentStyle(buf);
     }
     else
@@ -2124,12 +2124,12 @@ void RTFOnMacro(int macroId, int no_args
       }
 /*
       // JACS June 1997
-      TexOutput(_T("\\pard\n"));
+      TexOutput(wxT("\\pard\n"));
       WriteEnvironmentStyles();
 */
 /* why do we need this? */
 // Experimental
-      TexOutput(_T("\\pard\n"));
+      TexOutput(wxT("\\pard\n"));
 #if 0
       if (itemizeStack.GetCount() == 0)
       {
@@ -2155,19 +2155,19 @@ void RTFOnMacro(int macroId, int no_args
         int indentSize1 = struc->labelIndentation;
         int indentSize2 = struc->indentation;
 
-        TexOutput(_T("\n"));
+        TexOutput(wxT("\n"));
         if (struc->currentItem > 1 && issuedNewParagraph == 0)
         {
             // JACS
 //          if (currentItemSep > 0)
-//            TexOutput(_T("\\par"));
+//            TexOutput(wxT("\\par"));
 
-          TexOutput(_T("\\par"));
+          TexOutput(wxT("\\par"));
           issuedNewParagraph = 1;
 //          WriteEnvironmentStyles();
         }
 
-        wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\tx%d\\li%d\\fi-%d\n"), indentSize1, indentSize2,
+        wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\tx%d\\li%d\\fi-%d\n"), indentSize1, indentSize2,
                   indentSize2, 20*itemIndentTab);
         TexOutput(buf);
 
@@ -2177,14 +2177,14 @@ void RTFOnMacro(int macroId, int no_args
           {
             if (descriptionItemArg)
             {
-              TexOutput(_T("\\tab{ "));
+              TexOutput(wxT("\\tab{ "));
               TraverseChildrenFromChunk(descriptionItemArg);
-              TexOutput(_T("}\\tab"));
+              TexOutput(wxT("}\\tab"));
               descriptionItemArg = NULL;
             }
             else
             {
-              wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\tab{\\b %d.}\\tab"), struc->currentItem);
+              wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\tab{\\b %d.}\\tab"), struc->currentItem);
               TexOutput(indentBuf);
             }
             break;
@@ -2193,9 +2193,9 @@ void RTFOnMacro(int macroId, int no_args
           {
             if (descriptionItemArg)
             {
-              TexOutput(_T("\\tab{ "));
+              TexOutput(wxT("\\tab{ "));
               TraverseChildrenFromChunk(descriptionItemArg);
-              TexOutput(_T("}\\tab"));
+              TexOutput(wxT("}\\tab"));
               descriptionItemArg = NULL;
             }
           else
@@ -2203,14 +2203,14 @@ void RTFOnMacro(int macroId, int no_args
               if (bulletFile && winHelp)
               {
                 if (winHelpVersion > 3) // Transparent bitmap
-                  wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\tab\\{bmct %s\\}\\tab"), bulletFile);
+                  wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\tab\\{bmct %s\\}\\tab"), bulletFile);
                 else
-                  wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\tab\\{bmc %s\\}\\tab"), bulletFile);
+                  wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\tab\\{bmc %s\\}\\tab"), bulletFile);
               }
               else if (winHelp)
-                wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\tab{\\b o}\\tab"));
+                wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\tab{\\b o}\\tab"));
               else
-                wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\tab{\\f1\\'b7}\\tab"));
+                wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\tab{\\f1\\'b7}\\tab"));
               TexOutput(indentBuf);
             }
             break;
@@ -2220,9 +2220,9 @@ void RTFOnMacro(int macroId, int no_args
           {
             if (descriptionItemArg)
             {
-              TexOutput(_T("\\tab{\\b "));
+              TexOutput(wxT("\\tab{\\b "));
               TraverseChildrenFromChunk(descriptionItemArg);
-              TexOutput(_T("}  "));
+              TexOutput(wxT("}  "));
               descriptionItemArg = NULL;
             }
             break;
@@ -2250,25 +2250,25 @@ void RTFOnMacro(int macroId, int no_args
         if (node2)
           oldIndent = ((ItemizeStruc *)node2->GetData())->indentation;
 
-        TexOutput(_T("\n"));
+        TexOutput(wxT("\n"));
         // JACS
 #if 0
         if (struc->currentItem > 1)
         {
           if (currentItemSep > 0)
-            TexOutput(_T("\\par"));
+            TexOutput(wxT("\\par"));
 
 //          WriteEnvironmentStyles();
         }
 #endif
 
-//        wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\fi-%d\\ri%d\n"), TwoColWidthA,
+//        wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\fi-%d\\ri%d\n"), TwoColWidthA,
 //             TwoColWidthA, TwoColWidthA, TwoColWidthA+TwoColWidthB+oldIndent);
 /*
-        wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\fi-%d\n"), TwoColWidthA,
+        wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\fi-%d\n"), TwoColWidthA,
              TwoColWidthA, TwoColWidthA);
 */
-        wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\fi-%d\n"), TwoColWidthA + oldIndent,
+        wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\fi-%d\n"), TwoColWidthA + oldIndent,
              TwoColWidthA + oldIndent, TwoColWidthA);
         TexOutput(buf);
       }
@@ -2286,7 +2286,7 @@ void RTFOnMacro(int macroId, int no_args
       {
         if (!issuedNewParagraph)
         {
-          TexOutput(_T("\\par\\pard"));
+          TexOutput(wxT("\\par\\pard"));
           WriteEnvironmentStyles();
           issuedNewParagraph = 1;
         }
@@ -2295,21 +2295,21 @@ void RTFOnMacro(int macroId, int no_args
 #endif
 
       if (macroId == ltVERBATIM)
-        wxSnprintf(buf, sizeof(buf), _T("{\\f3\\s10\\fs20\\li720\\sa0 "));
+        wxSnprintf(buf, sizeof(buf), wxT("{\\f3\\s10\\fs20\\li720\\sa0 "));
       else
-        wxSnprintf(buf, sizeof(buf), _T("{\\f3\\fs20 "));
+        wxSnprintf(buf, sizeof(buf), wxT("{\\f3\\fs20 "));
       TexOutput(buf);
     }
     else
     {
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
       if (macroId == ltVERBATIM)
       {
-        TexOutput(_T("\\pard\n"));
+        TexOutput(wxT("\\pard\n"));
         WriteEnvironmentStyles();
         // JACS
 #if 0
-        TexOutput(_T("\\par\n"));
+        TexOutput(wxT("\\par\n"));
         issuedNewParagraph = 1;
 #endif
       }
@@ -2321,13 +2321,13 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("\\qc "));
+      TexOutput(wxT("\\qc "));
       forbidParindent ++;
-      PushEnvironmentStyle(_T("\\qc\\sa200"));
+      PushEnvironmentStyle(wxT("\\qc\\sa200"));
     }
     else
     {
-      TexOutput(_T("\\par\\pard\n"));
+      TexOutput(wxT("\\par\\pard\n"));
       issuedNewParagraph = 1;
       forbidParindent --;
       PopEnvironmentStyle();
@@ -2339,13 +2339,13 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("\\ql\\sa200 "));
+      TexOutput(wxT("\\ql\\sa200 "));
       forbidParindent ++;
-      PushEnvironmentStyle(_T("\\ql"));
+      PushEnvironmentStyle(wxT("\\ql"));
     }
     else
     {
-      TexOutput(_T("\\par\\pard\n"));
+      TexOutput(wxT("\\par\\pard\n"));
       issuedNewParagraph = 1;
       forbidParindent --;
       PopEnvironmentStyle();
@@ -2357,13 +2357,13 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("\\qr\\sa200 "));
+      TexOutput(wxT("\\qr\\sa200 "));
       forbidParindent ++;
-      PushEnvironmentStyle(_T("\\qr"));
+      PushEnvironmentStyle(wxT("\\qr"));
     }
     else
     {
-      TexOutput(_T("\\par\\pard\n"));
+      TexOutput(wxT("\\par\\pard\n"));
       issuedNewParagraph = 1;
       forbidParindent --;
       PopEnvironmentStyle();
@@ -2376,10 +2376,10 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), smallFont*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), smallFont*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltTINY:
@@ -2387,80 +2387,80 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), tinyFont*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), tinyFont*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltNORMALSIZE:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), normalFont*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), normalFont*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltlarge:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), largeFont1*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), largeFont1*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltLarge:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), LargeFont2*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), LargeFont2*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltLARGE:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), LARGEFont3*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), LARGEFont3*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case lthuge:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), hugeFont1*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), hugeFont1*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltHuge:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), HugeFont2*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), HugeFont2*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltHUGE:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("{\\fs%d\n"), HUGEFont3*2);
+      wxSnprintf(buf, sizeof(buf), wxT("{\\fs%d\n"), HUGEFont3*2);
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltTEXTBF:
@@ -2469,18 +2469,18 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("{\\b "));
+      TexOutput(wxT("{\\b "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltUNDERLINE:
   {
     if (start)
     {
-      TexOutput(_T("{\\ul "));
+      TexOutput(wxT("{\\ul "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltTEXTIT:
@@ -2491,9 +2491,9 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("{\\i "));
+      TexOutput(wxT("{\\i "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   // Roman font: do nothing. Should really switch between
@@ -2505,9 +2505,9 @@ void RTFOnMacro(int macroId, int no_args
 /*
     if (start)
     {
-      TexOutput(_T("{\\plain "));
+      TexOutput(wxT("{\\plain "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
  */
     break;
   }
@@ -2516,9 +2516,9 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("{\\b0 "));
+      TexOutput(wxT("{\\b0 "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   // Upright (un-italic or slant)
@@ -2526,9 +2526,9 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("{\\i0 "));
+      TexOutput(wxT("{\\i0 "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltTEXTSC:
@@ -2537,9 +2537,9 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("{\\scaps "));
+      TexOutput(wxT("{\\scaps "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltTEXTTT:
@@ -2548,27 +2548,27 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("{\\f3 "));
+      TexOutput(wxT("{\\f3 "));
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltLBRACE:
   {
     if (start)
-      TexOutput(_T("\\{"));
+      TexOutput(wxT("\\{"));
     break;
   }
   case ltRBRACE:
   {
     if (start)
-      TexOutput(_T("\\}"));
+      TexOutput(wxT("\\}"));
     break;
   }
   case ltBACKSLASH:
   {
     if (start)
-      TexOutput(_T("\\\\"));
+      TexOutput(wxT("\\\\"));
     break;
   }
   case ltPAR:
@@ -2577,7 +2577,7 @@ void RTFOnMacro(int macroId, int no_args
     {
       if ( issuedNewParagraph == 0 )
       {
-          TexOutput(_T("\\par\\pard"));
+          TexOutput(wxT("\\par\\pard"));
           issuedNewParagraph ++;
 
           // Extra par if parskip is more than zero (usually looks best.)
@@ -2586,7 +2586,7 @@ void RTFOnMacro(int macroId, int no_args
 #if 0
           if (winHelp && !inTabular && (ParSkip > 0))
           {
-            TexOutput(_T("\\par"));
+            TexOutput(wxT("\\par"));
             issuedNewParagraph ++;
           }
 #endif
@@ -2602,7 +2602,7 @@ void RTFOnMacro(int macroId, int no_args
           // Extra par if parskip is more than zero (usually looks best.)
           if (winHelp && !inTabular && (ParSkip > 0))
           {
-            TexOutput(_T("\\par"));
+            TexOutput(wxT("\\par"));
             issuedNewParagraph ++;
           }
 #endif
@@ -2611,16 +2611,16 @@ void RTFOnMacro(int macroId, int no_args
 /*
       if (!issuedNewParagraph || (issuedNewParagraph > 1))
       {
-        TexOutput(_T("\\par\\pard"));
+        TexOutput(wxT("\\par\\pard"));
 
         // Extra par if parskip is more than zero (usually looks best.)
         if (!inTabular && (ParSkip > 0))
-          TexOutput(_T("\\par"));
+          TexOutput(wxT("\\par"));
         WriteEnvironmentStyles();
       }
 */
 
-      TexOutput(_T("\n"));
+      TexOutput(wxT("\n"));
     }
     break;
   }
@@ -2629,46 +2629,46 @@ void RTFOnMacro(int macroId, int no_args
     // In Windows Help, no newpages until we've started some chapters or sections
     if (!(winHelp && !startedSections))
       if (start)
-        TexOutput(_T("\\page\n"));
+        TexOutput(wxT("\\page\n"));
     break;
   }
   case ltMAKETITLE:
   {
     if (start && DocumentTitle)
     {
-      TexOutput(_T("\\par\\pard"));
+      TexOutput(wxT("\\par\\pard"));
       if (!winHelp)
-        TexOutput(_T("\\par"));
-      wxSnprintf(buf, sizeof(buf), _T("\\qc{\\fs%d\\b "), titleFont*2);
+        TexOutput(wxT("\\par"));
+      wxSnprintf(buf, sizeof(buf), wxT("\\qc{\\fs%d\\b "), titleFont*2);
       TexOutput(buf);
       TraverseChildrenFromChunk(DocumentTitle);
-      TexOutput(_T("}\\par\\pard\n"));
+      TexOutput(wxT("}\\par\\pard\n"));
 
       if (DocumentAuthor)
       {
         if (!winHelp)
-          TexOutput(_T("\\par"));
-        wxSnprintf(buf, sizeof(buf), _T("\\par\\qc{\\fs%d "), authorFont*2);
+          TexOutput(wxT("\\par"));
+        wxSnprintf(buf, sizeof(buf), wxT("\\par\\qc{\\fs%d "), authorFont*2);
         TexOutput(buf);
         TraverseChildrenFromChunk(DocumentAuthor);
-        TexOutput(_T("}"));
-        TexOutput(_T("\\par\\pard\n"));
+        TexOutput(wxT("}"));
+        TexOutput(wxT("\\par\\pard\n"));
       }
       if (DocumentDate)
       {
-        TexOutput(_T("\\par"));
-        wxSnprintf(buf, sizeof(buf), _T("\\qc{\\fs%d "), authorFont*2);
+        TexOutput(wxT("\\par"));
+        wxSnprintf(buf, sizeof(buf), wxT("\\qc{\\fs%d "), authorFont*2);
         TexOutput(buf);
         TraverseChildrenFromChunk(DocumentDate);
-        TexOutput(_T("}\\par\\pard\n"));
+        TexOutput(wxT("}\\par\\pard\n"));
       }
       // If linear RTF, we want this titlepage to be in a separate
       // section with its own (blank) header and footer
       if (!winHelp && (DocumentStyle != LATEX_ARTICLE))
       {
-        TexOutput(_T("{\\header }{\\footer }\n"));
+        TexOutput(wxT("{\\header }{\\footer }\n"));
         // Not sure about this: we get too many sections.
-//        TexOutput(_T("\\sect"));
+//        TexOutput(wxT("\\sect"));
       }
     }
     break;
@@ -2679,16 +2679,16 @@ void RTFOnMacro(int macroId, int no_args
     {
     if (contentsLineSection && contentsLineValue)
     {
-      if (wxStrcmp(contentsLineSection, _T("chapter")) == 0)
+      if (wxStrcmp(contentsLineSection, wxT("chapter")) == 0)
       {
-        wxFprintf(Contents, _T("\\par\n{\\b %s}\\par\n"), contentsLineValue);
+        wxFprintf(Contents, wxT("\\par\n{\\b %s}\\par\n"), contentsLineValue);
       }
-      else if (wxStrcmp(contentsLineSection, _T("section")) == 0)
+      else if (wxStrcmp(contentsLineSection, wxT("section")) == 0)
       {
         if (DocumentStyle != LATEX_ARTICLE)
-          wxFprintf(Contents, _T("\n\\tab%s\\par\n"), contentsLineValue);
+          wxFprintf(Contents, wxT("\n\\tab%s\\par\n"), contentsLineValue);
         else
-          wxFprintf(Contents, _T("\\par\n{\\b %s}\\par\n"), contentsLineValue);
+          wxFprintf(Contents, wxT("\\par\n{\\b %s}\\par\n"), contentsLineValue);
       }
     }
     }
@@ -2698,7 +2698,7 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("\\brdrb\\brdrs\\par\\pard\n"));
+      TexOutput(wxT("\\brdrb\\brdrs\\par\\pard\n"));
       issuedNewParagraph = 1;
       WriteEnvironmentStyles();
     }
@@ -2708,7 +2708,7 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("\\brdrb\\brdrs\\par\\pard\n"));
+      TexOutput(wxT("\\brdrb\\brdrs\\par\\pard\n"));
       issuedNewParagraph = 1;
       WriteEnvironmentStyles();
     }
@@ -2723,16 +2723,16 @@ void RTFOnMacro(int macroId, int no_args
   case ltNUMBEREDBIBITEM:
   {
     if (start)
-      TexOutput(_T("\\li260\\fi-260 ")); // Indent from 2nd line
+      TexOutput(wxT("\\li260\\fi-260 ")); // Indent from 2nd line
     else
-      TexOutput(_T("\\par\\pard\\par\n\n"));
+      TexOutput(wxT("\\par\\pard\\par\n\n"));
     break;
   }
   case ltTHEPAGE:
   {
     if (start)
     {
-      TexOutput(_T("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+      TexOutput(wxT("{\\field{\\*\\fldinst PAGE \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
     }
     break;
   }
@@ -2740,8 +2740,8 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-//      TexOutput(_T("{\\field{\\*\\fldinst SECTION \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
-      wxSnprintf(buf, sizeof(buf), _T("%d"), chapterNo);
+//      TexOutput(wxT("{\\field{\\*\\fldinst SECTION \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+      wxSnprintf(buf, sizeof(buf), wxT("%d"), chapterNo);
       TexOutput(buf);
     }
     break;
@@ -2750,8 +2750,8 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start)
     {
-//      TexOutput(_T("{\\field{\\*\\fldinst SECTION \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
-      wxSnprintf(buf, sizeof(buf), _T("%d"), sectionNo);
+//      TexOutput(wxT("{\\field{\\*\\fldinst SECTION \\\\* MERGEFORMAT }{\\fldrslt 1}}"));
+      wxSnprintf(buf, sizeof(buf), wxT("%d"), sectionNo);
       TexOutput(buf);
     }
     break;
@@ -2760,7 +2760,7 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (!start && !winHelp)
     {
-      TexOutput(_T("\\cols2\n"));
+      TexOutput(wxT("\\cols2\n"));
     }
     break;
   }
@@ -2768,7 +2768,7 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (!start && !winHelp)
     {
-      TexOutput(_T("\\cols1\n"));
+      TexOutput(wxT("\\cols1\n"));
     }
     break;
   }
@@ -2776,10 +2776,10 @@ void RTFOnMacro(int macroId, int no_args
   {
     if (start && useWord && !winHelp)
     {
-      FakeCurrentSection(_T("Index"));
+      FakeCurrentSection(wxT("Index"));
       OnMacro(ltPAR, 0, true);
       OnMacro(ltPAR, 0, false);
-      TexOutput(_T("\\par{\\field{\\*\\fldinst INDEX \\\\h \"\\emdash A\\emdash \"\\\\c \"2\"}{\\fldrslt PRESS F9 TO REFORMAT INDEX}}\n"));
+      TexOutput(wxT("\\par{\\field{\\*\\fldinst INDEX \\\\h \"\\emdash A\\emdash \"\\\\c \"2\"}{\\fldrslt PRESS F9 TO REFORMAT INDEX}}\n"));
     }
     break;
   }
@@ -2793,7 +2793,7 @@ void RTFOnMacro(int macroId, int no_args
       OnMacro(ltPAR, 0, true);
       OnMacro(ltPAR, 0, false);
       wxChar buf[200];
-      wxSnprintf(buf, sizeof(buf), _T("{\\field\\fldedit{\\*\\fldinst  TOC \\\\c \"%s\" }{\\fldrslt PRESS F9 TO REFORMAT LIST OF FIGURES}}\n"),
+      wxSnprintf(buf, sizeof(buf), wxT("{\\field\\fldedit{\\*\\fldinst  TOC \\\\c \"%s\" }{\\fldrslt PRESS F9 TO REFORMAT LIST OF FIGURES}}\n"),
                FigureNameString);
       TexOutput(buf);
     }
@@ -2809,7 +2809,7 @@ void RTFOnMacro(int macroId, int no_args
       OnMacro(ltPAR, 0, true);
       OnMacro(ltPAR, 0, false);
       wxChar buf[200];
-      wxSnprintf(buf, sizeof(buf), _T("{\\field\\fldedit{\\*\\fldinst  TOC \\\\c \"%s\" }{\\fldrslt PRESS F9 TO REFORMAT LIST OF TABLES}}\n"),
+      wxSnprintf(buf, sizeof(buf), wxT("{\\field\\fldedit{\\*\\fldinst  TOC \\\\c \"%s\" }{\\fldrslt PRESS F9 TO REFORMAT LIST OF TABLES}}\n"),
                 TablesNameString);
       TexOutput(buf);
     }
@@ -2817,350 +2817,350 @@ void RTFOnMacro(int macroId, int no_args
   }
   // Symbols
   case ltALPHA:
-    if (start) TexOutput(_T("{\\f1\\'61}"));
+    if (start) TexOutput(wxT("{\\f1\\'61}"));
     break;
   case ltBETA:
-    if (start) TexOutput(_T("{\\f1\\'62}"));
+    if (start) TexOutput(wxT("{\\f1\\'62}"));
     break;
   case ltGAMMA:
-    if (start) TexOutput(_T("{\\f1\\'63}"));
+    if (start) TexOutput(wxT("{\\f1\\'63}"));
     break;
   case ltDELTA:
-    if (start) TexOutput(_T("{\\f1\\'64}"));
+    if (start) TexOutput(wxT("{\\f1\\'64}"));
     break;
   case ltEPSILON:
   case ltVAREPSILON:
-    if (start) TexOutput(_T("{\\f1\\'65}"));
+    if (start) TexOutput(wxT("{\\f1\\'65}"));
     break;
   case ltZETA:
-    if (start) TexOutput(_T("{\\f1\\'7A}"));
+    if (start) TexOutput(wxT("{\\f1\\'7A}"));
     break;
   case ltETA:
-    if (start) TexOutput(_T("{\\f1\\'68}"));
+    if (start) TexOutput(wxT("{\\f1\\'68}"));
     break;
   case ltTHETA:
   case ltVARTHETA:
-    if (start) TexOutput(_T("{\\f1\\'71}"));
+    if (start) TexOutput(wxT("{\\f1\\'71}"));
     break;
   case ltIOTA:
-    if (start) TexOutput(_T("{\\f1\\'69}"));
+    if (start) TexOutput(wxT("{\\f1\\'69}"));
     break;
   case ltKAPPA:
-    if (start) TexOutput(_T("{\\f1\\'6B}"));
+    if (start) TexOutput(wxT("{\\f1\\'6B}"));
     break;
   case ltLAMBDA:
-    if (start) TexOutput(_T("{\\f1\\'6C}"));
+    if (start) TexOutput(wxT("{\\f1\\'6C}"));
     break;
   case ltMU:
-    if (start) TexOutput(_T("{\\f1\\'6D}"));
+    if (start) TexOutput(wxT("{\\f1\\'6D}"));
     break;
   case ltNU:
-    if (start) TexOutput(_T("{\\f1\\'6E}"));
+    if (start) TexOutput(wxT("{\\f1\\'6E}"));
     break;
   case ltXI:
-    if (start) TexOutput(_T("{\\f1\\'78}"));
+    if (start) TexOutput(wxT("{\\f1\\'78}"));
     break;
   case ltPI:
-    if (start) TexOutput(_T("{\\f1\\'70}"));
+    if (start) TexOutput(wxT("{\\f1\\'70}"));
     break;
   case ltVARPI:
-    if (start) TexOutput(_T("{\\f1\\'76}"));
+    if (start) TexOutput(wxT("{\\f1\\'76}"));
     break;
   case ltRHO:
   case ltVARRHO:
-    if (start) TexOutput(_T("{\\f1\\'72}"));
+    if (start) TexOutput(wxT("{\\f1\\'72}"));
     break;
   case ltSIGMA:
-    if (start) TexOutput(_T("{\\f1\\'73}"));
+    if (start) TexOutput(wxT("{\\f1\\'73}"));
     break;
   case ltVARSIGMA:
-    if (start) TexOutput(_T("{\\f1\\'56}"));
+    if (start) TexOutput(wxT("{\\f1\\'56}"));
     break;
   case ltTAU:
-    if (start) TexOutput(_T("{\\f1\\'74}"));
+    if (start) TexOutput(wxT("{\\f1\\'74}"));
     break;
   case ltUPSILON:
-    if (start) TexOutput(_T("{\\f1\\'75}"));
+    if (start) TexOutput(wxT("{\\f1\\'75}"));
     break;
   case ltPHI:
   case ltVARPHI:
-    if (start) TexOutput(_T("{\\f1\\'66}"));
+    if (start) TexOutput(wxT("{\\f1\\'66}"));
     break;
   case ltCHI:
-    if (start) TexOutput(_T("{\\f1\\'63}"));
+    if (start) TexOutput(wxT("{\\f1\\'63}"));
     break;
   case ltPSI:
-    if (start) TexOutput(_T("{\\f1\\'79}"));
+    if (start) TexOutput(wxT("{\\f1\\'79}"));
     break;
   case ltOMEGA:
-    if (start) TexOutput(_T("{\\f1\\'77}"));
+    if (start) TexOutput(wxT("{\\f1\\'77}"));
     break;
   case ltCAP_GAMMA:
-    if (start) TexOutput(_T("{\\f1\\'47}"));
+    if (start) TexOutput(wxT("{\\f1\\'47}"));
     break;
   case ltCAP_DELTA:
-    if (start) TexOutput(_T("{\\f1\\'44}"));
+    if (start) TexOutput(wxT("{\\f1\\'44}"));
     break;
   case ltCAP_THETA:
-    if (start) TexOutput(_T("{\\f1\\'51}"));
+    if (start) TexOutput(wxT("{\\f1\\'51}"));
     break;
   case ltCAP_LAMBDA:
-    if (start) TexOutput(_T("{\\f1\\'4C}"));
+    if (start) TexOutput(wxT("{\\f1\\'4C}"));
     break;
   case ltCAP_XI:
-    if (start) TexOutput(_T("{\\f1\\'58}"));
+    if (start) TexOutput(wxT("{\\f1\\'58}"));
     break;
   case ltCAP_PI:
-    if (start) TexOutput(_T("{\\f1\\'50}"));
+    if (start) TexOutput(wxT("{\\f1\\'50}"));
     break;
   case ltCAP_SIGMA:
-    if (start) TexOutput(_T("{\\f1\\'53}"));
+    if (start) TexOutput(wxT("{\\f1\\'53}"));
     break;
   case ltCAP_UPSILON:
-    if (start) TexOutput(_T("{\\f1\\'54}"));
+    if (start) TexOutput(wxT("{\\f1\\'54}"));
     break;
   case ltCAP_PHI:
-    if (start) TexOutput(_T("{\\f1\\'46}"));
+    if (start) TexOutput(wxT("{\\f1\\'46}"));
     break;
   case ltCAP_PSI:
-    if (start) TexOutput(_T("{\\f1\\'59}"));
+    if (start) TexOutput(wxT("{\\f1\\'59}"));
     break;
   case ltCAP_OMEGA:
-    if (start) TexOutput(_T("{\\f1\\'57}"));
+    if (start) TexOutput(wxT("{\\f1\\'57}"));
     break;
   // Binary operation symbols
   case ltLE:
   case ltLEQ:
-    if (start) TexOutput(_T("{\\f1\\'A3}"));
+    if (start) TexOutput(wxT("{\\f1\\'A3}"));
     break;
   case ltLL:
-    if (start) TexOutput(_T("<<"));
+    if (start) TexOutput(wxT("<<"));
     break;
   case ltSUBSET:
-    if (start) TexOutput(_T("{\\f1\\'CC}"));
+    if (start) TexOutput(wxT("{\\f1\\'CC}"));
     break;
   case ltSUBSETEQ:
-    if (start) TexOutput(_T("{\\f1\\'CD}"));
+    if (start) TexOutput(wxT("{\\f1\\'CD}"));
     break;
   case ltIN:
-    if (start) TexOutput(_T("{\\f1\\'CE}"));
+    if (start) TexOutput(wxT("{\\f1\\'CE}"));
     break;
   case ltGE:
   case ltGEQ:
-    if (start) TexOutput(_T("{\\f1\\'B3}"));
+    if (start) TexOutput(wxT("{\\f1\\'B3}"));
     break;
   case ltGG:
-    if (start) TexOutput(_T(">>"));
+    if (start) TexOutput(wxT(">>"));
     break;
   case ltSUPSET:
-    if (start) TexOutput(_T("{\\f1\\'C9}"));
+    if (start) TexOutput(wxT("{\\f1\\'C9}"));
     break;
   case ltSUPSETEQ:
-    if (start) TexOutput(_T("{\\f1\\'CD}"));
+    if (start) TexOutput(wxT("{\\f1\\'CD}"));
     break;
   case ltNI:
-    if (start) TexOutput(_T("{\\f1\\'27}"));
+    if (start) TexOutput(wxT("{\\f1\\'27}"));
     break;
   case ltPERP:
-    if (start) TexOutput(_T("{\\f1\\'5E}"));
+    if (start) TexOutput(wxT("{\\f1\\'5E}"));
     break;
   case ltNEQ:
-    if (start) TexOutput(_T("{\\f1\\'B9}"));
+    if (start) TexOutput(wxT("{\\f1\\'B9}"));
     break;
   case ltAPPROX:
-    if (start) TexOutput(_T("{\\f1\\'BB}"));
+    if (start) TexOutput(wxT("{\\f1\\'BB}"));
     break;
   case ltCONG:
-    if (start) TexOutput(_T("{\\f1\\'40}"));
+    if (start) TexOutput(wxT("{\\f1\\'40}"));
     break;
   case ltEQUIV:
-    if (start) TexOutput(_T("{\\f1\\'BA}"));
+    if (start) TexOutput(wxT("{\\f1\\'BA}"));
     break;
   case ltPROPTO:
-    if (start) TexOutput(_T("{\\f1\\'B5}"));
+    if (start) TexOutput(wxT("{\\f1\\'B5}"));
     break;
   case ltSIM:
-    if (start) TexOutput(_T("{\\f1\\'7E}"));
+    if (start) TexOutput(wxT("{\\f1\\'7E}"));
     break;
   case ltSMILE:
-    if (start) TexOutput(_T("{\\f4\\'4A}"));
+    if (start) TexOutput(wxT("{\\f4\\'4A}"));
     break;
   case ltFROWN:
-    if (start) TexOutput(_T("{\\f4\\'4C}"));
+    if (start) TexOutput(wxT("{\\f4\\'4C}"));
     break;
   case ltMID:
-    if (start) TexOutput(_T("|"));
+    if (start) TexOutput(wxT("|"));
     break;
 
   // Negated relation symbols
   case ltNOTEQ:
-    if (start) TexOutput(_T("{\\f1\\'B9}"));
+    if (start) TexOutput(wxT("{\\f1\\'B9}"));
     break;
   case ltNOTIN:
-    if (start) TexOutput(_T("{\\f1\\'CF}"));
+    if (start) TexOutput(wxT("{\\f1\\'CF}"));
     break;
   case ltNOTSUBSET:
-    if (start) TexOutput(_T("{\\f1\\'CB}"));
+    if (start) TexOutput(wxT("{\\f1\\'CB}"));
     break;
 
   // Arrows
   case ltLEFTARROW:
-     if (start) TexOutput(_T("{\\f1\\'AC}"));
+     if (start) TexOutput(wxT("{\\f1\\'AC}"));
     break;
   case ltLEFTARROW2:
-    if (start) TexOutput(_T("{\\f1\\'DC}"));
+    if (start) TexOutput(wxT("{\\f1\\'DC}"));
     break;
   case ltRIGHTARROW:
-    if (start) TexOutput(_T("{\\f1\\'AE}"));
+    if (start) TexOutput(wxT("{\\f1\\'AE}"));
     break;
   case ltRIGHTARROW2:
-    if (start) TexOutput(_T("{\\f1\\'DE}"));
+    if (start) TexOutput(wxT("{\\f1\\'DE}"));
     break;
   case ltLEFTRIGHTARROW:
-    if (start) TexOutput(_T("{\\f1\\'AB}"));
+    if (start) TexOutput(wxT("{\\f1\\'AB}"));
     break;
   case ltLEFTRIGHTARROW2:
-    if (start) TexOutput(_T("{\\f1\\'DB}"));
+    if (start) TexOutput(wxT("{\\f1\\'DB}"));
     break;
   case ltUPARROW:
-    if (start) TexOutput(_T("{\\f1\\'AD}"));
+    if (start) TexOutput(wxT("{\\f1\\'AD}"));
     break;
   case ltUPARROW2:
-    if (start) TexOutput(_T("{\\f1\\'DD}"));
+    if (start) TexOutput(wxT("{\\f1\\'DD}"));
     break;
   case ltDOWNARROW:
-    if (start) TexOutput(_T("{\\f1\\'AF}"));
+    if (start) TexOutput(wxT("{\\f1\\'AF}"));
     break;
   case ltDOWNARROW2:
-    if (start) TexOutput(_T("{\\f1\\'DF}"));
+    if (start) TexOutput(wxT("{\\f1\\'DF}"));
     break;
 
   // Miscellaneous symbols
   case ltALEPH:
-    if (start) TexOutput(_T("{\\f1\\'CO}"));
+    if (start) TexOutput(wxT("{\\f1\\'CO}"));
     break;
   case ltWP:
-    if (start) TexOutput(_T("{\\f1\\'C3}"));
+    if (start) TexOutput(wxT("{\\f1\\'C3}"));
     break;
   case ltRE:
-    if (start) TexOutput(_T("{\\f1\\'C2}"));
+    if (start) TexOutput(wxT("{\\f1\\'C2}"));
     break;
   case ltIM:
-    if (start) TexOutput(_T("{\\f1\\'C1}"));
+    if (start) TexOutput(wxT("{\\f1\\'C1}"));
     break;
   case ltEMPTYSET:
-    if (start) TexOutput(_T("{\\f1\\'C6}"));
+    if (start) TexOutput(wxT("{\\f1\\'C6}"));
     break;
   case ltNABLA:
-    if (start) TexOutput(_T("{\\f1\\'D1}"));
+    if (start) TexOutput(wxT("{\\f1\\'D1}"));
     break;
   case ltSURD:
-    if (start) TexOutput(_T("{\\f1\\'D6}"));
+    if (start) TexOutput(wxT("{\\f1\\'D6}"));
     break;
   case ltPARTIAL:
-    if (start) TexOutput(_T("{\\f1\\'B6}"));
+    if (start) TexOutput(wxT("{\\f1\\'B6}"));
     break;
   case ltBOT:
-    if (start) TexOutput(_T("{\\f1\\'5E}"));
+    if (start) TexOutput(wxT("{\\f1\\'5E}"));
     break;
   case ltFORALL:
-    if (start) TexOutput(_T("{\\f1\\'22}"));
+    if (start) TexOutput(wxT("{\\f1\\'22}"));
     break;
   case ltEXISTS:
-    if (start) TexOutput(_T("{\\f1\\'24}"));
+    if (start) TexOutput(wxT("{\\f1\\'24}"));
     break;
   case ltNEG:
-    if (start) TexOutput(_T("{\\f1\\'D8}"));
+    if (start) TexOutput(wxT("{\\f1\\'D8}"));
     break;
   case ltSHARP:
-    if (start) TexOutput(_T("{\\f1\\'23}"));
+    if (start) TexOutput(wxT("{\\f1\\'23}"));
     break;
   case ltANGLE:
-    if (start) TexOutput(_T("{\\f1\\'D0}"));
+    if (start) TexOutput(wxT("{\\f1\\'D0}"));
     break;
   case ltTRIANGLE:
-    if (start) TexOutput(_T("{\\f5\\'73}"));
+    if (start) TexOutput(wxT("{\\f5\\'73}"));
     break;
   case ltCLUBSUIT:
-    if (start) TexOutput(_T("{\\f5\\'A8}"));
+    if (start) TexOutput(wxT("{\\f5\\'A8}"));
     break;
   case ltDIAMONDSUIT:
-    if (start) TexOutput(_T("{\\f5\\'A9}"));
+    if (start) TexOutput(wxT("{\\f5\\'A9}"));
     break;
   case ltHEARTSUIT:
-    if (start) TexOutput(_T("{\\f5\\'AA}"));
+    if (start) TexOutput(wxT("{\\f5\\'AA}"));
     break;
   case ltSPADESUIT:
-    if (start) TexOutput(_T("{\\f5\\'AB}"));
+    if (start) TexOutput(wxT("{\\f5\\'AB}"));
     break;
   case ltINFTY:
-    if (start) TexOutput(_T("{\\f1\\'A5}"));
+    if (start) TexOutput(wxT("{\\f1\\'A5}"));
     break;
   case ltCOPYRIGHT:
-    if (start) TexOutput(_T("{\\f0\\'A9}"));
+    if (start) TexOutput(wxT("{\\f0\\'A9}"));
     break;
   case ltREGISTERED:
-    if (start) TexOutput(_T("{\\f0\\'AE}"));
+    if (start) TexOutput(wxT("{\\f0\\'AE}"));
     break;
   case ltPM:
-    if (start) TexOutput(_T("{\\f1\\'B1}"));
+    if (start) TexOutput(wxT("{\\f1\\'B1}"));
     break;
   case ltMP:
-    if (start) TexOutput(_T("{\\f1\\'B1}"));
+    if (start) TexOutput(wxT("{\\f1\\'B1}"));
     break;
   case ltTIMES:
-    if (start) TexOutput(_T("{\\f1\\'B4}"));
+    if (start) TexOutput(wxT("{\\f1\\'B4}"));
     break;
   case ltDIV:
-    if (start) TexOutput(_T("{\\f1\\'B8}"));
+    if (start) TexOutput(wxT("{\\f1\\'B8}"));
     break;
   case ltCDOT:
-    if (start) TexOutput(_T("{\\f1\\'D7}"));
+    if (start) TexOutput(wxT("{\\f1\\'D7}"));
     break;
   case ltAST:
-    if (start) TexOutput(_T("{\\f1\\'2A}"));
+    if (start) TexOutput(wxT("{\\f1\\'2A}"));
     break;
   case ltSTAR:
-    if (start) TexOutput(_T("{\\f5\\'AB}"));
+    if (start) TexOutput(wxT("{\\f5\\'AB}"));
     break;
   case ltCAP:
-    if (start) TexOutput(_T("{\\f1\\'C7}"));
+    if (start) TexOutput(wxT("{\\f1\\'C7}"));
     break;
   case ltCUP:
-    if (start) TexOutput(_T("{\\f1\\'C8}"));
+    if (start) TexOutput(wxT("{\\f1\\'C8}"));
     break;
   case ltVEE:
-    if (start) TexOutput(_T("{\\f1\\'DA}"));
+    if (start) TexOutput(wxT("{\\f1\\'DA}"));
     break;
   case ltWEDGE:
-    if (start) TexOutput(_T("{\\f1\\'D9}"));
+    if (start) TexOutput(wxT("{\\f1\\'D9}"));
     break;
   case ltCIRC:
-    if (start) TexOutput(_T("{\\f1\\'B0}"));
+    if (start) TexOutput(wxT("{\\f1\\'B0}"));
     break;
   case ltBULLET:
-    if (start) TexOutput(_T("{\\f1\\'B7}"));
+    if (start) TexOutput(wxT("{\\f1\\'B7}"));
     break;
   case ltDIAMOND:
-    if (start) TexOutput(_T("{\\f1\\'E0}"));
+    if (start) TexOutput(wxT("{\\f1\\'E0}"));
     break;
   case ltBOX:
-    if (start) TexOutput(_T("{\\f1\\'C6}"));
+    if (start) TexOutput(wxT("{\\f1\\'C6}"));
     break;
   case ltDIAMOND2:
-    if (start) TexOutput(_T("{\\f1\\'E0}"));
+    if (start) TexOutput(wxT("{\\f1\\'E0}"));
     break;
   case ltBIGTRIANGLEDOWN:
-    if (start) TexOutput(_T("{\\f1\\'D1}"));
+    if (start) TexOutput(wxT("{\\f1\\'D1}"));
     break;
   case ltOPLUS:
-    if (start) TexOutput(_T("{\\f1\\'C5}"));
+    if (start) TexOutput(wxT("{\\f1\\'C5}"));
     break;
   case ltOTIMES:
-    if (start) TexOutput(_T("{\\f1\\'C4}"));
+    if (start) TexOutput(wxT("{\\f1\\'C4}"));
     break;
   case ltSS:
-    if (start) TexOutput(_T("{\\'DF}"));
+    if (start) TexOutput(wxT("{\\'DF}"));
     break;
   case ltFIGURE:
   {
@@ -3211,29 +3211,29 @@ bool RTFOnArgument(int macroId, int arg_
   case ltFUNC:
   {
     if (start && (arg_no == 1))
-      TexOutput(_T("\\pard\\li600\\fi-600{\\b "));
+      TexOutput(wxT("\\pard\\li600\\fi-600{\\b "));
 
     if (!start && (arg_no == 1))
-      TexOutput(_T("} "));
+      TexOutput(wxT("} "));
 
     if (start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("{\\b "));
+      if (!suppressNameDecoration) TexOutput(wxT("{\\b "));
       currentMember = GetArgChunk();
     }
     if (!start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("}"));
+      if (!suppressNameDecoration) TexOutput(wxT("}"));
     }
 
     if (start && (arg_no == 3))
-      TexOutput(_T("("));
+      TexOutput(wxT("("));
     if (!start && (arg_no == 3))
     {
-//      TexOutput(_T(")\\li0\\fi0"));
-//      TexOutput(_T(")\\par\\pard\\li0\\fi0"));
+//      TexOutput(wxT(")\\li0\\fi0"));
+//      TexOutput(wxT(")\\par\\pard\\li0\\fi0"));
 //      issuedNewParagraph = 1;
-      TexOutput(_T(")"));
+      TexOutput(wxT(")"));
       WriteEnvironmentStyles();
     }
     break;
@@ -3241,23 +3241,23 @@ bool RTFOnArgument(int macroId, int arg_
   case ltCLIPSFUNC:
   {
     if (start && (arg_no == 1))
-      TexOutput(_T("\\pard\\li260\\fi-260{\\b "));
+      TexOutput(wxT("\\pard\\li260\\fi-260{\\b "));
     if (!start && (arg_no == 1))
-      TexOutput(_T("} "));
+      TexOutput(wxT("} "));
 
     if (start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("({\\b "));
+      if (!suppressNameDecoration) TexOutput(wxT("({\\b "));
       currentMember = GetArgChunk();
     }
     if (!start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("}"));
+      if (!suppressNameDecoration) TexOutput(wxT("}"));
     }
 
     if (!start && (arg_no == 3))
     {
-      TexOutput(_T(")\\li0\\fi0"));
+      TexOutput(wxT(")\\li0\\fi0"));
       WriteEnvironmentStyles();
     }
     break;
@@ -3265,24 +3265,24 @@ bool RTFOnArgument(int macroId, int arg_
   case ltPFUNC:
   {
     if (start && (arg_no == 1))
-      TexOutput(_T("\\pard\\li260\\fi-260"));
+      TexOutput(wxT("\\pard\\li260\\fi-260"));
 
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
 
     if (start && (arg_no == 2))
-      TexOutput(_T("(*"));
+      TexOutput(wxT("(*"));
     if (!start && (arg_no == 2))
-      TexOutput(_T(")"));
+      TexOutput(wxT(")"));
 
     if (start && (arg_no == 2))
       currentMember = GetArgChunk();
 
     if (start && (arg_no == 3))
-      TexOutput(_T("("));
+      TexOutput(wxT("("));
     if (!start && (arg_no == 3))
     {
-      TexOutput(_T(")\\li0\\fi0"));
+      TexOutput(wxT(")\\li0\\fi0"));
       WriteEnvironmentStyles();
     }
     break;
@@ -3290,39 +3290,39 @@ bool RTFOnArgument(int macroId, int arg_
   case ltPARAM:
   {
     if (start && (arg_no == 1))
-      TexOutput(_T("{\\b "));
+      TexOutput(wxT("{\\b "));
     if (!start && (arg_no == 1))
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     if (start && (arg_no == 2))
     {
-      TexOutput(_T("{\\i "));
+      TexOutput(wxT("{\\i "));
     }
     if (!start && (arg_no == 2))
     {
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     }
     break;
   }
   case ltCPARAM:
   {
     if (start && (arg_no == 1))
-      TexOutput(_T("{\\b "));
+      TexOutput(wxT("{\\b "));
     if (!start && (arg_no == 1))
-      TexOutput(_T("} "));  // This is the difference from param - one space!
+      TexOutput(wxT("} "));  // This is the difference from param - one space!
     if (start && (arg_no == 2))
     {
-      TexOutput(_T("{\\i "));
+      TexOutput(wxT("{\\i "));
     }
     if (!start && (arg_no == 2))
     {
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     }
     break;
   }
   case ltMEMBER:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
 
     if (start && (arg_no == 2))
       currentMember = GetArgChunk();
@@ -3352,7 +3352,7 @@ bool RTFOnArgument(int macroId, int arg_
       }
       else
       {
-        wxFprintf(Chapters, _T("{\\field{\\*\\fldinst  REF %s \\\\* MERGEFORMAT }{\\fldrslt ??}}"),
+        wxFprintf(Chapters, wxT("{\\field{\\*\\fldinst  REF %s \\\\* MERGEFORMAT }{\\fldrslt ??}}"),
                 refName);
       }
       return false;
@@ -3367,23 +3367,23 @@ bool RTFOnArgument(int macroId, int arg_
         if ((GetNoArgs() - arg_no) == 1)
         {
           if (start)
-            TexOutput(_T("{\\uldb "));
+            TexOutput(wxT("{\\uldb "));
           else
-            TexOutput(_T("}"));
+            TexOutput(wxT("}"));
         }
         if ((GetNoArgs() - arg_no) == 0) // Arg = 2, or 3 if first is optional
         {
           if (start)
           {
-            TexOutput(_T("{\\v "));
+            TexOutput(wxT("{\\v "));
 
             // Remove green colour/underlining if specified
             if (!hotSpotUnderline && !hotSpotColour)
-              TexOutput(_T("%"));
+              TexOutput(wxT("%"));
             else if (!hotSpotColour)
-              TexOutput(_T("*"));
+              TexOutput(wxT("*"));
           }
-          else TexOutput(_T("}"));
+          else TexOutput(wxT("}"));
         }
     }
     else // If a linear document, must resolve the references ourselves
@@ -3393,9 +3393,9 @@ bool RTFOnArgument(int macroId, int arg_
         // In a linear document we display the anchor text in italic plus
         // the page number.
         if (start)
-          TexOutput(_T("{\\i "));
+          TexOutput(wxT("{\\i "));
         else
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
 
         if (start)
           helpRefText = GetArgChunk();
@@ -3413,17 +3413,17 @@ bool RTFOnArgument(int macroId, int arg_
           if (start)
           {
             if (texRef || !ignoreBadRefs)
-              TexOutput(_T(" ("));
+              TexOutput(wxT(" ("));
             if (refName)
             {
                 if (texRef || !ignoreBadRefs)
                 {
                   if (useWord)
                   {
-                      TexOutput(_T("p. "));
-                      TexOutput(_T("{\\field{\\*\\fldinst  PAGEREF "));
+                      TexOutput(wxT("p. "));
+                      TexOutput(wxT("{\\field{\\*\\fldinst  PAGEREF "));
                       TexOutput(refName);
-                      TexOutput(_T(" \\\\* MERGEFORMAT }{\\fldrslt ??}}"));
+                      TexOutput(wxT(" \\\\* MERGEFORMAT }{\\fldrslt ??}}"));
                   }
                   else
                   {
@@ -3432,25 +3432,25 @@ bool RTFOnArgument(int macroId, int arg_
                     if (texRef)
                     {
                       TexOutput(texRef->sectionName);
-                      TexOutput(_T(" "));
+                      TexOutput(wxT(" "));
                       TexOutput(texRef->sectionNumber);
                     }
                     else
                     {
                       if (!ignoreBadRefs)
-                        TexOutput(_T("??"));
-                      wxSnprintf(buf, sizeof(buf), _T("Warning: unresolved reference '%s'"), refName);
+                        TexOutput(wxT("??"));
+                      wxSnprintf(buf, sizeof(buf), wxT("Warning: unresolved reference '%s'"), refName);
                       OnInform(buf);
                     }
                   }
                 }
             }
-            else TexOutput(_T("??"));
+            else TexOutput(wxT("??"));
           }
           else
           {
             if (texRef || !ignoreBadRefs)
-              TexOutput(_T(")"));
+              TexOutput(wxT(")"));
           }
         }
         return false;
@@ -3469,11 +3469,11 @@ bool RTFOnArgument(int macroId, int arg_
       if (start)
       {
         inVerbatim = true;
-        TexOutput(_T(" ({\\f3 "));
+        TexOutput(wxT(" ({\\f3 "));
       }
       else
       {
-        TexOutput(_T("})"));
+        TexOutput(wxT("})"));
         inVerbatim = false;
       }
       return true;
@@ -3487,23 +3487,23 @@ bool RTFOnArgument(int macroId, int arg_
       if ((GetNoArgs() - arg_no) == 1)
       {
         if (start)
-          TexOutput(_T("{\\ul "));
+          TexOutput(wxT("{\\ul "));
         else
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
       }
       if ((GetNoArgs() - arg_no) == 0) // Arg = 2, or 3 if first is optional
       {
         if (start)
         {
-          TexOutput(_T("{\\v "));
+          TexOutput(wxT("{\\v "));
 
           // Remove green colour/underlining if specified
           if (!hotSpotUnderline && !hotSpotColour)
-            TexOutput(_T("%"));
+            TexOutput(wxT("%"));
           else if (!hotSpotColour)
-            TexOutput(_T("*"));
+            TexOutput(wxT("*"));
         }
-        else TexOutput(_T("}"));
+        else TexOutput(wxT("}"));
       }
     }
     else // A linear document...
@@ -3512,9 +3512,9 @@ bool RTFOnArgument(int macroId, int arg_
       {
         // In a linear document we just display the anchor text in italic
         if (start)
-          TexOutput(_T("{\\i "));
+          TexOutput(wxT("{\\i "));
         else
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
         return true;
       }
       else return false;
@@ -3550,7 +3550,7 @@ bool RTFOnArgument(int macroId, int arg_
       wxChar *imageDimensions = copystring(GetArgData());
 
       // imageWidth - Convert points to TWIPS (1 twip = 1/20th of point)
-      wxStringTokenizer tok(imageDimensions, _T(";:"), wxTOKEN_STRTOK);
+      wxStringTokenizer tok(imageDimensions, wxT(";:"), wxTOKEN_STRTOK);
       if(tok.HasMoreTokens())
       {
         wxString token = tok.GetNextToken();
@@ -3579,49 +3579,49 @@ bool RTFOnArgument(int macroId, int arg_
     else if (start && (arg_no == 2 ))
     {
       wxChar *filename = copystring(GetArgData());
-      wxString f = _T("");
-      if ((winHelp || (wxStrcmp(bitmapMethod, _T("includepicture")) == 0)  || (wxStrcmp(bitmapMethod, _T("import")) == 0)) && useWord)
+      wxString f = wxT("");
+      if ((winHelp || (wxStrcmp(bitmapMethod, wxT("includepicture")) == 0)  || (wxStrcmp(bitmapMethod, wxT("import")) == 0)) && useWord)
       {
-        if (f == _T("")) // Try for a .shg (segmented hypergraphics file)
+        if (f == wxT("")) // Try for a .shg (segmented hypergraphics file)
         {
           wxStrcpy(buf, filename);
           StripExtension(buf);
-          wxStrcat(buf, _T(".shg"));
+          wxStrcat(buf, wxT(".shg"));
           f = TexPathList.FindValidPath(buf);
         }
-        if (f == _T("")) // Try for a .bmp
+        if (f == wxT("")) // Try for a .bmp
         {
           wxStrcpy(buf, filename);
           StripExtension(buf);
-          wxStrcat(buf, _T(".bmp"));
+          wxStrcat(buf, wxT(".bmp"));
           f = TexPathList.FindValidPath(buf);
         }
-        if (f == _T("")) // Try for a metafile instead
+        if (f == wxT("")) // Try for a metafile instead
         {
           wxStrcpy(buf, filename);
           StripExtension(buf);
-          wxStrcat(buf, _T(".wmf"));
+          wxStrcat(buf, wxT(".wmf"));
           f = TexPathList.FindValidPath(buf);
         }
-        if (f != _T(""))
+        if (f != wxT(""))
         {
           if (winHelp)
           {
             if (bitmapTransparency && (winHelpVersion > 3))
-              TexOutput(_T("\\{bmct "));
+              TexOutput(wxT("\\{bmct "));
             else
-              TexOutput(_T("\\{bmc "));
+              TexOutput(wxT("\\{bmc "));
             wxString str = wxFileNameFromPath(f);
             TexOutput((wxChar*) (const wxChar*) str);
-            TexOutput(_T("\\}"));
+            TexOutput(wxT("\\}"));
           }
           else
           {
             // Microsoft Word method
-            if (wxStrcmp(bitmapMethod, _T("import")) == 0)
-              TexOutput(_T("{\\field{\\*\\fldinst IMPORT "));
+            if (wxStrcmp(bitmapMethod, wxT("import")) == 0)
+              TexOutput(wxT("{\\field{\\*\\fldinst IMPORT "));
             else
-              TexOutput(_T("{\\field{\\*\\fldinst INCLUDEPICTURE "));
+              TexOutput(wxT("{\\field{\\*\\fldinst INCLUDEPICTURE "));
 
             // Full path appears not to be valid!
             wxString str = wxFileNameFromPath(f);
@@ -3637,15 +3637,15 @@ bool RTFOnArgument(int macroId, int arg_
                 TexOutput(smallBuf);
             }
 */
-            TexOutput(_T("}{\\fldrslt PRESS F9 TO FORMAT PICTURE}}"));
+            TexOutput(wxT("}{\\fldrslt PRESS F9 TO FORMAT PICTURE}}"));
           }
         }
         else
         {
-          TexOutput(_T("[No BMP or WMF for image file "));
+          TexOutput(wxT("[No BMP or WMF for image file "));
           TexOutput(filename);
-          TexOutput(_T("]"));
-          wxSnprintf(buf, sizeof(buf), _T("Warning: could not find a BMP or WMF equivalent for %s."), filename);
+          TexOutput(wxT("]"));
+          wxSnprintf(buf, sizeof(buf), wxT("Warning: could not find a BMP or WMF equivalent for %s."), filename);
           OnInform(buf);
         }
         if (filename)  // glt
@@ -3653,21 +3653,21 @@ bool RTFOnArgument(int macroId, int arg_
       }
       else // linear RTF
       {
-          if (f == _T("")) // Try for a .bmp
+          if (f == wxT("")) // Try for a .bmp
           {
             wxStrcpy(buf, filename);
             StripExtension(buf);
-            wxStrcat(buf, _T(".bmp"));
+            wxStrcat(buf, wxT(".bmp"));
             f = TexPathList.FindValidPath(buf);
           }
-          if (f != _T(""))
+          if (f != wxT(""))
           {
-            FILE *fd = wxFopen(f, _T("rb"));
+            FILE *fd = wxFopen(f, wxT("rb"));
             if (OutputBitmapHeader(fd, winHelp))
               OutputBitmapData(fd);
             else
             {
-              wxSnprintf(buf, sizeof(buf), _T("Could not read bitmap %s.\nMay be in wrong format (needs RGB-encoded Windows BMP)."), f.c_str());
+              wxSnprintf(buf, sizeof(buf), wxT("Could not read bitmap %s.\nMay be in wrong format (needs RGB-encoded Windows BMP)."), f.c_str());
               OnError(buf);
             }
             fclose(fd);
@@ -3677,19 +3677,19 @@ bool RTFOnArgument(int macroId, int arg_
 #ifdef __WXMSW__
             wxStrcpy(buf, filename);
             StripExtension(buf);
-            wxStrcat(buf, _T(".wmf"));
+            wxStrcat(buf, wxT(".wmf"));
             f = TexPathList.FindValidPath(buf);
-            if (f != _T(""))
+            if (f != wxT(""))
             {
   //            HFILE handle = _lopen(f, READ);
-              FILE *fd = wxFopen(f, _T("rb"));
+              FILE *fd = wxFopen(f, wxT("rb"));
               if (OutputMetafileHeader(fd, winHelp, imageWidth, imageHeight))
               {
                 OutputMetafileData(fd);
               }
               else
               {
-                wxSnprintf(buf, sizeof(buf), _T("Could not read metafile %s. Perhaps it's not a placeable metafile?"), f.c_str());
+                wxSnprintf(buf, sizeof(buf), wxT("Could not read metafile %s. Perhaps it's not a placeable metafile?"), f.c_str());
                 OnError(buf);
               }
               fclose(fd);
@@ -3697,10 +3697,10 @@ bool RTFOnArgument(int macroId, int arg_
             else
             {
 #endif
-              TexOutput(_T("[No BMP or WMF for image file "));
+              TexOutput(wxT("[No BMP or WMF for image file "));
               TexOutput(filename);
-              TexOutput(_T("]"));
-              wxSnprintf(buf, sizeof(buf), _T("Warning: could not find a BMP or WMF equivalent for %s."), filename);
+              TexOutput(wxT("]"));
+              wxSnprintf(buf, sizeof(buf), wxT("Warning: could not find a BMP or WMF equivalent for %s."), filename);
               OnInform(buf);
 #ifdef __WXMSW__
             }
@@ -3729,8 +3729,8 @@ bool RTFOnArgument(int macroId, int arg_
         wxChar *alignString = copystring(GetArgData());
         ParseTableArgument(alignString);
 
-//        TexOutput(_T("\\trowd\\trgaph108\\trleft-108"));
-        TexOutput(_T("\\trowd\\trgaph108"));
+//        TexOutput(wxT("\\trowd\\trgaph108\\trleft-108"));
+        TexOutput(wxT("\\trowd\\trgaph108"));
 
         // Write the first row formatting for compatibility
         // with standard Latex
@@ -3739,10 +3739,10 @@ bool RTFOnArgument(int macroId, int arg_
           for (int i = 0; i < noColumns; i++)
           {
             currentWidth += TableData[i].width;
-            wxSnprintf(buf, sizeof(buf), _T("\\cellx%d"), currentWidth);
+            wxSnprintf(buf, sizeof(buf), wxT("\\cellx%d"), currentWidth);
             TexOutput(buf);
           }
-          TexOutput(_T("\\pard\\intbl\n"));
+          TexOutput(wxT("\\pard\\intbl\n"));
         }
         delete[] alignString;
 
@@ -3751,7 +3751,7 @@ bool RTFOnArgument(int macroId, int arg_
     }
     else if (arg_no == 2 && !start)
     {
-      TexOutput(_T("\\pard\n"));
+      TexOutput(wxT("\\pard\n"));
       WriteEnvironmentStyles();
       inTabular = false;
     }
@@ -3763,9 +3763,9 @@ bool RTFOnArgument(int macroId, int arg_
   {
     if (start)
     {
-      TexOutput(_T("\\li360\n"));
+      TexOutput(wxT("\\li360\n"));
       forbidParindent ++;
-      PushEnvironmentStyle(_T("\\li360\\sa200"));
+      PushEnvironmentStyle(wxT("\\li360\\sa200"));
     }
     else
     {
@@ -3780,8 +3780,8 @@ bool RTFOnArgument(int macroId, int arg_
   {
     if (start)
     {
-      TexOutput(_T("\\li360\n"));
-      PushEnvironmentStyle(_T("\\li360\\sa200"));
+      TexOutput(wxT("\\li360\n"));
+      PushEnvironmentStyle(wxT("\\li360\\sa200"));
     }
     else
     {
@@ -3799,7 +3799,7 @@ bool RTFOnArgument(int macroId, int arg_
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\sa200\\box\\trgaph108%s\n"), ((macroId == ltNORMALBOXD) ? _T("\\brdrdb") : _T("\\brdrs")));
+      wxSnprintf(buf, sizeof(buf), wxT("\\sa200\\box\\trgaph108%s\n"), ((macroId == ltNORMALBOXD) ? wxT("\\brdrdb") : wxT("\\brdrs")));
       TexOutput(buf);
       PushEnvironmentStyle(buf);
     }
@@ -3816,13 +3816,13 @@ bool RTFOnArgument(int macroId, int arg_
     if (start)
     {
       wxChar *data = GetArgData();
-      if (wxStrcmp(data, _T("10")) == 0)
+      if (wxStrcmp(data, wxT("10")) == 0)
         SetFontSizes(10);
-      else if (wxStrcmp(data, _T("11")) == 0)
+      else if (wxStrcmp(data, wxT("11")) == 0)
         SetFontSizes(11);
-      else if (wxStrcmp(data, _T("12")) == 0)
+      else if (wxStrcmp(data, wxT("12")) == 0)
         SetFontSizes(12);
-      wxSnprintf(buf, sizeof(buf), _T("\\fs%d\n"), normalFont*2);
+      wxSnprintf(buf, sizeof(buf), wxT("\\fs%d\n"), normalFont*2);
       TexOutput(buf);
       TexOutput(buf);
       return false;
@@ -3834,12 +3834,12 @@ bool RTFOnArgument(int macroId, int arg_
     if (start)
     {
       wxChar *data = GetArgData();
-      if (wxStrcmp(data, _T("Swiss")) == 0)
-        TexOutput(_T("\\f2\n"));
-      else if (wxStrcmp(data, _T("Symbol")) == 0)
-        TexOutput(_T("\\f1\n"));
-      else if (wxStrcmp(data, _T("Times")) == 0)
-        TexOutput(_T("\\f0\n"));
+      if (wxStrcmp(data, wxT("Swiss")) == 0)
+        TexOutput(wxT("\\f2\n"));
+      else if (wxStrcmp(data, wxT("Symbol")) == 0)
+        TexOutput(wxT("\\f1\n"));
+      else if (wxStrcmp(data, wxT("Times")) == 0)
+        TexOutput(wxT("\\f0\n"));
 
       return false;
     }
@@ -3853,7 +3853,7 @@ bool RTFOnArgument(int macroId, int arg_
       ParIndent = ParseUnitArgument(data);
       if (ParIndent == 0 || forbidParindent == 0)
       {
-        wxSnprintf(buf, sizeof(buf), _T("\\fi%d\n"), ParIndent*20);
+        wxSnprintf(buf, sizeof(buf), wxT("\\fi%d\n"), ParIndent*20);
         TexOutput(buf);
       }
       return false;
@@ -3877,7 +3877,7 @@ bool RTFOnArgument(int macroId, int arg_
       case 1:
       {
         if (!start)
-          TexOutput(_T("\\tab "));
+          TexOutput(wxT("\\tab "));
         break;
       }
       case 2:
@@ -3885,8 +3885,8 @@ bool RTFOnArgument(int macroId, int arg_
         if (!start)
         {
           if (macroId == ltTWOCOLITEMRULED)
-            TexOutput(_T("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
-          TexOutput(_T("\\par\\pard\n"));
+            TexOutput(wxT("\\brdrb\\brdrs\\brdrw15\\brsp20 "));
+          TexOutput(wxT("\\par\\pard\n"));
           issuedNewParagraph = 1;
           WriteEnvironmentStyles();
         }
@@ -3909,34 +3909,34 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("\\'e0"));
+           TexOutput(wxT("\\'e0"));
            break;
           case 'e':
-           TexOutput(_T("\\'e8"));
+           TexOutput(wxT("\\'e8"));
            break;
           case 'i':
-           TexOutput(_T("\\'ec"));
+           TexOutput(wxT("\\'ec"));
            break;
           case 'o':
-           TexOutput(_T("\\'f2"));
+           TexOutput(wxT("\\'f2"));
            break;
           case 'u':
-           TexOutput(_T("\\'f9"));
+           TexOutput(wxT("\\'f9"));
            break;
           case 'A':
-           TexOutput(_T("\\'c0"));
+           TexOutput(wxT("\\'c0"));
            break;
           case 'E':
-           TexOutput(_T("\\'c8"));
+           TexOutput(wxT("\\'c8"));
            break;
           case 'I':
-           TexOutput(_T("\\'cc"));
+           TexOutput(wxT("\\'cc"));
            break;
           case 'O':
-           TexOutput(_T("\\'d2"));
+           TexOutput(wxT("\\'d2"));
            break;
           case 'U':
-           TexOutput(_T("\\'d9"));
+           TexOutput(wxT("\\'d9"));
            break;
           default:
            break;
@@ -3955,40 +3955,40 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("\\'e1"));
+           TexOutput(wxT("\\'e1"));
            break;
           case 'e':
-           TexOutput(_T("\\'e9"));
+           TexOutput(wxT("\\'e9"));
            break;
           case 'i':
-           TexOutput(_T("\\'ed"));
+           TexOutput(wxT("\\'ed"));
            break;
           case 'o':
-           TexOutput(_T("\\'f3"));
+           TexOutput(wxT("\\'f3"));
            break;
           case 'u':
-           TexOutput(_T("\\'fa"));
+           TexOutput(wxT("\\'fa"));
            break;
           case 'y':
-           TexOutput(_T("\\'fd"));
+           TexOutput(wxT("\\'fd"));
            break;
           case 'A':
-           TexOutput(_T("\\'c1"));
+           TexOutput(wxT("\\'c1"));
            break;
           case 'E':
-           TexOutput(_T("\\'c9"));
+           TexOutput(wxT("\\'c9"));
            break;
           case 'I':
-           TexOutput(_T("\\'cd"));
+           TexOutput(wxT("\\'cd"));
            break;
           case 'O':
-           TexOutput(_T("\\'d3"));
+           TexOutput(wxT("\\'d3"));
            break;
           case 'U':
-           TexOutput(_T("\\'da"));
+           TexOutput(wxT("\\'da"));
            break;
           case 'Y':
-           TexOutput(_T("\\'dd"));
+           TexOutput(wxT("\\'dd"));
            break;
           default:
            break;
@@ -4007,34 +4007,34 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("\\'e2"));
+           TexOutput(wxT("\\'e2"));
            break;
           case 'e':
-           TexOutput(_T("\\'ea"));
+           TexOutput(wxT("\\'ea"));
            break;
           case 'i':
-           TexOutput(_T("\\'ee"));
+           TexOutput(wxT("\\'ee"));
            break;
           case 'o':
-           TexOutput(_T("\\'f4"));
+           TexOutput(wxT("\\'f4"));
            break;
           case 'u':
-           TexOutput(_T("\\'fb"));
+           TexOutput(wxT("\\'fb"));
            break;
           case 'A':
-           TexOutput(_T("\\'c2"));
+           TexOutput(wxT("\\'c2"));
            break;
           case 'E':
-           TexOutput(_T("\\'ca"));
+           TexOutput(wxT("\\'ca"));
            break;
           case 'I':
-           TexOutput(_T("\\'ce"));
+           TexOutput(wxT("\\'ce"));
            break;
           case 'O':
-           TexOutput(_T("\\'d4"));
+           TexOutput(wxT("\\'d4"));
            break;
           case 'U':
-           TexOutput(_T("\\'db"));
+           TexOutput(wxT("\\'db"));
            break;
           default:
            break;
@@ -4053,25 +4053,25 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("\\'e3"));
+           TexOutput(wxT("\\'e3"));
            break;
           case ' ':
-           TexOutput(_T("~"));
+           TexOutput(wxT("~"));
            break;
           case 'n':
-           TexOutput(_T("\\'f1"));
+           TexOutput(wxT("\\'f1"));
            break;
           case 'o':
-           TexOutput(_T("\\'f5"));
+           TexOutput(wxT("\\'f5"));
            break;
           case 'A':
-           TexOutput(_T("\\'c3"));
+           TexOutput(wxT("\\'c3"));
            break;
           case 'N':
-           TexOutput(_T("\\'d1"));
+           TexOutput(wxT("\\'d1"));
            break;
           case 'O':
-           TexOutput(_T("\\'d5"));
+           TexOutput(wxT("\\'d5"));
            break;
           default:
            break;
@@ -4090,43 +4090,43 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("\\'e4"));
+           TexOutput(wxT("\\'e4"));
            break;
           case 'e':
-           TexOutput(_T("\\'eb"));
+           TexOutput(wxT("\\'eb"));
            break;
           case 'i':
-           TexOutput(_T("\\'ef"));
+           TexOutput(wxT("\\'ef"));
            break;
           case 'o':
-           TexOutput(_T("\\'f6"));
+           TexOutput(wxT("\\'f6"));
            break;
           case 'u':
-           TexOutput(_T("\\'fc"));
+           TexOutput(wxT("\\'fc"));
            break;
           case 's':
-           TexOutput(_T("\\'df"));
+           TexOutput(wxT("\\'df"));
            break;
           case 'y':
-           TexOutput(_T("\\'ff"));
+           TexOutput(wxT("\\'ff"));
            break;
           case 'A':
-           TexOutput(_T("\\'c4"));
+           TexOutput(wxT("\\'c4"));
            break;
           case 'E':
-           TexOutput(_T("\\'cb"));
+           TexOutput(wxT("\\'cb"));
            break;
           case 'I':
-           TexOutput(_T("\\'cf"));
+           TexOutput(wxT("\\'cf"));
            break;
           case 'O':
-           TexOutput(_T("\\'d6"));
+           TexOutput(wxT("\\'d6"));
            break;
           case 'U':
-           TexOutput(_T("\\'dc"));
+           TexOutput(wxT("\\'dc"));
            break;
           case 'Y':
-           TexOutput(_T("\\'df"));
+           TexOutput(wxT("\\'df"));
            break;
           default:
            break;
@@ -4145,10 +4145,10 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("\\'e5"));
+           TexOutput(wxT("\\'e5"));
            break;
           case 'A':
-           TexOutput(_T("\\'c5"));
+           TexOutput(wxT("\\'c5"));
            break;
           default:
            break;
@@ -4167,10 +4167,10 @@ bool RTFOnArgument(int macroId, int arg_
         switch (val[0])
         {
           case 'c':
-           TexOutput(_T("\\'e7"));
+           TexOutput(wxT("\\'e7"));
            break;
           case 'C':
-           TexOutput(_T("\\'c7"));
+           TexOutput(wxT("\\'c7"));
            break;
           default:
            break;
@@ -4189,30 +4189,30 @@ bool RTFOnArgument(int macroId, int arg_
       {
         if (start)
         {
-          OnInform(_T("Consider using \\footnotepopup instead of \\footnote."));
+          OnInform(wxT("Consider using \\footnotepopup instead of \\footnote."));
           footnoteCount ++;
           wxChar footBuf[20];
-          wxSnprintf(footBuf, sizeof(footBuf), _T("(%d)"), footnoteCount);
+          wxSnprintf(footBuf, sizeof(footBuf), wxT("(%d)"), footnoteCount);
 
-          TexOutput(_T(" {\\ul "));
+          TexOutput(wxT(" {\\ul "));
           TexOutput(footBuf);
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
           helpTopic = FindTopicName(NULL);
-          TexOutput(_T("{\\v "));
+          TexOutput(wxT("{\\v "));
 
           // Remove green colour/underlining if specified
           if (!hotSpotUnderline && !hotSpotColour)
-            TexOutput(_T("%"));
+            TexOutput(wxT("%"));
           else if (!hotSpotColour)
-            TexOutput(_T("*"));
+            TexOutput(wxT("*"));
 
           TexOutput(helpTopic);
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
 
-          wxFprintf(Popups, _T("\\page\n"));
-//          wxFprintf(Popups, _T("\n${\\footnote }")); // No title
-          wxFprintf(Popups, _T("\n#{\\footnote %s}\n"), helpTopic);
-          wxFprintf(Popups, _T("+{\\footnote %s}\n"), GetBrowseString());
+          wxFprintf(Popups, wxT("\\page\n"));
+//          wxFprintf(Popups, wxT("\n${\\footnote }")); // No title
+          wxFprintf(Popups, wxT("\n#{\\footnote %s}\n"), helpTopic);
+          wxFprintf(Popups, wxT("+{\\footnote %s}\n"), GetBrowseString());
           savedOutput = CurrentOutput1;
           SetCurrentOutput(Popups);
       }
@@ -4228,11 +4228,11 @@ bool RTFOnArgument(int macroId, int arg_
     {
       if (start)
       {
-        TexOutput(_T(" {\\super \\chftn{\\footnote \\fs20 {\\super \\chftn}"), true);
+        TexOutput(wxT(" {\\super \\chftn{\\footnote \\fs20 {\\super \\chftn}"), true);
       }
       else
       {
-        TexOutput(_T("}}"), true);
+        TexOutput(wxT("}}"), true);
       }
       return true;
     }
@@ -4247,11 +4247,11 @@ bool RTFOnArgument(int macroId, int arg_
       {
         if (start)
         {
-          TexOutput(_T("{\\ul "));
+          TexOutput(wxT("{\\ul "));
       }
         else
         {
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
         }
         return true;
       }
@@ -4260,21 +4260,21 @@ bool RTFOnArgument(int macroId, int arg_
         if (start)
         {
           helpTopic = FindTopicName(NULL);
-          TexOutput(_T("{\\v "));
+          TexOutput(wxT("{\\v "));
 
           // Remove green colour/underlining if specified
           if (!hotSpotUnderline && !hotSpotColour)
-            TexOutput(_T("%"));
+            TexOutput(wxT("%"));
           else if (!hotSpotColour)
-            TexOutput(_T("*"));
+            TexOutput(wxT("*"));
 
           TexOutput(helpTopic);
-          TexOutput(_T("}"));
+          TexOutput(wxT("}"));
 
-          wxFprintf(Popups, _T("\\page\n"));
-//          wxFprintf(Popups, _T("\n${\\footnote }")); // No title
-          wxFprintf(Popups, _T("\n#{\\footnote %s}\n"), helpTopic);
-          wxFprintf(Popups, _T("+{\\footnote %s}\n"), GetBrowseString());
+          wxFprintf(Popups, wxT("\\page\n"));
+//          wxFprintf(Popups, wxT("\n${\\footnote }")); // No title
+          wxFprintf(Popups, wxT("\n#{\\footnote %s}\n"), helpTopic);
+          wxFprintf(Popups, wxT("+{\\footnote %s}\n"), GetBrowseString());
           savedOutput = CurrentOutput1;
           SetCurrentOutput(Popups);
         }
@@ -4291,11 +4291,11 @@ bool RTFOnArgument(int macroId, int arg_
         return true;
       if (start)
       {
-        TexOutput(_T(" {\\super \\chftn{\\footnote \\fs20 {\\super \\chftn}"), true);
+        TexOutput(wxT(" {\\super \\chftn{\\footnote \\fs20 {\\super \\chftn}"), true);
       }
       else
       {
-        TexOutput(_T("}}"), true);
+        TexOutput(wxT("}}"), true);
       }
       return true;
     }
@@ -4418,7 +4418,7 @@ bool RTFOnArgument(int macroId, int arg_
       LeftHeaderEven = NULL;
       CentreHeaderEven = NULL;
       RightHeaderEven = NULL;
-      OnInform(_T("Consider using setheader/setfooter rather than markright."));
+      OnInform(wxT("Consider using setheader/setfooter rather than markright."));
     }
     RTFOnArgument(ltSETHEADER, 4, start);
     if (!start)
@@ -4441,7 +4441,7 @@ bool RTFOnArgument(int macroId, int arg_
           LeftHeaderEven = NULL;
           CentreHeaderEven = NULL;
           RightHeaderEven = NULL;
-          OnInform(_T("Consider using setheader/setfooter rather than markboth."));
+          OnInform(wxT("Consider using setheader/setfooter rather than markboth."));
         }
         return RTFOnArgument(ltSETHEADER, 1, start);
       }
@@ -4465,13 +4465,13 @@ bool RTFOnArgument(int macroId, int arg_
     if (winHelp) return false;
     if (start)
     {
-      TexOutput(_T("\\pgnrestart"));
+      TexOutput(wxT("\\pgnrestart"));
       wxChar *data = GetArgData();
       if (currentNumberStyle) delete[] currentNumberStyle;
       currentNumberStyle = copystring(data);
       OutputNumberStyle(currentNumberStyle);
 
-      TexOutput(_T("\n"));
+      TexOutput(wxT("\n"));
     }
     return false;
   }
@@ -4505,7 +4505,7 @@ bool RTFOnArgument(int macroId, int arg_
       // Add an inch since in LaTeX it's specified minus an inch
       twips += 1440;
       CurrentLeftMarginOdd = twips;
-      wxSnprintf(buf, sizeof(buf), _T("\\margl%d\n"), twips);
+      wxSnprintf(buf, sizeof(buf), wxT("\\margl%d\n"), twips);
       TexOutput(buf);
 
       CurrentMarginParX = CurrentLeftMarginOdd + CurrentTextWidth + CurrentMarginParSep;
@@ -4545,7 +4545,7 @@ bool RTFOnArgument(int macroId, int arg_
       CurrentRightMarginOdd = PageWidth - CurrentTextWidth - CurrentLeftMarginOdd;
       CurrentRightMarginEven = PageWidth - CurrentTextWidth - CurrentLeftMarginEven;
       CurrentMarginParX = CurrentLeftMarginOdd + CurrentTextWidth + CurrentMarginParSep;
-      wxSnprintf(buf, sizeof(buf), _T("\\margr%d\n"), CurrentRightMarginOdd);
+      wxSnprintf(buf, sizeof(buf), wxT("\\margr%d\n"), CurrentRightMarginOdd);
       TexOutput(buf);
     }
     return false;
@@ -4557,12 +4557,12 @@ bool RTFOnArgument(int macroId, int arg_
     {
       if (winHelp)
       {
-        TexOutput(_T("\\sa200\\box\n"));
-        PushEnvironmentStyle(_T("\\sa200\\box"));
+        TexOutput(wxT("\\sa200\\box\n"));
+        PushEnvironmentStyle(wxT("\\sa200\\box"));
       }
       else
       {
-        wxSnprintf(buf, sizeof(buf), _T("\\phpg\\posx%d\\absw%d\n"), CurrentMarginParX, CurrentMarginParWidth);
+        wxSnprintf(buf, sizeof(buf), wxT("\\phpg\\posx%d\\absw%d\n"), CurrentMarginParX, CurrentMarginParWidth);
         TexOutput(buf);
       }
       return true;
@@ -4571,12 +4571,12 @@ bool RTFOnArgument(int macroId, int arg_
     {
       if (winHelp)
       {
-        TexOutput(_T("\\par\\pard\n"));
+        TexOutput(wxT("\\par\\pard\n"));
         PopEnvironmentStyle();
         WriteEnvironmentStyles();
       }
       else
-        TexOutput(_T("\\par\\pard\n"));
+        TexOutput(wxT("\\par\\pard\n"));
       issuedNewParagraph = 1;
     }
     return false;
@@ -4587,8 +4587,8 @@ bool RTFOnArgument(int macroId, int arg_
     {
       if (winHelp)
       {
-        TexOutput(_T("\\sa200\\box\n"));
-        PushEnvironmentStyle(_T("\\sa200\\box"));
+        TexOutput(wxT("\\sa200\\box\n"));
+        PushEnvironmentStyle(wxT("\\sa200\\box"));
       }
       else
       {
@@ -4598,12 +4598,12 @@ bool RTFOnArgument(int macroId, int arg_
           // mirror mode, on an even (left-hand) page.
           int x = PageWidth - CurrentRightMarginOdd - CurrentMarginParWidth - CurrentMarginParSep
                     - CurrentTextWidth + GutterWidth;
-          wxSnprintf(buf, sizeof(buf), _T("\\phpg\\posx%d\\absw%d\n"), x, CurrentMarginParWidth);
+          wxSnprintf(buf, sizeof(buf), wxT("\\phpg\\posx%d\\absw%d\n"), x, CurrentMarginParWidth);
           TexOutput(buf);
         }
         else
         {
-          wxSnprintf(buf, sizeof(buf), _T("\\phpg\\posx%d\\absw%d\n"), CurrentMarginParX, CurrentMarginParWidth);
+          wxSnprintf(buf, sizeof(buf), wxT("\\phpg\\posx%d\\absw%d\n"), CurrentMarginParX, CurrentMarginParWidth);
           TexOutput(buf);
         }
       }
@@ -4613,13 +4613,13 @@ bool RTFOnArgument(int macroId, int arg_
     {
       if (winHelp)
       {
-        TexOutput(_T("\\par\\pard\n"));
+        TexOutput(wxT("\\par\\pard\n"));
         PopEnvironmentStyle();
         WriteEnvironmentStyles();
       }
       else
         issuedNewParagraph = 1;
-      TexOutput(_T("\\par\\pard\n"));
+      TexOutput(wxT("\\par\\pard\n"));
     }
     return false;
   }
@@ -4652,7 +4652,7 @@ bool RTFOnArgument(int macroId, int arg_
 
       if (!compatibilityMode || (currentRowNumber > 0))
       {
-      TexOutput(_T("\\pard\\intbl"));
+      TexOutput(wxT("\\pard\\intbl"));
 
       if (macroId == ltRULEDROW)
         ruleBottom = 1;
@@ -4661,31 +4661,31 @@ bool RTFOnArgument(int macroId, int arg_
         currentWidth += TableData[i].width;
         if (ruleTop == 1)
         {
-          TexOutput(_T("\\clbrdrt\\brdrs\\brdrw15"));
+          TexOutput(wxT("\\clbrdrt\\brdrs\\brdrw15"));
         }
         else if (ruleTop > 1)
         {
-          TexOutput(_T("\\clbrdrt\\brdrdb\\brdrw15"));
+          TexOutput(wxT("\\clbrdrt\\brdrdb\\brdrw15"));
         }
         if (ruleBottom == 1)
         {
-          TexOutput(_T("\\clbrdrb\\brdrs\\brdrw15"));
+          TexOutput(wxT("\\clbrdrb\\brdrs\\brdrw15"));
         }
         else if (ruleBottom > 1)
         {
-          TexOutput(_T("\\clbrdrb\\brdrdb\\brdrw15"));
+          TexOutput(wxT("\\clbrdrb\\brdrdb\\brdrw15"));
         }
 
         if (TableData[i].rightBorder)
-          TexOutput(_T("\\clbrdrr\\brdrs\\brdrw15"));
+          TexOutput(wxT("\\clbrdrr\\brdrs\\brdrw15"));
 
         if (TableData[i].leftBorder)
-          TexOutput(_T("\\clbrdrl\\brdrs\\brdrw15"));
+          TexOutput(wxT("\\clbrdrl\\brdrs\\brdrw15"));
 
-        wxSnprintf(buf, sizeof(buf), _T("\\cellx%d"), currentWidth);
+        wxSnprintf(buf, sizeof(buf), wxT("\\cellx%d"), currentWidth);
         TexOutput(buf);
       }
-      TexOutput(_T("\\pard\\intbl\n"));
+      TexOutput(wxT("\\pard\\intbl\n"));
       }
       ruleTop = 0;
       ruleBottom = 0;
@@ -4694,8 +4694,8 @@ bool RTFOnArgument(int macroId, int arg_
     }
     else
     {
-//      TexOutput(_T("\\cell\\row\\trowd\\trgaph108\\trleft-108\n"));
-      TexOutput(_T("\\cell\\row\\trowd\\trgaph108\n"));
+//      TexOutput(wxT("\\cell\\row\\trowd\\trgaph108\\trleft-108\n"));
+      TexOutput(wxT("\\cell\\row\\trowd\\trgaph108\n"));
     }
     break;
   }
@@ -4726,7 +4726,7 @@ bool RTFOnArgument(int macroId, int arg_
       if (arg_no == 3)
       {
         for (int i = 1; i < noMultiColumns; i ++)
-          TexOutput(_T("\\cell"));
+          TexOutput(wxT("\\cell"));
       }
     }
     break;
@@ -4736,7 +4736,7 @@ bool RTFOnArgument(int macroId, int arg_
     if (start && (arg_no == 1))
     {
 //      indentLevel ++;
-//      TexOutput(_T("\\fi0\n"));
+//      TexOutput(wxT("\\fi0\n"));
       int oldIndent = 0;
       wxNode *node = itemizeStack.GetFirst();
       if (node)
@@ -4748,7 +4748,7 @@ bool RTFOnArgument(int macroId, int arg_
       ItemizeStruc *struc = new ItemizeStruc(LATEX_INDENT, indentSize);
       itemizeStack.Insert(struc);
 
-      wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\sa200 "), indentSize, indentSize);
+      wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\sa200 "), indentSize, indentSize);
       PushEnvironmentStyle(buf);
       TexOutput(buf);
       return false;
@@ -4764,7 +4764,7 @@ bool RTFOnArgument(int macroId, int arg_
       }
       if (itemizeStack.GetCount() == 0)
       {
-        TexOutput(_T("\\par\\pard\n"));
+        TexOutput(wxT("\\par\\pard\n"));
         issuedNewParagraph = 1;
         WriteEnvironmentStyles();
       }
@@ -4791,8 +4791,8 @@ bool RTFOnArgument(int macroId, int arg_
       ItemizeStruc *struc = new ItemizeStruc(LATEX_INDENT, indentSize);
       itemizeStack.Insert(struc);
 
-      wxSnprintf(buf, sizeof(buf), _T("\\tx%d\\li%d\\lr%d\\sa200\\box%s "), indentSize, indentSize, indentSizeRight,
-        ((macroId == ltCENTEREDBOX) ? _T("\\brdrs") : _T("\\brdrdb")));
+      wxSnprintf(buf, sizeof(buf), wxT("\\tx%d\\li%d\\lr%d\\sa200\\box%s "), indentSize, indentSize, indentSizeRight,
+        ((macroId == ltCENTEREDBOX) ? wxT("\\brdrs") : wxT("\\brdrdb")));
       PushEnvironmentStyle(buf);
       TexOutput(buf);
       return false;
@@ -4808,7 +4808,7 @@ bool RTFOnArgument(int macroId, int arg_
       }
       if (itemizeStack.Number() == 0)
       {
-        TexOutput(_T("\\par\\pard\n"));
+        TexOutput(wxT("\\par\\pard\n"));
         issuedNewParagraph = 1;
         WriteEnvironmentStyles();
       }
@@ -4824,13 +4824,13 @@ bool RTFOnArgument(int macroId, int arg_
     {
       if (MinorDocumentStyleString)
       {
-        if (StringMatch(_T("twoside"), MinorDocumentStyleString))
+        if (StringMatch(wxT("twoside"), MinorDocumentStyleString))
           // Mirror margins, switch on odd/even headers & footers, and break sections at odd pages
-          TexOutput(_T("\\margmirror\\facingp\\sbkodd"));
-        if (StringMatch(_T("twocolumn"), MinorDocumentStyleString))
-          TexOutput(_T("\\cols2"));
+          TexOutput(wxT("\\margmirror\\facingp\\sbkodd"));
+        if (StringMatch(wxT("twocolumn"), MinorDocumentStyleString))
+          TexOutput(wxT("\\cols2"));
       }
-      TexOutput(_T("\n"));
+      TexOutput(wxT("\n"));
     }
     return false;
   }
@@ -4840,7 +4840,7 @@ bool RTFOnArgument(int macroId, int arg_
     if (!start)
     {
       wxChar *text = GetArgData();
-      if (wxStrcmp(text, _T("yes")) == 0 || wxStrcmp(text, _T("on")) == 0 || wxStrcmp(text, _T("ok")) == 0)
+      if (wxStrcmp(text, wxT("yes")) == 0 || wxStrcmp(text, wxT("on")) == 0 || wxStrcmp(text, wxT("ok")) == 0)
         hotSpotColour = true;
       else
         hotSpotColour = false;
@@ -4852,7 +4852,7 @@ bool RTFOnArgument(int macroId, int arg_
     if (!start)
     {
       wxChar *text = GetArgData();
-      if (wxStrcmp(text, _T("yes")) == 0 || wxStrcmp(text, _T("on")) == 0 || wxStrcmp(text, _T("ok")) == 0)
+      if (wxStrcmp(text, wxT("yes")) == 0 || wxStrcmp(text, wxT("on")) == 0 || wxStrcmp(text, wxT("ok")) == 0)
         bitmapTransparency = true;
       else
         bitmapTransparency = false;
@@ -4864,7 +4864,7 @@ bool RTFOnArgument(int macroId, int arg_
     if (!start)
     {
       wxChar *text = GetArgData();
-      if (wxStrcmp(text, _T("yes")) == 0 || wxStrcmp(text, _T("on")) == 0 || wxStrcmp(text, _T("ok")) == 0)
+      if (wxStrcmp(text, wxT("yes")) == 0 || wxStrcmp(text, wxT("on")) == 0 || wxStrcmp(text, wxT("ok")) == 0)
         hotSpotUnderline = true;
       else
         hotSpotUnderline = false;
@@ -4880,18 +4880,18 @@ bool RTFOnArgument(int macroId, int arg_
       if (ref)
       {
         if (ref->sectionNumber) delete[] ref->sectionNumber;
-        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+        wxSnprintf(buf, sizeof(buf), wxT("[%d]"), citeCount);
         ref->sectionNumber = copystring(buf);
       }
 
-      TexOutput(_T("\\li260\\fi-260 ")); // Indent from 2nd line
-      wxSnprintf(buf, sizeof(buf), _T("{\\b [%d]} "), citeCount);
+      TexOutput(wxT("\\li260\\fi-260 ")); // Indent from 2nd line
+      wxSnprintf(buf, sizeof(buf), wxT("{\\b [%d]} "), citeCount);
       TexOutput(buf);
       citeCount ++;
       return false;
     }
     if (arg_no == 2 && !start)
-      TexOutput(_T("\\par\\pard\\par\n\n"));
+      TexOutput(wxT("\\par\\pard\\par\n\n"));
     return true;
   }
   case ltTHEBIBLIOGRAPHY:
@@ -4904,12 +4904,12 @@ bool RTFOnArgument(int macroId, int arg_
 
       if (!winHelp)
       {
-        wxFprintf(Chapters, _T("\\sect\\pgncont\\titlepg\n"));
+        wxFprintf(Chapters, wxT("\\sect\\pgncont\\titlepg\n"));
 
         // If a non-custom page style, we generate the header now.
-        if (PageStyle && (wxStrcmp(PageStyle, _T("plain")) == 0 ||
-                          wxStrcmp(PageStyle, _T("empty")) == 0 ||
-                          wxStrcmp(PageStyle, _T("headings")) == 0))
+        if (PageStyle && (wxStrcmp(PageStyle, wxT("plain")) == 0 ||
+                          wxStrcmp(PageStyle, wxT("empty")) == 0 ||
+                          wxStrcmp(PageStyle, wxT("headings")) == 0))
         {
           OutputRTFHeaderCommands();
           OutputRTFFooterCommands();
@@ -4920,47 +4920,47 @@ bool RTFOnArgument(int macroId, int arg_
         SetCurrentOutput(Contents);
       }
       else
-        wxFprintf(Chapters, _T("\\page\n"));
+        wxFprintf(Chapters, wxT("\\page\n"));
 
       if (winHelp)
-        wxFprintf(Contents, _T("\n{\\uldb %s}"), ReferencesNameString);
+        wxFprintf(Contents, wxT("\n{\\uldb %s}"), ReferencesNameString);
       else
-        wxFprintf(Contents, _T("\\par\n\\pard{\\b %s}"), ReferencesNameString);
+        wxFprintf(Contents, wxT("\\par\n\\pard{\\b %s}"), ReferencesNameString);
 
       startedSections = true;
 
       if (winHelp)
-        wxFprintf(Chapters, _T("\n${\\footnote %s}"), ReferencesNameString);
+        wxFprintf(Chapters, wxT("\n${\\footnote %s}"), ReferencesNameString);
 
-      wxChar *topicName = _T("bibliography");
+      wxChar *topicName = wxT("bibliography");
 
       if (winHelp)
       {
-        wxFprintf(Contents, _T("{\\v %s}\\par\\pard\n"), topicName);
+        wxFprintf(Contents, wxT("{\\v %s}\\par\\pard\n"), topicName);
         WriteEnvironmentStyles();
       }
       else
-        wxFprintf(Contents, _T("\\par\\par\\pard\n"));
+        wxFprintf(Contents, wxT("\\par\\par\\pard\n"));
 
       if (winHelp)
       {
-        wxFprintf(Chapters, _T("\n#{\\footnote %s}\n"), topicName);
-        wxFprintf(Chapters, _T("+{\\footnote %s}\n"), GetBrowseString());
-        wxFprintf(Chapters, _T("K{\\footnote {K} %s}\n"), ReferencesNameString);
+        wxFprintf(Chapters, wxT("\n#{\\footnote %s}\n"), topicName);
+        wxFprintf(Chapters, wxT("+{\\footnote %s}\n"), GetBrowseString());
+        wxFprintf(Chapters, wxT("K{\\footnote {K} %s}\n"), ReferencesNameString);
         GenerateKeywordsForTopic(topicName);
         if (useUpButton)
         {
-          wxFprintf(Chapters, _T("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
+          wxFprintf(Chapters, wxT("!{\\footnote EnableButton(\"Up\");ChangeButtonBinding(\"Up\", \"JumpId(`%s.hlp', `%s')\")}\n"),
                wxFileNameFromPath(FileRoot), "Contents");
         }
       }
 
       SetCurrentOutput(Chapters);
-      wxChar *styleCommand = _T("");
+      wxChar *styleCommand = wxT("");
       if (!winHelp && useHeadingStyles)
-        styleCommand = _T("\\s1");
-      wxFprintf(Chapters, _T("\\pard{%s"), (winHelp ? _T("\\keepn\\sa140\\sb140") : styleCommand));
-      WriteHeadingStyle(Chapters, 1);  wxFprintf(Chapters, _T(" References\\par\\pard}\n"));
+        styleCommand = wxT("\\s1");
+      wxFprintf(Chapters, wxT("\\pard{%s"), (winHelp ? wxT("\\keepn\\sa140\\sb140") : styleCommand));
+      WriteHeadingStyle(Chapters, 1);  wxFprintf(Chapters, wxT(" References\\par\\pard}\n"));
 
       return false;
     }
@@ -5006,12 +5006,12 @@ bool RTFOnArgument(int macroId, int arg_
           int pos = FindColourPosition(name);
           if (pos > -1)
           {
-            wxSnprintf(buf, sizeof(buf), _T("{%s%d "), ((macroId == ltFCOL) ? _T("\\cf") : _T("\\cb")), pos);
+            wxSnprintf(buf, sizeof(buf), wxT("{%s%d "), ((macroId == ltFCOL) ? wxT("\\cf") : wxT("\\cb")), pos);
             TexOutput(buf);
           }
           else
           {
-            wxSnprintf(buf, sizeof(buf), _T("Could not find colour name %s"), name);
+            wxSnprintf(buf, sizeof(buf), wxT("Could not find colour name %s"), name);
             OnError(buf);
           }
           break;
@@ -5026,7 +5026,7 @@ bool RTFOnArgument(int macroId, int arg_
     }
     else
     {
-      if (arg_no == 2) TexOutput(_T("}"));
+      if (arg_no == 2) TexOutput(wxT("}"));
     }
     return false;
   }
@@ -5045,7 +5045,7 @@ bool RTFOnArgument(int macroId, int arg_
          )
 */
       {
-          wxFprintf(Chapters, _T("{\\bkmkstart %s}{\\bkmkend %s}"), s,s);
+          wxFprintf(Chapters, wxT("{\\bkmkstart %s}{\\bkmkend %s}"), s,s);
       }
     }
     return false;
@@ -5055,7 +5055,7 @@ bool RTFOnArgument(int macroId, int arg_
     if (start && useWord && !winHelp)
     {
       wxChar *s = GetArgData();
-      wxFprintf(Chapters, _T("{\\field{\\*\\fldinst  PAGEREF %s \\\\* MERGEFORMAT }{\\fldrslt ??}}"),
+      wxFprintf(Chapters, wxT("{\\field{\\*\\fldinst  PAGEREF %s \\\\* MERGEFORMAT }{\\fldrslt ??}}"),
               s);
     }
     return false;
@@ -5172,70 +5172,70 @@ bool RTFGo(void)
         // recursively
         Text2RTF(GetTopLevelChunk());
 
-        Contents = wxFopen(TmpContentsName, _T("w"));
-        Chapters = wxFopen(_T("chapters.rtf"), _T("w"));
+        Contents = wxFopen(TmpContentsName, wxT("w"));
+        Chapters = wxFopen(wxT("chapters.rtf"), wxT("w"));
         if (winHelp)
         {
-            Sections = wxFopen(_T("sections.rtf"), _T("w"));
-            Subsections = wxFopen(_T("subsections.rtf"), _T("w"));
-            Subsubsections = wxFopen(_T("subsubsections.rtf"), _T("w"));
-            Popups = wxFopen(_T("popups.rtf"), _T("w"));
+            Sections = wxFopen(wxT("sections.rtf"), wxT("w"));
+            Subsections = wxFopen(wxT("subsections.rtf"), wxT("w"));
+            Subsubsections = wxFopen(wxT("subsubsections.rtf"), wxT("w"));
+            Popups = wxFopen(wxT("popups.rtf"), wxT("w"));
             if (winHelpContents)
             {
-                WinHelpContentsFile = wxFopen(WinHelpContentsFileName, _T("w"));
+                WinHelpContentsFile = wxFopen(WinHelpContentsFileName, wxT("w"));
                 if (WinHelpContentsFile)
-                    wxFprintf(WinHelpContentsFile, _T(":Base %s.hlp\n"), wxFileNameFromPath(FileRoot));
+                    wxFprintf(WinHelpContentsFile, wxT(":Base %s.hlp\n"), wxFileNameFromPath(FileRoot));
             }
 
             if (!Sections || !Subsections || !Subsubsections || !Popups || (winHelpContents && !WinHelpContentsFile))
             {
-                OnError(_T("Ouch! Could not open temporary file(s) for writing."));
+                OnError(wxT("Ouch! Could not open temporary file(s) for writing."));
                 return false;
             }
         }
         if (!Contents || !Chapters)
         {
-            OnError(_T("Ouch! Could not open temporary file(s) for writing."));
+            OnError(wxT("Ouch! Could not open temporary file(s) for writing."));
             return false;
         }
 
         if (winHelp)
         {
-            wxFprintf(Chapters, _T("\n#{\\footnote Contents}\n"));
-            wxFprintf(Chapters, _T("${\\footnote Contents}\n"));
-            wxFprintf(Chapters, _T("+{\\footnote %s}\n"), GetBrowseString());
-            wxFprintf(Chapters, _T("K{\\footnote {K} %s}\n"), ContentsNameString);
-            wxFprintf(Chapters, _T("!{\\footnote DisableButton(\"Up\")}\n"));
+            wxFprintf(Chapters, wxT("\n#{\\footnote Contents}\n"));
+            wxFprintf(Chapters, wxT("${\\footnote Contents}\n"));
+            wxFprintf(Chapters, wxT("+{\\footnote %s}\n"), GetBrowseString());
+            wxFprintf(Chapters, wxT("K{\\footnote {K} %s}\n"), ContentsNameString);
+            wxFprintf(Chapters, wxT("!{\\footnote DisableButton(\"Up\")}\n"));
         }
         if (!winHelp)
         {
-            wxFprintf(Chapters, _T("\\titlepg\n"));
-            wxFprintf(Contents, _T("\\par\\pard\\pgnrestart\\sect\\titlepg"));
+            wxFprintf(Chapters, wxT("\\titlepg\n"));
+            wxFprintf(Contents, wxT("\\par\\pard\\pgnrestart\\sect\\titlepg"));
         }
 
         // In WinHelp, Contents title takes font of title.
         // In linear RTF, same as chapter headings.
-        wxFprintf(Contents, _T("{\\b\\fs%d %s}\\par\\par\\pard\n\n"),
+        wxFprintf(Contents, wxT("{\\b\\fs%d %s}\\par\\par\\pard\n\n"),
             (winHelp ? titleFont : chapterFont)*2, ContentsNameString);
 
         // By default, Swiss, 11 point.
-        wxFprintf(Chapters, _T("\\f2\\fs22\n"));
+        wxFprintf(Chapters, wxT("\\f2\\fs22\n"));
 
-        PushEnvironmentStyle(_T("\\f2\\fs22\\sa200"));
+        PushEnvironmentStyle(wxT("\\f2\\fs22\\sa200"));
 
         SetCurrentOutput(Chapters);
 
         if (stopRunning)
             return false;
 
-        OnInform(_T("Converting..."));
+        OnInform(wxT("Converting..."));
 
         TraverseDocument();
 
-        FILE *Header = wxFopen(_T("header.rtf"), _T("w"));
+        FILE *Header = wxFopen(wxT("header.rtf"), wxT("w"));
         if (!Header)
         {
-            OnError(_T("Ouch! Could not open temporary file header.rtf for writing."));
+            OnError(wxT("Ouch! Could not open temporary file header.rtf for writing."));
             return false;
         }
         WriteRTFHeader(Header);
@@ -5246,17 +5246,17 @@ bool RTFGo(void)
         Tex2RTFYield(true);
         if (winHelp)
         {
-//          wxFprintf(Contents, _T("\\page\n"));
-            wxFprintf(Chapters, _T("\\page\n"));
-            wxFprintf(Sections, _T("\\page\n"));
-            wxFprintf(Subsections, _T("\\page\n"));
-            wxFprintf(Subsubsections, _T("\\page\n\n"));
-            wxFprintf(Popups, _T("\\page\n}\n"));
+//          wxFprintf(Contents, wxT("\\page\n"));
+            wxFprintf(Chapters, wxT("\\page\n"));
+            wxFprintf(Sections, wxT("\\page\n"));
+            wxFprintf(Subsections, wxT("\\page\n"));
+            wxFprintf(Subsubsections, wxT("\\page\n\n"));
+            wxFprintf(Popups, wxT("\\page\n}\n"));
         }
 
-//      TexOutput(_T("\n\\info{\\doccomm Document created by Julian Smart's Tex2RTF.}\n"));
+//      TexOutput(wxT("\n\\info{\\doccomm Document created by Julian Smart's Tex2RTF.}\n"));
         if (!winHelp)
-            TexOutput(_T("}\n"));
+            TexOutput(wxT("}\n"));
         fclose(Contents); Contents = NULL;
         fclose(Chapters); Chapters = NULL;
         if (winHelp)
@@ -5273,25 +5273,25 @@ bool RTFGo(void)
 
         if (winHelp)
         {
-            wxConcatFiles(_T("header.rtf"), _T("chapters.rtf"), _T("tmp1.rtf"));
+            wxConcatFiles(wxT("header.rtf"), wxT("chapters.rtf"), wxT("tmp1.rtf"));
             Tex2RTFYield(true);
-            wxConcatFiles(_T("tmp1.rtf"), _T("sections.rtf"), _T("tmp2.rtf"));
+            wxConcatFiles(wxT("tmp1.rtf"), wxT("sections.rtf"), wxT("tmp2.rtf"));
             Tex2RTFYield(true);
-            wxConcatFiles(_T("tmp2.rtf"), _T("subsections.rtf"), _T("tmp3.rtf"));
+            wxConcatFiles(wxT("tmp2.rtf"), wxT("subsections.rtf"), wxT("tmp3.rtf"));
             Tex2RTFYield(true);
-            wxConcatFiles(_T("tmp3.rtf"), _T("subsubsections.rtf"), _T("tmp4.rtf"));
+            wxConcatFiles(wxT("tmp3.rtf"), wxT("subsubsections.rtf"), wxT("tmp4.rtf"));
             Tex2RTFYield(true);
-            wxConcatFiles(_T("tmp4.rtf"), _T("popups.rtf"), OutputFile);
+            wxConcatFiles(wxT("tmp4.rtf"), wxT("popups.rtf"), OutputFile);
             Tex2RTFYield(true);
 
-            wxRemoveFile(_T("tmp1.rtf"));
-            wxRemoveFile(_T("tmp2.rtf"));
-            wxRemoveFile(_T("tmp3.rtf"));
-            wxRemoveFile(_T("tmp4.rtf"));
+            wxRemoveFile(wxT("tmp1.rtf"));
+            wxRemoveFile(wxT("tmp2.rtf"));
+            wxRemoveFile(wxT("tmp3.rtf"));
+            wxRemoveFile(wxT("tmp4.rtf"));
         }
         else
         {
-            wxConcatFiles(_T("header.rtf"), _T("chapters.rtf"), _T("tmp1.rtf"));
+            wxConcatFiles(wxT("header.rtf"), wxT("chapters.rtf"), wxT("tmp1.rtf"));
             Tex2RTFYield(true);
             if (wxFileExists(OutputFile))
                 wxRemoveFile(OutputFile);
@@ -5306,14 +5306,14 @@ bool RTFGo(void)
             if ((outputDirStr.empty()) ||  // no path specified on output file
                 (cwdStr != outputDirStr)) // paths do not match
             {
-                wxRenameFile(_T("tmp1.rtf"), OutputFile);
+                wxRenameFile(wxT("tmp1.rtf"), OutputFile);
             }
             else
             {
-                wxCopyFile(_T("tmp1.rtf"), OutputFile);
+                wxCopyFile(wxT("tmp1.rtf"), OutputFile);
             }
             Tex2RTFYield(true);
-            wxRemoveFile(_T("tmp1.rtf"));
+            wxRemoveFile(wxT("tmp1.rtf"));
         }
 
         if (wxFileExists(ContentsName)) wxRemoveFile(ContentsName);
@@ -5324,15 +5324,15 @@ bool RTFGo(void)
             wxRemoveFile(TmpContentsName);
         }
 
-        wxRemoveFile(_T("chapters.rtf"));
-        wxRemoveFile(_T("header.rtf"));
+        wxRemoveFile(wxT("chapters.rtf"));
+        wxRemoveFile(wxT("header.rtf"));
 
         if (winHelp)
         {
-            wxRemoveFile(_T("sections.rtf"));
-            wxRemoveFile(_T("subsections.rtf"));
-            wxRemoveFile(_T("subsubsections.rtf"));
-            wxRemoveFile(_T("popups.rtf"));
+            wxRemoveFile(wxT("sections.rtf"));
+            wxRemoveFile(wxT("subsections.rtf"));
+            wxRemoveFile(wxT("subsubsections.rtf"));
+            wxRemoveFile(wxT("popups.rtf"));
         }
         if (winHelp && generateHPJ)
             WriteHPJ(OutputFile);
--- utils/tex2rtf/src/bmputils.h-orig	2009-06-18 17:53:17.495002000 -0500
+++ utils/tex2rtf/src/bmputils.h	2009-06-18 17:53:41.858178000 -0500
@@ -108,19 +108,19 @@ bool OutputBitmapHeader(FILE *fd, bool i
   int goalW = 15*Width;
   int goalH = 15*Height;
 
-  TexOutput(_T("{\\pict"));
-  if (isWinHelp) TexOutput(_T("\\wbitmap0"));
-  else TexOutput(_T("\\dibitmap)"));
+  TexOutput(wxT("{\\pict"));
+  if (isWinHelp) TexOutput(wxT("\\wbitmap0"));
+  else TexOutput(wxT("\\dibitmap)"));
 
   wxChar buf[50];
-  TexOutput(_T("\\picw")); wxSnprintf(buf, sizeof(buf), _T("%d"), Width); TexOutput(buf);
-  TexOutput(_T("\\pich")); wxSnprintf(buf, sizeof(buf), _T("%d"), Height); TexOutput(buf);
-  TexOutput(_T("\\wbmbitspixel")); wxSnprintf(buf, sizeof(buf), _T("%d"), BitsPerPixel); TexOutput(buf);
-  TexOutput(_T("\\wbmplanes")); wxSnprintf(buf, sizeof(buf), _T("%d"), Planes); TexOutput(buf);
-  TexOutput(_T("\\wbmwidthbytes")); wxSnprintf(buf, sizeof(buf), _T("%d"), scanLineWidth); TexOutput(buf);
-  TexOutput(_T("\\picwgoal")); wxSnprintf(buf, sizeof(buf), _T("%d"), goalW); TexOutput(buf);
-  TexOutput(_T("\\pichgoal")); wxSnprintf(buf, sizeof(buf), _T("%d"), goalH); TexOutput(buf);
-  TexOutput(_T("\n"));
+  TexOutput(wxT("\\picw")); wxSnprintf(buf, sizeof(buf), wxT("%d"), Width); TexOutput(buf);
+  TexOutput(wxT("\\pich")); wxSnprintf(buf, sizeof(buf), wxT("%d"), Height); TexOutput(buf);
+  TexOutput(wxT("\\wbmbitspixel")); wxSnprintf(buf, sizeof(buf), wxT("%d"), BitsPerPixel); TexOutput(buf);
+  TexOutput(wxT("\\wbmplanes")); wxSnprintf(buf, sizeof(buf), wxT("%d"), Planes); TexOutput(buf);
+  TexOutput(wxT("\\wbmwidthbytes")); wxSnprintf(buf, sizeof(buf), wxT("%d"), scanLineWidth); TexOutput(buf);
+  TexOutput(wxT("\\picwgoal")); wxSnprintf(buf, sizeof(buf), wxT("%d"), goalW); TexOutput(buf);
+  TexOutput(wxT("\\pichgoal")); wxSnprintf(buf, sizeof(buf), wxT("%d"), goalH); TexOutput(buf);
+  TexOutput(wxT("\n"));
   return true;
 }
 
@@ -136,14 +136,14 @@ bool OutputBitmapData(FILE *fd)
     if (bytesSoFar == scanLineWidth)
     {
       bytesSoFar = 0;
-      TexOutput(_T("\n"));
+      TexOutput(wxT("\n"));
     }
     DecToHex(ch, hexBuf);
     TexOutput(hexBuf);
     bytesSoFar ++;
     ch = getc(fd);
   }
-  TexOutput(_T("\n}\n"));
+  TexOutput(wxT("\n}\n"));
   return true;
 }
 
@@ -204,15 +204,15 @@ bool OutputMetafileHeader(FILE *handle, 
     goalH = userHeight;
   }
 
-  TexOutput(_T("{\\pict"));
-  TexOutput(_T("\\wmetafile8"));
+  TexOutput(wxT("{\\pict"));
+  TexOutput(wxT("\\wmetafile8"));
 
   wxChar buf[50];
-  TexOutput(_T("\\picw")); wxSnprintf(buf, sizeof(buf), _T("%d"), Width); TexOutput(buf);
-  TexOutput(_T("\\pich")); wxSnprintf(buf, sizeof(buf), _T("%d"), Height); TexOutput(buf);
-  TexOutput(_T("\\picwgoal")); wxSnprintf(buf, sizeof(buf), _T("%d"), goalW); TexOutput(buf);
-  TexOutput(_T("\\pichgoal")); wxSnprintf(buf, sizeof(buf), _T("%d"), goalH); TexOutput(buf);
-  TexOutput(_T("\n"));
+  TexOutput(wxT("\\picw")); wxSnprintf(buf, sizeof(buf), wxT("%d"), Width); TexOutput(buf);
+  TexOutput(wxT("\\pich")); wxSnprintf(buf, sizeof(buf), wxT("%d"), Height); TexOutput(buf);
+  TexOutput(wxT("\\picwgoal")); wxSnprintf(buf, sizeof(buf), wxT("%d"), goalW); TexOutput(buf);
+  TexOutput(wxT("\\pichgoal")); wxSnprintf(buf, sizeof(buf), wxT("%d"), goalH); TexOutput(buf);
+  TexOutput(wxT("\n"));
   return true;
 }
 
@@ -227,7 +227,7 @@ bool OutputMetafileData(FILE *handle)
     if (bytesSoFar == scanLineWidth)
     {
       bytesSoFar = 0;
-      TexOutput(_T("\n"));
+      TexOutput(wxT("\n"));
     }
     if (ch != EOF)
     {
@@ -236,7 +236,7 @@ bool OutputMetafileData(FILE *handle)
       bytesSoFar ++;
     }
   } while (ch != EOF);
-  TexOutput(_T("\n}\n"));
+  TexOutput(wxT("\n}\n"));
   return true;
 }
 
--- utils/tex2rtf/src/xlputils.cpp-orig	2009-06-18 17:54:49.408091000 -0500
+++ utils/tex2rtf/src/xlputils.cpp	2009-06-18 17:54:57.576566000 -0500
@@ -50,7 +50,7 @@ void PadToTab(int tabPos)
 {
   int currentCol = GetCurrentColumn();
   for (int i = currentCol; i < tabPos; i++)
-    TexOutput(_T(" "), true);
+    TexOutput(wxT(" "), true);
 }
 
 static long xlpBlockId = 0;
@@ -83,14 +83,14 @@ void XLPOnMacro(int macroId, int no_args
       currentBlockId = NewBlockId();
 
       startedSections = true;
-      wxFprintf(Contents, _T("\\hy-%d{%ld}{"), hyBLOCK_SMALL_HEADING, id1);
-      wxFprintf(Chapters, _T("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
-      wxFprintf(Index, _T("%ld %ld\n"), id1, currentBlockId);
+      wxFprintf(Contents, wxT("\\hy-%d{%ld}{"), hyBLOCK_SMALL_HEADING, id1);
+      wxFprintf(Chapters, wxT("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
+      wxFprintf(Index, wxT("%ld %ld\n"), id1, currentBlockId);
 
       OutputCurrentSection(); // Repeat section header
 
-      wxFprintf(Contents, _T("}\n\n"));
-      wxFprintf(Chapters, _T("}\n\n"));
+      wxFprintf(Contents, wxT("}\n\n"));
+      wxFprintf(Chapters, wxT("}\n\n"));
       SetCurrentOutput(Chapters);
       wxChar *topicName = FindTopicName(GetNextChunk());
       hyperLabels.Append(topicName, (wxObject *)currentBlockId);
@@ -117,19 +117,19 @@ void XLPOnMacro(int macroId, int no_args
       startedSections = true;
 
       if (DocumentStyle == LATEX_ARTICLE)
-        wxFprintf(Contents, _T("\\hy-%d{%ld}{"), hyBLOCK_LARGE_HEADING, id1);
+        wxFprintf(Contents, wxT("\\hy-%d{%ld}{"), hyBLOCK_LARGE_HEADING, id1);
       else
-        wxFprintf(Chapters, _T("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id1);
-      wxFprintf(Sections, _T("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
-      wxFprintf(Index, _T("%ld %ld\n"), id1, currentBlockId);
+        wxFprintf(Chapters, wxT("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id1);
+      wxFprintf(Sections, wxT("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
+      wxFprintf(Index, wxT("%ld %ld\n"), id1, currentBlockId);
 
       OutputCurrentSection(); // Repeat section header
 
       if (DocumentStyle == LATEX_ARTICLE)
-        wxFprintf(Contents, _T("}\n\n"));
+        wxFprintf(Contents, wxT("}\n\n"));
       else
-        wxFprintf(Chapters, _T("}\n\n"));
-      wxFprintf(Sections, _T("}\n\n"));
+        wxFprintf(Chapters, wxT("}\n\n"));
+      wxFprintf(Sections, wxT("}\n\n"));
       SetCurrentOutput(Sections);
       wxChar *topicName = FindTopicName(GetNextChunk());
       hyperLabels.Append(topicName, (wxObject *)currentBlockId);
@@ -151,14 +151,14 @@ void XLPOnMacro(int macroId, int no_args
       SetCurrentOutputs(Sections, Subsections);
       long id1 = NewBlockId();
       currentBlockId = NewBlockId();
-      wxFprintf(Sections, _T("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id1);
-      wxFprintf(Subsections, _T("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
-      wxFprintf(Index, _T("%ld %ld\n"), id1, currentBlockId);
+      wxFprintf(Sections, wxT("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id1);
+      wxFprintf(Subsections, wxT("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
+      wxFprintf(Index, wxT("%ld %ld\n"), id1, currentBlockId);
 
       OutputCurrentSection(); // Repeat section header
 
-      wxFprintf(Sections, _T("}\n\n"));
-      wxFprintf(Subsections, _T("}\n\n"));
+      wxFprintf(Sections, wxT("}\n\n"));
+      wxFprintf(Subsections, wxT("}\n\n"));
       SetCurrentOutput(Subsections);
       wxChar *topicName = FindTopicName(GetNextChunk());
       hyperLabels.Append(topicName, (wxObject *)currentBlockId);
@@ -176,14 +176,14 @@ void XLPOnMacro(int macroId, int no_args
       SetCurrentOutputs(Subsections, Subsubsections);
       long id1 = NewBlockId();
       currentBlockId = NewBlockId();
-      wxFprintf(Subsections, _T("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id1);
-      wxFprintf(Subsubsections, _T("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
-      wxFprintf(Index, _T("%ld %ld\n"), id1, currentBlockId);
+      wxFprintf(Subsections, wxT("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id1);
+      wxFprintf(Subsubsections, wxT("\n\\hy-%d{%ld}{"), hyBLOCK_LARGE_VISIBLE_SECTION, currentBlockId);
+      wxFprintf(Index, wxT("%ld %ld\n"), id1, currentBlockId);
 
       OutputCurrentSection(); // Repeat section header
 
-      wxFprintf(Subsections, _T("}\n\n"));
-      wxFprintf(Subsubsections, _T("}\n\n"));
+      wxFprintf(Subsections, wxT("}\n\n"));
+      wxFprintf(Subsubsections, wxT("}\n\n"));
       SetCurrentOutput(Subsubsections);
       wxChar *topicName = FindTopicName(GetNextChunk());
       hyperLabels.Append(topicName, (wxObject *)currentBlockId);
@@ -198,27 +198,27 @@ void XLPOnMacro(int macroId, int no_args
     if (start)
     {
       long id = NewBlockId();
-      wxFprintf(Subsections, _T("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
+      wxFprintf(Subsections, wxT("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
     }
     else
-      wxFprintf(Subsections, _T("}"));
+      wxFprintf(Subsections, wxT("}"));
     break;
   }
   case ltVOID:
 //    if (start)
-//      TexOutput(_T("void"), true);
+//      TexOutput(wxT("void"), true);
     break;
   case ltBACKSLASHCHAR:
     if (start)
-      TexOutput(_T("\n"), true);
+      TexOutput(wxT("\n"), true);
     break;
   case ltPAR:
   {
     if (start)
     {
       if (ParSkip > 0)
-        TexOutput(_T("\n"), true);
-      TexOutput(_T("\n"), true);
+        TexOutput(wxT("\n"), true);
+      TexOutput(wxT("\n"), true);
     }
     break;
   }
@@ -236,10 +236,10 @@ void XLPOnMacro(int macroId, int no_args
     {
       wxChar buf[100];
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltTEXTIT:
@@ -250,10 +250,10 @@ void XLPOnMacro(int macroId, int no_args
     {
       wxChar buf[100];
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_ITALIC, id);
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_ITALIC, id);
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltTTFAMILY:
@@ -263,60 +263,60 @@ void XLPOnMacro(int macroId, int no_args
     if (start)
     {
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_TELETYPE, id);
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_TELETYPE, id);
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltSMALL:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_SMALL_TEXT, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_SMALL_TEXT, NewBlockId());
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltTINY:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_SMALL_TEXT, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_SMALL_TEXT, NewBlockId());
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltNORMALSIZE:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_NORMAL, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_NORMAL, NewBlockId());
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltlarge:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_SMALL_HEADING, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_SMALL_HEADING, NewBlockId());
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltLARGE:
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_LARGE_HEADING, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_LARGE_HEADING, NewBlockId());
       TexOutput(buf);
     }
-    else TexOutput(_T("}\n"));
+    else TexOutput(wxT("}\n"));
     break;
   }
   case ltITEMIZE:
@@ -329,7 +329,7 @@ void XLPOnMacro(int macroId, int no_args
 //      tabCount ++;
 
 //      if (indentLevel > 0)
-//        TexOutput(_T("\\par\\par\n"));
+//        TexOutput(wxT("\\par\\par\n"));
       indentLevel ++;
       int listType;
       if (macroId == ltENUMERATE)
@@ -369,14 +369,14 @@ void XLPOnMacro(int macroId, int no_args
         {
           case LATEX_ENUMERATE:
           {
-            wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\hy-%d{%ld}{%d.} "),
+            wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\hy-%d{%ld}{%d.} "),
               hyBLOCK_BOLD, NewBlockId(), struc->currentItem);
             TexOutput(indentBuf);
             break;
           }
           case LATEX_ITEMIZE:
           {
-            wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\hy-%d{%ld}{o} "),
+            wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\hy-%d{%ld}{o} "),
               hyBLOCK_BOLD, NewBlockId());
             TexOutput(indentBuf);
             break;
@@ -386,11 +386,11 @@ void XLPOnMacro(int macroId, int no_args
           {
             if (descriptionItemArg)
             {
-              wxSnprintf(indentBuf, sizeof(indentBuf), _T("\\hy-%d{%ld}{"),
+              wxSnprintf(indentBuf, sizeof(indentBuf), wxT("\\hy-%d{%ld}{"),
                  hyBLOCK_BOLD, NewBlockId());
               TexOutput(indentBuf);
               TraverseChildrenFromChunk(descriptionItemArg);
-              TexOutput(_T("} "));
+              TexOutput(wxT("} "));
               descriptionItemArg = NULL;
             }
             break;
@@ -404,18 +404,18 @@ void XLPOnMacro(int macroId, int no_args
   {
     if (start && DocumentTitle && DocumentAuthor)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_LARGE_HEADING, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_LARGE_HEADING, NewBlockId());
       TexOutput(buf);
       TraverseChildrenFromChunk(DocumentTitle);
-      TexOutput(_T("}\n\n"));
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_SMALL_HEADING, NewBlockId());
+      TexOutput(wxT("}\n\n"));
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_SMALL_HEADING, NewBlockId());
       TexOutput(buf);
       TraverseChildrenFromChunk(DocumentAuthor);
-      TexOutput(_T("}\n\n"));
+      TexOutput(wxT("}\n\n"));
       if (DocumentDate)
       {
         TraverseChildrenFromChunk(DocumentDate);
-        TexOutput(_T("\n"));
+        TexOutput(wxT("\n"));
       }
     }
     break;
@@ -424,7 +424,7 @@ void XLPOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      FILE *fd = wxFopen(ContentsName, _T("r"));
+      FILE *fd = wxFopen(ContentsName, wxT("r"));
       if (fd)
       {
         int ch = getc(fd);
@@ -437,8 +437,8 @@ void XLPOnMacro(int macroId, int no_args
       }
       else
       {
-        TexOutput(_T("RUN TEX2RTF AGAIN FOR CONTENTS PAGE\n"));
-        OnInform(_T("Run Tex2RTF again to include contents page."));
+        TexOutput(wxT("RUN TEX2RTF AGAIN FOR CONTENTS PAGE\n"));
+        OnInform(wxT("Run Tex2RTF again to include contents page."));
       }
     }
     break;
@@ -446,13 +446,13 @@ void XLPOnMacro(int macroId, int no_args
   case ltHARDY:
   {
     if (start)
-      TexOutput(_T("HARDY"), true);
+      TexOutput(wxT("HARDY"), true);
     break;
   }
   case ltWXCLIPS:
   {
     if (start)
-      TexOutput(_T("wxCLIPS"), true);
+      TexOutput(wxT("wxCLIPS"), true);
     break;
   }
   case ltVERBATIM:
@@ -461,17 +461,17 @@ void XLPOnMacro(int macroId, int no_args
     {
       wxChar buf[100];
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_TELETYPE, id);
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_TELETYPE, id);
       TexOutput(buf);
     }
-    else TexOutput(_T("}"));
+    else TexOutput(wxT("}"));
     break;
   }
   case ltHRULE:
   {
     if (start)
     {
-      TexOutput(_T("\n------------------------------------------------------------------"), true);
+      TexOutput(wxT("\n------------------------------------------------------------------"), true);
     }
     break;
   }
@@ -479,7 +479,7 @@ void XLPOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      TexOutput(_T("--------------------------------------------------------------------------------"), true);
+      TexOutput(wxT("--------------------------------------------------------------------------------"), true);
     }
     break;
   }
@@ -498,17 +498,17 @@ void XLPOnMacro(int macroId, int no_args
   {
     if (start)
     {
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_TELETYPE, NewBlockId());
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_TELETYPE, NewBlockId());
       TexOutput(buf);
     }
     else
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     break;
   }
   case ltNUMBEREDBIBITEM:
   {
     if (!start)
-      TexOutput(_T("\n\n"), true);
+      TexOutput(wxT("\n\n"), true);
     break;
   }
   case ltCAPTION:
@@ -520,9 +520,9 @@ void XLPOnMacro(int macroId, int no_args
 
       wxChar figBuf[40];
       if (DocumentStyle != LATEX_ARTICLE)
-        wxSnprintf(figBuf, sizeof(figBuf), _T("Figure %d.%d: "), chapterNo, figureNo);
+        wxSnprintf(figBuf, sizeof(figBuf), wxT("Figure %d.%d: "), chapterNo, figureNo);
       else
-        wxSnprintf(figBuf, sizeof(figBuf), _T("Figure %d: "), figureNo);
+        wxSnprintf(figBuf, sizeof(figBuf), wxT("Figure %d: "), figureNo);
 
       TexOutput(figBuf);
     }
@@ -570,46 +570,46 @@ bool XLPOnArgument(int macroId, int arg_
   case ltFUNC:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "), true);
+      TexOutput(wxT(" "), true);
     if (start && (arg_no == 3))
-      TexOutput(_T("("), true);
+      TexOutput(wxT("("), true);
     if (!start && (arg_no == 3))
-     TexOutput(_T(")"), true);
+     TexOutput(wxT(")"), true);
     break;
   }
   case ltPFUNC:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "), true);
+      TexOutput(wxT(" "), true);
 
     if (start && (arg_no == 2))
-      TexOutput(_T("(*"), true);
+      TexOutput(wxT("(*"), true);
     if (!start && (arg_no == 2))
-      TexOutput(_T(")"), true);
+      TexOutput(wxT(")"), true);
 
     if (start && (arg_no == 3))
-      TexOutput(_T("("), true);
+      TexOutput(wxT("("), true);
     if (!start && (arg_no == 3))
-      TexOutput(_T(")"), true);
+      TexOutput(wxT(")"), true);
     break;
   }
   case ltCLIPSFUNC:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "), true);
+      TexOutput(wxT(" "), true);
     if (start && (arg_no == 2))
     {
-      TexOutput(_T("("), true);
+      TexOutput(wxT("("), true);
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
       TexOutput(buf);
     }
     if (!start && (arg_no == 2))
     {
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     }
     if (!start && (arg_no == 3))
-     TexOutput(_T(")"), true);
+     TexOutput(wxT(")"), true);
     break;
   }
   case ltPARAM:
@@ -617,12 +617,12 @@ bool XLPOnArgument(int macroId, int arg_
     if (start && (arg_no == 2))
     {
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T(" \\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
+      wxSnprintf(buf, sizeof(buf), wxT(" \\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
       TexOutput(buf);
     }
     if (!start && (arg_no == 2))
     {
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     }
     break;
   }
@@ -631,19 +631,19 @@ bool XLPOnArgument(int macroId, int arg_
     if (start && (arg_no == 2))
     {
       long id = NewBlockId();
-      wxSnprintf(buf, sizeof(buf), _T(" \\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
+      wxSnprintf(buf, sizeof(buf), wxT(" \\hy-%d{%ld}{"), hyBLOCK_BOLD, id);
       TexOutput(buf);
     }
     if (!start && (arg_no == 2))
     {
-      TexOutput(_T("}"));
+      TexOutput(wxT("}"));
     }
     break;
   }
   case ltMEMBER:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "), true);
+      TexOutput(wxT(" "), true);
     break;
   }
   case ltLABEL:
@@ -682,10 +682,10 @@ bool XLPOnArgument(int macroId, int arg_
       if (start)
       {
         currentBlockId = NewBlockId();
-        wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{"), hyBLOCK_RED_ITALIC, currentBlockId);
+        wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{"), hyBLOCK_RED_ITALIC, currentBlockId);
         TexOutput(buf);
       }
-      else TexOutput(_T("}"));
+      else TexOutput(wxT("}"));
     }
     if (arg_no == 2)
     {
@@ -708,9 +708,9 @@ bool XLPOnArgument(int macroId, int arg_
     else if (arg_no == 2)
     {
       if (start)
-        TexOutput(_T(" ("));
+        TexOutput(wxT(" ("));
       else
-        TexOutput(_T(")"));
+        TexOutput(wxT(")"));
       return true;
     }
     break;
@@ -754,11 +754,11 @@ bool XLPOnArgument(int macroId, int arg_
 
 /*
       // Experimental
-      TexOutput(_T("\\brdrt\\brdrs"));
+      TexOutput(wxT("\\brdrt\\brdrs"));
       if (tableVerticalLineLeft)
-        TexOutput(_T("\\brdrl\\brdrs"));
+        TexOutput(wxT("\\brdrl\\brdrs"));
       if (tableVerticalLineRight)
-        TexOutput(_T("\\brdrr\\brdrs"));
+        TexOutput(wxT("\\brdrr\\brdrs"));
 */
 
         // Calculate a rough size for each column
@@ -784,11 +784,11 @@ bool XLPOnArgument(int macroId, int arg_
   {
     if (start)
     {
-      TexOutput(_T("----------------------------------------------------------------------\n"), true);
+      TexOutput(wxT("----------------------------------------------------------------------\n"), true);
       return true;
     }
     else
-      TexOutput(_T("\n----------------------------------------------------------------------\n"), true);
+      TexOutput(wxT("\n----------------------------------------------------------------------\n"), true);
     break;
   }
   case ltBIBITEM:
@@ -801,11 +801,11 @@ bool XLPOnArgument(int macroId, int arg_
       if (ref)
       {
         if (ref->sectionNumber) delete[] ref->sectionNumber;
-        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+        wxSnprintf(buf, sizeof(buf), wxT("[%d]"), citeCount);
         ref->sectionNumber = copystring(buf);
       }
 
-      wxSnprintf(buf, sizeof(buf), _T("\\hy-%d{%ld}{[%d]} "), hyBLOCK_BOLD, NewBlockId(), citeCount);
+      wxSnprintf(buf, sizeof(buf), wxT("\\hy-%d{%ld}{[%d]} "), hyBLOCK_BOLD, NewBlockId(), citeCount);
       TexOutput(buf);
       citeCount ++;
       return false;
@@ -823,9 +823,9 @@ bool XLPOnArgument(int macroId, int arg_
       SetCurrentOutputs(Contents, Chapters);
       long id1 = NewBlockId();
       long id2 = NewBlockId();
-      wxFprintf(Contents, _T("\\hy-%d{%ld}{%s}\n"), hyBLOCK_SMALL_HEADING, id1, ReferencesNameString);
-      wxFprintf(Chapters, _T("\\hy-%d{%ld}{%s}\n\n\n"), hyBLOCK_LARGE_VISIBLE_SECTION, id2, ReferencesNameString);
-      wxFprintf(Index, _T("%ld %ld\n"), id1, id2);
+      wxFprintf(Contents, wxT("\\hy-%d{%ld}{%s}\n"), hyBLOCK_SMALL_HEADING, id1, ReferencesNameString);
+      wxFprintf(Chapters, wxT("\\hy-%d{%ld}{%s}\n\n\n"), hyBLOCK_LARGE_VISIBLE_SECTION, id2, ReferencesNameString);
+      wxFprintf(Index, wxT("%ld %ld\n"), id1, id2);
 
       SetCurrentOutput(Chapters);
       return false;
@@ -839,10 +839,10 @@ bool XLPOnArgument(int macroId, int arg_
   case ltTWOCOLITEMRULED:
   {
     if (start && (arg_no == 2))
-      TexOutput(_T("\n    "));
+      TexOutput(wxT("\n    "));
 
     if (!start && (arg_no == 2))
-      TexOutput(_T("\n"));
+      TexOutput(wxT("\n"));
     return true;
   }
   /*
@@ -858,35 +858,35 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('a'):
-           TexOutput(_T("a"));
+          case wxT('a'):
+           TexOutput(wxT("a"));
            break;
-          case _T('e'):
-           TexOutput(_T("e"));
+          case wxT('e'):
+           TexOutput(wxT("e"));
            break;
-          case _T('i'):
-           TexOutput(_T("i"));
+          case wxT('i'):
+           TexOutput(wxT("i"));
            break;
-          case _T('o'):
-           TexOutput(_T("o"));
+          case wxT('o'):
+           TexOutput(wxT("o"));
            break;
-          case _T('u'):
-           TexOutput(_T("u"));
+          case wxT('u'):
+           TexOutput(wxT("u"));
            break;
-          case _T('A'):
-           TexOutput(_T("a"));
+          case wxT('A'):
+           TexOutput(wxT("a"));
            break;
-          case _T('E'):
-           TexOutput(_T("E"));
+          case wxT('E'):
+           TexOutput(wxT("E"));
            break;
-          case _T('I'):
-           TexOutput(_T("I"));
+          case wxT('I'):
+           TexOutput(wxT("I"));
            break;
-          case _T('O'):
-           TexOutput(_T("O"));
+          case wxT('O'):
+           TexOutput(wxT("O"));
            break;
-          case _T('U'):
-           TexOutput(_T("U"));
+          case wxT('U'):
+           TexOutput(wxT("U"));
            break;
           default:
            break;
@@ -904,41 +904,41 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('a'):
-           TexOutput(_T("a"));
+          case wxT('a'):
+           TexOutput(wxT("a"));
            break;
-          case _T('e'):
-           TexOutput(_T("e"));
+          case wxT('e'):
+           TexOutput(wxT("e"));
            break;
-          case _T('i'):
-           TexOutput(_T("i"));
+          case wxT('i'):
+           TexOutput(wxT("i"));
            break;
-          case _T('o'):
-           TexOutput(_T("o"));
+          case wxT('o'):
+           TexOutput(wxT("o"));
            break;
-          case _T('u'):
-           TexOutput(_T("u"));
+          case wxT('u'):
+           TexOutput(wxT("u"));
            break;
-          case _T('y'):
-           TexOutput(_T("y"));
+          case wxT('y'):
+           TexOutput(wxT("y"));
            break;
-          case _T('A'):
-           TexOutput(_T("A"));
+          case wxT('A'):
+           TexOutput(wxT("A"));
            break;
-          case _T('E'):
-           TexOutput(_T("E"));
+          case wxT('E'):
+           TexOutput(wxT("E"));
            break;
-          case _T('I'):
-           TexOutput(_T("I"));
+          case wxT('I'):
+           TexOutput(wxT("I"));
            break;
-          case _T('O'):
-           TexOutput(_T("O"));
+          case wxT('O'):
+           TexOutput(wxT("O"));
            break;
-          case _T('U'):
-           TexOutput(_T("U"));
+          case wxT('U'):
+           TexOutput(wxT("U"));
            break;
-          case _T('Y'):
-           TexOutput(_T("Y"));
+          case wxT('Y'):
+           TexOutput(wxT("Y"));
            break;
           default:
            break;
@@ -956,35 +956,35 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('a'):
-           TexOutput(_T("a"));
+          case wxT('a'):
+           TexOutput(wxT("a"));
            break;
-          case _T('e'):
-           TexOutput(_T("e"));
+          case wxT('e'):
+           TexOutput(wxT("e"));
            break;
-          case _T('i'):
-           TexOutput(_T("i"));
+          case wxT('i'):
+           TexOutput(wxT("i"));
            break;
-          case _T('o'):
-           TexOutput(_T("o"));
+          case wxT('o'):
+           TexOutput(wxT("o"));
            break;
-          case _T('u'):
-           TexOutput(_T("u"));
+          case wxT('u'):
+           TexOutput(wxT("u"));
            break;
-          case _T('A'):
-           TexOutput(_T("A"));
+          case wxT('A'):
+           TexOutput(wxT("A"));
            break;
-          case _T('E'):
-           TexOutput(_T("E"));
+          case wxT('E'):
+           TexOutput(wxT("E"));
            break;
-          case _T('I'):
-           TexOutput(_T("I"));
+          case wxT('I'):
+           TexOutput(wxT("I"));
            break;
-          case _T('O'):
-           TexOutput(_T("O"));
+          case wxT('O'):
+           TexOutput(wxT("O"));
            break;
-          case _T('U'):
-           TexOutput(_T("U"));
+          case wxT('U'):
+           TexOutput(wxT("U"));
            break;
           default:
            break;
@@ -1002,26 +1002,26 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('a'):
-           TexOutput(_T("a"));
+          case wxT('a'):
+           TexOutput(wxT("a"));
            break;
-          case _T(' '):
-           TexOutput(_T("~"));
+          case wxT(' '):
+           TexOutput(wxT("~"));
            break;
-          case _T('n'):
-           TexOutput(_T("n"));
+          case wxT('n'):
+           TexOutput(wxT("n"));
            break;
-          case _T('o'):
-           TexOutput(_T("o"));
+          case wxT('o'):
+           TexOutput(wxT("o"));
            break;
-          case _T('A'):
-           TexOutput(_T("A"));
+          case wxT('A'):
+           TexOutput(wxT("A"));
            break;
-          case _T('N'):
-           TexOutput(_T("N"));
+          case wxT('N'):
+           TexOutput(wxT("N"));
            break;
-          case _T('O'):
-           TexOutput(_T("O"));
+          case wxT('O'):
+           TexOutput(wxT("O"));
            break;
           default:
            break;
@@ -1039,41 +1039,41 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('a'):
-           TexOutput(_T("a"));
+          case wxT('a'):
+           TexOutput(wxT("a"));
            break;
-          case _T('e'):
-           TexOutput(_T("e"));
+          case wxT('e'):
+           TexOutput(wxT("e"));
            break;
-          case _T('i'):
-           TexOutput(_T("i"));
+          case wxT('i'):
+           TexOutput(wxT("i"));
            break;
-          case _T('o'):
-           TexOutput(_T("o"));
+          case wxT('o'):
+           TexOutput(wxT("o"));
            break;
-          case _T('u'):
-           TexOutput(_T("u"));
+          case wxT('u'):
+           TexOutput(wxT("u"));
            break;
-          case _T('y'):
-           TexOutput(_T("y"));
+          case wxT('y'):
+           TexOutput(wxT("y"));
            break;
-          case _T('A'):
-           TexOutput(_T("A"));
+          case wxT('A'):
+           TexOutput(wxT("A"));
            break;
-          case _T('E'):
-           TexOutput(_T("E"));
+          case wxT('E'):
+           TexOutput(wxT("E"));
            break;
-          case _T('I'):
-           TexOutput(_T("I"));
+          case wxT('I'):
+           TexOutput(wxT("I"));
            break;
-          case _T('O'):
-           TexOutput(_T("O"));
+          case wxT('O'):
+           TexOutput(wxT("O"));
            break;
-          case _T('U'):
-           TexOutput(_T("U"));
+          case wxT('U'):
+           TexOutput(wxT("U"));
            break;
-          case _T('Y'):
-           TexOutput(_T("Y"));
+          case wxT('Y'):
+           TexOutput(wxT("Y"));
            break;
           default:
            break;
@@ -1091,11 +1091,11 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('a'):
-           TexOutput(_T("a"));
+          case wxT('a'):
+           TexOutput(wxT("a"));
            break;
-          case _T('A'):
-           TexOutput(_T("A"));
+          case wxT('A'):
+           TexOutput(wxT("A"));
            break;
           default:
            break;
@@ -1113,11 +1113,11 @@ bool XLPOnArgument(int macroId, int arg_
       {
         switch (val[0])
         {
-          case _T('c'):
-           TexOutput(_T("c"));
+          case wxT('c'):
+           TexOutput(wxT("c"));
            break;
-          case _T('C'):
-           TexOutput(_T("C"));
+          case wxT('C'):
+           TexOutput(wxT("C"));
            break;
           default:
            break;
@@ -1140,25 +1140,25 @@ bool XLPGo(void)
 
   if (!InputFile.empty() && !OutputFile.empty())
   {
-    Contents = wxFopen(TmpContentsName, _T("w"));
-    Chapters = wxFopen(_T("chapters.xlp"), _T("w"));
-    Sections = wxFopen(_T("sections.xlp"), _T("w"));
-    Subsections = wxFopen(_T("subsections.xlp"), _T("w"));
-    Subsubsections = wxFopen(_T("subsubsections.xlp"), _T("w"));
-    Index = wxFopen(_T("index.xlp"), _T("w"));
+    Contents = wxFopen(TmpContentsName, wxT("w"));
+    Chapters = wxFopen(wxT("chapters.xlp"), wxT("w"));
+    Sections = wxFopen(wxT("sections.xlp"), wxT("w"));
+    Subsections = wxFopen(wxT("subsections.xlp"), wxT("w"));
+    Subsubsections = wxFopen(wxT("subsubsections.xlp"), wxT("w"));
+    Index = wxFopen(wxT("index.xlp"), wxT("w"));
 
     // Insert invisible section marker at beginning
-    wxFprintf(Chapters, _T("\\hy-%d{%ld}{%s}\n"),
-                hyBLOCK_INVISIBLE_SECTION, NewBlockId(), _T("\n"));
+    wxFprintf(Chapters, wxT("\\hy-%d{%ld}{%s}\n"),
+                hyBLOCK_INVISIBLE_SECTION, NewBlockId(), wxT("\n"));
 
-    wxFprintf(Contents, _T("\\hy-%d{%ld}{%s}\n\n"),
+    wxFprintf(Contents, wxT("\\hy-%d{%ld}{%s}\n\n"),
 //                hyBLOCK_LARGE_HEADING, NewBlockId(), "\n\n%s\n\n", ContentsNameString);
                 hyBLOCK_LARGE_HEADING, NewBlockId(), ContentsNameString);
 
     SetCurrentOutput(Chapters);
 
-    wxFprintf(Index, _T("\n\\hyindex{\n\"%s\"\n"),
-             contentsString ? contentsString : _T("WXHELPCONTENTS"));
+    wxFprintf(Index, wxT("\n\\hyindex{\n\"%s\"\n"),
+             contentsString ? contentsString : wxT("WXHELPCONTENTS"));
     TraverseDocument();
 
     wxNode *node = hyperLinks.GetFirst();
@@ -1170,12 +1170,12 @@ bool XLPGo(void)
       if (otherNode)
       {
         long to = (long)otherNode->GetData();
-        wxFprintf(Index, _T("%ld %ld\n"), from, to);
+        wxFprintf(Index, wxT("%ld %ld\n"), from, to);
       }
       node = node->GetNext();
     }
 
-    wxFprintf(Index, _T("}\n"));
+    wxFprintf(Index, wxT("}\n"));
 
     fclose(Contents); Contents = NULL;
     fclose(Chapters); Chapters = NULL;
@@ -1192,19 +1192,19 @@ bool XLPGo(void)
       wxRemoveFile(TmpContentsName);
     }
 
-    wxConcatFiles(_T("chapters.xlp"), _T("sections.xlp"), _T("tmp2.xlp"));
-    wxConcatFiles(_T("tmp2.xlp"), _T("subsections.xlp"), _T("tmp1.xlp"));
-    wxConcatFiles(_T("tmp1.xlp"), _T("subsubsections.xlp"), _T("tmp2.xlp"));
-    wxConcatFiles(_T("tmp2.xlp"), _T("index.xlp"), OutputFile);
-
-    wxRemoveFile(_T("tmp1.xlp"));
-    wxRemoveFile(_T("tmp2.xlp"));
-
-    wxRemoveFile(_T("chapters.xlp"));
-    wxRemoveFile(_T("sections.xlp"));
-    wxRemoveFile(_T("subsections.xlp"));
-    wxRemoveFile(_T("subsubsections.xlp"));
-    wxRemoveFile(_T("index.xlp"));
+    wxConcatFiles(wxT("chapters.xlp"), wxT("sections.xlp"), wxT("tmp2.xlp"));
+    wxConcatFiles(wxT("tmp2.xlp"), wxT("subsections.xlp"), wxT("tmp1.xlp"));
+    wxConcatFiles(wxT("tmp1.xlp"), wxT("subsubsections.xlp"), wxT("tmp2.xlp"));
+    wxConcatFiles(wxT("tmp2.xlp"), wxT("index.xlp"), OutputFile);
+
+    wxRemoveFile(wxT("tmp1.xlp"));
+    wxRemoveFile(wxT("tmp2.xlp"));
+
+    wxRemoveFile(wxT("chapters.xlp"));
+    wxRemoveFile(wxT("sections.xlp"));
+    wxRemoveFile(wxT("subsections.xlp"));
+    wxRemoveFile(wxT("subsubsections.xlp"));
+    wxRemoveFile(wxT("index.xlp"));
     return true;
   }
   return false;
--- utils/tex2rtf/src/htmlutil.cpp-orig	2009-06-18 17:55:06.702103000 -0500
+++ utils/tex2rtf/src/htmlutil.cpp	2009-06-18 17:55:16.456004000 -0500
@@ -26,7 +26,7 @@
 #include "tex2rtf.h"
 #include "table.h"
 #include <stdio.h>
-#define HTML_FILENAME_PATTERN _T("%s_%s.html")
+#define HTML_FILENAME_PATTERN wxT("%s_%s.html")
 
 #if !WXWIN_COMPATIBILITY_2_4
 static inline wxChar* copystring(const wxChar* s)
@@ -193,14 +193,14 @@ void ReopenFile(FILE **fd, wxChar **file
 {
   if (*fd)
   {
-    wxFprintf(*fd, _T("\n</FONT></BODY></HTML>\n"));
+    wxFprintf(*fd, wxT("\n</FONT></BODY></HTML>\n"));
     fclose(*fd);
   }
   fileId ++;
   wxChar buf[400];
   if (truncateFilenames)
   {
-    wxSnprintf(buf, sizeof(buf), _T("%s%d.htm"), FileRoot, fileId);
+    wxSnprintf(buf, sizeof(buf), wxT("%s%d.htm"), FileRoot, fileId);
   }
   else
   {
@@ -211,8 +211,8 @@ void ReopenFile(FILE **fd, wxChar **file
   }
   if (*fileName) delete[] *fileName;
   *fileName = copystring(wxFileNameFromPath(buf));
-  *fd = wxFopen(buf, _T("w"));
-  wxFprintf(*fd, _T("<HTML>\n"));
+  *fd = wxFopen(buf, wxT("w"));
+  wxFprintf(*fd, wxT("<HTML>\n"));
 }
 
 /*
@@ -240,10 +240,10 @@ void ReopenSectionContentsFile(void)
         wxChar buf[256];
         wxStrcpy(buf, CurrentSectionFile);
         wxStripExtension(buf);
-        wxStrcat(buf, _T(".con"));
+        wxStrcat(buf, wxT(".con"));
         SectionContentsFilename = copystring(buf);
 
-        SectionContentsFD = wxFopen(SectionContentsFilename, _T("w"));
+        SectionContentsFD = wxFopen(SectionContentsFilename, wxT("w"));
     }
 }
 
@@ -270,34 +270,34 @@ void ProcessText2HTML(TexChunk *chunk)
                         ((len > i+1 && chunk->value[i+1] == 13) &&
                         (len > i+2 && chunk->value[i+2] == 10))))
     {
-      BigBuffer[ptr] = 0; wxStrcat(BigBuffer, _T("<P>\n\n")); ptr += 5;
+      BigBuffer[ptr] = 0; wxStrcat(BigBuffer, wxT("<P>\n\n")); ptr += 5;
       i += 2;
       changed = true;
     }
-    else if (!inVerbatim && ch == _T('`') && (len >= i+1 && chunk->value[i+1] == '`'))
+    else if (!inVerbatim && ch == wxT('`') && (len >= i+1 && chunk->value[i+1] == '`'))
     {
       BigBuffer[ptr] = '"'; ptr ++;
       i += 2;
       changed = true;
     }
-    else if (!inVerbatim && ch == _T('`')) // Change ` to '
+    else if (!inVerbatim && ch == wxT('`')) // Change ` to '
     {
       BigBuffer[ptr] = 39; ptr ++;
       i += 1;
       changed = true;
     }
-    else if (ch == _T('<')) // Change < to &lt
+    else if (ch == wxT('<')) // Change < to &lt
     {
       BigBuffer[ptr] = 0;
-      wxStrcat(BigBuffer, _T("&lt;"));
+      wxStrcat(BigBuffer, wxT("&lt;"));
       ptr += 4;
       i += 1;
       changed = true;
     }
-    else if (ch == _T('>')) // Change > to &gt
+    else if (ch == wxT('>')) // Change > to &gt
     {
       BigBuffer[ptr] = 0;
-      wxStrcat(BigBuffer, _T("&gt;"));
+      wxStrcat(BigBuffer, wxT("&gt;"));
       ptr += 4;
       i += 1;
       changed = true;
@@ -401,8 +401,8 @@ void AddBrowseButtons(wxChar *upLabel, w
 //    contentsReference = "<img align=center src=\"contents.gif\" BORDER=0 ALT=\"Contents\">";
     contentsReference = contentsReferenceBuf;
     wxSnprintf(contentsReference, sizeof(contentsReferenceBuf),
-               _T("<img align=center src=\"%s\" BORDER=0 ALT=\"Contents\">"),
-               ConvertCase(_T("contents.gif")));
+               wxT("<img align=center src=\"%s\" BORDER=0 ALT=\"Contents\">"),
+               ConvertCase(wxT("contents.gif")));
   }
 
   wxChar *upReference; // no need to initialize because always assigned below
@@ -413,35 +413,35 @@ void AddBrowseButtons(wxChar *upLabel, w
 //    upReference = "<img align=center src=\"up.gif\" ALT=\"Up\">";
     upReference = upReferenceBuf;
     wxSnprintf(upReference, sizeof(upReferenceBuf),
-               _T("<img align=center src=\"%s\" BORDER=0 ALT=\"Up\">"),
-               ConvertCase(_T("up.gif")));
+               wxT("<img align=center src=\"%s\" BORDER=0 ALT=\"Up\">"),
+               ConvertCase(wxT("up.gif")));
   }
 
   wxChar *backReference; // no need to initialize because always assigned below
   if (htmlBrowseButtons == HTML_BUTTONS_TEXT)
-    backReference = _T("&lt;&lt;");
+    backReference = wxT("&lt;&lt;");
   else
   {
 //    backReference = "<img align=center src=\"back.gif\" ALT=\"Previous\">";
     backReference = backReferenceBuf;
     wxSnprintf(backReference, sizeof(backReferenceBuf),
-               _T("<img align=center src=\"%s\" BORDER=0 ALT=\"Previous\">"),
-               ConvertCase(_T("back.gif")));
+               wxT("<img align=center src=\"%s\" BORDER=0 ALT=\"Previous\">"),
+               ConvertCase(wxT("back.gif")));
   }
 
   wxChar *forwardReference; // no need to initialize because always assigned below
   if (htmlBrowseButtons == HTML_BUTTONS_TEXT)
-    forwardReference = _T("&gt;&gt;");
+    forwardReference = wxT("&gt;&gt;");
   else
   {
 //    forwardReference = "<img align=center src=\"forward.gif\" ALT=\"Next\">";
     forwardReference = forwardReferenceBuf;
     wxSnprintf(forwardReference, sizeof(forwardReferenceBuf),
-               _T("<img align=center src=\"%s\" BORDER=0 ALT=\"Next\">"),
-               ConvertCase(_T("forward.gif")));
+               wxT("<img align=center src=\"%s\" BORDER=0 ALT=\"Next\">"),
+               ConvertCase(wxT("forward.gif")));
   }
 
-  TexOutput(_T("<CENTER>"));
+  TexOutput(wxT("<CENTER>"));
 
   wxChar buf[200];
 
@@ -455,20 +455,20 @@ void AddBrowseButtons(wxChar *upLabel, w
     wxChar buf1[80];
     wxStrcpy(buf1, ConvertCase(wxFileNameFromPath(FileRoot)));
     wxSnprintf(buf, sizeof(buf),
-               _T("\n<A HREF=\"%s.%s\">%s</A> "),
-               buf1, ConvertCase(_T("htm")), contentsReference);
+               wxT("\n<A HREF=\"%s.%s\">%s</A> "),
+               buf1, ConvertCase(wxT("htm")), contentsReference);
   }
   else
   {
     wxChar buf1[80];
     wxStrcpy(buf1, ConvertCase(wxFileNameFromPath(FileRoot)));
     wxSnprintf(buf, sizeof(buf),
-               _T("\n<A HREF=\"%s%s\">%s</A> "),
-               buf1, ConvertCase(_T("_contents.html")), contentsReference);
+               wxT("\n<A HREF=\"%s%s\">%s</A> "),
+               buf1, ConvertCase(wxT("_contents.html")), contentsReference);
   }
-//  TexOutput(_T("<NOFRAMES>"));
+//  TexOutput(wxT("<NOFRAMES>"));
   TexOutput(buf);
-//  TexOutput(_T("</NOFRAMES>"));
+//  TexOutput(wxT("</NOFRAMES>"));
 
   /*
    * Up button
@@ -479,17 +479,17 @@ void AddBrowseButtons(wxChar *upLabel, w
   {
     if ( (wxStrlen(upLabel) > 0) && !PrimaryAnchorOfTheFile(upFilename, upLabel) )
       wxSnprintf(buf, sizeof(buf),
-                 _T("<A HREF=\"%s#%s\">%s</A> "),
+                 wxT("<A HREF=\"%s#%s\">%s</A> "),
                  ConvertCase(upFilename), upLabel, upReference);
     else
       wxSnprintf(buf, sizeof(buf),
-                 _T("<A HREF=\"%s\">%s</A> "),
+                 wxT("<A HREF=\"%s\">%s</A> "),
                  ConvertCase(upFilename), upReference);
-    if (wxStrcmp(upLabel, _T("contents")) == 0)
+    if (wxStrcmp(upLabel, wxT("contents")) == 0)
     {
-//      TexOutput(_T("<NOFRAMES>"));
+//      TexOutput(wxT("<NOFRAMES>"));
       TexOutput(buf);
-//      TexOutput(_T("</NOFRAMES>"));
+//      TexOutput(wxT("</NOFRAMES>"));
     }
     else
      TexOutput(buf);
@@ -504,17 +504,17 @@ void AddBrowseButtons(wxChar *upLabel, w
   {
     if (PrimaryAnchorOfTheFile(previousFilename, previousLabel))
       wxSnprintf(buf, sizeof(buf),
-                 _T("<A HREF=\"%s\">%s</A> "),
+                 wxT("<A HREF=\"%s\">%s</A> "),
                  ConvertCase(previousFilename), backReference);
     else
       wxSnprintf(buf, sizeof(buf),
-                 _T("<A HREF=\"%s#%s\">%s</A> "),
+                 wxT("<A HREF=\"%s#%s\">%s</A> "),
                  ConvertCase(previousFilename), previousLabel, backReference);
-    if (wxStrcmp(previousLabel, _T("contents")) == 0)
+    if (wxStrcmp(previousLabel, wxT("contents")) == 0)
     {
-//      TexOutput(_T("<NOFRAMES>"));
+//      TexOutput(wxT("<NOFRAMES>"));
       TexOutput(buf);
-//      TexOutput(_T("</NOFRAMES>"));
+//      TexOutput(wxT("</NOFRAMES>"));
     }
     else
       TexOutput(buf);
@@ -522,7 +522,7 @@ void AddBrowseButtons(wxChar *upLabel, w
   else
   {
     // A placeholder so the buttons don't keep moving position
-    wxSnprintf(buf, sizeof(buf), _T("%s "), backReference);
+    wxSnprintf(buf, sizeof(buf), wxT("%s "), backReference);
     TexOutput(buf);
   }
 
@@ -558,18 +558,18 @@ void AddBrowseButtons(wxChar *upLabel, w
   {
     if (PrimaryAnchorOfTheFile(nextFilename, nextLabel))
       wxSnprintf(buf, sizeof(buf),
-                 _T("<A HREF=\"%s\">%s</A> "),
+                 wxT("<A HREF=\"%s\">%s</A> "),
                  ConvertCase(nextFilename), forwardReference);
     else
       wxSnprintf(buf, sizeof(buf),
-                 _T("<A HREF=\"%s#%s\">%s</A> "),
+                 wxT("<A HREF=\"%s#%s\">%s</A> "),
                  ConvertCase(nextFilename), nextLabel, forwardReference);
     TexOutput(buf);
   }
   else
   {
     // A placeholder so the buttons don't keep moving position
-    wxSnprintf(buf, sizeof(buf), _T("%s "), forwardReference);
+    wxSnprintf(buf, sizeof(buf), wxT("%s "), forwardReference);
     TexOutput(buf);
   }
 
@@ -577,8 +577,8 @@ void AddBrowseButtons(wxChar *upLabel, w
    * Horizontal rule to finish it off nicely.
    *
    */
-  TexOutput(_T("</CENTER>"));
-  TexOutput(_T("<HR>\n"));
+  TexOutput(wxT("</CENTER>"));
+  TexOutput(wxT("<HR>\n"));
 
   // Update last topic/filename
   if (lastFileName)
@@ -595,7 +595,7 @@ wxChar *ParseColourString(wxChar *bkStr,
 {
   static wxChar resStr[300];
   wxStrcpy(resStr, bkStr);
-  wxStringTokenizer tok(resStr, _T(";"), wxTOKEN_STRTOK);
+  wxStringTokenizer tok(resStr, wxT(";"), wxTOKEN_STRTOK);
   if (tok.HasMoreTokens())
   {
     wxString token1 = tok.GetNextToken();
@@ -617,7 +617,7 @@ wxChar *ParseColourString(wxChar *bkStr,
         int green = wxAtoi(token2.c_str());
         int blue = wxAtoi(token3.c_str());
 
-        wxStrcpy(resStr, _T("#"));
+        wxStrcpy(resStr, wxT("#"));
 
         wxChar buf[3];
         DecToHex(red, buf);
@@ -642,25 +642,25 @@ void OutputFont(void)
   if (htmlFaceName)
   {
     // Output <FONT FACE=...>
-    TexOutput(_T("<FONT FACE=\""));
+    TexOutput(wxT("<FONT FACE=\""));
     TexOutput(htmlFaceName);
-    TexOutput(_T("\">\n"));
+    TexOutput(wxT("\">\n"));
   }
 }
 
 // Output start of <BODY> block
 void OutputBodyStart(void)
 {
-  TexOutput(_T("\n<BODY"));
+  TexOutput(wxT("\n<BODY"));
   if (backgroundImageString)
   {
     bool isPicture = false;
     wxChar *s = ParseColourString(backgroundImageString, &isPicture);
     if (s)
     {
-      TexOutput(_T(" BACKGROUND=\""));
+      TexOutput(wxT(" BACKGROUND=\""));
       TexOutput(s);
-      TexOutput(_T("\""));
+      TexOutput(wxT("\""));
     }
   }
   if (backgroundColourString)
@@ -669,7 +669,7 @@ void OutputBodyStart(void)
     wxChar *s = ParseColourString(backgroundColourString, &isPicture);
     if (s)
     {
-      TexOutput(_T(" BGCOLOR="));
+      TexOutput(wxT(" BGCOLOR="));
       TexOutput(s);
     }
   }
@@ -681,7 +681,7 @@ void OutputBodyStart(void)
     wxChar *s = ParseColourString(textColourString, &isPicture);
     if (s)
     {
-      TexOutput(_T(" TEXT=")); TexOutput(s);
+      TexOutput(wxT(" TEXT=")); TexOutput(s);
     }
   }
   // Set link text colour, if one is specified
@@ -691,7 +691,7 @@ void OutputBodyStart(void)
     wxChar *s = ParseColourString(linkColourString, &isPicture);
     if (s)
     {
-      TexOutput(_T(" LINK=")); TexOutput(s);
+      TexOutput(wxT(" LINK=")); TexOutput(s);
     }
   }
   // Set followed link text colour, if one is specified
@@ -701,30 +701,30 @@ void OutputBodyStart(void)
     wxChar *s = ParseColourString(followedLinkColourString, &isPicture);
     if (s)
     {
-      TexOutput(_T(" VLINK=")); TexOutput(s);
+      TexOutput(wxT(" VLINK=")); TexOutput(s);
     }
   }
-  TexOutput(_T(">\n"));
+  TexOutput(wxT(">\n"));
 
   OutputFont();
 }
 
 void HTMLHead()
 {
-  TexOutput(_T("<head>"));
+  TexOutput(wxT("<head>"));
   if (htmlStylesheet) {
-    TexOutput(_T("<link rel=stylesheet type=\"text/css\" href=\""));
+    TexOutput(wxT("<link rel=stylesheet type=\"text/css\" href=\""));
     TexOutput(htmlStylesheet);
-    TexOutput(_T("\">"));
+    TexOutput(wxT("\">"));
   }
 };
 
 void HTMLHeadTo(FILE* f)
 {
   if (htmlStylesheet)
-    wxFprintf(f,_T("<head><link rel=stylesheet type=\"text/css\" href=\"%s\">"),htmlStylesheet);
+    wxFprintf(f,wxT("<head><link rel=stylesheet type=\"text/css\" href=\"%s\">"),htmlStylesheet);
   else
-    wxFprintf(f,_T("<head>"));
+    wxFprintf(f,wxT("<head>"));
 }
 
 // Called on start/end of macro examination
@@ -758,44 +758,44 @@ void HTMLOnMacro(int macroId, int no_arg
       SetCurrentOutput(Chapters);
 
       HTMLHead();
-      TexOutput(_T("<title>"));
+      TexOutput(wxT("<title>"));
       OutputCurrentSection(); // Repeat section header
-      TexOutput(_T("</title></head>\n"));
+      TexOutput(wxT("</title></head>\n"));
       OutputBodyStart();
 
       wxChar titleBuf[200];
       if (truncateFilenames)
-        wxSnprintf(titleBuf, sizeof(titleBuf), _T("%s.htm"), wxFileNameFromPath(FileRoot));
+        wxSnprintf(titleBuf, sizeof(titleBuf), wxT("%s.htm"), wxFileNameFromPath(FileRoot));
       else
-        wxSnprintf(titleBuf, sizeof(titleBuf), _T("%s_contents.html"), wxFileNameFromPath(FileRoot));
+        wxSnprintf(titleBuf, sizeof(titleBuf), wxT("%s_contents.html"), wxFileNameFromPath(FileRoot));
 
-      wxFprintf(Chapters, _T("<A NAME=\"%s\"></A>"), topicName);
+      wxFprintf(Chapters, wxT("<A NAME=\"%s\"></A>"), topicName);
 
-      AddBrowseButtons(_T(""), titleBuf, // Up
+      AddBrowseButtons(wxT(""), titleBuf, // Up
                        lastTopic, lastFileName,  // Last topic
                        topicName, ChaptersName); // This topic
 
       if(PrimaryAnchorOfTheFile(ChaptersName, topicName))
-        wxFprintf(Contents, _T("\n<LI><A HREF=\"%s\">"), ConvertCase(ChaptersName));
+        wxFprintf(Contents, wxT("\n<LI><A HREF=\"%s\">"), ConvertCase(ChaptersName));
       else
-        wxFprintf(Contents, _T("\n<LI><A HREF=\"%s#%s\">"), ConvertCase(ChaptersName), topicName);
+        wxFprintf(Contents, wxT("\n<LI><A HREF=\"%s#%s\">"), ConvertCase(ChaptersName), topicName);
 
       if (htmlFrameContents && FrameContents)
       {
         SetCurrentOutput(FrameContents);
         if(PrimaryAnchorOfTheFile(ChaptersName, topicName))
-          wxFprintf(FrameContents, _T("\n<LI><A HREF=\"%s\" TARGET=\"mainwindow\">"), ConvertCase(ChaptersName));
+          wxFprintf(FrameContents, wxT("\n<LI><A HREF=\"%s\" TARGET=\"mainwindow\">"), ConvertCase(ChaptersName));
         else
-          wxFprintf(FrameContents, _T("\n<LI><A HREF=\"%s#%s\" TARGET=\"mainwindow\">"), ConvertCase(ChaptersName), topicName);
+          wxFprintf(FrameContents, wxT("\n<LI><A HREF=\"%s#%s\" TARGET=\"mainwindow\">"), ConvertCase(ChaptersName), topicName);
         OutputCurrentSection();
-        wxFprintf(FrameContents, _T("</A>\n"));
+        wxFprintf(FrameContents, wxT("</A>\n"));
       }
 
       SetCurrentOutputs(Contents, Chapters);
-      wxFprintf(Chapters, _T("\n<H2>"));
+      wxFprintf(Chapters, wxT("\n<H2>"));
       OutputCurrentSection();
-      wxFprintf(Contents, _T("</A>\n"));
-      wxFprintf(Chapters, _T("</H2>\n"));
+      wxFprintf(Contents, wxT("</A>\n"));
+      wxFprintf(Chapters, wxT("</H2>\n"));
 
       SetCurrentOutput(Chapters);
 
@@ -834,12 +834,12 @@ void HTMLOnMacro(int macroId, int no_arg
 
       SetCurrentOutput(Sections);
       HTMLHead();
-      TexOutput(_T("<title>"));
+      TexOutput(wxT("<title>"));
       OutputCurrentSection();
-      TexOutput(_T("</title></head>\n"));
+      TexOutput(wxT("</title></head>\n"));
       OutputBodyStart();
 
-      wxFprintf(Sections, _T("<A NAME=\"%s\"></A>"), topicName);
+      wxFprintf(Sections, wxT("<A NAME=\"%s\"></A>"), topicName);
       AddBrowseButtons(CurrentChapterName, CurrentChapterFile, // Up
                        lastTopic, lastFileName,  // Last topic
                        topicName, SectionsName); // This topic
@@ -850,26 +850,26 @@ void HTMLOnMacro(int macroId, int no_arg
       if (DocumentStyle == LATEX_ARTICLE)
       {
         if(PrimaryAnchorOfTheFile(SectionsName, topicName))
-          wxFprintf(jumpFrom, _T("\n<LI><A HREF=\"%s\">"), ConvertCase(SectionsName));
+          wxFprintf(jumpFrom, wxT("\n<LI><A HREF=\"%s\">"), ConvertCase(SectionsName));
         else
-          wxFprintf(jumpFrom, _T("\n<LI><A HREF=\"%s#%s\">"), ConvertCase(SectionsName), topicName);
+          wxFprintf(jumpFrom, wxT("\n<LI><A HREF=\"%s#%s\">"), ConvertCase(SectionsName), topicName);
       }
       else
       {
         if(PrimaryAnchorOfTheFile(SectionsName, topicName))
-          wxFprintf(jumpFrom, _T("\n<A HREF=\"%s\"><B>"), ConvertCase(SectionsName));
+          wxFprintf(jumpFrom, wxT("\n<A HREF=\"%s\"><B>"), ConvertCase(SectionsName));
         else
-          wxFprintf(jumpFrom, _T("\n<A HREF=\"%s#%s\"><B>"), ConvertCase(SectionsName), topicName);
+          wxFprintf(jumpFrom, wxT("\n<A HREF=\"%s#%s\"><B>"), ConvertCase(SectionsName), topicName);
       }
 
-      wxFprintf(Sections, _T("\n<H2>"));
+      wxFprintf(Sections, wxT("\n<H2>"));
       OutputCurrentSection();
 
       if (DocumentStyle == LATEX_ARTICLE)
-        wxFprintf(jumpFrom, _T("</A>\n"));
+        wxFprintf(jumpFrom, wxT("</A>\n"));
       else
-        wxFprintf(jumpFrom, _T("</B></A><BR>\n"));
-      wxFprintf(Sections, _T("</H2>\n"));
+        wxFprintf(jumpFrom, wxT("</B></A><BR>\n"));
+      wxFprintf(Sections, wxT("</H2>\n"));
 
       SetCurrentOutput(Sections);
       // Add this section title to the list of keywords
@@ -890,7 +890,7 @@ void HTMLOnMacro(int macroId, int no_arg
     {
       if (!Sections)
       {
-        OnError(_T("You cannot have a subsection before a section!"));
+        OnError(wxT("You cannot have a subsection before a section!"));
       }
       else
       {
@@ -907,8 +907,8 @@ void HTMLOnMacro(int macroId, int no_arg
             wxChar buf[256];
             wxStrcpy(buf, CurrentSectionFile);
             wxStripExtension(buf);
-            wxStrcat(buf, _T(".con"));
-            FILE *fd = wxFopen(buf, _T("r"));
+            wxStrcat(buf, wxT(".con"));
+            FILE *fd = wxFopen(buf, wxT("r"));
             if ( fd )
             {
                 int ch = getc(fd);
@@ -919,7 +919,7 @@ void HTMLOnMacro(int macroId, int no_arg
                 }
                 fclose(fd);
             }
-            wxFprintf(Sections, _T("<P>\n"));
+            wxFprintf(Sections, wxT("<P>\n"));
 
             // Close old file, create a new file for the sub(sub)section contents entries
             ReopenSectionContentsFile();
@@ -940,26 +940,26 @@ void HTMLOnMacro(int macroId, int no_arg
             SetCurrentOutput(Subsections);
 
             HTMLHead();
-            TexOutput(_T("<title>"));
+            TexOutput(wxT("<title>"));
             OutputCurrentSection();
-            TexOutput(_T("</title></head>\n"));
+            TexOutput(wxT("</title></head>\n"));
             OutputBodyStart();
 
-            wxFprintf(Subsections, _T("<A NAME=\"%s\"></A>"), topicName);
+            wxFprintf(Subsections, wxT("<A NAME=\"%s\"></A>"), topicName);
             AddBrowseButtons(CurrentSectionName, CurrentSectionFile, // Up
                            lastTopic, lastFileName,  // Last topic
                            topicName, SubsectionsName); // This topic
 
             SetCurrentOutputs(Sections, Subsections);
             if(PrimaryAnchorOfTheFile(SubsectionsName, topicName))
-              wxFprintf(Sections, _T("\n<A HREF=\"%s\"><B>"), ConvertCase(SubsectionsName));
+              wxFprintf(Sections, wxT("\n<A HREF=\"%s\"><B>"), ConvertCase(SubsectionsName));
             else
-              wxFprintf(Sections, _T("\n<A HREF=\"%s#%s\"><B>"), ConvertCase(SubsectionsName), topicName);
+              wxFprintf(Sections, wxT("\n<A HREF=\"%s#%s\"><B>"), ConvertCase(SubsectionsName), topicName);
 
-            wxFprintf(Subsections, _T("\n<H3>"));
+            wxFprintf(Subsections, wxT("\n<H3>"));
             OutputCurrentSection();
-            wxFprintf(Sections, _T("</B></A><BR>\n"));
-            wxFprintf(Subsections, _T("</H3>\n"));
+            wxFprintf(Sections, wxT("</B></A><BR>\n"));
+            wxFprintf(Subsections, wxT("</H3>\n"));
 
             SetCurrentOutput(Subsections);
           }
@@ -969,18 +969,18 @@ void HTMLOnMacro(int macroId, int no_arg
             SetCurrentSubsectionName(topicName, SectionsName);
 
 //            if ( subsectionNo != 0 )
-            wxFprintf(Sections, _T("\n<HR>\n"));
+            wxFprintf(Sections, wxT("\n<HR>\n"));
 
             // We're putting everything into the section file
-            wxFprintf(Sections, _T("<A NAME=\"%s\"></A>"), topicName);
-            wxFprintf(Sections, _T("\n<H3>"));
+            wxFprintf(Sections, wxT("<A NAME=\"%s\"></A>"), topicName);
+            wxFprintf(Sections, wxT("\n<H3>"));
             OutputCurrentSection();
-            wxFprintf(Sections, _T("</H3>\n"));
+            wxFprintf(Sections, wxT("</H3>\n"));
 
             SetCurrentOutput(SectionContentsFD);
-            wxFprintf(SectionContentsFD, _T("<A HREF=\"#%s\">"), topicName);
+            wxFprintf(SectionContentsFD, wxT("<A HREF=\"#%s\">"), topicName);
             OutputCurrentSection();
-            TexOutput(_T("</A><BR>\n"));
+            TexOutput(wxT("</A><BR>\n"));
 
             if (htmlWorkshopFiles) HTMLWorkshopAddToContents(2, topicName, SectionsName);
             SetCurrentOutput(Sections);
@@ -1003,7 +1003,7 @@ void HTMLOnMacro(int macroId, int no_arg
     {
       if (!Subsections && !combineSubSections)
       {
-        OnError(_T("You cannot have a subsubsection before a subsection!"));
+        OnError(wxT("You cannot have a subsubsection before a subsection!"));
       }
       else
       {
@@ -1024,12 +1024,12 @@ void HTMLOnMacro(int macroId, int no_arg
 
             SetCurrentOutput(Subsubsections);
             HTMLHead();
-            TexOutput(_T("<title>"));
+            TexOutput(wxT("<title>"));
             OutputCurrentSection();
-            TexOutput(_T("</title></head>\n"));
+            TexOutput(wxT("</title></head>\n"));
             OutputBodyStart();
 
-            wxFprintf(Subsubsections, _T("<A NAME=\"%s\"></A>"), topicName);
+            wxFprintf(Subsubsections, wxT("<A NAME=\"%s\"></A>"), topicName);
 
             AddBrowseButtons(CurrentSubsectionName, CurrentSubsectionFile, // Up
                          lastTopic, lastFileName,  // Last topic
@@ -1037,31 +1037,31 @@ void HTMLOnMacro(int macroId, int no_arg
 
             SetCurrentOutputs(Subsections, Subsubsections);
             if(PrimaryAnchorOfTheFile(SubsubsectionsName, topicName))
-              wxFprintf(Subsections, _T("\n<A HREF=\"%s\"><B>"), ConvertCase(SubsubsectionsName));
+              wxFprintf(Subsections, wxT("\n<A HREF=\"%s\"><B>"), ConvertCase(SubsubsectionsName));
             else
-              wxFprintf(Subsections, _T("\n<A HREF=\"%s#%s\"><B>"), ConvertCase(SubsubsectionsName), topicName);
+              wxFprintf(Subsections, wxT("\n<A HREF=\"%s#%s\"><B>"), ConvertCase(SubsubsectionsName), topicName);
 
-            wxFprintf(Subsubsections, _T("\n<H3>"));
+            wxFprintf(Subsubsections, wxT("\n<H3>"));
             OutputCurrentSection();
-            wxFprintf(Subsections, _T("</B></A><BR>\n"));
-            wxFprintf(Subsubsections, _T("</H3>\n"));
+            wxFprintf(Subsections, wxT("</B></A><BR>\n"));
+            wxFprintf(Subsubsections, wxT("</H3>\n"));
         }
         else
         {
             AddTexRef(topicName, SectionsName, SubsubsectionNameString);
             SetCurrentSubsectionName(topicName, SectionsName);
-            wxFprintf(Sections, _T("\n<HR>\n"));
+            wxFprintf(Sections, wxT("\n<HR>\n"));
 
             // We're putting everything into the section file
-            wxFprintf(Sections, _T("<A NAME=\"%s\"></A>"), topicName);
-            wxFprintf(Sections, _T("\n<H3>"));
+            wxFprintf(Sections, wxT("<A NAME=\"%s\"></A>"), topicName);
+            wxFprintf(Sections, wxT("\n<H3>"));
             OutputCurrentSection();
-            wxFprintf(Sections, _T("</H3>\n"));
+            wxFprintf(Sections, wxT("</H3>\n"));
 /* TODO: where do we put subsubsection contents entry - indented, with subsection entries?
             SetCurrentOutput(SectionContentsFD);
             wxFprintf(SectionContentsFD, "<A HREF=\"#%s\">", topicName);
             OutputCurrentSection();
-            TexOutput(_T("</A><BR>"));
+            TexOutput(wxT("</A><BR>"));
 */
             if (htmlWorkshopFiles) HTMLWorkshopAddToContents(2, topicName, SectionsName);
             SetCurrentOutput(Sections);
@@ -1122,19 +1122,19 @@ void HTMLOnMacro(int macroId, int no_arg
   }
   case ltVOID:
 //    if (start)
-//      TexOutput(_T("<B>void</B>"));
+//      TexOutput(wxT("<B>void</B>"));
     break;
   case ltHARDY:
     if (start)
-      TexOutput(_T("HARDY"));
+      TexOutput(wxT("HARDY"));
     break;
   case ltWXCLIPS:
     if (start)
-      TexOutput(_T("wxCLIPS"));
+      TexOutput(wxT("wxCLIPS"));
     break;
   case ltAMPERSAND:
     if (start)
-      TexOutput(_T("&amp;"));
+      TexOutput(wxT("&amp;"));
     break;
   case ltSPECIALAMPERSAND:
   {
@@ -1144,7 +1144,7 @@ void HTMLOnMacro(int macroId, int no_arg
       {
         // End cell, start cell
 
-        TexOutput(_T("</FONT></TD>"));
+        TexOutput(wxT("</FONT></TD>"));
 
         // Start new row and cell, setting alignment for the first cell.
         if (currentColumn < noColumns)
@@ -1152,9 +1152,9 @@ void HTMLOnMacro(int macroId, int no_arg
 
         wxChar buf[100];
         if (TableData[currentColumn].justification == 'c')
-          wxSnprintf(buf, sizeof(buf), _T("\n<TD ALIGN=CENTER>"));
+          wxSnprintf(buf, sizeof(buf), wxT("\n<TD ALIGN=CENTER>"));
         else if (TableData[currentColumn].justification == 'r')
-          wxSnprintf(buf, sizeof(buf), _T("\n<TD ALIGN=RIGHT>"));
+          wxSnprintf(buf, sizeof(buf), wxT("\n<TD ALIGN=RIGHT>"));
         else if (TableData[currentColumn].absWidth)
         {
           // Convert from points * 20 into pixels.
@@ -1163,15 +1163,15 @@ void HTMLOnMacro(int macroId, int no_arg
           // Say the display is 100 DPI (dots/pixels per inch).
           // There are 72 pts to the inch. So 1pt = 1/72 inch, or 100 * 1/72 dots.
           int pixels = (int)(points * 100.0 / 72.0);
-          wxSnprintf(buf, sizeof(buf), _T("<TD ALIGN=CENTER WIDTH=%d>"), pixels);
+          wxSnprintf(buf, sizeof(buf), wxT("<TD ALIGN=CENTER WIDTH=%d>"), pixels);
         }
         else
-          wxSnprintf(buf, sizeof(buf), _T("\n<TD ALIGN=LEFT>"));
+          wxSnprintf(buf, sizeof(buf), wxT("\n<TD ALIGN=LEFT>"));
         TexOutput(buf);
         OutputFont();
       }
       else
-        TexOutput(_T("&amp;"));
+        TexOutput(wxT("&amp;"));
     }
     break;
   }
@@ -1184,10 +1184,10 @@ void HTMLOnMacro(int macroId, int no_arg
         // End row. In fact, tables without use of \row or \ruledrow isn't supported for
         // HTML: the syntax is too different (e.g. how do we know where to put the first </TH>
         // if we've ended the last row?). So normally you wouldn't use \\ to end a row.
-        TexOutput(_T("</TR>\n"));
+        TexOutput(wxT("</TR>\n"));
       }
       else
-        TexOutput(_T("<BR>\n"));
+        TexOutput(wxT("<BR>\n"));
     }
     break;
   }
@@ -1201,9 +1201,9 @@ void HTMLOnMacro(int macroId, int no_arg
       // Start new row and cell, setting alignment for the first cell.
       wxChar buf[100];
       if (TableData[currentColumn].justification == 'c')
-        wxSnprintf(buf, sizeof(buf), _T("<TR>\n<TD ALIGN=CENTER>"));
+        wxSnprintf(buf, sizeof(buf), wxT("<TR>\n<TD ALIGN=CENTER>"));
       else if (TableData[currentColumn].justification == 'r')
-        wxSnprintf(buf, sizeof(buf), _T("<TR>\n<TD ALIGN=RIGHT>"));
+        wxSnprintf(buf, sizeof(buf), wxT("<TR>\n<TD ALIGN=RIGHT>"));
       else if (TableData[currentColumn].absWidth)
       {
         // Convert from points * 20 into pixels.
@@ -1212,10 +1212,10 @@ void HTMLOnMacro(int macroId, int no_arg
         // Say the display is 100 DPI (dots/pixels per inch).
         // There are 72 pts to the inch. So 1pt = 1/72 inch, or 100 * 1/72 dots.
         int pixels = (int)(points * 100.0 / 72.0);
-        wxSnprintf(buf, sizeof(buf), _T("<TR>\n<TD ALIGN=CENTER WIDTH=%d>"), pixels);
+        wxSnprintf(buf, sizeof(buf), wxT("<TR>\n<TD ALIGN=CENTER WIDTH=%d>"), pixels);
       }
       else
-        wxSnprintf(buf, sizeof(buf), _T("<TR>\n<TD ALIGN=LEFT>"));
+        wxSnprintf(buf, sizeof(buf), wxT("<TR>\n<TD ALIGN=LEFT>"));
       TexOutput(buf);
       OutputFont();
     }
@@ -1223,7 +1223,7 @@ void HTMLOnMacro(int macroId, int no_arg
     {
       // End cell and row
       // Start new row and cell
-      TexOutput(_T("</FONT></TD>\n</TR>\n"));
+      TexOutput(wxT("</FONT></TD>\n</TR>\n"));
     }
     break;
   }
@@ -1231,7 +1231,7 @@ void HTMLOnMacro(int macroId, int no_arg
   case ltBRCLEAR:
   {
     if (start)
-      TexOutput(_T("<BR CLEAR=ALL>"));
+      TexOutput(wxT("<BR CLEAR=ALL>"));
     break;
   }
   case ltRTFSP:  // Explicit space, RTF only
@@ -1241,9 +1241,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       #if (1) // if(inVerbatim)
-        TexOutput(_T("~"));
+        TexOutput(wxT("~"));
       #else
-        TexOutput(_T(" "));
+        TexOutput(wxT(" "));
       #endif
     }
     break;
@@ -1251,9 +1251,9 @@ void HTMLOnMacro(int macroId, int no_arg
   case ltINDENTED :
   {
     if ( start )
-        TexOutput(_T("<UL><UL>\n"));
+        TexOutput(wxT("<UL><UL>\n"));
     else
-        TexOutput(_T("</UL></UL>\n"));
+        TexOutput(wxT("</UL></UL>\n"));
     break;
   }
   case ltITEMIZE:
@@ -1277,14 +1277,14 @@ void HTMLOnMacro(int macroId, int no_arg
       switch (listType)
       {
         case LATEX_ITEMIZE:
-          TexOutput(_T("<UL>\n"));
+          TexOutput(wxT("<UL>\n"));
           break;
         case LATEX_ENUMERATE:
-          TexOutput(_T("<OL>\n"));
+          TexOutput(wxT("<OL>\n"));
           break;
         case LATEX_DESCRIPTION:
         default:
-          TexOutput(_T("<DL>\n"));
+          TexOutput(wxT("<DL>\n"));
           break;
       }
     }
@@ -1297,14 +1297,14 @@ void HTMLOnMacro(int macroId, int no_arg
         switch (struc->listType)
         {
           case LATEX_ITEMIZE:
-            TexOutput(_T("</UL>\n"));
+            TexOutput(wxT("</UL>\n"));
             break;
           case LATEX_ENUMERATE:
-            TexOutput(_T("</OL>\n"));
+            TexOutput(wxT("</OL>\n"));
             break;
           case LATEX_DESCRIPTION:
           default:
-            TexOutput(_T("</DL>\n"));
+            TexOutput(wxT("</DL>\n"));
             break;
         }
 
@@ -1317,9 +1317,9 @@ void HTMLOnMacro(int macroId, int no_arg
   case ltTWOCOLLIST :
   {
     if ( start )
-        TexOutput(_T("\n<TABLE>\n"));
+        TexOutput(wxT("\n<TABLE>\n"));
     else {
-        TexOutput(_T("\n</TABLE>\n"));
+        TexOutput(wxT("\n</TABLE>\n"));
     // DHS
         TwoColWidthA = -1;
         TwoColWidthB = -1;
@@ -1329,7 +1329,7 @@ void HTMLOnMacro(int macroId, int no_arg
   case ltPAR:
   {
     if (start)
-      TexOutput(_T("<P>\n"));
+      TexOutput(wxT("<P>\n"));
     break;
   }
 /* For footnotes we need to output the text at the bottom of the page and
@@ -1339,17 +1339,17 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<FN>"));
+      TexOutput(wxT("<FN>"));
     }
-    else TexOutput(_T("</FN>"));
+    else TexOutput(wxT("</FN>"));
     break;
   }
 */
   case ltVERB:
   {
     if (start)
-      TexOutput(_T("<TT>"));
-    else TexOutput(_T("</TT>"));
+      TexOutput(wxT("<TT>"));
+    else TexOutput(wxT("</TT>"));
     break;
   }
   case ltVERBATIM:
@@ -1357,10 +1357,10 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       wxChar buf[100];
-      wxSnprintf(buf, sizeof(buf), _T("<PRE>\n"));
+      wxSnprintf(buf, sizeof(buf), wxT("<PRE>\n"));
       TexOutput(buf);
     }
-    else TexOutput(_T("</PRE>\n"));
+    else TexOutput(wxT("</PRE>\n"));
     break;
   }
   case ltCENTERLINE:
@@ -1368,9 +1368,9 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<CENTER>"));
+      TexOutput(wxT("<CENTER>"));
     }
-    else TexOutput(_T("</CENTER>"));
+    else TexOutput(wxT("</CENTER>"));
     break;
   }
   case ltFLUSHLEFT:
@@ -1378,9 +1378,9 @@ void HTMLOnMacro(int macroId, int no_arg
 /*
     if (start)
     {
-      TexOutput(_T("{\\ql "));
+      TexOutput(wxT("{\\ql "));
     }
-    else TexOutput(_T("}\\par\\pard\n"));
+    else TexOutput(wxT("}\\par\\pard\n"));
 */
     break;
   }
@@ -1389,9 +1389,9 @@ void HTMLOnMacro(int macroId, int no_arg
 /*
     if (start)
     {
-      TexOutput(_T("{\\qr "));
+      TexOutput(wxT("{\\qr "));
     }
-    else TexOutput(_T("}\\par\\pard\n"));
+    else TexOutput(wxT("}\\par\\pard\n"));
 */
     break;
   }
@@ -1400,9 +1400,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       // Netscape extension
-      TexOutput(_T("<FONT SIZE=2>"));
+      TexOutput(wxT("<FONT SIZE=2>"));
     }
-    else TexOutput(_T("</FONT>"));
+    else TexOutput(wxT("</FONT>"));
     break;
   }
   case ltTINY:
@@ -1410,9 +1410,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       // Netscape extension
-      TexOutput(_T("<FONT SIZE=1>"));
+      TexOutput(wxT("<FONT SIZE=1>"));
     }
-    else TexOutput(_T("</FONT>"));
+    else TexOutput(wxT("</FONT>"));
     break;
   }
   case ltNORMALSIZE:
@@ -1420,9 +1420,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       // Netscape extension
-      TexOutput(_T("<FONT SIZE=3>"));
+      TexOutput(wxT("<FONT SIZE=3>"));
     }
-    else TexOutput(_T("</FONT>"));
+    else TexOutput(wxT("</FONT>"));
     break;
   }
   case ltlarge:
@@ -1430,9 +1430,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       // Netscape extension
-      TexOutput(_T("<FONT SIZE=4>"));
+      TexOutput(wxT("<FONT SIZE=4>"));
     }
-    else TexOutput(_T("</FONT>"));
+    else TexOutput(wxT("</FONT>"));
     break;
   }
   case ltLarge:
@@ -1440,9 +1440,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       // Netscape extension
-      TexOutput(_T("<FONT SIZE=5>"));
+      TexOutput(wxT("<FONT SIZE=5>"));
     }
-    else TexOutput(_T("</FONT>"));
+    else TexOutput(wxT("</FONT>"));
     break;
   }
   case ltLARGE:
@@ -1450,9 +1450,9 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       // Netscape extension
-      TexOutput(_T("<FONT SIZE=6>"));
+      TexOutput(wxT("<FONT SIZE=6>"));
     }
-    else TexOutput(_T("</FONT>"));
+    else TexOutput(wxT("</FONT>"));
     break;
   }
   case ltBFSERIES:
@@ -1461,9 +1461,9 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<B>"));
+      TexOutput(wxT("<B>"));
     }
-    else TexOutput(_T("</B>"));
+    else TexOutput(wxT("</B>"));
     break;
   }
   case ltITSHAPE:
@@ -1472,9 +1472,9 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<I>"));
+      TexOutput(wxT("<I>"));
     }
-    else TexOutput(_T("</I>"));
+    else TexOutput(wxT("</I>"));
     break;
   }
   case ltEMPH:
@@ -1482,18 +1482,18 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<EM>"));
+      TexOutput(wxT("<EM>"));
     }
-    else TexOutput(_T("</EM>"));
+    else TexOutput(wxT("</EM>"));
     break;
   }
   case ltUNDERLINE:
   {
     if (start)
     {
-      TexOutput(_T("<UL>"));
+      TexOutput(wxT("<UL>"));
     }
-    else TexOutput(_T("</UL>"));
+    else TexOutput(wxT("</UL>"));
     break;
   }
   case ltTTFAMILY:
@@ -1502,52 +1502,52 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<TT>"));
+      TexOutput(wxT("<TT>"));
     }
-    else TexOutput(_T("</TT>"));
+    else TexOutput(wxT("</TT>"));
     break;
   }
   case ltCOPYRIGHT:
   {
     if (start)
-      TexOutput(_T("&copy;"), true);
+      TexOutput(wxT("&copy;"), true);
     break;
   }
   case ltREGISTERED:
   {
     if (start)
-      TexOutput(_T("&reg;"), true);
+      TexOutput(wxT("&reg;"), true);
     break;
   }
   // Arrows
   case ltLEFTARROW:
   {
-    if (start) TexOutput(_T("&lt;--"));
+    if (start) TexOutput(wxT("&lt;--"));
     break;
   }
   case ltLEFTARROW2:
   {
-    if (start) TexOutput(_T("&lt;=="));
+    if (start) TexOutput(wxT("&lt;=="));
     break;
   }
   case ltRIGHTARROW:
   {
-      if (start) TexOutput(_T("--&gt;"));
+      if (start) TexOutput(wxT("--&gt;"));
       break;
   }
   case ltRIGHTARROW2:
   {
-    if (start) TexOutput(_T("==&gt;"));
+    if (start) TexOutput(wxT("==&gt;"));
     break;
   }
   case ltLEFTRIGHTARROW:
   {
-    if (start) TexOutput(_T("&lt;--&gt;"));
+    if (start) TexOutput(wxT("&lt;--&gt;"));
     break;
   }
   case ltLEFTRIGHTARROW2:
   {
-    if (start) TexOutput(_T("&lt;==&gt;"));
+    if (start) TexOutput(wxT("&lt;==&gt;"));
     break;
   }
 /*
@@ -1569,15 +1569,15 @@ void HTMLOnMacro(int macroId, int no_arg
         {
           if (descriptionItemArg)
           {
-            TexOutput(_T("<DT> "));
+            TexOutput(wxT("<DT> "));
             TraverseChildrenFromChunk(descriptionItemArg);
-            TexOutput(_T("\n"));
+            TexOutput(wxT("\n"));
             descriptionItemArg = NULL;
           }
-          TexOutput(_T("<DD>"));
+          TexOutput(wxT("<DD>"));
         }
         else
-          TexOutput(_T("<LI>"));
+          TexOutput(wxT("<LI>"));
       }
     }
     break;
@@ -1587,25 +1587,25 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start && DocumentTitle && DocumentAuthor)
     {
       // Add a special label for the contents page.
-//      TexOutput(_T("<CENTER>\n"));
-      TexOutput(_T("<A NAME=\"contents\">"));
-      TexOutput(_T("<H2 ALIGN=CENTER>\n"));
+//      TexOutput(wxT("<CENTER>\n"));
+      TexOutput(wxT("<A NAME=\"contents\">"));
+      TexOutput(wxT("<H2 ALIGN=CENTER>\n"));
       TraverseChildrenFromChunk(DocumentTitle);
-      TexOutput(_T("</H2>"));
-      TexOutput(_T("<P>"));
-      TexOutput(_T("</A>\n"));
-      TexOutput(_T("<P>\n\n"));
-      TexOutput(_T("<H3 ALIGN=CENTER>"));
+      TexOutput(wxT("</H2>"));
+      TexOutput(wxT("<P>"));
+      TexOutput(wxT("</A>\n"));
+      TexOutput(wxT("<P>\n\n"));
+      TexOutput(wxT("<H3 ALIGN=CENTER>"));
       TraverseChildrenFromChunk(DocumentAuthor);
-      TexOutput(_T("</H3><P>\n\n"));
+      TexOutput(wxT("</H3><P>\n\n"));
       if (DocumentDate)
       {
-        TexOutput(_T("<H3 ALIGN=CENTER>"));
+        TexOutput(wxT("<H3 ALIGN=CENTER>"));
         TraverseChildrenFromChunk(DocumentDate);
-        TexOutput(_T("</H3><P>\n\n"));
+        TexOutput(wxT("</H3><P>\n\n"));
       }
-//      TexOutput(_T("\n</CENTER>\n"));
-      TexOutput(_T("\n<P><HR><P>\n"));
+//      TexOutput(wxT("\n</CENTER>\n"));
+      TexOutput(wxT("\n<P><HR><P>\n"));
 
 /*
       // Now do optional frame contents page
@@ -1614,24 +1614,24 @@ void HTMLOnMacro(int macroId, int no_arg
         SetCurrentOutput(FrameContents);
 
         // Add a special label for the contents page.
-        TexOutput(_T("<CENTER>\n"));
-        TexOutput(_T("<H3>\n"));
+        TexOutput(wxT("<CENTER>\n"));
+        TexOutput(wxT("<H3>\n"));
         TraverseChildrenFromChunk(DocumentTitle);
-        TexOutput(_T("</H3>"));
-        TexOutput(_T("<P>"));
-        TexOutput(_T("</A>\n"));
-        TexOutput(_T("<P>\n\n"));
-        TexOutput(_T("<H3>"));
+        TexOutput(wxT("</H3>"));
+        TexOutput(wxT("<P>"));
+        TexOutput(wxT("</A>\n"));
+        TexOutput(wxT("<P>\n\n"));
+        TexOutput(wxT("<H3>"));
         TraverseChildrenFromChunk(DocumentAuthor);
-        TexOutput(_T("</H3><P>\n\n"));
+        TexOutput(wxT("</H3><P>\n\n"));
         if (DocumentDate)
         {
-          TexOutput(_T("<H4>"));
+          TexOutput(wxT("<H4>"));
           TraverseChildrenFromChunk(DocumentDate);
-          TexOutput(_T("</H4><P>\n\n"));
+          TexOutput(wxT("</H4><P>\n\n"));
         }
-        TexOutput(_T("\n</CENTER>\n"));
-        TexOutput(_T("<P><HR><P>\n"));
+        TexOutput(wxT("\n</CENTER>\n"));
+        TexOutput(wxT("<P><HR><P>\n"));
 
         SetCurrentOutput(Titlepage);
       }
@@ -1660,7 +1660,7 @@ void HTMLOnMacro(int macroId, int no_arg
     else
     {
       DefaultOnMacro(macroId, no_args, start);
-      TexOutput(_T("</DL>\n"));
+      TexOutput(wxT("</DL>\n"));
     }
     break;
   }
@@ -1668,7 +1668,7 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<HR>\n"));
+      TexOutput(wxT("<HR>\n"));
     }
     break;
   }
@@ -1676,7 +1676,7 @@ void HTMLOnMacro(int macroId, int no_arg
   {
     if (start)
     {
-      TexOutput(_T("<HR>\n"));
+      TexOutput(wxT("<HR>\n"));
     }
     break;
   }
@@ -1689,7 +1689,7 @@ void HTMLOnMacro(int macroId, int no_arg
       // place.
       //fflush(Titlepage);
 
-      FILE *fd = wxFopen(ContentsName, _T("r"));
+      FILE *fd = wxFopen(ContentsName, wxT("r"));
       if (fd)
       {
         int ch = getc(fd);
@@ -1703,8 +1703,8 @@ void HTMLOnMacro(int macroId, int no_arg
       }
       else
       {
-        TexOutput(_T("RUN TEX2RTF AGAIN FOR CONTENTS PAGE\n"));
-        OnInform(_T("Run Tex2RTF again to include contents page."));
+        TexOutput(wxT("RUN TEX2RTF AGAIN FOR CONTENTS PAGE\n"));
+        OnInform(wxT("Run Tex2RTF again to include contents page."));
       }
     }
     break;
@@ -1712,22 +1712,22 @@ void HTMLOnMacro(int macroId, int no_arg
   case ltLANGLEBRA:
   {
     if (start)
-      TexOutput(_T("&lt;"));
+      TexOutput(wxT("&lt;"));
     break;
   }
   case ltRANGLEBRA:
   {
     if (start)
-      TexOutput(_T("&gt;"));
+      TexOutput(wxT("&gt;"));
     break;
   }
   case ltQUOTE:
   case ltQUOTATION:
   {
     if (start)
-      TexOutput(_T("<BLOCKQUOTE>"));
+      TexOutput(wxT("<BLOCKQUOTE>"));
     else
-      TexOutput(_T("</BLOCKQUOTE>"));
+      TexOutput(wxT("</BLOCKQUOTE>"));
     break;
   }
   case ltCAPTION:
@@ -1736,7 +1736,7 @@ void HTMLOnMacro(int macroId, int no_arg
     if (start)
     {
       if (inTabular)
-        TexOutput(_T("\n<CAPTION>"));
+        TexOutput(wxT("\n<CAPTION>"));
 
       wxChar figBuf[40];
 
@@ -1745,18 +1745,18 @@ void HTMLOnMacro(int macroId, int no_arg
           figureNo ++;
 
           if (DocumentStyle != LATEX_ARTICLE)
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d.%d: "), FigureNameString, chapterNo, figureNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d.%d: "), FigureNameString, chapterNo, figureNo);
           else
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d: "), FigureNameString, figureNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d: "), FigureNameString, figureNo);
       }
       else
       {
           tableNo ++;
 
           if (DocumentStyle != LATEX_ARTICLE)
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d.%d: "), TableNameString, chapterNo, tableNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d.%d: "), TableNameString, chapterNo, tableNo);
           else
-            wxSnprintf(figBuf, sizeof(figBuf), _T("%s %d: "), TableNameString, tableNo);
+            wxSnprintf(figBuf, sizeof(figBuf), wxT("%s %d: "), TableNameString, tableNo);
       }
 
       TexOutput(figBuf);
@@ -1764,7 +1764,7 @@ void HTMLOnMacro(int macroId, int no_arg
     else
     {
       if (inTabular)
-        TexOutput(_T("\n</CAPTION>\n"));
+        TexOutput(wxT("\n</CAPTION>\n"));
 
       wxChar *topicName = FindTopicName(GetNextChunk());
 
@@ -1778,7 +1778,7 @@ void HTMLOnMacro(int macroId, int no_arg
   }
   case ltSS:
   {
-    if (start) TexOutput(_T("&szlig;"));
+    if (start) TexOutput(wxT("&szlig;"));
     break;
   }
   case ltFIGURE:
@@ -1837,7 +1837,7 @@ static bool CheckTypeRef()
     label.MakeLower();
     TexRef *texRef = FindReference((wxChar*)label.c_str());
 
-    if (texRef && texRef->refFile && wxStrcmp(texRef->refFile, _T("??")) != 0) {
+    if (texRef && texRef->refFile && wxStrcmp(texRef->refFile, wxT("??")) != 0) {
       int a = typeDecl.Find(typeName);
       wxString before = typeDecl.Mid( 0, a );
       wxString after = typeDecl.Mid( a+typeName.Length() );
@@ -1847,9 +1847,9 @@ static bool CheckTypeRef()
        //      after.c_str(),
        //      texRef->refFile,label.c_str());
       TexOutput(before);
-      TexOutput(_T("<A HREF=\""));
+      TexOutput(wxT("<A HREF=\""));
       TexOutput(texRef->refFile);
-      TexOutput(_T("#"));
+      TexOutput(wxT("#"));
       TexOutput(label);
       TexOutput(wxT("\">"));
       TexOutput(typeName);
@@ -1892,42 +1892,42 @@ bool HTMLOnArgument(int macroId, int arg
   case ltFUNC:
   {
     if (start && (arg_no == 1)) {
-      TexOutput(_T("<B>"));
+      TexOutput(wxT("<B>"));
       if( CheckTypeRef() ) {
-       TexOutput(_T("</B> "));
+       TexOutput(wxT("</B> "));
        return false;
       }
     }
 
     if (!start && (arg_no == 1))
-      TexOutput(_T("</B> "));
+      TexOutput(wxT("</B> "));
 
     if (start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("<B>"));
+      if (!suppressNameDecoration) TexOutput(wxT("<B>"));
       currentMember = GetArgChunk();
     }
     if (!start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("</B>"));
+      if (!suppressNameDecoration) TexOutput(wxT("</B>"));
     }
 
     if (start && (arg_no == 3))
-      TexOutput(_T("("));
+      TexOutput(wxT("("));
     if (!start && (arg_no == 3))
-     TexOutput(_T(")"));
+     TexOutput(wxT(")"));
    break;
   }
   case ltCLIPSFUNC:
   {
     if (start && (arg_no == 1))
-      TexOutput(_T("<B>"));
+      TexOutput(wxT("<B>"));
     if (!start && (arg_no == 1))
-      TexOutput(_T("</B> "));
+      TexOutput(wxT("</B> "));
 
     if (start && (arg_no == 2))
     {
-      if (!suppressNameDecoration) TexOutput(_T("( "));
+      if (!suppressNameDecoration) TexOutput(wxT("( "));
       currentMember = GetArgChunk();
     }
     if (!start && (arg_no == 2))
@@ -1935,36 +1935,36 @@ bool HTMLOnArgument(int macroId, int arg
     }
 
     if (!start && (arg_no == 3))
-     TexOutput(_T(")"));
+     TexOutput(wxT(")"));
     break;
   }
   case ltPFUNC:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
 
     if (start && (arg_no == 2))
-      TexOutput(_T("(*"));
+      TexOutput(wxT("(*"));
     if (!start && (arg_no == 2))
-      TexOutput(_T(")"));
+      TexOutput(wxT(")"));
 
     if (start && (arg_no == 2))
       currentMember = GetArgChunk();
 
     if (start && (arg_no == 3))
-      TexOutput(_T("("));
+      TexOutput(wxT("("));
     if (!start && (arg_no == 3))
-      TexOutput(_T(")"));
+      TexOutput(wxT(")"));
     break;
   }
   case ltPARAM:
   case ltCPARAM:
   {
     const wxChar* pend = macroId == ltCPARAM ?
-       _T("</B> ") : _T("</B>");
+       wxT("</B> ") : wxT("</B>");
     if( arg_no == 1) {
       if( start ) {
-       TexOutput(_T("<B>"));
+       TexOutput(wxT("<B>"));
        if( CheckTypeRef() ) {
          TexOutput(pend);
          return false;
@@ -1975,18 +1975,18 @@ bool HTMLOnArgument(int macroId, int arg
     }
     if (start && (arg_no == 2))
     {
-      TexOutput(_T("<I>"));
+      TexOutput(wxT("<I>"));
     }
     if (!start && (arg_no == 2))
     {
-      TexOutput(_T("</I>"));
+      TexOutput(wxT("</I>"));
     }
     break;
   }
   case ltMEMBER:
   {
     if (!start && (arg_no == 1))
-      TexOutput(_T(" "));
+      TexOutput(wxT(" "));
 
     if (start && (arg_no == 2))
       currentMember = GetArgChunk();
@@ -2030,14 +2030,14 @@ bool HTMLOnArgument(int macroId, int arg
       if (start)
       {
         TexChunk *ref = GetArgChunk();
-        TexOutput(_T("<A HREF=\""));
+        TexOutput(wxT("<A HREF=\""));
         inVerbatim = true;
         TraverseChildrenFromChunk(ref);
         inVerbatim = false;
-        TexOutput(_T("\">"));
+        TexOutput(wxT("\">"));
         if (helpRefText)
           TraverseChildrenFromChunk(helpRefText);
-        TexOutput(_T("</A>"));
+        TexOutput(wxT("</A>"));
       }
       return false;
     }
@@ -2072,16 +2072,16 @@ bool HTMLOnArgument(int macroId, int arg
           TexRef *texRef = FindReference(refName);
           if (texRef)
           {
-            if (texRef->refFile && wxStrcmp(texRef->refFile, _T("??")) != 0)
+            if (texRef->refFile && wxStrcmp(texRef->refFile, wxT("??")) != 0)
               refFilename = texRef->refFile;
 
-            TexOutput(_T("<A HREF=\""));
+            TexOutput(wxT("<A HREF=\""));
             // If a filename is supplied, use it, otherwise try to
             // use the filename associated with the reference (from this document).
             if (helpRefFilename)
             {
               TraverseChildrenFromChunk(helpRefFilename);
-              TexOutput(_T("#"));
+              TexOutput(wxT("#"));
               TexOutput(refName);
             }
             else if (refFilename)
@@ -2089,33 +2089,33 @@ bool HTMLOnArgument(int macroId, int arg
               TexOutput(ConvertCase(refFilename));
               if(!PrimaryAnchorOfTheFile(texRef->refFile, refName))
               {
-                TexOutput(_T("#"));
+                TexOutput(wxT("#"));
                 TexOutput(refName);
               }
             }
-            TexOutput(_T("\">"));
+            TexOutput(wxT("\">"));
             if (helpRefText)
               TraverseChildrenFromChunk(helpRefText);
-            TexOutput(_T("</A>"));
+            TexOutput(wxT("</A>"));
           }
           else
           {
             if (helpRefText)
               TraverseChildrenFromChunk(helpRefText);
             if (!ignoreBadRefs)
-              TexOutput(_T(" (REF NOT FOUND)"));
+              TexOutput(wxT(" (REF NOT FOUND)"));
 
             // for launching twice do not warn in preparation pass
             if ((passNumber == 1 && !runTwice) ||
                 (passNumber == 2 && runTwice))
             {
               wxString errBuf;
-              errBuf.Printf(_T("Warning: unresolved reference '%s'"), refName);
+              errBuf.Printf(wxT("Warning: unresolved reference '%s'"), refName);
               OnInform((wxChar *)errBuf.c_str());
             }
           }
         }
-        else TexOutput(_T("??"));
+        else TexOutput(wxT("??"));
       }
       return false;
     }
@@ -2130,11 +2130,11 @@ bool HTMLOnArgument(int macroId, int arg
     {
       if (start)
       {
-        wxChar *alignment = _T("");
+        wxChar *alignment = wxT("");
         if (macroId == ltIMAGEL)
-          alignment = _T(" align=left");
+          alignment = wxT(" align=left");
         else if  (macroId == ltIMAGER)
-          alignment = _T(" align=right");
+          alignment = wxT(" align=right");
 
         // Try to find an XBM or GIF image first.
         wxChar *filename = copystring(GetArgData());
@@ -2142,34 +2142,34 @@ bool HTMLOnArgument(int macroId, int arg
 
         wxStrcpy(buf, filename);
         StripExtension(buf);
-        wxStrcat(buf, _T(".xbm"));
+        wxStrcat(buf, wxT(".xbm"));
         wxString f = TexPathList.FindValidPath(buf);
 
-        if (f == _T("")) // Try for a GIF instead
+        if (f == wxT("")) // Try for a GIF instead
         {
           wxStrcpy(buf, filename);
           StripExtension(buf);
-          wxStrcat(buf, _T(".gif"));
+          wxStrcat(buf, wxT(".gif"));
           f = TexPathList.FindValidPath(buf);
         }
 
-        if (f == _T("")) // Try for a JPEG instead
+        if (f == wxT("")) // Try for a JPEG instead
         {
           wxStrcpy(buf, filename);
           StripExtension(buf);
-          wxStrcat(buf, _T(".jpg"));
+          wxStrcat(buf, wxT(".jpg"));
           f = TexPathList.FindValidPath(buf);
         }
 
-        if (f == _T("")) // Try for a PNG instead
+        if (f == wxT("")) // Try for a PNG instead
         {
           wxStrcpy(buf, filename);
           StripExtension(buf);
-          wxStrcat(buf, _T(".png"));
+          wxStrcat(buf, wxT(".png"));
           f = TexPathList.FindValidPath(buf);
         }
 
-        if (f != _T(""))
+        if (f != wxT(""))
         {
           wxChar *inlineFilename = copystring(f);
 #if 0
@@ -2178,33 +2178,33 @@ bool HTMLOnArgument(int macroId, int arg
           // image point to the original file (could be PS, for example)
           if (originalFilename && (wxStrcmp(inlineFilename, originalFilename) != 0))
           {
-            TexOutput(_T("<A HREF=\""));
+            TexOutput(wxT("<A HREF=\""));
             TexOutput(ConvertCase(originalFilename));
-            TexOutput(_T("\">"));
-            TexOutput(_T("<img src=\""));
+            TexOutput(wxT("\">"));
+            TexOutput(wxT("<img src=\""));
             TexOutput(ConvertCase(wxFileNameFromPath(inlineFilename)));
-            TexOutput(_T("\""));
+            TexOutput(wxT("\""));
             TexOutput(alignment);
-            TexOutput(_T("></A>"));
+            TexOutput(wxT("></A>"));
           }
           else
 #endif
           {
-            TexOutput(_T("<img src=\""));
+            TexOutput(wxT("<img src=\""));
             TexOutput(ConvertCase(wxFileNameFromPath(inlineFilename)));
-            TexOutput(_T("\""));
+            TexOutput(wxT("\""));
             TexOutput(alignment);
-            TexOutput(_T(">"));
+            TexOutput(wxT(">"));
             delete[] inlineFilename;
           }
         }
         else
         {
           // Last resort - a link to a PS file.
-          TexOutput(_T("<A HREF=\""));
+          TexOutput(wxT("<A HREF=\""));
           TexOutput(ConvertCase(wxFileNameFromPath(filename)));
-          TexOutput(_T("\">Picture</A>\n"));
-          wxSnprintf(buf, sizeof(buf), _T("Warning: could not find an inline XBM/GIF for %s."), filename);
+          TexOutput(wxT("\">Picture</A>\n"));
+          wxSnprintf(buf, sizeof(buf), wxT("Warning: could not find an inline XBM/GIF for %s."), filename);
           OnInform(buf);
         }
       }
@@ -2223,20 +2223,20 @@ bool HTMLOnArgument(int macroId, int arg
 
       wxStrcpy(buf, filename);
       StripExtension(buf);
-      wxStrcat(buf, _T(".xbm"));
+      wxStrcat(buf, wxT(".xbm"));
       wxString f = TexPathList.FindValidPath(buf);
 
-      if (f == _T("")) // Try for a GIF instead
+      if (f == wxT("")) // Try for a GIF instead
       {
         wxStrcpy(buf, filename);
         StripExtension(buf);
-        wxStrcat(buf, _T(".gif"));
+        wxStrcat(buf, wxT(".gif"));
         f = TexPathList.FindValidPath(buf);
       }
-      if (f == _T(""))
+      if (f == wxT(""))
       {
         wxChar buf[300];
-        wxSnprintf(buf, sizeof(buf), _T("Warning: could not find an inline XBM/GIF for %s."), filename);
+        wxSnprintf(buf, sizeof(buf), wxT("Warning: could not find an inline XBM/GIF for %s."), filename);
         OnInform(buf);
       }
       delete[] filename;
@@ -2257,25 +2257,25 @@ bool HTMLOnArgument(int macroId, int arg
         wxChar buf[256];
         wxStrcpy(buf, imageFile);
         StripExtension(buf);
-        wxStrcat(buf, _T(".shg"));
+        wxStrcat(buf, wxT(".shg"));
         wxString f = TexPathList.FindValidPath(buf);
 
-        if (f != _T(""))
+        if (f != wxT(""))
         {
           // The default HTML file to go to is THIS file (so a no-op)
           SHGToMap((wxChar *)f.c_str(), currentFileName);
         }
 
         wxChar *mapName = GetArgData();
-        TexOutput(_T("<A HREF=\"/cgi-bin/imagemap/"));
+        TexOutput(wxT("<A HREF=\"/cgi-bin/imagemap/"));
         if (mapName)
           TexOutput(mapName);
         else
-          TexOutput(_T("unknown"));
-        TexOutput(_T("\">"));
-        TexOutput(_T("<img src=\""));
+          TexOutput(wxT("unknown"));
+        TexOutput(wxT("\">"));
+        TexOutput(wxT("<img src=\""));
         TexOutput(ConvertCase(wxFileNameFromPath(imageFile)));
-        TexOutput(_T("\" ISMAP></A><P>"));
+        TexOutput(wxT("\" ISMAP></A><P>"));
         delete[] imageFile;
         imageFile = NULL;
       }
@@ -2305,9 +2305,9 @@ bool HTMLOnArgument(int macroId, int arg
   {
 /*
     if (start && (arg_no == 1))
-      TexOutput(_T("\n<DT> "));
+      TexOutput(wxT("\n<DT> "));
     if (start && (arg_no == 2))
-      TexOutput(_T("<DD> "));
+      TexOutput(wxT("<DD> "));
 */
     if (arg_no == 1)
     {
@@ -2316,16 +2316,16 @@ bool HTMLOnArgument(int macroId, int arg
         if (TwoColWidthA > -1)
         {
           wxChar buf[100];
-          wxSnprintf(buf, sizeof(buf), _T("\n<TR><TD VALIGN=TOP WIDTH=%d>\n"),TwoColWidthA);
+          wxSnprintf(buf, sizeof(buf), wxT("\n<TR><TD VALIGN=TOP WIDTH=%d>\n"),TwoColWidthA);
           TexOutput(buf);
         }
         else
         {
-          TexOutput(_T("\n<TR><TD VALIGN=TOP>\n"));
+          TexOutput(wxT("\n<TR><TD VALIGN=TOP>\n"));
         }
         OutputFont();
       }  else
-            TexOutput(_T("\n</FONT></TD>\n"));
+            TexOutput(wxT("\n</FONT></TD>\n"));
     }
     if (arg_no == 2)
     {
@@ -2335,16 +2335,16 @@ bool HTMLOnArgument(int macroId, int arg
         if (TwoColWidthB > -1)
         {
           wxChar buf[100];
-          wxSnprintf(buf, sizeof(buf), _T("\n<TD VALIGN=TOP WIDTH=%d>\n"),TwoColWidthB);
+          wxSnprintf(buf, sizeof(buf), wxT("\n<TD VALIGN=TOP WIDTH=%d>\n"),TwoColWidthB);
           TexOutput(buf);
         }
         else
         {
-          TexOutput(_T("\n<TD VALIGN=TOP>\n"));
+          TexOutput(wxT("\n<TD VALIGN=TOP>\n"));
         }
         OutputFont();
       }  else
-           TexOutput(_T("\n</FONT></TD></TR>\n"));
+           TexOutput(wxT("\n</FONT></TD></TR>\n"));
     }
     return true;
   }
@@ -2352,10 +2352,10 @@ bool HTMLOnArgument(int macroId, int arg
   {
     if (arg_no == 1 && start)
     {
-      TexOutput(_T("\n<DT> "));
+      TexOutput(wxT("\n<DT> "));
     }
     if (arg_no == 2 && !start)
-      TexOutput(_T("<P>\n"));
+      TexOutput(wxT("<P>\n"));
     break;
   }
   case ltBIBITEM:
@@ -2368,17 +2368,17 @@ bool HTMLOnArgument(int macroId, int arg
       if (ref)
       {
         if (ref->sectionNumber) delete[] ref->sectionNumber;
-        wxSnprintf(buf, sizeof(buf), _T("[%d]"), citeCount);
+        wxSnprintf(buf, sizeof(buf), wxT("[%d]"), citeCount);
         ref->sectionNumber = copystring(buf);
       }
 
-      wxSnprintf(buf, sizeof(buf), _T("\n<DT> [%d] "), citeCount);
+      wxSnprintf(buf, sizeof(buf), wxT("\n<DT> [%d] "), citeCount);
       TexOutput(buf);
       citeCount ++;
       return false;
     }
     if (arg_no == 2 && !start)
-      TexOutput(_T("<P>\n"));
+      TexOutput(wxT("<P>\n"));
     return true;
   }
   case ltMARGINPAR:
@@ -2389,11 +2389,11 @@ bool HTMLOnArgument(int macroId, int arg
   {
     if (start)
     {
-      TexOutput(_T("<HR>\n"));
+      TexOutput(wxT("<HR>\n"));
       return true;
     }
     else
-      TexOutput(_T("<HR><P>\n"));
+      TexOutput(wxT("<HR><P>\n"));
     break;
   }
   // DHS
@@ -2432,34 +2432,34 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("&agrave;"));
+           TexOutput(wxT("&agrave;"));
            break;
           case 'e':
-           TexOutput(_T("&egrave;"));
+           TexOutput(wxT("&egrave;"));
            break;
           case 'i':
-           TexOutput(_T("&igrave;"));
+           TexOutput(wxT("&igrave;"));
            break;
           case 'o':
-           TexOutput(_T("&ograve;"));
+           TexOutput(wxT("&ograve;"));
            break;
           case 'u':
-           TexOutput(_T("&ugrave;"));
+           TexOutput(wxT("&ugrave;"));
            break;
           case 'A':
-           TexOutput(_T("&Agrave;"));
+           TexOutput(wxT("&Agrave;"));
            break;
           case 'E':
-           TexOutput(_T("&Egrave;"));
+           TexOutput(wxT("&Egrave;"));
            break;
           case 'I':
-           TexOutput(_T("&Igrave;"));
+           TexOutput(wxT("&Igrave;"));
            break;
           case 'O':
-           TexOutput(_T("&Ograve;"));
+           TexOutput(wxT("&Ograve;"));
            break;
           case 'U':
-           TexOutput(_T("&Igrave;"));
+           TexOutput(wxT("&Igrave;"));
            break;
           default:
            break;
@@ -2478,40 +2478,40 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("&aacute;"));
+           TexOutput(wxT("&aacute;"));
            break;
           case 'e':
-           TexOutput(_T("&eacute;"));
+           TexOutput(wxT("&eacute;"));
            break;
           case 'i':
-           TexOutput(_T("&iacute;"));
+           TexOutput(wxT("&iacute;"));
            break;
           case 'o':
-           TexOutput(_T("&oacute;"));
+           TexOutput(wxT("&oacute;"));
            break;
           case 'u':
-           TexOutput(_T("&uacute;"));
+           TexOutput(wxT("&uacute;"));
            break;
           case 'y':
-           TexOutput(_T("&yacute;"));
+           TexOutput(wxT("&yacute;"));
            break;
           case 'A':
-           TexOutput(_T("&Aacute;"));
+           TexOutput(wxT("&Aacute;"));
            break;
           case 'E':
-           TexOutput(_T("&Eacute;"));
+           TexOutput(wxT("&Eacute;"));
            break;
           case 'I':
-           TexOutput(_T("&Iacute;"));
+           TexOutput(wxT("&Iacute;"));
            break;
           case 'O':
-           TexOutput(_T("&Oacute;"));
+           TexOutput(wxT("&Oacute;"));
            break;
           case 'U':
-           TexOutput(_T("&Uacute;"));
+           TexOutput(wxT("&Uacute;"));
            break;
           case 'Y':
-           TexOutput(_T("&Yacute;"));
+           TexOutput(wxT("&Yacute;"));
            break;
           default:
            break;
@@ -2530,34 +2530,34 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("&acirc;"));
+           TexOutput(wxT("&acirc;"));
            break;
           case 'e':
-           TexOutput(_T("&ecirc;"));
+           TexOutput(wxT("&ecirc;"));
            break;
           case 'i':
-           TexOutput(_T("&icirc;"));
+           TexOutput(wxT("&icirc;"));
            break;
           case 'o':
-           TexOutput(_T("&ocirc;"));
+           TexOutput(wxT("&ocirc;"));
            break;
           case 'u':
-           TexOutput(_T("&ucirc;"));
+           TexOutput(wxT("&ucirc;"));
            break;
           case 'A':
-           TexOutput(_T("&Acirc;"));
+           TexOutput(wxT("&Acirc;"));
            break;
           case 'E':
-           TexOutput(_T("&Ecirc;"));
+           TexOutput(wxT("&Ecirc;"));
            break;
           case 'I':
-           TexOutput(_T("&Icirc;"));
+           TexOutput(wxT("&Icirc;"));
            break;
           case 'O':
-           TexOutput(_T("&Ocirc;"));
+           TexOutput(wxT("&Ocirc;"));
            break;
           case 'U':
-           TexOutput(_T("&Icirc;"));
+           TexOutput(wxT("&Icirc;"));
            break;
           default:
            break;
@@ -2576,25 +2576,25 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case ' ':
-           TexOutput(_T("~"));
+           TexOutput(wxT("~"));
            break;
           case 'a':
-           TexOutput(_T("&atilde;"));
+           TexOutput(wxT("&atilde;"));
            break;
           case 'n':
-           TexOutput(_T("&ntilde;"));
+           TexOutput(wxT("&ntilde;"));
            break;
           case 'o':
-           TexOutput(_T("&otilde;"));
+           TexOutput(wxT("&otilde;"));
            break;
           case 'A':
-           TexOutput(_T("&Atilde;"));
+           TexOutput(wxT("&Atilde;"));
            break;
           case 'N':
-           TexOutput(_T("&Ntilde;"));
+           TexOutput(wxT("&Ntilde;"));
            break;
           case 'O':
-           TexOutput(_T("&Otilde;"));
+           TexOutput(wxT("&Otilde;"));
            break;
           default:
            break;
@@ -2613,40 +2613,40 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("&auml;"));
+           TexOutput(wxT("&auml;"));
            break;
           case 'e':
-           TexOutput(_T("&euml;"));
+           TexOutput(wxT("&euml;"));
            break;
           case 'i':
-           TexOutput(_T("&iuml;"));
+           TexOutput(wxT("&iuml;"));
            break;
           case 'o':
-           TexOutput(_T("&ouml;"));
+           TexOutput(wxT("&ouml;"));
            break;
           case 'u':
-           TexOutput(_T("&uuml;"));
+           TexOutput(wxT("&uuml;"));
            break;
           case 'y':
-           TexOutput(_T("&yuml;"));
+           TexOutput(wxT("&yuml;"));
            break;
           case 'A':
-           TexOutput(_T("&Auml;"));
+           TexOutput(wxT("&Auml;"));
            break;
           case 'E':
-           TexOutput(_T("&Euml;"));
+           TexOutput(wxT("&Euml;"));
            break;
           case 'I':
-           TexOutput(_T("&Iuml;"));
+           TexOutput(wxT("&Iuml;"));
            break;
           case 'O':
-           TexOutput(_T("&Ouml;"));
+           TexOutput(wxT("&Ouml;"));
            break;
           case 'U':
-           TexOutput(_T("&Uuml;"));
+           TexOutput(wxT("&Uuml;"));
            break;
           case 'Y':
-           TexOutput(_T("&Yuml;"));
+           TexOutput(wxT("&Yuml;"));
            break;
           default:
            break;
@@ -2665,10 +2665,10 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case 'a':
-           TexOutput(_T("&aring;"));
+           TexOutput(wxT("&aring;"));
            break;
           case 'A':
-           TexOutput(_T("&Aring;"));
+           TexOutput(wxT("&Aring;"));
            break;
           default:
            break;
@@ -2782,10 +2782,10 @@ bool HTMLOnArgument(int macroId, int arg
         switch (val[0])
         {
           case 'c':
-           TexOutput(_T("&ccedil;"));
+           TexOutput(wxT("&ccedil;"));
            break;
           case 'C':
-           TexOutput(_T("&Ccedil;"));
+           TexOutput(wxT("&Ccedil;"));
            break;
           default:
            break;
@@ -2821,22 +2821,22 @@ bool HTMLOnArgument(int macroId, int arg
         wxChar *alignString = copystring(GetArgData());
         ParseTableArgument(alignString);
 
-        TexOutput(_T("<TABLE BORDER>\n"));
+        TexOutput(wxT("<TABLE BORDER>\n"));
 
         // Write the first row formatting for compatibility
         // with standard Latex
         if (compatibilityMode)
         {
-          TexOutput(_T("<TR>\n<TD>"));
+          TexOutput(wxT("<TR>\n<TD>"));
           OutputFont();
 /*
           for (int i = 0; i < noColumns; i++)
           {
             currentWidth += TableData[i].width;
-            wxSnprintf(buf, sizeof(buf), _T("\\cellx%d"), currentWidth);
+            wxSnprintf(buf, sizeof(buf), wxT("\\cellx%d"), currentWidth);
             TexOutput(buf);
           }
-          TexOutput(_T("\\pard\\intbl\n"));
+          TexOutput(wxT("\\pard\\intbl\n"));
 */
         }
         delete[] alignString;
@@ -2846,7 +2846,7 @@ bool HTMLOnArgument(int macroId, int arg
     }
     else if (arg_no == 2 && !start)
     {
-      TexOutput(_T("</TABLE>\n"));
+      TexOutput(wxT("</TABLE>\n"));
       inTabular = false;
     }
     break;
@@ -2855,9 +2855,9 @@ bool HTMLOnArgument(int macroId, int arg
   {
     if (start && (arg_no == 1))
     {
-      ReopenFile(&Chapters, &ChaptersName, _T("bibliography"));
-      AddTexRef(_T("bibliography"), ChaptersName, _T("bibliography"));
-      SetCurrentSubsectionName(_T("bibliography"), ChaptersName);
+      ReopenFile(&Chapters, &ChaptersName, wxT("bibliography"));
+      AddTexRef(wxT("bibliography"), ChaptersName, wxT("bibliography"));
+      SetCurrentSubsectionName(wxT("bibliography"), ChaptersName);
 
       citeCount = 1;
 
@@ -2865,29 +2865,29 @@ bool HTMLOnArgument(int macroId, int arg
 
       wxChar titleBuf[150];
       if (truncateFilenames)
-        wxSnprintf(titleBuf, sizeof(titleBuf), _T("%s.htm"), wxFileNameFromPath(FileRoot));
+        wxSnprintf(titleBuf, sizeof(titleBuf), wxT("%s.htm"), wxFileNameFromPath(FileRoot));
       else
-        wxSnprintf(titleBuf, sizeof(titleBuf), _T("%s_contents.html"), wxFileNameFromPath(FileRoot));
+        wxSnprintf(titleBuf, sizeof(titleBuf), wxT("%s_contents.html"), wxFileNameFromPath(FileRoot));
 
       HTMLHead();
-      TexOutput(_T("<title>"));
+      TexOutput(wxT("<title>"));
       TexOutput(ReferencesNameString);
-      TexOutput(_T("</title></head>\n"));
+      TexOutput(wxT("</title></head>\n"));
       OutputBodyStart();
 
-      wxFprintf(Chapters, _T("<A NAME=\"%s\">\n<H2>%s"), _T("bibliography"), ReferencesNameString);
-      AddBrowseButtons(_T("contents"), titleBuf, // Up
+      wxFprintf(Chapters, wxT("<A NAME=\"%s\">\n<H2>%s"), wxT("bibliography"), ReferencesNameString);
+      AddBrowseButtons(wxT("contents"), titleBuf, // Up
                        lastTopic, lastFileName,  // Last topic
-                       _T("bibliography"), ChaptersName); // This topic
+                       wxT("bibliography"), ChaptersName); // This topic
 
       SetCurrentOutputs(Contents, Chapters);
-      if(PrimaryAnchorOfTheFile(ChaptersName, _T("bibliography")))
-        wxFprintf(Contents, _T("\n<LI><A HREF=\"%s\">"), ConvertCase(ChaptersName));
+      if(PrimaryAnchorOfTheFile(ChaptersName, wxT("bibliography")))
+        wxFprintf(Contents, wxT("\n<LI><A HREF=\"%s\">"), ConvertCase(ChaptersName));
       else
-        wxFprintf(Contents, _T("\n<LI><A HREF=\"%s#%s\">"), ConvertCase(ChaptersName), _T("bibliography"));
+        wxFprintf(Contents, wxT("\n<LI><A HREF=\"%s#%s\">"), ConvertCase(ChaptersName), wxT("bibliography"));
 
-      wxFprintf(Contents, _T("%s</A>\n"), ReferencesNameString);
-      wxFprintf(Chapters, _T("</H2>\n</A>\n"));
+      wxFprintf(Contents, wxT("%s</A>\n"), ReferencesNameString);
+      wxFprintf(Chapters, wxT("</H2>\n</A>\n"));
 
       SetCurrentOutput(Chapters);
       return false;
@@ -2925,14 +2925,14 @@ bool HTMLOnArgument(int macroId, int arg
           wxChar buf2[10];
           if (!FindColourHTMLString(name, buf2))
           {
-            wxStrcpy(buf2, _T("#000000"));
+            wxStrcpy(buf2, wxT("#000000"));
             wxChar buf[100];
-            wxSnprintf(buf, sizeof(buf), _T("Could not find colour name %s"), name);
+            wxSnprintf(buf, sizeof(buf), wxT("Could not find colour name %s"), name);
             OnError(buf);
           }
-          TexOutput(_T("<FONT COLOR=\""));
+          TexOutput(wxT("<FONT COLOR=\""));
           TexOutput(buf2);
-          TexOutput(_T("\">"));
+          TexOutput(wxT("\">"));
           break;
         }
         case 2:
@@ -2945,7 +2945,7 @@ bool HTMLOnArgument(int macroId, int arg
     }
     else
     {
-      if (arg_no == 2) TexOutput(_T("</FONT>"));
+      if (arg_no == 2) TexOutput(wxT("</FONT>"));
     }
     return false;
   }
@@ -3044,86 +3044,86 @@ bool HTMLGo(void)
 
         wxChar buf[300];
         if (truncateFilenames)
-            wxSnprintf(buf, WXSIZEOF(buf), _T("%s.htm"), FileRoot);
+            wxSnprintf(buf, WXSIZEOF(buf), wxT("%s.htm"), FileRoot);
         else
-            wxSnprintf(buf, WXSIZEOF(buf), _T("%s_contents.html"), FileRoot);
+            wxSnprintf(buf, WXSIZEOF(buf), wxT("%s_contents.html"), FileRoot);
         if (TitlepageName) delete[] TitlepageName;
         TitlepageName = copystring(buf);
-        Titlepage = wxFopen(buf, _T("w"));
+        Titlepage = wxFopen(buf, wxT("w"));
 
         if (truncateFilenames)
-            wxSnprintf(buf, WXSIZEOF(buf), _T("%s_fc.htm"), FileRoot);
+            wxSnprintf(buf, WXSIZEOF(buf), wxT("%s_fc.htm"), FileRoot);
         else
-            wxSnprintf(buf, WXSIZEOF(buf), _T("%s_fcontents.html"), FileRoot);
+            wxSnprintf(buf, WXSIZEOF(buf), wxT("%s_fcontents.html"), FileRoot);
 
         contentsFrameName = copystring(buf);
 
-        Contents = wxFopen(TmpContentsName, _T("w"));
+        Contents = wxFopen(TmpContentsName, wxT("w"));
 
         if (htmlFrameContents)
         {
-//          FrameContents = wxFopen(TmpFrameContentsName, _T("w"));
-            FrameContents = wxFopen(contentsFrameName, _T("w"));
-            wxFprintf(FrameContents, _T("<HTML>\n<UL>\n"));
+//          FrameContents = wxFopen(TmpFrameContentsName, wxT("w"));
+            FrameContents = wxFopen(contentsFrameName, wxT("w"));
+            wxFprintf(FrameContents, wxT("<HTML>\n<UL>\n"));
         }
 
         if (!Titlepage || !Contents)
         {
-            OnError(_T("Cannot open output file!"));
+            OnError(wxT("Cannot open output file!"));
             return false;
         }
-        AddTexRef(_T("contents"), wxFileNameFromPath(TitlepageName), ContentsNameString);
+        AddTexRef(wxT("contents"), wxFileNameFromPath(TitlepageName), ContentsNameString);
 
-        wxFprintf(Contents, _T("<P><P><H2>%s</H2><P><P>\n"), ContentsNameString);
+        wxFprintf(Contents, wxT("<P><P><H2>%s</H2><P><P>\n"), ContentsNameString);
 
-        wxFprintf(Contents, _T("<UL>\n"));
+        wxFprintf(Contents, wxT("<UL>\n"));
 
         SetCurrentOutput(Titlepage);
         if (htmlWorkshopFiles) HTMLWorkshopStartContents();
-        OnInform(_T("Converting..."));
+        OnInform(wxT("Converting..."));
 
         TraverseDocument();
-        wxFprintf(Contents, _T("</UL>\n\n"));
+        wxFprintf(Contents, wxT("</UL>\n\n"));
 
 //        SetCurrentOutput(Titlepage);
         fclose(Titlepage);
 
         if (Contents)
         {
-//            wxFprintf(Titlepage, _T("\n</BODY></HTML>\n"));
+//            wxFprintf(Titlepage, wxT("\n</BODY></HTML>\n"));
             fclose(Contents);
             Contents = NULL;
         }
 
         if (FrameContents)
         {
-            wxFprintf(FrameContents, _T("\n</UL>\n"));
-            wxFprintf(FrameContents, _T("</HTML>\n"));
+            wxFprintf(FrameContents, wxT("\n</UL>\n"));
+            wxFprintf(FrameContents, wxT("</HTML>\n"));
             fclose(FrameContents);
             FrameContents = NULL;
         }
 
         if (Chapters)
         {
-            wxFprintf(Chapters, _T("\n</FONT></BODY></HTML>\n"));
+            wxFprintf(Chapters, wxT("\n</FONT></BODY></HTML>\n"));
             fclose(Chapters);
             Chapters = NULL;
         }
         if (Sections)
         {
-            wxFprintf(Sections, _T("\n</FONT></BODY></HTML>\n"));
+            wxFprintf(Sections, wxT("\n</FONT></BODY></HTML>\n"));
             fclose(Sections);
             Sections = NULL;
         }
         if (Subsections && !combineSubSections)
         {
-            wxFprintf(Subsections, _T("\n</FONT></BODY></HTML>\n"));
+            wxFprintf(Subsections, wxT("\n</FONT></BODY></HTML>\n"));
             fclose(Subsections);
             Subsections = NULL;
         }
         if (Subsubsections && !combineSubSections)
         {
-            wxFprintf(Subsubsections, _T("\n</FONT></BODY></HTML>\n"));
+            wxFprintf(Subsubsections, wxT("\n</FONT></BODY></HTML>\n"));
             fclose(Subsubsections);
             Subsubsections = NULL;
         }
@@ -3138,25 +3138,25 @@ bool HTMLGo(void)
         // This is necessary in order to put the title of the document
         // at the TOP of the file within <HEAD>, even though we only find out
         // what it is later on.
-        FILE *tmpTitle = wxFopen(_T("title.tmp"), _T("w"));
+        FILE *tmpTitle = wxFopen(wxT("title.tmp"), wxT("w"));
         if (tmpTitle)
         {
             if (DocumentTitle)
             {
                 SetCurrentOutput(tmpTitle);
                 HTMLHead();
-                TexOutput(_T("\n<TITLE>"));
+                TexOutput(wxT("\n<TITLE>"));
                 TraverseChildrenFromChunk(DocumentTitle);
-                TexOutput(_T("</TITLE></HEAD>\n"));
+                TexOutput(wxT("</TITLE></HEAD>\n"));
             }
             else
             {
                 SetCurrentOutput(tmpTitle);
                 HTMLHeadTo(tmpTitle);
                 if (contentsString)
-                    wxFprintf(tmpTitle, _T("<TITLE>%s</TITLE></HEAD>\n\n"), contentsString);
+                    wxFprintf(tmpTitle, wxT("<TITLE>%s</TITLE></HEAD>\n\n"), contentsString);
                 else
-                    wxFprintf(tmpTitle, _T("<TITLE>%s</TITLE></HEAD>\n\n"), wxFileNameFromPath(FileRoot));
+                    wxFprintf(tmpTitle, wxT("<TITLE>%s</TITLE></HEAD>\n\n"), wxFileNameFromPath(FileRoot));
             }
 
             // Output frame information
@@ -3164,17 +3164,17 @@ bool HTMLGo(void)
             {
                 wxChar firstFileName[300];
                 if (truncateFilenames)
-                    wxSnprintf(firstFileName, sizeof(firstFileName), _T("%s1.htm"), FileRoot);
+                    wxSnprintf(firstFileName, sizeof(firstFileName), wxT("%s1.htm"), FileRoot);
                 else
                     wxStrcpy(firstFileName, gs_filenames[1].c_str());
 
-                wxFprintf(tmpTitle, _T("<FRAMESET COLS=\"30%%,70%%\">\n"));
+                wxFprintf(tmpTitle, wxT("<FRAMESET COLS=\"30%%,70%%\">\n"));
 
-                wxFprintf(tmpTitle, _T("<FRAME SRC=\"%s\">\n"), ConvertCase(wxFileNameFromPath(contentsFrameName)));
-                wxFprintf(tmpTitle, _T("<FRAME SRC=\"%s\" NAME=\"mainwindow\">\n"), ConvertCase(wxFileNameFromPath(firstFileName)));
-                wxFprintf(tmpTitle, _T("</FRAMESET>\n"));
+                wxFprintf(tmpTitle, wxT("<FRAME SRC=\"%s\">\n"), ConvertCase(wxFileNameFromPath(contentsFrameName)));
+                wxFprintf(tmpTitle, wxT("<FRAME SRC=\"%s\" NAME=\"mainwindow\">\n"), ConvertCase(wxFileNameFromPath(firstFileName)));
+                wxFprintf(tmpTitle, wxT("</FRAMESET>\n"));
 
-                wxFprintf(tmpTitle, _T("<NOFRAMES>\n"));
+                wxFprintf(tmpTitle, wxT("<NOFRAMES>\n"));
             }
 
             // Output <BODY...> to temporary title page
@@ -3182,7 +3182,7 @@ bool HTMLGo(void)
             fflush(tmpTitle);
 
             // Concat titlepage
-            FILE *fd = wxFopen(TitlepageName, _T("r"));
+            FILE *fd = wxFopen(TitlepageName, wxT("r"));
             if (fd)
             {
                 int ch = getc(fd);
@@ -3194,20 +3194,20 @@ bool HTMLGo(void)
                 fclose(fd);
             }
 
-            wxFprintf(tmpTitle, _T("\n</FONT></BODY>\n"));
+            wxFprintf(tmpTitle, wxT("\n</FONT></BODY>\n"));
 
             if (htmlFrameContents)
             {
-                wxFprintf(tmpTitle, _T("\n</NOFRAMES>\n"));
+                wxFprintf(tmpTitle, wxT("\n</NOFRAMES>\n"));
             }
-            wxFprintf(tmpTitle, _T("\n</HTML>\n"));
+            wxFprintf(tmpTitle, wxT("\n</HTML>\n"));
 
             fclose(tmpTitle);
             if (wxFileExists(TitlepageName)) wxRemoveFile(TitlepageName);
-            if (!wxRenameFile(_T("title.tmp"), TitlepageName))
+            if (!wxRenameFile(wxT("title.tmp"), TitlepageName))
             {
-                wxCopyFile(_T("title.tmp"), TitlepageName);
-                wxRemoveFile(_T("title.tmp"));
+                wxCopyFile(wxT("title.tmp"), TitlepageName);
+                wxRemoveFile(wxT("title.tmp"));
             }
         }
 
@@ -3228,7 +3228,7 @@ bool HTMLGo(void)
         if (htmlIndex)
         {
             wxChar htmlIndexName[300];
-            wxSnprintf(htmlIndexName, sizeof(htmlIndexName), _T("%s.htx"), FileRoot);
+            wxSnprintf(htmlIndexName, sizeof(htmlIndexName), wxT("%s.htx"), FileRoot);
             GenerateHTMLIndexFile(htmlIndexName);
         }
 
@@ -3248,7 +3248,7 @@ bool HTMLGo(void)
 // Output .htx index file
 void GenerateHTMLIndexFile(wxChar *fname)
 {
-  FILE *fd = wxFopen(fname, _T("w"));
+  FILE *fd = wxFopen(fname, wxT("w"));
   if (!fd)
     return;
 
@@ -3264,7 +3264,7 @@ void GenerateHTMLIndexFile(wxChar *fname
       while (node1)
       {
         wxChar *s = (wxChar *)node1->GetData();
-        wxFprintf(fd, _T("%s|%s|%s\n"), topicName, texTopic->filename, s);
+        wxFprintf(fd, wxT("%s|%s|%s\n"), topicName, texTopic->filename, s);
         node1 = node1->GetNext();
       }
     }
@@ -3289,18 +3289,18 @@ void GenerateHTMLWorkshopFiles(wxChar *f
 
   /* Generate project file : */
 
-  wxSnprintf(buf, sizeof(buf), _T("%s.hhp"), fname);
-  f = wxFopen(buf, _T("wt"));
+  wxSnprintf(buf, sizeof(buf), wxT("%s.hhp"), fname);
+  f = wxFopen(buf, wxT("wt"));
   wxFprintf(f,
-      _T("[OPTIONS]\n")
-      _T("Compatibility=1.1\n")
-      _T("Full-text search=Yes\n")
-      _T("Contents file=%s.hhc\n")
-      _T("Compiled file=%s.chm\n")
-      _T("Default Window=%sHelp\n")
-      _T("Default topic=%s\n")
-      _T("Index file=%s.hhk\n")
-      _T("Title="),
+      wxT("[OPTIONS]\n")
+      wxT("Compatibility=1.1\n")
+      wxT("Full-text search=Yes\n")
+      wxT("Contents file=%s.hhc\n")
+      wxT("Compiled file=%s.chm\n")
+      wxT("Default Window=%sHelp\n")
+      wxT("Default topic=%s\n")
+      wxT("Index file=%s.hhk\n")
+      wxT("Title="),
       wxFileNameFromPath(fname),
       wxFileNameFromPath(fname),
       wxFileNameFromPath(fname),
@@ -3312,45 +3312,45 @@ void GenerateHTMLWorkshopFiles(wxChar *f
     SetCurrentOutput(f);
     TraverseChildrenFromChunk(DocumentTitle);
   }
-  else wxFprintf(f, _T("(unknown)"));
+  else wxFprintf(f, wxT("(unknown)"));
 
-  wxFprintf(f, _T("\n\n[WINDOWS]\n")
-          _T("%sHelp=,\"%s.hhc\",\"%s.hhk\",\"%s\",,,,,,0x2420,,0x380e,,,,,0,,,"),
+  wxFprintf(f, wxT("\n\n[WINDOWS]\n")
+          wxT("%sHelp=,\"%s.hhc\",\"%s.hhk\",\"%s\",,,,,,0x2420,,0x380e,,,,,0,,,"),
           wxFileNameFromPath(fname),
           wxFileNameFromPath(fname),
           wxFileNameFromPath(fname),
           wxFileNameFromPath(TitlepageName));
 
 
-  wxFprintf(f, _T("\n\n[FILES]\n"));
-  wxFprintf(f, _T("%s\n"), wxFileNameFromPath(TitlepageName));
+  wxFprintf(f, wxT("\n\n[FILES]\n"));
+  wxFprintf(f, wxT("%s\n"), wxFileNameFromPath(TitlepageName));
   for (int i = 1; i <= fileId; i++) {
     if (truncateFilenames)
-      wxSnprintf(buf, sizeof(buf), _T("%s%d.htm"), wxFileNameFromPath(FileRoot), i);
+      wxSnprintf(buf, sizeof(buf), wxT("%s%d.htm"), wxFileNameFromPath(FileRoot), i);
     else
       wxStrcpy(buf, wxFileNameFromPath(gs_filenames[i].c_str()));
-    wxFprintf(f, _T("%s\n"), buf);
+    wxFprintf(f, wxT("%s\n"), buf);
   }
   fclose(f);
 
   /* Generate index file : */
 
-  wxSnprintf(buf, sizeof(buf), _T("%s.hhk"), fname);
-  f = wxFopen(buf, _T("wt"));
+  wxSnprintf(buf, sizeof(buf), wxT("%s.hhk"), fname);
+  f = wxFopen(buf, wxT("wt"));
 
   wxFprintf(f,
-      _T("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n")
-      _T("<HTML>\n"));
+      wxT("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n")
+      wxT("<HTML>\n"));
   HTMLHeadTo(f);
   wxFprintf(f,
-      _T("\n")
-      _T("<meta name=\"GENERATOR\" content=\"tex2rtf\">\n")
-      _T("<!-- Sitemap 1.0 -->\n")
-      _T("</HEAD><BODY>\n")
-      _T("<OBJECT type=\"text/site properties\">\n")
-      _T(" <param name=\"ImageType\" value=\"Folder\">\n")
-      _T("</OBJECT>\n")
-      _T("<UL>\n"));
+      wxT("\n")
+      wxT("<meta name=\"GENERATOR\" content=\"tex2rtf\">\n")
+      wxT("<!-- Sitemap 1.0 -->\n")
+      wxT("</HEAD><BODY>\n")
+      wxT("<OBJECT type=\"text/site properties\">\n")
+      wxT(" <param name=\"ImageType\" value=\"Folder\">\n")
+      wxT("</OBJECT>\n")
+      wxT("<UL>\n"));
 
   TopicTable.BeginFind();
   wxHashTable::Node *node = TopicTable.Next();
@@ -3365,10 +3365,10 @@ void GenerateHTMLWorkshopFiles(wxChar *f
       {
         wxChar *s = (wxChar *)node1->GetData();
         wxFprintf(f,
-            _T(" <LI> <OBJECT type=\"text/sitemap\">\n")
-            _T("  <param name=\"Local\" value=\"%s#%s\">\n")
-            _T("  <param name=\"Name\" value=\"%s\">\n")
-            _T("  </OBJECT>\n"),
+            wxT(" <LI> <OBJECT type=\"text/sitemap\">\n")
+            wxT("  <param name=\"Local\" value=\"%s#%s\">\n")
+            wxT("  <param name=\"Name\" value=\"%s\">\n")
+            wxT("  </OBJECT>\n"),
         texTopic->filename, topicName, s);
         node1 = node1->GetNext();
       }
@@ -3376,7 +3376,7 @@ void GenerateHTMLWorkshopFiles(wxChar *f
     node = TopicTable.Next();
   }
 
-  wxFprintf(f, _T("</UL>\n"));
+  wxFprintf(f, wxT("</UL>\n"));
   fclose(f);
 }
 
@@ -3391,21 +3391,21 @@ void HTMLWorkshopAddToContents(int level
 
   if (level > HTMLWorkshopLastLevel)
     for (i = HTMLWorkshopLastLevel; i < level; i++)
-      wxFprintf(HTMLWorkshopContents, _T("<UL>"));
+      wxFprintf(HTMLWorkshopContents, wxT("<UL>"));
   if (level < HTMLWorkshopLastLevel)
     for (i = level; i < HTMLWorkshopLastLevel; i++)
-      wxFprintf(HTMLWorkshopContents, _T("</UL>"));
+      wxFprintf(HTMLWorkshopContents, wxT("</UL>"));
 
   SetCurrentOutput(HTMLWorkshopContents);
   wxFprintf(HTMLWorkshopContents,
-            _T(" <LI> <OBJECT type=\"text/sitemap\">\n")
-            _T("  <param name=\"Local\" value=\"%s#%s\">\n")
-            _T("  <param name=\"Name\" value=\""),
+            wxT(" <LI> <OBJECT type=\"text/sitemap\">\n")
+            wxT("  <param name=\"Local\" value=\"%s#%s\">\n")
+            wxT("  <param name=\"Name\" value=\""),
             file, s);
   OutputCurrentSection();
   wxFprintf(HTMLWorkshopContents,
-            _T("\">\n")
-            _T("  </OBJECT>\n"));
+            wxT("\">\n")
+            wxT("  </OBJECT>\n"));
   HTMLWorkshopLastLevel = level;
 }
 
@@ -3413,26 +3413,26 @@ void HTMLWorkshopAddToContents(int level
 void HTMLWorkshopStartContents()
 {
   wxChar buf[300];
-  wxSnprintf(buf, sizeof(buf), _T("%s.hhc"), FileRoot);
-  HTMLWorkshopContents = wxFopen(buf, _T("wt"));
+  wxSnprintf(buf, sizeof(buf), wxT("%s.hhc"), FileRoot);
+  HTMLWorkshopContents = wxFopen(buf, wxT("wt"));
   HTMLWorkshopLastLevel = 0;
 
   wxFprintf(HTMLWorkshopContents,
-      _T("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n")
-      _T("<HTML>\n"));
+      wxT("<!DOCTYPE HTML PUBLIC \"-//IETF//DTD HTML//EN\">\n")
+      wxT("<HTML>\n"));
   HTMLHeadTo(HTMLWorkshopContents);
   wxFprintf(HTMLWorkshopContents,
-      _T("\n")
-      _T("<meta name=\"GENERATOR\" content=\"tex2rtf\">\n")
-      _T("<!-- Sitemap 1.0 -->\n")
-      _T("</HEAD><BODY>\n")
-      _T("<OBJECT type=\"text/site properties\">\n")
-      _T(" <param name=\"ImageType\" value=\"Folder\">\n")
-      _T("</OBJECT>\n")
-      _T("<UL>\n")
-      _T("<LI> <OBJECT type=\"text/sitemap\">\n")
-      _T("<param name=\"Local\" value=\"%s\">\n")
-      _T("<param name=\"Name\" value=\"Contents\">\n</OBJECT>\n"),
+      wxT("\n")
+      wxT("<meta name=\"GENERATOR\" content=\"tex2rtf\">\n")
+      wxT("<!-- Sitemap 1.0 -->\n")
+      wxT("</HEAD><BODY>\n")
+      wxT("<OBJECT type=\"text/site properties\">\n")
+      wxT(" <param name=\"ImageType\" value=\"Folder\">\n")
+      wxT("</OBJECT>\n")
+      wxT("<UL>\n")
+      wxT("<LI> <OBJECT type=\"text/sitemap\">\n")
+      wxT("<param name=\"Local\" value=\"%s\">\n")
+      wxT("<param name=\"Name\" value=\"Contents\">\n</OBJECT>\n"),
       wxFileNameFromPath(TitlepageName)
       );
 
@@ -3442,7 +3442,7 @@ void HTMLWorkshopStartContents()
 void HTMLWorkshopEndContents()
 {
     for (int i = HTMLWorkshopLastLevel; i >= 0; i--)
-        wxFprintf(HTMLWorkshopContents, _T("</UL>\n"));
+        wxFprintf(HTMLWorkshopContents, wxT("</UL>\n"));
     fclose(HTMLWorkshopContents);
 }
 
--- utils/tex2rtf/src/readshg.cpp-orig	2009-06-18 17:55:23.929499000 -0500
+++ utils/tex2rtf/src/readshg.cpp	2009-06-18 17:55:31.590597000 -0500
@@ -36,7 +36,7 @@
 // int n = ParseSHG("thing.shg", &array);
 
 int   ParseSHG( const wxChar* fileName, HotSpot **hotspots)
-{ FILE*   fSHG = wxFopen( fileName, _T("rb"));
+{ FILE*   fSHG = wxFopen( fileName, wxT("rb"));
   long    offset;
   int nHotspots = 0;
 
@@ -116,26 +116,26 @@ bool SHGToMap(wxChar *filename, wxChar *
     return false;
 
   wxChar buf[100];
-  wxSnprintf(buf, sizeof(buf), _T("Converting .SHG file to HTML map file: there are %d hotspots in %s."), n, filename);
+  wxSnprintf(buf, sizeof(buf), wxT("Converting .SHG file to HTML map file: there are %d hotspots in %s."), n, filename);
   OnInform(buf);
 
   wxChar outBuf[256];
   wxStrcpy(outBuf, filename);
   StripExtension(outBuf);
-  wxStrcat(outBuf, _T(".map"));
+  wxStrcat(outBuf, wxT(".map"));
 
-  FILE *fd = wxFopen(outBuf, _T("w"));
+  FILE *fd = wxFopen(outBuf, wxT("w"));
   if (!fd)
   {
-    OnError(_T("Could not open .map file for writing."));
+    OnError(wxT("Could not open .map file for writing."));
     delete[] hotspots;
     return false;
   }
 
-  wxFprintf(fd, _T("default %s\n"), defaultFile);
+  wxFprintf(fd, wxT("default %s\n"), defaultFile);
   for (int i = 0; i < n; i++)
   {
-    wxChar *refFilename = _T("??");
+    wxChar *refFilename = wxT("??");
     
     TexRef *texRef = FindReference(hotspots[i].szHlpTopic_Macro);
     if (texRef)
@@ -143,13 +143,13 @@ bool SHGToMap(wxChar *filename, wxChar *
     else
     {
       wxChar buf[300];
-      wxSnprintf(buf, sizeof(buf), _T("Warning: could not find hotspot reference %s"), hotspots[i].szHlpTopic_Macro);
+      wxSnprintf(buf, sizeof(buf), wxT("Warning: could not find hotspot reference %s"), hotspots[i].szHlpTopic_Macro);
       OnInform(buf);
     }
-    wxFprintf(fd, _T("rect %s %d %d %d %d\n"), refFilename, (int)hotspots[i].left, (int)hotspots[i].top,
+    wxFprintf(fd, wxT("rect %s %d %d %d %d\n"), refFilename, (int)hotspots[i].left, (int)hotspots[i].top,
       (int)hotspots[i].right, (int)hotspots[i].bottom);
   }
-  wxFprintf(fd, _T("\n"));
+  wxFprintf(fd, wxT("\n"));
 
   fclose(fd);
 
--- utils/tex2rtf/src/table.cpp-orig	2009-06-18 17:55:41.838625000 -0500
+++ utils/tex2rtf/src/table.cpp	2009-06-18 17:55:45.559054000 -0500
@@ -143,7 +143,7 @@ bool ParseTableArgument(wxChar *value)
     else
     {
       wxChar *buf = new wxChar[wxStrlen(value) + 80];
-      wxSnprintf(buf, wxStrlen(value) + 80, _T("Tabular first argument \"%s\" too complex!"), value);
+      wxSnprintf(buf, wxStrlen(value) + 80, wxT("Tabular first argument \"%s\" too complex!"), value);
       OnError(buf);
       delete[] buf;
       return false;
--- utils/helpview/src/helpview.cpp-orig	2009-06-18 17:57:21.630963000 -0500
+++ utils/helpview/src/helpview.cpp	2009-06-18 17:57:27.781131000 -0500
@@ -285,7 +285,7 @@ bool hvApp::OpenBook(wxHtmlHelpControlle
     if ( !s.empty() )
     {
         wxString ext = s.Right(4).Lower();
-        if (ext == _T(".zip") || ext == _T(".htb") || ext == _T(".hhp"))
+        if (ext == wxT(".zip") || ext == wxT(".htb") || ext == wxT(".hhp"))
         {
             wxBusyCursor bcur;
             wxFileName fileName(s);
@@ -332,7 +332,7 @@ if ( id == artId ) return wxBitmap(xpmRc
 #else
 #define CREATE_STD_ICON(iconId, xpmRc) \
 { \
-    wxIcon icon(_T(iconId)); \
+    wxIcon icon(wxT(iconId)); \
     wxBitmap bmp; \
     bmp.CopyFromIcon(icon); \
     return bmp; \
--- utils/helpview/src/remhelp.cpp-orig	2009-06-18 17:57:33.440268000 -0500
+++ utils/helpview/src/remhelp.cpp	2009-06-18 17:57:44.735371000 -0500
@@ -252,7 +252,7 @@ bool wxRemoteHtmlHelpController::Quit()
                     switch ( sig )
                     {
                     default:
-                    wxFAIL_MSG( _T("unexpected return value") );
+                    wxFAIL_MSG( wxT("unexpected return value") );
                     // fall through
                     
                       case -1:
@@ -282,32 +282,32 @@ bool wxRemoteHtmlHelpController::Quit()
     if ( sig == 0 )
     {
         if ( wxProcess::Exists(m_pid) )
-            wxLogStatus(_T("Process %ld is running."), m_pid);
+            wxLogStatus(wxT("Process %ld is running."), m_pid);
         else
-            wxLogStatus(_T("No process with pid = %ld."), m_pid);
+            wxLogStatus(wxT("No process with pid = %ld."), m_pid);
     }
     else // not SIGNONE
     {
         wxKillError rc = wxProcess::Kill(m_pid, (wxSignal)sig);
         if ( rc == wxKILL_OK )
         {
-            wxLogStatus(_T("Process %ld killed with signal %d."), m_pid, sig);
+            wxLogStatus(wxT("Process %ld killed with signal %d."), m_pid, sig);
         }
         else
         {
             static const wxChar *errorText[] =
             {
-                _T(""), // no error
-                    _T("signal not supported"),
-                    _T("permission denied"),
-                    _T("no such process"),
-                    _T("unspecified error"),
+                wxT(""), // no error
+                    wxT("signal not supported"),
+                    wxT("permission denied"),
+                    wxT("no such process"),
+                    wxT("unspecified error"),
             };
             
             // sig = 3, 6, 9 or 12 all kill server with no apparent problem
             // but give error message on MSW - timout?
             //
-            //wxLogError(_T("Failed to kill process %ld with signal %d: %s"),
+            //wxLogError(wxT("Failed to kill process %ld with signal %d: %s"),
             //            m_pid, sig, errorText[rc]);
         }
     }
