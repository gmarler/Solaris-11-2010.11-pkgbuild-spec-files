--- soundtouch-1.3.1/include/STTypes.h-orig	2008-03-17 20:44:42.607133000 -0500
+++ soundtouch-1.3.1/include/STTypes.h	2008-03-17 20:45:09.807978000 -0500
@@ -1,143 +1,144 @@
-////////////////////////////////////////////////////////////////////////////////
-///
-/// Common type definitions for SoundTouch audio processing library.
-///
-/// Author        : Copyright (c) Olli Parviainen
-/// Author e-mail : oparviai 'at' iki.fi
-/// SoundTouch WWW: http://www.surina.net/soundtouch
-///
-////////////////////////////////////////////////////////////////////////////////
-//
-// Last changed  : $Date: 2006/02/05 16:44:06 $
-// File revision : $Revision: 1.16 $
-//
-// $Id: STTypes.h,v 1.16 2006/02/05 16:44:06 Olli Exp $
-//
-////////////////////////////////////////////////////////////////////////////////
-//
-// License :
-//
-//  SoundTouch audio processing library
-//  Copyright (c) Olli Parviainen
-//
-//  This library is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU Lesser General Public
-//  License as published by the Free Software Foundation; either
-//  version 2.1 of the License, or (at your option) any later version.
-//
-//  This library is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-//  Lesser General Public License for more details.
-//
-//  You should have received a copy of the GNU Lesser General Public
-//  License along with this library; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-//
-////////////////////////////////////////////////////////////////////////////////
-
-#ifndef STTypes_H
-#define STTypes_H
-
-typedef unsigned int    uint;
-typedef unsigned long   ulong;
-
-#ifdef __GNUC__
-    // In GCC, include soundtouch_config.h made by config scritps
-    #include "soundtouch_config.h"
-#endif
-
-#ifndef _WINDEF_
-    // if these aren't defined already by Windows headers, define now
-
-    typedef int BOOL;
-
-    #define FALSE   0
-    #define TRUE    1
-
-#endif  // _WINDEF_
-
-
-namespace soundtouch
-{
-/// Activate these undef's to overrule the possible sampletype 
-/// setting inherited from some other header file:
-//#undef INTEGER_SAMPLES
-//#undef FLOAT_SAMPLES
-
-#if !(INTEGER_SAMPLES || FLOAT_SAMPLES)
-   
-    /// Choose either 32bit floating point or 16bit integer sampletype
-    /// by choosing one of the following defines, unless this selection 
-    /// has already been done in some other file.
-    ////
-    /// Notes:
-    /// - In Windows environment, choose the sample format with the
-    ///   following defines.
-    /// - In GNU environment, the floating point samples are used by 
-    ///   default, but integer samples can be chosen by giving the 
-    ///   following switch to the configure script:
-    ///       ./configure --enable-integer-samples
-    ///   However, if you still prefer to select the sample format here 
-    ///   also in GNU environment, then please #undef the INTEGER_SAMPLE
-    ///   and FLOAT_SAMPLE defines first as in comments above.
-    //#define INTEGER_SAMPLES     1    //< 16bit integer samples
-    #define FLOAT_SAMPLES       1    //< 32bit float samples
- 
- #endif
-
-    /// Define this to allow CPU-specific assembler optimizations. Notice that 
-    /// having this enabled on non-x86 platforms doesn't matter; the compiler can 
-    /// drop unsupported extensions on different platforms automatically. 
-    /// However, if you're having difficulties getting the optimized routines 
-    /// compiled with your compler (e.g. some gcc compiler versions may be picky), 
-    /// you may wish to disable the optimizations to make the library compile.
-    #define ALLOW_OPTIMIZATIONS     1
-
-
-    // If defined, allows the SIMD-optimized routines to take minor shortcuts 
-    // for improved performance. Undefine to require faithfully similar SIMD 
-    // calculations as in normal C implementation.
-    #define ALLOW_NONEXACT_SIMD_OPTIMIZATION    1
-
-
-    #ifdef INTEGER_SAMPLES
-        // 16bit integer sample type
-        typedef short SAMPLETYPE;
-        // data type for sample accumulation: Use 32bit integer to prevent overflows
-        typedef long  LONG_SAMPLETYPE;
-
-        #ifdef FLOAT_SAMPLES
-            // check that only one sample type is defined
-            #error "conflicting sample types defined"
-        #endif // FLOAT_SAMPLES
-
-        #ifdef ALLOW_OPTIMIZATIONS
-            #if (WIN32 || __i386__ || __x86_64__)
-                // Allow MMX optimizations
-                #define ALLOW_MMX   1
-            #endif
-        #endif
-
-    #else
-
-        // floating point samples
-        typedef float  SAMPLETYPE;
-        // data type for sample accumulation: Use double to utilize full precision.
-        typedef double LONG_SAMPLETYPE;
-
-        #ifdef ALLOW_OPTIMIZATIONS
-                // Allow 3DNow! and SSE optimizations
-            #if WIN32
-                #define ALLOW_3DNOW     1
-            #endif
-
-            #if (WIN32 || __i386__ || __x86_64__)
-                #define ALLOW_SSE       1
-            #endif
-        #endif
-
-    #endif  // INTEGER_SAMPLES
-};
-
-#endif
+////////////////////////////////////////////////////////////////////////////////
+///
+/// Common type definitions for SoundTouch audio processing library.
+///
+/// Author        : Copyright (c) Olli Parviainen
+/// Author e-mail : oparviai 'at' iki.fi
+/// SoundTouch WWW: http://www.surina.net/soundtouch
+///
+////////////////////////////////////////////////////////////////////////////////
+//
+// Last changed  : $Date: 2006/02/05 16:44:06 $
+// File revision : $Revision: 1.16 $
+//
+// $Id: STTypes.h,v 1.16 2006/02/05 16:44:06 Olli Exp $
+//
+////////////////////////////////////////////////////////////////////////////////
+//
+// License :
+//
+//  SoundTouch audio processing library
+//  Copyright (c) Olli Parviainen
+//
+//  This library is free software; you can redistribute it and/or
+//  modify it under the terms of the GNU Lesser General Public
+//  License as published by the Free Software Foundation; either
+//  version 2.1 of the License, or (at your option) any later version.
+//
+//  This library is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+//  Lesser General Public License for more details.
+//
+//  You should have received a copy of the GNU Lesser General Public
+//  License along with this library; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+////////////////////////////////////////////////////////////////////////////////
+
+#ifndef STTypes_H
+#define STTypes_H
+
+typedef unsigned int    uint;
+typedef unsigned long   ulong;
+
+#ifdef __GNUC__
+    // In GCC, include soundtouch_config.h made by config scritps
+    #include "soundtouch_config.h"
+#endif
+
+#ifndef _WINDEF_
+    // if these aren't defined already by Windows headers, define now
+
+    typedef int BOOL;
+
+    #define FALSE   0
+    #define TRUE    1
+
+#endif  // _WINDEF_
+
+
+namespace soundtouch
+{
+/// Activate these undef's to overrule the possible sampletype 
+/// setting inherited from some other header file:
+//#undef INTEGER_SAMPLES
+//#undef FLOAT_SAMPLES
+
+#if !(INTEGER_SAMPLES || FLOAT_SAMPLES)
+   
+    /// Choose either 32bit floating point or 16bit integer sampletype
+    /// by choosing one of the following defines, unless this selection 
+    /// has already been done in some other file.
+    ////
+    /// Notes:
+    /// - In Windows environment, choose the sample format with the
+    ///   following defines.
+    /// - In GNU environment, the floating point samples are used by 
+    ///   default, but integer samples can be chosen by giving the 
+    ///   following switch to the configure script:
+    ///       ./configure --enable-integer-samples
+    ///   However, if you still prefer to select the sample format here 
+    ///   also in GNU environment, then please #undef the INTEGER_SAMPLE
+    ///   and FLOAT_SAMPLE defines first as in comments above.
+    //#define INTEGER_SAMPLES     1    //< 16bit integer samples
+    #define FLOAT_SAMPLES       1    //< 32bit float samples
+ 
+ #endif
+
+    /// Define this to allow CPU-specific assembler optimizations. Notice that 
+    /// having this enabled on non-x86 platforms doesn't matter; the compiler can 
+    /// drop unsupported extensions on different platforms automatically. 
+    /// However, if you're having difficulties getting the optimized routines 
+    /// compiled with your compler (e.g. some gcc compiler versions may be picky), 
+    /// you may wish to disable the optimizations to make the library compile.
+#ifdef __GNUC__
+    #define ALLOW_OPTIMIZATIONS     1
+#endif
+
+    // If defined, allows the SIMD-optimized routines to take minor shortcuts 
+    // for improved performance. Undefine to require faithfully similar SIMD 
+    // calculations as in normal C implementation.
+    #define ALLOW_NONEXACT_SIMD_OPTIMIZATION    1
+
+
+    #ifdef INTEGER_SAMPLES
+        // 16bit integer sample type
+        typedef short SAMPLETYPE;
+        // data type for sample accumulation: Use 32bit integer to prevent overflows
+        typedef long  LONG_SAMPLETYPE;
+
+        #ifdef FLOAT_SAMPLES
+            // check that only one sample type is defined
+            #error "conflicting sample types defined"
+        #endif // FLOAT_SAMPLES
+
+        #ifdef ALLOW_OPTIMIZATIONS
+            #if (WIN32 || __i386__ || __x86_64__)
+                // Allow MMX optimizations
+                #define ALLOW_MMX   1
+            #endif
+        #endif
+
+    #else
+
+        // floating point samples
+        typedef float  SAMPLETYPE;
+        // data type for sample accumulation: Use double to utilize full precision.
+        typedef double LONG_SAMPLETYPE;
+
+        #ifdef ALLOW_OPTIMIZATIONS
+                // Allow 3DNow! and SSE optimizations
+            #if WIN32
+                #define ALLOW_3DNOW     1
+            #endif
+
+            #if (WIN32 || __i386__ || __x86_64__)
+                #define ALLOW_SSE       1
+            #endif
+        #endif
+
+    #endif  // INTEGER_SAMPLES
+};
+
+#endif
--- soundtouch-1.3.1/source/SoundTouch/cpu_detect_x86_gcc.cpp-orig	2008-03-17 21:02:55.543738000 -0500
+++ soundtouch-1.3.1/source/SoundTouch/cpu_detect_x86_gcc.cpp	2008-03-17 21:04:15.096345000 -0500
@@ -1,138 +1,141 @@
-////////////////////////////////////////////////////////////////////////////////
-///
-/// gcc version of the x86 CPU detect routine.
-///
-/// This file is to be compiled on any platform with the GNU C compiler.
-/// Compiler. Please see 'cpu_detect_x86_win.cpp' for the x86 Windows version 
-/// of this file.
-///
-/// Author        : Copyright (c) Olli Parviainen
-/// Author e-mail : oparviai 'at' iki.fi
-/// SoundTouch WWW: http://www.surina.net/soundtouch
-///
-////////////////////////////////////////////////////////////////////////////////
-//
-// Last changed  : $Date: 2006/02/05 16:44:06 $
-// File revision : $Revision: 1.6 $
-//
-// $Id: cpu_detect_x86_gcc.cpp,v 1.6 2006/02/05 16:44:06 Olli Exp $
-//
-////////////////////////////////////////////////////////////////////////////////
-//
-// License :
-//
-//  SoundTouch audio processing library
-//  Copyright (c) Olli Parviainen
-//
-//  This library is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU Lesser General Public
-//  License as published by the Free Software Foundation; either
-//  version 2.1 of the License, or (at your option) any later version.
-//
-//  This library is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
-//  Lesser General Public License for more details.
-//
-//  You should have received a copy of the GNU Lesser General Public
-//  License along with this library; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
-//
-////////////////////////////////////////////////////////////////////////////////
-
-#include <stdexcept>
-#include <string>
-#include "cpu_detect.h"
-
-#ifndef __GNUC__
-#error wrong platform - this source code file is for the GNU C compiler.
-#endif
-
-using namespace std;
-
-#include <stdio.h>
-//////////////////////////////////////////////////////////////////////////////
-//
-// processor instructions extension detection routines
-//
-//////////////////////////////////////////////////////////////////////////////
-
-
-// Flag variable indicating whick ISA extensions are disabled (for debugging)
-static uint _dwDisabledISA = 0x00;      // 0xffffffff; //<- use this to disable all extensions
-
-// Disables given set of instruction extensions. See SUPPORT_... defines.
-void disableExtensions(uint dwDisableMask)
-{
-    _dwDisabledISA = dwDisableMask;
-}
-
-
-
-/// Checks which instruction set extensions are supported by the CPU.
-uint detectCPUextensions(void)
-{
-#ifndef __i386__
-    return 0; // always disable extensions on non-x86 platforms.
-#else
-    uint res = 0;
-
-    if (_dwDisabledISA == 0xffffffff) return 0;
-
-    asm volatile(
-        "\n\txor     %%esi, %%esi"       // clear %%esi = result register
-        // check if 'cpuid' instructions is available by toggling eflags bit 21
-
-        "\n\tpushf"                      // save eflags to stack
-        "\n\tpop     %%eax"              // load eax from stack (with eflags)
-        "\n\tmovl    %%eax, %%ecx"       // save the original eflags values to ecx
-        "\n\txor     $0x00200000, %%eax" // toggle bit 21
-        "\n\tpush    %%eax"              // store toggled eflags to stack
-        "\n\tpopf"                       // load eflags from stack
-        "\n\tpushf"                      // save updated eflags to stack
-        "\n\tpop     %%eax"              // load from stack
-        "\n\txor     %%edx, %%edx"       // clear edx for defaulting no mmx
-        "\n\tcmp     %%ecx, %%eax"       // compare to original eflags values
-        "\n\tjz      end"                // jumps to 'end' if cpuid not present
-
-        // cpuid instruction available, test for presence of mmx instructions
-
-        "\n\tmovl    $1, %%eax"
-        "\n\tcpuid"
-//        movl       $0x00800000, %edx   // force enable MMX
-        "\n\ttest    $0x00800000, %%edx"
-        "\n\tjz      end"                // branch if MMX not available
-
-        "\n\tor      $0x01, %%esi"       // otherwise add MMX support bit
-
-        "\n\ttest    $0x02000000, %%edx"
-        "\n\tjz      test3DNow"          // branch if SSE not available
-
-        "\n\tor      $0x08, %%esi"       // otherwise add SSE support bit
-
-    "\n\ttest3DNow:"
-        // test for precense of AMD extensions
-        "\n\tmov     $0x80000000, %%eax"
-        "\n\tcpuid"
-        "\n\tcmp     $0x80000000, %%eax"
-        "\n\tjbe     end"                 // branch if no AMD extensions detected
-
-        // test for precense of 3DNow! extension
-        "\n\tmov     $0x80000001, %%eax"
-        "\n\tcpuid"
-        "\n\ttest    $0x80000000, %%edx"
-        "\n\tjz      end"                  // branch if 3DNow! not detected
-
-        "\n\tor      $0x02, %%esi"         // otherwise add 3DNow support bit
-
-    "\n\tend:"
-
-        "\n\tmov     %%esi, %0"
-
-      : "=r" (res)
-      : /* no inputs */
-      : "%edx", "%eax", "%ecx", "%esi" );
-      
-    return res & ~_dwDisabledISA;
-#endif
-}
+////////////////////////////////////////////////////////////////////////////////
+///
+/// gcc version of the x86 CPU detect routine.
+///
+/// This file is to be compiled on any platform with the GNU C compiler.
+/// Compiler. Please see 'cpu_detect_x86_win.cpp' for the x86 Windows version 
+/// of this file.
+///
+/// Author        : Copyright (c) Olli Parviainen
+/// Author e-mail : oparviai 'at' iki.fi
+/// SoundTouch WWW: http://www.surina.net/soundtouch
+///
+////////////////////////////////////////////////////////////////////////////////
+//
+// Last changed  : $Date: 2006/02/05 16:44:06 $
+// File revision : $Revision: 1.6 $
+//
+// $Id: cpu_detect_x86_gcc.cpp,v 1.6 2006/02/05 16:44:06 Olli Exp $
+//
+////////////////////////////////////////////////////////////////////////////////
+//
+// License :
+//
+//  SoundTouch audio processing library
+//  Copyright (c) Olli Parviainen
+//
+//  This library is free software; you can redistribute it and/or
+//  modify it under the terms of the GNU Lesser General Public
+//  License as published by the Free Software Foundation; either
+//  version 2.1 of the License, or (at your option) any later version.
+//
+//  This library is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+//  Lesser General Public License for more details.
+//
+//  You should have received a copy of the GNU Lesser General Public
+//  License along with this library; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+//
+////////////////////////////////////////////////////////////////////////////////
+
+#include <stdexcept>
+#include <string>
+#include "cpu_detect.h"
+#include "STTypes.h"
+
+#ifdef ALLOW_OPTIMIZATIONS
+#ifndef __GNUC__
+#error wrong platform - this source code file is for the GNU C compiler.
+#endif
+
+using namespace std;
+
+#include <stdio.h>
+//////////////////////////////////////////////////////////////////////////////
+//
+// processor instructions extension detection routines
+//
+//////////////////////////////////////////////////////////////////////////////
+
+
+// Flag variable indicating whick ISA extensions are disabled (for debugging)
+static uint _dwDisabledISA = 0x00;      // 0xffffffff; //<- use this to disable all extensions
+
+// Disables given set of instruction extensions. See SUPPORT_... defines.
+void disableExtensions(uint dwDisableMask)
+{
+    _dwDisabledISA = dwDisableMask;
+}
+
+
+
+/// Checks which instruction set extensions are supported by the CPU.
+uint detectCPUextensions(void)
+{
+#ifndef __i386__
+    return 0; // always disable extensions on non-x86 platforms.
+#else
+    uint res = 0;
+
+    if (_dwDisabledISA == 0xffffffff) return 0;
+
+    asm volatile(
+        "\n\txor     %%esi, %%esi"       // clear %%esi = result register
+        // check if 'cpuid' instructions is available by toggling eflags bit 21
+
+        "\n\tpushf"                      // save eflags to stack
+        "\n\tpop     %%eax"              // load eax from stack (with eflags)
+        "\n\tmovl    %%eax, %%ecx"       // save the original eflags values to ecx
+        "\n\txor     $0x00200000, %%eax" // toggle bit 21
+        "\n\tpush    %%eax"              // store toggled eflags to stack
+        "\n\tpopf"                       // load eflags from stack
+        "\n\tpushf"                      // save updated eflags to stack
+        "\n\tpop     %%eax"              // load from stack
+        "\n\txor     %%edx, %%edx"       // clear edx for defaulting no mmx
+        "\n\tcmp     %%ecx, %%eax"       // compare to original eflags values
+        "\n\tjz      end"                // jumps to 'end' if cpuid not present
+
+        // cpuid instruction available, test for presence of mmx instructions
+
+        "\n\tmovl    $1, %%eax"
+        "\n\tcpuid"
+//        movl       $0x00800000, %edx   // force enable MMX
+        "\n\ttest    $0x00800000, %%edx"
+        "\n\tjz      end"                // branch if MMX not available
+
+        "\n\tor      $0x01, %%esi"       // otherwise add MMX support bit
+
+        "\n\ttest    $0x02000000, %%edx"
+        "\n\tjz      test3DNow"          // branch if SSE not available
+
+        "\n\tor      $0x08, %%esi"       // otherwise add SSE support bit
+
+    "\n\ttest3DNow:"
+        // test for precense of AMD extensions
+        "\n\tmov     $0x80000000, %%eax"
+        "\n\tcpuid"
+        "\n\tcmp     $0x80000000, %%eax"
+        "\n\tjbe     end"                 // branch if no AMD extensions detected
+
+        // test for precense of 3DNow! extension
+        "\n\tmov     $0x80000001, %%eax"
+        "\n\tcpuid"
+        "\n\ttest    $0x80000000, %%edx"
+        "\n\tjz      end"                  // branch if 3DNow! not detected
+
+        "\n\tor      $0x02, %%esi"         // otherwise add 3DNow support bit
+
+    "\n\tend:"
+
+        "\n\tmov     %%esi, %0"
+
+      : "=r" (res)
+      : /* no inputs */
+      : "%edx", "%eax", "%ecx", "%esi" );
+      
+    return res & ~_dwDisabledISA;
+#endif
+}
+#endif
