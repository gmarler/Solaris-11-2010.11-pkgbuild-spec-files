diff -Nur gnome-power-manager-2.19.1/help/Makefile.am gnome-power-manager-2.19.1-new/help/Makefile.am
--- gnome-power-manager-2.19.1/help/Makefile.am	2007-03-02 06:43:39.000000000 +0800
+++ gnome-power-manager-2.19.1-new/help/Makefile.am	2007-05-08 18:13:24.787226000 +0800
@@ -21,4 +21,4 @@
 	figures/gpm-cell-capacity.png \
 	figures/gpm-suspend-problem.png
 
-DOC_LINGUAS = es fr hu pa ru sv
+DOC_LINGUAS = es fr pa ru sv
diff -Nur gnome-power-manager-2.19.1/src/gpm-array-float.c gnome-power-manager-2.19.1-new/src/gpm-array-float.c
--- gnome-power-manager-2.19.1/src/gpm-array-float.c	2007-04-25 07:09:49.000000000 +0800
+++ gnome-power-manager-2.19.1-new/src/gpm-array-float.c	2007-05-08 18:15:32.105679000 +0800
@@ -75,7 +75,7 @@
  *
  * @array: input array
  **/
-inline gfloat
+gfloat
 gpm_array_float_get (GArray *array, guint i)
 {
 	if (i >= array->len) {
@@ -89,7 +89,7 @@
  *
  * @array: input array
  **/
-inline void
+void
 gpm_array_float_set (GArray *array, guint i, gfloat value)
 {
 	g_array_index (array, gfloat, i) = value;
diff -Nur gnome-power-manager-2.19.1/src/gpm-array-float.h gnome-power-manager-2.19.1-new/src/gpm-array-float.h
--- gnome-power-manager-2.19.1/src/gpm-array-float.h	2007-04-25 06:39:47.000000000 +0800
+++ gnome-power-manager-2.19.1-new/src/gpm-array-float.h	2007-05-08 18:16:40.482411000 +0800
@@ -48,9 +48,9 @@
 gboolean	 gpm_array_float_print			(GArray		*array);
 GArray		*gpm_array_float_convolve		(GArray		*data,
 							 GArray		*kernel);
-inline gfloat	 gpm_array_float_get			(GArray		*array,
+gfloat		 gpm_array_float_get			(GArray		*array,
 							 guint		 i);
-inline void	 gpm_array_float_set			(GArray		*array,
+void		 gpm_array_float_set			(GArray		*array,
 							 guint		 i,
 							 gfloat		 value);
 
diff -Nur gnome-power-manager-2.19.1/src/gpm-debug.h gnome-power-manager-2.19.1-new/src/gpm-debug.h
--- gnome-power-manager-2.19.1/src/gpm-debug.h	2007-04-25 18:51:51.000000000 +0800
+++ gnome-power-manager-2.19.1-new/src/gpm-debug.h	2007-05-08 18:13:24.787614000 +0800
@@ -40,7 +40,7 @@
 #define gpm_assert_run_once(x) static guint (x) = 0; if ((x)++ != 0) gpm_error ("%s, run multi!", __FUNCTION__); gpm_warning ("%s, run multi!", __FUNCTION__);
 #else
 #define gpm_debug
-#define gpm_warning
+#define gpm_warning(...) gpm_warning_real ("", __FILE__, __LINE__, __VA_ARGS__)
 #define gpm_error
 #define gpm_assert_run_once(x)
 #endif
diff -Nur gnome-power-manager-2.19.1/src/gpm-debug.h~ gnome-power-manager-2.19.1-new/src/gpm-debug.h~
--- gnome-power-manager-2.19.1/src/gpm-debug.h~	1970-01-01 08:00:00.000000000 +0800
+++ gnome-power-manager-2.19.1-new/src/gpm-debug.h~	2007-04-25 18:51:51.000000000 +0800
@@ -0,0 +1,68 @@
+/* -*- Mode: C; tab-width: 8; indent-tabs-mode: t; c-basic-offset: 8 -*-
+ *
+ * Copyright (C) 2005 William Jon McCann <mccann@jhu.edu>
+ * Copyright (C) 2005-2007 Richard Hughes <richard@hughsie.com>
+ *
+ * Licensed under the GNU General Public License Version 2
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+
+#ifndef __GPM_DEBUG_H
+#define __GPM_DEBUG_H
+
+#include <stdarg.h>
+#include <glib.h>
+
+G_BEGIN_DECLS
+
+#if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
+#define gpm_debug(...) gpm_debug_real (__func__, __FILE__, __LINE__, __VA_ARGS__)
+#define gpm_warning(...) gpm_warning_real (__func__, __FILE__, __LINE__, __VA_ARGS__)
+#define gpm_error(...) gpm_error_real (__func__, __FILE__, __LINE__, __VA_ARGS__)
+#define gpm_assert_run_once(x) static guint (x) = 0; if ((x)++ != 0) gpm_error ("%s, run multi!", __func__); gpm_warning ("%s, run multi!", __func__);
+#elif defined(__GNUC__) && __GNUC__ >= 3
+#define gpm_debug(...) gpm_debug_real (__FUNCTION__, __FILE__, __LINE__, __VA_ARGS__)
+#define gpm_warning(...) gpm_warning_real (__FUNCTION__, __FILE__, __LINE__, __VA_ARGS__)
+#define gpm_error(...) gpm_error_real (__FUNCTION__, __FILE__, __LINE__, __VA_ARGS__)
+#define gpm_assert_run_once(x) static guint (x) = 0; if ((x)++ != 0) gpm_error ("%s, run multi!", __FUNCTION__); gpm_warning ("%s, run multi!", __FUNCTION__);
+#else
+#define gpm_debug
+#define gpm_warning
+#define gpm_error
+#define gpm_assert_run_once(x)
+#endif
+
+void		gpm_debug_init			(gboolean	 debug);
+void		gpm_debug_shutdown		(void);
+gboolean	gpm_debug_is_verbose		(void);
+void		gpm_debug_real			(const gchar	*func,
+						 const gchar	*file,
+						 int		 line,
+						 const gchar	*format, ...);
+void		gpm_warning_real		(const gchar	*func,
+						 const gchar	*file,
+						 int		 line,
+						 const gchar	*format, ...);
+void		gpm_error_real			(const gchar	*func,
+						 const gchar	*file,
+						 int		 line,
+						 const gchar	*format, ...);
+void		gpm_syslog			(const gchar	*format, ...);
+void		gpm_debug_add_option		(const gchar	*option);
+
+G_END_DECLS
+
+#endif /* __GPM_DEBUG_H */
