diff -r d2a07bdc6744 JavaScriptCore/interpreter/RegisterFile.cpp
--- a/JavaScriptCore/interpreter/RegisterFile.cpp	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/interpreter/RegisterFile.cpp	Tue May 18 19:37:36 2010 +0800
@@ -34,7 +34,7 @@
 RegisterFile::~RegisterFile()
 {
 #if HAVE(MMAP)
-    munmap(m_buffer, ((m_max - m_start) + m_maxGlobals) * sizeof(Register));
+    munmap((caddr_t)m_buffer, ((m_max - m_start) + m_maxGlobals) * sizeof(Register));
 #elif HAVE(VIRTUALALLOC)
 #if OS(WINCE)
     VirtualFree(m_buffer, DWORD(m_commitEnd) - DWORD(m_buffer), MEM_DECOMMIT);
diff -r d2a07bdc6744 JavaScriptCore/interpreter/RegisterFile.h
--- a/JavaScriptCore/interpreter/RegisterFile.h	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/interpreter/RegisterFile.h	Tue May 18 19:37:36 2010 +0800
@@ -174,7 +174,7 @@
 
         size_t bufferLength = (capacity + maxGlobals) * sizeof(Register);
     #if HAVE(MMAP)
-        m_buffer = static_cast<Register*>(mmap(0, bufferLength, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, VM_TAG_FOR_REGISTERFILE_MEMORY, 0));
+        m_buffer = reinterpret_cast<Register*>(mmap(0, bufferLength, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANON, VM_TAG_FOR_REGISTERFILE_MEMORY, 0));
         if (m_buffer == MAP_FAILED) {
 #if OS(WINCE)
             fprintf(stderr, "Could not allocate register file: %d\n", GetLastError());
diff -r d2a07bdc6744 JavaScriptCore/runtime/MarkStackPosix.cpp
--- a/JavaScriptCore/runtime/MarkStackPosix.cpp	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/runtime/MarkStackPosix.cpp	Tue May 18 19:37:36 2010 +0800
@@ -44,7 +44,7 @@
 }
 void MarkStack::releaseStack(void* addr, size_t size)
 {
-    munmap(addr, size);
+    munmap((caddr_t)addr, size);
 }
 
 }
diff -r d2a07bdc6744 JavaScriptCore/wtf/TCSystemAlloc.cpp
--- a/JavaScriptCore/wtf/TCSystemAlloc.cpp	Tue May 18 19:09:56 2010 +0800
+++ b/JavaScriptCore/wtf/TCSystemAlloc.cpp	Tue May 18 19:37:36 2010 +0800
@@ -194,10 +194,10 @@
 
   // Return the unused memory to the system
   if (adjust > 0) {
-    munmap(reinterpret_cast<void*>(ptr), adjust);
+    munmap(reinterpret_cast<caddr_t>(ptr), adjust);
   }
   if (adjust < extra) {
-    munmap(reinterpret_cast<void*>(ptr + adjust + size), extra - adjust);
+    munmap(reinterpret_cast<caddr_t>(ptr + adjust + size), extra - adjust);
   }
 
   ptr += adjust;
@@ -443,7 +443,7 @@
 
 void TCMalloc_SystemRelease(void* start, size_t length)
 {
-  void* newAddress = mmap(start, length, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
+  void* newAddress = mmap((caddr_t)start, length, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED, -1, 0);
   // If the mmap failed then that's ok, we just won't return the memory to the system.
   ASSERT_UNUSED(newAddress, newAddress == start || newAddress == reinterpret_cast<void*>(MAP_FAILED));
 }
