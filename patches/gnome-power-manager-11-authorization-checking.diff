--- src/Makefile.am.orig	2007-11-02 06:43:22.000000000 +0800
+++ src/Makefile.am	2008-01-21 14:51:32.193850000 +0800
@@ -105,6 +105,8 @@
 	gpm-common.c					\
 	gpm-screensaver.h				\
 	gpm-screensaver.c				\
+	gpm-polkit.h					\
+	gpm-polkit.c					\
 	$(NULL)
 
 gnome_power_preferences_LDADD =				\
@@ -115,6 +117,7 @@
 	$(GPM_EXTRA_LIBS)				\
 	$(LOCAL_LIBHAL_LIBS)				\
 	$(LOCAL_LIBDBUS_LIBS)				\
+	-lpolkit					\
 	$(NULL)
 
 if HAVE_GTKUNIQUE
@@ -214,6 +217,7 @@
 	$(GPM_EXTRA_LIBS)				\
 	$(LOCAL_LIBHAL_LIBS)				\
 	$(LOCAL_LIBDBUS_LIBS)				\
+	-lpolkit					\
 	$(NULL)
 
 if HAVE_LIBNOTIFY
--- src/gpm-polkit.c.orig	2008-01-25 15:42:14.499283000 +0800
+++ src/gpm-polkit.c	2008-01-25 15:48:13.655205000 +0800
@@ -30,6 +30,10 @@
 #include "gpm-polkit.h"
 #include "gpm-debug.h"
 
+#ifdef SOLARIS
+#include <libpolkit/libpolkit.h> 
+#endif
+
 static void     gpm_polkit_class_init (GpmPolkitClass *klass);
 static void     gpm_polkit_init       (GpmPolkit      *polkit);
 static void     gpm_polkit_finalize   (GObject		   *object);
@@ -42,7 +46,11 @@
 
 struct GpmPolkitPrivate
 {
+#ifdef SOLARIS
+	LibPolKitContext 	*ctx;
+#else
 	DbusProxy		*gproxy;
+#endif
 };
 
 G_DEFINE_TYPE (GpmPolkit, gpm_polkit, G_TYPE_OBJECT)
@@ -66,6 +74,26 @@
 	gboolean ret;
 	DBusGProxy *proxy;
 
+#ifdef SOLARIS
+	bus_unique_name = getenv ("HAL_METHOD_INVOKED_BY_SYSTEMBUS_CONNECTION_NAME");
+
+	if (libpolkit_is_uid_allowed_for_privilege (polkit->priv->ctx,
+    						    bus_unique_name,
+ 						    user,
+						    privilege,
+						    myresource,
+						    &out_is_allowed,
+ 						    &out_is_temporary,
+ 						    NULL) 
+						    != LIBPOLKIT_RESULT_OK) {
+		/* abort as calling libpolkit failed */
+ 		gpm_warning ("Cannot lookup privilege from libpolkit\n");
+ 	}
+ 
+ 	if (out_is_allowed == FALSE) {
+ 		gpm_debug ("The user don't possess privilege \"%s\"\n", privilege);
+	}
+#else
 	g_return_val_if_fail (GPM_IS_POLKIT (polkit), FALSE);
 
 	proxy = dbus_proxy_get_proxy (polkit->priv->gproxy);
@@ -95,6 +123,7 @@
 		gpm_warning ("IsUserPrivileged failed!");
 		return FALSE;
 	}
+#endif
 	return out_is_allowed;
 }
 
@@ -119,12 +148,32 @@
 {
 	polkit->priv = GPM_POLKIT_GET_PRIVATE (polkit);
 
+#ifdef SOLARIS
+	DBusConnection *system_bus = NULL;
+	DBusError derror;
+
+	dbus_error_init (&derror);
+ 	system_bus = dbus_bus_get (DBUS_BUS_SYSTEM, &derror);
+ 	if (system_bus == NULL) {
+ 		gpm_warning ("Cannot connect to the system bus\n");
+ 		do {
+			if (dbus_error_is_set (&derror))
+				dbus_error_free (&derror);
+		} while (0);
+	}
+
+	polkit->priv->ctx = libpolkit_new_context (system_bus);
+ 	if (polkit->priv->ctx == NULL) {
+ 		gpm_warning ("Cannot get libpolkit context\n");
+ 	}
+#else
 	polkit->priv->gproxy = dbus_proxy_new ();
 	dbus_proxy_assign (polkit->priv->gproxy,
 			  DBUS_PROXY_SYSTEM,
 			  POLKITD_SERVICE,
 			  POLKITD_MANAGER_PATH,
 			  POLKITD_MANAGER_INTERFACE);
+#endif
 }
 
 /**
@@ -140,7 +189,11 @@
 
 	polkit = GPM_POLKIT (object);
 	polkit->priv = GPM_POLKIT_GET_PRIVATE (polkit);
+#ifdef SOLARIS
+	libpolkit_free_context (polkit->priv->ctx);
+#else
 	g_object_unref (polkit->priv->gproxy);
+#endif
 
 	G_OBJECT_CLASS (gpm_polkit_parent_class)->finalize (object);
 }
--- src/gpm-prefs-core.c.orig	2008-01-25 15:32:24.511743000 +0800
+++ src/gpm-prefs-core.c	2008-01-25 15:42:49.093186000 +0800
@@ -44,6 +44,9 @@
 #include "gpm-stock-icons.h"
 #include "gpm-screensaver.h"
 #include "gpm-prefs-server.h"
+#ifdef SOLARIS
+#include "gpm-polkit.h"
+#endif
 
 static void     gpm_prefs_class_init (GpmPrefsClass *klass);
 static void     gpm_prefs_init       (GpmPrefs      *prefs);
@@ -62,6 +65,10 @@
 	gboolean		 has_button_suspend;
 	gboolean		 can_suspend;
 	gboolean		 can_hibernate;
+#ifdef SOLARIS
+	gboolean		 can_cpufreq;
+	gboolean		 can_brightness;
+#endif
 	GpmConf			*conf;
 	GpmScreensaver		*screensaver;
 	HalGCpufreq		*hal_cpufreq;
@@ -957,7 +964,11 @@
 		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_ac_lid");
 		gtk_widget_hide_all (widget);
 	}
+#ifdef SOLARIS
+        if (prefs->priv->hal_cpufreq == NULL || prefs->priv->can_cpufreq == FALSE ) {
+#else
 	if (prefs->priv->hal_cpufreq == NULL) {
+#endif
 		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_ac_cpu");
 		gtk_widget_hide_all (widget);
 	}
@@ -1055,7 +1066,11 @@
 		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_battery_lid");
 		gtk_widget_hide_all (widget);
 	}
+#ifdef SOLARIS
+        if (prefs->priv->hal_cpufreq == NULL || prefs->priv->can_cpufreq == FALSE ) {
+#else
 	if (prefs->priv->hal_cpufreq == NULL) {
+#endif
 		widget = glade_xml_get_widget (prefs->priv->glade_xml, "hbox_battery_cpu");
 		gtk_widget_hide_all (widget);
 	}
@@ -1196,6 +1211,18 @@
 	prefs->priv->can_hibernate = gpm_dbus_method_bool ("CanHibernate");
 	gpm_debug ("caps=%i", caps);
 
+#ifdef SOLARIS
+	GpmPolkit *polkit = gpm_polkit_new ();
+	if (polkit) {
+		prefs->priv->can_cpufreq = gpm_polkit_is_user_privileged (polkit, "hal-power-cpu");
+		prefs->priv->can_brightness = gpm_polkit_is_user_privileged (polkit, "hal-power-brightness");
+		libpolkit_free_context (polkit);
+	} else {
+		prefs->priv->can_cpufreq = FALSE;
+		prefs->priv->can_brightness = FALSE;
+	}
+#endif
+
 	/* only enable cpufreq stuff if we have the hardware */
 	if (prefs->priv->hal_cpufreq) {
 		hal_gcpufreq_get_governors (prefs->priv->hal_cpufreq,
