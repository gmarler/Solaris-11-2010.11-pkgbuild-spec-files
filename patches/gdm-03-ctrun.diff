diff --git a/acconfig.h b/acconfig.h
index dad371b..4307fd3 100644
--- a/acconfig.h
+++ b/acconfig.h
@@ -14,6 +14,7 @@
 #undef HAVE_CHPASS
 #undef HAVE_CLEARENV
 #undef HAVE_CRYPT
+#undef HAVE_CTRUN
 #undef HAVE_DEFOPEN
 #undef HAVE_GETTEXT
 #undef HAVE_LC_MESSAGES
diff --git a/configure.ac b/configure.ac
index ff0449b..75b6771 100644
--- a/configure.ac
+++ b/configure.ac
@@ -843,6 +843,23 @@ AC_SUBST(XINERAMA_LIBS)
 CPPFLAGS="$xinerama_save_cppflags"
 
 dnl ---------------------------------------------------------------------------
+dnl - Solaris ctrun support
+dnl ---------------------------------------------------------------------------
+
+# ctrun support for Solaris
+#
+AC_ARG_WITH(ctrun,
+  [  --with-ctrun=[yes/no]  Define to yes if GDM is started as a svcadm(1M) service,  [default=no]],,
+  with_ctrun=no)
+
+if test x$with_ctrun != xno ; then
+   AC_PATH_PROG(HAVE_CTRUN,ctrun,no,/usr/bin)
+   if test "x$HAVE_CTRUN" != "xno" ; then
+      AC_DEFINE(HAVE_CTRUN)
+   fi
+fi
+
+dnl ---------------------------------------------------------------------------
 dnl - Check for SELinux
 dnl ---------------------------------------------------------------------------
 
diff --git a/daemon/gdm-session-worker.c b/daemon/gdm-session-worker.c
index a6ac9d3..7623ee5 100644
--- a/daemon/gdm-session-worker.c
+++ b/daemon/gdm-session-worker.c
@@ -371,17 +371,25 @@ script_execute (const gchar *file,
 
         /* Construct an argument list for the shell.  */
         {
+                GString *fullexec;
                 char **new_argv;
 
-                new_argv = g_new0 (gchar*, argc + 2); /* /bin/sh and NULL */
+                fullexec = g_string_new (NULL);
+
+#ifdef HAVE_CTRUN
+                g_string_append (fullexec, "/usr/bin/ctrun -l child -i none ");
+#endif
+                g_string_append (fullexec, "/bin/sh ");
+                g_string_append (fullexec, file);
 
-                new_argv[0] = (char *) "/bin/sh";
-                new_argv[1] = (char *) file;
                 while (argc > 0) {
-                        new_argv[argc + 1] = argv[argc];
+                        g_string_append (fullexec, " ");
+                        g_string_append (fullexec, argv[argc]);
                         --argc;
                 }
 
+                g_shell_parse_argv (fullexec->str, NULL, &new_argv, NULL);
+
                 /* Execute the shell. */
                 if (envp) {
                         execve (new_argv[0], new_argv, envp);
@@ -389,7 +397,8 @@ script_execute (const gchar *file,
                         execv (new_argv[0], new_argv);
                 }
 
-                g_free (new_argv);
+                g_strfreev (new_argv);
+                g_string_free (fullexec, TRUE);
         }
 }
 
@@ -2480,8 +2489,16 @@ on_start_program (GdmSessionWorker *worker,
                                      DBUS_TYPE_INVALID);
         if (res) {
                 GError *parse_error;
+                GString *fullexec;
+
+                fullexec = g_string_new (NULL);
+
+#ifdef HAVE_CTRUN
+                g_string_append (fullexec, "/usr/bin/ctrun -l child -i none ");
+#endif
+                g_string_append (fullexec, text);
 
-                g_debug ("GdmSessionWorker: start program: %s", text);
+                g_debug ("GdmSessionWorker: start program: %s", fullexec->str);
 
                 if (worker->priv->arguments != NULL) {
                         g_strfreev (worker->priv->arguments);
@@ -2489,12 +2506,13 @@ on_start_program (GdmSessionWorker *worker,
                 }
 
                 parse_error = NULL;
-                if (! g_shell_parse_argv (text, NULL, &worker->priv->arguments, &parse_error)) {
+                if (! g_shell_parse_argv (fullexec->str, NULL, &worker->priv->arguments, &parse_error)) {
                         g_warning ("Unable to parse command: %s", parse_error->message);
                         g_error_free (parse_error);
                         return;
                 }
 
+                g_string_free (fullexec, TRUE);
                 queue_state_change (worker);
         } else {
                 g_warning ("Unable to get arguments: %s", error.message);
