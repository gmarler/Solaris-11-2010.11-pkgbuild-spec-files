--- boost_1_40_0/boost/thread/detail/thread.hpp.fixthread	2009-11-04 22:43:27.009371647 +0100
+++ boost_1_40_0/boost/thread/detail/thread.hpp	2009-11-04 22:47:19.966140668 +0100
@@ -144,6 +144,10 @@
         struct dummy;
 #endif
     public:
+#ifdef __SUNPRO_CC
+        thread(const volatile thread&);
+#endif
+
         thread();
         ~thread();
 
@@ -201,14 +205,22 @@
             thread_info=x->thread_info;
             x->thread_info.reset();
         }
-        
+       
+#ifdef __SUNPRO_CC
+        thread& operator=(thread x)
+        {
+            swap(x);
+            return *this;
+        }
+#else
         thread& operator=(detail::thread_move_t<thread> x)
         {
             thread new_thread(x);
             swap(new_thread);
             return *this;
         }
-        
+#endif
+
         operator detail::thread_move_t<thread>()
         {
             return move();
--- boost_1_40_0/boost/thread/locks.hpp.fixthread	2009-11-04 22:47:39.902167393 +0100
+++ boost_1_40_0/boost/thread/locks.hpp	2009-11-04 22:49:06.748003245 +0100
@@ -214,6 +214,10 @@
         unique_lock& operator=(unique_lock&);
         unique_lock& operator=(upgrade_lock<Mutex>& other);
     public:
+#ifdef __SUNPRO_CC
+        unique_lock(const volatile unique_lock&);
+#endif
+
         unique_lock():
             m(0),is_locked(false)
         {}
@@ -297,12 +301,20 @@
             return detail::thread_move_t<unique_lock<Mutex> >(*this);
         }
 
+#ifdef __SUNPRO_CC
+        unique_lock& operator=(unique_lock<Mutex> other)
+        {
+            swap(other);
+            return *this;
+        }
+#else        
         unique_lock& operator=(detail::thread_move_t<unique_lock<Mutex> > other)
         {
             unique_lock temp(other);
             swap(temp);
             return *this;
         }
+#endif
 
         unique_lock& operator=(detail::thread_move_t<upgrade_lock<Mutex> > other)
         {
