diff -up transmission-1.22/third-party/libnatpmp/getgateway.c.orig transmission-1.22/third-party/libnatpmp/getgateway.c
--- transmission-1.22/third-party/libnatpmp/getgateway.c.orig	2008-06-13 23:00:51.000000000 +0100
+++ transmission-1.22/third-party/libnatpmp/getgateway.c	2008-06-25 22:07:53.085644461 +0100
@@ -23,6 +23,13 @@
 #include <sys/socket.h>
 #include <net/route.h>
 #endif
+#if defined(sun) && defined(__SVR4)
+#include <unistd.h>
+#include <string.h>
+#include <sys/socket.h>
+#include <net/if.h>
+#include <net/route.h>
+#endif
 #include "getgateway.h"
 
 #ifdef __linux__
@@ -115,3 +122,94 @@ int getdefaultgateway(in_addr_t * addr)
 	return r;
 }
 #endif
+
+#if defined(sun) && defined(__SVR4)
+
+#define SUCCESS (0)
+#define FAILED  (-1)
+
+#define NEXTADDR(w, u) \
+        if (rtm_addrs & (w)) {\
+            l = sizeof(struct sockaddr); memmove(cp, &(u), l); cp += l;\
+        }
+
+
+#define rtm m_rtmsg.m_rtm
+
+struct {
+  struct rt_msghdr m_rtm;
+  char       m_space[512];
+} m_rtmsg;
+
+int getdefaultgateway(in_addr_t *addr)
+{
+  int s, seq, l, rtm_addrs, i;
+  pid_t pid;
+  struct sockaddr so_dst, so_mask;
+  char *cp = m_rtmsg.m_space; 
+  struct sockaddr *gate = NULL, *sa;
+  struct rt_msghdr *msg_hdr;
+
+  pid = getpid();
+  seq = 0;
+  rtm_addrs = RTA_DST | RTA_NETMASK;
+
+  memset(&so_dst, 0, sizeof(so_dst));
+  memset(&so_mask, 0, sizeof(so_mask));
+  memset(&rtm, 0, sizeof(struct rt_msghdr));
+
+  rtm.rtm_type = RTM_GET;
+  rtm.rtm_flags = RTF_UP | RTF_GATEWAY;
+  rtm.rtm_version = RTM_VERSION;
+  rtm.rtm_seq = ++seq;
+  rtm.rtm_addrs = rtm_addrs; 
+
+  so_dst.sa_family = AF_INET;
+  so_mask.sa_family = AF_INET;
+
+  NEXTADDR(RTA_DST, so_dst);
+  NEXTADDR(RTA_NETMASK, so_mask);
+
+  rtm.rtm_msglen = l = cp - (char *)&m_rtmsg;
+
+  s = socket(PF_ROUTE, SOCK_RAW, 0);
+
+  if (write(s, (char *)&m_rtmsg, l) < 0) {
+      close(s);
+      return FAILED;
+  }
+
+  do {
+    l = read(s, (char *)&m_rtmsg, sizeof(m_rtmsg));
+  } while (l > 0 && (rtm.rtm_seq != seq || rtm.rtm_pid != pid));
+                        
+  close(s);
+
+  msg_hdr = &rtm;
+
+  cp = ((char *)(msg_hdr + 1));
+  if (msg_hdr->rtm_addrs) {
+    for (i = 1; i; i <<= 1)
+      if (i & msg_hdr->rtm_addrs) {
+        sa = (struct sockaddr *)cp;
+        if (i == RTA_GATEWAY )
+          gate = sa;
+
+        cp += sizeof(struct sockaddr);
+      }
+  }
+  else {
+      return FAILED;
+  }
+
+
+  if (gate != NULL ) {
+      *addr = ntohl(((struct sockaddr_in *)gate)->sin_addr.s_addr);
+      return SUCCESS;
+  }
+  else {
+      return FAILED;
+  }
+}
+#endif /* defined(sun) && defined(__SVR4) */
+

