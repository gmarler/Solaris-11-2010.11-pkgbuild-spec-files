Index: include/wx/dynload.h
===================================================================
--- include/wx/dynload.h	(revision 61618)
+++ include/wx/dynload.h	(working copy)
@@ -71,7 +71,7 @@
     void  RefObj() { ++m_objcount; }
     void  UnrefObj()
     {
-        wxASSERT_MSG( m_objcount > 0, _T("Too many objects deleted??") );
+        wxASSERT_MSG( m_objcount > 0, wxT("Too many objects deleted??") );
         --m_objcount;
     }
 
Index: include/wx/datectrl.h
===================================================================
--- include/wx/datectrl.h	(revision 61618)
+++ include/wx/datectrl.h	(working copy)
@@ -19,7 +19,7 @@
 #include "wx/control.h"         // the base class
 #include "wx/datetime.h"
 
-#define wxDatePickerCtrlNameStr _T("datectrl")
+#define wxDatePickerCtrlNameStr wxT("datectrl")
 
 // wxDatePickerCtrl styles
 enum
Index: include/wx/thrimpl.cpp
===================================================================
--- include/wx/thrimpl.cpp	(revision 61618)
+++ include/wx/thrimpl.cpp	(working copy)
@@ -39,7 +39,7 @@
 wxMutexError wxMutex::Lock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
-                 _T("wxMutex::Lock(): not initialized") );
+                 wxT("wxMutex::Lock(): not initialized") );
 
     return m_internal->Lock();
 }
@@ -47,7 +47,7 @@
 wxMutexError wxMutex::TryLock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
-                 _T("wxMutex::TryLock(): not initialized") );
+                 wxT("wxMutex::TryLock(): not initialized") );
 
     return m_internal->TryLock();
 }
@@ -55,7 +55,7 @@
 wxMutexError wxMutex::Unlock()
 {
     wxCHECK_MSG( m_internal, wxMUTEX_INVALID,
-                 _T("wxMutex::Unlock(): not initialized") );
+                 wxT("wxMutex::Unlock(): not initialized") );
 
     return m_internal->Unlock();
 }
@@ -243,7 +243,7 @@
 wxCondError wxCondition::Wait()
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Wait(): not initialized") );
+                 wxT("wxCondition::Wait(): not initialized") );
 
     return m_internal->Wait();
 }
@@ -251,7 +251,7 @@
 wxCondError wxCondition::WaitTimeout(unsigned long milliseconds)
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Wait(): not initialized") );
+                 wxT("wxCondition::Wait(): not initialized") );
 
     return m_internal->WaitTimeout(milliseconds);
 }
@@ -259,7 +259,7 @@
 wxCondError wxCondition::Signal()
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Signal(): not initialized") );
+                 wxT("wxCondition::Signal(): not initialized") );
 
     return m_internal->Signal();
 }
@@ -267,7 +267,7 @@
 wxCondError wxCondition::Broadcast()
 {
     wxCHECK_MSG( m_internal, wxCOND_INVALID,
-                 _T("wxCondition::Broadcast(): not initialized") );
+                 wxT("wxCondition::Broadcast(): not initialized") );
 
     return m_internal->Broadcast();
 }
@@ -299,7 +299,7 @@
 wxSemaError wxSemaphore::Wait()
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::Wait(): not initialized") );
+                 wxT("wxSemaphore::Wait(): not initialized") );
 
     return m_internal->Wait();
 }
@@ -307,7 +307,7 @@
 wxSemaError wxSemaphore::TryWait()
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::TryWait(): not initialized") );
+                 wxT("wxSemaphore::TryWait(): not initialized") );
 
     return m_internal->TryWait();
 }
@@ -315,7 +315,7 @@
 wxSemaError wxSemaphore::WaitTimeout(unsigned long milliseconds)
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::WaitTimeout(): not initialized") );
+                 wxT("wxSemaphore::WaitTimeout(): not initialized") );
 
     return m_internal->WaitTimeout(milliseconds);
 }
@@ -323,7 +323,7 @@
 wxSemaError wxSemaphore::Post()
 {
     wxCHECK_MSG( m_internal, wxSEMA_INVALID,
-                 _T("wxSemaphore::Post(): not initialized") );
+                 wxT("wxSemaphore::Post(): not initialized") );
 
     return m_internal->Post();
 }
Index: include/wx/arrstr.h
===================================================================
--- include/wx/arrstr.h	(revision 61618)
+++ include/wx/arrstr.h	(working copy)
@@ -152,7 +152,7 @@
   wxString& Item(size_t nIndex) const
     {
         wxASSERT_MSG( nIndex < m_nCount,
-                      _T("wxArrayString: index out of bounds") );
+                      wxT("wxArrayString: index out of bounds") );
 
         return *(wxString *)&(m_pItems[nIndex]);
     }
@@ -163,7 +163,7 @@
   wxString& Last() const
   {
       wxASSERT_MSG( !IsEmpty(),
-                    _T("wxArrayString: index out of bounds") );
+                    wxT("wxArrayString: index out of bounds") );
       return Item(Count() - 1);
   }
 
Index: include/wx/recguard.h
===================================================================
--- include/wx/recguard.h	(revision 61618)
+++ include/wx/recguard.h	(working copy)
@@ -35,7 +35,7 @@
 
     ~wxRecursionGuard()
     {
-        wxASSERT_MSG( m_flag > 0, _T("unbalanced wxRecursionGuards!?") );
+        wxASSERT_MSG( m_flag > 0, wxT("unbalanced wxRecursionGuards!?") );
 
         m_flag--;
     }
Index: include/wx/list.h
===================================================================
--- include/wx/list.h	(revision 61618)
+++ include/wx/list.h	(working copy)
@@ -207,7 +207,7 @@
             bool operator==(const compatibility_iterator& i) const            \
             {                                                                 \
                 wxASSERT_MSG( m_list && i.m_list,                             \
-                              _T("comparing invalid iterators is illegal") ); \
+                              wxT("comparing invalid iterators is illegal") ); \
                 return (m_list == i.m_list) && (m_iter == i.m_iter);          \
             }                                                                 \
             bool operator!=(const compatibility_iterator& i) const            \
Index: include/wx/module.h
===================================================================
--- include/wx/module.h	(revision 61618)
+++ include/wx/module.h	(working copy)
@@ -68,7 +68,7 @@
     // after that
     void AddDependency(wxClassInfo *dep)
     {
-        wxCHECK_RET( dep, _T("NULL module dependency") );
+        wxCHECK_RET( dep, wxT("NULL module dependency") );
 
         m_dependencies.Add(dep);
     }
Index: include/wx/valtext.h
===================================================================
--- include/wx/valtext.h	(revision 61618)
+++ include/wx/valtext.h	(working copy)
@@ -99,9 +99,9 @@
     bool CheckValidator() const
     {
         wxCHECK_MSG( m_validatorWindow, false,
-                     _T("No window associated with validator") );
+                     wxT("No window associated with validator") );
         wxCHECK_MSG( m_validatorWindow->IsKindOf(CLASSINFO(wxTextCtrl)), false,
-                     _T("wxTextValidator is only for wxTextCtrl's") );
+                     wxT("wxTextValidator is only for wxTextCtrl's") );
 
         return true;
     }
Index: include/wx/univ/toplevel.h
===================================================================
--- include/wx/univ/toplevel.h	(revision 61618)
+++ include/wx/univ/toplevel.h	(working copy)
@@ -77,12 +77,12 @@
 // the actions supported by this control
 // ----------------------------------------------------------------------------
 
-#define wxACTION_TOPLEVEL_ACTIVATE       _T("activate")   // (de)activate the frame
-#define wxACTION_TOPLEVEL_BUTTON_PRESS   _T("pressbtn")   // press titlebar btn
-#define wxACTION_TOPLEVEL_BUTTON_RELEASE _T("releasebtn") // press titlebar btn
-#define wxACTION_TOPLEVEL_BUTTON_CLICK   _T("clickbtn")   // press titlebar btn
-#define wxACTION_TOPLEVEL_MOVE           _T("move")       // move the frame
-#define wxACTION_TOPLEVEL_RESIZE         _T("resize")     // resize the frame
+#define wxACTION_TOPLEVEL_ACTIVATE       wxT("activate")   // (de)activate the frame
+#define wxACTION_TOPLEVEL_BUTTON_PRESS   wxT("pressbtn")   // press titlebar btn
+#define wxACTION_TOPLEVEL_BUTTON_RELEASE wxT("releasebtn") // press titlebar btn
+#define wxACTION_TOPLEVEL_BUTTON_CLICK   wxT("clickbtn")   // press titlebar btn
+#define wxACTION_TOPLEVEL_MOVE           wxT("move")       // move the frame
+#define wxACTION_TOPLEVEL_RESIZE         wxT("resize")     // resize the frame
 
 //-----------------------------------------------------------------------------
 // wxTopLevelWindow
Index: include/wx/univ/toolbar.h
===================================================================
--- include/wx/univ/toolbar.h	(revision 61618)
+++ include/wx/univ/toolbar.h	(working copy)
@@ -24,8 +24,8 @@
 #define wxACTION_TOOLBAR_PRESS   wxACTION_BUTTON_PRESS
 #define wxACTION_TOOLBAR_RELEASE wxACTION_BUTTON_RELEASE
 #define wxACTION_TOOLBAR_CLICK   wxACTION_BUTTON_CLICK
-#define wxACTION_TOOLBAR_ENTER   _T("enter")     // highlight the tool
-#define wxACTION_TOOLBAR_LEAVE   _T("leave")     // unhighlight the tool
+#define wxACTION_TOOLBAR_ENTER   wxT("enter")     // highlight the tool
+#define wxACTION_TOOLBAR_LEAVE   wxT("leave")     // unhighlight the tool
 
 // ----------------------------------------------------------------------------
 // wxToolBar
Index: include/wx/univ/spinbutt.h
===================================================================
--- include/wx/univ/spinbutt.h	(revision 61618)
+++ include/wx/univ/spinbutt.h	(working copy)
@@ -19,8 +19,8 @@
 // ----------------------------------------------------------------------------
 
 // actions supported by this control
-#define wxACTION_SPIN_INC    _T("inc")
-#define wxACTION_SPIN_DEC    _T("dec")
+#define wxACTION_SPIN_INC    wxT("inc")
+#define wxACTION_SPIN_DEC    wxT("dec")
 
 class WXDLLEXPORT wxSpinButton : public wxSpinButtonBase,
                                  public wxControlWithArrows
Index: include/wx/univ/button.h
===================================================================
--- include/wx/univ/button.h	(revision 61618)
+++ include/wx/univ/button.h	(working copy)
@@ -20,10 +20,10 @@
 // the actions supported by this control
 // ----------------------------------------------------------------------------
 
-#define wxACTION_BUTTON_TOGGLE  _T("toggle")    // press/release the button
-#define wxACTION_BUTTON_PRESS   _T("press")     // press the button
-#define wxACTION_BUTTON_RELEASE _T("release")   // release the button
-#define wxACTION_BUTTON_CLICK   _T("click")     // generate button click event
+#define wxACTION_BUTTON_TOGGLE  wxT("toggle")    // press/release the button
+#define wxACTION_BUTTON_PRESS   wxT("press")     // press the button
+#define wxACTION_BUTTON_RELEASE wxT("release")   // release the button
+#define wxACTION_BUTTON_CLICK   wxT("click")     // generate button click event
 
 // ----------------------------------------------------------------------------
 // wxButton: a push button
Index: include/wx/univ/control.h
===================================================================
--- include/wx/univ/control.h	(revision 61618)
+++ include/wx/univ/control.h	(working copy)
@@ -32,7 +32,7 @@
 // the list of actions which apply to all controls (other actions are defined
 // in the controls headers)
 
-#define wxACTION_NONE    _T("")           // no action to perform
+#define wxACTION_NONE    wxT("")           // no action to perform
 
 // ----------------------------------------------------------------------------
 // wxControl: the base class for all GUI controls
@@ -80,7 +80,7 @@
     // return the accel char itself or 0 if none
     wxChar GetAccelChar() const
     {
-        return m_indexAccel == -1 ? _T('\0') : m_label[m_indexAccel];
+        return m_indexAccel == -1 ? wxT('\0') : m_label[m_indexAccel];
     }
 
     virtual wxWindow *GetInputWindow() const { return (wxWindow*)this; }
Index: include/wx/univ/notebook.h
===================================================================
--- include/wx/univ/notebook.h	(revision 61618)
+++ include/wx/univ/notebook.h	(working copy)
@@ -21,9 +21,9 @@
 // ----------------------------------------------------------------------------
 
 // change the page: to the next/previous/given one
-#define wxACTION_NOTEBOOK_NEXT      _T("nexttab")
-#define wxACTION_NOTEBOOK_PREV      _T("prevtab")
-#define wxACTION_NOTEBOOK_GOTO      _T("gototab")
+#define wxACTION_NOTEBOOK_NEXT      wxT("nexttab")
+#define wxACTION_NOTEBOOK_PREV      wxT("prevtab")
+#define wxACTION_NOTEBOOK_GOTO      wxT("gototab")
 
 // ----------------------------------------------------------------------------
 // wxNotebook
Index: include/wx/univ/menuitem.h
===================================================================
--- include/wx/univ/menuitem.h	(revision 61618)
+++ include/wx/univ/menuitem.h	(working copy)
@@ -72,14 +72,14 @@
 
     wxCoord GetPosition() const
     {
-        wxASSERT_MSG( m_posY != wxDefaultCoord, _T("must call SetHeight first!") );
+        wxASSERT_MSG( m_posY != wxDefaultCoord, wxT("must call SetHeight first!") );
 
         return m_posY;
     }
 
     wxCoord GetHeight() const
     {
-        wxASSERT_MSG( m_height != wxDefaultCoord, _T("must call SetHeight first!") );
+        wxASSERT_MSG( m_height != wxDefaultCoord, wxT("must call SetHeight first!") );
 
         return m_height;
     }
Index: include/wx/univ/listbox.h
===================================================================
--- include/wx/univ/listbox.h	(revision 61618)
+++ include/wx/univ/listbox.h	(working copy)
@@ -21,28 +21,28 @@
 // ----------------------------------------------------------------------------
 
 // change the current item
-#define wxACTION_LISTBOX_SETFOCUS   _T("setfocus")  // select the item
-#define wxACTION_LISTBOX_MOVEDOWN   _T("down")      // select item below
-#define wxACTION_LISTBOX_MOVEUP     _T("up")        // select item above
-#define wxACTION_LISTBOX_PAGEDOWN   _T("pagedown")  // go page down
-#define wxACTION_LISTBOX_PAGEUP     _T("pageup")    // go page up
-#define wxACTION_LISTBOX_START      _T("start")     // go to first item
-#define wxACTION_LISTBOX_END        _T("end")       // go to last item
-#define wxACTION_LISTBOX_FIND       _T("find")      // find item by 1st letter
+#define wxACTION_LISTBOX_SETFOCUS   wxT("setfocus")  // select the item
+#define wxACTION_LISTBOX_MOVEDOWN   wxT("down")      // select item below
+#define wxACTION_LISTBOX_MOVEUP     wxT("up")        // select item above
+#define wxACTION_LISTBOX_PAGEDOWN   wxT("pagedown")  // go page down
+#define wxACTION_LISTBOX_PAGEUP     wxT("pageup")    // go page up
+#define wxACTION_LISTBOX_START      wxT("start")     // go to first item
+#define wxACTION_LISTBOX_END        wxT("end")       // go to last item
+#define wxACTION_LISTBOX_FIND       wxT("find")      // find item by 1st letter
 
 // do something with the current item
-#define wxACTION_LISTBOX_ACTIVATE   _T("activate")  // activate (choose)
-#define wxACTION_LISTBOX_TOGGLE     _T("toggle")    // togglee selected state
-#define wxACTION_LISTBOX_SELECT     _T("select")    // sel this, unsel others
-#define wxACTION_LISTBOX_SELECTADD  _T("selectadd") // add to selection
-#define wxACTION_LISTBOX_UNSELECT   _T("unselect")  // unselect
-#define wxACTION_LISTBOX_ANCHOR     _T("selanchor") // anchor selection
+#define wxACTION_LISTBOX_ACTIVATE   wxT("activate")  // activate (choose)
+#define wxACTION_LISTBOX_TOGGLE     wxT("toggle")    // togglee selected state
+#define wxACTION_LISTBOX_SELECT     wxT("select")    // sel this, unsel others
+#define wxACTION_LISTBOX_SELECTADD  wxT("selectadd") // add to selection
+#define wxACTION_LISTBOX_UNSELECT   wxT("unselect")  // unselect
+#define wxACTION_LISTBOX_ANCHOR     wxT("selanchor") // anchor selection
 
 // do something with the selection globally (not for single selection ones)
-#define wxACTION_LISTBOX_SELECTALL   _T("selectall")   // select all items
-#define wxACTION_LISTBOX_UNSELECTALL _T("unselectall") // unselect all items
-#define wxACTION_LISTBOX_SELTOGGLE   _T("togglesel")   // invert the selection
-#define wxACTION_LISTBOX_EXTENDSEL   _T("extend")      // extend to item
+#define wxACTION_LISTBOX_SELECTALL   wxT("selectall")   // select all items
+#define wxACTION_LISTBOX_UNSELECTALL wxT("unselectall") // unselect all items
+#define wxACTION_LISTBOX_SELTOGGLE   wxT("togglesel")   // invert the selection
+#define wxACTION_LISTBOX_EXTENDSEL   wxT("extend")      // extend to item
 
 // ----------------------------------------------------------------------------
 // wxListBox: a list of selectable items
Index: include/wx/univ/checkbox.h
===================================================================
--- include/wx/univ/checkbox.h	(revision 61618)
+++ include/wx/univ/checkbox.h	(working copy)
@@ -18,9 +18,9 @@
 // the actions supported by wxCheckBox
 // ----------------------------------------------------------------------------
 
-#define wxACTION_CHECKBOX_CHECK   _T("check")   // SetValue(true)
-#define wxACTION_CHECKBOX_CLEAR   _T("clear")   // SetValue(false)
-#define wxACTION_CHECKBOX_TOGGLE  _T("toggle")  // toggle the check state
+#define wxACTION_CHECKBOX_CHECK   wxT("check")   // SetValue(true)
+#define wxACTION_CHECKBOX_CLEAR   wxT("clear")   // SetValue(false)
+#define wxACTION_CHECKBOX_TOGGLE  wxT("toggle")  // toggle the check state
 
 // additionally it accepts wxACTION_BUTTON_PRESS and RELEASE
 
Index: include/wx/univ/checklst.h
===================================================================
--- include/wx/univ/checklst.h	(revision 61618)
+++ include/wx/univ/checklst.h	(working copy)
@@ -16,7 +16,7 @@
 // actions
 // ----------------------------------------------------------------------------
 
-#define wxACTION_CHECKLISTBOX_TOGGLE _T("toggle")
+#define wxACTION_CHECKLISTBOX_TOGGLE wxT("toggle")
 
 // ----------------------------------------------------------------------------
 // wxCheckListBox
Index: include/wx/univ/scrolbar.h
===================================================================
--- include/wx/univ/scrolbar.h	(revision 61618)
+++ include/wx/univ/scrolbar.h	(working copy)
@@ -22,17 +22,17 @@
 // ----------------------------------------------------------------------------
 
 // scroll the bar
-#define wxACTION_SCROLL_START       _T("start")     // to the beginning
-#define wxACTION_SCROLL_END         _T("end")       // to the end
-#define wxACTION_SCROLL_LINE_UP     _T("lineup")    // one line up/left
-#define wxACTION_SCROLL_PAGE_UP     _T("pageup")    // one page up/left
-#define wxACTION_SCROLL_LINE_DOWN   _T("linedown")  // one line down/right
-#define wxACTION_SCROLL_PAGE_DOWN   _T("pagedown")  // one page down/right
+#define wxACTION_SCROLL_START       wxT("start")     // to the beginning
+#define wxACTION_SCROLL_END         wxT("end")       // to the end
+#define wxACTION_SCROLL_LINE_UP     wxT("lineup")    // one line up/left
+#define wxACTION_SCROLL_PAGE_UP     wxT("pageup")    // one page up/left
+#define wxACTION_SCROLL_LINE_DOWN   wxT("linedown")  // one line down/right
+#define wxACTION_SCROLL_PAGE_DOWN   wxT("pagedown")  // one page down/right
 
 // the scrollbar thumb may be dragged
-#define wxACTION_SCROLL_THUMB_DRAG      _T("thumbdrag")
-#define wxACTION_SCROLL_THUMB_MOVE      _T("thumbmove")
-#define wxACTION_SCROLL_THUMB_RELEASE   _T("thumbrelease")
+#define wxACTION_SCROLL_THUMB_DRAG      wxT("thumbdrag")
+#define wxACTION_SCROLL_THUMB_MOVE      wxT("thumbmove")
+#define wxACTION_SCROLL_THUMB_RELEASE   wxT("thumbrelease")
 
 // ----------------------------------------------------------------------------
 // wxScrollBar
Index: include/wx/univ/combobox.h
===================================================================
--- include/wx/univ/combobox.h	(revision 61618)
+++ include/wx/univ/combobox.h	(working copy)
@@ -22,9 +22,9 @@
 // ----------------------------------------------------------------------------
 
 // choose the next/prev/specified (by numArg) item
-#define wxACTION_COMBOBOX_SELECT_NEXT _T("next")
-#define wxACTION_COMBOBOX_SELECT_PREV _T("prev")
-#define wxACTION_COMBOBOX_SELECT      _T("select")
+#define wxACTION_COMBOBOX_SELECT_NEXT wxT("next")
+#define wxACTION_COMBOBOX_SELECT_PREV wxT("prev")
+#define wxACTION_COMBOBOX_SELECT      wxT("select")
 
 
 // ----------------------------------------------------------------------------
Index: include/wx/univ/inpcons.h
===================================================================
--- include/wx/univ/inpcons.h	(revision 61618)
+++ include/wx/univ/inpcons.h	(working copy)
@@ -28,7 +28,7 @@
 // the list of actions which apply to all controls (other actions are defined
 // in the controls headers)
 
-#define wxACTION_NONE    _T("")           // no action to perform
+#define wxACTION_NONE    wxT("")           // no action to perform
 
 // ----------------------------------------------------------------------------
 // wxInputConsumer: mix-in class for handling wxControlActions (used by
Index: include/wx/univ/textctrl.h
===================================================================
--- include/wx/univ/textctrl.h	(revision 61618)
+++ include/wx/univ/textctrl.h	(working copy)
@@ -24,43 +24,43 @@
 // ----------------------------------------------------------------------------
 
 // cursor movement and also selection and delete operations
-#define wxACTION_TEXT_GOTO          _T("goto")  // to pos in numArg
-#define wxACTION_TEXT_FIRST         _T("first") // go to pos 0
-#define wxACTION_TEXT_LAST          _T("last")  // go to last pos
-#define wxACTION_TEXT_HOME          _T("home")
-#define wxACTION_TEXT_END           _T("end")
-#define wxACTION_TEXT_LEFT          _T("left")
-#define wxACTION_TEXT_RIGHT         _T("right")
-#define wxACTION_TEXT_UP            _T("up")
-#define wxACTION_TEXT_DOWN          _T("down")
-#define wxACTION_TEXT_WORD_LEFT     _T("wordleft")
-#define wxACTION_TEXT_WORD_RIGHT    _T("wordright")
-#define wxACTION_TEXT_PAGE_UP       _T("pageup")
-#define wxACTION_TEXT_PAGE_DOWN     _T("pagedown")
+#define wxACTION_TEXT_GOTO          wxT("goto")  // to pos in numArg
+#define wxACTION_TEXT_FIRST         wxT("first") // go to pos 0
+#define wxACTION_TEXT_LAST          wxT("last")  // go to last pos
+#define wxACTION_TEXT_HOME          wxT("home")
+#define wxACTION_TEXT_END           wxT("end")
+#define wxACTION_TEXT_LEFT          wxT("left")
+#define wxACTION_TEXT_RIGHT         wxT("right")
+#define wxACTION_TEXT_UP            wxT("up")
+#define wxACTION_TEXT_DOWN          wxT("down")
+#define wxACTION_TEXT_WORD_LEFT     wxT("wordleft")
+#define wxACTION_TEXT_WORD_RIGHT    wxT("wordright")
+#define wxACTION_TEXT_PAGE_UP       wxT("pageup")
+#define wxACTION_TEXT_PAGE_DOWN     wxT("pagedown")
 
 // clipboard operations
-#define wxACTION_TEXT_COPY          _T("copy")
-#define wxACTION_TEXT_CUT           _T("cut")
-#define wxACTION_TEXT_PASTE         _T("paste")
+#define wxACTION_TEXT_COPY          wxT("copy")
+#define wxACTION_TEXT_CUT           wxT("cut")
+#define wxACTION_TEXT_PASTE         wxT("paste")
 
 // insert text at the cursor position: the text is in strArg of PerformAction
-#define wxACTION_TEXT_INSERT        _T("insert")
+#define wxACTION_TEXT_INSERT        wxT("insert")
 
 // if the action starts with either of these prefixes and the rest of the
 // string is one of the movement commands, it means to select/delete text from
 // the current cursor position to the new one
-#define wxACTION_TEXT_PREFIX_SEL    _T("sel")
-#define wxACTION_TEXT_PREFIX_DEL    _T("del")
+#define wxACTION_TEXT_PREFIX_SEL    wxT("sel")
+#define wxACTION_TEXT_PREFIX_DEL    wxT("del")
 
 // mouse selection
-#define wxACTION_TEXT_ANCHOR_SEL    _T("anchorsel")
-#define wxACTION_TEXT_EXTEND_SEL    _T("extendsel")
-#define wxACTION_TEXT_SEL_WORD      _T("wordsel")
-#define wxACTION_TEXT_SEL_LINE      _T("linesel")
+#define wxACTION_TEXT_ANCHOR_SEL    wxT("anchorsel")
+#define wxACTION_TEXT_EXTEND_SEL    wxT("extendsel")
+#define wxACTION_TEXT_SEL_WORD      wxT("wordsel")
+#define wxACTION_TEXT_SEL_LINE      wxT("linesel")
 
 // undo or redo
-#define wxACTION_TEXT_UNDO          _T("undo")
-#define wxACTION_TEXT_REDO          _T("redo")
+#define wxACTION_TEXT_UNDO          wxT("undo")
+#define wxACTION_TEXT_REDO          wxT("redo")
 
 // ----------------------------------------------------------------------------
 // wxTextCtrl
@@ -409,7 +409,7 @@
     wxCoord GetLineHeight() const
     {
         // this one should be already precalculated
-        wxASSERT_MSG( m_heightLine != -1, _T("should have line height") );
+        wxASSERT_MSG( m_heightLine != -1, wxT("should have line height") );
 
         return m_heightLine;
     }
Index: include/wx/univ/inphand.h
===================================================================
--- include/wx/univ/inphand.h	(revision 61618)
+++ include/wx/univ/inphand.h	(working copy)
@@ -20,21 +20,21 @@
 // wxTheme::GetInputHandler()
 // ----------------------------------------------------------------------------
 
-#define wxINP_HANDLER_DEFAULT           _T("")
-#define wxINP_HANDLER_BUTTON            _T("button")
-#define wxINP_HANDLER_CHECKBOX          _T("checkbox")
-#define wxINP_HANDLER_CHECKLISTBOX      _T("checklistbox")
-#define wxINP_HANDLER_COMBOBOX          _T("combobox")
-#define wxINP_HANDLER_LISTBOX           _T("listbox")
-#define wxINP_HANDLER_NOTEBOOK          _T("notebook")
-#define wxINP_HANDLER_RADIOBTN          _T("radiobtn")
-#define wxINP_HANDLER_SCROLLBAR         _T("scrollbar")
-#define wxINP_HANDLER_SLIDER            _T("slider")
-#define wxINP_HANDLER_SPINBTN           _T("spinbtn")
-#define wxINP_HANDLER_STATUSBAR         _T("statusbar")
-#define wxINP_HANDLER_TEXTCTRL          _T("textctrl")
-#define wxINP_HANDLER_TOOLBAR           _T("toolbar")
-#define wxINP_HANDLER_TOPLEVEL          _T("toplevel")
+#define wxINP_HANDLER_DEFAULT           wxT("")
+#define wxINP_HANDLER_BUTTON            wxT("button")
+#define wxINP_HANDLER_CHECKBOX          wxT("checkbox")
+#define wxINP_HANDLER_CHECKLISTBOX      wxT("checklistbox")
+#define wxINP_HANDLER_COMBOBOX          wxT("combobox")
+#define wxINP_HANDLER_LISTBOX           wxT("listbox")
+#define wxINP_HANDLER_NOTEBOOK          wxT("notebook")
+#define wxINP_HANDLER_RADIOBTN          wxT("radiobtn")
+#define wxINP_HANDLER_SCROLLBAR         wxT("scrollbar")
+#define wxINP_HANDLER_SLIDER            wxT("slider")
+#define wxINP_HANDLER_SPINBTN           wxT("spinbtn")
+#define wxINP_HANDLER_STATUSBAR         wxT("statusbar")
+#define wxINP_HANDLER_TEXTCTRL          wxT("textctrl")
+#define wxINP_HANDLER_TOOLBAR           wxT("toolbar")
+#define wxINP_HANDLER_TOPLEVEL          wxT("toplevel")
 
 // ----------------------------------------------------------------------------
 // wxInputHandler: maps the events to the actions
Index: include/wx/univ/slider.h
===================================================================
--- include/wx/univ/slider.h	(revision 61618)
+++ include/wx/univ/slider.h	(working copy)
@@ -20,17 +20,17 @@
 
 // our actions are the same as scrollbars
 
-#define wxACTION_SLIDER_START       _T("start")     // to the beginning
-#define wxACTION_SLIDER_END         _T("end")       // to the end
-#define wxACTION_SLIDER_LINE_UP     _T("lineup")    // one line up/left
-#define wxACTION_SLIDER_PAGE_UP     _T("pageup")    // one page up/left
-#define wxACTION_SLIDER_LINE_DOWN   _T("linedown")  // one line down/right
-#define wxACTION_SLIDER_PAGE_DOWN   _T("pagedown")  // one page down/right
-#define wxACTION_SLIDER_PAGE_CHANGE _T("pagechange")// change page by numArg
+#define wxACTION_SLIDER_START       wxT("start")     // to the beginning
+#define wxACTION_SLIDER_END         wxT("end")       // to the end
+#define wxACTION_SLIDER_LINE_UP     wxT("lineup")    // one line up/left
+#define wxACTION_SLIDER_PAGE_UP     wxT("pageup")    // one page up/left
+#define wxACTION_SLIDER_LINE_DOWN   wxT("linedown")  // one line down/right
+#define wxACTION_SLIDER_PAGE_DOWN   wxT("pagedown")  // one page down/right
+#define wxACTION_SLIDER_PAGE_CHANGE wxT("pagechange")// change page by numArg
 
-#define wxACTION_SLIDER_THUMB_DRAG      _T("thumbdrag")
-#define wxACTION_SLIDER_THUMB_MOVE      _T("thumbmove")
-#define wxACTION_SLIDER_THUMB_RELEASE   _T("thumbrelease")
+#define wxACTION_SLIDER_THUMB_DRAG      wxT("thumbdrag")
+#define wxACTION_SLIDER_THUMB_MOVE      wxT("thumbmove")
+#define wxACTION_SLIDER_THUMB_RELEASE   wxT("thumbrelease")
 
 // ----------------------------------------------------------------------------
 // wxSlider
Index: include/wx/object.h
===================================================================
--- include/wx/object.h	(revision 61618)
+++ include/wx/object.h	(working copy)
@@ -311,7 +311,7 @@
 #ifdef __WXDEBUG__
 inline void* wxCheckCast(void *ptr)
 {
-    wxASSERT_MSG( ptr, _T("wxStaticCast() used incorrectly") );
+    wxASSERT_MSG( ptr, wxT("wxStaticCast() used incorrectly") );
     return ptr;
 }
 #define wxStaticCast(obj, className) \
Index: include/wx/stopwatch.h
===================================================================
--- include/wx/stopwatch.h	(revision 61618)
+++ include/wx/stopwatch.h	(working copy)
@@ -40,7 +40,7 @@
     void Resume()
     {
         wxASSERT_MSG( m_pauseCount > 0,
-                      _T("Resuming stop watch which is not paused") );
+                      wxT("Resuming stop watch which is not paused") );
 
         if ( --m_pauseCount == 0 )
             Start(m_pause);
Index: include/wx/gtk1/spinctrl.h
===================================================================
--- include/wx/gtk1/spinctrl.h	(revision 61618)
+++ include/wx/gtk1/spinctrl.h	(working copy)
@@ -32,7 +32,7 @@
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -44,7 +44,7 @@
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     void SetValue(const wxString& text);
     void SetSelection(long from, long to);
Index: include/wx/gtk1/checklst.h
===================================================================
--- include/wx/gtk1/checklst.h	(revision 61618)
+++ include/wx/gtk1/checklst.h	(working copy)
@@ -18,10 +18,10 @@
 // there is no "right" choice of the checkbox indicators, so allow the user to
 // define them himself if he wants
 #ifndef wxCHECKLBOX_CHECKED
-    #define wxCHECKLBOX_CHECKED   _T('x')
-    #define wxCHECKLBOX_UNCHECKED _T(' ')
+    #define wxCHECKLBOX_CHECKED   wxT('x')
+    #define wxCHECKLBOX_UNCHECKED wxT(' ')
 
-    #define wxCHECKLBOX_STRING    _T("[ ] ")
+    #define wxCHECKLBOX_STRING    wxT("[ ] ")
 #endif
 
 //-----------------------------------------------------------------------------
Index: include/wx/filefn.h
===================================================================
--- include/wx/filefn.h	(revision 61618)
+++ include/wx/filefn.h	(working copy)
@@ -406,7 +406,7 @@
             #define wxHAS_LARGE_FFILES
         #endif
     #else
-        #define wxFileOffsetFmtSpec _T("")
+        #define wxFileOffsetFmtSpec wxT("")
     #endif
     // functions
     #define   wxClose      close
Index: include/wx/protocol/ftp.h
===================================================================
--- include/wx/protocol/ftp.h	(revision 61618)
+++ include/wx/protocol/ftp.h	(working copy)
@@ -175,7 +175,7 @@
 
 // the trace mask used by assorted wxLogTrace() in ftp code, do
 // wxLog::AddTraceMask(FTP_TRACE_MASK) to see them in output
-#define FTP_TRACE_MASK _T("ftp")
+#define FTP_TRACE_MASK wxT("ftp")
 
 #endif // wxUSE_PROTOCOL_FTP
 
Index: include/wx/imagbmp.h
===================================================================
--- include/wx/imagbmp.h	(revision 61618)
+++ include/wx/imagbmp.h	(working copy)
@@ -14,7 +14,7 @@
 
 // defines for saving the BMP file in different formats, Bits Per Pixel
 // USE: wximage.SetOption( wxIMAGE_OPTION_BMP_FORMAT, wxBMP_xBPP );
-#define wxIMAGE_OPTION_BMP_FORMAT wxString(_T("wxBMP_FORMAT"))
+#define wxIMAGE_OPTION_BMP_FORMAT wxString(wxT("wxBMP_FORMAT"))
 
 // These two options are filled in upon reading CUR file and can (should) be
 // specified when saving a CUR file - they define the hotspot of the cursor:
@@ -52,10 +52,10 @@
 public:
     wxBMPHandler()
     {
-        m_name = _T("Windows bitmap file");
-        m_extension = _T("bmp");
+        m_name = wxT("Windows bitmap file");
+        m_extension = wxT("bmp");
         m_type = wxBITMAP_TYPE_BMP;
-        m_mime = _T("image/x-bmp");
+        m_mime = wxT("image/x-bmp");
     }
 
 #if wxUSE_STREAMS
@@ -86,10 +86,10 @@
 public:
     wxICOHandler()
     {
-        m_name = _T("Windows icon file");
-        m_extension = _T("ico");
+        m_name = wxT("Windows icon file");
+        m_extension = wxT("ico");
         m_type = wxBITMAP_TYPE_ICO;
-        m_mime = _T("image/x-ico");
+        m_mime = wxT("image/x-ico");
     }
 
 #if wxUSE_STREAMS
@@ -115,10 +115,10 @@
 public:
     wxCURHandler()
     {
-        m_name = _T("Windows cursor file");
-        m_extension = _T("cur");
+        m_name = wxT("Windows cursor file");
+        m_extension = wxT("cur");
         m_type = wxBITMAP_TYPE_CUR;
-        m_mime = _T("image/x-cur");
+        m_mime = wxT("image/x-cur");
     }
 
     // VS: This handler's meat is implemented inside wxICOHandler (the two
@@ -142,10 +142,10 @@
 public:
     wxANIHandler()
     {
-        m_name = _T("Windows animated cursor file");
-        m_extension = _T("ani");
+        m_name = wxT("Windows animated cursor file");
+        m_extension = wxT("ani");
         m_type = wxBITMAP_TYPE_ANI;
-        m_mime = _T("image/x-ani");
+        m_mime = wxT("image/x-ani");
     }
 
 
Index: include/wx/tbarbase.h
===================================================================
--- include/wx/tbarbase.h	(revision 61618)
+++ include/wx/tbarbase.h	(working copy)
@@ -115,7 +115,7 @@
 
     wxControl *GetControl() const
     {
-        wxASSERT_MSG( IsControl(), _T("this toolbar tool is not a control") );
+        wxASSERT_MSG( IsControl(), wxT("this toolbar tool is not a control") );
 
         return m_control;
     }
@@ -129,7 +129,7 @@
     int GetStyle() const { return m_toolStyle; }
     wxItemKind GetKind() const
     {
-        wxASSERT_MSG( IsButton(), _T("only makes sense for buttons") );
+        wxASSERT_MSG( IsButton(), wxT("only makes sense for buttons") );
 
         return m_kind;
     }
Index: include/wx/wfstream.h
===================================================================
--- include/wx/wfstream.h	(revision 61618)
+++ include/wx/wfstream.h	(working copy)
@@ -132,7 +132,7 @@
 class WXDLLIMPEXP_BASE wxFFileInputStream : public wxInputStream
 {
 public:
-    wxFFileInputStream(const wxString& fileName, const wxChar *mode = _T("rb"));
+    wxFFileInputStream(const wxString& fileName, const wxChar *mode = wxT("rb"));
     wxFFileInputStream(wxFFile& file);
     wxFFileInputStream(FILE *file);
     virtual ~wxFFileInputStream();
@@ -160,7 +160,7 @@
 class WXDLLIMPEXP_BASE wxFFileOutputStream : public wxOutputStream
 {
 public:
-    wxFFileOutputStream(const wxString& fileName, const wxChar *mode = _T("w+b"));
+    wxFFileOutputStream(const wxString& fileName, const wxChar *mode = wxT("w+b"));
     wxFFileOutputStream(wxFFile& file);
     wxFFileOutputStream(FILE *file);
     virtual ~wxFFileOutputStream();
Index: include/wx/event.h
===================================================================
--- include/wx/event.h	(revision 61618)
+++ include/wx/event.h	(working copy)
@@ -451,7 +451,7 @@
     wxPropagateOnce(wxEvent& event) : m_event(event)
     {
         wxASSERT_MSG( m_event.m_propagationLevel > 0,
-                        _T("shouldn't be used unless ShouldPropagate()!") );
+                        wxT("shouldn't be used unless ShouldPropagate()!") );
 
         m_event.m_propagationLevel--;
     }
@@ -1398,7 +1398,7 @@
         // m_loggingOff flag is only used by wxEVT_[QUERY_]END_SESSION, it
         // doesn't make sense for wxEVT_CLOSE_WINDOW
         wxASSERT_MSG( m_eventType != wxEVT_CLOSE_WINDOW,
-                      _T("this flag is for end session events only") );
+                      wxT("this flag is for end session events only") );
 
         return m_loggingOff;
     }
Index: include/wx/version.h
===================================================================
--- include/wx/version.h	(revision 61618)
+++ include/wx/version.h	(working copy)
@@ -30,7 +30,7 @@
 #define wxMINOR_VERSION      8
 #define wxRELEASE_NUMBER     10
 #define wxSUBRELEASE_NUMBER  0
-#define wxVERSION_STRING   _T("wxWidgets 2.8.10")
+#define wxVERSION_STRING   wxT("wxWidgets 2.8.10")
 
 /*  nothing to update below this line when updating the version */
 /*  ---------------------------------------------------------------------------- */
@@ -54,7 +54,7 @@
 #define wxMAKE_VERSION_STRING_T(x, y, z) \
     wxSTRINGIZE_T(x) wxSTRINGIZE_T(y) wxSTRINGIZE_T(z)
 #define wxMAKE_VERSION_DOT_STRING_T(x, y, z) \
-    wxSTRINGIZE_T(x) _T(".") wxSTRINGIZE_T(y) _T(".") wxSTRINGIZE_T(z)
+    wxSTRINGIZE_T(x) wxT(".") wxSTRINGIZE_T(y) wxT(".") wxSTRINGIZE_T(z)
 
 /*  these are used by src/msw/version.rc and should always be ASCII, not Unicode */
 #define wxVERSION_NUM_STRING \
Index: include/wx/mimetype.h
===================================================================
--- include/wx/mimetype.h	(revision 61618)
+++ include/wx/mimetype.h	(working copy)
@@ -51,12 +51,12 @@
 public:
     // all string ctors here
 
-    wxString GetType() const { return BeforeFirst(_T('/')); }
-    wxString GetSubType() const { return AfterFirst(_T('/')); }
+    wxString GetType() const { return BeforeFirst(wxT('/')); }
+    wxString GetSubType() const { return AfterFirst(wxT('/')); }
 
     void SetSubType(const wxString& subtype)
     {
-        *this = GetType() + _T('/') + subtype;
+        *this = GetType() + wxT('/') + subtype;
     }
 
     bool Matches(const wxMimeType& wildcard)
Index: include/wx/confbase.h
===================================================================
--- include/wx/confbase.h	(revision 61618)
+++ include/wx/confbase.h	(working copy)
@@ -30,13 +30,13 @@
 
 /// separates group and entry names (probably shouldn't be changed)
 #ifndef wxCONFIG_PATH_SEPARATOR
-  #define   wxCONFIG_PATH_SEPARATOR     _T('/')
+  #define   wxCONFIG_PATH_SEPARATOR     wxT('/')
 #endif
 
 /// introduces immutable entries
 // (i.e. the ones which can't be changed from the local config file)
 #ifndef wxCONFIG_IMMUTABLE_PREFIX
-  #define   wxCONFIG_IMMUTABLE_PREFIX   _T('!')
+  #define   wxCONFIG_IMMUTABLE_PREFIX   wxT('!')
 #endif
 
 #if wxUSE_CONFIG
Index: include/wx/cppunit.h
===================================================================
--- include/wx/cppunit.h	(revision 61618)
+++ include/wx/cppunit.h	(working copy)
@@ -69,7 +69,7 @@
     if (Condition) \
         { anyTest; } \
     else \
-        wxLogInfo(wxString::Format(_T("skipping: %s.%s\n  reason: %s equals false\n"), \
+        wxLogInfo(wxString::Format(wxT("skipping: %s.%s\n  reason: %s equals false\n"), \
                                     wxString(suiteName, wxConvUTF8).c_str(), \
                                     wxString(#testMethod, wxConvUTF8).c_str(), \
                                     wxString(#Condition, wxConvUTF8).c_str()))
Index: include/wx/ffile.h
===================================================================
--- include/wx/ffile.h	(revision 61618)
+++ include/wx/ffile.h	(working copy)
@@ -37,13 +37,13 @@
     // def ctor
   wxFFile() { m_fp = NULL; }
     // open specified file (may fail, use IsOpened())
-  wxFFile(const wxChar *filename, const wxChar *mode = _T("r"));
+  wxFFile(const wxChar *filename, const wxChar *mode = wxT("r"));
     // attach to (already opened) file
   wxFFile(FILE *lfp) { m_fp = lfp; }
 
   // open/close
     // open a file (existing or not - the mode controls what happens)
-  bool Open(const wxChar *filename, const wxChar *mode = _T("r"));
+  bool Open(const wxChar *filename, const wxChar *mode = wxT("r"));
     // closes the opened file (this is a NOP if not opened)
   bool Close();
 
Index: include/wx/sound.h
===================================================================
--- include/wx/sound.h	(revision 61618)
+++ include/wx/sound.h	(working copy)
@@ -43,7 +43,7 @@
     {
         wxASSERT_MSG( (flags & wxSOUND_LOOP) == 0 ||
                       (flags & wxSOUND_ASYNC) != 0,
-                     _T("sound can only be looped asynchronously") );
+                     wxT("sound can only be looped asynchronously") );
         return DoPlay(flags);
     }
 #if WXWIN_COMPATIBILITY_2_4
Index: include/wx/selstore.h
===================================================================
--- include/wx/selstore.h	(revision 61618)
+++ include/wx/selstore.h	(working copy)
@@ -51,7 +51,7 @@
     void Clear() { m_itemsSel.Clear(); m_count = 0; m_defaultState = false; }
 
     // must be called when a new item is inserted/added
-    void OnItemAdd(size_t WXUNUSED(item)) { wxFAIL_MSG( _T("TODO") ); }
+    void OnItemAdd(size_t WXUNUSED(item)) { wxFAIL_MSG( wxT("TODO") ); }
 
     // must be called when an item is deleted
     void OnItemDelete(size_t item);
Index: include/wx/filename.h
===================================================================
--- include/wx/filename.h	(revision 61618)
+++ include/wx/filename.h	(working copy)
@@ -494,10 +494,10 @@
     static wxULongLong GetSize(const wxString &file);
 
         // returns the size in a human readable form
-    wxString GetHumanReadableSize(const wxString &nullsize = wxGetTranslation(_T("Not available")),
+    wxString GetHumanReadableSize(const wxString &nullsize = wxGetTranslation(wxT("Not available")),
                                   int precision = 1) const;
     static wxString GetHumanReadableSize(const wxULongLong &sz,
-                                         const wxString &nullsize = wxGetTranslation(_T("Not available")),
+                                         const wxString &nullsize = wxGetTranslation(wxT("Not available")),
                                          int precision = 1);
 
 
Index: include/wx/x11/textctrl.h
===================================================================
--- include/wx/x11/textctrl.h	(revision 61618)
+++ include/wx/x11/textctrl.h	(working copy)
@@ -321,43 +321,43 @@
 //-----------------------------------------------------------------------------
 
 // cursor movement and also selection and delete operations
-#define wxACTION_TEXT_GOTO          _T("goto")  // to pos in numArg
-#define wxACTION_TEXT_FIRST         _T("first") // go to pos 0
-#define wxACTION_TEXT_LAST          _T("last")  // go to last pos
-#define wxACTION_TEXT_HOME          _T("home")
-#define wxACTION_TEXT_END           _T("end")
-#define wxACTION_TEXT_LEFT          _T("left")
-#define wxACTION_TEXT_RIGHT         _T("right")
-#define wxACTION_TEXT_UP            _T("up")
-#define wxACTION_TEXT_DOWN          _T("down")
-#define wxACTION_TEXT_WORD_LEFT     _T("wordleft")
-#define wxACTION_TEXT_WORD_RIGHT    _T("wordright")
-#define wxACTION_TEXT_PAGE_UP       _T("pageup")
-#define wxACTION_TEXT_PAGE_DOWN     _T("pagedown")
+#define wxACTION_TEXT_GOTO          wxT("goto")  // to pos in numArg
+#define wxACTION_TEXT_FIRST         wxT("first") // go to pos 0
+#define wxACTION_TEXT_LAST          wxT("last")  // go to last pos
+#define wxACTION_TEXT_HOME          wxT("home")
+#define wxACTION_TEXT_END           wxT("end")
+#define wxACTION_TEXT_LEFT          wxT("left")
+#define wxACTION_TEXT_RIGHT         wxT("right")
+#define wxACTION_TEXT_UP            wxT("up")
+#define wxACTION_TEXT_DOWN          wxT("down")
+#define wxACTION_TEXT_WORD_LEFT     wxT("wordleft")
+#define wxACTION_TEXT_WORD_RIGHT    wxT("wordright")
+#define wxACTION_TEXT_PAGE_UP       wxT("pageup")
+#define wxACTION_TEXT_PAGE_DOWN     wxT("pagedown")
 
 // clipboard operations
-#define wxACTION_TEXT_COPY          _T("copy")
-#define wxACTION_TEXT_CUT           _T("cut")
-#define wxACTION_TEXT_PASTE         _T("paste")
+#define wxACTION_TEXT_COPY          wxT("copy")
+#define wxACTION_TEXT_CUT           wxT("cut")
+#define wxACTION_TEXT_PASTE         wxT("paste")
 
 // insert text at the cursor position: the text is in strArg of PerformAction
-#define wxACTION_TEXT_INSERT        _T("insert")
+#define wxACTION_TEXT_INSERT        wxT("insert")
 
 // if the action starts with either of these prefixes and the rest of the
 // string is one of the movement commands, it means to select/delete text from
 // the current cursor position to the new one
-#define wxACTION_TEXT_PREFIX_SEL    _T("sel")
-#define wxACTION_TEXT_PREFIX_DEL    _T("del")
+#define wxACTION_TEXT_PREFIX_SEL    wxT("sel")
+#define wxACTION_TEXT_PREFIX_DEL    wxT("del")
 
 // mouse selection
-#define wxACTION_TEXT_ANCHOR_SEL    _T("anchorsel")
-#define wxACTION_TEXT_EXTEND_SEL    _T("extendsel")
-#define wxACTION_TEXT_SEL_WORD      _T("wordsel")
-#define wxACTION_TEXT_SEL_LINE      _T("linesel")
+#define wxACTION_TEXT_ANCHOR_SEL    wxT("anchorsel")
+#define wxACTION_TEXT_EXTEND_SEL    wxT("extendsel")
+#define wxACTION_TEXT_SEL_WORD      wxT("wordsel")
+#define wxACTION_TEXT_SEL_LINE      wxT("linesel")
 
 // undo or redo
-#define wxACTION_TEXT_UNDO          _T("undo")
-#define wxACTION_TEXT_REDO          _T("redo")
+#define wxACTION_TEXT_UNDO          wxT("undo")
+#define wxACTION_TEXT_REDO          wxT("redo")
 
 // ----------------------------------------------------------------------------
 // wxTextCtrl types
Index: include/wx/palette.h
===================================================================
--- include/wx/palette.h	(revision 61618)
+++ include/wx/palette.h	(working copy)
@@ -27,7 +27,7 @@
 
     virtual bool Ok() const { return IsOk(); }
     virtual bool IsOk() const = 0;
-    virtual int GetColoursCount() const { wxFAIL_MSG( _T("not implemented") ); return 0; }
+    virtual int GetColoursCount() const { wxFAIL_MSG( wxT("not implemented") ); return 0; }
 };
 
 #if defined(__WXPALMOS__)
Index: include/wx/debugrpt.h
===================================================================
--- include/wx/debugrpt.h	(revision 61618)
+++ include/wx/debugrpt.h	(working copy)
@@ -161,7 +161,7 @@
     wxDebugReportUpload(const wxString& url,
                         const wxString& input,
                         const wxString& action,
-                        const wxString& curl = _T("curl"));
+                        const wxString& curl = wxT("curl"));
 
 protected:
     virtual bool DoProcess();
Index: include/wx/msgdlg.h
===================================================================
--- include/wx/msgdlg.h	(revision 61618)
+++ include/wx/msgdlg.h	(working copy)
@@ -23,10 +23,10 @@
     void SetMessageDialogStyle(long style)
     {
         wxASSERT_MSG( ((style & wxYES_NO) == wxYES_NO) || ((style & wxYES_NO) == 0),
-                      _T("wxYES and wxNO may only be used together in wxMessageDialog") );
+                      wxT("wxYES and wxNO may only be used together in wxMessageDialog") );
 
         wxASSERT_MSG( (style & wxID_OK) != wxID_OK,
-                      _T("wxMessageBox: Did you mean wxOK (and not wxID_OK)?") );
+                      wxT("wxMessageBox: Did you mean wxOK (and not wxID_OK)?") );
 
         m_dialogStyle = style;
     }
Index: include/wx/debug.h
===================================================================
--- include/wx/debug.h	(revision 61618)
+++ include/wx/debug.h	(working copy)
@@ -123,13 +123,13 @@
       if ( cond )                                                             \
       {}                                                                      \
       else                                                                    \
-          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, _T(#cond), msg)
+          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, wxT(#cond), msg)
   #else
     #define wxASSERT_MSG(cond, msg)                                           \
       if ( cond )                                                             \
           ;                                                                   \
       else                                                                    \
-          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, _T(#cond), msg)
+          wxOnAssert(__TFILE__, __LINE__, __WXFUNCTION__, wxT(#cond), msg)
   #endif
 
   /*  special form of assert: always triggers it (in debug mode) */
@@ -140,7 +140,7 @@
 
   /*  FAIL with some message and a condition */
   #define wxFAIL_COND_MSG(cond, msg)                                          \
-      wxOnAssert(__TFILE__, __LINE__,  __WXFUNCTION__, _T(cond), msg)
+      wxOnAssert(__TFILE__, __LINE__,  __WXFUNCTION__, wxT(cond), msg)
 
   /*  An assert helper used to avoid warning when testing constant expressions, */
   /*  i.e. wxASSERT( sizeof(int) == 4 ) can generate a compiler warning about */
Index: include/wx/vlbox.h
===================================================================
--- include/wx/vlbox.h	(revision 61618)
+++ include/wx/vlbox.h	(working copy)
@@ -17,7 +17,7 @@
 
 class WXDLLIMPEXP_FWD_CORE wxSelectionStore;
 
-#define wxVListBoxNameStr _T("wxVListBox")
+#define wxVListBoxNameStr wxT("wxVListBox")
 
 // ----------------------------------------------------------------------------
 // wxVListBox
@@ -86,7 +86,7 @@
     int GetSelection() const
     {
         wxASSERT_MSG( !HasMultipleSelection(),
-                        _T("GetSelection() can't be used with wxLB_MULTIPLE") );
+                        wxT("GetSelection() can't be used with wxLB_MULTIPLE") );
 
         return m_current;
     }
Index: include/wx/tokenzr.h
===================================================================
--- include/wx/tokenzr.h	(revision 61618)
+++ include/wx/tokenzr.h	(working copy)
@@ -21,7 +21,7 @@
 // ----------------------------------------------------------------------------
 
 // default: delimiters are usual white space characters
-#define wxDEFAULT_DELIMITERS (_T(" \t\r\n"))
+#define wxDEFAULT_DELIMITERS (wxT(" \t\r\n"))
 
 // wxStringTokenizer mode flags which determine its behaviour
 enum wxStringTokenizerMode
Index: include/wx/intl.h
===================================================================
--- include/wx/intl.h	(revision 61618)
+++ include/wx/intl.h	(working copy)
@@ -45,13 +45,13 @@
 // --keyword="_" --keyword="wxPLURAL:1,2" options
 // to extract the strings from the sources)
 #ifndef WXINTL_NO_GETTEXT_MACRO
-    #define _(s)                     wxGetTranslation(_T(s))
-    #define wxPLURAL(sing, plur, n)  wxGetTranslation(_T(sing), _T(plur), n)
+    #define _(s)                     wxGetTranslation(wxT(s))
+    #define wxPLURAL(sing, plur, n)  wxGetTranslation(wxT(sing), wxT(plur), n)
 #endif
 
 // another one which just marks the strings for extraction, but doesn't
 // perform the translation (use -kwxTRANSLATE with xgettext!)
-#define wxTRANSLATE(str) _T(str)
+#define wxTRANSLATE(str) wxT(str)
 
 // ----------------------------------------------------------------------------
 // forward decls
@@ -603,12 +603,12 @@
 
 #if !defined(WXINTL_NO_GETTEXT_MACRO)
     #if !defined(_)
-        #define _(s)                 (_T(s))
+        #define _(s)                 (wxT(s))
     #endif
-    #define wxPLURAL(sing, plur, n)  ((n) == 1 ? _T(sing) : _T(plur))
+    #define wxPLURAL(sing, plur, n)  ((n) == 1 ? wxT(sing) : wxT(plur))
 #endif
 
-#define wxTRANSLATE(str) _T(str)
+#define wxTRANSLATE(str) wxT(str)
 
 inline const wxChar *
 wxGetTranslation(const wxChar *sz, const wxChar * WXUNUSED(domain) = NULL)
@@ -622,10 +622,10 @@
 // wxTRANSLATE) too
 #if !defined(WXINTL_NO_GETTEXT_MACRO)
     #if !defined(gettext_noop)
-        #define gettext_noop(str) _T(str)
+        #define gettext_noop(str) wxT(str)
     #endif
     #if !defined(N_)
-        #define N_(s)             _T(s)
+        #define N_(s)             wxT(s)
     #endif
 #endif
 
Index: include/wx/artprov.h
===================================================================
--- include/wx/artprov.h	(revision 61618)
+++ include/wx/artprov.h	(working copy)
@@ -27,10 +27,10 @@
 typedef wxString wxArtClient;
 typedef wxString wxArtID;
 
-#define wxART_MAKE_CLIENT_ID_FROM_STR(id)  (id + _T("_C"))
-#define wxART_MAKE_CLIENT_ID(id)           _T(#id) _T("_C")
+#define wxART_MAKE_CLIENT_ID_FROM_STR(id)  (id + wxT("_C"))
+#define wxART_MAKE_CLIENT_ID(id)           wxT(#id) wxT("_C")
 #define wxART_MAKE_ART_ID_FROM_STR(id)     (id)
-#define wxART_MAKE_ART_ID(id)              _T(#id)
+#define wxART_MAKE_ART_ID(id)              wxT(#id)
 
 // ----------------------------------------------------------------------------
 // Art clients
Index: include/wx/dbtable.h
===================================================================
--- include/wx/dbtable.h	(revision 61618)
+++ include/wx/dbtable.h	(working copy)
@@ -305,7 +305,7 @@
     HSTMT          *NewCursor(bool setCursor = false, bool bindColumns = true) {  return GetNewCursor(setCursor,bindColumns); }
 #endif
 
-    ULONG           Count(const wxString &args=_T("*"));
+    ULONG           Count(const wxString &args=wxT("*"));
     int             DB_STATUS(void) { return(pDb->DB_STATUS); }
 
     bool            IsColNull(UWORD colNumber) const;
Index: include/wx/string.h
===================================================================
--- include/wx/string.h	(revision 61618)
+++ include/wx/string.h	(working copy)
@@ -70,7 +70,7 @@
 
 // implementation only
 #define   wxASSERT_VALID_INDEX(i) \
-    wxASSERT_MSG( (size_t)(i) <= length(), _T("invalid index in wxString") )
+    wxASSERT_MSG( (size_t)(i) <= length(), wxT("invalid index in wxString") )
 
 // ----------------------------------------------------------------------------
 // constants
@@ -349,7 +349,7 @@
   wxStringBase(const wxStringBase& stringSrc)
   {
     wxASSERT_MSG( stringSrc.GetStringData()->IsValid(),
-                  _T("did you forget to call UngetWriteBuf()?") );
+                  wxT("did you forget to call UngetWriteBuf()?") );
 
     if ( stringSrc.empty() ) {
       // nothing to do for an empty string
@@ -376,7 +376,7 @@
   wxStringBase(const wxStringBase& str, size_t nPos, size_t nLen)
   {
     wxASSERT_MSG( str.GetStringData()->IsValid(),
-                  _T("did you forget to call UngetWriteBuf()?") );
+                  wxT("did you forget to call UngetWriteBuf()?") );
     Init();
     size_t strLen = str.length() - nPos; nLen = strLen < nLen ? strLen : nLen;
     InitWith(str.c_str(), nPos, nLen);
@@ -754,7 +754,7 @@
   {
     Truncate(0);
 
-    wxASSERT_MSG( empty(), _T("string not empty after call to Empty()?") );
+    wxASSERT_MSG( empty(), wxT("string not empty after call to Empty()?") );
   }
     // empty the string and free memory
   void Clear()
@@ -785,7 +785,7 @@
     // get last character
     wxChar  Last() const
       {
-          wxASSERT_MSG( !empty(), _T("wxString: index out of bounds") );
+          wxASSERT_MSG( !empty(), wxT("wxString: index out of bounds") );
 
           return at(length() - 1);
       }
@@ -793,7 +793,7 @@
     // get writable last character
     wxChar& Last()
       {
-          wxASSERT_MSG( !empty(), _T("wxString: index out of bounds") );
+          wxASSERT_MSG( !empty(), wxT("wxString: index out of bounds") );
           return at(length() - 1);
       }
 
@@ -993,7 +993,7 @@
   {
 #if !wxUSE_STL
     wxASSERT_MSG( s.GetStringData()->IsValid(),
-                  _T("did you forget to call UngetWriteBuf()?") );
+                  wxT("did you forget to call UngetWriteBuf()?") );
 #endif
 
     append(s);
@@ -1058,36 +1058,36 @@
   // stream-like functions
       // insert an int into string
   wxString& operator<<(int i)
-    { return (*this) << Format(_T("%d"), i); }
+    { return (*this) << Format(wxT("%d"), i); }
       // insert an unsigned int into string
   wxString& operator<<(unsigned int ui)
-    { return (*this) << Format(_T("%u"), ui); }
+    { return (*this) << Format(wxT("%u"), ui); }
       // insert a long into string
   wxString& operator<<(long l)
-    { return (*this) << Format(_T("%ld"), l); }
+    { return (*this) << Format(wxT("%ld"), l); }
       // insert an unsigned long into string
   wxString& operator<<(unsigned long ul)
-    { return (*this) << Format(_T("%lu"), ul); }
+    { return (*this) << Format(wxT("%lu"), ul); }
 #if defined wxLongLong_t && !defined wxLongLongIsLong
       // insert a long long if they exist and aren't longs
   wxString& operator<<(wxLongLong_t ll)
     {
-      const wxChar *fmt = _T("%") wxLongLongFmtSpec _T("d");
+      const wxChar *fmt = wxT("%") wxLongLongFmtSpec wxT("d");
       return (*this) << Format(fmt, ll);
     }
       // insert an unsigned long long
   wxString& operator<<(wxULongLong_t ull)
     {
-      const wxChar *fmt = _T("%") wxLongLongFmtSpec _T("u");
+      const wxChar *fmt = wxT("%") wxLongLongFmtSpec wxT("u");
       return (*this) << Format(fmt , ull);
     }
 #endif
       // insert a float into string
   wxString& operator<<(float f)
-    { return (*this) << Format(_T("%f"), f); }
+    { return (*this) << Format(wxT("%f"), f); }
       // insert a double into string
   wxString& operator<<(double d)
-    { return (*this) << Format(_T("%g"), d); }
+    { return (*this) << Format(wxT("%g"), d); }
 
   // string comparison
     // case-sensitive comparison (returns a value < 0, = 0 or > 0)
Index: include/wx/buffer.h
===================================================================
--- include/wx/buffer.h	(revision 61618)
+++ include/wx/buffer.h	(working copy)
@@ -286,7 +286,7 @@
     // Other ways to append to the buffer
     void  AppendByte(char data)
     {
-        wxCHECK_RET( m_bufdata->m_data, _T("invalid wxMemoryBuffer") );
+        wxCHECK_RET( m_bufdata->m_data, wxT("invalid wxMemoryBuffer") );
 
         m_bufdata->ResizeIfNeeded(m_bufdata->m_len + 1);
         *(((char*)m_bufdata->m_data) + m_bufdata->m_len) = data;
Index: include/wx/dbgrid.h
===================================================================
--- include/wx/dbgrid.h	(revision 61618)
+++ include/wx/dbgrid.h	(working copy)
@@ -23,7 +23,7 @@
 #include "wx/grid.h"
 #include "wx/dbkeyg.h"
 
-#define wxGRID_VALUE_DBAUTO     _T("dbauto")
+#define wxGRID_VALUE_DBAUTO     wxT("dbauto")
 
 WX_DECLARE_USER_EXPORTED_OBJARRAY(GenericKey,keyarray,WXDLLIMPEXP_DBGRID);
 
@@ -119,12 +119,12 @@
 
     virtual int GetNumberRows()
     {
-        wxLogDebug(_T(" GetNumberRows() = %i"),m_rowtotal);
+        wxLogDebug(wxT(" GetNumberRows() = %i"),m_rowtotal);
         return m_rowtotal;
     }
     virtual int GetNumberCols()
     {
-        wxLogDebug(_T(" GetNumberCols() = %i"),m_nocols);
+        wxLogDebug(wxT(" GetNumberCols() = %i"),m_nocols);
         return m_nocols;
     }
     virtual bool     IsEmptyCell(int row, int col) ;
Index: include/wx/datetime.h
===================================================================
--- include/wx/datetime.h	(revision 61618)
+++ include/wx/datetime.h	(working copy)
@@ -951,37 +951,37 @@
 
     inline bool operator<(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() < dt.GetValue();
     }
 
     inline bool operator<=(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() <= dt.GetValue();
     }
 
     inline bool operator>(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() > dt.GetValue();
     }
 
     inline bool operator>=(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() >= dt.GetValue();
     }
 
     inline bool operator==(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() == dt.GetValue();
     }
 
     inline bool operator!=(const wxDateTime& dt) const
     {
-        wxASSERT_MSG( IsValid() && dt.IsValid(), _T("invalid wxDateTime") );
+        wxASSERT_MSG( IsValid() && dt.IsValid(), wxT("invalid wxDateTime") );
         return GetValue() != dt.GetValue();
     }
 
@@ -1075,15 +1075,15 @@
     wxString Format(const wxChar *format = wxDefaultDateTimeFormat,
                     const TimeZone& tz = Local) const;
         // preferred date representation for the current locale
-    wxString FormatDate() const { return Format(_T("%x")); }
+    wxString FormatDate() const { return Format(wxT("%x")); }
         // preferred time representation for the current locale
-    wxString FormatTime() const { return Format(_T("%X")); }
+    wxString FormatTime() const { return Format(wxT("%X")); }
         // returns the string representing the date in ISO 8601 format
         // (YYYY-MM-DD)
-    wxString FormatISODate() const { return Format(_T("%Y-%m-%d")); }
+    wxString FormatISODate() const { return Format(wxT("%Y-%m-%d")); }
         // returns the string representing the time in ISO 8601 format
         // (HH:MM:SS)
-    wxString FormatISOTime() const { return Format(_T("%H:%M:%S")); }
+    wxString FormatISOTime() const { return Format(wxT("%H:%M:%S")); }
 
     // implementation
     // ------------------------------------------------------------------------
@@ -1647,7 +1647,7 @@
 
 inline wxDateTime& wxDateTime::Set(const Tm& tm)
 {
-    wxASSERT_MSG( tm.IsValid(), _T("invalid broken down date/time") );
+    wxASSERT_MSG( tm.IsValid(), wxT("invalid broken down date/time") );
 
     return Set(tm.mday, (Month)tm.mon, tm.year,
                tm.hour, tm.min, tm.sec, tm.msec);
@@ -1678,14 +1678,14 @@
 
 inline wxLongLong wxDateTime::GetValue() const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     return m_time;
 }
 
 inline time_t wxDateTime::GetTicks() const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
     if ( !IsInStdRange() )
     {
         return (time_t)-1;
@@ -1753,21 +1753,21 @@
 
 inline bool wxDateTime::IsEqualTo(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return m_time == datetime.m_time;
 }
 
 inline bool wxDateTime::IsEarlierThan(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return m_time < datetime.m_time;
 }
 
 inline bool wxDateTime::IsLaterThan(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return m_time > datetime.m_time;
 }
@@ -1824,14 +1824,14 @@
 
 inline wxDateTime wxDateTime::Add(const wxTimeSpan& diff) const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     return wxDateTime(m_time + diff.GetValue());
 }
 
 inline wxDateTime& wxDateTime::Add(const wxTimeSpan& diff)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     m_time += diff.GetValue();
 
@@ -1845,14 +1845,14 @@
 
 inline wxDateTime wxDateTime::Subtract(const wxTimeSpan& diff) const
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     return wxDateTime(m_time - diff.GetValue());
 }
 
 inline wxDateTime& wxDateTime::Subtract(const wxTimeSpan& diff)
 {
-    wxASSERT_MSG( IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid(), wxT("invalid wxDateTime"));
 
     m_time -= diff.GetValue();
 
@@ -1866,7 +1866,7 @@
 
 inline wxTimeSpan wxDateTime::Subtract(const wxDateTime& datetime) const
 {
-    wxASSERT_MSG( IsValid() && datetime.IsValid(), _T("invalid wxDateTime"));
+    wxASSERT_MSG( IsValid() && datetime.IsValid(), wxT("invalid wxDateTime"));
 
     return wxTimeSpan(GetValue() - datetime.GetValue());
 }
Index: include/wx/gtk/spinctrl.h
===================================================================
--- include/wx/gtk/spinctrl.h	(revision 61618)
+++ include/wx/gtk/spinctrl.h	(working copy)
@@ -26,7 +26,7 @@
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -38,7 +38,7 @@
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     void SetValue(const wxString& text);
     void SetSelection(long from, long to);
Index: include/wx/gtk/checklst.h
===================================================================
--- include/wx/gtk/checklst.h	(revision 61618)
+++ include/wx/gtk/checklst.h	(working copy)
@@ -18,10 +18,10 @@
 // there is no "right" choice of the checkbox indicators, so allow the user to
 // define them himself if he wants
 #ifndef wxCHECKLBOX_CHECKED
-    #define wxCHECKLBOX_CHECKED   _T('x')
-    #define wxCHECKLBOX_UNCHECKED _T(' ')
+    #define wxCHECKLBOX_CHECKED   wxT('x')
+    #define wxCHECKLBOX_UNCHECKED wxT(' ')
 
-    #define wxCHECKLBOX_STRING    _T("[ ] ")
+    #define wxCHECKLBOX_STRING    wxT("[ ] ")
 #endif
 
 //-----------------------------------------------------------------------------
Index: include/wx/xrc/xmlres.h
===================================================================
--- include/wx/xrc/xmlres.h	(revision 61618)
+++ include/wx/xrc/xmlres.h	(working copy)
@@ -59,7 +59,7 @@
 #define WX_XMLRES_CURRENT_VERSION_MINOR            5
 #define WX_XMLRES_CURRENT_VERSION_RELEASE          3
 #define WX_XMLRES_CURRENT_VERSION_REVISION         0
-#define WX_XMLRES_CURRENT_VERSION_STRING       _T("2.5.3.0")
+#define WX_XMLRES_CURRENT_VERSION_STRING       wxT("2.5.3.0")
 
 #define WX_XMLRES_CURRENT_VERSION \
                 (WX_XMLRES_CURRENT_VERSION_MAJOR * 256*256*256 + \
Index: include/wx/image.h
===================================================================
--- include/wx/image.h	(revision 61618)
+++ include/wx/image.h	(working copy)
@@ -27,14 +27,14 @@
 // which breaks the compilation below
 #undef index
 
-#define wxIMAGE_OPTION_QUALITY  wxString(_T("quality"))
-#define wxIMAGE_OPTION_FILENAME wxString(_T("FileName"))
+#define wxIMAGE_OPTION_QUALITY  wxString(wxT("quality"))
+#define wxIMAGE_OPTION_FILENAME wxString(wxT("FileName"))
 
-#define wxIMAGE_OPTION_RESOLUTION            wxString(_T("Resolution"))
-#define wxIMAGE_OPTION_RESOLUTIONX           wxString(_T("ResolutionX"))
-#define wxIMAGE_OPTION_RESOLUTIONY           wxString(_T("ResolutionY"))
+#define wxIMAGE_OPTION_RESOLUTION            wxString(wxT("Resolution"))
+#define wxIMAGE_OPTION_RESOLUTIONX           wxString(wxT("ResolutionX"))
+#define wxIMAGE_OPTION_RESOLUTIONY           wxString(wxT("ResolutionY"))
 
-#define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(_T("ResolutionUnit"))
+#define wxIMAGE_OPTION_RESOLUTIONUNIT        wxString(wxT("ResolutionUnit"))
 
 // constants used with wxIMAGE_OPTION_RESOLUTIONUNIT
 enum
Index: include/wx/imagtiff.h
===================================================================
--- include/wx/imagtiff.h	(revision 61618)
+++ include/wx/imagtiff.h	(working copy)
@@ -21,10 +21,10 @@
 #include "wx/image.h"
 
 // defines for wxImage::SetOption
-#define wxIMAGE_OPTION_BITSPERSAMPLE               wxString(_T("BitsPerSample"))
-#define wxIMAGE_OPTION_SAMPLESPERPIXEL             wxString(_T("SamplesPerPixel"))
-#define wxIMAGE_OPTION_COMPRESSION                 wxString(_T("Compression"))
-#define wxIMAGE_OPTION_IMAGEDESCRIPTOR             wxString(_T("ImageDescriptor"))
+#define wxIMAGE_OPTION_BITSPERSAMPLE               wxString(wxT("BitsPerSample"))
+#define wxIMAGE_OPTION_SAMPLESPERPIXEL             wxString(wxT("SamplesPerPixel"))
+#define wxIMAGE_OPTION_COMPRESSION                 wxString(wxT("Compression"))
+#define wxIMAGE_OPTION_IMAGEDESCRIPTOR             wxString(wxT("ImageDescriptor"))
 
 class WXDLLEXPORT wxTIFFHandler: public wxImageHandler
 {
Index: include/wx/cshelp.h
===================================================================
--- include/wx/cshelp.h	(revision 61618)
+++ include/wx/cshelp.h	(working copy)
@@ -134,7 +134,7 @@
                                  const wxPoint& pt,
                                  wxHelpEvent::Origin origin)
     {
-        wxCHECK_MSG( window, false, _T("window must not be NULL") );
+        wxCHECK_MSG( window, false, wxT("window must not be NULL") );
 
         m_helptextAtPoint = pt;
         m_helptextOrigin = origin;
Index: include/wx/longlong.h
===================================================================
--- include/wx/longlong.h	(revision 61618)
+++ include/wx/longlong.h	(working copy)
@@ -177,7 +177,7 @@
     long ToLong() const
     {
         wxASSERT_MSG( (m_ll >= LONG_MIN) && (m_ll <= LONG_MAX),
-                      _T("wxLongLong to long conversion loss of precision") );
+                      wxT("wxLongLong to long conversion loss of precision") );
 
         return wx_truncate_cast(long, m_ll);
     }
@@ -405,7 +405,7 @@
     unsigned long ToULong() const
     {
         wxASSERT_MSG( m_ll <= LONG_MAX,
-                      _T("wxULongLong to long conversion loss of precision") );
+                      wxT("wxULongLong to long conversion loss of precision") );
 
         return wx_truncate_cast(unsigned long, m_ll);
     }
@@ -683,7 +683,7 @@
     long ToLong() const
     {
         wxASSERT_MSG( (m_hi == 0l) || (m_hi == -1l),
-                      _T("wxLongLong to long conversion loss of precision") );
+                      wxT("wxLongLong to long conversion loss of precision") );
 
         return (long)m_lo;
     }
@@ -908,7 +908,7 @@
     unsigned long ToULong() const
     {
         wxASSERT_MSG( m_hi == 0ul,
-                      _T("wxULongLong to long conversion loss of precision") );
+                      wxT("wxULongLong to long conversion loss of precision") );
 
         return (unsigned long)m_lo;
     }
Index: include/wx/dcbuffer.h
===================================================================
--- include/wx/dcbuffer.h	(revision 61618)
+++ include/wx/dcbuffer.h	(working copy)
@@ -100,8 +100,8 @@
     // blitting to) is destroyed.
     void UnMask()
     {
-        wxCHECK_RET( m_dc, _T("no underlying wxDC?") );
-        wxASSERT_MSG( m_buffer && m_buffer->IsOk(), _T("invalid backing store") );
+        wxCHECK_RET( m_dc, wxT("no underlying wxDC?") );
+        wxASSERT_MSG( m_buffer && m_buffer->IsOk(), wxT("invalid backing store") );
 
         wxCoord x = 0,
                 y = 0;
@@ -122,7 +122,7 @@
     // common part of Init()s
     void InitCommon(wxDC *dc, int style)
     {
-        wxASSERT_MSG( !m_dc, _T("wxBufferedDC already initialised") );
+        wxASSERT_MSG( !m_dc, wxT("wxBufferedDC already initialised") );
 
         m_dc = dc;
         m_style = style;
Index: include/wx/dcmirror.h
===================================================================
--- include/wx/dcmirror.h	(revision 61618)
+++ include/wx/dcmirror.h	(working copy)
@@ -135,7 +135,7 @@
                            wxCoord x2, wxCoord y2,
                            wxCoord xc, wxCoord yc)
     {
-        wxFAIL_MSG( _T("this is probably wrong") );
+        wxFAIL_MSG( wxT("this is probably wrong") );
 
         m_dc.DoDrawArc(GetX(x1, y1), GetY(x1, y1),
                        GetX(x2, y2), GetY(x2, y2),
@@ -152,7 +152,7 @@
     virtual void DoDrawEllipticArc(wxCoord x, wxCoord y, wxCoord w, wxCoord h,
                                    double sa, double ea)
     {
-        wxFAIL_MSG( _T("this is probably wrong") );
+        wxFAIL_MSG( wxT("this is probably wrong") );
 
         m_dc.DoDrawEllipticArc(GetX(x, y), GetY(x, y),
                                GetX(w, h), GetY(w, h),
@@ -256,7 +256,7 @@
 
     virtual void DoSetClippingRegionAsRegion(const wxRegion& WXUNUSED(region))
     {
-        wxFAIL_MSG( _T("not implemented") );
+        wxFAIL_MSG( wxT("not implemented") );
     }
 
     virtual void DoSetClippingRegion(wxCoord x, wxCoord y,
Index: include/wx/dynlib.h
===================================================================
--- include/wx/dynlib.h	(revision 61618)
+++ include/wx/dynlib.h	(working copy)
@@ -116,7 +116,7 @@
 // type only once, as the first parameter, and creating a variable of this type
 // called "pfn<name>" initialized with the "name" from the "dynlib"
 #define wxDYNLIB_FUNCTION(type, name, dynlib) \
-    type pfn ## name = (type)(dynlib).GetSymbol(_T(#name))
+    type pfn ## name = (type)(dynlib).GetSymbol(wxT(#name))
 
 // ----------------------------------------------------------------------------
 // wxDynamicLibraryDetails: contains details about a loaded wxDynamicLibrary
Index: include/wx/private/fileback.h
===================================================================
--- include/wx/private/fileback.h	(revision 61618)
+++ include/wx/private/fileback.h	(working copy)
@@ -33,7 +33,7 @@
     // backing file is never created and the backing is done with memory.
     wxBackingFile(wxInputStream *stream,
                   size_t bufsize = DefaultBufSize,
-                  const wxString& prefix = _T("wxbf"));
+                  const wxString& prefix = wxT("wxbf"));
 
     wxBackingFile() : m_impl(NULL) { }
     ~wxBackingFile();
Index: include/wx/generic/combo.h
===================================================================
--- include/wx/generic/combo.h	(revision 61618)
+++ include/wx/generic/combo.h	(working copy)
@@ -26,8 +26,8 @@
 // all actions of single line text controls are supported
 
 // popup/dismiss the choice window
-#define wxACTION_COMBOBOX_POPUP     _T("popup")
-#define wxACTION_COMBOBOX_DISMISS   _T("dismiss")
+#define wxACTION_COMBOBOX_POPUP     wxT("popup")
+#define wxACTION_COMBOBOX_DISMISS   wxT("dismiss")
 
 #endif
 
Index: include/wx/generic/splitter.h
===================================================================
--- include/wx/generic/splitter.h	(revision 61618)
+++ include/wx/generic/splitter.h	(working copy)
@@ -91,7 +91,7 @@
     void SetSplitMode(int mode)
     {
         wxASSERT_MSG( mode == wxSPLIT_VERTICAL || mode == wxSPLIT_HORIZONTAL,
-                      _T("invalid split mode") );
+                      wxT("invalid split mode") );
 
         m_splitMode = (wxSplitMode)mode;
     }
Index: include/wx/generic/gridctrl.h
===================================================================
--- include/wx/generic/gridctrl.h	(revision 61618)
+++ include/wx/generic/gridctrl.h	(working copy)
@@ -16,8 +16,8 @@
 
 #if wxUSE_GRID
 
-#define wxGRID_VALUE_CHOICEINT    _T("choiceint")
-#define wxGRID_VALUE_DATETIME     _T("datetime")
+#define wxGRID_VALUE_CHOICEINT    wxT("choiceint")
+#define wxGRID_VALUE_DATETIME     wxT("datetime")
 
 #if wxUSE_DATETIME
 
Index: include/wx/generic/spinctlg.h
===================================================================
--- include/wx/generic/spinctlg.h	(revision 61618)
+++ include/wx/generic/spinctlg.h	(working copy)
@@ -41,7 +41,7 @@
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Init();
         Create(parent, id, value, pos, size, style, min, max, initial, name);
@@ -54,7 +54,7 @@
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"));
+                const wxString& name = wxT("wxSpinCtrl"));
 
     virtual ~wxSpinCtrl();
 
@@ -125,7 +125,7 @@
                const wxSize& size = wxDefaultSize,
                long style = wxSP_ARROW_KEYS,
                int min = 0, int max = 100, int initial = 0,
-               const wxString& name = _T("wxSpinCtrl"))
+               const wxString& name = wxT("wxSpinCtrl"))
     {
         Create(parent, id, value, pos, size, style, min, max, initial, name);
     }
@@ -137,7 +137,7 @@
                 const wxSize& size = wxDefaultSize,
                 long style = wxSP_ARROW_KEYS,
                 int min = 0, int max = 100, int initial = 0,
-                const wxString& name = _T("wxSpinCtrl"))
+                const wxString& name = wxT("wxSpinCtrl"))
     {
         SetRange(min, max);
 
Index: include/wx/generic/calctrl.h
===================================================================
--- include/wx/generic/calctrl.h	(revision 61618)
+++ include/wx/generic/calctrl.h	(working copy)
@@ -19,7 +19,7 @@
 class WXDLLIMPEXP_FWD_CORE wxStaticText;
 class WXDLLIMPEXP_FWD_CORE wxSpinCtrl;
 
-#define wxCalendarNameStr _T("CalendarCtrl")
+#define wxCalendarNameStr wxT("CalendarCtrl")
 
 // ----------------------------------------------------------------------------
 // wxCalendarCtrl: a control allowing the user to pick a date interactively
@@ -124,14 +124,14 @@
 
     wxCalendarDateAttr *GetAttr(size_t day) const
     {
-        wxCHECK_MSG( day > 0 && day < 32, NULL, _T("invalid day") );
+        wxCHECK_MSG( day > 0 && day < 32, NULL, wxT("invalid day") );
 
         return m_attrs[day - 1];
     }
 
     void SetAttr(size_t day, wxCalendarDateAttr *attr)
     {
-        wxCHECK_RET( day > 0 && day < 32, _T("invalid day") );
+        wxCHECK_RET( day > 0 && day < 32, wxT("invalid day") );
 
         delete m_attrs[day - 1];
         m_attrs[day - 1] = attr;
Index: include/wx/generic/grid.h
===================================================================
--- include/wx/generic/grid.h	(revision 61618)
+++ include/wx/generic/grid.h	(working copy)
@@ -42,11 +42,11 @@
 #define WXGRID_DEFAULT_SCROLLBAR_WIDTH        16
 
 // type names for grid table values
-#define wxGRID_VALUE_STRING     _T("string")
-#define wxGRID_VALUE_BOOL       _T("bool")
-#define wxGRID_VALUE_NUMBER     _T("long")
-#define wxGRID_VALUE_FLOAT      _T("double")
-#define wxGRID_VALUE_CHOICE     _T("choice")
+#define wxGRID_VALUE_STRING     wxT("string")
+#define wxGRID_VALUE_BOOL       wxT("bool")
+#define wxGRID_VALUE_NUMBER     wxT("long")
+#define wxGRID_VALUE_FLOAT      wxT("double")
+#define wxGRID_VALUE_CHOICE     wxT("choice")
 
 #define wxGRID_VALUE_TEXT wxGRID_VALUE_STRING
 #define wxGRID_VALUE_LONG wxGRID_VALUE_NUMBER
@@ -472,7 +472,7 @@
 
     // string representation of m_valueOld
     wxString GetString() const
-        { return wxString::Format(_T("%ld"), m_valueOld); }
+        { return wxString::Format(wxT("%ld"), m_valueOld); }
 
 private:
     int m_min,
@@ -552,7 +552,7 @@
 
     // set the string values returned by GetValue() for the true and false
     // states, respectively
-    static void UseStringValues(const wxString& valueTrue = _T("1"),
+    static void UseStringValues(const wxString& valueTrue = wxT("1"),
                                 const wxString& valueFalse = wxEmptyString);
 
     // return true if the given string is equal to the string representation of
Index: include/wx/cocoa/dirdlg.h
===================================================================
--- include/wx/cocoa/dirdlg.h	(revision 61618)
+++ include/wx/cocoa/dirdlg.h	(working copy)
@@ -26,7 +26,7 @@
 public:
     wxDirDialog(wxWindow *parent,
                 const wxString& message = wxDirSelectorPromptStr,
-                const wxString& defaultPath = _T(""),
+                const wxString& defaultPath = wxT(""),
                 long style = wxDD_DEFAULT_STYLE,
                 const wxPoint& pos = wxDefaultPosition,
                 const wxSize& size = wxDefaultSize,
Index: include/wx/glcanvas.h
===================================================================
--- include/wx/glcanvas.h	(revision 61618)
+++ include/wx/glcanvas.h	(working copy)
@@ -44,7 +44,7 @@
     WX_GL_MIN_ACCUM_ALPHA  /* use alpha buffer with most bits (> MIN_ACCUM_ALPHA bits) */
 };
 
-#define wxGLCanvasName _T("GLCanvas")
+#define wxGLCanvasName wxT("GLCanvas")
 
 #if defined(__WXMSW__)
 #include "wx/msw/glcanvas.h"
Index: include/wx/spinbutt.h
===================================================================
--- include/wx/spinbutt.h	(revision 61618)
+++ include/wx/spinbutt.h	(working copy)
@@ -23,7 +23,7 @@
 #include "wx/control.h"
 #include "wx/event.h"
 
-#define wxSPIN_BUTTON_NAME _T("wxSpinButton")
+#define wxSPIN_BUTTON_NAME wxT("wxSpinButton")
 
 // ----------------------------------------------------------------------------
 //  The wxSpinButton is like a small scrollbar than is often placed next
Index: include/wx/vector.h
===================================================================
--- include/wx/vector.h	(revision 61618)
+++ include/wx/vector.h	(working copy)
@@ -105,7 +105,7 @@
     {
         if ( !Alloc(n) )
         {
-            wxFAIL_MSG( _T("out of memory in wxVector::reserve()") );
+            wxFAIL_MSG( wxT("out of memory in wxVector::reserve()") );
         }
     }
 
Index: include/wx/defs.h
===================================================================
--- include/wx/defs.h	(revision 61618)
+++ include/wx/defs.h	(working copy)
@@ -915,28 +915,28 @@
 #if (defined(__VISUALC__) && defined(__WIN32__))
     #define wxLongLong_t __int64
     #define wxLongLongSuffix i64
-    #define wxLongLongFmtSpec _T("I64")
+    #define wxLongLongFmtSpec wxT("I64")
 #elif defined(__BORLANDC__) && defined(__WIN32__) && (__BORLANDC__ >= 0x520)
     #define wxLongLong_t __int64
     #define wxLongLongSuffix i64
-    #define wxLongLongFmtSpec _T("L")
+    #define wxLongLongFmtSpec wxT("L")
 #elif (defined(__WATCOMC__) && (defined(__WIN32__) || defined(__DOS__) || defined(__OS2__)))
       #define wxLongLong_t __int64
       #define wxLongLongSuffix i64
-      #define wxLongLongFmtSpec _T("L")
+      #define wxLongLongFmtSpec wxT("L")
 #elif defined(__DIGITALMARS__)
       #define wxLongLong_t __int64
       #define wxLongLongSuffix LL
-      #define wxLongLongFmtSpec _T("ll")
+      #define wxLongLongFmtSpec wxT("ll")
 #elif defined(__MINGW32__)
     #define wxLongLong_t long long
     #define wxLongLongSuffix ll
-    #define wxLongLongFmtSpec _T("I64")
+    #define wxLongLongFmtSpec wxT("I64")
 #elif defined(__MWERKS__)
     #if __option(longlong)
         #define wxLongLong_t long long
         #define wxLongLongSuffix ll
-        #define wxLongLongFmtSpec _T("ll")
+        #define wxLongLongFmtSpec wxT("ll")
     #else
         #error "The 64 bit integer support in CodeWarrior has been disabled."
         #error "See the documentation on the 'longlong' pragma."
@@ -944,7 +944,7 @@
 #elif defined(__WXPALMOS__)
     #define wxLongLong_t int64_t
     #define wxLongLongSuffix ll
-    #define wxLongLongFmtSpec _T("ll")
+    #define wxLongLongFmtSpec wxT("ll")
 #elif defined(__VISAGECPP__) && __IBMCPP__ >= 400
     #define wxLongLong_t long long
 #elif (defined(SIZEOF_LONG_LONG) && SIZEOF_LONG_LONG >= 8)  || \
@@ -954,11 +954,11 @@
         (defined(__DJGPP__) && __DJGPP__ >= 2)
     #define wxLongLong_t long long
     #define wxLongLongSuffix ll
-    #define wxLongLongFmtSpec _T("ll")
+    #define wxLongLongFmtSpec wxT("ll")
 #elif defined(SIZEOF_LONG) && (SIZEOF_LONG == 8)
     #define wxLongLong_t long
     #define wxLongLongSuffix l
-    #define wxLongLongFmtSpec _T("l")
+    #define wxLongLongFmtSpec wxT("l")
     #define wxLongLongIsLong
 #endif
 
Index: utils/wxrc/wxrc.cpp
===================================================================
--- utils/wxrc/wxrc.cpp	(revision 61618)
+++ utils/wxrc/wxrc.cpp	(working copy)
@@ -63,9 +63,9 @@
         wxXmlNode* children;
         while (node)
         {
-            if (node->GetName() == _T("object")
-                && node->GetPropVal(_T("class"),&classValue)
-                && node->GetPropVal(_T("name"),&nameValue))
+            if (node->GetName() == wxT("object")
+                && node->GetPropVal(wxT("class"),&classValue)
+                && node->GetPropVal(wxT("name"),&nameValue))
             {
                 m_wdata.Add(XRCWidgetData(nameValue,classValue));
             }
@@ -82,24 +82,24 @@
                     const wxXmlNode* node) :
         m_className(className) , m_parentClassName(parentClassName)
     {
-        if ( className == _T("wxMenu") )
+        if ( className == wxT("wxMenu") )
         {
-            m_ancestorClassNames.insert(_T("wxMenu"));
-            m_ancestorClassNames.insert(_T("wxMenuBar"));
+            m_ancestorClassNames.insert(wxT("wxMenu"));
+            m_ancestorClassNames.insert(wxT("wxMenuBar"));
         }
-        else if ( className == _T("wxMDIChildFrame") )
+        else if ( className == wxT("wxMDIChildFrame") )
         {
-            m_ancestorClassNames.insert(_T("wxMDIParentFrame"));
+            m_ancestorClassNames.insert(wxT("wxMDIParentFrame"));
         }
-        else if( className == _T("wxMenuBar") ||
-                    className == _T("wxStatusBar") ||
-                        className == _T("wxToolBar") )
+        else if( className == wxT("wxMenuBar") ||
+                    className == wxT("wxStatusBar") ||
+                        className == wxT("wxToolBar") )
         {
-            m_ancestorClassNames.insert(_T("wxFrame"));
+            m_ancestorClassNames.insert(wxT("wxFrame"));
         }
         else
         {
-            m_ancestorClassNames.insert(_T("wxWindow"));
+            m_ancestorClassNames.insert(wxT("wxWindow"));
         }
 
         BrowseXmlNode(node->GetChildren());
@@ -112,16 +112,16 @@
 
     bool IsRealClass(const wxString& name)
     {
-        if (name == _T("tool") ||
-            name == _T("data") ||
-            name == _T("unknown") ||
-            name == _T("notebookpage") ||
-            name == _T("separator") ||
-            name == _T("sizeritem") ||
-            name == _T("wxMenu") ||
-            name == _T("wxMenuBar") ||
-            name == _T("wxMenuItem") ||
-            name.EndsWith(_T("Sizer")) )
+        if (name == wxT("tool") ||
+            name == wxT("data") ||
+            name == wxT("unknown") ||
+            name == wxT("notebookpage") ||
+            name == wxT("separator") ||
+            name == wxT("sizeritem") ||
+            name == wxT("wxMenu") ||
+            name == wxT("wxMenuBar") ||
+            name == wxT("wxMenuItem") ||
+            name.EndsWith(wxT("Sizer")) )
         {
             return false;
         }
@@ -131,8 +131,8 @@
     void GenerateHeaderCode(wxFFile& file)
     {
 
-        file.Write(_T("class ") + m_className + _T(" : public ") + m_parentClassName
-                   + _T(" {\nprotected:\n"));
+        file.Write(wxT("class ") + m_className + wxT(" : public ") + m_parentClassName
+                   + wxT(" {\nprotected:\n"));
         size_t i;
         for(i=0;i<m_wdata.Count();++i)
         {
@@ -140,60 +140,60 @@
             if( !IsRealClass(w.GetClass()) ) continue;
             if( w.GetName().Length() == 0 ) continue;
             file.Write(
-                _T(" ") + w.GetClass() + _T("* ") + w.GetName()
-                + _T(";\n"));
+                wxT(" ") + w.GetClass() + wxT("* ") + w.GetName()
+                + wxT(";\n"));
         }
-        file.Write(_T("\nprivate:\n void InitWidgetsFromXRC(wxWindow *parent){\n")
-                   _T("  wxXmlResource::Get()->LoadObject(this,parent,_T(\"")
+        file.Write(wxT("\nprivate:\n void InitWidgetsFromXRC(wxWindow *parent){\n")
+                   wxT("  wxXmlResource::Get()->LoadObject(this,parent,wxT(\"")
                    +  m_className
-                   +  _T("\"), _T(\"")
+                   +  wxT("\"), wxT(\"")
                    +  m_parentClassName
-                   +  _T("\"));\n"));
+                   +  wxT("\"));\n"));
         for(i=0;i<m_wdata.Count();++i)
         {
             const XRCWidgetData& w = m_wdata.Item(i);
             if( !IsRealClass(w.GetClass()) ) continue;
             if( w.GetName().Length() == 0 ) continue;
-            file.Write( _T("  ")
+            file.Write( wxT("  ")
                         + w.GetName()
-                        + _T(" = XRCCTRL(*this,\"")
+                        + wxT(" = XRCCTRL(*this,\"")
                         + w.GetName()
-                        + _T("\",")
+                        + wxT("\",")
                         + w.GetClass()
-                        + _T(");\n"));
+                        + wxT(");\n"));
         }
-        file.Write(_T(" }\n"));
+        file.Write(wxT(" }\n"));
 
-        file.Write( _T("public:\n"));
+        file.Write( wxT("public:\n"));
 
         if ( m_ancestorClassNames.size() == 1 )
         {
             file.Write
                  (
                     m_className +
-                    _T("(") +
+                    wxT("(") +
                         *m_ancestorClassNames.begin() +
-                        _T(" *parent=NULL){\n") +
-                    _T("  InitWidgetsFromXRC((wxWindow *)parent);\n")
-                    _T(" }\n")
-                    _T("};\n")
+                        wxT(" *parent=NULL){\n") +
+                    wxT("  InitWidgetsFromXRC((wxWindow *)parent);\n")
+                    wxT(" }\n")
+                    wxT("};\n")
                  );
         }
         else
         {
-            file.Write(m_className + _T("(){\n") +
-                       _T("  InitWidgetsFromXRC(NULL);\n")
-                       _T(" }\n")
-                       _T("};\n"));
+            file.Write(m_className + wxT("(){\n") +
+                       wxT("  InitWidgetsFromXRC(NULL);\n")
+                       wxT(" }\n")
+                       wxT("};\n"));
 
             for ( StringSet::const_iterator it = m_ancestorClassNames.begin();
                   it != m_ancestorClassNames.end();
                   ++it )
             {
-                file.Write(m_className + _T("(") + *it + _T(" *parent){\n") +
-                            _T("  InitWidgetsFromXRC((wxWindow *)parent);\n")
-                            _T(" }\n")
-                            _T("};\n"));
+                file.Write(m_className + wxT("(") + *it + wxT(" *parent){\n") +
+                            wxT("  InitWidgetsFromXRC((wxWindow *)parent);\n")
+                            wxT(" }\n")
+                            wxT("};\n"));
             }
         }
     }
@@ -241,19 +241,19 @@
 {
     static const wxCmdLineEntryDesc cmdLineDesc[] =
     {
-        { wxCMD_LINE_SWITCH, _T("h"), _T("help"),  _T("show help message"),
+        { wxCMD_LINE_SWITCH, wxT("h"), wxT("help"),  wxT("show help message"),
               wxCMD_LINE_VAL_NONE, wxCMD_LINE_OPTION_HELP },
-        { wxCMD_LINE_SWITCH, _T("v"), _T("verbose"), _T("be verbose"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("e"), _T("extra-cpp-code"),  _T("output C++ header file with XRC derived classes"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("c"), _T("cpp-code"),  _T("output C++ source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("p"), _T("python-code"),  _T("output wxPython source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_SWITCH, _T("g"), _T("gettext"),  _T("output list of translatable strings (to stdout or file if -o used)"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_OPTION, _T("n"), _T("function"),  _T("C++/Python function name (with -c or -p) [InitXmlResource]"), (wxCmdLineParamType)0, 0 },
-        { wxCMD_LINE_OPTION, _T("o"), _T("output"),  _T("output file [resource.xrs/cpp]"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("v"), wxT("verbose"), wxT("be verbose"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("e"), wxT("extra-cpp-code"),  wxT("output C++ header file with XRC derived classes"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("c"), wxT("cpp-code"),  wxT("output C++ source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("p"), wxT("python-code"),  wxT("output wxPython source rather than .rsc file"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_SWITCH, wxT("g"), wxT("gettext"),  wxT("output list of translatable strings (to stdout or file if -o used)"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_OPTION, wxT("n"), wxT("function"),  wxT("C++/Python function name (with -c or -p) [InitXmlResource]"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_OPTION, wxT("o"), wxT("output"),  wxT("output file [resource.xrs/cpp]"), (wxCmdLineParamType)0, 0 },
 #if 0 // not yet implemented
-        { wxCMD_LINE_OPTION, _T("l"), _T("list-of-handlers"),  _T("output list of necessary handlers to this file"), (wxCmdLineParamType)0, 0 },
+        { wxCMD_LINE_OPTION, wxT("l"), wxT("list-of-handlers"),  wxT("output list of necessary handlers to this file"), (wxCmdLineParamType)0, 0 },
 #endif
-        { wxCMD_LINE_PARAM,  NULL, NULL, _T("input file(s)"),
+        { wxCMD_LINE_PARAM,  NULL, NULL, wxT("input file(s)"),
               wxCMD_LINE_VAL_STRING,
               wxCMD_LINE_PARAM_MULTIPLE | wxCMD_LINE_OPTION_MANDATORY },
 
@@ -284,25 +284,25 @@
 
 void XmlResApp::ParseParams(const wxCmdLineParser& cmdline)
 {
-    flagGettext = cmdline.Found(_T("g"));
-    flagVerbose = cmdline.Found(_T("v"));
-    flagCPP = cmdline.Found(_T("c"));
-    flagPython = cmdline.Found(_T("p"));
-    flagH = flagCPP && cmdline.Found(_T("e"));
+    flagGettext = cmdline.Found(wxT("g"));
+    flagVerbose = cmdline.Found(wxT("v"));
+    flagCPP = cmdline.Found(wxT("c"));
+    flagPython = cmdline.Found(wxT("p"));
+    flagH = flagCPP && cmdline.Found(wxT("e"));
 
 
-    if (!cmdline.Found(_T("o"), &parOutput))
+    if (!cmdline.Found(wxT("o"), &parOutput))
     {
         if (flagGettext)
             parOutput = wxEmptyString;
         else
         {
             if (flagCPP)
-                parOutput = _T("resource.cpp");
+                parOutput = wxT("resource.cpp");
             else if (flagPython)
-                parOutput = _T("resource.py");
+                parOutput = wxT("resource.py");
             else
-                parOutput = _T("resource.xrs");
+                parOutput = wxT("resource.xrs");
         }
     }
     if (!parOutput.empty())
@@ -312,10 +312,10 @@
         parOutput = fn.GetFullPath();
         parOutputPath = wxPathOnly(parOutput);
     }
-    if (!parOutputPath) parOutputPath = _T(".");
+    if (!parOutputPath) parOutputPath = wxT(".");
 
-    if (!cmdline.Found(_T("n"), &parFuncname))
-        parFuncname = _T("InitXmlResource");
+    if (!cmdline.Found(wxT("n"), &parFuncname))
+        parFuncname = wxT("InitXmlResource");
 
     for (size_t i = 0; i < cmdline.GetParamCount(); i++)
     {
@@ -361,19 +361,19 @@
 wxString XmlResApp::GetInternalFileName(const wxString& name, const wxArrayString& flist)
 {
     wxString name2 = name;
-    name2.Replace(_T(":"), _T("_"));
-    name2.Replace(_T("/"), _T("_"));
-    name2.Replace(_T("\\"), _T("_"));
-    name2.Replace(_T("*"), _T("_"));
-    name2.Replace(_T("?"), _T("_"));
+    name2.Replace(wxT(":"), wxT("_"));
+    name2.Replace(wxT("/"), wxT("_"));
+    name2.Replace(wxT("\\"), wxT("_"));
+    name2.Replace(wxT("*"), wxT("_"));
+    name2.Replace(wxT("?"), wxT("_"));
 
-    wxString s = wxFileNameFromPath(parOutput) + _T("$") + name2;
+    wxString s = wxFileNameFromPath(parOutput) + wxT("$") + name2;
 
     if (wxFileExists(s) && flist.Index(s) == wxNOT_FOUND)
     {
         for (int i = 0;; i++)
         {
-            s.Printf(wxFileNameFromPath(parOutput) + _T("$%03i-") + name2, i);
+            s.Printf(wxFileNameFromPath(parOutput) + wxT("$%03i-") + name2, i);
             if (!wxFileExists(s) || flist.Index(s) != wxNOT_FOUND)
                 break;
         }
@@ -388,13 +388,13 @@
     for (size_t i = 0; i < parFiles.Count(); i++)
     {
         if (flagVerbose)
-            wxPrintf(_T("processing ") + parFiles[i] +  _T("...\n"));
+            wxPrintf(wxT("processing ") + parFiles[i] +  wxT("...\n"));
 
         wxXmlDocument doc;
 
         if (!doc.Load(parFiles[i]))
         {
-            wxLogError(_T("Error parsing file ") + parFiles[i]);
+            wxLogError(wxT("Error parsing file ") + parFiles[i]);
             retCode = 1;
             continue;
         }
@@ -408,9 +408,9 @@
             wxXmlNode* node = (doc.GetRoot())->GetChildren();
                 wxString classValue,nameValue;
                 while(node){
-                    if(node->GetName() == _T("object")
-                     && node->GetPropVal(_T("class"),&classValue)
-                     && node->GetPropVal(_T("name"),&nameValue)){
+                    if(node->GetName() == wxT("object")
+                     && node->GetPropVal(wxT("class"),&classValue)
+                     && node->GetPropVal(wxT("name"),&nameValue)){
 
                       aXRCWndClassData.Add(
                         XRCWndClassData(nameValue,classValue,node)
@@ -435,34 +435,34 @@
    const wxString name = node->GetName();
 
    // Any bitmaps (bitmap2 is used for disabled toolbar buttons):
-   if ( name == _T("bitmap") || name == _T("bitmap2") )
+   if ( name == wxT("bitmap") || name == wxT("bitmap2") )
        return true;
 
-   if ( name == _T("icon") )
+   if ( name == wxT("icon") )
        return true;
 
    // wxBitmapButton:
    wxXmlNode *parent = node->GetParent();
    if (parent != NULL &&
-       parent->GetPropVal(_T("class"), _T("")) == _T("wxBitmapButton") &&
-       (name == _T("focus") ||
-        name == _T("disabled") ||
-        name == _T("hover") ||
-        name == _T("selected")))
+       parent->GetPropVal(wxT("class"), wxT("")) == wxT("wxBitmapButton") &&
+       (name == wxT("focus") ||
+        name == wxT("disabled") ||
+        name == wxT("hover") ||
+        name == wxT("selected")))
        return true;
 
    // wxBitmap or wxIcon toplevel resources:
-   if ( name == _T("object") )
+   if ( name == wxT("object") )
    {
-       wxString klass = node->GetPropVal(_T("class"), wxEmptyString);
-       if (klass == _T("wxBitmap") || klass == _T("wxIcon"))
+       wxString klass = node->GetPropVal(wxT("class"), wxEmptyString);
+       if (klass == wxT("wxBitmap") || klass == wxT("wxIcon"))
            return true;
    }
 
    // URLs in wxHtmlWindow:
-   if ( name == _T("url") &&
+   if ( name == wxT("url") &&
         parent != NULL &&
-        parent->GetPropVal(_T("class"), _T("")) == _T("wxHtmlWindow") )
+        parent->GetPropVal(wxT("class"), wxT("")) == wxT("wxHtmlWindow") )
    {
        // FIXME: this is wrong for e.g. http:// URLs
        return true;
@@ -494,7 +494,7 @@
                 fullname = inputPath + wxFILE_SEP_PATH + n->GetContent();
 
             if (flagVerbose)
-                wxPrintf(_T("adding     ") + fullname +  _T("...\n"));
+                wxPrintf(wxT("adding     ") + fullname +  wxT("...\n"));
 
             wxString filename = GetInternalFileName(n->GetContent(), flist);
             n->SetContent(filename);
@@ -530,22 +530,22 @@
     wxString files;
 
     for (size_t i = 0; i < flist.Count(); i++)
-        files += flist[i] + _T(" ");
+        files += flist[i] + wxT(" ");
     files.RemoveLast();
 
     if (flagVerbose)
-        wxPrintf(_T("compressing ") + parOutput +  _T("...\n"));
+        wxPrintf(wxT("compressing ") + parOutput +  wxT("...\n"));
 
     wxString cwd = wxGetCwd();
     wxSetWorkingDirectory(parOutputPath);
-    int execres = wxExecute(_T("zip -9 -j ") +
-                            wxString(flagVerbose ? _T("\"") : _T("-q \"")) +
-                            parOutput + _T("\" ") + files, true);
+    int execres = wxExecute(wxT("zip -9 -j ") +
+                            wxString(flagVerbose ? wxT("\"") : wxT("-q \"")) +
+                            parOutput + wxT("\" ") + files, true);
     wxSetWorkingDirectory(cwd);
     if (execres == -1)
     {
-        wxLogError(_T("Unable to execute zip program. Make sure it is in the path."));
-        wxLogError(_T("You can download it at http://www.cdrom.com/pub/infozip/"));
+        wxLogError(wxT("Unable to execute zip program. Make sure it is in the path."));
+        wxLogError(wxT("You can download it at http://www.cdrom.com/pub/infozip/"));
         retCode = 1;
         return;
     }
@@ -565,9 +565,9 @@
     const size_t lng = wx_truncate_cast(size_t, offset);
     wxASSERT_MSG( !(lng - offset), wxT("Huge file not supported") );
 
-    snum.Printf(_T("%i"), num);
-    output.Printf(_T("static size_t xml_res_size_") + snum + _T(" = %i;\n"), lng);
-    output += _T("static unsigned char xml_res_file_") + snum + _T("[] = {\n");
+    snum.Printf(wxT("%i"), num);
+    output.Printf(wxT("static size_t xml_res_size_") + snum + wxT(" = %i;\n"), lng);
+    output += wxT("static unsigned char xml_res_file_") + snum + wxT("[] = {\n");
     // we cannot use string literals because MSVC is dumb wannabe compiler
     // with arbitrary limitation to 2048 strings :(
 
@@ -576,12 +576,12 @@
 
     for (size_t i = 0, linelng = 0; i < lng; i++)
     {
-        tmp.Printf(_T("%i"), buffer[i]);
-        if (i != 0) output << _T(',');
+        tmp.Printf(wxT("%i"), buffer[i]);
+        if (i != 0) output << wxT(',');
         if (linelng > 70)
         {
             linelng = 0;
-            output << _T("\n");
+            output << wxT("\n");
         }
         output << tmp;
         linelng += tmp.Length()+1;
@@ -589,7 +589,7 @@
 
     delete[] buffer;
 
-    output += _T("};\n\n");
+    output += wxT("};\n\n");
 
     return output;
 }
@@ -601,51 +601,51 @@
     size_t i;
 
     if (flagVerbose)
-        wxPrintf(_T("creating C++ source file ") + parOutput +  _T("...\n"));
+        wxPrintf(wxT("creating C++ source file ") + parOutput +  wxT("...\n"));
 
-    file.Write(_T("")
-_T("//\n")
-_T("// This file was automatically generated by wxrc, do not edit by hand.\n")
-_T("//\n\n")
-_T("#include <wx/wxprec.h>\n")
-_T("\n")
-_T("#ifdef __BORLANDC__\n")
-_T("    #pragma hdrstop\n")
-_T("#endif\n")
-_T("\n")
-_T("")
-_T("#include <wx/filesys.h>\n")
-_T("#include <wx/fs_mem.h>\n")
-_T("#include <wx/xrc/xmlres.h>\n")
-_T("#include <wx/xrc/xh_all.h>\n")
-_T("\n")
-_T("#if wxCHECK_VERSION(2,8,5) && wxABI_VERSION >= 20805\n")
-_T("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
-_T("        wxMemoryFSHandler::AddFileWithMimeType(name, data, size, mime)\n")
-_T("#else\n")
-_T("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
-_T("        wxMemoryFSHandler::AddFile(name, data, size)\n")
-_T("#endif\n")
-_T("\n"));
+    file.Write(wxT("")
+wxT("//\n")
+wxT("// This file was automatically generated by wxrc, do not edit by hand.\n")
+wxT("//\n\n")
+wxT("#include <wx/wxprec.h>\n")
+wxT("\n")
+wxT("#ifdef __BORLANDC__\n")
+wxT("    #pragma hdrstop\n")
+wxT("#endif\n")
+wxT("\n")
+wxT("")
+wxT("#include <wx/filesys.h>\n")
+wxT("#include <wx/fs_mem.h>\n")
+wxT("#include <wx/xrc/xmlres.h>\n")
+wxT("#include <wx/xrc/xh_all.h>\n")
+wxT("\n")
+wxT("#if wxCHECK_VERSION(2,8,5) && wxABI_VERSION >= 20805\n")
+wxT("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
+wxT("        wxMemoryFSHandler::AddFileWithMimeType(name, data, size, mime)\n")
+wxT("#else\n")
+wxT("    #define XRC_ADD_FILE(name, data, size, mime) \\\n")
+wxT("        wxMemoryFSHandler::AddFile(name, data, size)\n")
+wxT("#endif\n")
+wxT("\n"));
 
     for (i = 0; i < flist.Count(); i++)
         file.Write(
               FileToCppArray(parOutputPath + wxFILE_SEP_PATH + flist[i], i));
 
-    file.Write(_T("")
-_T("void ") + parFuncname + wxT("()\n")
-_T("{\n")
-_T("\n")
-_T("    // Check for memory FS. If not present, load the handler:\n")
-_T("    {\n")
-_T("        wxMemoryFSHandler::AddFile(wxT(\"XRC_resource/dummy_file\"), wxT(\"dummy one\"));\n")
-_T("        wxFileSystem fsys;\n")
-_T("        wxFSFile *f = fsys.OpenFile(wxT(\"memory:XRC_resource/dummy_file\"));\n")
-_T("        wxMemoryFSHandler::RemoveFile(wxT(\"XRC_resource/dummy_file\"));\n")
-_T("        if (f) delete f;\n")
-_T("        else wxFileSystem::AddHandler(new wxMemoryFSHandler);\n")
-_T("    }\n")
-_T("\n"));
+    file.Write(wxT("")
+wxT("void ") + parFuncname + wxT("()\n")
+wxT("{\n")
+wxT("\n")
+wxT("    // Check for memory FS. If not present, load the handler:\n")
+wxT("    {\n")
+wxT("        wxMemoryFSHandler::AddFile(wxT(\"XRC_resource/dummy_file\"), wxT(\"dummy one\"));\n")
+wxT("        wxFileSystem fsys;\n")
+wxT("        wxFSFile *f = fsys.OpenFile(wxT(\"memory:XRC_resource/dummy_file\"));\n")
+wxT("        wxMemoryFSHandler::RemoveFile(wxT(\"XRC_resource/dummy_file\"));\n")
+wxT("        if (f) delete f;\n")
+wxT("        else wxFileSystem::AddHandler(new wxMemoryFSHandler);\n")
+wxT("    }\n")
+wxT("\n"));
 
     for (i = 0; i < flist.Count(); i++)
     {
@@ -653,8 +653,8 @@
 
         wxString mime;
         wxString ext = wxFileName(flist[i]).GetExt();
-        if ( ext.Lower() == _T("xrc") )
-            mime = _T("text/xml");
+        if ( ext.Lower() == wxT("xrc") )
+            mime = wxT("text/xml");
 #if wxUSE_MIMETYPE
         else
         {
@@ -667,19 +667,19 @@
         }
 #endif // wxUSE_MIMETYPE
 
-        s.Printf(_T("    XRC_ADD_FILE(wxT(\"XRC_resource/") + flist[i] +
-                 _T("\"), xml_res_file_%i, xml_res_size_%i, _T(\"%s\"));\n"),
+        s.Printf(wxT("    XRC_ADD_FILE(wxT(\"XRC_resource/") + flist[i] +
+                 wxT("\"), xml_res_file_%i, xml_res_size_%i, wxT(\"%s\"));\n"),
                  i, i, mime.c_str());
         file.Write(s);
     }
 
     for (i = 0; i < parFiles.Count(); i++)
     {
-        file.Write(_T("    wxXmlResource::Get()->Load(wxT(\"memory:XRC_resource/") +
-                   GetInternalFileName(parFiles[i], flist) + _T("\"));\n"));
+        file.Write(wxT("    wxXmlResource::Get()->Load(wxT(\"memory:XRC_resource/") +
+                   GetInternalFileName(parFiles[i], flist) + wxT("\"));\n"));
     }
 
-    file.Write(_T("}\n"));
+    file.Write(wxT("}\n"));
 
 
 }
@@ -687,23 +687,23 @@
 void XmlResApp::GenCPPHeader()
 {
     wxString fileSpec = ((parOutput.BeforeLast('.')).AfterLast('/')).AfterLast('\\');
-    wxString heaFileName = fileSpec + _T(".h");
+    wxString heaFileName = fileSpec + wxT(".h");
 
     wxFFile file(heaFileName, wxT("wt"));
     file.Write(
-_T("//\n")
-_T("// This file was automatically generated by wxrc, do not edit by hand.\n")
-_T("//\n\n")
-_T("#ifndef __")  + fileSpec + _T("_h__\n")
-_T("#define __")  + fileSpec + _T("_h__\n")
+wxT("//\n")
+wxT("// This file was automatically generated by wxrc, do not edit by hand.\n")
+wxT("//\n\n")
+wxT("#ifndef __")  + fileSpec + wxT("_h__\n")
+wxT("#define __")  + fileSpec + wxT("_h__\n")
 );
     for(size_t i=0;i<aXRCWndClassData.Count();++i){
                 aXRCWndClassData.Item(i).GenerateHeaderCode(file);
     }
     file.Write(
-                _T("\nvoid \n")
+                wxT("\nvoid \n")
                 + parFuncname
-                + _T("();\n#endif\n"));
+                + wxT("();\n#endif\n"));
 }
 
 static wxString FileToPythonArray(wxString filename, int num)
@@ -718,8 +718,8 @@
     const size_t lng = wx_truncate_cast(size_t, offset);
     wxASSERT_MSG( !(offset - lng), wxT("Huge file not supported") );
 
-    snum.Printf(_T("%i"), num);
-    output = _T("    xml_res_file_") + snum + _T(" = '''\\\n");
+    snum.Printf(wxT("%i"), num);
+    output = wxT("    xml_res_file_") + snum + wxT(" = '''\\\n");
 
     unsigned char *buffer = new unsigned char[lng];
     file.Read(buffer, lng);
@@ -733,15 +733,15 @@
             linelng = 0;
         }
         else if (c < 32 || c > 127 || c == '\'')
-            tmp.Printf(_T("\\x%02x"), c);
+            tmp.Printf(wxT("\\x%02x"), c);
         else if (c == '\\')
-            tmp = _T("\\\\");
+            tmp = wxT("\\\\");
         else
             tmp = (wxChar)c;
         if (linelng > 70)
         {
             linelng = 0;
-            output << _T("\\\n");
+            output << wxT("\\\n");
         }
         output << tmp;
         linelng += tmp.Length();
@@ -749,7 +749,7 @@
 
     delete[] buffer;
 
-    output += _T("'''\n\n");
+    output += wxT("'''\n\n");
 
     return output;
 }
@@ -761,52 +761,52 @@
     size_t i;
 
     if (flagVerbose)
-        wxPrintf(_T("creating Python source file ") + parOutput +  _T("...\n"));
+        wxPrintf(wxT("creating Python source file ") + parOutput +  wxT("...\n"));
 
     file.Write(
-       _T("#\n")
-       _T("# This file was automatically generated by wxrc, do not edit by hand.\n")
-       _T("#\n\n")
-       _T("import wx\n")
-       _T("import wx.xrc\n\n")
+       wxT("#\n")
+       wxT("# This file was automatically generated by wxrc, do not edit by hand.\n")
+       wxT("#\n\n")
+       wxT("import wx\n")
+       wxT("import wx.xrc\n\n")
     );
 
 
-    file.Write(_T("def ") + parFuncname + _T("():\n"));
+    file.Write(wxT("def ") + parFuncname + wxT("():\n"));
 
     for (i = 0; i < flist.Count(); i++)
         file.Write(
           FileToPythonArray(parOutputPath + wxFILE_SEP_PATH + flist[i], i));
 
     file.Write(
-        _T("    # check if the memory filesystem handler has been loaded yet, and load it if not\n")
-        _T("    wx.MemoryFSHandler.AddFile('XRC_resource/dummy_file', 'dummy value')\n")
-        _T("    fsys = wx.FileSystem()\n")
-        _T("    f = fsys.OpenFile('memory:XRC_resource/dummy_file')\n")
-        _T("    wx.MemoryFSHandler.RemoveFile('XRC_resource/dummy_file')\n")
-        _T("    if f is not None:\n")
-        _T("        f.Destroy()\n")
-        _T("    else:\n")
-        _T("        wx.FileSystem.AddHandler(wx.MemoryFSHandler())\n")
-        _T("\n")
-        _T("    # load all the strings as memory files and load into XmlRes\n")
+        wxT("    # check if the memory filesystem handler has been loaded yet, and load it if not\n")
+        wxT("    wx.MemoryFSHandler.AddFile('XRC_resource/dummy_file', 'dummy value')\n")
+        wxT("    fsys = wx.FileSystem()\n")
+        wxT("    f = fsys.OpenFile('memory:XRC_resource/dummy_file')\n")
+        wxT("    wx.MemoryFSHandler.RemoveFile('XRC_resource/dummy_file')\n")
+        wxT("    if f is not None:\n")
+        wxT("        f.Destroy()\n")
+        wxT("    else:\n")
+        wxT("        wx.FileSystem.AddHandler(wx.MemoryFSHandler())\n")
+        wxT("\n")
+        wxT("    # load all the strings as memory files and load into XmlRes\n")
         );
 
 
     for (i = 0; i < flist.Count(); i++)
     {
         wxString s;
-        s.Printf(_T("    wx.MemoryFSHandler.AddFile('XRC_resource/") + flist[i] +
-                 _T("', xml_res_file_%i)\n"), i);
+        s.Printf(wxT("    wx.MemoryFSHandler.AddFile('XRC_resource/") + flist[i] +
+                 wxT("', xml_res_file_%i)\n"), i);
         file.Write(s);
     }
     for (i = 0; i < parFiles.Count(); i++)
     {
-        file.Write(_T("    wx.xrc.XmlResource.Get().Load('memory:XRC_resource/") +
-                   GetInternalFileName(parFiles[i], flist) + _T("')\n"));
+        file.Write(wxT("    wx.xrc.XmlResource.Get().Load('memory:XRC_resource/") +
+                   GetInternalFileName(parFiles[i], flist) + wxT("')\n"));
     }
 
-    file.Write(_T("\n"));
+    file.Write(wxT("\n"));
 }
 
 
@@ -822,7 +822,7 @@
         fout.Open(parOutput, wxT("wt"));
 
     for (size_t i = 0; i < str.GetCount(); i++)
-        fout.Write(_T("_(\"") + str[i] + _T("\");\n"));
+        fout.Write(wxT("_(\"") + str[i] + wxT("\");\n"));
 
     if (!parOutput) fout.Detach();
 }
@@ -836,12 +836,12 @@
     for (size_t i = 0; i < parFiles.Count(); i++)
     {
         if (flagVerbose)
-            wxPrintf(_T("processing ") + parFiles[i] +  _T("...\n"));
+            wxPrintf(wxT("processing ") + parFiles[i] +  wxT("...\n"));
 
         wxXmlDocument doc;
         if (!doc.Load(parFiles[i]))
         {
-            wxLogError(_T("Error parsing file ") + parFiles[i]);
+            wxLogError(wxT("Error parsing file ") + parFiles[i]);
             retCode = 1;
             continue;
         }
@@ -908,20 +908,20 @@
             n->GetType() == wxXML_CDATA_SECTION_NODE) &&
             // ...it is textnode...
             (
-                node/*not n!*/->GetName() == _T("label") ||
-                (node/*not n!*/->GetName() == _T("value") &&
+                node/*not n!*/->GetName() == wxT("label") ||
+                (node/*not n!*/->GetName() == wxT("value") &&
                                !n->GetContent().IsNumber()) ||
-                node/*not n!*/->GetName() == _T("help") ||
-                node/*not n!*/->GetName() == _T("longhelp") ||
-                node/*not n!*/->GetName() == _T("tooltip") ||
-                node/*not n!*/->GetName() == _T("htmlcode") ||
-                node/*not n!*/->GetName() == _T("title") ||
-                node/*not n!*/->GetName() == _T("item")
+                node/*not n!*/->GetName() == wxT("help") ||
+                node/*not n!*/->GetName() == wxT("longhelp") ||
+                node/*not n!*/->GetName() == wxT("tooltip") ||
+                node/*not n!*/->GetName() == wxT("htmlcode") ||
+                node/*not n!*/->GetName() == wxT("title") ||
+                node/*not n!*/->GetName() == wxT("item")
             ))
             // ...and known to contain translatable string
         {
             if (!flagGettext ||
-                node->GetPropVal(_T("translate"), _T("1")) != _T("0"))
+                node->GetPropVal(wxT("translate"), wxT("1")) != wxT("0"))
             {
                 arr.Add(ConvertText(n->GetContent()));
             }
