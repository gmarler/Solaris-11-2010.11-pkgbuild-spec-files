Index: anjuta-trunk/plugins/profiler/plugin.h
===================================================================
--- anjuta-trunk/plugins/profiler/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/profiler/plugin.h	(working copy)
@@ -44,7 +44,7 @@
 #include "gprof-function-call-chart-view.h"
 #endif
 
-extern GType profiler_get_type (GluePlugin *plugin);
+extern GType profiler_get_type (AnjutaGluePlugin *plugin);
 #define TYPE_PROFILER         (profiler_get_type (NULL))
 #define PROFILER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_PROFILER, Profiler))
 #define PROFILER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_PROFILER, ProfilerClass))
Index: anjuta-trunk/plugins/file-loader/plugin.h
===================================================================
--- anjuta-trunk/plugins/file-loader/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/file-loader/plugin.h	(working copy)
@@ -2,7 +2,7 @@
 #include <libanjuta/anjuta-plugin.h>
 #include <libegg/recent-files/egg-recent-model.h>
 
-extern GType anjuta_file_loader_plugin_get_type (GluePlugin *plugin);
+extern GType anjuta_file_loader_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_FILE_LOADER         (anjuta_file_loader_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_FILE_LOADER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_FILE_LOADER, AnjutaFileLoaderPlugin))
 #define ANJUTA_PLUGIN_FILE_LOADER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_FILE_LOADER, AnjutaFileLoaderPluginClass))
Index: anjuta-trunk/plugins/symbol-browser/plugin.h
===================================================================
--- anjuta-trunk/plugins/symbol-browser/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/symbol-browser/plugin.h	(working copy)
@@ -26,7 +26,7 @@
 
 G_BEGIN_DECLS
 
-extern GType symbol_browser_plugin_get_type (GluePlugin *plugin);
+extern GType symbol_browser_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_SYMBOL_BROWSER         (symbol_browser_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_SYMBOL_BROWSER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_SYMBOL_BROWSER, SymbolBrowserPlugin))
 #define ANJUTA_PLUGIN_SYMBOL_BROWSER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_SYMBOL_BROWSER, SymbolBrowserPluginClass))
Index: anjuta-trunk/plugins/cvs-plugin/plugin.h
===================================================================
--- anjuta-trunk/plugins/cvs-plugin/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/cvs-plugin/plugin.h	(working copy)
@@ -29,7 +29,7 @@
 
 #define GLADE_FILE PACKAGE_DATA_DIR"/glade/anjuta-cvs-plugin.glade"
 
-extern GType cvs_plugin_get_type (GluePlugin *plugin);
+extern GType cvs_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_CVS         (cvs_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_CVS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_CVS, CVSPlugin))
 #define ANJUTA_PLUGIN_CVS_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_CVS, CVSPluginClass))
Index: anjuta-trunk/plugins/devhelp/plugin.h
===================================================================
--- anjuta-trunk/plugins/devhelp/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/devhelp/plugin.h	(working copy)
@@ -32,7 +32,7 @@
 #include <devhelp/dh-base.h>
 #endif /* DISABLE_EMBEDDED_DEVHELP */
 
-extern GType devhelp_get_type (GluePlugin *plugin);
+extern GType devhelp_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_DEVHELP         (devhelp_get_type (NULL))
 #define ANJUTA_PLUGIN_DEVHELP(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_DEVHELP, AnjutaDevhelp))
 #define ANJUTA_PLUGIN_DEVHELP_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_DEVHELP, AnjutaDevhelpClass))
Index: anjuta-trunk/plugins/sourceview/plugin.h
===================================================================
--- anjuta-trunk/plugins/sourceview/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/sourceview/plugin.h	(working copy)
@@ -27,7 +27,7 @@
 
 #include <libanjuta/anjuta-plugin.h>
 
-extern GType sourceview_plugin_get_type (GluePlugin *plugin);
+extern GType sourceview_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_SOURCEVIEW         (sourceview_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_SOURCEVIEW(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_SOURCEVIEW, SourceviewPlugin))
 #define ANJUTA_PLUGIN_SOURCEVIEW_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_SOURCEVIEW, SourceviewPluginClass))
Index: anjuta-trunk/plugins/class-inheritance/plugin.h
===================================================================
--- anjuta-trunk/plugins/class-inheritance/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/class-inheritance/plugin.h	(working copy)
@@ -30,7 +30,7 @@
 
 G_BEGIN_DECLS
 
-extern GType class_inheritance_get_type (GluePlugin *plugin);
+extern GType class_inheritance_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_CLASS_INHERITANCE         (class_inheritance_get_type (NULL))
 #define ANJUTA_PLUGIN_CLASS_INHERITANCE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_CLASS_INHERITANCE, AnjutaClassInheritance))
 #define ANJUTA_PLUGIN_CLASS_INHERITANCE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_CLASS_INHERITANCE, AnjutaClassInheritanceClass))
Index: anjuta-trunk/plugins/debug-manager/plugin.h
===================================================================
--- anjuta-trunk/plugins/debug-manager/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/debug-manager/plugin.h	(working copy)
@@ -28,7 +28,7 @@
 
 #define GLADE_FILE PACKAGE_DATA_DIR"/glade/anjuta-debug-manager.glade"
 
-extern GType dma_plugin_get_type (GluePlugin *plugin);
+extern GType dma_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_DEBUG_MANAGER         (dma_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_DEBUG_MANAGER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_DEBUG_MANAGER, DebugManagerPlugin))
 #define ANJUTA_PLUGIN_DEBUG_MANAGER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_DEBUG_MANAGER, DebugManagerPluginClass))
Index: anjuta-trunk/plugins/subversion/plugin.h
===================================================================
--- anjuta-trunk/plugins/subversion/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/subversion/plugin.h	(working copy)
@@ -27,7 +27,7 @@
 #include <libanjuta/interfaces/ianjuta-message-manager.h>
 #include <libanjuta/interfaces/ianjuta-editor.h>
 
-extern GType subversion_get_type (GluePlugin *plugin);
+extern GType subversion_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_SUBVERSION         (subversion_get_type (NULL))
 #define ANJUTA_PLUGIN_SUBVERSION(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_SUBVERSION, Subversion))
 #define ANJUTA_PLUGIN_SUBVERSION_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_SUBVERSION, SubversionClass))
Index: anjuta-trunk/plugins/patch/plugin.h
===================================================================
--- anjuta-trunk/plugins/patch/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/patch/plugin.h	(working copy)
@@ -25,7 +25,7 @@
 
 #define ICON_FILE "anjuta-patch-plugin.png"
 
-extern GType patch_plugin_get_type (GluePlugin *plugin);
+extern GType patch_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_PATCH         (patch_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_PATCH(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_PATCH, PatchPlugin))
 #define ANJUTA_PLUGIN_PATCH_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_PATCH, PatchPluginClass))
Index: anjuta-trunk/plugins/tools/plugin.h
===================================================================
--- anjuta-trunk/plugins/tools/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/tools/plugin.h	(working copy)
@@ -38,7 +38,7 @@
 
 /*---------------------------------------------------------------------------*/
 
-extern GType atp_plugin_get_type (GluePlugin *plugin);
+extern GType atp_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_ATP         (atp_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_ATP(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_ATP, ATPPlugin))
 #define ANJUTA_PLUGIN_ATP_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_ATP, ATPPluginClass))
Index: anjuta-trunk/plugins/tools/scripts/tools-2.xml.in
===================================================================
--- anjuta-trunk/plugins/tools/scripts/tools-2.xml.in	(revision 2903)
+++ anjuta-trunk/plugins/tools/scripts/tools-2.xml.in	(working copy)
@@ -37,7 +37,7 @@
 		<shortcut></shortcut>
 	</tool>
 	<tool name="Find With Grep">
-		<command>grep -r -e</command>
+		<command>/usr/xpg4/bin/grep -r -e</command>
 		<parameter>$(ask_user_string) .</parameter>
 		<working_dir>$(project_root_directory)</working_dir>
 		<enabled>1</enabled>
Index: anjuta-trunk/plugins/project-wizard/plugin.h
===================================================================
--- anjuta-trunk/plugins/project-wizard/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/project-wizard/plugin.h	(working copy)
@@ -25,7 +25,7 @@
 #include <libanjuta/interfaces/ianjuta-message-manager.h>
 #include <libanjuta/anjuta-preferences.h>
 
-extern GType npw_plugin_get_type (GluePlugin *plugin);
+extern GType npw_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_NPW         (npw_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_NPW(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_NPW, NPWPlugin))
 #define ANJUTA_PLUGIN_NPW_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_NPW, NPWPluginClass))
Index: anjuta-trunk/plugins/search/plugin.h
===================================================================
--- anjuta-trunk/plugins/search/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/search/plugin.h	(working copy)
@@ -21,7 +21,7 @@
 
 #include <libanjuta/interfaces/ianjuta-document-manager.h>
 
-extern GType search_plugin_get_type(GluePlugin *klass);
+extern GType search_plugin_get_type(AnjutaGluePlugin *klass);
 #define ANJUTA_TYPE_PLUGIN_SEARCH         (search_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_SEARCH(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_SEARCH, SearchPlugin))
 #define ANJUTA_PLUGIN_SEARCH_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_SEARCH, SearchPluginClass))
Index: anjuta-trunk/plugins/build-basic-autotools/build-basic-autotools.h
===================================================================
--- anjuta-trunk/plugins/build-basic-autotools/build-basic-autotools.h	(revision 2903)
+++ anjuta-trunk/plugins/build-basic-autotools/build-basic-autotools.h	(working copy)
@@ -25,7 +25,7 @@
 
 #define GLADE_FILE PACKAGE_DATA_DIR"/glade/anjuta-build-basic-autotools-plugin.glade"
 
-extern GType basic_autotools_plugin_get_type (GluePlugin *plugin);
+extern GType basic_autotools_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_BASIC_AUTOTOOLS         (basic_autotools_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_BASIC_AUTOTOOLS(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_BASIC_AUTOTOOLS, BasicAutotoolsPlugin))
 #define ANJUTA_PLUGIN_BASIC_AUTOTOOLS_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_BASIC_AUTOTOOLS, BasicAutotoolsPluginClass))
Index: anjuta-trunk/plugins/valgrind/plugin.h
===================================================================
--- anjuta-trunk/plugins/valgrind/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/valgrind/plugin.h	(working copy)
@@ -30,7 +30,7 @@
 
 G_BEGIN_DECLS
 
-extern GType anjuta_valgrind_plugin_get_type (GluePlugin *plugin);
+extern GType anjuta_valgrind_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_VALGRIND         (anjuta_valgrind_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_VALGRIND(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_VALGRIND, AnjutaValgrindPlugin))
 #define ANJUTA_PLUGIN_VALGRIND_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_VALGRIND, AnjutaValgrindPluginClass))
Index: anjuta-trunk/plugins/terminal/terminal.c
===================================================================
--- anjuta-trunk/plugins/terminal/terminal.c	(revision 2903)
+++ anjuta-trunk/plugins/terminal/terminal.c	(working copy)
@@ -66,7 +66,7 @@
 
 extern char **environ;
 
-extern GType terminal_plugin_get_type (GluePlugin *plugin);
+extern GType terminal_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_PLUGIN_TERMINAL_TYPE         (terminal_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_TERMINAL(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_PLUGIN_TERMINAL_TYPE, TerminalPlugin))
 #define ANJUTA_PLUGIN_TERMINAL_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_PLUGIN_TERMINAL_CLASS, TerminalPluginClass))
Index: anjuta-trunk/plugins/gtodo/plugin.h
===================================================================
--- anjuta-trunk/plugins/gtodo/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/gtodo/plugin.h	(working copy)
@@ -1,7 +1,7 @@
 
 #include <libanjuta/anjuta-plugin.h>
 
-extern GType gtodo_plugin_get_type (GluePlugin *plugin);
+extern GType gtodo_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_GTODO         (gtodo_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_GTODO(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_GTODO, GTodoPlugin))
 #define ANJUTA_PLUGIN_GTODO_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_GTODO, GTodoPluginClass))
Index: anjuta-trunk/plugins/class-gen/plugin.h
===================================================================
--- anjuta-trunk/plugins/class-gen/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/class-gen/plugin.h	(working copy)
@@ -28,7 +28,7 @@
 #define GLADE_FILE PACKAGE_DATA_DIR"/glade/anjuta-class-gen-plugin.glade"
 #define CLASS_TEMPLATE PACKAGE_DATA_DIR"/class-templates/"
 
-extern GType class_gen_plugin_get_type (GluePlugin *plugin);
+extern GType class_gen_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_CLASS_GEN         (class_gen_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_CLASS_GEN(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_CLASS_GEN, AnjutaClassGenPlugin))
 #define ANJUTA_PLUGIN_CLASS_GEN_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_CLASS_GEN, AnjutaClassGenPluginClass))
Index: anjuta-trunk/plugins/project-manager/plugin.h
===================================================================
--- anjuta-trunk/plugins/project-manager/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/project-manager/plugin.h	(working copy)
@@ -26,7 +26,7 @@
 #include <gbf/gbf-project-model.h>
 #include <gbf/gbf-project-view.h>
 
-extern GType project_manager_plugin_get_type (GluePlugin *plugin);
+extern GType project_manager_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_PROJECT_MANAGER         (project_manager_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_PROJECT_MANAGER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_PROJECT_MANAGER, ProjectManagerPlugin))
 #define ANJUTA_PLUGIN_PROJECT_MANAGER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_PROJECT_MANAGER, ProjectManagerPluginClass))
Index: anjuta-trunk/plugins/project-import/plugin.h
===================================================================
--- anjuta-trunk/plugins/project-import/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/project-import/plugin.h	(working copy)
@@ -25,7 +25,7 @@
 #include <libanjuta/anjuta-preferences.h>
 #include <libanjuta/anjuta-ui.h>
 
-extern GType project_import_plugin_get_type (GluePlugin *plugin);
+extern GType project_import_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_PROJECT_IMPORT         (project_import_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_PROJECT_IMPORT(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_PROJECT_IMPORT, AnjutaProjectImportPlugin))
 #define ANJUTA_PLUGIN_PROJECT_IMPORT_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_PROJECT_IMPORT, AnjutaProjectImportPluginClass))
Index: anjuta-trunk/plugins/document-manager/plugin.h
===================================================================
--- anjuta-trunk/plugins/document-manager/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/document-manager/plugin.h	(working copy)
@@ -8,7 +8,7 @@
 #include "indent-util.h"
 #include "indent-dialog.h"
 
-extern GType docman_plugin_get_type (GluePlugin *plugin);
+extern GType docman_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_DOCMAN         (docman_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_DOCMAN(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_DOCMAN, DocmanPlugin))
 #define ANJUTA_PLUGIN_DOCMAN_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_DOCMAN, DocmanPluginClass))
Index: anjuta-trunk/plugins/editor/plugin.h
===================================================================
--- anjuta-trunk/plugins/editor/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/editor/plugin.h	(working copy)
@@ -21,7 +21,7 @@
 
 #include "style-editor.h"
 
-extern GType editor_plugin_get_type (GluePlugin *plugin);
+extern GType editor_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_EDITOR         (editor_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_EDITOR(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_EDITOR, EditorPlugin))
 #define ANJUTA_PLUGIN_EDITOR_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_EDITOR, EditorPluginClass))
Index: anjuta-trunk/plugins/file-manager/plugin.h
===================================================================
--- anjuta-trunk/plugins/file-manager/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/file-manager/plugin.h	(working copy)
@@ -4,7 +4,7 @@
 
 #include <libanjuta/anjuta-plugin.h>
 
-extern GType file_manager_plugin_get_type (GluePlugin *plugin);
+extern GType file_manager_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_FILE_MANAGER         (file_manager_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_FILE_MANAGER(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_FILE_MANAGER, FileManagerPlugin))
 #define ANJUTA_PLUGIN_FILE_MANAGER_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_FILE_MANAGER, FileManagerPluginClass))
Index: anjuta-trunk/plugins/message-view/plugin.h
===================================================================
--- anjuta-trunk/plugins/message-view/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/message-view/plugin.h	(working copy)
@@ -20,7 +20,7 @@
 
 #include <libanjuta/anjuta-plugin.h>
 
-extern GType message_view_plugin_get_type (GluePlugin *plugin);
+extern GType message_view_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_MESSAGE_VIEW         (message_view_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_MESSAGE_VIEW(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_MESSAGE_VIEW, MessageViewPlugin))
 #define ANJUTA_PLUGIN_MESSAGE_VIEW_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_MESSAGE_VIEW, MessageViewPluginClass))
Index: anjuta-trunk/plugins/language-support-cpp-java/plugin.h
===================================================================
--- anjuta-trunk/plugins/language-support-cpp-java/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/language-support-cpp-java/plugin.h	(working copy)
@@ -21,7 +21,7 @@
 #include <libanjuta/anjuta-plugin.h>
 #include <libanjuta/interfaces/ianjuta-editor.h>
 
-extern GType cpp_java_plugin_get_type (GluePlugin *plugin);
+extern GType cpp_java_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_CPP_JAVA         (cpp_java_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_CPP_JAVA(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_CPP_JAVA, CppJavaPlugin))
 #define ANJUTA_PLUGIN_CPP_JAVA_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_CPP_JAVA, CppJavaPluginClass))
Index: anjuta-trunk/plugins/gdb/plugin.h
===================================================================
--- anjuta-trunk/plugins/gdb/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/gdb/plugin.h	(working copy)
@@ -22,11 +22,11 @@
 #define GDB_PLUGIN_H
 
 #include <glib.h>
-#include "libanjuta/glue-plugin.h"
+#include "libanjuta/anjuta-glue-plugin.h"
 
 G_BEGIN_DECLS
 
-extern GType gdb_plugin_get_type (GluePlugin *plugin);
+extern GType gdb_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_GDB         (gdb_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_GDB(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_GDB, GdbPlugin))
 #define ANJUTA_PLUGIN_GDB_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_GDB, GdbPluginClass))
Index: anjuta-trunk/plugins/macro/plugin.h
===================================================================
--- anjuta-trunk/plugins/macro/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/macro/plugin.h	(working copy)
@@ -26,7 +26,7 @@
 
 #define GLADE_FILE PACKAGE_DATA_DIR"/glade/anjuta-macro.glade"
 
-extern GType macro_plugin_get_type (GluePlugin *plugin);
+extern GType macro_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_MACRO         (macro_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_MACRO(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_MACRO, MacroPlugin))
 #define ANJUTA_PLUGIN_MACRO_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_MACRO, MacroPluginClass))
Index: anjuta-trunk/plugins/sample1/plugin.h
===================================================================
--- anjuta-trunk/plugins/sample1/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/sample1/plugin.h	(working copy)
@@ -1,7 +1,7 @@
 
 #include <libanjuta/anjuta-plugin.h>
 
-extern GType anjuta_sample_plugin_get_type (GluePlugin *plugin);
+extern GType anjuta_sample_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_SAMPLE         (anjuta_sample_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_SAMPLE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_SAMPLE, SamplePlugin))
 #define ANJUTA_PLUGIN_SAMPLE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_SAMPLE, SamplePluginClass))
Index: anjuta-trunk/plugins/glade/plugin.h
===================================================================
--- anjuta-trunk/plugins/glade/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/glade/plugin.h	(working copy)
@@ -1,7 +1,7 @@
 
 #include <libanjuta/anjuta-plugin.h>
 
-extern GType glade_plugin_get_type (GluePlugin *plugin);
+extern GType glade_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_GLADE         (glade_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_GLADE(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_GLADE, GladePlugin))
 #define ANJUTA_PLUGIN_GLADE_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_GLADE, GladePluginClass))
Index: anjuta-trunk/plugins/file-wizard/plugin.h
===================================================================
--- anjuta-trunk/plugins/file-wizard/plugin.h	(revision 2903)
+++ anjuta-trunk/plugins/file-wizard/plugin.h	(working copy)
@@ -25,7 +25,7 @@
 #include <libanjuta/anjuta-preferences.h>
 #include <libanjuta/anjuta-ui.h>
 
-extern GType file_wizard_plugin_get_type (GluePlugin *plugin);
+extern GType file_wizard_plugin_get_type (AnjutaGluePlugin *plugin);
 #define ANJUTA_TYPE_PLUGIN_FILE_WIZARD         (file_wizard_plugin_get_type (NULL))
 #define ANJUTA_PLUGIN_FILE_WIZARD(o)           (G_TYPE_CHECK_INSTANCE_CAST ((o), ANJUTA_TYPE_PLUGIN_FILE_WIZARD, AnjutaFileWizardPlugin))
 #define ANJUTA_PLUGIN_FILE_WIZARD_CLASS(k)     (G_TYPE_CHECK_CLASS_CAST ((k), ANJUTA_TYPE_PLUGIN_FILE_WIZARD, AnjutaFileWizardPluginClass))
Index: anjuta-trunk/libanjuta/glue-cpp.c
===================================================================
--- anjuta-trunk/libanjuta/glue-cpp.c	(revision 2903)
+++ anjuta-trunk/libanjuta/glue-cpp.c	(working copy)
@@ -1,92 +0,0 @@
-/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
-/*
- * glue-cpp.c (c) 2006 Johannes Schmid
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Library General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
- */
-
-/**
- * SECTION:glue-cpp
- * @title: GlueCpp
- * @short_description: C++ glue code
- * @see_also: 
- * @stability: Unstable
- * @include: libanjuta/glue-cpp.h
- * 
- */
-
-#include "glue-cpp.h"
-#include "glue-factory.h"
-
-#include <string.h>
-#include <gmodule.h>
-
-typedef GObject* (*Glue_constructor)();
-
-GObject*
-glue_cpp_load_plugin(GlueFactory* factory, const gchar* component_name, const gchar* type_name)
-{
-	GList* p = glue_factory_get_path(factory);
-	gchar *plugin_name;
-  
-	plugin_name = g_module_build_path (NULL, component_name);
-  
-  	Glue_constructor constructor;
-  
-	while (p)
-    {
-		const gchar *file_name;
- 		PathEntry *entry = p->data;
-		GDir *dir;
-		GObject* plugin;
-      
-		dir = g_dir_open (entry->path, 0, NULL);
-
-		if (dir == NULL)
-			continue;
-      
-		do {
-			file_name = g_dir_read_name (dir);
-	
-			if (file_name && strcmp (file_name, plugin_name) == 0) {
-				GModule *module;
-	  			gchar *plugin_path;
-	  
-	  			/* We have found a matching module */
-	  			plugin_path = g_module_build_path (entry->path, plugin_name);
-	  			module = g_module_open (plugin_path, 0);
-	  			if (module == NULL)
-	    		{
-	      			g_warning ("Could not open module: %s\n", g_module_error ());
-	     		 	goto move_to_next_dir;
-	    		}
-
-	  			if (!g_module_symbol (module, "glue_constructor", (gpointer *)&constructor))
-	    		{
-	      			g_module_close (module);
-	      			goto move_to_next_dir;
-	    		}
-				/* Create the object */
-				plugin =  (*constructor)();
-				return plugin;
-			}
-		} while (file_name != NULL);
-move_to_next_dir:	  
-      g_dir_close (dir);
-      
-      p = p->next;
-    }
-
-  return NULL;
-}
Index: anjuta-trunk/libanjuta/glue-cpp.h
===================================================================
--- anjuta-trunk/libanjuta/glue-cpp.h	(revision 2903)
+++ anjuta-trunk/libanjuta/glue-cpp.h	(working copy)
@@ -1,31 +0,0 @@
-/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
-/*
- * glue-cpp.h (c) 2006 Johannes Schmid
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- * 
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Library General Public License for more details.
- * 
- * You should have received a copy of the GNU General Public License
- * along with this program; if not, write to the Free Software
- * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
- */
- 
-#ifndef GLUE_CPP_H
-#define GLUE_CPP_H
-
-#include "glue-factory.h"
-
-G_BEGIN_DECLS
-
-GObject*
-glue_cpp_load_plugin(GlueFactory* factory, const gchar* component_name, const gchar* type_name);
-
-G_END_DECLS
-
-#endif
Index: anjuta-trunk/libanjuta/anjuta-glue-factory.c
===================================================================
--- anjuta-trunk/libanjuta/anjuta-glue-factory.c	(revision 0)
+++ anjuta-trunk/libanjuta/anjuta-glue-factory.c	(revision 0)
@@ -0,0 +1,246 @@
+
+/**
+ * SECTION:anjuta-glue-factory
+ * @short_description: Underlying plugin factory
+ * @see_also: 
+ * @stability: Unstable
+ * @include: libanjuta/anjuta-glue-factory.h
+ * 
+ */
+
+#include <string.h>
+#include <gmodule.h>
+#include "anjuta-glue-factory.h"
+#include "anjuta-glue-plugin.h"
+
+static void anjuta_glue_factory_init       (AnjutaGlueFactory *factory);
+static void anjuta_glue_factory_class_init (AnjutaGlueFactoryClass *class);
+
+typedef GType (*AnjutaGluePluginGetTypeFunc) (AnjutaGluePlugin *plugin, const char *name);
+
+typedef struct
+{
+  AnjutaGluePlugin *plugin;
+  AnjutaGluePluginGetTypeFunc get_type_func;
+  const gchar *name;
+} LoadedPlugin;
+
+struct _AnjutaGlueFactory
+{
+  GObject parent;
+  
+  GList *paths;
+};
+
+struct _AnjutaGlueFactoryClass
+{
+  GObjectClass parent_class;
+};
+
+GType
+anjuta_glue_factory_get_type (void)
+{
+  static GType type = 0;
+
+  if (!type)
+    {
+      static const GTypeInfo type_info =
+      {
+        sizeof (AnjutaGlueFactoryClass),
+        (GBaseInitFunc) NULL,
+        (GBaseFinalizeFunc) NULL,
+        (GClassInitFunc) anjuta_glue_factory_class_init,
+        (GClassFinalizeFunc) NULL,
+        NULL,
+        
+        sizeof (AnjutaGlueFactory),
+        0, /* n_preallocs */
+        (GInstanceInitFunc) anjuta_glue_factory_init,
+      };
+
+      type = g_type_register_static (G_TYPE_OBJECT,
+				     "AnjutaGlueFactory",
+				     &type_info, 0);
+    }
+  return type;
+}
+
+static void
+anjuta_glue_factory_class_init (AnjutaGlueFactoryClass *class)
+{
+}
+
+static void
+anjuta_glue_factory_init (AnjutaGlueFactory *factory)
+{
+}
+
+AnjutaGlueFactory *
+anjuta_glue_factory_new (void)
+{
+  AnjutaGlueFactory *factory;
+
+  factory = g_object_new (anjuta_glue_factory_get_type (), NULL);
+
+  return factory;
+}
+
+gboolean
+anjuta_glue_factory_add_path (AnjutaGlueFactory *factory, const gchar *path)
+{
+  GList *p;
+  PathEntry *entry;
+  
+  if (!g_file_test (path, G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR))
+    return FALSE;
+
+  /* Check if the path has been added */
+  p = factory->paths;
+
+  while (p)
+    {
+      PathEntry *entry = p->data;
+
+      /* If it's already added we return TRUE */
+      if (strcmp (path, entry->path) == 0)
+	return TRUE;
+      
+      p = p->next;
+    }
+
+  entry = g_new (PathEntry, 1);
+  entry->path = g_strdup (path);
+  entry->loaded_plugins = g_hash_table_new (NULL, NULL);
+  
+  factory->paths = g_list_prepend (factory->paths, entry);
+    
+  return TRUE;
+}
+
+GList* anjuta_glue_factory_get_path(AnjutaGlueFactory *factory)
+{
+	return factory->paths;
+}
+
+static LoadedPlugin *
+get_already_loaded_module (AnjutaGlueFactory *factory,
+			   const gchar *component_name,
+			   const gchar *type_name)
+{
+  GList *p;
+
+  p = factory->paths;
+  while (p)
+    {
+      PathEntry *entry = p->data;
+      LoadedPlugin *plugin;
+
+      plugin = g_hash_table_lookup (entry->loaded_plugins, component_name);
+
+      if (plugin && (* plugin->get_type_func) (plugin->plugin, type_name) != G_TYPE_INVALID)
+	return plugin;
+      
+      p = p->next;
+    }
+
+  return NULL;
+}
+
+static LoadedPlugin *
+load_plugin (AnjutaGlueFactory *factory, const gchar *component_name, const gchar *type_name)
+{
+  GList *p;
+  gchar *plugin_name;
+  
+  p = factory->paths;
+  plugin_name = g_module_build_path (NULL, component_name);
+  
+  while (p)
+    {
+      const gchar *file_name;
+      PathEntry *entry = p->data;
+      GDir *dir;
+      
+      dir = g_dir_open (entry->path, 0, NULL);
+
+      if (dir == NULL)
+	continue;
+      
+      do {
+	file_name = g_dir_read_name (dir);
+	
+	if (file_name && strcmp (file_name, plugin_name) == 0) {
+	  GModule *module;
+	  AnjutaGluePlugin *anjuta_glue_plugin;
+	  gchar *plugin_path;
+	  AnjutaGluePluginGetTypeFunc get_type_func;
+	  LoadedPlugin *plugin;
+	  
+	  /* We have found a matching module */
+	  plugin_path = g_module_build_path (entry->path, plugin_name);
+	  module = g_module_open (plugin_path, 0);
+	  if (module == NULL)
+	    {
+	      g_warning ("Could not open module: %s\n", g_module_error ());
+	      goto move_to_next_dir;
+	    }
+
+	  if (!g_module_symbol (module, "anjuta_glue_get_component_type", (gpointer *)&get_type_func))
+	    {
+	      g_module_close (module);
+	      goto move_to_next_dir;
+	    }
+
+	  /* Now create a new glue plugin */
+	  anjuta_glue_plugin = anjuta_glue_plugin_new (module);
+	  if ((* get_type_func) (anjuta_glue_plugin, type_name) == G_TYPE_INVALID)
+	    {
+	      g_object_unref (anjuta_glue_plugin);
+	      g_module_close (module);
+	      goto move_to_next_dir;
+	    }
+	  
+	  /* Everything seems to be in order */
+	  plugin = g_new (LoadedPlugin, 1);
+	  plugin->plugin = anjuta_glue_plugin;
+	  plugin->get_type_func = get_type_func;
+	  plugin->name = g_strdup (component_name);
+	  g_type_module_set_name (G_TYPE_MODULE (plugin->plugin), plugin->name);
+	  g_hash_table_insert (entry->loaded_plugins, (gpointer)plugin->name, plugin);
+	  
+	  g_dir_close (dir);
+	  g_free (plugin_name);
+	  return plugin;
+
+	}
+	
+      } while (file_name != NULL);
+      
+move_to_next_dir:	  
+      g_dir_close (dir);
+      
+      p = p->next;
+    }
+
+  g_free (plugin_name);
+  return NULL;
+}
+
+GType
+anjuta_glue_factory_get_object_type (AnjutaGlueFactory  *factory,
+			      const gchar  *component_name,
+			      const gchar  *type_name)
+{
+  LoadedPlugin *plugin;
+
+  plugin = get_already_loaded_module (factory, component_name, type_name);
+  
+  if (!plugin)
+    plugin = load_plugin (factory, component_name, type_name);
+
+  if (plugin) {
+    return (* plugin->get_type_func) (plugin->plugin, type_name);
+  }
+  else
+    return G_TYPE_INVALID;
+}
Index: anjuta-trunk/libanjuta/anjuta-plugin.h
===================================================================
--- anjuta-trunk/libanjuta/anjuta-plugin.h	(revision 2912)
+++ anjuta-trunk/libanjuta/anjuta-plugin.h	(working copy)
@@ -30,7 +30,7 @@
 #include <libanjuta/anjuta-ui.h>
 #include <libanjuta/anjuta-preferences.h>
 #include <libanjuta/anjuta-utils.h>
-#include <libanjuta/glue-plugin.h>
+#include <libanjuta/anjuta-glue-plugin.h>
 
 G_BEGIN_DECLS
 
@@ -130,7 +130,7 @@
  */
 #define ANJUTA_PLUGIN_BEGIN(class_name, prefix)                          \
 extern GType                                                             \
-prefix##_get_type (GluePlugin *plugin)                                   \
+prefix##_get_type (AnjutaGluePlugin *plugin)                                   \
 {                                                                        \
 	static GType type = 0;                                               \
 	if (G_UNLIKELY (!type)) {                                            \
@@ -205,15 +205,15 @@
  * and member functions definitions. 
  */
 #define ANJUTA_SIMPLE_PLUGIN(class_name, prefix)                      \
-G_MODULE_EXPORT void glue_register_components (GluePlugin *plugin);   \
-G_MODULE_EXPORT GType glue_get_component_type (GluePlugin *plugin, const char *name); \
+G_MODULE_EXPORT void anjuta_glue_register_components (AnjutaGluePlugin *plugin);   \
+G_MODULE_EXPORT GType anjuta_glue_get_component_type (AnjutaGluePlugin *plugin, const char *name); \
 G_MODULE_EXPORT void                                                  \
-glue_register_components (GluePlugin *plugin)                         \
+anjuta_glue_register_components (AnjutaGluePlugin *plugin)                         \
 {                                                                     \
 	prefix##_get_type (plugin);                                       \
 }                                                                     \
 G_MODULE_EXPORT GType                                                 \
-glue_get_component_type (GluePlugin *plugin, const char *name)        \
+anjuta_glue_get_component_type (AnjutaGluePlugin *plugin, const char *name)        \
 {                                                                     \
 	if (!strcmp (name, #class_name)) {                                \
 		return prefix##_get_type (plugin);                            \
Index: anjuta-trunk/libanjuta/anjuta-glue-factory.h
===================================================================
--- anjuta-trunk/libanjuta/anjuta-glue-factory.h	(revision 0)
+++ anjuta-trunk/libanjuta/anjuta-glue-factory.h	(revision 0)
@@ -0,0 +1,39 @@
+#ifndef __ANJUTA_GLUE_FACTORY_H__
+#define __ANJUTA_GLUE_FACTORY_H__
+
+#include <glib-object.h>
+
+G_BEGIN_DECLS
+
+#define ANJUTA_GLUE_TYPE_FACTORY            (anjuta_glue_factory_get_type ())
+#define ANJUTA_GLUE_FACTORY(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANJUTA_GLUE_TYPE_FACTORY, AnjutaGlueFactory))
+#define ANJUTA_GLUE_FACTORY_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANJUTA_GLUE_TYPE_FACTORY, AnjutaGlueFactoryClass))
+#define ANJUTA_GLUE_IS_FACTORY(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANJUTA_GLUE_TYPE_FACTORY))
+#define ANJUTA_GLUE_IS_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), ANJUTA_GLUE_TYPE_FACTORY))
+#define ANJUTA_GLUE_FACTORY_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), ANJUTA_GLUE_TYPE_FACTORY, AnjutaGlueFactoryClass))
+
+typedef struct
+{
+  const gchar *path;
+  GHashTable *loaded_plugins;
+} PathEntry;
+
+typedef struct _AnjutaGlueFactory      AnjutaGlueFactory;
+typedef struct _AnjutaGlueFactoryClass AnjutaGlueFactoryClass;
+
+GType        anjuta_glue_factory_get_type        (void);
+AnjutaGlueFactory *anjuta_glue_factory_new             (void);
+gboolean     anjuta_glue_factory_add_path        (AnjutaGlueFactory  *factory,
+					   const char   *path);
+GType        anjuta_glue_factory_get_object_type (AnjutaGlueFactory  *factory,
+					   const gchar  *component_name,
+					   const gchar  *type_name);
+
+GObject     *anjuta_glue_factory_create_object   (AnjutaGlueFactory  *factory,
+					   const gchar  *component_name,
+					   const gchar  *type_name,
+					   ...);
+GList*			anjuta_glue_factory_get_path (AnjutaGlueFactory *factory);
+					   
+G_END_DECLS
+#endif /* __ANJUTA_GLUE_FACTORY_H__ */
Index: anjuta-trunk/libanjuta/anjuta-plugin-manager.c
===================================================================
--- anjuta-trunk/libanjuta/anjuta-plugin-manager.c	(revision 2903)
+++ anjuta-trunk/libanjuta/anjuta-plugin-manager.c	(working copy)
@@ -37,8 +37,8 @@
 #include <libanjuta/anjuta-debug.h>
 #include <libanjuta/anjuta-plugin-handle.h>
 #include <libanjuta/anjuta-plugin.h>
-#include <libanjuta/glue-factory.h>
-#include <libanjuta/glue-cpp.h>
+#include <libanjuta/anjuta-glue-factory.h>
+#include <libanjuta/anjuta-glue-cpp.h>
 
 enum
 {
@@ -97,7 +97,7 @@
 /* Plugin class types */
 
 static GHashTable  *plugin_types = NULL;
-static GlueFactory *glue_factory = NULL;
+static AnjutaGlueFactory *anjuta_glue_factory = NULL;
 
 static GObjectClass* parent_class = NULL;
 static guint plugin_manager_signals[LAST_SIGNAL] = { 0 };
@@ -534,7 +534,7 @@
 		{
 			char **pieces;
 			pieces = g_strsplit (plugin_id, ":", -1);
-			ret = glue_cpp_load_plugin (glue_factory, pieces[0], pieces[1]);
+			ret = anjuta_glue_cpp_load_plugin (anjuta_glue_factory, pieces[0], pieces[1]);
 			g_strfreev (pieces);
 			if (ret == NULL)
 			{
@@ -559,7 +559,7 @@
 		char **pieces;
 		/* DEBUG_PRINT ("Loading: %s", plugin_id); */
 		pieces = g_strsplit (plugin_id, ":", -1);
-		type = glue_factory_get_object_type (glue_factory,
+		type = anjuta_glue_factory_get_object_type (anjuta_glue_factory,
 										     pieces[0], pieces[1]);
 		g_hash_table_insert (plugin_types, g_strdup (plugin_id),
 							 GUINT_TO_POINTER (type));
@@ -1787,10 +1787,10 @@
 		g_hash_table_destroy (plugin_types);
 		plugin_types = NULL;
 	}
-	if (glue_factory)
+	if (anjuta_glue_factory)
 	{
-		g_object_unref (glue_factory);
-		glue_factory = NULL;
+		g_object_unref (anjuta_glue_factory);
+		anjuta_glue_factory = NULL;
 	}
 #endif
 	G_OBJECT_CLASS (parent_class)->finalize (object);
@@ -1983,9 +1983,9 @@
 								   "shell", shell, "status", status, NULL);
 	plugin_manager = ANJUTA_PLUGIN_MANAGER (manager_object);
 	
-	if (glue_factory == NULL)
+	if (anjuta_glue_factory == NULL)
 	{
-		glue_factory = glue_factory_new ();
+		anjuta_glue_factory = anjuta_glue_factory_new ();
 	}
 	
 	gnome2_path = g_getenv ("GNOME2_PATH");
@@ -1995,7 +1995,7 @@
 		for (p = pathv; *p != NULL; p++) {
 			char *path = g_strdup (*p);
 			plugin_dirs = g_list_prepend (plugin_dirs, path);
-			glue_factory_add_path (glue_factory, path);
+			anjuta_glue_factory_add_path (anjuta_glue_factory, path);
 		}
 		g_strfreev (pathv);
 	}
@@ -2006,7 +2006,7 @@
 			continue;
 		char *path = g_strdup (node->data);
 		plugin_dirs = g_list_prepend (plugin_dirs, path);
-		glue_factory_add_path (glue_factory, path);
+		anjuta_glue_factory_add_path (anjuta_glue_factory, path);
 		node = g_list_next (node);
 	}
 	plugin_dirs = g_list_reverse (plugin_dirs);
Index: anjuta-trunk/libanjuta/glue-plugin.c
===================================================================
--- anjuta-trunk/libanjuta/glue-plugin.c	(revision 2903)
+++ anjuta-trunk/libanjuta/glue-plugin.c	(working copy)
@@ -1,115 +0,0 @@
-
-/**
- * SECTION:glue-plugin
- * @short_description: Glue plugin
- * @see_also: 
- * @stability: Unstable
- * @include: libanjuta/glue-plugin.h
- * 
- */
-
-#include "glue-plugin.h"
-
-static void glue_plugin_init       (GluePlugin *plugin);
-static void glue_plugin_class_init (GluePluginClass *class);
-
-typedef void (*GluePluginRegisterComponentsFunc) (GluePlugin *plugin);
-
-GType
-glue_plugin_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info =
-      {
-        sizeof (GluePluginClass),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) glue_plugin_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,
-        
-        sizeof (GluePlugin),
-        0, /* n_preallocs */
-        (GInstanceInitFunc) glue_plugin_init,
-      };
-
-      type = g_type_register_static (G_TYPE_TYPE_MODULE,
-				     "GluePlugin",
-				     &type_info, 0);
-    }
-  return type;
-}
-
-static gboolean
-glue_plugin_load (GTypeModule *module)
-{
-  GluePlugin *plugin = GLUE_PLUGIN (module);
-  GluePluginRegisterComponentsFunc func;
-
-  /* Check if we're already loaded */
-  if (plugin->module)
-    return TRUE;
-
-  /* Load the module and register the plugins */
-  plugin->module = g_module_open (plugin->path, 0);
-
-  if (!plugin->module)
-    {
-      g_warning ("could not load plugin: %s", g_module_error ());
-      return FALSE;
-    }
-  
-  if (!g_module_symbol (plugin->module, "glue_register_components", (gpointer *)&func))
-    {
-      g_warning ("could not load plugin: %s", g_module_error ());
-      g_module_close (plugin->module);
-      plugin->module = NULL;
-
-      return FALSE;
-    }
-  
-  (* func) (plugin);
-  return TRUE;
-}
-
-static void
-glue_plugin_unload (GTypeModule *module)
-{
-  GluePlugin *plugin = GLUE_PLUGIN (module);
-
-  if (!plugin->path)
-    plugin->path = g_strdup (g_module_name (plugin->module));
-  g_module_close (plugin->module);
-  plugin->module = NULL;
-}
-
-static void
-glue_plugin_class_init (GluePluginClass *class)
-{
-  GTypeModuleClass *type_module_class;
-
-  type_module_class = (GTypeModuleClass *)class;
-  
-  type_module_class->load = glue_plugin_load;
-  type_module_class->unload = glue_plugin_unload;
-}
-
-static void
-glue_plugin_init (GluePlugin *plugin)
-{
-}
-
-GluePlugin *
-glue_plugin_new (GModule *module)
-{
-  GluePlugin *plugin;
-
-  plugin = g_object_new (GLUE_TYPE_PLUGIN, NULL);
-
-  plugin->module = module;
-  
-  return plugin;
-}
Index: anjuta-trunk/libanjuta/glue-plugin.h
===================================================================
--- anjuta-trunk/libanjuta/glue-plugin.h	(revision 2903)
+++ anjuta-trunk/libanjuta/glue-plugin.h	(working copy)
@@ -1,76 +0,0 @@
-#ifndef __GLUE_PLUGIN_H__
-#define __GLUE_PLUGIN_H__
-
-#include <glib-object.h>
-#include <gmodule.h>
-
-G_BEGIN_DECLS
-
-#define GLUE_TYPE_PLUGIN            (glue_plugin_get_type ())
-#define GLUE_PLUGIN(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GLUE_TYPE_PLUGIN, GluePlugin))
-#define GLUE_PLUGIN_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GLUE_TYPE_PLUGIN, GluePluginClass))
-#define GLUE_IS_PLUGIN(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GLUE_TYPE_PLUGIN))
-#define GLUE_IS_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), GLUE_TYPE_PLUGIN))
-#define GLUE_PLUGIN_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GLUE_TYPE_PLUGIN, GluePluginClass))
-
-typedef struct _GluePlugin      GluePlugin;
-typedef struct _GluePluginClass GluePluginClass;
-typedef struct _GluePluginComponent GluePluginComponent;
-
-typedef GType (* GluePluginComponentGetTypeFunc) (GluePlugin *plugin);
-
-struct _GluePlugin
-{
-  GTypeModule parent;
-  GModule *module;
-  char *path;
-};
-
-struct _GluePluginClass
-{
-  GTypeModuleClass parent_class;
-};
-
-struct _GluePluginComponent
-{
-  const gchar *name;
-  GluePluginComponentGetTypeFunc get_type_func;
-};
-
-GType       glue_plugin_get_type      (void);
-GluePlugin *glue_plugin_new           (GModule *module);
-
-#define GLUE_PLUGIN_MODULE(components) \
-GLUE_REGISTER_COMPONENTS(components) \
-GLUE_GET_COMPONENT_TYPE(components)
-
-#define GLUE_REGISTER_COMPONENTS(components) 	\
-G_MODULE_EXPORT void				\
-glue_register_components (GluePlugin *plugin)	\
-{						\
-  int i;					\
-						\
-  for (i = 0; components[i].name != NULL; i++)	\
-    {						\
-      (* components[i].get_type_func) (plugin);	\
-    }						\
-}
-
-#define GLUE_GET_COMPONENT_TYPE(components)	\
-G_MODULE_EXPORT GType \
-glue_get_component_type (GluePlugin *plugin, const char *name) \
-{ \
-  int i; \
-\
-  for (i = 0; components[i].name != NULL; i++) \
-    { \
-      if (strcmp (name, components[i].name) == 0) \
-	return (* components[i].get_type_func) (plugin); \
-    } \
-\
-  return G_TYPE_INVALID; \
-} 
-
-G_END_DECLS
-
-#endif /* __GLUE_PLUGIN_H__ */
Index: anjuta-trunk/libanjuta/anjuta-glue-cpp.c
===================================================================
--- anjuta-trunk/libanjuta/anjuta-glue-cpp.c	(revision 0)
+++ anjuta-trunk/libanjuta/anjuta-glue-cpp.c	(revision 0)
@@ -0,0 +1,91 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
+/*
+ * anjuta-glue-cpp.c (c) 2006 Johannes Schmid
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Library General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
+ */
+
+/**
+ * SECTION:anjuta-glue-cpp
+ * @title: AnjutaAnjutaGlueCpp
+ * @short_description: C++ Anjuta glue code
+ * @see_also: 
+ * @stability: Unstable
+ * @include: libanjuta/anjuta-glue-cpp.h
+ * 
+ */
+
+#include "anjuta-glue-cpp.h"
+
+#include <string.h>
+#include <gmodule.h>
+
+typedef GObject* (*AnjutaGlue_constructor)();
+
+GObject*
+anjuta_glue_cpp_load_plugin(AnjutaGlueFactory* factory, const gchar* component_name, const gchar* type_name)
+{
+	GList* p = anjuta_glue_factory_get_path(factory);
+	gchar *plugin_name;
+  
+	plugin_name = g_module_build_path (NULL, component_name);
+  
+  	AnjutaGlue_constructor constructor;
+  
+	while (p)
+    {
+		const gchar *file_name;
+ 		PathEntry *entry = p->data;
+		GDir *dir;
+		GObject* plugin;
+      
+		dir = g_dir_open (entry->path, 0, NULL);
+
+		if (dir == NULL)
+			continue;
+      
+		do {
+			file_name = g_dir_read_name (dir);
+	
+			if (file_name && strcmp (file_name, plugin_name) == 0) {
+				GModule *module;
+	  			gchar *plugin_path;
+	  
+	  			/* We have found a matching module */
+	  			plugin_path = g_module_build_path (entry->path, plugin_name);
+	  			module = g_module_open (plugin_path, 0);
+	  			if (module == NULL)
+	    		{
+	      			g_warning ("Could not open module: %s\n", g_module_error ());
+	     		 	goto move_to_next_dir;
+	    		}
+
+	  			if (!g_module_symbol (module, "anjuta_glue_constructor", (gpointer *)&constructor))
+	    		{
+	      			g_module_close (module);
+	      			goto move_to_next_dir;
+	    		}
+				/* Create the object */
+				plugin =  (*constructor)();
+				return plugin;
+			}
+		} while (file_name != NULL);
+move_to_next_dir:	  
+      g_dir_close (dir);
+      
+      p = p->next;
+    }
+
+  return NULL;
+}
Index: anjuta-trunk/libanjuta/anjuta-glue-cpp.h
===================================================================
--- anjuta-trunk/libanjuta/anjuta-glue-cpp.h	(revision 0)
+++ anjuta-trunk/libanjuta/anjuta-glue-cpp.h	(revision 0)
@@ -0,0 +1,31 @@
+/* -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*- */
+/*
+ * anjuta-glue-cpp.h (c) 2006 Johannes Schmid
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Library General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor Boston, MA 02110-1301,  USA
+ */
+ 
+#ifndef ANJUTA_GLUE_CPP_H
+#define ANJUTA_GLUE_CPP_H
+
+#include "anjuta-glue-factory.h"
+
+G_BEGIN_DECLS
+
+GObject*
+anjuta_glue_cpp_load_plugin(AnjutaGlueFactory* factory, const gchar* component_name, const gchar* type_name);
+
+G_END_DECLS
+
+#endif
Index: anjuta-trunk/libanjuta/anjuta-glue-plugin.c
===================================================================
--- anjuta-trunk/libanjuta/anjuta-glue-plugin.c	(revision 0)
+++ anjuta-trunk/libanjuta/anjuta-glue-plugin.c	(revision 0)
@@ -0,0 +1,115 @@
+
+/**
+ * SECTION:anjuta-glue-plugin
+ * @short_description: Anjuta glue plugin
+ * @see_also: 
+ * @stability: Unstable
+ * @include: libanjuta/anjuta-glue-plugin.h
+ * 
+ */
+
+#include "anjuta-glue-plugin.h"
+
+static void anjuta_glue_plugin_init       (AnjutaGluePlugin *plugin);
+static void anjuta_glue_plugin_class_init (AnjutaGluePluginClass *class);
+
+typedef void (*AnjutaGluePluginRegisterComponentsFunc) (AnjutaGluePlugin *plugin);
+
+GType
+anjuta_glue_plugin_get_type (void)
+{
+  static GType type = 0;
+
+  if (!type)
+    {
+      static const GTypeInfo type_info =
+      {
+        sizeof (AnjutaGluePluginClass),
+        (GBaseInitFunc) NULL,
+        (GBaseFinalizeFunc) NULL,
+        (GClassInitFunc) anjuta_glue_plugin_class_init,
+        (GClassFinalizeFunc) NULL,
+        NULL,
+        
+        sizeof (AnjutaGluePlugin),
+        0, /* n_preallocs */
+        (GInstanceInitFunc) anjuta_glue_plugin_init,
+      };
+
+      type = g_type_register_static (G_TYPE_TYPE_MODULE,
+				     "AnjutaGluePlugin",
+				     &type_info, 0);
+    }
+  return type;
+}
+
+static gboolean
+anjuta_glue_plugin_load (GTypeModule *module)
+{
+  AnjutaGluePlugin *plugin = ANJUTA_GLUE_PLUGIN (module);
+  AnjutaGluePluginRegisterComponentsFunc func;
+
+  /* Check if we're already loaded */
+  if (plugin->module)
+    return TRUE;
+
+  /* Load the module and register the plugins */
+  plugin->module = g_module_open (plugin->path, 0);
+
+  if (!plugin->module)
+    {
+      g_warning ("could not load plugin: %s", g_module_error ());
+      return FALSE;
+    }
+  
+  if (!g_module_symbol (plugin->module, "anjuta_glue_register_components", (gpointer *)&func))
+    {
+      g_warning ("could not load plugin: %s", g_module_error ());
+      g_module_close (plugin->module);
+      plugin->module = NULL;
+
+      return FALSE;
+    }
+  
+  (* func) (plugin);
+  return TRUE;
+}
+
+static void
+anjuta_glue_plugin_unload (GTypeModule *module)
+{
+  AnjutaGluePlugin *plugin = ANJUTA_GLUE_PLUGIN (module);
+
+  if (!plugin->path)
+    plugin->path = g_strdup (g_module_name (plugin->module));
+  g_module_close (plugin->module);
+  plugin->module = NULL;
+}
+
+static void
+anjuta_glue_plugin_class_init (AnjutaGluePluginClass *class)
+{
+  GTypeModuleClass *type_module_class;
+
+  type_module_class = (GTypeModuleClass *)class;
+  
+  type_module_class->load = anjuta_glue_plugin_load;
+  type_module_class->unload = anjuta_glue_plugin_unload;
+}
+
+static void
+anjuta_glue_plugin_init (AnjutaGluePlugin *plugin)
+{
+}
+
+AnjutaGluePlugin *
+anjuta_glue_plugin_new (GModule *module)
+{
+  AnjutaGluePlugin *plugin;
+
+  plugin = g_object_new (ANJUTA_GLUE_TYPE_PLUGIN, NULL);
+
+  plugin->module = module;
+  
+  return plugin;
+}
Index: anjuta-trunk/libanjuta/anjuta-glue-plugin.h
===================================================================
--- anjuta-trunk/libanjuta/anjuta-glue-plugin.h	(revision 0)
+++ anjuta-trunk/libanjuta/anjuta-glue-plugin.h	(revision 0)
@@ -0,0 +1,76 @@
+#ifndef __ANJUTA_GLUE_PLUGIN_H__
+#define __ANJUTA_GLUE_PLUGIN_H__
+
+#include <glib-object.h>
+#include <gmodule.h>
+
+G_BEGIN_DECLS
+
+#define ANJUTA_GLUE_TYPE_PLUGIN            (anjuta_glue_plugin_get_type ())
+#define ANJUTA_GLUE_PLUGIN(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), ANJUTA_GLUE_TYPE_PLUGIN, AnjutaGluePlugin))
+#define ANJUTA_GLUE_PLUGIN_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), ANJUTA_GLUE_TYPE_PLUGIN, AnjutaGluePluginClass))
+#define ANJUTA_GLUE_IS_PLUGIN(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), ANJUTA_GLUE_TYPE_PLUGIN))
+#define ANJUTA_GLUE_IS_PLUGIN_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), ANJUTA_GLUE_TYPE_PLUGIN))
+#define ANJUTA_GLUE_PLUGIN_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), ANJUTA_GLUE_TYPE_PLUGIN, AnjutaGluePluginClass))
+
+typedef struct _AnjutaGluePlugin      AnjutaGluePlugin;
+typedef struct _AnjutaGluePluginClass AnjutaGluePluginClass;
+typedef struct _AnjutaGluePluginComponent AnjutaGluePluginComponent;
+
+typedef GType (* AnjutaGluePluginComponentGetTypeFunc) (AnjutaGluePlugin *plugin);
+
+struct _AnjutaGluePlugin
+{
+  GTypeModule parent;
+  GModule *module;
+  char *path;
+};
+
+struct _AnjutaGluePluginClass
+{
+  GTypeModuleClass parent_class;
+};
+
+struct _AnjutaGluePluginComponent
+{
+  const gchar *name;
+  AnjutaGluePluginComponentGetTypeFunc get_type_func;
+};
+
+GType       anjuta_glue_plugin_get_type      (void);
+AnjutaGluePlugin *anjuta_glue_plugin_new           (GModule *module);
+
+#define ANJUTA_GLUE_PLUGIN_MODULE(components) \
+ANJUTA_GLUE_REGISTER_COMPONENTS(components) \
+ANJUTA_GLUE_GET_COMPONENT_TYPE(components)
+
+#define ANJUTA_GLUE_REGISTER_COMPONENTS(components) 	\
+G_MODULE_EXPORT void				\
+anjuta_glue_register_components (AnjutaGluePlugin *plugin)	\
+{						\
+  int i;					\
+						\
+  for (i = 0; components[i].name != NULL; i++)	\
+    {						\
+      (* components[i].get_type_func) (plugin);	\
+    }						\
+}
+
+#define ANJUTA_GLUE_GET_COMPONENT_TYPE(components)	\
+G_MODULE_EXPORT GType \
+anjuta_glue_get_component_type (AnjutaGluePlugin *plugin, const char *name) \
+{ \
+  int i; \
+\
+  for (i = 0; components[i].name != NULL; i++) \
+    { \
+      if (strcmp (name, components[i].name) == 0) \
+	return (* components[i].get_type_func) (plugin); \
+    } \
+\
+  return G_TYPE_INVALID; \
+} 
+
+G_END_DECLS
+
+#endif /* __ANJUTA_GLUE_PLUGIN_H__ */
Index: anjuta-trunk/libanjuta/glue-factory.c
===================================================================
--- anjuta-trunk/libanjuta/glue-factory.c	(revision 2903)
+++ anjuta-trunk/libanjuta/glue-factory.c	(working copy)
@@ -1,246 +0,0 @@
-
-/**
- * SECTION:glue-factory
- * @short_description: Underlying plugin factory
- * @see_also: 
- * @stability: Unstable
- * @include: libanjuta/glue-factory.h
- * 
- */
-
-#include <string.h>
-#include <gmodule.h>
-#include "glue-factory.h"
-#include "glue-plugin.h"
-
-static void glue_factory_init       (GlueFactory *factory);
-static void glue_factory_class_init (GlueFactoryClass *class);
-
-typedef GType (*GluePluginGetTypeFunc) (GluePlugin *plugin, const char *name);
-
-typedef struct
-{
-  GluePlugin *plugin;
-  GluePluginGetTypeFunc get_type_func;
-  const gchar *name;
-} LoadedPlugin;
-
-struct _GlueFactory
-{
-  GObject parent;
-  
-  GList *paths;
-};
-
-struct _GlueFactoryClass
-{
-  GObjectClass parent_class;
-};
-
-GType
-glue_factory_get_type (void)
-{
-  static GType type = 0;
-
-  if (!type)
-    {
-      static const GTypeInfo type_info =
-      {
-        sizeof (GlueFactoryClass),
-        (GBaseInitFunc) NULL,
-        (GBaseFinalizeFunc) NULL,
-        (GClassInitFunc) glue_factory_class_init,
-        (GClassFinalizeFunc) NULL,
-        NULL,
-        
-        sizeof (GlueFactory),
-        0, /* n_preallocs */
-        (GInstanceInitFunc) glue_factory_init,
-      };
-
-      type = g_type_register_static (G_TYPE_OBJECT,
-				     "GlueFactory",
-				     &type_info, 0);
-    }
-  return type;
-}
-
-static void
-glue_factory_class_init (GlueFactoryClass *class)
-{
-}
-
-static void
-glue_factory_init (GlueFactory *factory)
-{
-}
-
-GlueFactory *
-glue_factory_new (void)
-{
-  GlueFactory *factory;
-
-  factory = g_object_new (glue_factory_get_type (), NULL);
-
-  return factory;
-}
-
-gboolean
-glue_factory_add_path (GlueFactory *factory, const gchar *path)
-{
-  GList *p;
-  PathEntry *entry;
-  
-  if (!g_file_test (path, G_FILE_TEST_EXISTS | G_FILE_TEST_IS_DIR))
-    return FALSE;
-
-  /* Check if the path has been added */
-  p = factory->paths;
-
-  while (p)
-    {
-      PathEntry *entry = p->data;
-
-      /* If it's already added we return TRUE */
-      if (strcmp (path, entry->path) == 0)
-	return TRUE;
-      
-      p = p->next;
-    }
-
-  entry = g_new (PathEntry, 1);
-  entry->path = g_strdup (path);
-  entry->loaded_plugins = g_hash_table_new (NULL, NULL);
-  
-  factory->paths = g_list_prepend (factory->paths, entry);
-    
-  return TRUE;
-}
-
-GList* glue_factory_get_path(GlueFactory *factory)
-{
-	return factory->paths;
-}
-
-static LoadedPlugin *
-get_already_loaded_module (GlueFactory *factory,
-			   const gchar *component_name,
-			   const gchar *type_name)
-{
-  GList *p;
-
-  p = factory->paths;
-  while (p)
-    {
-      PathEntry *entry = p->data;
-      LoadedPlugin *plugin;
-
-      plugin = g_hash_table_lookup (entry->loaded_plugins, component_name);
-
-      if (plugin && (* plugin->get_type_func) (plugin->plugin, type_name) != G_TYPE_INVALID)
-	return plugin;
-      
-      p = p->next;
-    }
-
-  return NULL;
-}
-
-static LoadedPlugin *
-load_plugin (GlueFactory *factory, const gchar *component_name, const gchar *type_name)
-{
-  GList *p;
-  gchar *plugin_name;
-  
-  p = factory->paths;
-  plugin_name = g_module_build_path (NULL, component_name);
-  
-  while (p)
-    {
-      const gchar *file_name;
-      PathEntry *entry = p->data;
-      GDir *dir;
-      
-      dir = g_dir_open (entry->path, 0, NULL);
-
-      if (dir == NULL)
-	continue;
-      
-      do {
-	file_name = g_dir_read_name (dir);
-	
-	if (file_name && strcmp (file_name, plugin_name) == 0) {
-	  GModule *module;
-	  GluePlugin *glue_plugin;
-	  gchar *plugin_path;
-	  GluePluginGetTypeFunc get_type_func;
-	  LoadedPlugin *plugin;
-	  
-	  /* We have found a matching module */
-	  plugin_path = g_module_build_path (entry->path, plugin_name);
-	  module = g_module_open (plugin_path, 0);
-	  if (module == NULL)
-	    {
-	      g_warning ("Could not open module: %s\n", g_module_error ());
-	      goto move_to_next_dir;
-	    }
-
-	  if (!g_module_symbol (module, "glue_get_component_type", (gpointer *)&get_type_func))
-	    {
-	      g_module_close (module);
-	      goto move_to_next_dir;
-	    }
-
-	  /* Now create a new glue plugin */
-	  glue_plugin = glue_plugin_new (module);
-	  if ((* get_type_func) (glue_plugin, type_name) == G_TYPE_INVALID)
-	    {
-	      g_object_unref (glue_plugin);
-	      g_module_close (module);
-	      goto move_to_next_dir;
-	    }
-	  
-	  /* Everything seems to be in order */
-	  plugin = g_new (LoadedPlugin, 1);
-	  plugin->plugin = glue_plugin;
-	  plugin->get_type_func = get_type_func;
-	  plugin->name = g_strdup (component_name);
-	  g_type_module_set_name (G_TYPE_MODULE (plugin->plugin), plugin->name);
-	  g_hash_table_insert (entry->loaded_plugins, (gpointer)plugin->name, plugin);
-	  
-	  g_dir_close (dir);
-	  g_free (plugin_name);
-	  return plugin;
-
-	}
-	
-      } while (file_name != NULL);
-      
-move_to_next_dir:	  
-      g_dir_close (dir);
-      
-      p = p->next;
-    }
-
-  g_free (plugin_name);
-  return NULL;
-}
-
-GType
-glue_factory_get_object_type (GlueFactory  *factory,
-			      const gchar  *component_name,
-			      const gchar  *type_name)
-{
-  LoadedPlugin *plugin;
-
-  plugin = get_already_loaded_module (factory, component_name, type_name);
-  
-  if (!plugin)
-    plugin = load_plugin (factory, component_name, type_name);
-
-  if (plugin) {
-    return (* plugin->get_type_func) (plugin->plugin, type_name);
-  }
-  else
-    return G_TYPE_INVALID;
-}
Index: anjuta-trunk/libanjuta/glue-factory.h
===================================================================
--- anjuta-trunk/libanjuta/glue-factory.h	(revision 2903)
+++ anjuta-trunk/libanjuta/glue-factory.h	(working copy)
@@ -1,39 +0,0 @@
-#ifndef __GLUE_FACTORY_H__
-#define __GLUE_FACTORY_H__
-
-#include <glib-object.h>
-
-G_BEGIN_DECLS
-
-#define GLUE_TYPE_FACTORY            (glue_factory_get_type ())
-#define GLUE_FACTORY(obj)            (G_TYPE_CHECK_INSTANCE_CAST ((obj), GLUE_TYPE_FACTORY, GlueFactory))
-#define GLUE_FACTORY_CLASS(klass)    (G_TYPE_CHECK_CLASS_CAST ((klass), GLUE_TYPE_FACTORY, GlueFactoryClass))
-#define GLUE_IS_FACTORY(obj)         (G_TYPE_CHECK_INSTANCE_TYPE ((obj), GLUE_TYPE_FACTORY))
-#define GLUE_IS_FACTORY_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((obj), GLUE_TYPE_FACTORY))
-#define GLUE_FACTORY_GET_CLASS(obj)  (G_TYPE_INSTANCE_GET_CLASS((obj), GLUE_TYPE_FACTORY, GlueFactoryClass))
-
-typedef struct
-{
-  const gchar *path;
-  GHashTable *loaded_plugins;
-} PathEntry;
-
-typedef struct _GlueFactory      GlueFactory;
-typedef struct _GlueFactoryClass GlueFactoryClass;
-
-GType        glue_factory_get_type        (void);
-GlueFactory *glue_factory_new             (void);
-gboolean     glue_factory_add_path        (GlueFactory  *factory,
-					   const char   *path);
-GType        glue_factory_get_object_type (GlueFactory  *factory,
-					   const gchar  *component_name,
-					   const gchar  *type_name);
-
-GObject     *glue_factory_create_object   (GlueFactory  *factory,
-					   const gchar  *component_name,
-					   const gchar  *type_name,
-					   ...);
-GList*			glue_factory_get_path (GlueFactory *factory);
-					   
-G_END_DECLS
-#endif /* __GLUE_FACTORY_H__ */
Index: anjuta-trunk/libanjuta/Makefile.am
===================================================================
--- anjuta-trunk/libanjuta/Makefile.am	(revision 2912)
+++ anjuta-trunk/libanjuta/Makefile.am	(working copy)
@@ -50,10 +50,10 @@
 	anjuta-serializer.c \
 	resources.c \
 	resources.h \
-	glue-plugin.c \
-	glue-factory.c \
-	glue-cpp.h \
-	glue-cpp.c \
+	anjuta-glue-plugin.c \
+	anjuta-glue-factory.c \
+	anjuta-glue-cpp.h \
+	anjuta-glue-cpp.c \
 	cell-renderer-captioned-image.c	\
 	cell-renderer-captioned-image.h \
 	e-splash.h \
@@ -82,8 +82,8 @@
 	anjuta-session.h \
 	anjuta-save-prompt.h \
 	anjuta-serializer.h \
-	glue-plugin.h \
-	glue-factory.h \
+	anjuta-glue-plugin.h \
+	anjuta-glue-factory.h \
 	resources.h
 
 libanjutainclude_HEADERS = \
