diff -rup compizconfig-backend-gconf-0.5.2/configure.ac ../compizconfig-backend-gconf-0.5.2/configure.ac
--- compizconfig-backend-gconf-0.5.2/configure.ac	2007-08-14 11:16:55.000000000 +0200
+++ ../compizconfig-backend-gconf-0.5.2/configure.ac	2007-08-24 17:47:48.571463000 +0200
@@ -1,6 +1,6 @@
 AC_PREREQ(2.57)
 
-AC_INIT([compizconfig-backend-gconf],esyscmd(. ./VERSION;echo -n $VERSION), [maniac@opencompositing.org])
+AC_INIT([compizconfig-backend-gconf],0.5.2, [maniac@opencompositing.org])
 
 AC_DEFINE_UNQUOTED(VERSION,"$VERSION",[Version])
 
@@ -67,6 +67,18 @@ if test "x$GCC" = "xyes"; then
   fi
 fi
 
+compiling_on_solaris=no
+case "$host" in
+        *-*-solaris*)
+	  AC_MSG_CHECKING(if compiling on Solaris)
+	  compiling_on_solaris=yes
+	  AC_MSG_RESULT($compiling_on_solaris)
+	  AC_DEFINE(SOLARIS, 1, [Compiling on Solaris])
+	;;
+esac
+
+
+
 AC_C_BIGENDIAN
 
 #LIBBERYLDECORATION_REQUIRES="xrender >= 0.8.4"
diff -rup compizconfig-backend-gconf-0.5.2/settings-backend/gconf.c ../compizconfig-backend-gconf-0.5.2/settings-backend/gconf.c
--- compizconfig-backend-gconf-0.5.2/settings-backend/gconf.c	2007-08-14 11:26:13.000000000 +0200
+++ ../compizconfig-backend-gconf-0.5.2/settings-backend/gconf.c	2007-08-24 17:56:27.978748000 +0200
@@ -324,6 +324,117 @@ struct _SpecialOption {
 
 #define N_SOPTIONS (sizeof (specialOptions) / sizeof (struct _SpecialOption))
 
+
+#ifdef SOLARIS
+#include <ctype.h>
+#include <stdlib.h>
+#include <string.h>
+char *
+strndup (s, n)
+     const char *s;
+     size_t n;
+{
+  size_t len = strnlen (s, n);
+  char *new = malloc (len + 1);
+
+  if (new == NULL)
+    return NULL;
+
+  new[len] = '\0';
+  return memcpy (new, s, len);
+}
+int asprintf(char **out, const char *fmt, ...)
+{
+    va_list ap;
+    int ret_status = EOF;
+    char dir_name[2001];
+    char file_name[2000];
+    FILE *fp = NULL;
+    char *work = NULL;
+
+    va_start(ap, fmt);
+
+    /* Warning: tmpfile() does not work well on Windows (MinGW)
+     *          if user does not have write access on the drive where 
+     *          working dir is? */
+#ifdef __MINGW32__
+    /* file_name = G_tempfile(); */
+    GetTempPath ( 2000, dir_name );
+    GetTempFileName ( dir_name, "asprintf", 0, file_name );
+    fp = fopen ( file_name, "w+" );
+#else
+    fp = tmpfile(); 
+#endif /* __MINGW32__ */
+
+    if ( fp ) {
+        int count;
+
+        count = vfprintf(fp, fmt, ap);
+        if (count >= 0) {
+            work = calloc(count + 1, sizeof(char));
+            if (work != NULL) {
+                rewind(fp);
+                ret_status = fread(work, sizeof(char), count, fp);
+                if (ret_status != count) {
+                    ret_status = EOF;
+                    free(work);
+                    work = NULL;
+                }
+            }
+        }
+        fclose(fp);
+#ifdef __MINGW32__
+        unlink ( file_name );
+#endif /* __MINGW32__ */
+    }
+    va_end(ap);
+    *out = work;
+
+    return ret_status;
+}
+
+/*
+ * Get next token from string *stringp, where tokens are possibly-empty
+ * strings separated by characters from delim.
+ *
+ * Writes NULs into the string at *stringp to end tokens.
+ * delim need not remain constant from call to call.
+ * On return, *stringp points past the last NUL written (if there might
+ * be further tokens), or is NULL (if there are definitely no more tokens).
+ *
+ * If *stringp is NULL, strsep returns NULL.
+ */
+char *
+strsep(char ** stringp, const char *delim)
+{
+        char *s;
+        const char *spanp;
+        int c, sc;
+        char *tok;
+
+        if ((s = *stringp) == NULL)
+                return (NULL);
+        for (tok = s;;) {
+                c = *s++;
+                spanp = delim;
+                do {
+                        if ((sc = *spanp++) == c) {
+                                if (c == 0)
+                                        s = NULL;
+                                else
+                                        s[-1] = 0;
+                                *stringp = s;
+                                return (tok);
+                        }
+                } while (sc != 0);
+        }
+        /* NOTREACHED */
+}
+
+
+
+#endif
+
 static CCSSetting *
 findDisplaySettingForPlugin (CCSContext *context,
 			     char       *plugin,
