Index: trunk/lib/libqof/qof/qofmath128.c
===================================================================
--- trunk/lib/libqof/qof/qofmath128.c	(revision 17477)
+++ trunk/lib/libqof/qof/qofmath128.c	(working copy)
@@ -37,7 +37,7 @@
 /** Multiply a pair of signed 64-bit numbers, 
  *  returning a signed 128-bit number.
  */
-inline qofint128
+G_INLINE_FUNC qofint128
 mult128 (gint64 a, gint64 b)
 {
   qofint128 prod;
@@ -106,7 +106,7 @@
 }
 
 /** Shift right by one bit (i.e. divide by two) */
-inline qofint128
+G_INLINE_FUNC qofint128
 shift128 (qofint128 x)
 {
   guint64 sbit = x.hi & 0x1;
@@ -127,7 +127,7 @@
 }
 
 /** Shift leftt by one bit (i.e. multiply by two) */
-inline qofint128
+G_INLINE_FUNC qofint128
 shiftleft128 (qofint128 x)
 {
   guint64 sbit;
@@ -149,7 +149,7 @@
 }
 
 /** increment a 128-bit number by one */
-inline qofint128
+G_INLINE_FUNC qofint128
 inc128 (qofint128 a)
 {
   if (0 == a.isneg)
@@ -176,7 +176,7 @@
 /** Divide a signed 128-bit number by a signed 64-bit,
  *  returning a signed 128-bit number.
  */
-inline qofint128
+G_INLINE_FUNC qofint128
 div128 (qofint128 n, gint64 d)
 {
   qofint128 quotient;
@@ -215,7 +215,7 @@
  *  I beleive that ths algo is overflow-free, but should be 
  *  audited some more ... 
  */
-inline gint64
+G_INLINE_FUNC gint64
 rem128 (qofint128 n, gint64 d)
 {
   qofint128 quotient = div128 (n,d);
@@ -228,7 +228,7 @@
 }
 
 /** Return true of two numbers are equal */
-inline gboolean
+G_INLINE_FUNC gboolean
 equal128 (qofint128 a, qofint128 b)
 {
 	if (a.lo != b.lo) return 0;
@@ -238,7 +238,7 @@
 }
 
 /** Return returns 1 if a>b, -1 if b>a, 0 if a == b */
-inline int
+G_INLINE_FUNC int
 cmp128 (qofint128 a, qofint128 b)
 {
    if ((0 == a.isneg) && b.isneg) return 1;
@@ -260,7 +260,7 @@
 }
 
 /** Return the greatest common factor of two 64-bit numbers */
-inline guint64
+G_INLINE_FUNC guint64
 gcf64(guint64 num, guint64 denom)
 {
   guint64   t;
@@ -281,7 +281,7 @@
 }
 
 /** Return the least common multiple of two 64-bit numbers. */
-inline qofint128
+G_INLINE_FUNC qofint128
 lcm128 (guint64 a, guint64 b)
 {
   guint64 gcf = gcf64 (a,b);
@@ -290,7 +290,7 @@
 }
 
 /** Add a pair of 128-bit numbers, returning a 128-bit number */
-inline qofint128
+G_INLINE_FUNC qofint128
 add128 (qofint128 a, qofint128 b)
 {
   qofint128 sum;
