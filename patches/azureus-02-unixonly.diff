--- SFEazureus-3.0.2.2/org/gudy/azureus2/core3/internat/MessageText.java.orig	2007-09-08 15:16:25.366059273 +0700
+++ SFEazureus-3.0.2.2/org/gudy/azureus2/core3/internat/MessageText.java	2007-09-08 15:17:55.653610062 +0700
@@ -331,9 +331,7 @@
    * @see Constants
    */
   private static String getPlatformSuffix() {
-    if(Constants.isOSX)
-        return "._mac";
-    else if(Constants.isLinux)
+    if(Constants.isLinux)
       return "._linux";
     else if(Constants.isUnix)
       return "._unix";
@@ -341,8 +339,6 @@
       return "._freebsd";
     else if(Constants.isSolaris)
         return "._solaris";
-     else if(Constants.isWindows)
-       return "._windows";
      else
        return "._unknown";
   }
--- SFEazureus-3.0.2.2/org/gudy/azureus2/platform/PlatformManagerFactory.java.orig	2007-09-08 15:15:53.799605218 +0700
+++ SFEazureus-3.0.2.2/org/gudy/azureus2/platform/PlatformManagerFactory.java	2007-09-08 15:13:36.961787670 +0700
@@ -46,23 +46,9 @@
 			if ( platform_manager == null ){
 										  
 				try{
-					if ( getPlatformType() == PlatformManager.PT_WINDOWS ){
-						
-						platform_manager = org.gudy.azureus2.platform.win32.PlatformManagerImpl.getSingleton();
-						
-					}else if( getPlatformType() == PlatformManager.PT_MACOSX ){
-						
-	                    platform_manager = org.gudy.azureus2.platform.macosx.PlatformManagerImpl.getSingleton();
-	                    
-					}else if( getPlatformType() == PlatformManager.PT_UNIX ){
 						
             platform_manager = org.gudy.azureus2.platform.unix.PlatformManagerImpl.getSingleton();
 
-					}
-				}catch( PlatformManagerException e ){
-					
-						// exception will already have been logged
-					
 				}catch( Throwable e ){
 					
 					Debug.printStackTrace(e);
@@ -85,15 +71,7 @@
 	public static int
 	getPlatformType()
 	{
-		if (Constants.isWindows) {
-
-			return (PlatformManager.PT_WINDOWS );
-
-		} else if (Constants.isOSX) {
-
-			return (PlatformManager.PT_MACOSX );
-
-		} else if (Constants.isUnix) {
+		if (Constants.isUnix) {
 
 			return (PlatformManager.PT_UNIX );
 
--- SFEazureus-3.0.2.2/org/gudy/azureus2/platform/PlatformManagerPluginDelegate.java.orig	2007-09-08 15:18:44.345481168 +0700
+++ SFEazureus-3.0.2.2/org/gudy/azureus2/platform/PlatformManagerPluginDelegate.java	2007-09-08 15:19:53.821284921 +0700
@@ -23,7 +23,6 @@
 import java.util.Properties;
 
 import org.gudy.azureus2.platform.unix.PlatformManagerUnixPlugin;
-import org.gudy.azureus2.platform.win32.PlatformManagerUpdateChecker;
 
 import org.gudy.azureus2.plugins.Plugin;
 import org.gudy.azureus2.plugins.PluginException;
@@ -45,10 +44,7 @@
 		PlatformManager platform = PlatformManagerFactory.getPlatformManager();
 
 		int platformType = platform.getPlatformType();
-		if (platformType == PlatformManager.PT_WINDOWS) {
-			PlatformManagerUpdateChecker plugin = new PlatformManagerUpdateChecker();
-			plugin.initialize(pluginInterface);
-		} else if (platformType == PlatformManager.PT_UNIX) {
+		if (platformType == PlatformManager.PT_UNIX) {
 			PlatformManagerUnixPlugin plugin = new PlatformManagerUnixPlugin();
 			plugin.initialize(pluginInterface);
 		} else {
--- SFEazureus-3.0.2.2/com/aelitis/azureus/core/update/impl/AzureusRestarterImpl.java.orig	2007-09-08 15:01:55.533887602 +0700
+++ SFEazureus-3.0.2.2/com/aelitis/azureus/core/update/impl/AzureusRestarterImpl.java	2007-09-08 15:11:38.416233218 +0700
@@ -30,8 +30,6 @@
 import org.gudy.azureus2.platform.PlatformManager;
 import org.gudy.azureus2.platform.PlatformManagerFactory;
 import org.gudy.azureus2.platform.unix.ScriptAfterShutdown;
-import org.gudy.azureus2.platform.win32.access.AEWin32Access;
-import org.gudy.azureus2.platform.win32.access.AEWin32Manager;
 import org.gudy.azureus2.update.UpdaterUtils;
 
 import com.aelitis.azureus.core.AzureusCore;
@@ -48,8 +46,6 @@
 	private static final LogIDs LOGID = LogIDs.CORE;
 	private static final String MAIN_CLASS 		= "org.gudy.azureus2.update.Updater";
 	private static final String UPDATER_JAR 	= "Updater.jar";
-	private static final String EXE_UPDATER		= "AzureusUpdater.exe";
-	
   
 	public static final String		UPDATE_PROPERTIES	= "update.properties";
 
@@ -137,9 +133,7 @@
 	  		restart_properties.put( "app_name", SystemProperties.getApplicationName());
 	  		restart_properties.put( "app_entry", SystemProperties.getApplicationEntryPoint());
 	  		
-	  		if ( System.getProperty( "azureus.nativelauncher" ) != null || Constants.isOSX ){
-	  			//NOTE: new 2306 osx bundle now sets azureus.nativelauncher=1, but older bundles dont
-	  			
+	  		if ( System.getProperty( "azureus.nativelauncher" ) != null ){
 	  			try{
 		  			String	cmd = PlatformManagerFactory.getPlatformManager().getApplicationCommandLine();
 		  			
@@ -214,225 +208,6 @@
 	}
 	  
 	
-	private boolean
-	win32NativeRestart(
-		PrintWriter	log,
-		String		exec )
-	{
-	    try{
-	    		// we need to spawn without inheriting handles
-	    	
-	    	PlatformManager pm = PlatformManagerFactory.getPlatformManager();
-	    	
-	    	pm.createProcess( exec, false );
-	    
-	    	return( true );
-	    	
-	    }catch(Throwable e) {
-	        e.printStackTrace(log);
-	        
-	        return( false );
-	    }
-	}
-	
-
-	private String getExeUpdater(PrintWriter log) {
-		try {
-			boolean isVistaOrHigher = false;
-			if (Constants.isWindows) {
-				Float ver = null;
-				try {
-					ver = new Float(System.getProperty("os.version"));
-				} catch (Exception e) {
-				}
-				isVistaOrHigher = ver != null && ver.floatValue() >= 6;
-			}
-
-			// Vista test: We will need to run an elevated EXE updater if we can't
-			//             write to the program dir.
-			
-			if (isVistaOrHigher) {
-				if (AzureusCoreFactory.getSingleton().getPluginManager().getDefaultPluginInterface().getUpdateManager().getInstallers().length > 0) {
-					log.println("Vista restart w/Updates.. checking if EXE needed");
-					try {
-						final File writeFile = FileUtil.getApplicationFile("write.dll");
-						// should fail if no perms, but sometimes it's created in
-						// virtualstore (if ran from java(w).exe for example)
-						FileOutputStream fos = new FileOutputStream(writeFile);
-						fos.write(32);
-						fos.close();
-
-						writeFile.delete();
-
-						File renameFile = FileUtil.getApplicationFile("License.txt");
-						if (renameFile != null && renameFile.exists()) {
-							File oldFile = FileUtil.getApplicationFile("License.txt");
-							String oldName = renameFile.getName();
-							File newFile = new File(renameFile.getParentFile(), oldName
-									+ ".bak");
-							renameFile.renameTo(newFile);
-
-							if (oldFile.exists()) {
-								log.println("Requiring EXE because rename test failed");
-								return EXE_UPDATER; 
-							}
-
-							newFile.renameTo(oldFile);
-						} else {
-							log.println("Could not try Permission Test 2. File " + renameFile
-									+ " not found");
-						}
-
-					} catch (Exception e) {
-						log.println("Permission Test Failed. " + e.getMessage() + ";"
-								+ Debug.getCompressedStackTrace());
-						return EXE_UPDATER; 
-					}
-				}
-			}
-		} catch (Throwable t) {
-			// ignore vista test
-		}
-
-		return null;
-	}
-
-  private boolean restartViaEXE(PrintWriter log,
-  		String exeUpdater,
-      String[]  properties,
-      String[]  parameters,
-      String backupJavaRunString,
-      boolean update_only) 
-  {
-		String azRunner = null;
-		File fileRestart = null;
-		if (!update_only) {
-  		try {
-  			azRunner = PlatformManagerFactory.getPlatformManager().getApplicationCommandLine();
-  		} catch (PlatformManagerException e) {
-  			// TODO Auto-generated catch block
-  			e.printStackTrace();
-  		}
-		}
-
-		try {
-			int result;
-			AEWin32Access accessor = AEWin32Manager.getAccessor(true);
-			if (accessor == null) {
-				result = -123;
-			} else {
-				if (azRunner != null) {
-					// create a batch file to run the updater, then to restart azureus
-					// bceause the updater would restart azureus as administrator user
-					// and confuse the user
-					fileRestart = FileUtil.getUserFile("restart.bat");
-					String s = "title Azureus Updater Runner\r\n";
-					s += exeUpdater + " \"updateonly\"";
-					for (int i = 1; i < parameters.length; i++) {
-						s += " \"" + parameters[i].replaceAll("\\\"", "") + "\"";
-					}
-					s += "\r\n";
-					s += "start \"\" \"" + azRunner + "\"";
-					FileUtil.writeBytesAsFile(fileRestart.getAbsolutePath(), s.getBytes());
-
-					result = accessor.shellExecute(null, fileRestart.getAbsolutePath(),
-							null, SystemProperties.getApplicationPath(),
-							AEWin32Access.SW_SHOWMINIMIZED);
-				} else {
-					String execEXE = "\"-J" + getClassPath().replaceAll("\\\"", "")
-							+ "\" ";
-
-					for (int i = 0; i < properties.length; i++) {
-						execEXE += "\"-J" + properties[i].replaceAll("\\\"", "") + "\" ";
-					}
-
-					for (int i = 0; i < parameters.length; i++) {
-						execEXE += " \"" + parameters[i].replaceAll("\\\"", "") + "\"";
-					}
-
-					log.println("Launch via " + exeUpdater + " params " + execEXE);
-					result = accessor.shellExecute(null, exeUpdater, execEXE,
-							SystemProperties.getApplicationPath(), AEWin32Access.SW_NORMAL);
-				}
-			}
-
-			/*
-			 * Some results:
-			 * 0: OOM
-			 * 2: FNF
-			 * 3: Path Not Foud
-			 * 5: Access Denied (User clicked cancel on admin access dialog)
-			 * 8: OOM
-			 * 11: Bad Format
-			 * 26: Sharing Violation
-			 * 27: Association incomplete
-			 * 28: DDE Timeout
-			 * 29: DDE Fail
-			 * 30: DDE Busy
-			 * 31: No Association
-			 * 32: DLL Not found
-			 * >32: OK!
-			 */
-			log.println("   -> " + result);
-
-			if (result <= 32) {
-				String sErrorReason = "";
-				String key = null;
-
-				switch (result) {
-					case 0:
-					case 8:
-						key = "oom";
-						break;
-
-					case 2:
-						key = "fnf";
-						break;
-
-					case 3:
-						key = "pnf";
-						break;
-
-					case 5:
-						key = "denied";
-						break;
-
-					case 11:
-						key = "bad";
-						break;
-
-					case -123:
-						key = "nowin32";
-						break;
-
-					default:
-						sErrorReason = "" + result;
-						break;
-				}
-				if (key != null) {
-					sErrorReason = MessageText.getString("restart.error." + key,
-							new String[] {
-								exeUpdater,
-								SystemProperties.getApplicationPath(),
-							});
-				}
-				Logger.log(new LogAlert(false, LogAlert.AT_ERROR,
-						MessageText.getString("restart.error", new String[] {
-							sErrorReason
-						})));
-				return false;
-			}
-		} catch (Throwable f) {
-
-			f.printStackTrace(log);
-
-			return javaSpawn(log, backupJavaRunString);
-		}
-
-		return true;
-	}
-  
-
   // ****************** This code is copied into Restarter / Updater so make changes there too !!!
   
   
@@ -446,59 +221,9 @@
     String[]  parameters,
     boolean update_only) 
   {
-    if(Constants.isOSX){
-    	
-    	restartAzureus_OSX(log,mainClass,properties,parameters);
-    	
-    }else if( Constants.isUnix ){
-    	
     	restartAzureus_Unix(log,mainClass,properties,parameters);
-      
-    }else{
-    	
-    	restartAzureus_win32(log,mainClass,properties,parameters,update_only);
-    }
   }
   
-  private void 
-  restartAzureus_win32(
-      PrintWriter log,
-    String    mainClass,
-    String[]  properties,
-    String[]  parameters,
-    boolean	update_only) 
-  {
-  	String exeUpdater = getExeUpdater(log);  // Not for Updater.java
-
-  	String exec;
-
-		//Classic restart way using Runtime.exec directly on java(w)
-		exec = "\"" + JAVA_EXEC_DIR + "javaw\" " + getClassPath() + getLibraryPath();
-
-		for (int i = 0; i < properties.length; i++) {
-			exec += properties[i] + " ";
-		}
-
-		exec += mainClass;
-
-		for (int i = 0; i < parameters.length; i++) {
-			exec += " \"" + parameters[i] + "\"";
-		}
-
-		if (exeUpdater != null) {
-			restartViaEXE(log, exeUpdater, properties, parameters, exec, update_only);
-		} else {
-			if (log != null) {
-				log.println("  " + exec);
-			}
-
-			if (!win32NativeRestart(log, exec)) {
-				javaSpawn(log, exec);
-			}
-		}
-	}
-  
-
 	private boolean
 	javaSpawn(
 		PrintWriter log, 
@@ -522,30 +247,6 @@
 		}
 	}
 
-	private void 
-  restartAzureus_OSX(
-      PrintWriter log,
-    String mainClass,
-    String[]  properties,
-    String[] parameters) 
-  {
-
-     String exec = "\"" + JAVA_EXEC_DIR + "java\" " + getClassPath() + getLibraryPath();
-  	 
-     for (int i=0;i<properties.length;i++){
-    	 exec += properties[i] + " ";
-     }
-    
-     exec += mainClass ;
-    
-     for(int i = 0 ; i < parameters.length ; i++) {
-    	 exec += " \"" + parameters[i] + "\"";
-     }
-
-     runExternalCommandViaUnixShell( log, exec );
-  }
-  
-  
   
   private int getUnixScriptVersion() {
 		String sVersion = System.getProperty("azureus.script.version", "0");
--- SFEazureus-3.0.2.2/com/aelitis/azureus/ui/swt/views/skin/TorrentListViewsUtils.java.orig	2007-09-08 15:22:11.295870225 +0700
+++ SFEazureus-3.0.2.2/com/aelitis/azureus/ui/swt/views/skin/TorrentListViewsUtils.java	2007-09-08 15:26:18.443707036 +0700
@@ -68,7 +68,6 @@
 import com.aelitis.azureus.ui.swt.views.TorrentListViewListener;
 import com.aelitis.azureus.util.AdManager;
 import com.aelitis.azureus.util.Constants;
-import com.aelitis.azureus.util.win32.Win32Utils;
 
 import org.gudy.azureus2.plugins.PluginInterface;
 import org.gudy.azureus2.plugins.download.Download;
@@ -510,15 +509,13 @@
 	 * @param string
 	 */
 	private static boolean runInMediaPlayer(String mediaFile) {
-		if (Constants.isWindows) {
-			String wmpEXE = Win32Utils.getWMP();
-			if (new File(wmpEXE).exists()) {
-				try {
-					Runtime.getRuntime().exec(wmpEXE + " \"" + mediaFile + "\"");
-					return true;
-				} catch (IOException e) {
-					Debug.out("error playing " + mediaFile + " via WMP " + mediaFile, e);
-				}
+		String mediaplayer = "/usr/bin/gmplayer";
+		if (new File(mediaplayer).exists()) {
+			try {
+				Runtime.getRuntime().exec(mediaplayer + " \"" + mediaFile + "\"");
+				return true;
+			} catch (IOException e) {
+				Debug.out("error playing " + mediaFile + " via WMP " + mediaFile, e);
 			}
 		}
 		return false;
