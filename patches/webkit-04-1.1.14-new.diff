diff -r 870b44afbf41 JavaScriptCore/parser/NodeConstructors.h
--- a/JavaScriptCore/parser/NodeConstructors.h	Tue Dec 29 16:48:51 2009 +0800
+++ b/JavaScriptCore/parser/NodeConstructors.h	Tue Dec 29 16:49:21 2009 +0800
@@ -25,6 +25,8 @@
 #include "Lexer.h"
 #include "Parser.h"
 
+#define inline
+
 namespace JSC {
 
     inline void* ParserArenaFreeable::operator new(size_t size, JSGlobalData* globalData)
@@ -905,4 +907,6 @@
 
 } // namespace JSC
 
+#undef inline
+
 #endif // NodeConstructors_h
diff -r 870b44afbf41 JavaScriptCore/wtf/Threading.h
--- a/JavaScriptCore/wtf/Threading.h	Tue Dec 29 16:48:51 2009 +0800
+++ b/JavaScriptCore/wtf/Threading.h	Tue Dec 29 16:49:21 2009 +0800
@@ -61,6 +61,8 @@
 
 #include "Platform.h"
 
+#include "atomic.h"
+
 #if PLATFORM(WINCE)
 #include <windows.h>
 #endif
@@ -247,6 +249,9 @@
 
 #endif
 
+inline int atomicIncrement(int volatile* addend) { return atomic_inc_32_nv(reinterpret_cast<unsigned int volatile*>(addend)); }
+inline int atomicDecrement(int volatile* addend) { return atomic_dec_32_nv(reinterpret_cast<unsigned int volatile*>(addend)); }
+
 class ThreadSafeSharedBase : public Noncopyable {
 public:
     ThreadSafeSharedBase(int initialRefCount = 1)
diff -r 870b44afbf41 WebCore/css/CSSComputedStyleDeclaration.cpp
--- a/WebCore/css/CSSComputedStyleDeclaration.cpp	Tue Dec 29 16:48:51 2009 +0800
+++ b/WebCore/css/CSSComputedStyleDeclaration.cpp	Tue Dec 29 16:49:21 2009 +0800
@@ -566,8 +566,8 @@
         RefPtr<CSSPrimitiveValue> x = CSSPrimitiveValue::create(s->x, CSSPrimitiveValue::CSS_PX);
         RefPtr<CSSPrimitiveValue> y = CSSPrimitiveValue::create(s->y, CSSPrimitiveValue::CSS_PX);
         RefPtr<CSSPrimitiveValue> blur = CSSPrimitiveValue::create(s->blur, CSSPrimitiveValue::CSS_PX);
-        RefPtr<CSSPrimitiveValue> spread = propertyID == CSSPropertyTextShadow ? 0 : CSSPrimitiveValue::create(s->spread, CSSPrimitiveValue::CSS_PX);
-        RefPtr<CSSPrimitiveValue> style = propertyID == CSSPropertyTextShadow || s->style == Normal ? 0 : CSSPrimitiveValue::createIdentifier(CSSValueInset);
+        RefPtr<CSSPrimitiveValue> spread = propertyID == CSSPropertyTextShadow ? (WTF::PassRefPtr<WebCore::CSSPrimitiveValue>) 0 : CSSPrimitiveValue::create(s->spread, CSSPrimitiveValue::CSS_PX);
+        RefPtr<CSSPrimitiveValue> style = propertyID == CSSPropertyTextShadow || s->style == Normal ?(WTF::PassRefPtr<WebCore::CSSPrimitiveValue>) 0 : CSSPrimitiveValue::createIdentifier(CSSValueInset);
         RefPtr<CSSPrimitiveValue> color = CSSPrimitiveValue::createColor(s->color.rgb());
         list->prepend(ShadowValue::create(x.release(), y.release(), blur.release(), spread.release(), style.release(), color.release()));
     }
diff -r 870b44afbf41 WebCore/loader/DocumentLoader.h
--- a/WebCore/loader/DocumentLoader.h	Tue Dec 29 16:48:51 2009 +0800
+++ b/WebCore/loader/DocumentLoader.h	Tue Dec 29 16:49:21 2009 +0800
@@ -163,7 +163,7 @@
         String clientRedirectDestinationForHistory() const { return urlForHistory(); }
         void setClientRedirectSourceForHistory(const String& clientedirectSourceForHistory) { m_clientRedirectSourceForHistory = clientedirectSourceForHistory; }
         
-        String serverRedirectSourceForHistory() const { return urlForHistory() == url() ? (KURL)String() : urlForHistory(); } // null if no server redirect occurred.
+        String serverRedirectSourceForHistory() const { return urlForHistory() == url() ? KURL() : urlForHistory(); } // null if no server redirect occurred.
         String serverRedirectDestinationForHistory() const { return url(); }
 
         bool didCreateGlobalHistoryEntry() const { return m_didCreateGlobalHistoryEntry; }
diff -r 870b44afbf41 WebCore/loader/FrameLoader.cpp
--- a/WebCore/loader/FrameLoader.cpp	Tue Dec 29 16:48:51 2009 +0800
+++ b/WebCore/loader/FrameLoader.cpp	Tue Dec 29 16:49:21 2009 +0800
@@ -1932,7 +1932,7 @@
     m_loadType = FrameLoadTypeStandard;
     RefPtr<DocumentLoader> loader = m_client->createDocumentLoader(request, substituteData);
     if (lockHistory && m_documentLoader)
-        loader->setClientRedirectSourceForHistory(m_documentLoader->didCreateGlobalHistoryEntry() ? m_documentLoader->urlForHistory() : (KURL)m_documentLoader->clientRedirectSourceForHistory());
+        loader->setClientRedirectSourceForHistory(m_documentLoader->didCreateGlobalHistoryEntry() ? (String)m_documentLoader->urlForHistory() : m_documentLoader->clientRedirectSourceForHistory());
     load(loader.get());
 }
 
@@ -1956,7 +1956,7 @@
 {
     RefPtr<DocumentLoader> loader = m_client->createDocumentLoader(request, SubstituteData());
     if (lockHistory && m_documentLoader)
-        loader->setClientRedirectSourceForHistory(m_documentLoader->didCreateGlobalHistoryEntry() ? m_documentLoader->urlForHistory() : (KURL)m_documentLoader->clientRedirectSourceForHistory());
+        loader->setClientRedirectSourceForHistory(m_documentLoader->didCreateGlobalHistoryEntry() ? (String)m_documentLoader->urlForHistory() : m_documentLoader->clientRedirectSourceForHistory());
 
     loader->setTriggeringAction(action);
     if (m_documentLoader)
diff -r 870b44afbf41 WebCore/platform/gtk/PopupMenuGtk.cpp
--- a/WebCore/platform/gtk/PopupMenuGtk.cpp	Tue Dec 29 16:48:51 2009 +0800
+++ b/WebCore/platform/gtk/PopupMenuGtk.cpp	Tue Dec 29 16:49:21 2009 +0800
@@ -57,7 +57,7 @@
         g_object_ref_sink(G_OBJECT(m_popup));
         g_signal_connect(m_popup, "unmap", G_CALLBACK(menuUnmapped), this);
     } else
-        gtk_container_foreach(GTK_CONTAINER(m_popup), reinterpret_cast<GtkCallback>(menuRemoveItem), this);
+        gtk_container_foreach(GTK_CONTAINER(m_popup), (GtkCallback)(menuRemoveItem), this);
 
     int x, y;
     gdk_window_get_origin(GTK_WIDGET(view->hostWindow()->platformPageClient())->window, &x, &y);
@@ -108,7 +108,7 @@
         // Center vertically the empty popup in the combo box area
         m_menuPosition.setY(m_menuPosition.y() - rect.height() / 2);
 
-    gtk_menu_popup(m_popup, NULL, NULL, reinterpret_cast<GtkMenuPositionFunc>(menuPositionFunction), this, 0, gtk_get_current_event_time());
+    gtk_menu_popup(m_popup, NULL, NULL, (GtkMenuPositionFunc)(menuPositionFunction), this, 0, gtk_get_current_event_time());
 }
 
 void PopupMenu::hide()
diff -r 870b44afbf41 WebCore/platform/network/soup/ResourceHandleSoup.cpp
--- a/WebCore/platform/network/soup/ResourceHandleSoup.cpp	Tue Dec 29 16:48:51 2009 +0800
+++ b/WebCore/platform/network/soup/ResourceHandleSoup.cpp	Tue Dec 29 16:49:21 2009 +0800
@@ -534,7 +534,7 @@
                                                                         g_mapped_file_get_length(fileMapping),
                                                                         fileMapping,
 #if GLIB_CHECK_VERSION(2, 21, 3)
-                                                                        reinterpret_cast<GDestroyNotify>(g_mapped_file_unref));
+                                                                        (GDestroyNotify)(g_mapped_file_unref));
 #else
                                                                         reinterpret_cast<GDestroyNotify>(g_mapped_file_free));
 #endif
diff -r e6b4ef1501b8 WebCore/platform/graphics/gtk/VideoSinkGStreamer.cpp
--- a/WebCore/platform/graphics/gtk/VideoSinkGStreamer.cpp	Tue Jan 05 12:57:26 2010 +0800
+++ b/WebCore/platform/graphics/gtk/VideoSinkGStreamer.cpp	Tue Jan 05 16:37:17 2010 +0800
@@ -35,12 +35,13 @@
 
 static GstStaticPadTemplate sinktemplate = GST_STATIC_PAD_TEMPLATE("sink",
                                                                    GST_PAD_SINK, GST_PAD_ALWAYS,
+								   GST_STATIC_CAPS(GST_VIDEO_CAPS_xRGB ";" GST_VIDEO_CAPS_ARGB)
 // CAIRO_FORMAT_RGB24 used to render the video buffers is little/big endian dependant.
-#if G_BYTE_ORDER == G_LITTLE_ENDIAN
-                                                                   GST_STATIC_CAPS(GST_VIDEO_CAPS_BGRx ";" GST_VIDEO_CAPS_BGRA)
-#else
-                                                                   GST_STATIC_CAPS(GST_VIDEO_CAPS_xRGB ";" GST_VIDEO_CAPS_ARGB)
-#endif
+//#if G_BYTE_ORDER == G_LITTLE_ENDIAN
+//                                                                   GST_STATIC_CAPS(GST_VIDEO_CAPS_BGRx ";" GST_VIDEO_CAPS_BGRA)
+//#else
+//                                                                   GST_STATIC_CAPS(GST_VIDEO_CAPS_xRGB ";" GST_VIDEO_CAPS_ARGB)
+//#endif
 );
 
 GST_DEBUG_CATEGORY_STATIC(webkit_video_sink_debug);
