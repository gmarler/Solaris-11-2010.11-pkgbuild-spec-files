diff -r d4d2f47b7a3e JavaScriptCore/wtf/OwnPtr.h
--- a/JavaScriptCore/wtf/OwnPtr.h	Fri May 14 22:59:13 2010 +0800
+++ b/JavaScriptCore/wtf/OwnPtr.h	Tue May 18 20:19:08 2010 +0800
@@ -47,12 +47,12 @@
         // transients for assigning a PassOwnPtr<T> object to a stack-allocated
         // OwnPtr<T> object.  It should never be called explicitly and gcc
         // should optimize away the constructor when generating code.
-        OwnPtr(const OwnPtr<ValueType>& o);
+        OwnPtr(const OwnPtr<ValueType>& o) : m_ptr(o.release()) { }
 
         ~OwnPtr() { deleteOwnedPtr(m_ptr); }
 
         PtrType get() const { return m_ptr; }
-        PtrType release() { PtrType ptr = m_ptr; m_ptr = 0; return ptr; }
+        PtrType release() const {return m_ptr;}// PtrType ptr = m_ptr; m_ptr = 0; return ptr; }
 
         // FIXME: This should be renamed to adopt. 
         void set(PtrType ptr) { ASSERT(!ptr || m_ptr != ptr); deleteOwnedPtr(m_ptr); m_ptr = ptr; }
diff -r cea4c6b56f01 WebCore/workers/WorkerMessagingProxy.cpp
--- a/WebCore/workers/WorkerMessagingProxy.cpp	Thu May 13 18:27:39 2010 +0800
+++ b/WebCore/workers/WorkerMessagingProxy.cpp	Fri May 14 18:42:53 2010 +0800
@@ -62,7 +62,7 @@
     {
         ASSERT(scriptContext->isWorkerContext());
         DedicatedWorkerContext* context = static_cast<DedicatedWorkerContext*>(scriptContext);
-        OwnPtr<MessagePortArray> ports = MessagePort::entanglePorts(*scriptContext, m_channels.release());
+        OwnPtr<MessagePortArray> ports ;//= MessagePort::entanglePorts(*scriptContext, m_channels.release());
         context->dispatchEvent(MessageEvent::create(ports.release(), m_message));
         context->thread()->workerObjectProxy().confirmMessageFromWorkerObject(context->hasPendingActivity());
     }
@@ -93,7 +93,7 @@
         if (!workerObject || m_messagingProxy->askedToTerminate())
             return;
 
-        OwnPtr<MessagePortArray> ports = MessagePort::entanglePorts(*scriptContext, m_channels.release());
+        OwnPtr<MessagePortArray> ports ;//= MessagePort::entanglePorts(*scriptContext, m_channels.release());
         workerObject->dispatchEvent(MessageEvent::create(ports.release(), m_message));
     }
 
