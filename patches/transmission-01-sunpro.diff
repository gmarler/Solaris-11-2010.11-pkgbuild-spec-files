Index: libtransmission/natpmp.c
===================================================================
--- a/libtransmission/natpmp.c	(revision 5926)
+++ b/libtransmission/natpmp.c	(working copy)
@@ -126,7 +126,7 @@
         const int val = readnatpmpresponseorretry( &nat->natpmp, &response );
         logVal( "readnatpmpresponseorretry", val );
         if( val >= 0 ) {
-            tr_ninf( getKey(), _( "Found public address \"%s\"" ), inet_ntoa( response.publicaddress.addr ) );
+            tr_ninf( getKey(), _( "Found public address \"%s\"" ), inet_ntoa( response.pnu.publicaddress.addr ) );
             nat->state = TR_NATPMP_IDLE;
         } else if( val != NATPMP_TRYAGAIN ) {
             nat->state = TR_NATPMP_ERR;
@@ -188,7 +188,7 @@
             nat->state = TR_NATPMP_IDLE;
             nat->isMapped = 1;
             nat->renewTime = time( NULL ) + LIFETIME_SECS;
-            nat->port = resp.newportmapping.privateport;
+            nat->port = resp.pnu.newportmapping.privateport;
             tr_ninf( getKey(), _( "Port %d forwarded successfully" ), nat->port );
         } else if( val != NATPMP_TRYAGAIN ) {
             nat->state = TR_NATPMP_ERR;
Index: libtransmission/torrent.c
===================================================================
--- a/libtransmission/torrent.c	(revision 5926)
+++ b/libtransmission/torrent.c	(working copy)
@@ -865,9 +865,9 @@
 
 void tr_torrentAvailability( const tr_torrent * tor, int8_t * tab, int size )
 {
-    return tr_peerMgrTorrentAvailability( tor->handle->peerMgr,
-                                          tor->info.hash,
-                                          tab, size );
+    tr_peerMgrTorrentAvailability( tor->handle->peerMgr,
+                                   tor->info.hash,
+                                   tab, size );
 }
 
 void
Index: third-party/libnatpmp/natpmp.c
===================================================================
--- a/third-party/libnatpmp/natpmp.c	(revision 5926)
+++ b/third-party/libnatpmp/natpmp.c	(working copy)
@@ -203,11 +203,11 @@
 			response->type = buf[1] & 0x7f;
 			if(buf[1] == 128)
 				//response->publicaddress.addr = *((uint32_t *)(buf + 8));
-				response->publicaddress.addr.s_addr = *((uint32_t *)(buf + 8));
+				response->pnu.publicaddress.addr.s_addr = *((uint32_t *)(buf + 8));
 			else {
-				response->newportmapping.privateport = ntohs(*((uint16_t *)(buf + 8)));
-				response->newportmapping.mappedpublicport = ntohs(*((uint16_t *)(buf + 10)));
-				response->newportmapping.lifetime = ntohl(*((uint32_t *)(buf + 12)));
+				response->pnu.newportmapping.privateport = ntohs(*((uint16_t *)(buf + 8)));
+				response->pnu.newportmapping.mappedpublicport = ntohs(*((uint16_t *)(buf + 10)));
+				response->pnu.newportmapping.lifetime = ntohl(*((uint32_t *)(buf + 12)));
 			}
 			n = 0;
 		}
Index: third-party/libnatpmp/getgateway.c
===================================================================
--- a/third-party/libnatpmp/getgateway.c	(revision 5926)
+++ b/third-party/libnatpmp/getgateway.c	(working copy)
@@ -25,7 +25,7 @@
 #endif
 #include "getgateway.h"
 
-#ifdef __linux__
+#if defined(__linux__) || (defined(__sun) && defined(__SVR4))
 int getdefaultgateway(in_addr_t * addr)
 {
 	long d, g;
Index: third-party/libnatpmp/natpmp.h
===================================================================
--- a/third-party/libnatpmp/natpmp.h	(revision 5926)
+++ b/third-party/libnatpmp/natpmp.h	(working copy)
@@ -52,7 +52,7 @@
 			uint16_t mappedpublicport;
 			uint32_t lifetime;
 		} newportmapping;
-	};
+	} pnu;
 } natpmpresp_t;
 
 /* possible values for type field of natpmpresp_t */
