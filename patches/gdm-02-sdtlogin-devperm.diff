Index: daemon/gdm-server.c
===================================================================
--- daemon/gdm-server.c	(revision 5828)
+++ daemon/gdm-server.c	(working copy)
@@ -34,6 +34,11 @@
 #include <signal.h>
 #include <sys/resource.h>
 
+#ifdef __sun
+#include <sys/param.h>
+#define SDTLOGIN_DIR "/var/dt/sdtlogin"
+#endif
+
 #include <glib.h>
 #include <glib/gi18n.h>
 #include <glib/gstdio.h>
@@ -621,6 +626,25 @@
                 _exit (SERVER_ABORT);
         }
 
+#if __sun
+        {
+                /* Remove old communication pipe, if present */
+                char old_pipe[MAXPATHLEN];
+                char *p, *tmp;
+                int display_num;
+
+                if ((tmp = strstr (server->priv->display_name, ":")) != NULL) {
+                        tmp++;
+                        display_num = g_ascii_strtod (tmp, &p);
+
+                        if (errno == 0) {
+                                sprintf (old_pipe, "%s/%d", SDTLOGIN_DIR, display_num);
+                                g_unlink (old_pipe);
+                        }
+                }
+        }
+#endif
+
         env = get_server_environment (server);
 
         freeme = g_strjoinv (" ", argv);
Index: daemon/gdm-session-worker.c
===================================================================
--- daemon/gdm-session-worker.c	(revision 5828)
+++ daemon/gdm-session-worker.c	(working copy)
@@ -32,6 +32,18 @@
 #include <grp.h>
 #include <pwd.h>
 
+#ifdef  HAVE_LOGINDEVPERM
+#include <libdevinfo.h>
+#endif  /* HAVE_LOGINDEVPERM */
+
+#if __sun
+#include <sys/param.h>
+#define SDTLOGIN_DIR "/var/dt/sdtlogin"
+#define GDM_PAM_QUAL
+#else
+#define GDM_PAM_QUAL const
+#endif
+
 #include <security/pam_appl.h>
 
 #include <glib.h>
@@ -137,12 +149,115 @@
 static void     queue_state_change              (GdmSessionWorker      *worker);
 
 typedef int (* GdmSessionWorkerPamNewMessagesFunc) (int,
-                                                    const struct pam_message **,
+                                                    GDM_PAM_QUAL struct pam_message **,
                                                     struct pam_response **,
                                                     gpointer);
 
 G_DEFINE_TYPE (GdmSessionWorker, gdm_session_worker, G_TYPE_OBJECT)
 
+#ifdef __sun
+void
+solaris_xserver_cred (char * username, struct passwd *passwd_entry, const char *x11_display_name)
+{
+        struct stat statbuf;
+        struct group *gr;
+        gid_t  groups[NGROUPS_UMAX];
+        char *home, *disp, *tmp, *p, pipe[MAXPATHLEN], info[MAXPATHLEN];
+        int display_number = 0;
+        int retval, fd, i, nb;
+        int ngroups;
+
+        if (g_access (passwd_entry->pw_dir, F_OK) != 0) {
+                g_debug ("solaris_xserver_cred: no HOME dir access\n");
+                return;
+        }
+
+        /*
+         * Handshake with server. Make sure it created a pipe.
+         * Open and write.
+         */
+        if ((tmp = strstr (x11_display_name, ":")) != NULL) {
+                tmp++;
+                display_number = g_ascii_strtod (tmp, &p);
+
+                if (errno != 0) {
+                        g_debug ("solaris_xserver_cred: problem getting display number\n");
+                        return;
+                }
+        }
+
+        sprintf (pipe, "%s/%d", SDTLOGIN_DIR, display_number);
+
+        if (g_stat (SDTLOGIN_DIR, &statbuf) == 0) {
+                if (! statbuf.st_mode & S_IFDIR) {
+                        g_debug ("solaris_xserver_cred: %s is not a directory\n",
+                                 SDTLOGIN_DIR);
+                        return;
+                }
+        } else {
+                g_debug ("solaris_xserver_cred: %s does not exist\n", SDTLOGIN_DIR);
+                return;
+        }
+
+        fd = open (pipe, O_RDWR);
+        g_unlink (pipe);
+
+        if (fd < 0) {
+                g_debug ("solaris_xserver_cred: could not open %s\n", pipe);
+                return;
+        }
+        if (fstat (fd, &statbuf) == 0 ) {
+                if ( ! statbuf.st_mode & S_IFIFO) {
+                        close (fd);
+                        g_debug ("solaris_xserver_cred: %s is not a pipe\n", pipe);
+                        return;
+                }
+        } else {
+                close (fd);
+                g_debug ("solaris_xserver_cred: %s does not exist\n", pipe);
+                return;
+        }
+
+        sprintf (info, "GID=\"%d\"; ", passwd_entry->pw_gid);
+        nb = write (fd, info, strlen (info));
+        g_debug ("solaris_xserver_cred: %s\n", info);
+
+        if (initgroups (username, passwd_entry->pw_gid) == -1) {
+                ngroups = 0;
+        } else {
+                ngroups = getgroups (NGROUPS_UMAX, groups);
+        }
+
+        for (i=0; i < ngroups; i++) {
+                sprintf (info, "G_LIST_ID=\"%u\" ", groups[i]);
+                nb = write (fd, info, strlen (info));
+                g_debug ("solaris_xserver_cred: %s\n", info);
+        }
+
+        if (ngroups > 0) {
+                sprintf (info, ";");
+                write (fd, info, strlen (info));
+        }
+
+        sprintf (info, " HOME=\"%s\" ", passwd_entry->pw_dir);
+        nb = write (fd, info, strlen (info));
+        g_debug ("solaris_xserver_cred: %s\n", info);
+
+        sprintf (info, " UID=\"%d\" EOF=\"\";", passwd_entry->pw_uid);
+        nb = write (fd, info, strlen (info));
+        g_debug ("solaris_xserver_cred: %s\n", info);
+
+        /*
+         * Handshake with server. Make sure it read the pipe.
+         *
+         * Close file descriptor.
+         */
+        close (fd);
+
+        return;
+}
+#endif
+
 GQuark
 gdm_session_worker_error_quark (void)
 {
@@ -469,7 +584,11 @@
 gdm_session_worker_get_username (GdmSessionWorker  *worker,
                                  char             **username)
 {
+#ifdef __sun
+        gpointer item;
+#else
         gconstpointer item;
+#endif
 
         g_assert (worker->priv->pam_handle != NULL);
 
@@ -760,7 +879,7 @@
 
 static int
 gdm_session_worker_pam_new_messages_handler (int                        number_of_messages,
-                                             const struct pam_message **messages,
+                                             GDM_PAM_QUAL struct pam_message **messages,
                                              struct pam_response      **responses,
                                              GdmSessionWorker          *worker)
 {
@@ -872,6 +991,22 @@
         if (worker->priv->state >= GDM_SESSION_WORKER_STATE_SESSION_OPENED) {
                 pam_close_session (worker->priv->pam_handle, 0);
                 gdm_session_auditor_report_logout (worker->priv->auditor);
+
+#ifdef  HAVE_LOGINDEVPERM
+                /*
+                 * Only do logindevperm processing if /dev/console or
+                 * a device associated with a VT
+                 */
+                if (worker->priv->display_device != NULL &&
+                   (strncmp (worker->priv->display_device, "/dev/vt/", strlen ("/dev/vt/")) == 0 ||
+                    strcmp  (worker->priv->display_device, "/dev/console") == 0)) {
+                        g_debug ("Logindevperm logout for user %s, device %s",
+                                 worker->priv->username,
+                                 worker->priv->display_device);
+                        (void) di_devperm_logout (worker->priv->display_device);
+                }
+#endif  /* HAVE_LOGINDEVPERM */
+
         } else {
                 gdm_session_auditor_report_login_failure (worker->priv->auditor,
                                                           status,
@@ -1523,6 +1658,7 @@
 gdm_session_worker_open_user_session (GdmSessionWorker  *worker,
                                       GError           **error)
 {
+        struct passwd *passwd_entry;
         int error_code;
 
         g_assert (worker->priv->state == GDM_SESSION_WORKER_STATE_ACCREDITED);
@@ -1549,6 +1685,32 @@
 
         gdm_session_auditor_report_login (worker->priv->auditor);
 
+
+        passwd_entry = getpwnam (worker->priv->username);
+#ifdef __sun
+        solaris_xserver_cred (worker->priv->username,
+                              passwd_entry,
+                              worker->priv->x11_display_name);
+#endif
+#ifdef  HAVE_LOGINDEVPERM
+        /*
+         * Only do logindevperm processing if /dev/console or
+         * a device associated with a VT
+         */
+        if (worker->priv->display_device != NULL &&
+           (strncmp (worker->priv->display_device, "/dev/vt/", strlen ("/dev/vt/")) == 0 ||
+            strcmp  (worker->priv->display_device, "/dev/console") == 0)) {
+                g_debug ("Logindevperm login for user %s, device %s",
+                         worker->priv->username,
+                         worker->priv->display_device);
+                (void) di_devperm_login (worker->priv->display_device,
+                                         passwd_entry->pw_uid,
+                                         passwd_entry->pw_gid,
+                                         NULL);
+        }
+#endif  /* HAVE_LOGINDEVPERM */
+
+
         return TRUE;
 }
 
--- configure.ac-orig	2008-08-07 03:05:23.833583000 -0500
+++ configure.ac	2008-08-07 03:05:45.508204000 -0500
@@ -1006,6 +1006,12 @@ else
    AC_MSG_RESULT(no)
 fi
 
+# Check for Solaris logindevperm support
+#
+AC_CHECK_LIB(devinfo, di_devperm_login, [
+                        AC_DEFINE(HAVE_LOGINDEVPERM)
+                            PAM_LIBS="$PAM_LIBS -ldevinfo" ])
+
 dnl ---------------------------------------------------------------------------
 dnl - Check for audit framework
 dnl ---------------------------------------------------------------------------
